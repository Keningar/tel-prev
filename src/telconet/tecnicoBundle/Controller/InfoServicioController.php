<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
namespace telconet\tecnicoBundle\Controller;

use Doctrine\DBAL\DBALException;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use Symfony\Component\Config\Definition\Exception\Exception;
use telconet\schemaBundle\Entity\InfoPersonaEmpresaRolCarac;
use telconet\schemaBundle\Entity\InfoPuntoCaracteristica;
use telconet\schemaBundle\Entity\InfoServicioProdCaract;
use telconet\schemaBundle\Entity\InfoIp;
use telconet\schemaBundle\Entity\InfoServicioHistorial;
use telconet\schemaBundle\Entity\InfoDetalleSolHist;
use telconet\schemaBundle\Entity\InfoRutaElemento;
use telconet\schemaBundle\Entity\InfoHistorialElemento;
use telconet\tecnicoBundle\Service\InfoCambioElementoService;
use telconet\comercialBundle\Service\SolicitudesService;
use telconet\tecnicoBundle\Service\InfoServicioTecnicoService;
use telconet\tecnicoBundle\Service\InfoActivarPuertoService;
use telconet\tecnicoBundle\Service\InfoConfirmarServicio;
use telconet\schemaBundle\Entity\InfoDetalleSolicitud;
use telconet\schemaBundle\Entity\InfoDetalle;
use telconet\schemaBundle\Entity\InfoDetalleHistorial;
use telconet\schemaBundle\Entity\InfoDetalleAsignacion;
use telconet\schemaBundle\Entity\InfoCriterioAfectado;
use telconet\schemaBundle\Entity\InfoParteAfectada;
use telconet\schemaBundle\Entity\InfoDetalleSolCaract;
use telconet\schemaBundle\Entity\InfoEnlace;
use telconet\schemaBundle\Entity\InfoElemento;
use telconet\schemaBundle\Entity\InfoEmpresaElementoUbica;
use telconet\schemaBundle\Entity\InfoEmpresaElemento;
use telconet\schemaBundle\Entity\InfoDetalleElemento;
use telconet\schemaBundle\Entity\InfoServicioRecursoDet;
use telconet\planificacionBundle\Service\PlanificarService;

use Symfony\Component\Finder\Finder;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use JMS\SecurityExtraBundle\Annotation\Secure;

/**
 * Clase que maneja las acciones relacionadas con los Servicios
 * 
 * @author Versión Inicial
 * @version 1.0
 * 
 * @author Duval Medina C. <dmedina@telconet.ec>
 * @version 1.1 2016-09-23 - Eliminación de 'use' no utilizadas
 */
class InfoServicioController extends Controller
{
    
    /**
     * clientesAction
     * 
     * Funcion utilizada para setear roles permitidos a usuario en sesión en el telcos
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 26-08-2016 - Se agrega seteo de perfil para uso de herramienta de regularización de servicios TN
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 20-09-2016 - Se agrega perfil para actualizar la MAC y para consultar enlaces completos de un servicio
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.3 28-09-2016 se agregó el permiso para ingresarElementoWifi
     * 
     * @since 1.0 26-08-2016
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 31-08-2016 Se adiciona la accion de reenviar información
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.5 17-02-2017 - Se añade la opcion de activacion de linea telefonica del producto netvoice
     * 
     * @author Allan Suarez <javera@telconet.ec>
     * @version 1.6 29-02-2017 se agregó el permiso para adminstracion de enrutamiento BGP
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.7 03-03-2017 se agregó el permiso para opcion de cambio de subredes publicas/privadas para productos intmpls
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.8 06-07-2017  Se agrego el permiso para asignar ipv4 publica / empresa MD
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.9 09-11-2017  Se agrego el permiso para administrar Maquinas Virtuales DC
     *
     * @author John Vera <javera@telconet.ec>
     * @version 2.0 06-09-2018  Se agrega los permisos para las opciones del producto lineas telefonia fija Permisos:
     *              |Cambiar equipo linea |Activar linea |Detalle llamada linea |Cortar llamada saliente linea |Activar Llamada Saliente Linea
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 05-04-2019  Se agrega un nuevo perfil que permite definir si se puede reutilizar un equipo ya instalado en un cambio de CPE.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.2 11-04-2019  Se agrega permiso para el nuevo perfil creado (McAfee actualizacion correo) para edición
     *                          de correo electrónico de servicios mcafee
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.3 27-06-2019  Se agregó nuevo perfil utilizado para la generación de solicitudes de cambio de equipo por soporte
     * @since 2.2
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.4 16-07-2019 | Se agrega permiso para el nuevo perfil (Coordinar Nodo Wifi Radio) para que puedan asignar
     *                           responsable directamente desde el grid tecnico.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.5 28-08-2019 - Se agrega la accion para migrar la vlan
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.6 29-08-2019 | Se agrega permisos para los botones relacionados a Wifi Alquiler Equipos.
     *
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.7 10-10-2019 - Se agregó botón de reenvío de licencias de Kaspersky a correo registrado
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.8 09-01-2020 - Se agrega la acción que permita reversar una orden de trabajo de Asignada a AsignadoTarea
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.9 23-03-2020 - Se agrega las acciones que permita reversar las solicitudes de cambio de ultima milla
     *                           y migración de anillo o vlan
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.0 30-06-2020 - Se agrega permiso para el nuevo perfil (Activar Cableado Estructurado) para que puedan asignar
     *                           responsable directamente desde el grid tecnico.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.1 06-12-2020 - Se agrega el perfil: crearFormularioSoporteParamountNoggin.
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 3.2 22-10-2020 - Se agrega permiso para el boton nuevo para activar suscriber id  desde el grid tecnico.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.3 25-01-2021 - Se agrega el perfil: activarSSIDMOVIL y recuperarClaveSSIDMOVIL
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 3.4 10-09-2021 - Se agrega el perfil: Crear Formulario Soporte ECDF.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 3.5 29-09-2021 - Se agrega permiso para boton de soporte L1 de Goltv
     * 
     */
    public function clientesAction(){

        ini_set('max_execution_time', 400000);
        $em = $this->getDoctrine()->getManager('telconet');
        $request = $this->getRequest();
        $session = $request->getSession();
        $idEmpresa = $session->get('idEmpresa');
        
        $rolesPermitidos = array();
        //MODULO 151 - TECNICO/CLIENTES
        if (true === $this->get('security.context')->isGranted('ROLE_151-315'))
        {
            $rolesPermitidos[] = 'ROLE_151-315'; //RECONECTAR SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-311'))
        {
            $rolesPermitidos[] = 'ROLE_151-311'; //CORTAR SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-313'))
        {
            $rolesPermitidos[] = 'ROLE_151-313'; //CANCELAR SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-6678'))
        {
            //MIGRACION DE VLAN
            $rolesPermitidos[] = 'ROLE_151-6678';
        }
        if (true === $this->get('security.context')->isGranted('ROLE_374-5097'))
        {
            $rolesPermitidos[] = 'ROLE_374-5097'; //Activar linea telefonica
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-829'))
        {
            $rolesPermitidos[] = 'ROLE_151-829'; //CAMBIO VELOCIDAD SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-830'))
        {
            $rolesPermitidos[] = 'ROLE_151-830'; //EDITAR INFO TECNICA
        }
        if(true === $this->get('security.context')->isGranted('ROLE_341-3957'))
        {
            $rolesPermitidos[] = 'ROLE_341-3957'; //ActivarWifi
        }
        if(true === $this->get('security.context')->isGranted('ROLE_341-4617'))
        {
            $rolesPermitidos[] = 'ROLE_341-4617'; //cambiarNodoWifi
        }
        if(true === $this->get('security.context')->isGranted('ROLE_341-4817'))
        {
            $rolesPermitidos[] = 'ROLE_341-4817'; //ingresarElementoWifi
        }         
        if(true === $this->get('security.context')->isGranted('ROLE_341-3977'))
        {
            $rolesPermitidos[] = 'ROLE_341-3977'; //CortarWifi
        }
        if(true === $this->get('security.context')->isGranted('ROLE_341-3958'))
        {
            $rolesPermitidos[] = 'ROLE_341-3958'; //ReconectarWifi
        }
        if(true === $this->get('security.context')->isGranted('ROLE_341-3978'))
        {
            $rolesPermitidos[] = 'ROLE_341-3978'; //CancelarWifi
        }
        if(true === $this->get('security.context')->isGranted('ROLE_341-3979'))
        {
            $rolesPermitidos[] = 'ROLE_341-3979'; //CambioEquipoWifi
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-831'))
        {
            $rolesPermitidos[] = 'ROLE_151-831'; //VER INFO TECNICA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-832'))
        {
            $rolesPermitidos[] = 'ROLE_151-832'; //CAMBIO PUERTO SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-833'))
        {
            $rolesPermitidos[] = 'ROLE_151-833'; //VER HISTORIAL SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-4637'))
        {
            $rolesPermitidos[] = 'ROLE_151-4637'; //REENVIAR INFORMACIÓN AL CLIENTE
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-834'))
        {
            $rolesPermitidos[] = 'ROLE_151-834'; //DESCARGAR PDF TECNICO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-835'))
        {
            $rolesPermitidos[] = 'ROLE_151-835'; //VER IP PUBLICA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-836'))
        {
            $rolesPermitidos[] = 'ROLE_151-836'; //NUEVA IP PUBLICA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-837'))
        {
            $rolesPermitidos[] = 'ROLE_151-837'; //ELIMINAR IP PUBLICA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-846'))
        {
            $rolesPermitidos[] = 'ROLE_151-846'; //ACTIVAR PUERTO SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-5457'))
        {
            $rolesPermitidos[] = 'ROLE_151-5457'; //ASIGNAR IPV4 PUBLICA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-847'))
        {
            $rolesPermitidos[] = 'ROLE_151-847'; //CONFIRMAR SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-848'))
        {
            $rolesPermitidos[] = 'ROLE_151-848'; //GRABAR PARAMETROS INICIALES SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-849'))
        {
            $rolesPermitidos[] = 'ROLE_151-849'; //VER PARAMETROS INICIALES SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-850'))
        {
            $rolesPermitidos[] = 'ROLE_151-850'; //VER DOMINIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-851'))
        {
            $rolesPermitidos[] = 'ROLE_151-851'; //AGREGAR DOMINIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-852'))
        {
            $rolesPermitidos[] = 'ROLE_151-852'; //ELIMINAR DOMINIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-853'))
        {
            $rolesPermitidos[] = 'ROLE_151-853'; //VER CORREO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-854'))
        {
            $rolesPermitidos[] = 'ROLE_151-854'; //AGREGAR CORREO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-7838'))
        {
            $rolesPermitidos[] = 'ROLE_151-7838'; //Activar SSID MOVIL
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-7857'))
        {
            $rolesPermitidos[] = 'ROLE_151-7857'; //Recuperar Clave SSID MOVIL
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-855'))
        {
            $rolesPermitidos[] = 'ROLE_151-855'; //VER PASSWORD CORREO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-856'))
        {
            $rolesPermitidos[] = 'ROLE_151-856'; //ELIMINAR CORREO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1107'))
        {
            $rolesPermitidos[] = 'ROLE_151-1107'; //CAMBIAR CPE
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-6477'))
        {
            $rolesPermitidos[] = 'ROLE_151-6477'; //REUTLIZAR MISMO EQUIPO EN CAMBIO DE CPE
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1298'))
        {
            $rolesPermitidos[] = 'ROLE_151-1298'; //CAMBIAR MAC IP FIJA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1299'))
        {
            $rolesPermitidos[] = 'ROLE_151-1299'; //CANCELAR IP FIJA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1297'))
        {
            $rolesPermitidos[] = 'ROLE_151-1297'; //ACTIVAR IP FIJA
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1377'))
        {
            $rolesPermitidos[] = 'ROLE_151-1377'; ///UPDATE PASSWORD
        }        
        if (true === $this->get('security.context')->isGranted('ROLE_151-1417'))
        {
            $rolesPermitidos[] = 'ROLE_151-1417'; //ACTUALIZAR INDICE CLIENTE
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1517'))
        {
            $rolesPermitidos[] = 'ROLE_151-1517'; //EJECUTAR CAMBIO LINEA PON
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1557'))
        {
            $rolesPermitidos[] = 'ROLE_151-1557'; //RECONFIGURAR PUERTO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-1657'))
        {
            $rolesPermitidos[] = 'ROLE_151-1657'; //SUBIR ACTA/ENCUESTA POST SERVICIO
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-2277'))
        {
            $rolesPermitidos[] = 'ROLE_151-2277'; //REVERSO SOLICITUD MIGRACION
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-4597'))
        {
            $rolesPermitidos[] = 'ROLE_151-4597'; //HERRAMIENTA DE REGULARIZACION DE SERVICIOS RADIO TN
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-2420'))
        {
            $rolesPermitidos[] = 'ROLE_151-2420'; //verLdapCliente
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-2421'))
        {
            $rolesPermitidos[] = 'ROLE_151-2421'; //configurarLdapCliente
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-3277'))
        {
            $rolesPermitidos[] = 'ROLE_151-3277'; //eliminar ldap cliente
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-2458'))
        {
            $rolesPermitidos[] = 'ROLE_151-2458'; //crearClienteLdap
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-3779'))
        {
            $rolesPermitidos[] = 'ROLE_151-3779'; //cambio de Ultima Milla
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-3837'))
        {
            $rolesPermitidos[] = 'ROLE_151-3837'; //Exportar Acta de Entrega (boton Ver PDF)
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-4197'))
        {
            $rolesPermitidos[] = 'ROLE_151-4197'; //Crear Cacti
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-4257'))
        {
            $rolesPermitidos[] = 'ROLE_151-4257'; // Recuperar Credenciales Servicio Netlife WIFI
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-4237'))
        {
            $rolesPermitidos[] = 'ROLE_151-4237'; // Generar Credenciales Servicio Netlife WIFI
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-4697'))
        {
            $rolesPermitidos[] = 'ROLE_151-4697'; // Actualización de MACs para Servicios de TN
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-4717'))
        {
            $rolesPermitidos[] = 'ROLE_151-4717'; // Consultar Información completa de enlaces de un Servicio determinado
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-5057'))
        {
            $rolesPermitidos[] = 'ROLE_151-5057'; // Agregar Servicio a un edificio pseudope
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-5017'))
        {
            $rolesPermitidos[] = 'ROLE_151-5017'; // Administracion Enrutamiento BGP
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-5137'))
        {
            $rolesPermitidos[] = 'ROLE_151-5137'; // Cambio de subredes publicas/privadas producto IntMpls
        }
        if (true === $this->get('security.context')->isGranted('ROLE_17-5437'))
        {
            $rolesPermitidos[] = 'ROLE_17-5437'; // Cambio de elemento pasivo
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-6497'))
        {
            $rolesPermitidos[] = 'ROLE_151-6497'; // Cambio de elemento por Soporte
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-7697'))
        {
            $rolesPermitidos[] = 'ROLE_151-7697'; // Formulario Soporte L1 Paramount y Noggin
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-8357'))
        {
            $rolesPermitidos[] = 'ROLE_151-8357'; // Formulario Soporte L2 ECDF
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-8419'))
        {
            $rolesPermitidos[] = 'ROLE_151-8419'; // Formulario Soporte L1 GolTv
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-5577'))
        {
            $rolesPermitidos[] = 'ROLE_151-5577'; // Administracion de Maquinas Virtuales
        }
        if (true === $this->get('security.context')->isGranted('ROLE_415-6044'))
        {
            $rolesPermitidos[] = 'ROLE_415-6044'; //Cambiar equipo linea
        }
        if (true === $this->get('security.context')->isGranted('ROLE_415-6045'))
        {
            $rolesPermitidos[] = 'ROLE_415-6045'; //Activar linea
        }
        if (true === $this->get('security.context')->isGranted('ROLE_415-6046'))
        {
            $rolesPermitidos[] = 'ROLE_415-6046'; //Detalle llamada linea
        }
        if (true === $this->get('security.context')->isGranted('ROLE_428-6457'))
        {
            $rolesPermitidos[] = 'ROLE_428-6457'; //McAfee actualizacion correo
        }
        if (true === $this->get('security.context')->isGranted('ROLE_415-6047'))
        {
            $rolesPermitidos[] = 'ROLE_415-6047'; //Cortar llamada saliente linea 
        }
        if (true === $this->get('security.context')->isGranted('ROLE_415-6048'))
        {
            $rolesPermitidos[] = 'ROLE_415-6048'; //Activar Llamada Saliente Linea
        }
        if (true === $this->get('security.context')->isGranted('ROLE_151-6577'))
        {
            /*Botón para coordinar desde grid tecnico.*/
            $rolesPermitidos[] = 'ROLE_151-6577';
        }
        if ($this->get('security.context')->isGranted('ROLE_151-6637'))
        {
            /*Botón para Activación y Registro Elemento Alquiler desde grid tecnico.*/
            $rolesPermitidos[] = 'ROLE_151-6637';
        }
        if ($this->get('security.context')->isGranted('ROLE_151-6638'))
        {
            /*Botón para Ver Data Wifi Alquiler Equipos desde grid tecnico.*/
            $rolesPermitidos[] = 'ROLE_151-6638';
        }
        if ($this->get('security.context')->isGranted('ROLE_151-6639'))
        {
            /*Botón para Agregar Archivo De Inspección Radio Wifi Alquiler Equipos desde grid tecnico.*/
            $rolesPermitidos[] = 'ROLE_151-6639';
        }
        if ($this->get('security.context')->isGranted('ROLE_151-6640'))
        {
            /*Botón para Ver Archivo Inspeccion Tecnicos desde grid tecnico.*/
            $rolesPermitidos[] = 'ROLE_151-6640';
        }
         if (true === $this->get('security.context')->isGranted('ROLE_428-6897'))
        {
            //Botón para reenvío de licencias de Kaspersky a correo registrado 
            $rolesPermitidos[] = 'ROLE_428-6897'; 
        }
        if(true === $this->get('security.context')->isGranted('ROLE_151-6997'))
        {
            //Reversar orden de trabajo de Asignada a AsignadoTarea
            $rolesPermitidos[] = 'ROLE_151-6997';
        }
        if(true === $this->get('security.context')->isGranted('ROLE_151-7257'))
        {
            //Reversar solicitud de cambio de ultima milla
            $rolesPermitidos[] = 'ROLE_151-7257';
        }
        if(true === $this->get('security.context')->isGranted('ROLE_151-7277'))
        {
            //Reversar solicitud de migración a anillo o vlan
            $rolesPermitidos[] = 'ROLE_151-7277';
        }
        if(true === $this->get('security.context')->isGranted('ROLE_151-7377'))
        {
            //Activación de Cableado Estructurado
            $rolesPermitidos[] = 'ROLE_151-7377';
        }
        if(true === $this->get('security.context')->isGranted('ROLE_151-8237'))
        {
            //Activación Secure Cpe
            $rolesPermitidos[] = 'ROLE_151-8237';
        }
        if(true === $this->get('security.context')->isGranted('ROLE_151-8238'))
        {
            //Edición Secure Cpe
            $rolesPermitidos[] = 'ROLE_151-8238';
        }
        if(true === $this->get('security.context')->isGranted('ROLE_151-8337'))
        {
            //Migración Security Secure Ng
            $rolesPermitidos[] = 'ROLE_151-8337';
        }
        
        if(true === $this->get('security.context')->isGranted('ROLE_415-7598'))
        {
            //Consulta de suscriber id
            $rolesPermitidos[] = 'ROLE_415-7598';
        }
        return $this->render('tecnicoBundle:clientes:index.html.twig', array(
            'rolesPermitidos' => $rolesPermitidos
        ));
    }
    
    /**
     * Funcion que obtiene los servicios desglosados
     * por producto para presentarlos en el grid de 
     * servicios tecnicos
     * 
     * @author creado       Francisco Adum <fadum@telconet.ec>
     * @author modificado   Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 29-10-2014
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.1 26-05-2016 - Se pasa referencia a ServiceTecnico para uso interno
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.2 2016-06-03 - Se inluye el loginForma como parámetro para mejorar costo de query de 4.000 a 40
     *                           Se inicializan las varibles en null ya que en el Store Procedure se valida esto y no ""
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.3 2016-09-08 - Llamar a función 'armarParametroBusquedaPorForma' en Service Tecnico en reemplazo de 'armarLoginBusquedaPorForma'
     *

     * @author Modificado: Allan Suárez C. <arsuarez@telconet.ec>
     * @version 1.4 2017-09-30 - Se envia valor de nombre de Canton al Repositorio de la persona que se encuentra en Sesión
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 2019-03-25 Se retorna parametro:configuracionPeHsrp que va permitir habilitar si una orden de servicio puede utilizar
     *                         la herramienta que define el esquema de Pe-Hsrp
     * 
     * @author Pablo Pin. <ppin@telconet.ec>
     * @version 1.6 2019-03-28 - Se agrega $objPlanificarService a los parametros que se envian para obtener el jsonClientes
     * 
     * @author Pablo Pin. <ppin@telconet.ec>
     * @version 1.7 2019-12-10 - Se agrega funcionalidad para buscar mediante login auxiliar.
     * 
     * @author Pablo Pin  <ppin@telconet.ec>
     * @version 1.8 2020-01-22 - Se realizan ajustes para evitar que se busque sin punto en sesion.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.9 2020-02-05 - Se realiza ajuste para permitir buscar por $idElementoBusq y $idInterfaceBusq.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 2020-03-04 - Se agregan los filtros del producto, tipoServicio, ultimaMilla, idElemento
     *                           e idInterface, cuando se encuentre en sesión un cliente.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.1 2020-03-13 - Se agrega $objServiceUtilidades a los parametros que se envian para obtener el jsonClientes para 
     *                            consultar si requiere factibilidad
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.2 2020-06-01 - Se agrega al arreglo $arrayParametros, un nuevo indice emGeneral, para poder enviarlo al servicio.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.3 2020-07-06 - Se agrega como parámetro la conexion de soporte para buscar la tarea.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.4 2020-11-09 - Se agrega conexión comercial como parámetro de la función generarJsonClientes
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 2.5 2021-07-23 - Se obtiene el id servicio del internet.
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 2.6 2021-12-15 - Se agrega filtro para Servicios FTTx de Clientes Telconet.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.7 11-04-2022 Se envía parámetro strPrefijoSesion a la función generarJsonClientes, ya que es necesario para las validaciones
     *                         de perfiles parametrizados.
     * 
     * 
     * @author Christian Yunga <ychristian@telconet.ec>
     * @version 2.8 03-01-2023 Se agrega validación de perfiles solo los perfiles permitidos pueden ingresar a esta opcion.
     *                         Si pasa la validación entonces se registrara el inicio de sesion  junto con el login del cliente 
     *                         al que se esta consultando  solo para empresa MD.     *  
     * 
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 2.9 28-04-2023 Se agrega flag para presentar boton de reenvio documento adendum cambio de plan.
     * 
     */
    public function getServiciosClientesAction()
    {
        ini_set('max_execution_time', 3000000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion               = $this->get('request');
        $estado                 = $peticion->query->get('estado');
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $arrayPtoCliente        = $objSession->get('ptoCliente');
        $intPuntoId             = null;
        $loginBusq              = null;
        $loginForma             = null;
        $productoBusq           = null;
        $planBusq               = null;
        $tipoServicioBusq       = null;
        $ultimaMillaBusq        = null;
        $idElementoBusq         = null;
        $idInterfaceBusq        = null;
        $intServicioFTTxTN      = $peticion->query->get('intServicioFTTxTN')  != '' ? $peticion->query->get('intServicioFTTxTN')  : null;
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');
        $serviceCliente         = $this->get('comercial.Cliente');
        $objPlanificarService   = $this->get('planificacion.planificar');
        $objServiceUtilidades   = $this->get('administracion.Utilidades');
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $strLoginSesion         = $objSession->get('user');
        $emSoporte              = $this->get('doctrine')->getManager('telconet_soporte');
        $strIdDepartamento      = $objSession->get('idDepartamento');
        $intIdServicioInternet  = "";        
        $boolServicioInternetActivo = false;
        
        $objRequest        = $this->getRequest();
        
        $arrayCliente      = $objSession->get('cliente');
        $strPrefijoEmpresa = $objSession->get('prefijoEmpresa');  
        $strCodEmpresa     = $objSession->get('idEmpresa');
        $strUsrCreacion    = $objSession->get('user');
        $strIpCreacion     = $objRequest->getClientIp();
        $serviceTokenCas   = $this->get('seguridad.TokenCas');
        $serviceInfoLog    = $this->get('comercial.InfoLog');
        
        if($strPrefijoEmpresa == 'MD' &&  (true === $this->get('security.context')->isGranted('ROLE_151-8917')))
        {  
            if(!empty($arrayCliente))
            {
                 $objInfoPersona  = $emComercial->getRepository('schemaBundle:InfoPersona')->findOneById($arrayCliente['id']);

                 if(is_object($objInfoPersona))
                 {
                     $arrayDatosCliente['nombres']            = $objInfoPersona->getNombres();
                     $arrayDatosCliente['apellidos']          = $objInfoPersona->getApellidos();
                     $arrayDatosCliente['razon_social']       = $objInfoPersona->getRazonSocial();
                     $arrayDatosCliente['identificacion']     = $objInfoPersona->getIdentificacionCliente();
                     $arrayDatosCliente['tipoTributario']     = $objInfoPersona->getTipoTributario();
                     $arrayDatosCliente['tipoIdentificacion'] = $objInfoPersona->getTipoIdentificacion();
                     $arrayDatosCliente['login']              = $arrayPtoCliente['login'];
                 }                 
            } 
            $strOrigen        = '';
            $strMetodo        = '';
            $objAdmiParametroCab = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                            ->findOneBy(array('nombreParametro' => 'VISUALIZACION LOGS', 
                                                              'estado'          => 'Activo'));
            if(is_object($objAdmiParametroCab))
            {              
                $objParamDetOrigen = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->findOneBy(array('parametroId' => $objAdmiParametroCab,
                                                                   'descripcion' => 'ORIGEN',
                                                                   'empresaCod'  => $strCodEmpresa,
                                                                   'estado'      => 'Activo'));

                $objParamDetMetodo = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->findOneBy(array('parametroId'     => $objAdmiParametroCab,
                                                                   'observacion'     => 'DATOS TECNICOS',
                                                                   'empresaCod'      => $strCodEmpresa,
                                                                   'estado'          => 'Activo'));           
                if(is_object($objParamDetOrigen))
                {
                    $strOrigen  = $objParamDetOrigen->getValor1();
                }

                if(is_object($objParamDetMetodo))
                {
                    $strMetodo  = $objParamDetMetodo->getValor1();
                }             
            }
            $arrayParametrosLog                   = array();
            $arrayParametrosLog['strOrigen']      = $strOrigen;
            $arrayParametrosLog['strMetodo']      = $strMetodo;
            $arrayParametrosLog['strTipoEvento']  = 'INFO';
            $arrayParametrosLog['strIpUltMod']    = $strIpCreacion;
            $arrayParametrosLog['strUsrUltMod']   = $strUsrCreacion;
            $arrayParametrosLog['dateFechaEvento']= date("Y-m-d h:i:s");
            $arrayParametrosLog['strIdKafka']     = '';
            $arrayParametrosLog['request']        = $arrayDatosCliente;

            $arrayTokenCas               = $serviceTokenCas->generarTokenCas();
            $arrayParametrosLog['token'] = $arrayTokenCas['strToken'];
            $serviceInfoLog->registrarLogsMs($arrayParametrosLog);
        }
        else if($strPrefijoEmpresa == 'MD' &&  (false === $this->get('security.context')->isGranted('ROLE_151-8917')))
        {
            return $this->render('financieroBundle:InfoServicio:accesoDenegado.html.twig');
        }    
        
        if ($intServicioFTTxTN) 
        {
            $arrayPtoCliente = null;
        }
        if($arrayPtoCliente)
        {
            $intPuntoId = $arrayPtoCliente['id'];
            $estado     = $peticion->query->get('estado') != '' ? $peticion->query->get('estado') : 'Todos';
            $productoBusq       = $peticion->query->get('producto')     != '' ? $peticion->query->get('producto')     : null;
            $tipoServicioBusq   = $peticion->query->get('tipoServicio') != '' ? $peticion->query->get('tipoServicio') : null;
            $ultimaMillaBusq    = $peticion->query->get('ultimaMilla')  != '' ? $peticion->query->get('ultimaMilla')  : null;
            $idElementoBusq     = $peticion->query->get('idElemento')   != '' ? $peticion->query->get('idElemento')   : null;
            $idInterfaceBusq    = $peticion->query->get('idInterface')  != '' ? $peticion->query->get('idInterface')  : null;
        }
        else
        {
            $intPuntoId         = null;
            $loginBusq          = $peticion->query->get('login')!='' ? $peticion->query->get('login') : null;
            if (!$intServicioFTTxTN)
            {
                $productoBusq       = $peticion->query->get('producto')!='' ? $peticion->query->get('producto') : null;
                $planBusq           = $peticion->query->get('plan')!='' ? $peticion->query->get('plan') : null;
                $tipoServicioBusq   = $peticion->query->get('tipoServicio')!='' ? $peticion->query->get('tipoServicio') : null;
                $ultimaMillaBusq    = $peticion->query->get('ultimaMilla')!='' ? $peticion->query->get('ultimaMilla') : null;
                $idElementoBusq     = $peticion->query->get('idElemento')!='' ? $peticion->query->get('idElemento') : null;
                $idInterfaceBusq    = $peticion->query->get('idInterface')!='' ? $peticion->query->get('idInterface') : null;
            }else 
            {
                $estado     = 'Todos';
            }
            
            if($loginBusq!=null){
                $loginForma = $peticion->query->get('loginForma');
                $loginBusq = $serviceTecnico->armarParametroBusquedaPorForma($loginBusq,$loginForma);
            }

            /* Si no se esta buscando un login no se puede consultar. */
            if (is_null($loginBusq) && is_null($loginForma) && is_null($idElementoBusq) && is_null($idInterfaceBusq))
            {
                $estado = '';
            }
        }

        //variables globales
        $intIdEmpresa = $objSession->get('idEmpresa');
        $start     = $peticion->query->get('start');

        if ($intServicioFTTxTN) 
        {
            $objEmpresaCod = $emComercial->getRepository("schemaBundle:InfoEmpresaGrupo")->findOneByPrefijo('TN');
            if (is_object($objEmpresaCod)) 
            {
                $intIdEmpresa = $objEmpresaCod->getId();
            }
        }
                
        //variables para conexion a la base
        $arrayOciCon['user_comercial']   = $this->container->getParameter('user_comercial');
        $arrayOciCon['passwd_comercial'] = $this->container->getParameter('passwd_comercial');
        $arrayOciCon['dsn']              = $this->container->getParameter('database_dsn');
        
        //Se obtiene el nombre del canton de donde se encuentra el usuario en sesion
        $intIdOficina    = $objSession->get('idOficina');
        $strNombreCanton = '';
        
        $objOficina = $emComercial->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);
        
        if(is_object($objOficina))
        {
            $objCanton = $emComercial->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());
            
            if(is_object($objCanton))
            {
                $strNombreCanton = $objCanton->getNombreCanton();
            }
        }

        if(isset($intPuntoId) && !empty($intPuntoId))
        {
            $arrayRespuestaServInternetValido = $serviceTecnico
                ->obtieneServicioInternetValido(
                    array(
                        "intIdPunto"    => $intPuntoId,
                        "strCodEmpresa" => $objSession->get('idEmpresa'),
                        "arrayEstadosInternetIn" => array("Activo"))
                );

            $objServicioPunto = $arrayRespuestaServInternetValido['status'] == 'OK' ?
                                $arrayRespuestaServInternetValido["objServicioInternet"] :
                                null;

            if (is_object($objServicioPunto))
            {
                $intIdServicioInternet = $objServicioPunto->getId();
                if($objServicioPunto->getEstado() === "Activo")
                {
                    $boolServicioInternetActivo = true;
                }
            }
        }

        if ($intServicioFTTxTN) 
        {
            $arrayServicios = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('SERVICIOS DE TELCONET',
                                                             'TECNICO',
                                                             '',
                                                             'PARAMETRO_DE_SERVICIOS_DE_TELCONET',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             $intIdEmpresa);
            if(!empty($arrayServicios['valor1']))
            {
                $intServicioFTTxTN = $arrayServicios['valor1'];
            }
        }

        $arrayParametros = array(            
            "plan"                  => $planBusq,
            "producto"              => $productoBusq,
            "login"                 => $loginBusq,
            "loginForma"            => $loginForma,
            "tipoServicio"          => $tipoServicioBusq,
            "punto"                 => $intPuntoId,
            "estado"                => $estado,
            "start"                 => $start,
            "empresa"               => $intIdEmpresa,
            "ultimaMilla"           => $ultimaMillaBusq,
            "elemento"              => $idElementoBusq,
            "interface"             => $idInterfaceBusq,
            "ociCon"                => $arrayOciCon,
            "serviceTecnico"        => $serviceTecnico,
            "serviceCliente"        => $serviceCliente,
            "nombreCanton"          => $strNombreCanton,
            'planificarService'     => $objPlanificarService,
            'serviceUtilidades'     => $objServiceUtilidades,
            'strLoginSesion'        => $strLoginSesion,
            'emGeneral'             => $emGeneral,
            'emComercial'           => $emComercial,
            'strIdDepartamento'     => $strIdDepartamento,
            'intIdServicioInternet' => $intIdServicioInternet,
            'intServicioFTTxTN'     => $intServicioFTTxTN,
            'strPrefijoSesion'      => $objSession->get('prefijoEmpresa'),
            'boolServicioInternetActivo' => $boolServicioInternetActivo,
            '$boolResumenCompra'  =>  $boolResumenCompra,
            '$boolCambioPlanCP'  =>  $boolCambioPlanCP,
        );

        /*Validaciones para búsqueda por Login Auxiliar*/
        if ($peticion->query->get('strLoginAux') != '')
        {
            $arrayParametros['strLoginAux'] = $peticion->query->get('strLoginAux');
            $arrayParametros['start'] = null;
        }
        
        $arrayParametros['emSoporte'] = $emSoporte;
        $objJson = $this->getDoctrine()->getManager("telconet_infraestructura")->getRepository('schemaBundle:InfoServicioTecnico')  
                                                                               ->generarJsonClientes($arrayParametros);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }

    /**
     * getPeByCiudadAction
     *
     * Método encargado de obtener un listado de Pe por ciudad
     *
     * @param array $arrayParametros [ strDescripcionProducto => nombre del producto
     *                                 strCodEmpresa          => cod de la empresa
     *                                 strEstado              => estado servicio ]
     *
     * @return json $resultado
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 28-02-2019
     */
    public function getPeByCiudadAction()
    {
        $arrayParametros = array();
        $arrayPe         = array();
        $objPeticion     = $this->get('request');
        $objSession      = $objPeticion->getSession();
        $strJurisdiccion = $objPeticion->query->get('jurisdiccion');
        $serviceTecnico  = $this->get('tecnico.InfoServicioTecnico');

        $arrayParametros["strJurisdiccion"] = $strJurisdiccion;
        $arrayParametros["strUsuario"]      = $objSession->get('user');
        $arrayParametros["strIpCreacion"]   = $objPeticion->getClientIp();
        $arrayParametros["strTipoServicio"] = "GENERAL";

        $arrayPe = $serviceTecnico->getPeByCiudadJson($arrayParametros);

        return $arrayPe;
    }
    
      /**
     *
     * Funcion encargada de obtener un los datos informe tecnico de TNG
     *
     * @return json $objResponse
     *
     * @author Jesus Banchen <jbanchen@telconet.ec>
     * @version 1.0 14-04-2019
     */
  
    public function getDatosConexionUpStreamTngAction()
    {
        $arrayEncontrados = array();
        $objPeticion = $this->get('request');
        $intIdServicio = $objPeticion->get('idServicio');
        $intIdProducto = $objPeticion->get('idProducto');
        $objResponse = new JsonResponse();
        $emComercial = $this->get('doctrine')->getManager('telconet');

        $arrayDatosCaracteristicaId = array(
                                            "COD CONEXION UPSTREAM",
                                            "EQUIPO CONEXION BACKBONE",
                                            "SID EQUIPO CONEXION UPSTREAM",
                                            "PUERTO",
                                            "TIPO TRANSPORTE UPSTREAM",
                                            "PROVEEDOR TRANSPORTE UPSTREAM",
                                            "ID SERVICIO RED TRANSPORTE",
                                            "IDENTIFICADOR RED TRANSPORTE",
                                            "FECHA INSTALACION(RFS)",
                                            "PLAZO(MESES)",
                                            "FECHA VENCE CONTRATO",
                                            "CPE SERIAL NUMBER",
                                            "CONECTOR TYPE",
                                            "ESQUEMA",
                                            "IP WAN GATEWAY",
                                            "IP WAN CPE",
                                            "IP LAN CPE",
                                            "IP LAN CLIENTE",
                                            "VRF TNG",
                                            "ASN",
                                            "MONITOREO EXTERNO (SI/NO)"
        );

        $intNum = count($arrayDatosCaracteristicaId);
        

        for ($intIndice = 0; $intIndice < count($arrayDatosCaracteristicaId); $intIndice++)
        {
            $objCaracteristicaTng = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array("descripcionCaracteristica" => $arrayDatosCaracteristicaId[$intIndice],
                                                                  "estado"                    => "Activo"));

            $objAdmiProdCaractTng = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"       => $intIdProducto,
                                                                  "caracteristicaId" => $objCaracteristicaTng->getId(),
                                                                  "estado"           => "Activo"));

            $objInfoServProdCaractTng = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->findOneBy(array("servicioId"                => $intIdServicio,
                                                                      "productoCaracterisiticaId" => $objAdmiProdCaractTng->getId()));

            $arrayEncontrados[] = array("strValor" => $objInfoServProdCaractTng->getValor());
        }
 

        $objData = json_encode($arrayEncontrados);
        $objJson = '{"total":"' . $intNum . '","encontrados":' . $objData . '}';

        $objResponse->setContent($objJson);
        return $objResponse;
    }

    public function getDatosTecnicosPdfAction(){
        $peticion = $this->get('request');    
        $idServicio = $peticion->query->get('idServicio');
        $cliente = $peticion->query->get('cliente');
        $session = $peticion->getSession();
        $idEmpresa = $session->get('idEmpresa');

        $datosTecnicos = array();

        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSoporte = $this->get('doctrine')->getManager('telconet_soporte');
        $emComunicacion = $this->get('doctrine')->getManager('telconet_comunicacion');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $emComercial = $this->get('doctrine')->getManager('telconet');
                
        $servicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                       ->findOneBy(array( "servicioId" => $servicio->getId()));
        $productoInternetDedicado = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                ->findOneBy(array("nombreTecnico"   => "INTERNET", 
                                                                  "estado"          =>"Activo",
                                                                  "empresaCod"      => $idEmpresa));                              
        $TipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->find($servicioTecnico->getUltimaMillaId());
        $datosTecnicos['tipoMedio'] = $TipoMedio->getNombreTipoMedio();

        $datosTecnicos['numeroOrdenTrabajo'] = $servicio->getOrdenTrabajoId()->getNumeroOrdenTrabajo();
        $datosTecnicos['login'] = $servicio->getPuntoId()->getLogin();
        $datosTecnicos['observacion'] = $servicio->getPuntoId()->getObservacion();
        $datosTecnicos['cliente'] = $cliente;
        $datosTecnicos['direccion'] = $servicio->getPuntoId()->getDireccion();
                
        /*$datosTecnicos['contactosTelefonosFijos'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Fijo');
        $datosTecnicos['contactosTelefonosMovil'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil');
        $datosTecnicos['contactosTelefonosMovilClaro'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil Claro');
        $datosTecnicos['contactosTelefonosMovilMovistar'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil Movistar');
        $datosTecnicos['contactosTelefonosMovilCnt'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil CNT');
        $datosTecnicos['contactosCorreos'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Correo Electronico');
        */      
             $datosTecnicos['contactosTelefonosFijos'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Fijo');
                $datosTecnicos['contactosTelefonosFijosPunto'] = $emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')->findContactosByPunto($datosTecnicos['login'], 'Telefono Fijo');
                $datosTecnicos['contactosTelefonosMovil'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil');
                $datosTecnicos['contactosTelefonoMovilPunto'] = $emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')->findContactosByPunto($datosInstalacion['login'], 'Telefono Movil');
                $datosTecnicos['contactosTelefonosMovilClaro'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil Claro');
                $datosTecnicos['contactosTelefonosMovilClaroPunto'] = $emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')->findContactosByPunto($datosTecnicos['login'], 'Telefono Movil Claro');
                $datosTecnicos['contactosTelefonosMovilMovistar'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil Movistar');
                $datosTecnicos['contactosTelefonosMovilMovistarPunto'] = $emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')->findContactosByPunto($datosTecnicos['login'], 'Telefono Movil Movistar');
                $datosTecnicos['contactosTelefonosMovilCnt'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Telefono Movil CNT');
                $datosTecnicos['contactosTelefonosMovilCntPunto'] = $emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')->findContactosByPunto($datosTecnicos['login'], 'Telefono Movil CNT');
                $datosTecnicos['contactosCorreos'] = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findContactosByLoginAndFormaContacto($datosTecnicos['login'], 'Correo Electronico');
                $datosTecnicos['contactosCorreosPunto'] = $emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')->findContactosByPunto($datosTecnicos['login'], 'Correo Electronico');
                
               // print_r($datosTecnicos['login']); die();
     //  print_r($datosTecnicos['contactosTelefonosFijosPunto']); die();
//        $interfaceElementoId = $servicio->getInterfaceElementoId();
//        
//        $interfaceElemento= $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($interfaceElementoId);
//        $datosTecnicos['nombreInterfaceElemento'] = $interfaceElemento->getNombreInterfaceElemento();
//        
//        $elementoId = $servicio->getElementoId();
//        
//        $elemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
//        $datosTecnicos['elemento'] = $elemento->getNombreElemento();
//              
//        $modeloElementoId = $elemento->getModeloElementoId();
//        
//        $modeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);
        
                
        
                
        if($datosTecnicos['tipoMedio']=="Cobre"){
                $caracteristicaVci = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneBy(array( "descripcionCaracteristica" => "VCI", "estado"=>"Activo"));
                $pcVci = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                     ->findOneBy(array( "productoId" => $productoInternetDedicado->getId(), 
                                                        "caracteristicaId"=>$caracteristicaVci->getId()));
                $ispcVci = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                       ->findOneBy(array( "servicioId" => $idServicio, 
                                                          "productoCaracterisiticaId"=>$pcVci->getId()));
                $datosTecnicos['vci']= $ispcVci->getValor();
        }
        else{
                $datosTecnicos['vci']="";
        }

        $datosTecnicos['nombrePlan'] = $servicio->getPlanId()->getNombrePlan();

        $caracteristicaIpLan = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "IP LAN", "estado"=>"Activo"));
        $pcIpLan = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $productoInternetDedicado->getId(), "caracteristicaId"=>$caracteristicaIpLan->getId()));
        $ispcIpLan = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$pcIpLan->getId()));
        $datosTecnicos['ipLan']= ($ispcIpLan)?$ispcIpLan->getValor():"";

        $caracteristicaMascaraLan = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "MASCARA LAN", "estado"=>"Activo"));
        $pcMascaraLan = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $productoInternetDedicado->getId(), "caracteristicaId"=>$caracteristicaMascaraLan->getId()));
        $ispcMascaraLan = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$pcMascaraLan->getId()));
        $datosTecnicos['mascaraLan']= ($ispcMascaraLan)?$ispcMascaraLan->getValor():"";

        $caracteristicaGatewayLan = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "GATEWAY LAN", "estado"=>"Activo"));
        $pcGatewayLan = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $productoInternetDedicado->getId(), "caracteristicaId"=>$caracteristicaGatewayLan->getId()));
        $ispcGatewayLan = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$pcGatewayLan->getId()));
        $datosTecnicos['gatewayLan']= ($ispcGatewayLan)?$ispcGatewayLan->getValor():"";

        //WAN
        $infoWan = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array( "servicioId" => $idServicio, "tipoIp"=>"WAN"));
        $datosTecnicos['ipWan']= ($infoWan)?$infoWan->getIp():"";
        $datosTecnicos['mascaraWan']= ($infoWan)?$infoWan->getMascara():"";
        $datosTecnicos['gatewayWan']= ($infoWan)?$infoWan->getGateway():"";
        
        //MONITOREO
        $infoMonitoreo = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array( "servicioId" => $idServicio, "tipoIp"=>"MONITOREO"));
        $datosTecnicos['ipMonitoreo']= ($infoMonitoreo)?$infoMonitoreo->getIp():"";
        $datosTecnicos['mascaraMonitoreo']= ($infoMonitoreo)?$infoMonitoreo->getMascara():"";
        $datosTecnicos['gatewayMonitoreo']= ($infoMonitoreo)?$infoMonitoreo->getGateway():"";
        
        //OBTENER IPS PUBLICAS DEL PUNTO
        $punto = $servicio->getPuntoId();
        $serviciosPunto = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(array( "puntoId" => $punto->getId(), "estado"=>"Activo"));
        
        
        $flagPub=0;
        for($i=0;$i<count($serviciosPunto);$i++){
            $servId = $serviciosPunto[$i]->getId();
            
            $infoPublica = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findBy(array( "servicioId" => $servId, "tipoIp"=>"PUBLICA", "estado"=>"Activo"));
             
            if(count($infoPublica)>0){
                for($j=0;$j<count($infoPublica);$j++){
                    $datosTecnicos['ipPublica']= ($infoPublica)?$infoPublica[$j]->getIp():"";
                    $datosTecnicos['mascaraPublica']=($infoPublica)?$infoPublica[$j]->getMascara():"";
                    $datosTecnicos['gatewayPublica']=($infoPublica)?$infoPublica[$j]->getGateway():"";
                }
                
                $flagPub = 1;
            }
            
            
        }
        
        if($flagPub==0){
            $datosTecnicos['ipPublica']= "";
            $datosTecnicos['mascaraPublica']="";
            $datosTecnicos['gatewayPublica']="";
            
        }

        //----- PANCHO ------
        $prod = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "descripcionProducto" => "INTERNET DEDICADO"));
        
        $carac1 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "MAC"));
        $carac2 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "NUMERO PC"));
        $carac3 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "SSID"));
        $carac4 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "PASSWORD SSID"));
        
        $prodCaract1 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $carac1->getId()));
        $prodCaract2 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $carac2->getId()));
        $prodCaract3 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $carac3->getId()));
        $prodCaract4 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $carac4->getId()));
        
        $mac = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract1->getId()));
        $pc = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract2->getId()));
        $ssid = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract3->getId()));
        $passSsid = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract4->getId()));
        
        if($mac!=null){
            $macValor = $mac->getValor();
        }
        else{
            $macValor = "NA";
        }
        
        if($pc!=null){
            $pcValor = $pc->getValor();
        }
        else{
            $pcValor = "NA";
        }
        
        if($ssid!=null){
            $ssidValor = $ssid->getValor();
        }
        else{
            $ssidValor = "NA";
        }
        
        if($passSsid!=null){
            $passSsidValor = $passSsid->getValor();
        }
        else{
            $passSsidValor = "NA";
        }
        
        //-----------------------------------
        
        //-----TECNICA-----
        $interfaceElementoId = $servicioTecnico->getInterfaceElementoId();
           $interfaceElemento= $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($interfaceElementoId);
           $nombreInterfaceElemento = $interfaceElemento->getNombreInterfaceElemento();
           $datosTecnicos['nombreInterfaceElemento'] = $nombreInterfaceElemento;
           $elementoId = $interfaceElemento->getElementoId();
           
             $elemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
            $datosTecnicos['elemento'] = $elemento->getNombreElemento();
            $modeloElementoId = $elemento->getModeloElementoId();
        
            $ip = $emInfraestructura->getRepository('schemaBundle:InfoIpElemento')->findBy(array( "elementoId" => $elemento->getId()));
           if($ip){
             $ipDslam = $ip[0]->getIpElemento();
           }
        
          $modeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);
          $nombreModeloElemento = $modeloElemento->getNombreModeloElemento();
          $datosTecnicos['nombreModeloElemento'] = $nombreModeloElemento;
          
          $tipoElementoId = $modeloElemento->getTipoElementoId();
        
          $tipoElemento = $emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')->find($tipoElementoId);
          $datosTecnicos['nombreTipoElemento'] = $tipoElemento->getNombreTipoElemento();
        
           $perfil = $emInfraestructura->getRepository('schemaBundle:InfoDetalleInterface')->findOneBy(array( "interfaceElementoId" => $interfaceElementoId, "detalleNombre" => "PERFIL"));
           if($perfil!=null){
              $perfilValor = $perfil->getDetalleValor();
          }
           else{
              $perfilValor = "NA";
           }
        //-----------------
        
        //-------CLIENTE-------
        $interfaceCpeId = $servicioTecnico->getInterfaceElementoClienteId();
        
        //$interfaceCpeId = $enlace[0]->getInterfaceElementoFinId();
        $tipoMedio = $servicioTecnico->getUltimaMillaId();
  if(isset($interfaceCpeId)){
      if($interfaceCpeId){
        $interfaceCpe = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($interfaceCpeId);
        $interfaceCpeNombre = $interfaceCpe->getNombreInterfaceElemento();
      }
  }
        $cpeElementoId = $servicioTecnico->getElementoClienteId();
    if(isset($cpeElementoId)){ 
     if($cpeElementoId){
        $cpeElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($cpeElementoId);
        //$cpeElemento = $interfaceCpe->getElementoId();

        $modeloCpe = $cpeElemento->getModeloElementoId();
        $modeloCpeNombre = $modeloCpe->getNombreModeloElemento();
        $ipElemento = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findBy(array( "elementoId" => $cpeElemento->getId()));

        $nombreCpe = $cpeElemento->getNombreElemento();
        $ipCpe = $ipElemento[0]->getIp();


        $serieFisica = $cpeElemento->getSerieFisica();
        //$interfaceCpeNombre = $interfaceCpe->getNombreInterfaceElemento();
        }else{
           $nombreCpe=""; 
           $ipCpe="";
           $modeloCpeNombre="";
           $serieFisica="";
        }
    }else{
        
            $nombreCpe=""; 
           $ipCpe="";
           $modeloCpeNombre="";
           $serieFisica="";
        
    }
            
        
        
        $datosTecnicos['nombreCpe'] = $nombreCpe;
        $datosTecnicos['ipCpe'] = $ipCpe;
        $datosTecnicos['modeloCpe'] = $modeloCpeNombre;
        $datosTecnicos['serieCpe'] = $serieFisica;
        $datosTecnicos['macCpe'] = $macValor;
        $datosTecnicos['numPcs'] = $pcValor;
        $datosTecnicos['ssid'] = $ssidValor;
        $datosTecnicos['passSsid'] = $passSsidValor;
                
                
                        // 'nombreCpe'         => $nombreCpe,
                        // 'ipCpe'             => $ipCpe,
                        // 'modeloCpe'         => $modeloCpeNombre,
                        // 'serieCpe'          => $cpeElemento->getSerieLogica(),
                        // 'interfaceCpe'      => $interfaceCpe->getNombreInterfaceElemento(),
                        // 'mac'               => $macValor,
                        // 'numPc'             => $pcValor,
                        // 'ssid'              => $ssidValor,
                        // 'passSsid'          => $passSsidValor,
                        // 'nombreDslam'       => $nombreDslam,
                        // 'ipDslam'           => $ipDslam,
                        // 'interfaceDslam'    => $nombreInterfaceElemento,
                        // 'modeloDslam'       => $nombreModeloElemento,
                        // 'perfilDslam'       => $perfilValor,
                        // 'tipoMedio'         => $tipoMedio->getNombreTipoMedio(),
                        // 'observacion'       => $servicio->getObservacion(),
                        // 'mensaje'           => $mensaje
                      
                                          
                $html = $this->renderView('tecnicoBundle:InfoServicio:DatosTecnicos.html.twig', array('datosTecnicos'=>$datosTecnicos));
                return new Response(
                $this->get('knp_snappy.pdf')->getOutputFromHtml($html),
                200,
                array(
                    'Content-Type'          => 'application/pdf',
                    'Content-Disposition'   => 'attachment; filename=DatosTecnicos-'.trim($datosTecnicos['login']).'.pdf',
                )
            );                    
        }
        
    /**
     * Funcion que sirve para ver la informacion tecnica
     * de un servicio de Cobre o Radio (TTCO)
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function getDatosTecnicosAction()
    {
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');

        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSoporte          = $this->get('doctrine')->getManager('telconet_soporte');
        $emComunicacion     = $this->get('doctrine')->getManager('telconet_comunicacion');
        $emSeguridad        = $this->get('doctrine')->getManager('telconet_seguridad');
        $emComercial        = $this->get('doctrine')->getManager('telconet');

        $peticion       = $this->get('request');
        $session        = $peticion->getSession();
        $idServicio     = $peticion->get('idServicio');
        $accion         = $peticion->get('accion');
        $servicio       = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $prefijoEmpresa = $session->get('prefijoEmpresa');

        //migracion_ttco_md
        $arrayEmpresaMigra = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->getEmpresaEquivalente($idServicio, $prefijoEmpresa);
        if($arrayEmpresaMigra)
        {
            $idEmpresa = $arrayEmpresaMigra['id'];
            $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
        }

        $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array("servicioId" => $servicio->getId()));

        //-----CARACTERISTICAS SERVICIO------
        $prod = $emComercial->getRepository('schemaBundle:AdmiProducto')
            ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO"));

        $carac1 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "MAC"));
        $carac2 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "NUMERO PC"));
        $carac3 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "SSID"));
        $carac4 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "PASSWORD SSID"));
        $carac5 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "IP PUBLICA"));
        $carac6 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "IP WAN"));
        $carac7 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "PERFIL"));
        $carac8 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "VCI"));
        $carac9 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "MODO OPERACION"));

        $prodCaract1 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac1->getId()));
        $prodCaract2 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac2->getId()));
        $prodCaract3 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac3->getId()));
        $prodCaract4 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac4->getId()));
        $prodCaract5 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac5->getId()));
        $prodCaract6 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac6->getId()));
        $prodCaract7 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac7->getId()));
        $prodCaract8 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac8->getId()));
        $prodCaract9 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $prod->getId(), "caracteristicaId" => $carac9->getId()));

        $mac = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract1->getId()));
        $pc = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract2->getId()));
        $ssid = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract3->getId()));
        $passSsid = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract4->getId()));
        $ipPubArray = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract5->getId(), "estado" => "Activo"));
        $ipWanArray = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract6->getId(), "estado" => "Activo"));

        //valor mac
        if($mac != null)
        {
            $macValor = $mac->getValor();
        }
        else
        {
            $macValor = "NA";
        }

        //valor numero de pc
        if($pc != null)
        {
            $pcValor = $pc->getValor();
        }
        else
        {
            $pcValor = "NA";
        }

        //valor ssid
        if($ssid != null)
        {
            $ssidValor = $ssid->getValor();
        }
        else
        {
            $ssidValor = "NA";
        }

        //valor password ssi
        if($passSsid != null)
        {
            $passSsidValor = $passSsid->getValor();
        }
        else
        {
            $passSsidValor = "NA";
        }

        //-----TECNICA-----
        $interfaceElementoId = $servicioTecnico->getInterfaceElementoId();
        $interfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($interfaceElementoId);
        $nombreInterfaceElemento = $interfaceElemento->getNombreInterfaceElemento();
        $elementoId = $interfaceElemento->getElementoId();

        $elemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
        $nombreDslam = $elemento->getNombreElemento();
        $modeloElementoId = $elemento->getModeloElementoId();

        $ip = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId" => $elemento->getId()));
        $ipDslam = $ip->getIp();

        $modeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);
        $nombreModeloElemento = $modeloElemento->getNombreModeloElemento();

        //valor perfil
        $perfil = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract7, "estado" => "Activo"));
        if($perfil != null)
        {
            $perfilValor = $perfil->getValor();
        }
        else
        {
            $perfilValor = "NA";
        }
        
        //valor vci
        $vci = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract8, "estado" => "Activo"));
        if($vci != null)
        {
            $vciValor = $vci->getValor();
        }
        else
        {
            $vciValor = "NA";
        }

        $operacion = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaract9, "estado" => "Activo"));
        if($operacion != null)
        {
            $operacionValor = $operacion->getValor();
        }
        else
        {
            $operacionValor = "NA";
        }
        //-----------------
        //-------CLIENTE-------
        $nombreCpe = "NA";
        if($servicioTecnico->getInterfaceElementoClienteId() != null || $servicioTecnico->getInterfaceElementoClienteId() != "")
        {
            $interfaceCpeId = $servicioTecnico->getInterfaceElementoClienteId();
            $tipoMedio = $servicioTecnico->getUltimaMillaId();

            $interfaceCpe = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($interfaceCpeId);
            $cpeElementoId = $servicioTecnico->getElementoClienteId();
            $cpeElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($cpeElementoId);

            $modeloCpe = $cpeElemento->getModeloElementoId();
            $modeloCpeNombre = $modeloCpe->getNombreModeloElemento();
            $ipElemento = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findBy(array("elementoId" => $cpeElemento->getId()));

            $nombreCpe = $cpeElemento->getNombreElemento();
            $ipCpe = $ipElemento[0]->getIp();


            $serieFisica = $cpeElemento->getSerieFisica();
            $interfaceCpeNombre = $interfaceCpe->getNombreInterfaceElemento();
        }
        else
        {
            $tipoMedio = "NA";
            $modeloCpeNombre = "NA";
            $ipCpe = "NA";
            $serieFisica = "NA";
            $interfaceCpeNombre = "NA";
        }

        $estadoServicio = $servicio->getEstado();
        $mensaje = "NA";
        if($estadoServicio != "Cancel" && $accion == "consultar")
        {
            if($nombreModeloElemento != "TERCERIZADO" && $nombreModeloElemento != "AuD8000-12")
            {
                if($prefijoEmpresa == "TTCO")
                {
                    $objJson = $this->getDoctrine()
                        ->getManager("telconet_infraestructura")
                        ->getRepository('schemaBundle:AdmiModeloElemento')
                        ->generarJsonDocumentoPorModelo("confirmarActivacion" . $nombreModeloElemento, $modeloElementoId, $emSoporte, $emComunicacion, $emSeguridad, $emInfraestructura);
                    $posicion = strpos($objJson, "{");
                    $respuestaDocumentoPorModelo = substr($objJson, $posicion);
                    $outDocumentoPorModelo = json_decode($respuestaDocumentoPorModelo);
                    $arr = $outDocumentoPorModelo->encontrados;

                    $script = $arr[0]->script;
                    $idDocumento = $arr[0]->idDocumento;
                    $usuario = $arr[0]->usuario;
                    $protocolo = $arr[0]->protocolo;

                    $ultimaMilla = $servicioTecnico->getUltimaMillaId();
                    $tipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->find($ultimaMilla);

                    $nombreTipoMedio = $tipoMedio->getNombreTipoMedio();

                    if($nombreTipoMedio == "Radio")
                    {
                        /* @var $comandoEjecucion InfoServicioTecnicoService */
                        $comandoEjecucion = $this->get('tecnico.InfoServicioTecnico');
                        $salida = $comandoEjecucion
                            ->ejecutarComandoRadio($idDocumento, $usuario, "radio", $elementoId->getId(), "");
                    }
                    else
                    {
                        /* @var $comandoEjecucion InfoServicioTecnicoService */
                        $comandoEjecucion = $this->get('tecnico.InfoServicioTecnico');
                        $salida = $comandoEjecucion
                            ->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $nombreInterfaceElemento);
                    }
                    $pos = strpos($salida, "{");
                    if($pos !== false)
                    {
                        $jsonObj = substr($salida, $pos);

                        $resultadJson = json_decode($jsonObj);
                        $status = $resultadJson->status;

                        if($status == "ERROR")
                        {
                            $mensaje = "PROBLEMAS CON EL DSLAM";
                        }
                        else
                        {
                            $mensaje = $resultadJson->mensaje;
                        }
                    }
                    else
                    {
                        $mensaje = "Error en la ejecucion del Script de consulta: " . $salida;
                    }
                }
                else
                {
                    $mensaje = "PROBLEMAS";
                }
            }//cierre if
            else
            {
                $mensaje = "ELEMENTO NO TIENE ADMINISTRACION";
            }
        }
        else if($estadoServicio == "Cancel")
        {
            $mensaje = "SERVICIO CANCELADO";
        }
        else if($estadoServicio == "EnPruebas")
        {
            $mensaje = "SERVICIO EN PRUEBAS";
        }

        $array[] = array(
            'nombreCpe'         => $nombreCpe,
            'ipCpe'             => $ipCpe,
            'modeloCpe'         => $modeloCpeNombre,
            'serieCpe'          => $serieFisica,
            'interfaceCpe'      => $interfaceCpeNombre,
            'mac'               => $macValor,
            'numPc'             => $pcValor,
            'ssid'              => $ssidValor,
            'passSsid'          => $passSsidValor,
            'nombreDslam'       => $nombreDslam,
            'ipDslam'           => $ipDslam,
            'interfaceDslam'    => $nombreInterfaceElemento,
            'modeloDslam'       => $nombreModeloElemento,
            'perfilDslam'       => $perfilValor,
            'tipoMedio'         => $tipoMedio,
            'vci'               => $vciValor,
            'operacion'         => $operacionValor,
            'observacion'       => $servicio->getObservacion(),
            'mensaje'           => $mensaje
        );
        $data = json_encode($array);
        $resultado = '{"total":"1","encontrados":' . $data . '}';

        $respuesta->setContent($resultado);

        return $respuesta;
    }

    public function editarInformacionTecnicaAction(){
        //ini_set('max_execution_time', 2000000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial = $this->get('doctrine')->getManager('telconet');
        $emNaf = $this->get('doctrine')->getManager('telconet_naf');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        
        $idServicio = $peticion->get('idServicio');
        $idProducto = $peticion->get('productoId');
        $jsonCaracteristicas = $peticion->get('jsonCaracteristicas');
        $observacionCliente = $peticion->get('observacionCliente');
        $ssid = $peticion->get('ssid');
        $password = $peticion->get('passSsid');
        $numPc = $peticion->get('numPc');
        $ipCpe = $peticion->get('ipCpe');
        
        
        $servicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        
        $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array( "servicioId" => $idServicio));
        
        
        //----------------------------------------------------------------------
//       
        $emComercial->getConnection()->beginTransaction();
        //----------------------------------------------------------------------
        //SSID
        if($ssid!=""){
            //$emComercial->getConnection()->beginTransaction();
            $caracteristicaSsid = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "SSID", "estado"=>"Activo"));
            $productoCaracteristicaSsid = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $idProducto, "caracteristicaId"=>$caracteristicaSsid->getId()));
            $servicioProductoCaracteristicaSsid = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId"=>$productoCaracteristicaSsid->getId()));
            
            if($servicioProductoCaracteristicaSsid!=null){
                $servicioProductoCaracteristicaSsid->setValor($ssid);
                $emComercial->persist($servicioProductoCaracteristicaSsid);
            }
            else{
                $servicioProductoCaracteristicaSsid = new InfoServicioProdCaract();
                $servicioProductoCaracteristicaSsid->setServicioId($idServicio);
                $servicioProductoCaracteristicaSsid->setProductoCaracterisiticaId($productoCaracteristicaSsid->getId());
                $servicioProductoCaracteristicaSsid->setValor($ssid);
                $servicioProductoCaracteristicaSsid->setEstado("Activo");
                $emComercial->persist($servicioProductoCaracteristicaSsid);
            }
        }
        //----------------------------------------------------------------------
        
        //----------------------------------------------------------------------
        //PASSWORD SSID
        if($password!=""){
            //$emComercial->getConnection()->beginTransaction();
            $caracteristicaPass = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "PASSWORD SSID", "estado"=>"Activo"));
            $productoCaracteristicaPass = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $idProducto, "caracteristicaId"=>$caracteristicaPass->getId()));
            $servicioProductoCaracteristicaPass = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId"=>$productoCaracteristicaPass->getId()));
            
            if($servicioProductoCaracteristicaPass!=null){
                $servicioProductoCaracteristicaPass->setValor($password);
                $emComercial->persist($servicioProductoCaracteristicaPass);
            }
            else{
                $servicioProductoCaracteristicaPass = new InfoServicioProdCaract();
                $servicioProductoCaracteristicaPass->setServicioId($idServicio);
                $servicioProductoCaracteristicaPass->setProductoCaracterisiticaId($productoCaracteristicaPass->getId());
                $servicioProductoCaracteristicaPass->setValor($password);
                $servicioProductoCaracteristicaPass->setEstado("Activo");
                $emComercial->persist($servicioProductoCaracteristicaPass);
            }
        }
        //----------------------------------------------------------------------
        
        //----------------------------------------------------------------------
        //NUMERO PC
        if($numPc!=""){
            //$emComercial->getConnection()->beginTransaction();
            $caracteristicaNumPc = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "NUMERO PC", "estado"=>"Activo"));
            $productoCaracteristicaNumPc = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $idProducto, "caracteristicaId"=>$caracteristicaNumPc->getId()));
            $servicioProductoCaracteristicaNumPc = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId"=>$productoCaracteristicaNumPc->getId()));
            
            if($servicioProductoCaracteristicaNumPc!=null){
                $servicioProductoCaracteristicaNumPc->setValor($numPc);
                $emComercial->persist($servicioProductoCaracteristicaNumPc);
            }
            else{
                $servicioProductoCaracteristicaNumPc = new InfoServicioProdCaract();
                $servicioProductoCaracteristicaNumPc->setServicioId($idServicio);
                $servicioProductoCaracteristicaNumPc->setProductoCaracterisiticaId($productoCaracteristicaNumPc->getId());
                $servicioProductoCaracteristicaNumPc->setValor($numPc);
                $servicioProductoCaracteristicaNumPc->setEstado("Activo");
                $emComercial->persist($servicioProductoCaracteristicaNumPc);
            }
        }
        //----------------------------------------------------------------------
        $emComercial->getConnection()->commit();
        
        //----------------------------------------------------------------------
        $emComercial->getConnection()->beginTransaction();
        $caracIpLan= $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "IP LAN", "estado"=>"Activo"));
        $caracMascaraLan= $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "MASCARA LAN", "estado"=>"Activo"));
        $caracGatewayLan= $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "GATEWAY LAN", "estado"=>"Activo"));
        $productoCaracteristicaIpLan = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $idProducto, "caracteristicaId"=>$caracIpLan->getId()));
        $productoCaracteristicaMascaraLan = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $idProducto, "caracteristicaId"=>$caracMascaraLan->getId()));
        $productoCaracteristicaGatewayLan = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $idProducto, "caracteristicaId"=>$caracGatewayLan->getId()));

        $json_caracteristicas = json_decode($jsonCaracteristicas);
        $arrayCaracteristicas= $json_caracteristicas->caracteristicas;
        
        $emInfraestructura->getConnection()->beginTransaction();
        //BUSCAR IPS ELIMINADAS EN EL GRID
        $infoIp1 = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findBy(array( "servicioId" => $idServicio, "estado"=>"Activo"));
        for($i=0;$i<count($infoIp1);$i++){
            $ipObj = $infoIp1[$i]; 
            $ipBase = $ipObj->getId();
            
            $flagIp = 0 ;
            for($j=0;$j<count($arrayCaracteristicas);$j++){
                $ipGrid = $arrayCaracteristicas[$j]->id;
                if($ipBase == $ipGrid){
                    $flagIp = 1;
                }
            }
            
            if($flagIp == 0){
                $ipObj->setEstado("Eliminado");
                $emInfraestructura->persist($ipObj);
            }
        }
        
        //IPS DEL SERVICIO (MONITOREO, WAN)
        for($i=0;$i<count($arrayCaracteristicas);$i++){
            $tipoIp = $arrayCaracteristicas[$i]->tipo;
            $ip = $arrayCaracteristicas[$i]->ip;
            $mascara = $arrayCaracteristicas[$i]->mascara;
            $gateway = $arrayCaracteristicas[$i]->gateway;
            

            if($tipoIp=="MONITOREO" || $tipoIp=="WAN"){
                if($arrayCaracteristicas[$i]->id!=null || $arrayCaracteristicas[$i]->id!=""){
                    $infoIp = $emInfraestructura->getRepository('schemaBundle:InfoIp')->find($arrayCaracteristicas[$i]->id);
                    if($infoIp->getIp() != $ip || $infoIp->getMascara() != $mascara || $infoIp->getGateway() != $gateway){
                        
                        $infoIp->setEstado("Eliminado");
                        $emInfraestructura->persist($infoIp);
                        
                        $infoIp = new InfoIp();
                        $infoIp->setIp($ip);
                        $infoIp->setMascara($mascara);
                        $infoIp->setGateway($gateway);
                        $infoIp->setTipoIp($tipoIp);
                        $infoIp->setVersionIp("IPV4");
                        $infoIp->setEstado("Activo");
                        $infoIp->setServicioId($idServicio);
                        $infoIp->setUsrCreacion($session->get('user'));
                        $infoIp->setFeCreacion(new \DateTime('now'));
                        $infoIp->setIpCreacion($peticion->getClientIp());
                        $emInfraestructura->persist($infoIp);
                    }
                }
                else{
                    $infoIp = new InfoIp();
                    $infoIp->setIp($ip);
                    $infoIp->setMascara($mascara);
                    $infoIp->setGateway($gateway);
                    $infoIp->setTipoIp($tipoIp);
                    $infoIp->setVersionIp("IPV4");
                    $infoIp->setEstado("Activo");
                    $infoIp->setServicioId($idServicio);
                    $infoIp->setUsrCreacion($session->get('user'));
                    $infoIp->setFeCreacion(new \DateTime('now'));
                    $infoIp->setIpCreacion($peticion->getClientIp());
                    $emInfraestructura->persist($infoIp);
                }
            }
        }
//        die();
        //IP CPE
        //----------------------------------------------------------------------
        //$interfaceElementoId = $servicioTecnico->getInterfaceElementoId();
        //$enlace= $emInfraestructura->getRepository('schemaBundle:InfoEnlace')->findOneBy(array( "interfaceElementoIniId" => $interfaceElementoId, "estado"=>"Activo"));
        
        //$interfaceCpe = $enlace->getInterfaceElementoFinId();
        $elementoCpeId = $servicioTecnico->getElementoClienteId();
        $elementoCpe= $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoCpeId);
        $ipElemento = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array( "elementoId" => $elementoCpe->getId()));
        
        $ipElemento->setIp($ipCpe);
        $emInfraestructura->persist($ipElemento);
        //----------------------------------------------------------------------
        
        $emInfraestructura->flush();
        $emInfraestructura->getConnection()->commit();

        //$emComercial->getConnection()->beginTransaction();
        //IP LAN------------------------------------------------------------
        $spcIpLanBase = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$productoCaracteristicaIpLan->getId()));

        for($i=0;$i<count($spcIpLanBase);$i++){
            $ipLanBase = $spcIpLanBase[$i];
            $flag=0;//0 no encontrado - 1 encontrado

            for($j=0;$j<count($arrayCaracteristicas);$j++){
                $tipo=$arrayCaracteristicas[$j]->tipo;

                if($tipo=="LAN"){
                    $ipLanInterface=$arrayCaracteristicas[$j]->ip;

                    if($ipLanBase->getValor()==$ipLanInterface){
                        $flag=1;
                        break;
                    }
                }
            }

            if($flag==0){
                $ipLanBase->setEstado("Eliminado");
                $emComercial->persist($ipLanBase);
                $emComercial->flush();
               // $emComercial->getConnection()->commit();
            }
        }

        for($i=0;$i<count($arrayCaracteristicas);$i++){
            $tipo = $arrayCaracteristicas[$i]->tipo;
            $flag=0;
            if($tipo=="LAN"){
                $ipCpeFlag = $arrayCaracteristicas[$i]->ipCpe;
                if($ipCpeFlag==1){
                    $ipCpe = $arrayCaracteristicas[$i]->ip;
                }

                $ipLanInterface = $arrayCaracteristicas[$i]->ip;

                for($j=0;$j<count($spcIpLanBase);$j++){
                    $ipLanBase = $spcIpLanBase[$j]->getValor();

                    if($ipLanInterface==$ipLanBase){
                        $flag=1;
                        break;
                    }
                }

                if($flag==0){
                    $spcIpLan1 = new InfoServicioProdCaract();
                    $spcIpLan1->setServicioId($idServicio);
                    $spcIpLan1->setProductoCaracterisiticaId($productoCaracteristicaIpLan->getId());
                    $spcIpLan1->setValor($ipLanInterface);
                    $spcIpLan1->setEstado("Activo");
                    $emComercial->persist($spcIpLan1);
                    $emComercial->flush();
                    //$emComercial->getConnection()->commit();
                }
            }
        }
        //IP LAN------------------------------------------------------------
        //$emComercial->getConnection()->commit();

        //$emComercial->getConnection()->beginTransaction();
        //MASCARA LAN------------------------------------------------------------
        $spcMascaraLanBase = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$productoCaracteristicaMascaraLan->getId()));

        for($i=0;$i<count($spcMascaraLanBase);$i++){
            $mascaraLanBase = $spcMascaraLanBase[$i];
            $flag=0;//0 no encontrado - 1 encontrado

            for($j=0;$j<count($arrayCaracteristicas);$j++){
                $tipo=$arrayCaracteristicas[$j]->tipo;

                if($tipo=="LAN"){
                    $mascaraLanInterface=$arrayCaracteristicas[$j]->mascara;

                    if($mascaraLanBase->getValor()==$mascaraLanInterface){
                        $flag=1;
                        break;
                    }
                }
            }

            if($flag==0){
                $mascaraLanBase->setEstado("Eliminado");
                $emComercial->persist($mascaraLanBase);
                $emComercial->flush();
                //$emComercial->getConnection()->commit();
            }
        }

        for($i=0;$i<count($arrayCaracteristicas);$i++){
            $tipo = $arrayCaracteristicas[$i]->tipo;
            $flag=0;
            if($tipo=="LAN"){
                $mascaraLanInterface = $arrayCaracteristicas[$i]->mascara;

                for($j=0;$j<count($spcMascaraLanBase);$j++){
                    $mascaraLanBase = $spcMascaraLanBase[$j]->getValor();

                    if($mascaraLanInterface==$mascaraLanBase){
                        $flag=1;
                        break;
                    }
                }

                if($flag==0){
                    $spcmascaraLan1 = new InfoServicioProdCaract();
                    $spcmascaraLan1->setServicioId($idServicio);
                    $spcmascaraLan1->setProductoCaracterisiticaId($productoCaracteristicaMascaraLan->getId());
                    $spcmascaraLan1->setValor($mascaraLanInterface);
                    $spcmascaraLan1->setEstado("Activo");
                    $emComercial->persist($spcmascaraLan1);
                    $emComercial->flush();
                    //$emComercial->getConnection()->commit();
                }
            }
        }
        //MASCARA LAN------------------------------------------------------------
        //$emComercial->getConnection()->commit();

        //$emComercial->getConnection()->beginTransaction();
        //gateway LAN------------------------------------------------------------
        $spcGatewayLanBase = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$productoCaracteristicaGatewayLan->getId()));

        for($i=0;$i<count($spcGatewayLanBase);$i++){
            $gatewayLanBase = $spcGatewayLanBase[$i];
            $flag=0;//0 no encontrado - 1 encontrado

            for($j=0;$j<count($arrayCaracteristicas);$j++){
                $tipo=$arrayCaracteristicas[$j]->tipo;

                if($tipo=="LAN"){
                    $gatewayLanInterface=$arrayCaracteristicas[$j]->gateway;

                    if($gatewayLanBase->getValor()==$gatewayLanInterface){
                        $flag=1;
                        break;
                    }
                }
            }

            if($flag==0){
                $gatewayLanBase->setEstado("Eliminado");
                $emComercial->persist($gatewayLanBase);
                $emComercial->flush();
                //$emComercial->getConnection()->commit();
            }
        }

        for($i=0;$i<count($arrayCaracteristicas);$i++){
            $tipo = $arrayCaracteristicas[$i]->tipo;
            $flag=0;
            if($tipo=="LAN"){
                $gatewayLanInterface = $arrayCaracteristicas[$i]->gateway;

                for($j=0;$j<count($spcGatewayLanBase);$j++){
                    $gatewayLanBase = $spcGatewayLanBase[$j]->getValor();

                    if($gatewayLanInterface==$gatewayLanBase){
                        $flag=1;
                        break;
                    }
                }

                if($flag==0){
                    $spcgatewayLan1 = new InfoServicioProdCaract();
                    $spcgatewayLan1->setServicioId($idServicio);
                    $spcgatewayLan1->setProductoCaracterisiticaId($productoCaracteristicaGatewayLan->getId());
                    $spcgatewayLan1->setValor($gatewayLanInterface);
                    $spcgatewayLan1->setEstado("Activo");
                    $emComercial->persist($spcgatewayLan1);
                    $emComercial->flush();
                    //$emComercial->getConnection()->commit();
                }
            }
        }
        //GATEWAY LAN------------------------------------------------------------
        //$emComercial->getConnection()->commit();
        //----------------------------------------------------------------------
        
        
        if($observacionCliente!=""){
            $servicio->setObservacion($observacionCliente);    
        }
        $emComercial->persist($servicio);
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se Edito la Informacion Tecnica");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $emComercial->persist($servicioHistorial);

        $emComercial->flush();
        $emComercial->getConnection()->commit();
        
        $result = "OK";
        
        return $respuesta->setContent($result);
        
    }
    
    /**
     * Funcion que sirve para cargar los datos tecnicos de un servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 22-04-2015
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.2 22-05-2016
     * Se agrega funcionalidad para obtener data tecnica para empresa TN
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.3 10-02-2022
     * Se agrega parametro de permiso a DataTecnica FTTx de MD
     * 
     * @since 1.0
     */
    public function showServicioAction($id)
    {
        $peticion       = $this->get('request');
        $session        = $peticion->getSession();
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $boolPermisoFTTx= false;
        
        $em = $this->getDoctrine()->getManager("telconet");        

        if (null == $servicio = $em->find('schemaBundle:InfoServicio', $id)) 
        {
            throw new NotFoundHttpException('No existe el Servicio que se quiere mostrar');
        }
        else
        {
            $dataTecnica  = $this->get('tecnico.DataTecnica');

            if(true === $this->get('security.context')->isGranted('ROLE_151-8457'))
            {
                $boolPermisoFTTx = true;
            }
                        
            $arrayPeticiones = array(   'idServicio'    => $id,
                                        'idEmpresa'     => $idEmpresa,
                                        'prefijoEmpresa'=> $prefijoEmpresa,
                                        'boolPermisoFTTx'=> $boolPermisoFTTx);

            $arrayRespuesta         = $dataTecnica->getDataTecnica($arrayPeticiones);
            $arrayRespuesta['flag'] = $peticion->get('flag');
        }

        return $this->render('tecnicoBundle:InfoServicio:showServicio.html.twig', $arrayRespuesta);
    }
    
    /**
     * Funcion que sirve para cargar las ips fijas y las ips adicionales
     * de un cliente
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 22-04-2015
     * @since 1.0
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.2 06-05-2016    Se agrega parametro empresa en metodo generarJsonIpPublicaPorServicio por conflictos de 
     *                            producto INTERNET DEDICADO
     *
     * @author Allan Suarez   <arsuarez@telconet.ec>
     * @version 1.3 21-06-2017    Se obtiene arreglo de Ips y subredes designadas para configuracion de servicios VSAT
     *
     * @author Allan Suarez   <arsuarez@telconet.ec>
     * @version 1.4 05-10-2017    Se obtiene arreglo de Ips y subredes designadas para flujos de DATACENTER
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 22-01-2018 Se agrega verificación del producto Internet Small Business para validar si debe seguir el flujo de MD
     *                         y que la búsqueda de la IP debe ser a nivel de servicio
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 27-04-2018 Se agrega el id del producto Ip Adicional cuando sea un Small Business a la consulta de Ips de los servicios
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.7 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 1.6
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 11-02-2019 Se agrega función obtenerInfoMapeoProdPrefYProdsAsociados para mapear y obtener los nombres técnicos correctos
     *                          para servicios Ip Small Business e Ip TelcoHome
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 12-03-2019 Se elimina búsqueda de productos Ips asociados a TelcoHome
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.10 17-06-2019 Se agrega lógica para el producto asociado SMALL BUSINESS CENTROS COMERCIALES el mismo que será
     *                          IP Small Business Centros Comerciales.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.11 17-07-2019 Producto Internet Small Business Razón Social lo relacionamos con el producto IP Small Business Razón Social.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.12 16-04-2020 Se agrega validación para obtener las ips de TELCOTEACHER en base a las validaciones que ya existen por descripción
     *                           de producto 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.13 02-05-2020 Se elimina la función obtenerInfoMapeoProdPrefYProdsAsociados y en su lugar se usa obtenerParametrosProductosTnGpon.
     *                           Además, se envía el parámetro intIdProdInternet en lugar del parámetro strNombreTecnicoProdPref a la función 
     *                           generarJsonIpPublicaPorPunto, debido a la reestructuración de la programación de servicios Small Business.
     */
    public function verIpsAction()
    {
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion       = $this->get('request');
        $session        = $peticion->getSession();
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $em             = $this->getDoctrine()->getManager("telconet");
        $emI            = $this->getDoctrine()->getManager("telconet_infraestructura");
        $serviceTecnico = $this->get('tecnico.InfoServicioTecnico');
        $intIdServTmp   = 0; 
        $idServicio     = $peticion->get('idServicio');
        $servicio       = $em->find('schemaBundle:InfoServicio', $idServicio);
        $punto          = $servicio->getPuntoId();
        $objJson        = null;
        $start          = $peticion->query->get('start');
        $limit          = $peticion->query->get('limit');
        $strIdsProductos= "";
        $intIdProdInternet = 0;
        if(is_object($servicio))
        {
            $objProductoValidar = $servicio->getProductoId();
            if(is_object($objProductoValidar))
            {
                $strNombreTecnicoProdValidar = $objProductoValidar->getNombreTecnico();
                if($strNombreTecnicoProdValidar === "INTERNET SMALL BUSINESS")
                {
                    $intIdProdInternet      = $objProductoValidar->getId();
                    $strIdsProductos        = $objProductoValidar->getId();
                    $arrayParamsInfoProds   = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                    "strCodEmpresa"                 => $idEmpresa,
                                                    "intIdProductoInternet"         => $objProductoValidar->getId());
                    $arrayInfoMapeoProds    = $em->getRepository('schemaBundle:InfoServicio')
                                                 ->obtenerParametrosProductosTnGpon($arrayParamsInfoProds);
                    if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds))
                    {
                        foreach($arrayInfoMapeoProds as $arrayInfoProductoIp)
                        {
                            $strIdsProductos    = $strIdsProductos.",".$arrayInfoProductoIp["intIdProdIp"];
                        }
                    }
                    $intIdServTmp      = $idServicio;
                    $arrayEmpresaEquiv = $em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getEmpresaEquivalente($idServicio, $prefijoEmpresa);

                    if(isset($arrayEmpresaEquiv) && !empty($arrayEmpresaEquiv))
                    {
                        $prefijoEmpresa    = $arrayEmpresaEquiv['prefijo'];
                    }
                }
            }
        }

        if($prefijoEmpresa=="MD")
        {
            $objJson = $this->getDoctrine()
                            ->getManager("telconet_infraestructura")
                            ->getRepository('schemaBundle:InfoServicioTecnico')
                            ->generarJsonIpPublicaPorPunto( array(  "idPunto"                   => $punto->getId(), 
                                                                    "empresa"                   => $idEmpresa, 
                                                                    "start"                     => $start, 
                                                                    "limit"                     => $limit, 
                                                                    "em"                        => $em, 
                                                                    "emI"                       => $emI, 
                                                                    "serviceTecnico"            => $serviceTecnico,
                                                                    "idServicio"                => $intIdServTmp,
                                                                    "intIdProdInternet"         => $intIdProdInternet,
                                                                    "strIdsProductos"           => $strIdsProductos));
            
        }
        else if ($prefijoEmpresa=="TN")
        {
            $strTipoMedio = '';
            
            $objServicioTecnico = $emI->getRepository("schemaBundle:InfoServicioTecnico")->findOneByServicioId($idServicio);
            
            if(is_object($objServicioTecnico))
            {
                $objTipoMedio = $emI->getRepository("schemaBundle:AdmiTipoMedio")->find($objServicioTecnico->getUltimaMillaId());
                
                if(is_object($objTipoMedio))
                {
                    $strTipoMedio = $objTipoMedio->getNombreTipoMedio();
                }
            }
            
            //Si es Satelital se obtiene las Ips relacionadas a las Subredes escogidas por el Usuario
            if($strTipoMedio == 'SATELITAL')
            {
                $arrayParametros                  = array();
                $arrayParametros['intIdServicio'] = $idServicio;
                $objJson = $emI->getRepository("schemaBundle:InfoServicioTecnico")->getJsonIpsPorServiciosVsat($arrayParametros);
            }
            else if($prefijoEmpresa == 'TN' && $servicio->getProductoId()->getNombreTecnico() == 'INTERNETDC')
            {
                $arrayRespuesta = array();
                
                $objInfoIp = $emI->getRepository("schemaBundle:InfoIp")->findOneBy(array('servicioId' => $idServicio,
                                                                                         'estado'     => 'Activo'));
                if(is_object($objInfoIp))
                {
                    $objSubred = $emI->getRepository("schemaBundle:InfoSubred")->find($objInfoIp->getSubredId());
                    
                    if(is_object($objSubred))
                    {
                        $arrayRespuesta[] = array('descripcion' => 'SUBRED PUBLICA',
                                                  'ip'          => $objInfoIp->getIp(),
                                                  'subred'      => $objSubred->getSubred(),
                                                  'gateway'     => $objSubred->getGateway(),
                                                  'mascara'     => $objSubred->getMascara(),
                                                  'tipo'        => $objSubred->getTipo(),
                                                  'estado'      => $objInfoIp->getEstado());
                    }
                }
                
                //Se obtiene la subred de enganche con el ASR y el FORTI
                $objServProdCaractSubredEnganche   =    $serviceTecnico
                                                        ->getServicioProductoCaracteristica($servicio,
                                                                                            'SUBRED_ENGANCHE',
                                                                                            $servicio->getProductoId());
                if(is_object($objServProdCaractSubredEnganche))
                {
                    $objSubred = $emI->getRepository("schemaBundle:InfoSubred")->find($objServProdCaractSubredEnganche->getValor());
                    
                    if(is_object($objSubred))
                    {
                        //Obtener la 4ta IP de la red Privada /29
                        $strIpEngancge = $emI->getRepository('schemaBundle:InfoIp')
                                             ->getIpDisponibleBySubred($objSubred->getId());

                        $arrayOctetos  = explode(".", $strIpEngancge);

                        //Se suma 2 octetos para obtener la 4ta IP de la subred generada
                        $strOcteto  = intval($arrayOctetos[3]) + 2;

                        $strIpEngancge = $arrayOctetos[0].'.'.$arrayOctetos[1].'.'.$arrayOctetos[2].'.'.$strOcteto;
                        
                        $arrayRespuesta[] = array('descripcion' => 'SUBRED ENGANCHE',
                                                  'ip'          => $strIpEngancge.' ( Ip Forti )',
                                                  'subred'      => $objSubred->getSubred(),
                                                  'gateway'     => $objSubred->getGateway(),
                                                  'mascara'     => $objSubred->getMascara(),
                                                  'tipo'        => $objSubred->getTipo(),
                                                  'estado'      => $objInfoIp->getEstado());
                    }
                }
                
                $arrayRespuestaIPs = array('total' => count($arrayRespuesta), 'encontrados' => $arrayRespuesta);
                
                $objJson = json_encode($arrayRespuestaIPs);
            }
            else if($servicio->getProductoId()->getNombreTecnico() == 'L2MPLS')
            {
                $arrayRespuesta = array();
                
                $objInfoIp = $emI->getRepository("schemaBundle:InfoIp")->findOneBy(array('servicioId' => $idServicio,
                                                                                         'estado'     => 'Activo'));
                if(is_object($objInfoIp))
                {
                    $objSubred = $emI->getRepository("schemaBundle:InfoSubred")->find($objInfoIp->getSubredId());
                    
                    if(is_object($objSubred))
                    {
                        $arrayRespuesta[] = array('descripcion' => 'IP LOOPBACK (CPE)',
                                                  'ip'          => $objInfoIp->getIp(),
                                                  'subred'      => $objSubred->getSubred(),
                                                  'gateway'     => $objSubred->getGateway(),
                                                  'mascara'     => $objSubred->getMascara(),
                                                  'tipo'        => $objSubred->getTipo(),
                                                  'estado'      => $objInfoIp->getEstado());
                    }
                }
                
                //Se obtiene la subred de enganche con el ASR y el FORTI
                $objServProdCaractSubredEnganche   =    $serviceTecnico
                                                        ->getServicioProductoCaracteristica($servicio,
                                                                                            'LOOPBACK_L2',
                                                                                            $servicio->getProductoId());
                if(is_object($objServProdCaractSubredEnganche))
                {
                    $objInfoIp = $emI->getRepository("schemaBundle:InfoIp")->findOneBy(array('ip'    => $objServProdCaractSubredEnganche->getValor(),
                                                                                             'estado'=> 'Activo'));
                    
                    if(is_object($objInfoIp))
                    {
                        $objSubred     = $emI->getRepository("schemaBundle:InfoSubred")->find($objInfoIp->getSubredId());
                                                
                        $arrayRespuesta[] = array('descripcion' => 'IP LOOPBACK (PE)',
                                                  'ip'          => $objInfoIp->getIp(),
                                                  'subred'      => $objSubred->getSubred(),
                                                  'gateway'     => $objSubred->getGateway(),
                                                  'mascara'     => $objSubred->getMascara(),
                                                  'tipo'        => $objSubred->getTipo(),
                                                  'estado'      => $objInfoIp->getEstado());
                    }
                }
                
                $arrayRespuestaIPs = array('total' => count($arrayRespuesta), 'encontrados' => $arrayRespuesta);
                
                $objJson = json_encode($arrayRespuestaIPs);
            }
            else
            {
                $objJson = $this->getDoctrine()
                            ->getManager("telconet_infraestructura")
                            ->getRepository('schemaBundle:InfoServicioTecnico')->getJsonIpPorServicio( $servicio, 
                                                                                                        'Activo',
                                                                                                        $start,
                                                                                                        $limit,
                                                                                                        $em,
                                                                                                        $idEmpresa );
            }
        }
        
            
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    /**
     * Funcion que sirve para obtener la configuracion del cliente en el olt
     * @since 1.0
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 22-04-2015
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 06-05-2016  Se agrega parametro empresa en metodo generarJsonIpPublicaPorServicio por conflictos de 
     *                          producto INTERNET DEDICADO
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.3 26-05-2016 - Se recupera elementoPe desde ws networking
     *
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.4 15-06-2016 - Se mejora la visualizacion de la configuracion para los servicios MD
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 16-02-2017 - Se ajusta la visualizacion de la configuracion del PE para que pueda ser mostrada para INTMPLS que tengan
     *                           o esten ligados a un PE
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 15-12-2017 - Se agregan validaciones para el flujo de servicios con producto Internet Small Business
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 11-02-2019 Se agregan validaciones para el flujo de servicios con producto TelcoHome
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.9 18-06-2019 - Se adiciona lógica para el producto INTERNET SMALL BUSINESS CENTROS COMERCIALES.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.10 17-07-2019 - Se adiciona lógica para el producto Internet Small Business Razón Social
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.11 05-08-2019 - Se agrega a la validación de productos migrados a anillo, el producto L3MPLS SDWAN. 
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.12 18-10-2019 - Se agrega logica para equipos ZTE. 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.13 26-02-2020 Se elimina validación de tecnología ZTE, ya que no se ejecutan los mismos comandos que en la tecnología Huawei
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.14 05-05-2020 Se elimina código innecesario para obtener producto Small Business
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.15 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.16 28-02-2023 Se agrega validacion por prefijo empresa Ecuanet para seguir el flujo correctamente.
     */
    public function verConfiguracionOltAction()
    {
        $respuesta       = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion        = $this->get('request');
        $session         = $peticion->getSession();
        $strUsrCreacion  = $session->get('user');
        $strClientIp     = $peticion->getClientIp();
        // ========================================================================
        // GET PARAMETROS DE LA SESSION
        // ========================================================================
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        // ========================================================================
        // GET PARAMETROS DEL REQUEST
        // ========================================================================
        $idServicio      = $peticion->get('idServicio');
        // ========================================================================
        // LOAD ENTITY MANAGER
        // ========================================================================
        $em              = $this->getDoctrine()->getManager("telconet");
        $emI             = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emGeneral       = $this->getDoctrine()->getManager("telconet_general");
        // ========================================================================
        // LOAD SERVICES
        // ========================================================================
        $serviceTecnico  = $this->get('tecnico.InfoServicioTecnico');

        // ========================================================================
        // VALICACION DEL ESTADO DEL SERVICIO
        // ========================================================================
        $servicio        = $em->find('schemaBundle:InfoServicio', $idServicio);
        $serviceRedAccesoMiddleware = $this->get('tecnico.RedAccesoMiddleware');
        // ...
        if( $servicio->getEstado() != "Activo" && 
            $servicio->getEstado() != "In-Corte" && 
            $servicio->getEstado() != "EnPruebas" && 
            $servicio->getEstado() != "EnVerificacion" && 
            $servicio->getEstado() != "Cancel")
        {   
            $respuesta->setContent("Estado del Servicio No disponible para consulta sobre el Elemento!");
            return $respuesta;
        }

        $booleanTipoRedGpon = false;
        $boolInternetLite   = false;
        $arrayParametrosWs  = array();
        $objProductoValidar = $servicio->getProductoId();
        if(is_object($objProductoValidar))
        {
            $strNombreTecnicoProdValidar = $objProductoValidar->getNombreTecnico();
            if($strNombreTecnicoProdValidar === "INTERNET SMALL BUSINESS" || $strNombreTecnicoProdValidar === "TELCOHOME" )
            {
                $boolInternetLite  = true;
                $arrayEmpresaEquiv = $em->getRepository('schemaBundle:AdmiParametroDet')
                                        ->getEmpresaEquivalente($idServicio, $prefijoEmpresa);

                if(isset($arrayEmpresaEquiv) && !empty($arrayEmpresaEquiv))
                {
                    $prefijoEmpresa    = $arrayEmpresaEquiv['prefijo'];
                }
            }
            else
            {
                //obtengo el tipo de red
                $objTipoRed = $serviceTecnico->getServicioProductoCaracteristica($servicio, "TIPO_RED", $objProductoValidar);
                //se verifica si el servicio es tipo de red GPON
                if(is_object($objTipoRed))
                {
                    $arrayParVerTipoRed = $em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $objTipoRed->getValor(),
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                    if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                    {
                        $booleanTipoRedGpon = true;
                    }
                }
            }
        }
        if($prefijoEmpresa == 'MD' || $prefijoEmpresa == 'EN' || $booleanTipoRedGpon)
        {
            $servicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array( "servicioId" =>$servicio->getId()));
            $ultimaMilla     = $emI->getRepository('schemaBundle:AdmiTipoMedio')->find($servicioTecnico->getUltimaMillaId());
            
            if($boolInternetLite || $booleanTipoRedGpon)
            {
                $producto   = $objProductoValidar;
            }
            else
            {
                $producto   = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "empresaCod"          => $idEmpresa, 
                                                                                                "descripcionProducto" => "INTERNET DEDICADO",
                                                                                                "estado"              => "Activo"));
            }
            
            $servicioProdCaractIndice  = $serviceTecnico->getServicioProductoCaracteristica($servicio, "INDICE CLIENTE", $producto);
            $interfaceElementoBackbone = $emI->getRepository('schemaBundle:InfoInterfaceElemento')->find($servicioTecnico->getInterfaceElementoId());
            $modeloElemento            = $interfaceElementoBackbone->getElementoId()->getModeloElementoId();

            //ejecucion de script por ultima milla
            if($ultimaMilla->getNombreTipoMedio()=="Cobre")
            {
                $scriptArray    = $serviceTecnico->obtenerArregloScript("confirmarActivacion",
                                                                        $interfaceElementoBackbone->getElementoId()->getModeloElementoId());
                $idDocumento    = $scriptArray[0]->idDocumento;
                $usuario        = $scriptArray[0]->usuario;
                $protocolo      = $scriptArray[0]->protocolo;

                $salida = $serviceTecnico->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, 
                                                                $interfaceElementoBackbone->getElementoId()->getId(), 
                                                                $interfaceElementoBackbone->getNombreInterfaceElemento());
                $pos          = strpos($salida, "{"); 
                $jsonObj      = substr($salida, $pos);
                $resultadJson = json_decode($jsonObj);  
            }
            else if($ultimaMilla->getNombreTipoMedio()=="Radio")
            {
                $scriptArray    = $serviceTecnico->obtenerArregloScript("confirmarActivacion",
                                                                        $interfaceElementoBackbone->getElementoId()->getModeloElementoId());
                $idDocumento    = $scriptArray[0]->idDocumento;
                $usuario        = $scriptArray[0]->usuario;
                $protocolo      = $scriptArray[0]->protocolo;
                $salida         = $serviceTecnico->ejecutarComandoRadio( $idDocumento, 
                                                                         $usuario, 
                                                                         "radio", 
                                                                         $interfaceElementoBackbone->getElementoId(), 
                                                                         "" );
                $pos            = strpos($salida, "{"); 
                $jsonObj        = substr($salida, $pos);
                $resultadJson   = json_decode($jsonObj);  
            }
            else if($ultimaMilla->getNombreTipoMedio()=="Fibra Optica" || $ultimaMilla->getNombreTipoMedio()=="FTTx")
            {
                //ejecucion de script por modelo
                if($modeloElemento->getNombreModeloElemento()=="EP-3116")
                {
                    $scriptArray    = $serviceTecnico->obtenerArregloScript("obtenerDatosServicio",
                                                                            $interfaceElementoBackbone->getElementoId()->getModeloElementoId());
                    $idDocumento    = $scriptArray[0]->idDocumento;
                    $protocolo      = $scriptArray[0]->protocolo;
                    $datos          = $interfaceElementoBackbone->getNombreInterfaceElemento().",".
                                      $interfaceElementoBackbone->getNombreInterfaceElemento().",".
                                      $servicioProdCaractIndice->getValor();
                    $comando        = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->container->getParameter("path_telcos").
                                      "telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".$this->container->getParameter('host').
                                      "' '".$idDocumento."' 'usuario' 'SSH' '".$servicioTecnico->getElementoId()."' '".$datos."' '".
                                      $this->container->getParameter("path_parameters")."'''";
                    $salida         = shell_exec($comando);
                    $pos            = strpos($salida, "{"); 
                    $jsonObj        = substr($salida, $pos);
                    $resultadJson   = json_decode($jsonObj);            
                }
                else if($modeloElemento->getNombreModeloElemento()=="MA5608T")
                {
                      // cambiar obtenerConfiguracionCliente a llamada WS VERIFICAR_SERIE_SERVICE_LC
                      //OBTENER SERIE ONT
                      $objElementoCliente     = $emI->getRepository('schemaBundle:InfoElemento')
                                                              ->find($servicioTecnico->getElementoClienteId());
                      $strSerieOnt            = ($objElementoCliente)?$objElementoCliente->getSerieFisica():"";
                      //OBTENER MAC ONT
                      $objMacOnt    = $serviceTecnico->getServicioProductoCaracteristica($servicio, "MAC ONT", $producto);
                      $strMacOnt    = ($objMacOnt)?$objMacOnt->getValor():"";
                      $strNombreElementoOlt   = "";
                      $strIpElementoOlt       = "";
                      $intIdElementoOlt       = $servicioTecnico->getElementoId();
                      $objElementoOlt         = $emI->getRepository('schemaBundle:InfoElemento')->find($intIdElementoOlt);
                      if(is_object($objElementoOlt))
                      {
                          $strNombreElementoOlt   = $objElementoOlt->getNombreElemento();
                      }
                      $objIpElementoOlt       = $emI->getRepository('schemaBundle:InfoIp')
                                                                    ->findOneBy(array("elementoId" => $intIdElementoOlt));
                      if(is_object($objIpElementoOlt))
                      {
                          $strIpElementoOlt = $objIpElementoOlt->getIp();
                      }
                      $objSpcGemPort            = $serviceTecnico->getServicioProductoCaracteristica($servicio, "GEM-PORT", $producto);
                      $strGemPort               = ($objSpcGemPort)         ? $objSpcGemPort->getValor()         : "";
                      $objProfileProdCaract     = $serviceTecnico->getServicioProductoCaracteristica($servicio, "SERVICE-PROFILE",  $producto);
                      $strServiceProfile        = ($objProfileProdCaract)  ? $objProfileProdCaract->getValor()  : "";
                      $objSpcLineProfileName    = $serviceTecnico->getServicioProductoCaracteristica($servicio, "LINE-PROFILE-NAME", $producto);
                      $strOntLineProfile        = ($objSpcLineProfileName) ? $objSpcLineProfileName->getValor() : "";
                      $objSpcTrafficTable       = $serviceTecnico->getServicioProductoCaracteristica($servicio, "TRAFFIC-TABLE", $producto);
                      $strTrafficTable          = ($objSpcTrafficTable)    ? $objSpcTrafficTable->getValor()    : "";
                      $objIndiceCliente         = $serviceTecnico->getServicioProductoCaracteristica($servicio, "INDICE CLIENTE", $producto);
                      $strOntId                 = ($objIndiceCliente)      ? $objIndiceCliente->getValor()      : "";
                      //OBTENER NOMBRE CLIENTE
                      $objPersona               = $servicioTecnico->getServicioId()->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();
                      $strNombreCliente         = $objPersona->__toString();
                      //OBTENER IDENTIFICACION
                      $strIdentificacion      = $objPersona->getIdentificacionCliente();
                      $arrayDatosONT          = array(
                                                'serial_ont'       => $strSerieOnt,
                                                'mac_ont'          => $strMacOnt,
                                                'nombre_olt'       => $strNombreElementoOlt,
                                                'ip_olt'           => $strIpElementoOlt,
                                                'puerto_olt'       => $interfaceElementoBackbone->getNombreInterfaceElemento(),
                                                'modelo_olt'       => $modeloElemento->getNombreModeloElemento(),
                                                'gemport'          => $strGemPort,
                                                'estado_servicio'  => $servicio->getEstado(),
                                                'service_profile'  => $strserviceProfile,
                                                'line_profile'     => $strOntLineProfile,
                                                'traffic_table'    => $strTrafficTable,
                                                'ont_id'           => $strOntId,
                                              );
                      $arrayDatosMiddleware   = array(
                                                'nombre_cliente'        => $strNombreCliente,
                                                'login'                 => $servicio->getPuntoId()->getLogin(),
                                                'identificacion'        => $strIdentificacion,
                                                'datos'                 => $arrayDatosONT,
                                                'opcion'                => "VERIFICAR_SERIE_SERVICE_LC",
                                                'ejecutaComando'        => $this->container->getParameter('ws_rda_ejecuta_scripts'),
                                                'usrCreacion'           => $strUsrCreacion,
                                                'ipCreacion'            => $strClientIp,
                                            );
                    $resultadJson               = $serviceRedAccesoMiddleware->middleware(json_encode($arrayDatosMiddleware));
                    $resultadJson               = json_decode(json_encode($resultadJson));

                }
            }
            $respuesta->setContent(nl2br($resultadJson->mensaje, true));
        } 
        elseif ($prefijoEmpresa == 'TN')
        {
            //Obtener indicador que referencia si se necesita mostrar la info tecnica del Switch y Pe o solo del PE
            //Por default siempre mostrara la informacion del Switch y del PE cada que se trate de un servicio L3MPLS
            $strRequiereConfCompleta = $peticion->get('requiereInfoCompleta')?$peticion->get('requiereInfoCompleta'):'S';
            
            $servicioTecnico         = $em->getRepository('schemaBundle:InfoServicioTecnico')
                                          ->findOneBy(array( "servicioId" =>$servicio->getId()));
            $objProducto             = $em->getRepository('schemaBundle:AdmiProducto')
                                          ->find($servicio->getProductoId()->getId());
            
            $strResponse = "";
            $status      = "OK";
            
            //Si requiere configuracion completa se mostara informacion de Switch y Pe caso contrario solo del Pe
            if($strRequiereConfCompleta == 'S')
            {
                $objElemento          = $emI->getRepository('schemaBundle:InfoElemento')
                                            ->find($servicioTecnico->getElementoId());
                $objInterfaceElemento = $emI->getRepository('schemaBundle:InfoInterfaceElemento')
                                        ->find($servicioTecnico->getInterfaceElementoId());
                // ------------------------------------------------------------------------------------
                // Call al WebService NetworkingScriptsService --> SWITCH
                // ------------------------------------------------------------------------------------
                $arrayPeticiones = array();
                $arrayPeticiones['url']    = 'showRunSW';
                $arrayPeticiones['accion'] = 'consultar';
                //...
                $arrayPeticiones['dispositivo']     = $objElemento->getNombreElemento();
                $arrayPeticiones['pto']             = $objInterfaceElemento->getNombreInterfaceElemento();
                //...
                $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
                $arrayPeticiones['login_aux']       = $servicio->getLoginAux();
                $arrayPeticiones['user_name']       = $session->get('user');
                $arrayPeticiones['user_ip']         = $peticion->getClientIp();                              

                //Ejecucion del metodo via WS para realizar la configuracion del SW
                $networkingScriptsService = $this->get('tecnico.NetworkingScripts');
                $arrayRespuesta = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);

                $status  = $arrayRespuesta['status'];
                $mensaje = $arrayRespuesta['mensaje'];
                
                if($status == 'OK')
                {
                    $strResponse = $strResponse . '===========================================================================<br />';
                    $strResponse = $strResponse . 'Configuración en el elemento >>> SWITCH<br />';
                    $strResponse = $strResponse . '===========================================================================<br />';
                    $strResponse = $strResponse . $arrayRespuesta['mensaje'];
                    $strResponse = $strResponse . '<br />' . nl2br($arrayRespuesta['comandos']['showRunInterface'], true);
                    $strResponse = $strResponse . '<br />' . nl2br($arrayRespuesta['comandos']['showRunBW'], true);
                }
                else
                {
                    $response = new Response("Problemas en la comunicación: " . $mensaje); 
                    $response->setStatusCode('406');
                    return $response;
                }
            }
            
            $objElementoPe = null;
            
            if(is_object($servicioTecnico))
            {
                $arrayParametrosWs["intIdElemento"] = $servicioTecnico->getElementoId();
                $arrayParametrosWs["intIdServicio"] = $idServicio;

                $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
            }            
            
            //Si el Servicio se encuentra conectado a un PE ( L3MPLS o INTERNET MPLS migrado a ANILLO ) se mostrara la configuracion del PE
            if(is_object($objElementoPe))
            {
                $strVrf  = '';
                $strVlan = '';
                
                if($objProducto->getNombreTecnico() == "L3MPLS" || $objProducto->getNombreTecnico() == "L3MPLS SDWAN")
                {
                     //VLAN
                    $objCaractVlan          = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneBy(array( "descripcionCaracteristica" => 'VLAN',"estado" => "Activo"));

                    if(is_object($objCaractVlan))
                    {
                        $objProdCaractVlan     = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                    ->findOneBy(array( "productoId"          => $objProducto->getId(),
                                                                       "caracteristicaId"    => $objCaractVlan->getId(),
                                                                       "estado"              => "Activo"));

                        if(is_object($objProdCaractVlan))
                        {
                            $objServProdCaractVlan = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array("servicioId"                => $servicio->getId(),
                                                                          "productoCaracterisiticaId" => $objProdCaractVlan->getId(),
                                                                          "estado"                    => "Activo"));
                            if(is_object($objServProdCaractVlan))
                            {
                                $objVlanCaract = $em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                    ->find($objServProdCaractVlan->getValor());

                                if(is_object($objVlanCaract))
                                {
                                    $objVlan = $em->getRepository('schemaBundle:InfoDetalleElemento')
                                                  ->find($objVlanCaract->getValor());

                                    if(is_object($objVlan))
                                    {
                                        $strVlan = $objVlan->getDetalleValor();
                                    }
                                }
                            }
                        }
                    }
                    
                    //VRF
                    $objCaractVrf   = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                         ->findOneBy(array( "descripcionCaracteristica" => 'VRF',"estado" => "Activo"));
                    
                    if(is_object($objCaractVrf))
                    {
                        $objProdCaractVrf =  $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array( "productoId"          => $objProducto->getId(),
                                                                   "caracteristicaId"    => $objCaractVrf->getId(),
                                                                   "estado"              => "Activo"));
                        if(is_object($objProdCaractVrf))
                        {
                            $objServProdCaractVrf =  $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array( "servicioId"                  => $servicio->getId(),
                                                                           "productoCaracterisiticaId"   => $objProdCaractVrf->getId(),
                                                                           "estado"                      => "Activo"));
                            if(is_object($objServProdCaractVrf))
                            {
                                $objVrf = $em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')->find($objServProdCaractVrf->getValor());

                                if(is_object($objVrf))
                                {
                                    $strVrf = $objVrf->getValor();
                                }
                            }
                        }
                    }                   
                }
                else if($objProducto->getNombreTecnico() == "INTMPLS" || $objProducto->getNombreTecnico() == "INTERNET SDWAN")
                {
                    $objSpcVlan = $serviceTecnico->getServicioProductoCaracteristica($servicio, "VLAN", $objProducto);

                    if( is_object($objSpcVlan) )
                    {
                        $objVlan  = $em->getRepository('schemaBundle:InfoDetalleElemento')->find($objSpcVlan->getValor());

                        if(is_object($objVlan))
                        {
                            $strVlan = $objVlan->getDetalleValor();
                        }
                    }
                    
                    $objEmpresaCod = $em->getRepository("schemaBundle:InfoEmpresaGrupo")->findOneByPrefijo('TN');
                    
                    //VRF defina por NW para servicios de INTERNET
                    $arrayParametrosResultado = $emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                          ->getOne('VRF-INTERNET',
                                                                   'TECNICO',
                                                                   '',
                                                                   'VRF-INTERNET',
                                                                   '','','','','',
                                                                   is_object($objEmpresaCod)?$objEmpresaCod->getId():'',
                                                                   null
                                                                   );
                    
                    $strVrf = isset($arrayParametrosResultado['valor1'])?$arrayParametrosResultado['valor1']:'';
                }
                
                if (!empty($strVlan) && !empty($strVrf))
                {
                    $arrayPeticiones                    = array();
                    $arrayPeticiones['url']             = 'showRunPE';
                    $arrayPeticiones['accion']          = 'consultar';
                    $arrayPeticiones['dispositivo']     = $objElementoPe->getNombreElemento();
                    $arrayPeticiones['pto']             = $strVlan;
                    $arrayPeticiones['vrf']             = $strVrf;
                    //...
                    $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
                    $arrayPeticiones['login_aux']       = $servicio->getLoginAux();
                    $arrayPeticiones['user_name']       = $session->get('user');
                    $arrayPeticiones['user_ip']         = $peticion->getClientIp();                              

                    //Ejecucion del metodo via WS para realizar la configuracion del SW
                    $networkingScriptsService = $this->get('tecnico.NetworkingScripts');
                    $arrayRespuesta = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);

                    $status  = $arrayRespuesta['status'];
                    $mensaje = $arrayRespuesta['mensaje'];
                    if($status == 'OK')
                    {
                        $strResponse = $strResponse . '<br />===========================================================================<br />';
                        $strResponse = $strResponse . 'Configuración en el elemento >>> PE<br />';
                        $strResponse = $strResponse . '===========================================================================<br />';
                        $strResponse = $strResponse . $arrayRespuesta['mensaje'];
                        $strResponse = $strResponse . '<br />' . nl2br($arrayRespuesta['comandos']['showRunInterface'], true);
                        $strResponse = $strResponse . '<br />' . nl2br($arrayRespuesta['comandos']['showRunVrf'], true);
                    }
                    else
                    {
                        $strResponse = $strResponse . '<br />===========================================================================<br />';
                        $strResponse = $strResponse . 'Configuración en el elemento >>> PE<br />';
                        $strResponse = $strResponse . '===========================================================================<br />';
                        $strResponse = $strResponse . $arrayRespuesta['mensaje'];
                    }
                }
                else
                {
                    $strResponse = $strResponse . '<br />===========================================================================<br />';
                    $strResponse = $strResponse . 'Configuración en el elemento >>> PE<br />';
                    $strResponse = $strResponse . '===========================================================================<br />';
                    $strResponse = $strResponse . '<br /> <br /> Inconsitencia en la data para consultar informacion del elemento PE <br /><br />';
                    $strResponse = $strResponse . $arrayRespuesta['mensaje'];
                }
            }

            $respuesta->setContent($strResponse);
        }
        else
        {
            $response = new Response("Problemas en la comunicación: " . $mensaje); 
            $response->setStatusCode('406');
            return $response;
        }
        
        return $respuesta;
    }
      
    /**
     * Funcion que sirve para ver los concentradores y extremos con su respectiva data
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 22-05-2016
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.1 12-10-2016 - Se mejora proceso que muestra la informacion de concentrador y extremo para ser mostrado en la data tecnica
     *                           enviado consultas directamente a la base de datos
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.2 13-12-2016 - Se muestra en el caso de concentrador backup solo las capacidades de su concentrador principal relacionado
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.3 04-07-2017 - Se omite servicios InCorte como definidos para suma de concentradores
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.4 23-11-2020 - Se modifica el nombre de la función con una nueva para visualizar los datos del concentrador con TIPO_IP = WAN
     */
    public function verConcentradorExtremosServicioAction()
    {
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion           = $this->get('request');
        $session            = $peticion->getSession();
        $prefijoEmpresa     = $session->get('prefijoEmpresa');
        $emComercial        = $this->getDoctrine()->getManager("telconet");        
        
        $intIdServicio              = $peticion->get('idServicio');
        $objServicio                = $emComercial->find('schemaBundle:InfoServicio', $intIdServicio);
        $serviceTecnico             = $this->get('tecnico.InfoServicioTecnico');
        $intServicioConcentradorId  = 0;
        $arrayData                  = array();        
        
        if($prefijoEmpresa == "TN")
        {
            $esConcentrador = $objServicio->getProductoId()->getEsConcentrador();
                
            if($esConcentrador == "SI")
            {
                $intServicioConcentradorId = $objServicio->getId();
                
                $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                  ->findOneByServicioId($intServicioConcentradorId);
                
                if(is_object($objServicioTecnico))
                {
                    if($objServicioTecnico->getTipoEnlace() == 'BACKUP')
                    {
                        $objServicioProductoCaract = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                        "ES_BACKUP",
                                                                                                        $objServicio->getProductoId());
                        if(is_object($objServicioProductoCaract))
                        {
                            $intServicioConcentradorId = $objServicioProductoCaract->getValor();
                        }
                    }
                    
                }
            }
            else if($esConcentrador == "NO")
            {
                $objSpcEnlaceDatos = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "ENLACE_DATOS", $objServicio->getProductoId());

                if(is_object($objSpcEnlaceDatos))
                {
                    $intServicioConcentradorId = intval($objSpcEnlaceDatos->getValor());
                }
            }

            if($intServicioConcentradorId > 0)
            {
                $arrayParametros = array();
                
                //Los extremos con los siguientes estados no serán considerados dentro de la consulta
                $arrayParametros['estadosDiscriminados']      = array('Eliminado','Anulado','Rechazada');
                $arrayParametros['intIdServicioConcentrador'] = $intServicioConcentradorId;
                
                //Consulta por el TIPO_IP WAN
                $arrayParametros['strTipoIp'] = 'WAN';
                
                $arrayInformacionExtremosConcentradores = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                      ->getArrayInformacionDataConcentradorExtremo($arrayParametros);
                
                if(isset($arrayInformacionExtremosConcentradores))
                {
                    foreach($arrayInformacionExtremosConcentradores as $arrayInfoExtremoConcentrador)
                    {
                        $strBrInicial = "";
                        $strBrFinal   = "";
                        
                        if($intIdServicio == $arrayInfoExtremoConcentrador['idServicio'])
                        {
                            $strBrInicial = "<b>";
                            $strBrFinal   = "</b>";
                        }
                        
                        //Si el servicio no se encuentre en los estados que indiquen el servicio ya fue Activado se los diferencia
                        //Para indicar que aun no aportan sumatoria de BW al concentrador
                        if($arrayInfoExtremoConcentrador['estado'] != 'Activo' &&
                           $arrayInfoExtremoConcentrador['estado'] != 'EnPruebas'
                           )
                        {
                            $strBrInicial = $strBrInicial."<p style='color:#848484;'>";
                            $strBrFinal   = "</p>".$strBrFinal;
                        }
                        
                        $arrayData[] = array(   "servicioId"   => $strBrInicial.$arrayInfoExtremoConcentrador['idServicio'].$strBrFinal,
                                                "login"        => $strBrInicial.$arrayInfoExtremoConcentrador['login'].$strBrFinal,
                                                "loginAux"     => $strBrInicial.$arrayInfoExtremoConcentrador['loginAux'].$strBrFinal,
                                                "ip"           => $strBrInicial.$arrayInfoExtremoConcentrador['ip'].$strBrFinal,
                                                "capacidad1"   => $strBrInicial.$arrayInfoExtremoConcentrador['capacidadUno'].$strBrFinal,
                                                "capacidad2"   => $strBrInicial.$arrayInfoExtremoConcentrador['capacidadDos'].$strBrFinal,
                                                "estado"       => $strBrInicial.$arrayInfoExtremoConcentrador['estado'].$strBrFinal,
                                                "codigoUM"     => $strBrInicial.$arrayInfoExtremoConcentrador['codigoUM'].$strBrFinal,
                                                "tipo"         => $strBrInicial.$arrayInfoExtremoConcentrador['tipo'].$strBrFinal
                                            );
                                   
                    }
                }                            
            }
        }
        
        $data = json_encode($arrayData);
        $respuesta->setContent('{"encontrados":'.$data.'}');
        
        return $respuesta;
    }
    
    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO INTERNET
     * ******************************************************
     */
    
    /** Funcion que sirve para Activar Clientes
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 11-12-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 30-10-2015
     * @since 1.0
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 18-11-2015 Se agrega maximo de tiempo de ejecución
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 25-02-2016 Se agrega codigo para finalizacion de solicitudes
     * 
     * Se actualiza el controlador para que reciba los nuevos parámetros
     * que se necesitaran para activar el servicio para la empresa TN
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.4 10-03-2016
     * 
     * Se agregan parametros para activar servicio um radio para la empresa TN
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.5 23-05-2016
     * 
     * Se agrega validación de empresa equivalente para NO finalizar solicitudes de planificacion de servicios equivalentes a TTCO
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.6 10-08-2016
     * 
     * Se agregan parametros para activar servicios dentro de un mismo cpe con diferente mac
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.7 15-08-2016
     * 
     * Se agregan parametros para activar servicios con un equipo radio ya existente en TN (Proyecto CNE)
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.8 30-11-2016
     *
     * Se agrega parametro esPseudoPe para ejecutar flujo de activacion de acuerdo a variable enviada
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.9 08-12-2016
     * 
     * Se modifica operacion ternaria para verificar si campo pseudope existe y es enviado dentro del flujo ( TN )
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.0 01-02-2017
     * 
     * Se modifica operacion ternaria para verificar si campo pseudope existe , si no existe envia como default N
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.1 07-02-2017
     *
     * Se agregan parametros utilizados en activación de servicios que incluyen equipos SmartWifi
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.2 23-02-2017
     * @since 2.1
     *
     * Se agrega finalización de de tareas para activación de servicios con tipo de orden Traslado
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.3 08-06-2017
     * @since 2.2
     *
     * Se agrega informacion de vlans utilizadas para activacion de servicios de DC
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.4 27-09-2017
     *
     * Se agregan parametros para procesar traslados TN
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.5 01-11-2017
     * @since 2.3
     *
     * @author Jesús Bozada <jbozadfa@telconet.ec>
     * @version 2.5 01-02-2018    Se agrega confirmación automatica de servicios segun lo solicitado
     * @since 2.4
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.6 11-12-2017 Se agrega la obtención del parámetro para conocer si el servicio es Internet Small Business
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.7 08-08-2018 Se realizan ajustes para implementar la activación de servicios DC utilizando el mismo CPE del punto, se reciben
     *                         nuevos parámetros que serán enviados desde el .js
     * @since 2.6
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.8 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 2.7
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.9 18-03-2019 Se agrega validación para excluir ejecución de función grabarHistorial para servicios Telcohome con tipo de orden T
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.0 27-05-2019 - Se agrega funcionalidad para agregar al arrayPeticiones 3 elementos nuevos:
     *                              • idServicioWifi   => Es el id del servicio Wifi para los concentradores L3MPLS de ADM y NAV.
     *                              • intIdServWifi    => Es el id del servicio Wifi para los servicios tradicionales que vayan
     *                                                    a ser instalados en conjunto con un INTERNET WIFI.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 3.1 08-10-2019 - Se agrega funcionalidad para agregar el progreso de regularización en la tarea.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 3.2 20-09-2019 - Acción que se ejecuta desde el botón activar del grid tecnico, la cual realiza el llamado a la lógica de la 
     *                           activación de un producto Datos FWA. 
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 3.3 27-01-2020 - Se ingresa validación para realizar cambio de cpe cuando se realiza una migración de servicio de Internet Mpls
     *                           a Internet Sdwan.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.4 18-02-2020 - Se agrega funcionalidad para agregar al arrayPeticiones los siguientes elementos:
     *                              • idServicioCou   => Es el id del servicio COU LINEAS TELEFONIA FIJA .
     *                              • intIdServCou    => Es el id del servicio COU LINEAS TELEFONIA FIJA para los servicios tradicionales que vayan
     *                                                    a ser instalados.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.5 23-09-2020 Se inicializa el valor de la tareaId enviado como parámetro a la función getInfoTareaByServicioId, ya que 
     *                         actualmente ésta retorna error siempre y provoca que no se recargue el grid aún cuando la activación
     *                         a nivel de equipos dió OK
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.6 09-03-2021 - Se envia desde el js el tipo de red:GPON o MPLS
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.7 03-05-2021 | Se agrega la key 'arrayZeroTouch' al $arrayPeticiones para poder realizar flujo ZeroTouch.
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.8 04-11-2021 - Se agregan nuevos parámetros para considerar los dispositivos del cliente que se encuentran en el nodo.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.9 24-09-2021 - Se agrega confirmación enviada por el usuario para definir si se debe o no ejecutar la cancelación de los
     *                           servicios que son misma UM. En la activación de productos SDWAN.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 4.0 26-10-2021 - Se agregan nuevos parámetros para considerar el traslado de un servicio Internet Small Business.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.1 18-03-2022 - Se realiza la validación para sumarizado de las capacidades en la red TN GPON_MPLS.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.2 01-08-2022 - Se agregan nuevos parámetros para la activación de los servicios SAFE ANALYTICS CAM para las cámaras safecity.
     *
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 4.3 20-09-2022 Se agrega el tipoCamara y formatoResCamara a los parametros
     *
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 2.0 17-1-2023 - Se agrega arreglos elemento adicionales clente y nodo para servicios safe city.
     *
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 4.4 20-09-2022 Se agrega la caracteristica ip controladora como parametro
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 4.5 23-02-2023 - Se agrega validacion para activar y registro tarea de  internet Ecuanet.
     *
     * @author Joel Muñoz <jrmunoz@telconet.ec>
     * @version 4.6 19-04-2023 Se agrega funcioanlidad para actualización de data en migración SDWAN
     */
    public function activarClienteAction()
    {
        //OBTENCION DE PARAMETROS-----------------------------------------------*/
        //se agrega maximo de tiempo de ejecución
        ini_set('max_execution_time', 800000);
        $respuesta              = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $strResult              = "";
        $peticion               = $this->get('request');
        $session                = $peticion->getSession();
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura      = $this->getDoctrine()->getManager('telconet_infraestructura');
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $arrayParametros        = array();
        $strMensajeResponse     = "";
        $intEmpresaIdMD         = "18";
        $strPrefijoEmpresaEN    = "EN";
        $serviceInfoServTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strCancelarServMismaUM = "N";
        $strCaractMigraTecSdwan = "Migración de Tecnología SDWAN";
        $booleanEsSDWAN         = $peticion->get('booleanEsSDWAN');
        $booleanEsMigracionSDWAN= $peticion->get('booleanEsMigracionSDWAN');

        $arrayInfoServicioProdCaract  = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
        ->getByServicioCaracteristicaAndProducto($peticion->get('idServicio'),
                                                 $strCaractMigraTecSdwan,
                                                 $peticion->get('idProducto'),
                                                 '',
                                                 '');

        if(!empty($arrayInfoServicioProdCaract["data"]) && is_array($arrayInfoServicioProdCaract["data"]))
        {
            $strCancelarServMismaUM = $arrayInfoServicioProdCaract["data"][0]["nombre"];
        }
                
        $arrayPeticiones=array(
                                'peticion'                      => $peticion,
                                'strCancelarServMismaUM'        => $strCancelarServMismaUM,
                                'idTecnicoEncargado'            => $peticion->get('idTecnicoEncargado'),
                                'idControlSdCpe'                => $peticion->get('idControlSdCpe'),
                                'idControlSdTransciever'        => $peticion->get('idControlSdTransciever'),
                                'arrayDipositivosNodo'          => json_decode($peticion->get('jsonDipositivosNodo'),true),
                                'arrayDipositivosCliente'       => json_decode($peticion->get('jsonDipositivosCliente'),true),
                                'idEmpresa'                     => $session->get('idEmpresa'),
                                'prefijoEmpresa'                => $session->get('prefijoEmpresa'),
                                'idServicio'                    => $peticion->get('idServicio'),
                                'idProducto'                    => $peticion->get('idProducto'),
                                'perfil'                        => $peticion->get('perfil'),
                                'login'                         => $peticion->get('login'),
                                'capacidad1'                    => $peticion->get('capacidad1'),
                                'capacidad2'                    => $peticion->get('capacidad2'),
                                'interfaceElementoId'           => $peticion->get('interfaceElementoId'),
                                'interfaceElementoSplitterId'   => $peticion->get('interfaceElementoSplitterId'),
                                'ultimaMilla'                   => $peticion->get('ultimaMilla'),
                                'plan'                          => $peticion->get('plan'),
                                'mac'                           => $peticion->get('mac'),
                                'vlan'                          => $peticion->get('vlan'),
                                'anillo'                        => $peticion->get('anillo'),
                                'ipCpeRadio'                    => $peticion->get('ipCpeRadio'),
                                'macWifi'                       => $peticion->get('macWifi'),
                                'serieWifi'                     => $peticion->get('serieWifi'),
                                'modeloWifi'                    => $peticion->get('modeloWifi'),
                                'macOnt'                        => $peticion->get('macOnt'),
                                'serieOnt'                      => $peticion->get('serieOnt'),
                                'modeloOnt'                     => $peticion->get('modeloOnt'),
                                'ssid'                          => $peticion->get('ssid'),
                                'password'                      => $peticion->get('password'),
                                'numeroPc'                      => $peticion->get('numeroPc'),
                                'modoOperacion'                 => $peticion->get('modoOperacion'),
                                'observacion'                   => $peticion->get('observacionCliente'),
                                'idServicioWifi'                => $peticion->get('idServicioWifi') ? $peticion->get('idServicioWifi'): null,
                                'boolActivarWifi'               => $peticion->get('boolActivarWifi') ? $peticion->get('boolActivarWifi') : null,
                                'intIdServWifi'                 => $peticion->get('idIntWifiSim') ? $peticion->get('idIntWifiSim') : null,
                                'idServicioCou'                 => $peticion->get('idServicioCou') ? $peticion->get('idServicioCou'): null,
                                'boolActivarCou'                => $peticion->get('boolActivarCou') ? $peticion->get('boolActivarCou') : null,
                                'intIdServCou'                  => $peticion->get('idIntCouSim') ? $peticion->get('idIntCouSim') : null,
                                'strTipoRed'                    => $peticion->get('tipoRed') ? $peticion->get('tipoRed') : "MPLS",
                                'arrayZeroTouch'                => $peticion->get('arrayZeroTouch') ?
                                                                   json_decode($peticion->get('arrayZeroTouch'), true) :
                                                                   null,

                                //valores de sesion
                                'usrCreacion'                   => $session->get('user'),
                                'idPersonaEmpresaRol'           => $session->get('idPersonaEmpresaRol'),
                                'ipCreacion'                    => $peticion->getClientIp(),
                                'idOficina'                     => $session->get('idOficina'),
            
                                //valores para activar servicio TN
                                'serieNuevoCpe'                 => $peticion->get('serieNuevoCpe'),
                                'modeloNuevoCpe'                => $peticion->get('modeloNuevoCpe'),
                                'macNuevoCpe'                   => $peticion->get('macNuevoCpe'),
                                'propiedadNuevoCpe'             => $peticion->get('propiedadNuevoCpe'),
                                'iosNuevoCpe'                   => $peticion->get('iosNuevoCpe'),
                                'gestionNuevoCpe'               => $peticion->get('gestionNuevoCpe'),
                                'administraNuevoCpe'            => $peticion->get('administraNuevoCpe'),
                                'nombreNuevoCpe'                => $peticion->get('nombreNuevoCpe'),
                                'serieNuevoTransciever'         => $peticion->get('serieNuevoTransciever'),
                                'modeloNuevoTransciever'        => $peticion->get('modeloNuevoTransciever'),
                                'nombreNuevoRoseta'             => $peticion->get('nombreNuevoRoseta'),
                                'propiedadExisteCpe'            => $peticion->get('propiedadExisteCpe'),
                                'nombreExisteCpe'               => $peticion->get('nombreExisteCpe'),
                                'serieExisteCpe'                => $peticion->get('serieExisteCpe'),
                                'modeloExisteCpe'               => $peticion->get('modeloExisteCpe'),
                                'macExisteCpe'                  => $peticion->get('macExisteCpe'),
                                'iosExisteCpe'                  => $peticion->get('iosExisteCpe'),
                                'gestionExisteCpe'              => $peticion->get('gestionExisteCpe'),
                                'administraExisteCpe'           => $peticion->get('administraExisteCpe'),
                                'flagCpe'                       => $peticion->get('flagCpe'),
                                'idServicioExisteCpe'           => $peticion->get('idServicioExisteCpe'),
                                'descripcionNuevoCpe'           => $peticion->get('descripcionNuevoCpe'),
                                
                                //valores para activar L3MPLS
                                'loginAux'                      => $peticion->get('loginAux'),
                                'tipoEnlace'                    => $peticion->get('tipoEnlace'),
                                'elementoPadre'                 => $peticion->get('elementoPadre'),
                                'elementoNombre'                => $peticion->get('elementoNombre'),
                                'anillo'                        => $peticion->get('anillo'),
                                'interfaceElementoNombre'       => $peticion->get('interfaceElementoNombre'),
                                'ipServicio'                    => $peticion->get('ipServicio'),
                                'subredServicio'                => $peticion->get('subredServicio'),
                                'gwSubredServicio'              => $peticion->get('gwSubredServicio'),
                                'mascaraSubredServicio'         => $peticion->get('mascaraSubredServicio'),
                                'defaultGateway'                => $peticion->get('defaultGateway'),
                                'protocolo'                     => $peticion->get('protocolo'),
                                'asPrivado'                     => $peticion->get('asPrivado'),
                                'vrf'                           => $peticion->get('vrf'),
                                'rdId'                          => $peticion->get('rdId'),
                                'vlan'                          => $peticion->get('vlan'),
                                'capacidadUno'                  => $peticion->get('capacidad1'),
                                'capacidadDos'                  => $peticion->get('capacidad2'), 
                                'vrfAdmin'                      => $peticion->get('vrfAdmin'),
                                'vlanAdmin'                     => $peticion->get('vlanAdmin'),

                                'booleanActivarOnt'             => $peticion->get('strActivarOnt') && $peticion->get('strActivarOnt') == "S",
                                'booleanExisteSwPoeGpon'        => $peticion->get('strExisteSwPoeGpon') && $peticion->get('strExisteSwPoeGpon')=="S",
                                'booleanMigrarSwPoe'            => $peticion->get('strMigrarSwPoe') && $peticion->get('strMigrarSwPoe') == "S",
                                //valores de SAFE VIDEO ANALYTICS CAM
                                'idOnt'                         => $peticion->get('idOnt')?$peticion->get('idOnt'):"",
                                'idInterfaceOnt'                => $peticion->get('idInterfaceOnt')?$peticion->get('idInterfaceOnt'):"",
                                'modeloOnt'                     => $peticion->get('modeloOnt')?$peticion->get('modeloOnt'):"",
                                'nombreOnt'                     => $peticion->get('nombreOnt')?$peticion->get('nombreOnt'):"",
                                'puertosOnt'                    => $peticion->get('puertosOnt')?$peticion->get('puertosOnt'):"",
                                'banderaCamaraSafecity'         => $peticion->get('banderaCamaraSafecity')?
                                                                   $peticion->get('banderaCamaraSafecity'):"N",
                                'nombreNuevoCamara'             => $peticion->get('nombreNuevoCamara')?$peticion->get('nombreNuevoCamara'):"",
                                'serieNuevoCamara'              => $peticion->get('serieNuevoCamara')?$peticion->get('serieNuevoCamara'):"",
                                'modeloCamara'                  => $peticion->get('modeloCamara')?$peticion->get('modeloCamara'):"",
                                'macCamara'                     => $peticion->get('macCamara')?$peticion->get('macCamara'):"",
                                'resolucionCamara'              => $peticion->get('resolucionCamara')?$peticion->get('resolucionCamara'):"",
                                'formatoResCamara'              => $peticion->get('formatoResCamara')?$peticion->get('formatoResCamara'):"",
                                'tipoCamara'                    => $peticion->get('tipoCamara')?$peticion->get('tipoCamara'):"",
                                'codecCamara'                   => $peticion->get('codecCamara')?$peticion->get('codecCamara'):"",
                                'fpsCamara'                     => $peticion->get('fpsCamara')?$peticion->get('fpsCamara'):"",
                                //camara vpn
                                'banderaCamaraVpnSafecity'      => $peticion->get('banderaCamaraVpnSafecity')?
                                                                   $peticion->get('banderaCamaraVpnSafecity'):"N",
                                
                                //valores de SW POE GPON
                                'idServicioSwPoe'               => $peticion->get('idServicioSwPoe')?$peticion->get('idServicioSwPoe'):"",
                                'idInterfaceOntSwPoe'           => $peticion->get('idInterfaceOntSwPoe')?$peticion->get('idInterfaceOntSwPoe'):"",
                                'idSwPoe'                       => $peticion->get('idSwPoe')?$peticion->get('idSwPoe'):"",
                                'nombreSwPoe'                   => $peticion->get('nombreSwPoe')?$peticion->get('nombreSwPoe'):"",
                                'puertosSwPoe'                  => $peticion->get('puertosSwPoe')?$peticion->get('puertosSwPoe'):"",

                                //valores de Elemento Requerido GPON
                                'idServicioEleReqGpon'          => $peticion->get('idServicioEleReqGpon')?$peticion->get('idServicioEleReqGpon'):"",
                                'idInterfaceOntEleReq'          => $peticion->get('idInterfaceOntEleReq')?$peticion->get('idInterfaceOntEleReq'):"",
                                'idElementoReqGpon'             => $peticion->get('idElementoReqGpon')?$peticion->get('idElementoReqGpon'):"",
                                'nombreEleReqGpon'              => $peticion->get('nombreEleReqGpon')?$peticion->get('nombreEleReqGpon'):"",
                                'puertosEleReqGpon'             => $peticion->get('puertosEleReqGpon')?$peticion->get('puertosEleReqGpon'):"",

                                //valores de WIFI SAFECITY GPON
                                'nombreWifi'                    => $peticion->get('nombreWifi')?$peticion->get('nombreWifi'):"",
                                'serieWifi'                     => $peticion->get('serieWifi')?$peticion->get('serieWifi'):"",
                                'modeloWifi'                    => $peticion->get('modeloWifi')?$peticion->get('modeloWifi'):"",
                                'ipControladora'                => $peticion->get('ipControladora')?$peticion->get('ipControladora'):"",
                                'macWifi'                       => $peticion->get('macWifi')?$peticion->get('macWifi'):"",
                                'banderaWifiSafecity'           => $peticion->get('banderaWifiSafecity')
                                                                    ?$peticion->get('banderaWifiSafecity'):'N',

                                //valores para conectarse al naf
                                'serNaf'                        => $this->container->getParameter('database_host_naf'),
                                'ptoNaf'                        => $this->container->getParameter('database_port_naf'),
                                'sidNaf'                        => $this->container->getParameter('database_name_naf'),
                                'usrNaf'                        => $this->container->getParameter('user_naf'),
                                'pswNaf'                        => $this->container->getParameter('passwd_naf'),
            
                                //valores para activaciones Radio TN
                                'serieNuevoRadio'               => $peticion->get('serieNuevoRadio'),
                                'modeloNuevoRadio'              => $peticion->get('modeloNuevoRadio'),
                                'macNuevoRadio'                 => $peticion->get('macNuevoRadio'),
                                'propiedadNuevoRadio'           => $peticion->get('propiedadNuevoRadio'),
                                'iosNuevoRadio'                 => $peticion->get('iosNuevoRadio'),
                                'gestionNuevoRadio'             => $peticion->get('gestionNuevoRadio'),
                                'administraNuevoRadio'          => $peticion->get('administraNuevoRadio'),
                                'nombreNuevoRadio'              => $peticion->get('nombreNuevoRadio'),
                                'strEsExistente'                => $peticion->get('strEsExistente'),
                                'intInterfaceEleClie'           => $peticion->get('intInterfaceEleClie'),
            
                                //cpe existente ( interface y estado interface )
                                'interfaceCpeExistente'          => $peticion->get('interfaceCpeExistente'),
                                'estadoInterfaceCpeExistente'    => $peticion->get('estadoInterfaceCpe'),
                                'macCpeExistente'                => $peticion->get('macCpeExistente'),
                                'esPseudoPe'                     => $peticion->get('esPseudoPe')?$peticion->get('esPseudoPe'):'N',
            
                                // parametros SmartWifi
                                'strSerieSmartWifi'              => $peticion->get('strSerieSmartWifi'),
                                'strModeloSmartWifi'             => $peticion->get('strModeloSmartWifi'),
                                'strMacSmartWifi'                => $peticion->get('strMacSmartWifi'),
                                'strTieneSmartWifiRenta'         => $peticion->get('strTieneSmartWifiRenta'),
            
                                //informacion de internet dc
                                'strVlanLan'                     => $peticion->get('vlanLan'),
                                'strVlanWan'                     => $peticion->get('vlanWan'),
                                'strFirewallDC'                  => $peticion->get('firewall'),
                                'tipoEquipo'                     => $peticion->get('tipoEquipo'),
                                'puertoRemoto'                   => $peticion->get('puertoRemoto'),
                                'siglaEquipo'                    => $peticion->get('siglaEquipo'),                                
            
                                //parámetros Internet Small Business
                                'strEsInternetLite'              => $peticion->get('strEsInternetLite'),

                                //valores para traslados TN  
                                'strEsRadioExistente'            => $peticion->get('strEsRadioExistente'),
                                'strEsCpeExistente'              => $peticion->get('strEsCpeExistente'),
                                'strEsTransceiverExistente'      => $peticion->get('strEsTransceiverExistente'),

                                //Datos FWA
                                'strIpWanTelefonica'             => $peticion->get('ipWanTelefonica'),
                                'strIpLoopBack'                  => $peticion->get('ipLoopBack'),
                                'strLoginFWA'                    => $peticion->get('loginFWA'),
                                'objSession'                     => $session,

                                'booleanEsSDWAN'                 => $peticion->get('booleanEsSDWAN'),
                                'booleanEsMigracionSDWAN'        => $peticion->get('booleanEsMigracionSDWAN')
                                );

        /* @var $activacion InfoActivarPuertoService */
        $activacion = $this->get('tecnico.InfoActivarPuerto');
        //---------------------------------------------------------------------*/
             
        $strEsInternetLite  = $peticion->get('strEsInternetLite') ? $peticion->get('strEsInternetLite') : "NO";
        $strCamaraVpnSafecity = $peticion->get('banderaCamaraVpnSafecity')?$peticion->get('banderaCamaraVpnSafecity'):"N";
        if($strEsInternetLite === 'SI')
        {
            $arrayRespuestaInternetLite = $activacion->activarClienteInternetLite($arrayPeticiones);
            $strStatus                  = $arrayRespuestaInternetLite['strStatus'];
            $strMensaje                 = $arrayRespuestaInternetLite['strMensaje'];
        }
        else if ($session->get('prefijoEmpresa') == 'TNP')
        {
            $arrayRespuestaInternetLite = $activacion->activarClienteTnp($arrayPeticiones);
            $strStatus                  = $arrayRespuestaInternetLite['strStatus'];
            $strMensaje                 = $arrayRespuestaInternetLite['strMensaje'];
        }
        else
        {
            //COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)-------------------------*/
            $respuestaArray = $activacion->activarCliente($arrayPeticiones);
            $strStatus      = $respuestaArray[0]['status'];
            $strMensaje     = $respuestaArray[0]['mensaje'];
            //----------------------------------------------------------------------*/
        }
        
        //--------RESPUESTA-----------------------------------------------------*/
        if ($strStatus == "OK")
        {
            $strResult         = "OK";
            $prefijoEmpresa    = "";
            //se recupera empresa equivalente para no finalizar solicitudes de servicios TTCO
            $arrayEmpresaMigra = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                             ->getEmpresaEquivalente($peticion->get('idServicio'), $session->get('prefijoEmpresa'));

            if($arrayEmpresaMigra)
            {
                if($arrayEmpresaMigra['prefijo'] == 'TTCO')
                {
                     $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
                }
            }
            
            if ($prefijoEmpresa != 'TTCO' && $peticion->get('banderaCamaraSafecity') != "S"
                    && $strCamaraVpnSafecity != "S")
            {
                //finalizar solicitud planificación
                $objTipoSolicitudPlanficacion = $emComercial
                                                  ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                  ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                    "estado"               => "Activo"));
                $objSolicitudPlanficacion     = $emComercial
                                                  ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                  ->findOneBy(array("servicioId"      => $peticion->get('idServicio'),
                                                                    "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                    "estado"          => "Asignada"));

                if ($objSolicitudPlanficacion)
                {
                    $objSolicitudPlanficacion->setEstado("Finalizada");
                    $emComercial->persist($objSolicitudPlanficacion);
                    $emComercial->flush();

                    //crear historial para la solicitud
                    $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                    $objHistorialSolicitudPlani->setDetalleSolicitudId($objSolicitudPlanficacion);
                    $objHistorialSolicitudPlani->setEstado("Finalizada");
                    $objHistorialSolicitudPlani->setObservacion("Cliente instalado");
                    $objHistorialSolicitudPlani->setUsrCreacion($session->get('user'));
                    $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                    $objHistorialSolicitudPlani->setIpCreacion($peticion->getClientIp());
                    $emComercial->persist($objHistorialSolicitudPlani);
                    $emComercial->flush();

                    //se finaliza las tareas por tipo de orden traslado
                    $objServicio  = $objSolicitudPlanficacion->getServicioId();
                    $strTipoOrden = $objServicio->getTipoOrden();
                    if ($strTipoOrden == "T") 
                    {
                        $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudPlanficacion->getId();
                        $arrayParametros['strProceso']            = 'Activar';
                        $strMensajeResponse                       = $emInfraestructura->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                                      ->cerrarTareasPorSolicitud($arrayParametros);
                    }
                }

            }
            
            $objServicio   = $emComercial->getRepository('schemaBundle:InfoServicio')
                                         ->find($peticion->get('idServicio'));
            if (is_object($objServicio))
            {
                $strTipoOrden   = $objServicio->getTipoOrden();
                $prefijoEmpresa = $session->get('prefijoEmpresa');
                if(is_object($objServicio->getProductoId()) && $objServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                {
                    $strResult = json_encode($strMensaje);
                }
                $booleanMigrarServicioSwPoe = $prefijoEmpresa == 'TN' && is_object($objServicio->getProductoId())
                                                && ($objServicio->getProductoId()->getNombreTecnico() == "SAFECITYDATOS"
                                                    || $strCamaraVpnSafecity == "S")
                                                && $peticion->get('strMigrarSwPoe') && $peticion->get('strMigrarSwPoe') == "S";
                //SE CONFIRMA AUTOMATICAMENTE LOS SERVICIOS CON TIPO DE ORDEN N
                if ($prefijoEmpresa == 'TN' && 
                    (strpos($objServicio->getProductoId()->getGrupo(),'DATACENTER') === false) &&
                    $strTipoOrden == "N" && $strEsInternetLite === "NO" &&
                    $objServicio->getProductoId()->getNombreTecnico() != "DATOS SAFECITY" &&
                    $objServicio->getProductoId()->getNombreTecnico() != "SAFECITYSWPOE" &&
                    !$booleanMigrarServicioSwPoe
                   )
                {
                    $arrayPeticiones = array(
                                            'idEmpresa'                     => $session->get('idEmpresa'),
                                            'prefijoEmpresa'                => $session->get('prefijoEmpresa'),
                                            'idServicio'                    => $objServicio->getId(),
                                            'idProducto'                    => $objServicio->getProductoId()->getId(),
                                            'observacionActivarServicio'    => "Se confirmo el servicio",
                                            'idAccion'                      => "847",//accion quemada en javascript
                                            'usrCreacion'                   => $session->get('user'),
                                            'ipCreacion'                    => $peticion->getClientIp()
                                            );

                   /* @var $confirmar InfoConfirmarServicio */
                   $serviceConfirmarServicio = $this->get('tecnico.InfoConfirmarServicio');
                   //*----------------------------------------------------------------------*/
                   //validar migración sdwan
                   if(is_object($objServicio) && !empty($objServicio))
                   {
                       $strServicio =   "";
                       $objServProdCaractSDWAN   = $serviceInfoServTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                        'SDWAN',
                                                                                                        $objServicio->getProductoId()
                                                                                                        );
                       
                        if (is_object($objServProdCaractSDWAN) && !empty($objServProdCaractSDWAN))
                        {
                            $serviceCambioElemento      = $this->get('tecnico.InfoCambioElemento');
                            $objProducto                = $emComercial->getRepository('schemaBundle:admiProducto')
                                                                      ->find($objServicio->getProductoId());
                            if(is_object($objProducto) && !empty($objProducto))
                            {
                                $arrayServiciosTecnicosPorPuntoPro = $this->getDoctrine()->getManager('telconet')
                                ->getRepository('schemaBundle:InfoServicioTecnico')->getElementosPorPuntoProduct($objServicio,$objProducto,'Activar');
                            
                                if(!isset($arrayServiciosTecnicosPorPuntoPro["elementoClienteId"])
                                    && !empty($arrayServiciosTecnicosPorPuntoPro["elementoClienteId"]))
                                {
                                    $arrayElementoServicios = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findBy(array(
                                                                'elementoClienteId' => $arrayServiciosTecnicosPorPuntoPro[0]["elementoClienteId"]));

                                    if(!empty($arrayElementoServicios) && is_array($arrayElementoServicios))
                                    {
                                        foreach($arrayElementoServicios as $objElementoServicio)
                                        {
                                            if(is_object($objElementoServicio) && !empty($objElementoServicio) && 
                                                $objElementoServicio->getServicioId()->getId()!=$objServicio->getId())
                                            {
                                                $objServicioNg = $emComercial->getRepository('schemaBundle:infoServicio')
                                                                             ->findOneBy(array('id' => $objElementoServicio->getServicioId()->getId(),
                                                                                               'estado' => "Activo"));
                                                //VERIFICAMOS SI EL OTRO ELEMENTO CONECTADO ES UN SERVICIO FIREWALL
                                                if(is_object($objServicioNg) && !empty($objServicioNg) && 
                                                    $objServicioNg->getProductoId()->getDescripcionProducto()=='SECURITY NG FIREWALL')
                                                {
                                                    $strServicio       =   "Firewall";
                                                    $objServicioNgFire = $objServicioNg;
                                                }
                                                else if(is_object($objServicioNg) && !empty($objServicioNg) && 
                                                    $objServicioNg->getProductoId()->getDescripcionProducto()=='Internet SDWAN')
                                                {
                                                    $strServicio    =   "Backup";
                                                }    
                                            }
                                        }
                                    }
                                }
                            }
                            
                        }
                   }



                   if($booleanEsSDWAN === "true"
                   && $booleanEsMigracionSDWAN === "true")
                   {
                       $objServProdCancelar  = $serviceInfoServTecnico->getServicioProductoCaracteristica(
                           $objServicio,
                           "SERVICIO_MIGRADO_SDWAN",
                           $objServicio->getProductoId()
                       );

                       $objServicioCancelar    = $emComercial->getRepository('schemaBundle:infoServicio')
                                                                   ->find($objServProdCancelar->getValor());

                       $arrayParametrosCancel = array(
                           'idEmpresa'             => $arrayPeticiones['idEmpresa'],
                           'prefijoEmpresa'        => $arrayPeticiones['prefijoEmpresa'],
                           'usrCreacion'           => $arrayPeticiones['usrCreacion'],
                           'ipCreacion'            => $arrayPeticiones['ipCreacion'],
                           'idServicio'            => $objServicioCancelar->getId(),
                           'idServicioNue'         => $objServicio->getId(),
                           'idProducto'            => $objServicioCancelar->getProductoId(),
                           'strTipoOrden'          => 'C',
                           'login'                 => $arrayPeticiones['login'],
                           'strCambioCpe'          => 'N'
                           );

                           $arrayRespuestaCambCpe = $serviceCambioElemento->cambiaElementoCpeSdwan($arrayParametrosCancel);

                   }
                   else if(is_object($objServProdCaractSDWAN) && !empty($objServProdCaractSDWAN))
                   {
                       $objServProdCancelar         = $serviceInfoServTecnico->getServicioProductoCaracteristica($objServicio, 
                                                                                                                "SERVICIO_MISMA_ULTIMA_MILLA", 
                                                                                                                $objServicio->getProductoId());
                       if(is_object($objServProdCancelar) && !empty($objServProdCancelar))
                       {
                           $objServicioCancelar     = $emComercial->getRepository('schemaBundle:infoServicio')
                                                                                ->find($objServProdCancelar->getValor());
                       }
                       if(is_object($objServicioCancelar) && !empty($objServicioCancelar) && 
                           ( $objServicioCancelar->getProductoId()->getDescripcionProducto()=='Internet MPLS' ||
                           $objServicioCancelar->getProductoId()->getDescripcionProducto()=='L3MPLS') &&
                           $strCancelarServMismaUM == "S")
                       {
                            if(!empty($strServicio))
                            {
                                 $arrayParametrosCancel = array(
                                                         'idEmpresa'             => $arrayPeticiones['idEmpresa'],
                                                         'prefijoEmpresa'        => $arrayPeticiones['prefijoEmpresa'],
                                                         'usrCreacion'           => $arrayPeticiones['usrCreacion'],
                                                         'ipCreacion'            => $arrayPeticiones['ipCreacion'],
                                                         'idServicio'            => $objServicioCancelar->getId(),
                                                         'idServicioNue'         => $objServicio->getId(),
                                                         'idProducto'            => $objServicioCancelar->getProductoId(),
                                                         'strTipoOrden'          => 'C',
                                                         'login'                 => $peticion->get('login'),
                                                         'strCambioCpe'          => 'S',
                                                         'objServicioNgFire'     => $objServicioNgFire,
                                                         'strServicio'           => $strServicio
                                 );

                                 $arrayRespuestaCambCpe = $serviceCambioElemento->cambiaElementoCpeSdwan($arrayParametrosCancel);
                                 $strStatus             = $arrayRespuestaCambCpe[0]['status'];
                                 $strMensaje            = $arrayRespuestaCambCpe[0]['mensaje'];
                             }
                             else
                             {
                                 $arrayParametrosCancel = array(
                                                 'idEmpresa'             => $arrayPeticiones['idEmpresa'],
                                                 'prefijoEmpresa'        => $arrayPeticiones['prefijoEmpresa'],
                                                 'usrCreacion'           => $arrayPeticiones['usrCreacion'],
                                                 'ipCreacion'            => $arrayPeticiones['ipCreacion'],
                                                 'idServicio'            => $objServicioCancelar->getId(),
                                                 'idServicioNue'         => $objServicio->getId(),
                                                 'idProducto'            => $objServicioCancelar->getProductoId(),
                                                 'strTipoOrden'          => 'C',
                                                 'login'                 => $arrayPeticiones['login'],
                                                 'strCambioCpe'          => 'N'
                                               );
                                 $arrayRespuestaCambCpe = $serviceCambioElemento->cambiaElementoCpeSdwan($arrayParametrosCancel);
                                 $strStatus             = $arrayRespuestaCambCpe[0]['status'];
                                 $strMensaje            = $arrayRespuestaCambCpe[0]['mensaje'];

                             }
                        }    
                   }




                       $arrayRespuesta = $serviceConfirmarServicio->confirmarServicio($arrayPeticiones);
                       $status         = $arrayRespuesta[0]['status'];
                       $mensaje        = $arrayRespuesta[0]['mensaje'];
                }
                else if($strEsInternetLite === "SI" 
                    && is_object($objServicio->getProductoId()) 
                    && ($objServicio->getProductoId()->getNombreTecnico() === "INTERNET SMALL BUSINESS"
                        || ($objServicio->getProductoId()->getNombreTecnico() === "TELCOHOME" && $strTipoOrden === "N")))
                {
                    $arrayPeticiones = array(
                                                'idEmpresa'             => $session->get('idEmpresa'),
                                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                                'idServicio'            => $objServicio->getId(),
                                                'idProducto'            => $objServicio->getProductoId()->getId(),
                                                'usrCreacion'           => $session->get('user'),
                                                'ipCreacion'            => $peticion->getClientIp(),
                                                'idAccion'              => "847",
                                                'empleadoSesion'        => $session->get('empleado'),
                                                'esISB'                 => $strEsInternetLite
                                            );

                    /* @var $grabarHistorial InfoGrabarHistorial */
                    $grabarHistorial = $this->get('tecnico.InfoGrabarHistorial');
                    //*----------------------------------------------------------------------*/

                    //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
                    $strStatus = $grabarHistorial->grabarHistorial($arrayPeticiones);
                }
                else if($strEsInternetLite === "SI" && is_object($objServicio->getProductoId()) 
                        && ($objServicio->getProductoId()->getNombreTecnico() === "TELCOHOME" && $strTipoOrden === "T"))
                {
                    /* @var $serviceConfirmarServicio InfoConfirmarServicio */
                    $serviceConfirmarServicio   = $this->get('tecnico.InfoConfirmarServicio');
                    $serviceConfirmarServicio->actualizarSolicitudTrasladoTN(array( 'objServicio'       => $objServicio,
                                                                                    'strUsrCreacion'    => $session->get('user'),
                                                                                    'strIpCreacion'     => $peticion->getClientIp()));
                }
                //realizar sumarizado de las capacidades en la red TN gpon_mpls
                if($prefijoEmpresa == 'TN' && is_object($objServicio->getProductoId()) && !$booleanMigrarServicioSwPoe)
                {
                    $arrayValidarProductoTotalBw = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        '',
                                                                        'PRODUCTO_TOTAL_BW_WS',
                                                                        $objServicio->getProductoId()->getId(),
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $session->get('idEmpresa'));
                    if(!empty($arrayValidarProductoTotalBw) && isset($arrayValidarProductoTotalBw['valor2']))
                    {
                        $arrayParametrosCambioVelGpon = array(
                            "objServicio"       => $objServicio,
                            "strCodEmpresa"     => $session->get('idEmpresa'),
                            "strPrefijoEmpresa" => $session->get('prefijoEmpresa'),
                            "strUsrCreacion"    => $session->get('user'),
                            "strIpCreacion"     => $peticion->getClientIp(),
                        );
                        $serviceCambPlanService = $this->get('tecnico.InfoCambiarPlan');
                        $serviceCambPlanService->actualizarCapacidadDatosTNGpon($arrayParametrosCambioVelGpon);
                    }
                }
            }
            
            if($session->get('idEmpresa') === $intEmpresaIdMD || $session->get('prefijoEmpresa') == $strPrefijoEmpresaEN)
            {
                $arrayInfServicio['tareaId']            = "";
                $arrayInfServicio['intServicioId']      = $objServicio->getId();
                $arrayInfServicio['intEmpresaCod']      = $session->get('idEmpresa');

                $arrayInfoTarea = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                               ->getInfoTareaByServicioId($arrayInfServicio);
                
                /* @var $objSoporteService SoporteService */
                $objSoporteService          = $this->get('soporte.SoporteService');
                $strParametroRegularizar    = "";
                $strParametroOrigenWeb      = "";

                $arrayParametroRegularizar = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne('PROGRESO_REGULARIZACION', 
                            '', 
                            '', 
                            '', 
                            '', 
                            '', 
                            '', 
                            ''
                        );

                if (is_array($arrayParametroRegularizar))
                {
                    $strParametroRegularizar = !empty($arrayParametroRegularizar['valor1']) ? $arrayParametroRegularizar['valor1'] : "";
                }

                $arrayParametroOrigenWeb = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne('ORIGEN_WEB', 
                            '', 
                            '', 
                            '', 
                            '', 
                            '', 
                            '', 
                            ''
                        );

                if (is_array($arrayParametroOrigenWeb))
                {
                    $strParametroOrigenWeb = !empty($arrayParametroOrigenWeb['valor1']) ? $arrayParametroOrigenWeb['valor1'] : "";
                }
                $arrayParametrosTarea = array(
                                                'strCodEmpresa'        => $session->get('idEmpresa'),
                                                'intIdTarea'           => $arrayInfoTarea['comunicacionId'],
                                                'intIdDetalle'         => $arrayInfoTarea['detalleId'],
                                                'strCodigoTipoProgreso'=> $strParametroRegularizar,
                                                'intIdServicio'        => $arrayInfoTarea['servicioId'],
                                                'strOrigen'            => $strParametroOrigenWeb,
                                                'strUsrCreacion'       => $session->get('user'),
                                                'strIpCreacion'        => $peticion->getClientIp());

                //COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)
                $respuestaArray = $objSoporteService->ingresarProgresoTarea($arrayParametrosTarea);
                $strStatus      = $respuestaArray['status'];
                if($strStatus != "OK")
                {
                    $strResult = "Se presentaron problemas al ingresar la información del progreso de la tarea, favor notificar a Soporte Sistemas.";
                }
                
            }
            
            

        }
        else if($strStatus == "ERROR")
        {
            if($strMensaje == "java.net.ConnectException: Connection timed out")
            {
                $strResult = "SIN CONEXION";
            }
            if($strMensaje == "NO ID CLIENTE")
            {
                $strResult = "NO ID CLIENTE";
            }
            else if($strMensaje == "NO EXISTE TAREA")
            {
                $strResult = $strMensaje;
            }
            else
            {
                $strResult = $strMensaje;
            }
        }
        else if($strStatus == "NAF")
        {
            $strResult = $strMensaje;
        }
        else if($strStatus == "NA")
        {
            $strResult = "ERROR DESCONOCIDO";
        }
        else if($strStatus == "ERROR SCE")
        {
            $strResult = "ERROR SCE";
        }
        else
        {
            $strResult = "Ha ocurrido un problema. Por favor notificar a Sistemas!";
        }

        return $respuesta->setContent($strResult);
        //----------------------------------------------------------------------*/
    }

    /**
     * Accion que permite realizar el cambio de puerto para producto safecity.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 16-11-2021 - Version Inicial.
     * @return JsonResponse
     */
    public function cambiarPuertoBotonGponAction()
    {
        $serviceInfoCambiarPuerto               = $this->get('tecnico.infocambiarpuerto');
        $objPeticion                            = $this->get('request');
        $objSession                             = $objPeticion->getSession();
        $arrayParams                            = array();
        $arrayParams['idServicio']              = $objPeticion->get('idServicio');
        $arrayParams["strUsrCreacion"]          = $objSession->get('user');
        $arrayParams["strIpCreacion"]           = $objPeticion->getClientIp();
        $arrayParams["intInterfaceOnt"]         = $objPeticion->get('idInterfaceOnt');
        $arrayParams["strSerieOnt"]             = $objPeticion->get('serieOnt');
        $arrayParams["strMacOnt"]               = $objPeticion->get('macOnt');
        $arrayParams["intIdEmpresa"]            = $objSession->get('idEmpresa');
        $arrayParams["prefijoEmpresa"]          = $objSession->get('prefijoEmpresa');
        $arrayParams["intIdElemento"]           = $objPeticion->get('servicioEnSwPoe') == 'S' ?
                                                                $objPeticion->get('idSwPoe') :
                                                                $objPeticion->get('idOnt');
        $arrayParams["strPuertoOnt"]            = $objPeticion->get('puertosOnt');
        $arrayParams["strPuertoSwPoe"]          = $objPeticion->get('puertosSwPoe');
        $arrayParams["strNombreProducto"]       = $objPeticion->get('nombreProducto');
        $arrayParams["strNombreInterfaz"]       = '';

        $arrayResponse = $serviceInfoCambiarPuerto->cambiarPuertoTnGpon($arrayParams);

        return new JsonResponse($arrayResponse);
    }
    
    /**
     * Accion que permite crear el router wifi existente luego de la activación de un servicio tradicional
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 21-05-2019 - Version Inicial.
     * @return JsonResponse
     */

    public function createRouterWifiExistenteAction()
    {
        $objPeticion               = $this->get('request');
        $objSession                = $objPeticion->getSession();
        $serviceInfoElemento       = $this->get('tecnico.infoelemento');

        $arrayPeticiones = array(
            'intIdEmpresa'      => intval($objSession->get('idEmpresa')),
            'prefijoEmpresa'    => $objSession->get('prefijoEmpresa'),
            'idServicio'        => $objPeticion->get('idServicio'),
            'idProducto'        => $objPeticion->get('idProducto'),
            'idServicioWifi'    => $objPeticion->get('idServicioWifi') ? $objPeticion->get('idServicioWifi') : null,
            'boolActivarWifi'   => $objPeticion->get('boolActivarWifi') ? $objPeticion->get('boolActivarWifi') : null,
            'intIdServWifi'     => $objPeticion->get('idIntWifiSim') ? json_decode(stripslashes($objPeticion->get('idIntWifiSim')), true) : null
        );

        $arrayCreateRouterExistente = $serviceInfoElemento->createRouterExistente(array(
            'arrayIdServiciosWifi'  => $arrayPeticiones['intIdServWifi'],
            'intIdServElemento'     => $arrayPeticiones['idServicio'],
            'intIdEmpresa'          => $arrayPeticiones['intIdEmpresa'],
            'objRequest'            => $objPeticion
        ));

        return new JsonResponse($arrayCreateRouterExistente);

    }

    /**
     * Funcion que graba el historial al grabar los parámetros y a su vez confirma el servicio
     * 
     * @version 1.0 Versión Inicial
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 16-09-2016 Se aumenta el parámetro del empleado que forma parte de la notificación de activación del servicio
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.2 29-06-2017  Se agrega parametro idProducto para ser usado en el Service
     * 
     * @author Lizbeth Cruz <mlcruz@netlife.net.ec>
     * @version 1.3 31-01-2018  Se agrega parametro esISB siendo SI cuando el nombre técnico es INTERNET SMALL BUSINESS
     * 
     */
    public function grabarHistorialAction(){
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        ini_set('max_execution_time', 400000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        $arrayPeticiones=array(
                                'idEmpresa'             => $session->get('idEmpresa'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'idServicio'            => $peticion->get('idServicio'),
                                'capacidad1'            => $peticion->get('capacidad1'),
                                'capacidad2'            => $peticion->get('capacidad2'),
                                'idProducto'            => $peticion->get('idProducto'),
                                'login'                 => $peticion->get('login'),
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $peticion->getClientIp(),
                                'idAccion'              => $peticion->get('idAccion'),
                                'empleadoSesion'        => $session->get('empleado'),
                                'esISB'                 => $peticion->get('esISB')
                                );
        
        /* @var $grabarHistorial InfoGrabarHistorial */
        $grabarHistorial = $this->get('tecnico.InfoGrabarHistorial');
        //*----------------------------------------------------------------------*/
        
        //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
        $status = $grabarHistorial->grabarHistorial($arrayPeticiones);
        //*----------------------------------------------------------------------*/
        
        //*RESPUESTA-------------------------------------------------------------*/
        return $respuesta->setContent($status);
        //*----------------------------------------------------------------------*/
    }
        
    /**
     * Funcion que reconfigura el puerto del servicio,
     * solo para internet
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 21-07-2014
     * 
     */
    public function reconfigurarPuertoAction(){
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        ini_set('max_execution_time', 400000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        
        $arrayPeticiones[] = array('idEmpresa'          =>$session->get('idEmpresa'),
                                   'prefijoEmpresa'     => $session->get('prefijoEmpresa'),
                                   'idServicio'         =>$peticion->get('idServicio'),
                                   'usrCreacion'        => $session->get('user'),
                                   'ipCreacion'         => $peticion->getClientIp());
        
        /* @var $reconfigurar \telconet\tecnicoBundle\Service\InfoReconfigurarPuerto */
        $reconfigurar = $this->get('tecnico.InfoReconfigurarPuerto');
        //*----------------------------------------------------------------------*/
        
        //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
        $respuestaArray = $reconfigurar->reconfigurarPuerto($arrayPeticiones);
        $status = $respuestaArray[0]['status'];
        $mensaje = $respuestaArray[0]['mensaje'];
        //*----------------------------------------------------------------------*/
        
        //*RESPUESTA-------------------------------------------------------------*/
        if($status=="ERROR")
        {
            return $respuesta->setContent($mensaje);
        }
        else
        {
            return $respuesta->setContent($status);
        }
        //*----------------------------------------------------------------------*/        
    }
    
    /**
     * Funcion que sirve para asignar una ipv4 publica al cliente.
     * 
     * @author Creado: Francisco Adum <fadum@netlife.net.ec>
     * @version 1.0 07-07-2017
     * 
     */
    public function asignarIpv4PublicaAction(){
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        ini_set('max_execution_time', 400000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        
        $arrayPeticiones = array('idEmpresa'          =>$session->get('idEmpresa'),
                                   'prefijoEmpresa'     => $session->get('prefijoEmpresa'),
                                   'idServicio'         =>$peticion->get('idServicio'),
                                   'usrCreacion'        => $session->get('user'),
                                   'ipCreacion'         => $peticion->getClientIp());
        
        /* @var $service \telconet\tecnicoBundle\Service\AsignarIpv4Publica */
        $service = $this->get('tecnico.AsignarIpv4Publica');
        //*----------------------------------------------------------------------*/
        
        //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
        $respuestaArray = $service->asignarIpv4Publica($arrayPeticiones);
        $status         = $respuestaArray['status'];
        $mensaje        = $respuestaArray['mensaje'];
        //*----------------------------------------------------------------------*/
        
        //*RESPUESTA-------------------------------------------------------------*/
        if($status=="ERROR")
        {
            return $respuesta->setContent($mensaje);
        }
        else
        {
            return $respuesta->setContent($status);
        }
        //*----------------------------------------------------------------------*/        
    }
    
    public function ajaxMigrarServicioTunelIpADatosMplsAction()
    {
        ini_set('max_execution_time', 800000);
        $respuesta   = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion    = $this->get('request');
        $session     = $peticion->getSession();
        
        $arrayPeticiones=array(
                                'idEmpresa'             => $session->get('idEmpresa'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'idServicio'            => $peticion->get('idServicio'),
                                'personaEmpresaRolId'   => $peticion->get('idPersonaEmpresaRol'),
                                'idElementoPadre'       => $peticion->get('idElementoPadre'),
                                'vlan'                  => $peticion->get('vlan'),
                                'vrf'                   => $peticion->get('vrf'),
                                'protocolo'             => $peticion->get('protocolo'),
                                'asPrivado'             => $peticion->get('asPrivado'),
                                'mascara'               => $peticion->get('mascara'),
                                'idSubred'              => $peticion->get('idSubred'),
                                'flagRecursos'          => $peticion->get('flagRecursos'),
                                'defaultGateway'        => $peticion->get('defaultGateway'),
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $peticion->getClientIp()
                              );
        
        /* @var $migracion MigracionTunelIpAL3mpls */
        $migracion = $this->get('tecnico.MigracionTunelIpAL3mpls');
        //*----------------------------------------------------------------------*/
        
        //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
        $arrayRespuesta = $migracion->migrarTunelIpAL3mpls($arrayPeticiones);
        //*----------------------------------------------------------------------*/
        
        //*RESPUESTA-------------------------------------------------------------*/
        return $respuesta->setContent($arrayRespuesta['mensaje']);
        //*----------------------------------------------------------------------*/        
    }
    
    /**
     * 
     * Metodo que sirve para realizar la migracion a L3MPLS de servicios con TunelIp
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.1 - Se agregan las variables necesarias para poder ejecutar el WebService de NW 
     *                [ mac , rdId , subredServicio , gwSubredServicio , mascaraSubredServicio , defaultGateway ]
     * @since 26-09-2016
     * 
     * @since 1.0
     * 
     * @return Response
     */
    public function ajaxEjecutaMigracionServicioTunelADatosMplsAction()
    {
        ini_set('max_execution_time', 800000);
        $respuesta   = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion    = $this->get('request');
        $session     = $peticion->getSession();
        
        $arrayPeticiones=array(
                                'idEmpresa'             => $session->get('idEmpresa'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'idServicio'            => $peticion->get('idServicio'),
                                'idElemento'            => $peticion->get('idElemento'),
                                'idInterfaceElemento'   => $peticion->get('idInterfaceElemento'),
                                'idElementoPadre'       => $peticion->get('idElementoPadre'),
                                'vlan'                  => $peticion->get('vlan'),
                                'mac'                   => $peticion->get('mac'),
                                'rdId'                  => $peticion->get('rdId'),
                                'subredServicio'        => $peticion->get('subredServicio'),
                                'gwSubredServicio'      => $peticion->get('gwSubredServicio'),
                                'mascaraSubredServicio' => $peticion->get('mascaraSubredServicio'),
                                'defaultGateway'        => $peticion->get('defaultGateway'),
                                'vrf'                   => $peticion->get('vrf'),
                                'protocolo'             => $peticion->get('protocolo'),
                                'asPrivado'             => $peticion->get('asPrivado'),
                                'ipL3mpls'              => $peticion->get('ipL3mpls'),
                                'ipServicio'            => $peticion->get('ipServicio'),
                                'subred'                => $peticion->get('subred'),
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $peticion->getClientIp()
                              );
        
        /* @var $migracion MigracionTunelIpAL3mpls */
        $migracion = $this->get('tecnico.MigracionTunelIpAL3mpls');
        //*----------------------------------------------------------------------*/
        
        //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
        $arrayRespuesta = $migracion->ejecutarMigracionTunelIpAL3mpls($arrayPeticiones);
        //*----------------------------------------------------------------------*/
        
        //*RESPUESTA-------------------------------------------------------------*/
        return $respuesta->setContent($arrayRespuesta['mensaje']);
        //*----------------------------------------------------------------------*/
    }
    
    /**
     * Funcion que sirve para ejecutar la migracion de plataforma
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 8-03-2015
     * @since 1.0
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 04-10-2016   Se agrega parametro para verificar si el cliente
     *                           desea mantener o no el equipo wifi adicional
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 28-06-2019 Para identificar los servicios Small Business y TelcoHome, se envía el parámetro esIsb a la función migrarCliente
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 09-07-2019 Se agrega verificación de equipos dual band para los nuevos planes de MD y se eliminan validaciones
     *                          innecesarias ya que la función migrarCliente no devolverá los status ni mensajes comparados.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 22-09-2019 Se elimina la validación de equipos dual band ya que se la incluyó dentro de la función invocada migrarCliente
     * 
     */
    public function migrarServicioAction() 
    {
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        ini_set('max_execution_time', 400000);
        $objJsonRespuesta = new JsonResponse();
        
        $objRequest = $this->get('request');
        $objSession = $objRequest->getSession();
        
        $arrayPeticiones=array(
                                'idEmpresa'                     => $objSession->get('idEmpresa'),
                                'prefijoEmpresa'                => $objSession->get('prefijoEmpresa'),
                                'idServicio'                    => $objRequest->get('idServicio'),
                                'idProducto'                    => $objRequest->get('idProducto'),
                                'perfil'                        => $objRequest->get('perfil'),
                                'login'                         => $objRequest->get('login'),
                                'capacidad1'                    => $objRequest->get('capacidad1'),
                                'capacidad2'                    => $objRequest->get('capacidad2'),
                                'interfaceElementoId'           => $objRequest->get('interfaceElementoId'),
                                'interfaceElementoSplitterId'   => $objRequest->get('interfaceElementoSplitterId'),
                                'ultimaMilla'                   => $objRequest->get('ultimaMilla'),
                                'plan'                          => $objRequest->get('plan'),
                                'mac'                           => $objRequest->get('mac'),
                                'macOnt'                        => $objRequest->get('macOnt'),
                                'serieOnt'                      => $objRequest->get('serieOnt'),
                                'modeloOnt'                     => $objRequest->get('modeloOnt'),
                                'usrCreacion'                   => $objSession->get('user'),
                                'ipCreacion'                    => $objRequest->getClientIp(),
                                'idPersonaEmpresaRol'           => $objSession->get('idPersonaEmpresaRol'),
                                'solicitudMigracionId'          => $objRequest->get('solicitudMigracion'),
                                'mantieneEquipoWifi'            => $objRequest->get('mantieneEquipoWifi'),
                                'esIsb'                         => $objRequest->get('esIsb')
                              );

        /* @var $serviceMigracion MigracionHuaweiService */
        $serviceMigracion = $this->get('tecnico.MigracionHuawei');
        //---------------------------------------------------------------------*/

        //COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)-------------------------*/
        $arrayRespuestaMigracion    = $serviceMigracion->migrarCliente($arrayPeticiones);
        $strStatusMigracion         = $arrayRespuestaMigracion['status'];
        $strMensajeMigracion        = $arrayRespuestaMigracion['mensaje'];
        
        return $objJsonRespuesta->setData(array("status" => $strStatusMigracion, "mensaje" => $strMensajeMigracion ));
        //----------------------------------------------------------------------*/
    }
    
    /**
     * Controlador que sirve para buscar un serial con un modelo en la base de datos del NAF, 
     * para poder instalar un servicio.
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0
     * 
     * Se actualiza el controlador para que unifique la busqueda de un cpe.
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 11-12-2015
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.2 2016-10-24 - Se incluye verificación del tipo de elemento en Activación que posea interfaces wan
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 30-11-2016   Se incluye flujo para poder buscar equipos ya instalados y poder devolver información en caso de 
     *                           que la razon social del servicio a procesar permita usar equipos de otros clientes (Proyecto CNE)
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 30-10-2017   Se agrega programación para poder reutilizar equipos en traslado de clientes TN 
     * @since 1.3
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 03-04-2019   Se valida si el servicio tiene la característica SDWAN-CAMBIO_EQUIPO
     * @since 1.4
     */
    public function buscarCpeNafAction()
    {
        $respuesta               = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $emInfraestructura       = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial             = $this->getDoctrine()->getManager("telconet");
        $strCadenaRespuesta      = "";
        $intInterfaceEleCliId    = "";
        $strStatusIn             = "";
        $strMensajeIn            = "";
        $booleanEncontroElemento = false;
        $peticion                     = $this->get('request');
        $serieCpe                     = strtoupper($peticion->get('serieCpe'));
        $modelo                       = $peticion->get('modeloElemento');
        $estado                       = $peticion->get('estado');
        $bandera                      = $peticion->get('bandera');
        $strPermiteReutilizarEquipo   = $peticion->get('permiteReutilizarEquipo');
        $intIdServicio                = $peticion->get('idServicio');
        $strEncontroExistente         = "NO";
        $strEsEquipoExistente         = "NO";
        $objServicio                  = null;
        $objProducto                  = null;
        $strBandServCaract            = "N";
        $strLoginOrigenTraslado       = "";
        $strBanderaEquipo             = "N";
        $strVerificar                 = $peticion->get('comprobarInterfaz');
        $strTipo                      = $peticion->get('tipoElemento');
        $objSession                   = $peticion->getSession();
        $strPrefijoEmpresa            = $objSession->get('prefijoEmpresa');
        $serviceUtil                  = $this->get('schema.Util');
        $serviceCliente               = $this->get('comercial.Cliente');
        $serviceServicio              = $this->get('comercial.InfoServicio');

        /* @var $buscarNaf \telconet\tecnicoBundle\Service\InfoServicioTecnico */
        $buscarNaf  = $this->get('tecnico.InfoServicioTecnico');
        
        if (!empty($intIdServicio))
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (is_object($objServicio))
            {
                $strTipoOrden = $objServicio->getTipoOrden();

                if($strPrefijoEmpresa == "TN")
                {
                    $objProducto = $objServicio->getProductoId();
                }
            }
        }

        /* VALIDAR QUE EL ELEMENTO A BUSCAR NO EXISTA EN ALGUN SERVICIO DEL PUNTO ACTUAL PARA TRASLADO, 
         * EN CASO DE EXISTIR SE DEBE ALERTAR AL USUARIO QUE NO SE PUEDE ACTIVAR EL SERVICIO CON UN ELEMENTO YA EXISTENTE,
         * Y NO PERMITIRLE CONTINUAR USANDO ESTE SERIE COMO NUEVA.
         */
        try
        {
            if ($strTipoOrden == "T" && is_object($objServicio) && $strPrefijoEmpresa == "TN")
            {
                $strExisteElementoEnPunto = "NO";
                $strLoginConCpe           = "";
                $arrayServiciosPunto = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                   ->findByPuntoId($objServicio->getPuntoId()->getId());
                foreach($arrayServiciosPunto as $objServicioPunto)
                {
                    $objStPunto = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array("servicioId" => $objServicioPunto->getId()));
                    if (is_object($objStPunto))
                    {
                        $strElementoCliente = $objStPunto->getElementoClienteId();
                        if (!empty($strElementoCliente))
                        {
                            $objEleCliPunto = $emComercial->getRepository('schemaBundle:InfoElemento')
                                                          ->find($strElementoCliente);
                            if (is_object($objEleCliPunto))
                            {
                                $strSerieEleCliPunto = $objEleCliPunto->getSerieFisica();
                                if (strtoupper($strSerieEleCliPunto) == $serieCpe)
                                {
                                    $strLoginConCpe           = $objServicioPunto->getLoginAux();
                                    $strExisteElementoEnPunto = "SI";
                                }
                                else
                                {
                                    $objEnlCliPunto = $emInfraestructura
                                                         ->getRepository('schemaBundle:InfoEnlace')
                                                         ->findOneBy( 
                                                           array("interfaceElementoIniId" => $objStPunto->getInterfaceElementoClienteId(),
                                                                 "estado"                 => 'Activo'));
                                    while (is_object($objEnlCliPunto))
                                    {
                                        $objEleCliPunto      = $objEnlCliPunto->getInterfaceElementoFinId()->getElementoId();
                                        $strSerieEleCliPunto = $objEleCliPunto->getSerieFisica();
                                        if (strtoupper($strSerieEleCliPunto) == $serieCpe)
                                        {
                                            $strLoginConCpe           = $objServicioPunto->getLoginAux();
                                            $strExisteElementoEnPunto = "SI";
                                            $objEnlCliPunto           = null;
                                        }
                                        else
                                        {
                                            $objEnlCliPunto = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoEnlace')
                                                                 ->findOneBy( 
                                                                 array("interfaceElementoIniId" => $objEnlCliPunto->getInterfaceElementoFinId()
                                                                                                                     ->getId(),
                                                                       "estado"                 => 'Activo'));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if ($strExisteElementoEnPunto == "SI")
                {
                    $strCadenaRespuesta = "ERROR".'|'."El elemento ya existe en el login aux: ".$strLoginConCpe. 
                                          " que pertenece a este punto, por favor utilizar la opción CPE EXISTENTE." ;
                    return $respuesta->setContent($strCadenaRespuesta);
                }
            }
        }
        catch (Exception $objEx) 
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.buscarCpeNafAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $peticion->getClientIp()
                                     );
            $status             = "ERROR";
            $mensaje            = "Ocurrio un error al buscar el elemento, favor notifique a sistemas.";
            $strCadenaRespuesta = $status.'|'.$mensaje;
            return $respuesta->setContent($strCadenaRespuesta);
        }

        //*************Buscar si el servicio ya cuenta con la característica enviado*************//
        if(is_object($objProducto) && is_object($objServicio))
        {
            $arrayParametrosProdCaract["strCaracteristica"] = "SDWAN-CAMBIO_EQUIPO";
            $arrayParametrosProdCaract["objProducto"]       = $objProducto;
            $arrayParametrosProdCaract["objServicio"]       = $objServicio;

            $strBandServCaract = $serviceCliente->consultaServicioProdCaract($arrayParametrosProdCaract);

            if($strBandServCaract == "S")
            {
                //se obtiene el servicio principal del backup
                $arrayParametros["objServicio"]             = $objServicio;
                $arrayParametros["strNombreCaracteristica"] = "ES_BACKUP";

                $objServicioProdCarct = $serviceServicio->getValorCaracteristicaServicio($arrayParametros);

                if(is_object($objServicioProdCarct))
                {
                    $strServicioPrincipal = $objServicioProdCarct->getValor();
                }
                else
                {
                    $strMensajeAlerta = "La caracteristica ES_BACKUP no fue encontrada para este servicio, favor notificar a Sistemas";

                    $strCadenaRespuesta = "".'|'.$strMensajeAlerta;
                    return $respuesta->setContent($strCadenaRespuesta);
                }

                if(!empty($strServicioPrincipal))
                {
                    $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneByServicioId($strServicioPrincipal);

                    if(is_object($objInfoServicioTecnico))
                    {
                        $intInterfaceElementoClienteId = $objInfoServicioTecnico->getInterfaceElementoClienteId();

                        $arrayParametrosCpe = array('interfaceElementoConectorId' => $intInterfaceElementoClienteId,
                                                    'tipoElemento'                => "CPE");

                        $arrayRespuestaCpe = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                               ->getElementoClienteByTipoElemento($arrayParametrosCpe);

                        if($arrayRespuestaCpe['msg'] == "FOUND")
                        {
                            $strBanderaEquipo        = "S";
                            $intElementoCliPrincipal = $arrayRespuestaCpe['idElemento'];
                        }
                        else //Si no encuentre conectado el CPE busca el ROUTER ( nodo WIFI )
                        {
                            $arrayParametrosCpe = array('interfaceElementoConectorId'   => $objInfoServicioTecnico->getInterfaceElementoClienteId(),
                                                        'tipoElemento'                  => "ROUTER");

                            $arrayRespuestaCpe = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                   ->getElementoClienteByTipoElemento($arrayParametrosCpe);

                            if($arrayRespuestaCpe['msg'] == "FOUND")
                            {
                                $strBanderaEquipo        = "S";
                                $intElementoCliPrincipal = $arrayRespuestaCpe['idElemento'];
                            }
                            else //Si no encuentra CPE va a buscar el ROUTER o CPE directo ( MIGRADOS )
                            {
                                if($objInfoServicioTecnico->getElementoClienteId())
                                {
                                    $strBanderaEquipo        = "S";
                                    $intElementoCliPrincipal = $objInfoServicioTecnico->getElementoClienteId();
                                }
                            }
                        }
                    }

                    //Si el servicio principal no es encontrado se retorna mensaje de validación
                    if($strBanderaEquipo === "N")
                    {
                        $strMensajeAlerta = "Se encontraron inconsistencias con respecto al servicio principal asociado a este backup";

                        $strCadenaRespuesta = "".'|'.$strMensajeAlerta;
                        return $respuesta->setContent($strCadenaRespuesta);
                    }

                    //Comparar que la serie ingresada para el backup sea igual que la del principal
                    if(!empty($intElementoCliPrincipal) && !empty($serieCpe))
                    {
                        $objInfoElementoPrincipal = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->find($intElementoCliPrincipal);

                        if(is_object($objInfoElementoPrincipal))
                        {
                            if($serieCpe === $objInfoElementoPrincipal->getSerieFisica())
                            {
                                $estado  = "IN";
                                $bandera = "ActivarServicioExistente";
                            }
                            else
                            {
                                $strMensajeAlerta = "Las series no coinciden, para poder realizar el cambio se debe ingresar la serie del equipo que"
                                                    . " contiene el servicio principal";

                                $strCadenaRespuesta = "".'|'.$strMensajeAlerta;
                                return $respuesta->setContent($strCadenaRespuesta);
                            }
                        }
                    }
                }
            }
        }
        //*************Buscar si el servicio ya cuenta con la característica enviado*************//

        //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
        $respuestaArray = $buscarNaf->buscarElementoEnNaf($serieCpe,$modelo,$estado, $bandera);
        $status         = $respuestaArray[0]['status'];
        $mensaje        = $respuestaArray[0]['mensaje'];
        
        if($status!="OK" && $strTipoOrden == "T" && $strPrefijoEmpresa == "TN")
        {
            $estado             = "IN";
            $strBanderaTraslado = "ActivarServicioExistente";
            //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
            $respuestaArray = $buscarNaf->buscarElementoEnNaf($serieCpe,$modelo,$estado, $strBanderaTraslado);
            $status         = $respuestaArray[0]['status'];
            $mensaje        = $respuestaArray[0]['mensaje'];
            
            if ($status == "OK")
            {
                $strEncontroExistente = "SI";
            }
        }
        
        //*----------------------------------------------------------------------*/
        if($strVerificar && $strTipo && $strVerificar=="SI" &&
            $bandera=="ActivarServicio" && $status=="OK" && $modelo=="")
        {//Verificamos que existira la interfaz wan? para tipo elemento
            $objTipoElemento = $emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')
                                                 ->findOneBy(array("nombreTipoElemento" => $strTipo, 
                                                                   "estado"             => "Activo"
                                                                  ));
            if(!is_object($objTipoElemento))
            {
                $status  = "ERROR";
                $mensaje = "El Tipo Elemento: <b>".$strTipo."</b> no existe, imposible verificar interfaces!";
            }
            else
            {
                $arrayMensajeExploded = explode(",", $mensaje);
                $strModelo = $arrayMensajeExploded[2];//Para obtener el modelo
                $objModeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                                       ->findOneBy(array("nombreModeloElemento" => $strModelo,
                                                                         "tipoElementoId"       => $objTipoElemento->getId(),
                                                                         "estado"               => "Activo"
                                                                     ));
                if(!is_object($objModeloElemento))
                {
                    $status  = "ERROR";
                    $mensaje = "Serie ".$serieCpe." modelo ".$strModelo." no es de tipo ".$strTipo.", favor verificar.";
                }
                else
                {
                    $arrayInterfaceModelo = $emInfraestructura->getRepository('schemaBundle:AdmiInterfaceModelo')
                                                              ->findBy(array("modeloElementoId" => $objModeloElemento->getId(),
                                                                             "formatoInterface" => "wan?"
                                                                             ));
                    if(!$arrayInterfaceModelo)
                    {//NO tiene la interfaz tipo wan
                        $status  = "ERROR";
                        $mensaje = "El Modelo: <b>".$strModelo."</b> del elemento ingresado: <b>".$serieCpe." </b><br>"
                                    . "No posee interfaces 'wan' necesarias para la activación, Favor Revisar! <br>";
                    }
                }
            }
        }
        $strCadenaRespuesta = $status.'|'.$mensaje;
        if ($strPermiteReutilizarEquipo=="SI" && $status!="OK" && $strTipoOrden != "T")
        {
            $estado         = "IN";
            $bandera        = "ActivarServicioExistente";
            //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
            $respuestaArray = $buscarNaf->buscarElementoEnNaf($serieCpe,$modelo,$estado, $bandera);
            $strStatusIn    = $respuestaArray[0]['status'];
            $strMensajeIn   = $respuestaArray[0]['mensaje'];
            if ($strStatusIn=="OK")
            {
                /* se verifica que el elemento ya existente pertenezca a un servicio de una Razon Social o Cliente parametrizado
                   para permitir reutilizar equipo RADIO para TN */
                $arrayDatosCliente        = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                        ->getDatosClientePorIdServicio($intIdServicio, "SI");
                $strIdentificacionCliente = $arrayDatosCliente['IDENTIFICACION_CLIENTE'];
                /* se recupera razones sociales de clientes de los cuales se pueden reutilizar equipos a partir de la razon social del 
                   del servicio que se esta activando desde el modulo tecnico */
                $arrayClientesPermitidos  = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get(
                                                              'TN_REUTILIZAR_EQUIPOS_ENTRE_CLIENTES', 
                                                              '', 
                                                              '', 
                                                              '', 
                                                              $strIdentificacionCliente, 
                                                              '',
                                                              '', 
                                                              ''
                                                             );
                $arrayParametros = array();
                $arrayParametros['strSerieCpe']      = $serieCpe;
                $arrayElementosExistentesPorSerie    = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                         ->getElementosExistentesPorSerie($arrayParametros);
                if (!$arrayElementosExistentesPorSerie['arrayResultado'])
                {
                    $arrayParametros['strSerieCpe']      = strtolower($serieCpe);
                    $arrayElementosExistentesPorSerie    = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                             ->getElementosExistentesPorSerie($arrayParametros);
                }
                
                if ($arrayClientesPermitidos)
                {
                    foreach($arrayClientesPermitidos as $objClientePermitido)
                    {
                        if ($arrayElementosExistentesPorSerie['arrayResultado'])
                        {
                            foreach($arrayElementosExistentesPorSerie['arrayResultado'] as $arrayItemElemento)
                            {
                                //se recupera la razon social del servicio que usa el elemento existen en Telcos
                                $arrayDatosClienteElemento = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                                         ->getDatosClientePorIdServicio($arrayItemElemento['id'],"SI");
                                $strIdentificacionElemento = $arrayDatosClienteElemento['IDENTIFICACION_CLIENTE'];
                                /* se compara razon social del elemento existente en telcos con la razon social parametrizada para 
                                   poder usar equipos de otros clientes*/
                                if ($strIdentificacionElemento == $objClientePermitido['valor2'])
                                {
                                    $intInterfaceEleCliId    = $arrayItemElemento['interfaceElementoClienteId'];
                                    $booleanEncontroElemento = true;
                                    $strCadenaRespuesta      = $strStatusIn.'|'.$strMensajeIn."|"."SI"."|".$intInterfaceEleCliId;
                                    break;
                                }
                            }
                        }
                        if ($booleanEncontroElemento)
                        {
                            break;
                        }
                    }
                }
                
            }
        }
        
        /* si el elemento fue encontrado como ya existen e instalado por tipo de orden traslado se debe confirmar
           que dicho servicio esta relacionado al servicio origen del traslado*/
        if($strTipoOrden == "T" && is_object($objServicio) && $strPrefijoEmpresa == "TN")
        {
            $strStatusValidTraslado    = "ERROR";
            $objServProdCaractTraslado = $buscarNaf->getServicioProductoCaracteristica($objServicio, 
                                                                                       'TRASLADO',
                                                                                       $objServicio->getProductoId()
                                                                                      );
            if (is_object($objServProdCaractTraslado))
            {
                $strValorProdCaractTraslado = $objServProdCaractTraslado->getValor();
                if (!empty($strValorProdCaractTraslado))
                {
                    $objServOrigenTraslado = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                         ->find($objServProdCaractTraslado->getValor());
                    if (is_object($objServOrigenTraslado))
                    {
                        $strLoginOrigenTraslado = $objServOrigenTraslado->getPuntoId()->getLogin();
                        $objStTraslado = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                     ->findOneBy(array("servicioId" => $objServOrigenTraslado->getId()));
                        if (is_object($objStTraslado))
                        {
                            $objEleCliTraslado = $emComercial->getRepository('schemaBundle:InfoElemento')
                                                             ->find($objStTraslado->getElementoClienteId());
                            if (is_object($objEleCliTraslado))
                            {
                                $strSerieEleCliTraslado = $objEleCliTraslado->getSerieFisica();
                                if (strtoupper($strSerieEleCliTraslado) == $serieCpe)
                                {
                                    $strStatusValidTraslado = "OK";
                                }
                                else
                                {
                                    $objEnlCliTraslado = $emInfraestructura
                                                         ->getRepository('schemaBundle:InfoEnlace')
                                                         ->findOneBy( 
                                                           array("interfaceElementoIniId" => $objStTraslado->getInterfaceElementoClienteId(),
                                                                 "estado"                 => 'Activo'));
                                    while (is_object($objEnlCliTraslado))
                                    {
                                        $objEleCliTraslado      = $objEnlCliTraslado->getInterfaceElementoFinId()->getElementoId();
                                        $strSerieEleCliTraslado = $objEleCliTraslado->getSerieFisica();
                                        if (strtoupper($strSerieEleCliTraslado) == $serieCpe)
                                        {
                                            $strStatusValidTraslado = "OK";
                                            $objEnlCliTraslado      = null;
                                        }
                                        else
                                        {
                                            $objEnlCliTraslado = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoEnlace')
                                                                 ->findOneBy( 
                                                                 array("interfaceElementoIniId" => $objEnlCliTraslado->getInterfaceElementoFinId()
                                                                                                                     ->getId(),
                                                                       "estado"                 => 'Activo'));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ( $status =="OK" && $strEncontroExistente == "NO" )
            {
                $strCadenaRespuesta = $status.'|'.$mensaje;
            }
            else 
            {
                if ($status =="OK" && $strEncontroExistente == "SI")
                {
                    if ($strStatusValidTraslado == "OK")
                    {
                        $strEsEquipoExistente = "SI";
                    }
                    else
                    {
                        $strCadenaRespuesta = $strStatusValidTraslado.'|'.
                                              "El elemento existe actualmente en Naf como Instalado, pero no esta asociado".
                                              " al punto origen del traslado que es ".$strLoginOrigenTraslado.".";
                    }
                }
                else
                {
                    if ($status !="OK")
                    {
                        if($strStatusValidTraslado == "OK")
                        {
                            $strCadenaRespuesta = $status.'|'.
                                                  "El elemento no existe actualmente en Naf como Instalado ó Pendiente de Instalar".
                                                  ", si esta asociado al punto origen ".
                                                  "del traslado que es ".$strLoginOrigenTraslado.".";
                        }
                        else
                        {
                            $strCadenaRespuesta = $status.'|'.
                                                  "El elemento no existe actualmente en Naf como Instalado ó Pendiente de Instalar".
                                                  " y no esta asociado al punto origen ".
                                                  "del traslado que es ".$strLoginOrigenTraslado.".";
                        }
                    }
                }
            }
                
        }
        
        $strCadenaRespuesta = $strCadenaRespuesta.'|'.$strEsEquipoExistente;
        return $respuesta->setContent($strCadenaRespuesta);
    }


    /**
     * Función que sirve para consulta Información del Naf
     * 
     * @author Jorge Gomez <jigomez@telconet.ec>
     * @version 1.0 13-09-2016 Version inicial
     * 
    */
    public function buscarDatosNafAction()
    {
        $objRespuesta               = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $emInfraestructura       = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial             = $this->getDoctrine()->getManager("telconet");
        $objRequest              = $this->get('request');
        $strSerieCpe             = strtoupper($objRequest->get('serieCpe'));
        $intIdProducto           = $objRequest->get('idProducto');
        $intIdPersonaRol         = $objRequest->get('idPersonaRol');
        $objBuscarNaf            = $this->get('tecnico.InfoServicioTecnico');
        $strCodEmpresa           = $objRequest->getSession()->get('idEmpresa');
        $strNombreParametro      = "CLIENTES SOPORTE LOGICO CAMARA";
       

        $arrayParametroDet = $objBuscarNaf->getClienteSoporteLogico(array(
            'strNombreParametro' => $strNombreParametro,
            'intIdPersonaRol' => $intIdPersonaRol,
            'intIdProducto' => $intIdProducto, 
            'strCodEmpresa' => $strCodEmpresa )
        );

        $arrayNaf = $objBuscarNaf->buscarInfoEnNaf($strSerieCpe,$arrayParametroDet[0]["valor6"]);
        
        
        $strStatus = $arrayNaf[0]['status'];

        if($strStatus == "OK")
        {
            $arrayNafCam = explode(",", $arrayNaf[0]['mensaje']);

            if($arrayNafCam[1] == $arrayParametroDet[0]["valor5"] && $arrayNafCam[2] == $arrayParametroDet[0]["valor6"])
            {            
                return $objRespuesta->setContent('{"mensaje":"'.$arrayNaf[0]['mensaje'].'", "status":"'.$strStatus.'"}');
            }else
            {
                return $objRespuesta->setContent('{"mensaje":"SERIE DE CÁMARA NO COINCIDE", "status":"NO EXISTE CAMARA"}');

            }
        }
        else 
        {
            return $objRespuesta->setContent('{"mensaje":"'.$arrayNaf[0]["mensaje"].'", "status":"'.$strStatus.'"}');
        }
            

    }

    /**
     * Función que sirve realizar la confirmación de producto NetlifeCam
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.0 13-09-2016 Version inicial
     * 
    */
    public function trasladarNetlifeCamAction()
    {
        $objRespuesta       = new JsonResponse();
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $strEmpresaCod      = $objSession->get('idEmpresa');
        $strIpCreacion      = $objRequest->getClientIp();
        $strUsrCreacion     = $objSession->get('user');
        $serviceUtil        = $this->get('schema.Util');
        $serviceConfirmar      = $this->get('tecnico.InfoConfirmarServicio');

        try
        {
            $intIdServicio         = $objRequest->get('idServicio');
            $strNombreTecnico      = $objRequest->get('strNombreTecnico');
            $strSerieTarjeta       = $objRequest->get('serieTarjeta');
            $strModeloTarjeta      = $objRequest->get('modeloTarjeta');
            $strSerieCamara        = $objRequest->get('serieCamara');
            $strModeloCamara       = $objRequest->get('modeloCamara');
            $intIdServicioInternet = $objRequest->get('idServicioInternet');

            $arrayParametros = array( 'intIdServicio'         => $intIdServicio,
                                      'strNombreTecnico'      => $strNombreTecnico,
                                      'strSerieTarjeta'       => $strSerieTarjeta,                
                                      'strModeloTarjeta'      => $strModeloTarjeta,
                                      'strSerieCamara'        => $strSerieCamara,
                                      'strModeloCamara'       => $strModeloCamara,
                                      'intIdServicioInternet' => $intIdServicioInternet,
                                      'strUsrCreacion'        => $strUsrCreacion,
                                      'strIpCreacion'         => $strIpCreacion,
                                      'strEmpresaCod'         => $strEmpresaCod
                                    );

            $arrayRespuestaTraslado = $serviceConfirmar->trasladarNetlifeCam($arrayParametros);
            $strStatus         = $arrayRespuestaTraslado['status'];
            $strMensaje        = $arrayRespuestaTraslado['mensaje'];

            if ($strStatus !== "OK")
            {
                throw new \Exception($strMensaje);
            }            
        }
        catch(\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Error al realizar traslado: '.$objEx->getMessage();
            
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.trasladarNetlifeCamAction', 
                                      $e->getMessage(), 
                                      $strUsrCreacion, 
                                      $strIpCreacion
                                     );
        }
        $objRespuesta->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objRespuesta;
    }
    
    /**
     * Función que sirve realizar la confirmación de servicios
     * 
     * @version 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-09-2016 Se agrega como parámetro el empleado en sesión para conocer quien realizó la confirmación
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 17-01-2017 Se agregan parametros para poder procesar activación de servicios Smart Space
     * @since 1.1 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 24-01-2017 Se agregan parametros para poder procesar activación de servicios Smart Wifi
     * @since 1.2 
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 21-01-2018 - Se recibe por parametro el nombre Tecnico del servicio.
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.5 10-11-2017 Se agregan parametros para poder procesar confirmación de servicios por traslado
     * @since 1.4
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 18-07-2018 Se envía parámetro strEsIsb a la función confirmarServicio para identificar servicios Small Business
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 21-01-2019 - Se realizan ajustes para ingresar información de los equipos de seguridad logica
     * @since 1.6
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.8 24-04-2019 - Se agregan validaciones para controlar escenario de registro de equipos de seguridad lógica cuando es propiedad del
     *                           Cliente o Telconet
     * @since 1.7
     *
     * 
     * @author Jesus Banchen <jbanchen@telconet.ec>
     * @version 1.9 29-03-2019 Se agregan parametros para poder procesar confirmación de servicios para TNG
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.0 20-10-2020 - Se agrega programación para consultar si un producto sin flujo esta hablitado para que se realice la activacion y
     *                           registro de elementos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 19-11-2020 - Se agrega atributos capacidad y marca para el registro de la tarjeta de memoria en las camaras de netlifecam
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.2 01-08-2022 - Se agregan nuevos parámetros para la activación de los servicios SECURITY NG FIREWALL con cámaras safecity.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.3 03-10-2022 - Se agrega validación para inicializar los equipos para servicios SEG_VEHICULO.
     *
     * @author Andre Lazo V <alazo@telconet.ec>
     * @version 2.4 23-12-2022 - Se agregan nuevos parametros para la confirmacion de activacion de Clear Channel Punto a Punto
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 2.5 09-12-2022 - Se agrega la validacion para obtener los equipos del producto SAFE ENTRY
     * 
     * @author Axel Auza <aauza@telconet.ec>
     * @version 2.6 07-06-2023 - Se agrega validación para obtener los elementos por clientes en el producto SEG_VEHICULO
     * 
     */
    public function confirmarActivacionAction()
    {
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        $respuesta       = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion        = $this->get('request');
        $session         = $peticion->getSession();
        $emComercial     = $this->get('doctrine')->getManager('telconet');
        $emGeneral       = $this->getDoctrine()->getManager('telconet_general');
        $arrayPeticiones = array(
                                 'idEmpresa'                     => $session->get('idEmpresa'),
                                 'prefijoEmpresa'                => $session->get('prefijoEmpresa'),
                                 'strIdPersonaEmpresaRol'        => $peticion->get('idPersonaEmpresaRol'),
                                 'idServicio'                    => $peticion->get('idServicio'),
                                 'idProducto'                    => $peticion->get('idProducto'),
                                 'perfil'                        => $peticion->get('perfil'),
                                 'serieEquipo'                   => $peticion->get('serieEquipo'),
                                 'descEquipo'                    => $peticion->get('descEquipo'),
                                 'modeloEquipo'                  => $peticion->get('modeloEquipo'),
                                 'macEquipo'                     => $peticion->get('macEquipo'),
                                 'ipEquipo'                      => $peticion->get('ipEquipo'),
                                 'registroEquipo'                => $peticion->get('registroEquipo'),
                                 'propiedadEquipo'               => $peticion->get('propiedadEquipo')?$peticion->get('propiedadEquipo'):"",
                                 'login'                         => $peticion->get('login'),
                                 'capacidad1'                    => $peticion->get('capacidad1'),
                                 'capacidad2'                    => $peticion->get('capacidad2'),
                                 'serieCpe'                      => $peticion->get('serieCpe'),
                                 'codigoArticulo'                => $peticion->get('codigoArticulo'),
                                 'macCpe'                        => $peticion->get('macCpe'),
                                 'jsonCaracteristicas'           => $peticion->get('jsonCaracteristicas'),
                                 'ssid'                          => $peticion->get('ssid'),
                                 'password'                      => $peticion->get('password'),
                                 'numeroPc'                      => $peticion->get('numPc'),
                                 'modoOperacion'                 => $peticion->get('modoOperacion'),
                                 'observacionCliente'            => $peticion->get('observacionCliente'),
                                 'observacionActivarServicio'    => $peticion->get('observacionActivarServicio'),
                                 'productoPermitidoRegistroEle'  => $peticion->get('productoPermitidoRegistroEle'),
                                 'serieTarjeta'                  => $peticion->get('serieTarjeta'),
                                 'modeloTarjeta'                 => $peticion->get('modeloTarjeta'),
                                 'marcaTarjeta'                  => $peticion->get('marcaTarjeta'),
                                 'capacidadTarjeta'              => $peticion->get('capacidadTarjeta'),
                                 'strTipoElemento'               => $peticion->get('strTipoElemento'),
                                 'idAccion'                      => $peticion->get('idAccion'),
                                 'strEsSmartSpace'               => $peticion->get('strEsSmartSpace'),
                                 'strCircuitoL1'                 => $peticion->get('strCircuitoL1'),
                                 'strCircuitoL2'                 => $peticion->get('strCircuitoL2'),
                                 'strNombreTecnico'              => $peticion->get('nombreTecnico')?$peticion->get('nombreTecnico'):$peticion->get('strNombreTecnico'),
                                 'strIdPersonaEmpresaRol'        => $session->get('idPersonaEmpresaRol'),
                                 'strIdDepartamento'             => $session->get('idDepartamento'),
                                 'strIdOficina'                  => $session->get('idOficina'),
                                 'usrCreacion'                   => $session->get('user'),
                                 'ipCreacion'                    => $peticion->getClientIp(),
                                 'serNaf'                        => $this->container->getParameter('database_host_naf'),
                                 'ptoNaf'                        => $this->container->getParameter('database_port_naf'),
                                 'sidNaf'                        => $this->container->getParameter('database_name_naf'),
                                 'usrNaf'                        => $this->container->getParameter('user_naf'),
                                 'pswNaf'                        => $this->container->getParameter('passwd_naf'),
                                 'empleadoSesion'                => $session->get('empleado'),
                                 'strSerieSmartWifi'             => $peticion->get('strSerieSmartWifi'),
                                 'strModeloSmartWifi'            => $peticion->get('strModeloSmartWifi'),
                                 'strMacSmartWifi'               => $peticion->get('strMacSmartWifi'),
                                 'intIdServicioInternet'         => $peticion->get('intIdServicioInternet'),
                                 'strEsIsb'                      => $peticion->get('strEsIsb'),
                                 'idOnt'                         => $peticion->get('idOnt'),
                                 'puertosOnt'                    => $peticion->get('puertosOnt'),
                                 'esServicioRequeridoSafeCity'   => $peticion->get('esServicioRequeridoSafeCity'),
                                 'arrayCaractAdicionales'        => json_decode($peticion->get('arrayCaractAdicionales'), true),
                                 'serialNGF'                     => $peticion->get('serialNGF'),
                                 'puertoAdminWebNGF'             => $peticion->get('puertoAdminWebNGF'),
                                 'administracionNGF'             => $peticion->get('administracionNGF'),
                                 'permisoActivarServiciotNGF'    => $peticion->get('permisoActivarServiciotNGF'),
                                 'tieneNubePublica'              => $peticion->get('tieneNubePublica'),
                                 'strNGFNubePublica'             => $peticion->get('strNGFNubePublica'),
                                 'idTecnicoEncargado'            => $peticion->get('idTecnicoEncargado'),
                                 'arrayCaractAdicionales'        => json_decode($peticion->get('arrayCaractAdicionales'), true),
                                 'propiedadLan'                  => $peticion->get('propiedadLan')?$peticion->get('propiedadLan'):"",
                                 'strInterface'                  => $peticion->get('strInterface'),
                                 'strSubred'                     => $peticion->get('strSubred'),
                                 'idSubred'                     => $peticion->get('idSubred'),
                                 'boolBackUpUM'                  => $peticion->get('boolBackUpUM'),
                                 'loginMonitoreo1'               => $peticion->get('loginMonitoreo1'),
                                 'loginMonitoreo2'               => $peticion->get('loginMonitoreo2'),
                                 'boolPrincipalClearChannel'     => $peticion->get('boolPrincipalClearChannel'),
                                 'boolBackUpClearChannel'        => $peticion->get('boolBackUpClearChannel'),
                                 'requiereTransporte'            => $peticion->get('requiereTransporte'),

                                );
        $arrayPeticionesTng = array(
                                 'codConexionUpStream'           => $peticion->get('codConexionUpStream'),
                                 'equipoConexionUpstream'        => $peticion->get('equipoConexionUpstream'), 
                                 'sidquipoUpstream'              => $peticion->get('sidquipoUpstream'), 
                                 'puerto'                        => $peticion->get('puerto'), 
                                 'tipoTransporte'                => $peticion->get('tipoTransporte'),  
                                 'provTransUpstream'             => $peticion->get('provTransUpstream'), 
                                 'idServicioRedTransp'           => $peticion->get('idServicioRedTransp'),  
                                 'idenRedtransporte'             => $peticion->get('idenRedtransporte'), 
                                 'fecha'                         => $peticion->get('fecha'), 
                                 'plazo'                         => $peticion->get('plazo'), 
                                 'fVenceContrato'                => $peticion->get('fVenceContrato'),   
                                 'cpeSerialNumber'               => $peticion->get('cpeSerialNumber'),    
                                 'connectorType'                 => $peticion->get('connectorType'), 
                                 'esquema'                       => $peticion->get('esquema'),    
                                 'iPWanGateway'                  => $peticion->get('iPWanGateway'),    
                                 'ipWanCPE'                      => $peticion->get('ipWanCPE'), 
                                 'ipLanCPE'                      => $peticion->get('ipLanCPE'), 
                                 'iPlanCliente'                  => $peticion->get('iPlanCliente'),  
                                 'vRF'                           => $peticion->get('vRF'), 
                                 'aSN'                           => $peticion->get('aSN'),  
                                 'monitoreoExterno'              => $peticion->get('monitoreoExterno'),
                                 'idProducto'                    => $peticion->get('idProducto'),
                                 'idServicio'                    => $peticion->get('idServicio'),
                                 'usrCreacion'                   => $session->get('user'),
                                 'ipCreacion'                    => $peticion->getClientIp(),
                                 'strActivarControl'             => $peticion->get('strActivarControl'),
                                 'strEstadoTng'                  => $peticion->get('strEstadoTng'),
                                 'observacionActivarServicio'    => $peticion->get('observacionActivarServicio')
                              
                );
                
        
        /* @var $confirmar InfoConfirmarServicio */
        $confirmar = $this->get('tecnico.InfoConfirmarServicio');
        //*----------------------------------------------------------------------*/
        $objConfirmarTng = $this->get('tecnico.InfoServicioTecnico');
        $strActTng = $arrayPeticionesTng['strActivarControl'];
        $strEstadoUpTng = $arrayPeticionesTng['strEstadoTng'];
        $strPrefijoEmpresa= $arrayPeticiones['prefijoEmpresa'];
        
        if ($strActTng != "Backlog")
        {
            if ($strPrefijoEmpresa == "TNG" && $strEstadoUpTng == "Backlog")
            {
                $arrayRespuesta = $objConfirmarTng->updateDatosTngInfSerProCart($arrayPeticionesTng);
            }
            //verificar elementos para servicios SEG_VEHICULO
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayPeticiones['idServicio']);
            if(is_object($objServicio) && is_object($objServicio->getProductoId())
               && $objServicio->getProductoId()->getNombreTecnico() == "SEG_VEHICULO")
            {
                //verificar elementos del producto SEG_VEHICULO
                $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PARAMETROS_SEG_VEHICULOS',
                                                    'TECNICO',
                                                    '',
                                                    'ELEMENTOS_PRODUCTO',
                                                    $objServicio->getProductoId()->getId(),
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    $arrayPeticiones['idEmpresa'],
                                                    'valor5',
                                                    '',
                                                    '',
                                                    '',
                                                    $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
                if(!isset($arrayParElementos) || empty($arrayParElementos))
                {
                    $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('PARAMETROS_SEG_VEHICULOS',
                                                                      'TECNICO',
                                                                      '',
                                                                      'ELEMENTOS_PRODUCTO',
                                                                      $objServicio->getProductoId()->getId(),
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $arrayPeticiones['idEmpresa'],
                                                                      'valor5',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      'GENERAL');
                }
                foreach($arrayParElementos as $arrayItemParEle)
                {
                    $strKeyTipo = $arrayItemParEle['valor6'];
                    $arrayPeticiones['serie'.$strKeyTipo]  = $peticion->get('serie'.$strKeyTipo);
                    $arrayPeticiones['modelo'.$strKeyTipo] = $peticion->get('modelo'.$strKeyTipo);
                    $arrayPeticiones['mac'.$strKeyTipo]    = $peticion->get('mac'.$strKeyTipo);
                }
            }

            //Se obtienen los elementos del request necesarios para la activacion del servicio SAFE ENTRY
            if(is_object($objServicio) && is_object($objServicio->getProductoId())
               && $objServicio->getProductoId()->getNombreTecnico() == 'SAFE ENTRY')
            {
                $arrayElementosSafe = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get('CONFIG ELEMENTOS SAFE ENTRY',
                                                            'TECNICO',
                                                            '',
                                                            'ELEMENTOS_SAFE_ENTRY',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $arrayPeticiones['idEmpresa'],
                                                            'valor7');
                foreach($arrayElementosSafe as $arrayElementos)
                {
                    $strKeyTipo = $arrayElementos['valor5'];
                    $arrayPeticiones['serie'.$strKeyTipo]  = $peticion->get('serie'.$strKeyTipo);
                    $arrayPeticiones['modelo'.$strKeyTipo] = $peticion->get('modelo'.$strKeyTipo);
                    $arrayPeticiones['mac'.$strKeyTipo]    = $peticion->get('mac'.$strKeyTipo);
                }
            }
            $arrayRespuesta = $confirmar->confirmarServicio($arrayPeticiones);
            $strMensaje = $arrayRespuesta[0]['mensaje'];
        }
        
        if ($strPrefijoEmpresa == "TNG")
        {
            if ($strEstadoUpTng == "Backlog" && $strActTng == "Backlog")
            {
                $arrayRespuesta = $objConfirmarTng->updateDatosTngInfSerProCart($arrayPeticionesTng);
            }
            else
            {
                $arrayRespuesta = $objConfirmarTng->insertDatosTngInfSerProCart($arrayPeticionesTng);
            }
            $strMensaje = $arrayRespuesta[0]['mensaje'];
        }  
        return $respuesta->setContent($strMensaje);
        
    }

    public function cortarTemporalClienteAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSoporte = $this->get('doctrine')->getManager('telconet_soporte');
        $emComunicacion = $this->get('doctrine')->getManager('telconet_comunicacion');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $emComercial = $this->get('doctrine')->getManager('telconet');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        
        $idServicio = $peticion->get('idServicio');
        $motivo = $peticion->get('motivo');
        $capacidad1 = $peticion->get('capacidad1');
        $capacidad2 = $peticion->get('capacidad2');
        $idProducto = $peticion->get('idProducto');
        
        $servicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array( "servicioId" => $servicio->getId()));
        $interfaceElementoId = $servicioTecnico->getInterfaceElementoId();
        
        $interfaceElemento= $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($interfaceElementoId);
        $nombreInterfaceElemento = $interfaceElemento->getNombreInterfaceElemento();
        $elementoId = $interfaceElemento->getElementoId();
        
        $elemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
        $modeloElementoId = $elemento->getModeloElementoId();
        
        $modeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);
        $nombreModeloElemento = $modeloElemento->getNombreModeloElemento();
        $reqAprovisionamiento=$modeloElemento->getReqAprovisionamiento();
       // echo($reqAprovisionamiento); die();
    if($reqAprovisionamiento=="SI"){//solo si tiene aprovisionamiento    
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:AdmiModeloElemento')
            ->generarJsonDocumentoPorModelo("cortarCliente".$nombreModeloElemento,$modeloElementoId,$emSoporte,$emComunicacion,$emSeguridad,$emInfraestructura);
        $posicion = strpos($objJson, "{");
        $respuestaDocumentoPorModelo = substr($objJson, $posicion);
        $outDocumentoPorModelo = json_decode($respuestaDocumentoPorModelo);
        
        $arr = $outDocumentoPorModelo->encontrados;
        
        $script = $arr[0]->script;
        $idDocumento= $arr[0]->idDocumento;
        $usuario= $arr[0]->usuario;
        $protocolo= $arr[0]->protocolo;
        
        if($idDocumento==0){
            return $respuesta->setContent("NO EXISTE TAREA");
        }
        
        if($nombreModeloElemento=="6524"){
            $resultadJson = $this->cortarCliente6524Action($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="7224"){
            $resultadJson = $this->cortarCliente7224Action($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="R1AD24A"){
            $resultadJson = $this->cortarClienteR1AD24AAction($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="R1AD48A"){
            $resultadJson = $this->cortarClienteR1AD48AAction($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="A2024"){
            $resultadJson = $this->cortarClienteA2024Action($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="A2048"){
            $resultadJson = $this->cortarClienteA2048Action($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="MEA1"){
            $resultadJson = $this->cortarClienteMea1Action($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="MEA3"){
            $resultadJson = $this->cortarClienteMea3Action($idDocumento, $usuario, $protocolo, $elementoId, $nombreInterfaceElemento);
        }
        else if($nombreModeloElemento=="IPTECOM" || $nombreModeloElemento=="411AH" || $nombreModeloElemento=="433AH"){
            
            $puntoId = $servicio->getPuntoId();
            $punto = $emComercial->getRepository('schemaBundle:InfoPunto')->find($puntoId->getId());
            $login = $punto->getLogin();
            
            $producto = $emComercial->getRepository('schemaBundle:AdmiProducto')->findBy(array( "descripcionProducto" => "INTERNET DEDICADO", "estado"=>"Activo"));
            $caracteristica = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findBy(array( "descripcionCaracteristica" => "MAC"));
            $prodCaract = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findBy(array( "productoId" => $producto[0]->getId(), "caracteristicaId"=>$caracteristica[0]->getId()));
            $servicioProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$prodCaract[0]->getId()));
            $mac = $servicioProdCaract[0]->getValor();
            
            $objJson1 = $this->getDoctrine()
                ->getManager("telconet_infraestructura")
                ->getRepository('schemaBundle:AdmiModeloElemento')
                ->generarJsonDocumentoPorModelo("encontrarNumbersMac".$nombreModeloElemento,$modeloElementoId,$emSoporte,$emComunicacion,$emSeguridad,$emInfraestructura);
            $posicion1 = strpos($objJson1, "{");
            $respuestaDocumentoPorModelo1 = substr($objJson1, $posicion1);
            $outDocumentoPorModelo1 = json_decode($respuestaDocumentoPorModelo1);

            $arr1 = $outDocumentoPorModelo1->encontrados;

            $script1 = $arr1[0]->script;
            $idDocumento1= $arr1[0]->idDocumento;
            $usuario1= $arr1[0]->usuario;
            
            //numbers de la mac
            $datos2 = $mac;
            $resultadJson2 = $this->cortarClienteIPTECOMAction($idDocumento1, $usuario1, "radio", $elementoId, $datos2);
            $resultado = $resultadJson2->mensaje;
            
            $numbers = explode("\n", $resultado);
            
            $flag=0;
            
            for($i=0;$i<count($numbers);$i++){
                if(stristr($numbers[$i], $mac) === FALSE) {
                    
                }
                else{
                    
                    if($nombreModeloElemento=="411AH"){
                        $numero = explode(" ", $numbers[$i]);
                    }
                    else{
                        $numero = explode(" ", $numbers[$i-1]);
                    }
                    $flag=1;
                    break;
                }
            }
            
//            print($numero);
//            die();
            
            if($flag==0){
                return $respuesta->setContent("ERROR ELEMENTO");
            }
            
//            for($i=0;$i<count($numero);$i++){
//                print($numero[$i].",");
//            }
//            die();
            
            //base
            if($nombreModeloElemento=="411AH"){
                $datos = $mac.",".$numero[0];
            }
            else{
                $datos = $mac.",".$numero[1];
            }
            
//            print($datos);
//            die();
            
            $resultadJson1 = $this->cortarClienteIPTECOMAction($idDocumento, $usuario, "radio", $elementoId, $datos);
            $statusBase = $resultadJson1->status;
            
            //servidor
            $datos1 = $login;
            $elementoIdRadius = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->findBy(array( "nombreElemento" => "ttcoradius"));
            
            $objJson = $this->getDoctrine()
                ->getManager("telconet_infraestructura")
                ->getRepository('schemaBundle:AdmiModeloElemento')
                ->generarJsonDocumentoPorModelo("cortarClienteRADIUS",$modeloElementoId,$emSoporte,$emComunicacion,$emSeguridad,$emInfraestructura);
            $posicion = strpos($objJson, "{");
            $respuestaDocumentoPorModelo = substr($objJson, $posicion);
            $outDocumentoPorModelo = json_decode($respuestaDocumentoPorModelo);

            $arr = $outDocumentoPorModelo->encontrados;

            $script = $arr[0]->script;
            $idDocumento= $arr[0]->idDocumento;
            $usuario= $arr[0]->usuario;
            
            $resultadJson = $this->cortarClienteRADIUSMAction($idDocumento, $usuario, "servidor", $elementoIdRadius[0], $datos1);
            $statusRadius=$resultadJson->status;
            
            if($statusBase=="OK" && $statusRadius=="OK"){
                $status="OK";
            }
        }
        
        if($nombreModeloElemento!="IPTECOM" || $nombreModeloElemento!="411AH"){
            $status=$resultadJson->status; 
        }
    }// fin si requiere Aprovisionamiento
    else{// sino requiere aprovisionamiento
        $status="OK";
    }
    
    
    
   //Sino requieren aprovisionamiento llamar a los scripts de TTCO
    if($reqAprovisionamiento=="NO"){     
      //llamar a scriipts TTCO
       $objInfoIp= $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId"=>$elementoId, "estado"=>'Activo'));
       
       $ipDslam=$objInfoIp->getIp();
       $modelo=$nombreModeloElemento;
       $accion="deshabilitarpuerto";
            $usrCreacion=$session->get('user');
       $responsable_ejecucion =$usrCreacion;
       
            $objAdmiFormaContacto=$emComercial->getRepository('schemaBundle:AdmiFormaContacto')->findOneBy(array("id"=>5));
        
            $objInfoPersona=$emComercial->getRepository('schemaBundle:InfoPersona')->findOneBy(array("login"=>$usrCreacion , "estado"=>'Activo'));
            
            $objFormaContacto= $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')->findBy(array("formaContactoId"=>$objAdmiFormaContacto, "personaId"=>$objInfoPersona, "estado"=>'Activo'));
            $email_responsable="";
            foreach($objFormaContacto as $dato){
                if($dato->getValor()!=" "){
                    $email_responsable=$dato->getValor();
                }
                
             }
        //$email_responsable=$objFormaContacto->getValor();
        //print_r($email_responsable);die();
            //$nombreInterfaceElemento es el puerto
            // $capacidad1 es la up
            // $capacidad2 es la down
       
       /// el vci
       $caracteristicaVci = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findBy(array( "descripcionCaracteristica" => "VCI", "estado"=>"Activo"));
       $pcVci = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findBy(array( "productoId" => $idProducto, "caracteristicaId"=>$caracteristicaVci[0]->getId()));
       $ispcVci = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findBy(array( "servicioId" => $idServicio, "productoCaracterisiticaId"=>$pcVci[0]->getId()));


                /*if($ispcVci[0]->getValor()>31 && $ispcVci[0]->getValor()<=100)
                    $vciValor = "0/".$ispcVci[0]->getValor();
                else
                    $vciValor = "0/35";*/
       
       $parametrosTecnicos=$nombreInterfaceElemento." ".$capacidad1." ".$capacidad2."";
       $parametroVci=$ispcVci[0]->getValor();
     /*echo($ipDslam." ");    
     echo($modelo." ");    
     echo($accion." ");    
     echo($login." ");  
     echo($responsable_ejecucion." ");   
     echo($email_responsable." ");  
     echo($parametrosTecnicos." "); 
      die();*/
      
      
       $resultadJson=$this->scriptsTTCOAction($ipDslam, $modelo,$accion,$login, $responsable_ejecucion, $email_responsable, $parametrosTecnicos, $parametroVci);    
       
    }
        
        
        if($status=="OK"){
            $emComercial->getConnection()->beginTransaction();
            
            $flagProd = 0 ;
            $contProdPref =0;
            //verificar prod preferencial
            $planServicio = $servicio->getPlanId();
            if($planServicio!="" || $planServicio!=null){
                $planDetServicio = $emComercial->getRepository('schemaBundle:InfoPlanDet')->findBy(array( "planId" => $planServicio->getId()));
                for($i=0;$i<count($planDetServicio);$i++){
                    $prodServicio1 = $planDetServicio[$i]->getProductoId();

                    $productoServicio1 = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($prodServicio1);

                    if($productoServicio1->getEsPreferencia()=="SI"){
                        $flagProd  = 1;
                    }
                }
            }
            else{
                $prodServicio1 = $servicio->getProductoId();
                $productoServicio1 = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($prodServicio1);

                if($productoServicio1->getEsPreferencia()=="SI"){
                    $flagProd=1;
                }
            }
            
            //verificar si existe otro producto preferencial
            if($flagProd==1){
                $puntoPref = $servicio->getPuntoId();
                $serviciosPunto1 = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(array( "puntoId" => $puntoPref->getId()));
                
                for($i=0;$i<count($serviciosPunto1);$i++){
                    $serv1 = $serviciosPunto1[$i];

                    //solo se buscaran el preferencial en servicios activos
                    if($serv1->getEstado()=="Activo"){
                        $plan = $serv1->getPlanId();
                        if($plan!="" || $plan!=null){
                            $planDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')->findBy(array( "planId" => $plan->getId()));
                            for($j=0;$j<count($planDet);$j++){
                                $prodServicio = $planDet[$j]->getProductoId();

                                $productoServicio = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($prodServicio);

                                if($productoServicio->getEsPreferencia()=="SI"){
                                    $contProdPref++;
            //                        break;
                                }
                            }
                        }
                        else{
                            $prodServicio = $servicio->getProductoId();
                            $productoServicio = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($prodServicio);

                            if($productoServicio->getEsPreferencia()=="SI"){
                                $contProdPref++;
                            }
                        }
                    }//cierre if servicio activo
                }
            }
            
            if($flagProd==1 && $contProdPref<2){
                $punto = $servicio->getPuntoId();
                $punto->setEstado("In-Temp");
                $emComercial->persist($punto);
                $emComercial->flush();
                
                $serviciosPunto = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(array( "puntoId" => $punto->getId()));
                for($i=0;$i<count($serviciosPunto);$i++){
                    $serv = $serviciosPunto[$i];
                    
                    if($serv->getEstado()=="Activo"){
                        $serv->setEstado("In-Temp");
                        $emComercial->persist($serv);
                        $emComercial->flush();

                        //historial del servicio
                        $servicioHistorial = new InfoServicioHistorial();
                        $servicioHistorial->setServicioId($serv);
                        $servicioHistorial->setObservacion("Se corto el Servicio Temporalmente - SUSPENSION INMEDIATA");
                        $servicioHistorial->setEstado("In-Temp");
                        $servicioHistorial->setUsrCreacion($session->get('user'));
                        $servicioHistorial->setFeCreacion(new \DateTime('now'));
                        $servicioHistorial->setIpCreacion($peticion->getClientIp());
                        $emComercial->persist($servicioHistorial);
                        $emComercial->flush();
                    }
                    
                }
            }
            else{
                $serv->setEstado("In-Temp");
                $emComercial->persist($serv);
                $emComercial->flush();

                //historial del servicio
                $servicioHistorial = new InfoServicioHistorial();
                $servicioHistorial->setServicioId($serv);
                $servicioHistorial->setObservacion("Se corto el Servicio Temporalmente - SUSPENSION INMEDIATA");
                $servicioHistorial->setEstado("In-Temp");
                $servicioHistorial->setUsrCreacion($session->get('user'));
                $servicioHistorial->setFeCreacion(new \DateTime('now'));
                $servicioHistorial->setIpCreacion($peticion->getClientIp());
                $emComercial->persist($servicioHistorial);
                $emComercial->flush();
            }
            
            $emComercial->getConnection()->commit();
            
            $result = "OK";
        }
        else if($status=="ERROR"){
            
            
            $result = "ERROR";
        }
        
        return $respuesta->setContent($result);
        
    }
    
    /**
     * Funcion que sirve para cortar Servicios de cualquier
     * ultima Milla
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 6-5-2015
     * @since 1.0
     * 
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.2 13-12-2017 - Se realiza ajuste en cuanto a prefijo empresa y id empresa para el producto de TN "INTERNET SMALL BUSINESS".
     *                           Se agrega bandera "SI" cuando se requiera Cortar al Servicio del Producto ISB.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 28-11-2018 - Se agregan validaciones para gestionar los productos de la empresa TNP
     * @since 1.2
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 11-02-2019 Se elimina el id de la empresa mapeado del parámetro PRODUCTOS_ESPECIALES_UM ya que es necesario usar 
     *                          el correcto id de la empresa en la función cortarServicio
     * 
     * @author Jesús Banchen <jbanchen@telconet.ec>
     * @version 1.5 28-03-2019 - Se agregan validaciones para gestionar los productos de la empresa TNG
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 15-08-2019 Se modifica el objeto retornado por un JsonResponse
     * 
     * @author Javier Hidalgo <jihidalgo@telconet.ec>
     * @version 1.7 09-12-2021 Se agrega parámetro el cual identifica si el motivo de corte nos permite
     *                         Inauditar a un cliente posible abusador.
     */
    public function cortarClienteAction()
    {
        ini_set('max_execution_time', 650000);
        
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        $objJsonResponse    = new JsonResponse();
                
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        $intIdEmpresa       =  $session->get('idEmpresa');
        $strPrefijoEmpresa  =  $session->get('prefijoEmpresa');
        $intIdProducto      =  $peticion->get('idProducto');
        $boolEsMotivoInaudit = $peticion->get('boolEsMotivoInaudit'); 
        $em                 =  $this->get('doctrine')->getManager('telconet');
        $emGeneral          =  $this->getDoctrine()->getManager('telconet_general');
        $strEsIsb           = 'NO';
        
        $objAdmiProducto = $em->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
        
        if(is_object($objAdmiProducto))
        {
            //Se obtienen la ultimas milla correspondiente al producto INTERNET SMALL BUSINESS para TN.
            $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('PRODUCTOS_ESPECIALES_UM', 
                                                     'COMERCIAL', 
                                                     '', 
                                                     '', 
                                                     $objAdmiProducto->getNombreTecnico(),
                                                     '', 
                                                     '', 
                                                     '', 
                                                     '', 
                                                     $intIdEmpresa);
           
            if( $arrayParametrosDet && count($arrayParametrosDet) > 0 )
            {
                if(isset($arrayParametrosDet['valor2']) && !empty($arrayParametrosDet['valor2']))
                {
                    if ($strPrefijoEmpresa != 'TNP')
                    {
                        $strPrefijoEmpresa =  $arrayParametrosDet['valor3'];
                    }
                   $strEsIsb          =  'SI';
                }
            }
        }
        
                
        $arrayPeticiones=array(
                                'idEmpresa'             => $intIdEmpresa,
                                'prefijoEmpresa'        => $strPrefijoEmpresa,
                                'idServicio'            => $peticion->get('idServicio'),
                                'idProducto'            => $peticion->get('idProducto'),
                                'motivo'                => $peticion->get('motivo'),
                                'capacidad1'            => $peticion->get('capacidad1'),
                                'capacidad2'            => $peticion->get('capacidad2'),
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $peticion->getClientIp(),
                                'idAccion'              => $peticion->get('idAccion'),
                                'strEsIsb'              => $strEsIsb,
                                'boolEsMotivoInaudit'   => $boolEsMotivoInaudit
                               );
        
        /* @var $cortar InfoCortarServicio */
        $cortar = $this->get('tecnico.InfoCortarServicio');
        //*----------------------------------------------------------------------*/
          
        if ($strPrefijoEmpresa == "TNG")
        {
            $arrayRespuesta = $cortar->cortarServicioTng($arrayPeticiones);
        }
        else
        {
            $arrayRespuesta = $cortar->cortarServicio($arrayPeticiones);   
        }
        $strStatus  = $arrayRespuesta[0]['status'];
        $strMensaje = $arrayRespuesta[0]['mensaje'];
        $objJsonResponse->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objJsonResponse;
    }
    
    /**
     * Función que crea un formulario de reporte para los agentes de IPCC y ATC en cual se podrá reportar posibles daños en las plataformas de
     * Paramount+ y Noggin de acuerdo con lo indicado por el cliente
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 05-12-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 04-05-2022 Se modifica la función para que los archivos adjuntos se suban al NFS
     *
     * @return JsonResponse
     */
    public function crearFormularioL1ParamountNogginAction()
    {
        ini_set('max_execution_time', 650000);

        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/html');

        $objPeticion                = $this->get('request');
        $emGeneral                  = $this->getDoctrine()->getManager('telconet_general');
        $emSoporte                  = $this->getDoctrine()->getManager('telconet_soporte');
        $emComunicacion             = $this->getDoctrine()->getManager('telconet_comunicacion');
        $emComercial                = $this->getDoctrine()->getManager('telconet');
        $objSession                 = $objPeticion->getSession();
        $strIpUsuarioCreacion       = $objPeticion->getClientIp();
        $intIdEmpresa               = $objSession->get('idEmpresa');
        $strPrefijoEmpresa          = $objSession->get('prefijoEmpresa');
        $intIdPersonaEmpresaRol     = $objSession->get('idPersonaEmpresaRol');
        $intIdDepartamentoOrigen    = $objSession->get('IdDepartamento')?$objSession->get('IdDepartamento'):"";
        $strUsrCreacion             = $objSession->get('user');
        $strCategoria               = $objPeticion->get('comboCategoria')?$objPeticion->get('comboCategoria'):"";
        $strTicket                  = $objPeticion->get('ticket')?$objPeticion->get('ticket'):"";
        $strNombreCompleto          = $objPeticion->get('nombreCompleto')?$objPeticion->get('nombreCompleto'):"";
        $strCorreoElectronico       = $objPeticion->get('correoElectronico')?$objPeticion->get('correoElectronico'):"";
        $strDescripcionProblema     = $objPeticion->get('descripcionProblema')?$objPeticion->get('descripcionProblema'):"";
        $strMedidasSolucion         = $objPeticion->get('medidasSolucion')?$objPeticion->get('medidasSolucion'):"";
        $strClientesAfectados       = $objPeticion->get('clientesAfectados')?$objPeticion->get('clientesAfectados'):"";
        $strGravedadProblema        = $objPeticion->get('gravedadProblema')?$objPeticion->get('gravedadProblema'):"";
        $strSugereniasProblema      = $objPeticion->get('sugerenciasProblema')?$objPeticion->get('sugerenciasProblema'):"";
        $intIdServicio              = $objPeticion->get('idServicio');
        $strNombreProducto          = $objPeticion->get('nombreProducto')?$objPeticion->get('nombreProducto'):"";
        $objInfoServicio            = null;
        $strRegionServicio          = "R1";
        $intIdDetalle               = "";
        $strExtensionesPermitidas   = "";
        $boolArchivoRestringido     = false;
        $strMensajeError            = "";
        $serviceUtil                = $this->get('schema.Util');
        $serviceCambiarPlanService  = $this->get('tecnico.InfoCambiarPlan');
        $serviceEnvioPlantilla      = $this->get('soporte.EnvioPlantilla');
        $serviceSoporte             = $this->get('soporte.SoporteService');

        try
        {
            //Se obtienen los archivos adjuntos en el formulario y se validan extensiones permitidas
            $arrayArchivos = $this->getRequest()->files->get('archivos');

            if(count($arrayArchivos) > 0)
            {
                //Se consultan las extensiones permitidas
                $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PROYECTO INTEGRACION PARAMOUNT',
                                                             'INFRAESTRUCTURA',
                                                             'GENERACION DE USUARIO Y CLAVE',
                                                             'EXTENSIONES_PERMITIDAS',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             $intIdEmpresa);

                if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
                {
                    $strExtensionesPermitidas = $arrayValoresParametros["valor1"];
                }

                for($intI=0;$intI<count($arrayArchivos);$intI++)
                {
                    if($arrayArchivos[$intI] != null)
                    {
                        $strNombreArchivo        = $arrayArchivos[$intI]->getClientOriginalName();
                        $arrayPartsNombreArchivo = explode('.', $strNombreArchivo);
                        $strLast                 = array_pop($arrayPartsNombreArchivo);
                        $arrayPartsNombreArchivo = array(implode('_', $arrayPartsNombreArchivo), $strLast);
                        $strExtArchivo           = $arrayPartsNombreArchivo[1];

                        /* Se validan extensiones restringidas */
                        if ((strpos($strExtensionesPermitidas, strtolower($strExtArchivo)) === false))
                        {
                            $arrayArchivos[$intI]   = null;
                        }
                    }
                }
            }
            //Se consulta datos de la persona en session
            if(!empty($intIdPersonaEmpresaRol))
            {
                $objInfoPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);

                if(is_object($objInfoPersonaEmpresaRol))
                {
                    $objInfoPersona          = $objInfoPersonaEmpresaRol->getPersonaId();
                    $intIdDepartamentoOrigen = $objInfoPersonaEmpresaRol->getDepartamentoId();

                    if(is_object($objInfoPersona))
                    {
                        $intIdPersona             = $objInfoPersona->getId();
                        $strNombrePersonaAsignada = $objInfoPersona->__toString();
                    }
                }
            }

            //*************************************************CREACION DE TAREA**********************************************//

            //1ero.- Se obtiene el nombre de la tarea
            $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('PROYECTO INTEGRACION PARAMOUNT',
                                                         'INFRAESTRUCTURA',
                                                         'GENERACION DE USUARIO Y CLAVE',
                                                         'TAREA USADA PARA FORMULARIO DE SOPORTE L1',
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         $intIdEmpresa);

            if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
            {
                $strNombreTarea = $arrayValoresParametros["valor1"];

                if(!empty($strNombreTarea))
                {
                    $objAdmiTarea = $emSoporte->getRepository('schemaBundle:AdmiTarea')->findOneBy(array("nombreTarea" => $strNombreTarea,
                                                                                                         "estado"      => "Activo"));

                    if(is_object($objAdmiTarea))
                    {
                        $strTareaId = $objAdmiTarea->getId();
                    }
                }
            }

            //2do.- Se obtiene el punto del servicio
            if(!empty($intIdServicio))
            {
                $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            }

            if(is_object($objInfoServicio))
            {
                $objInfoPunto = $objInfoServicio->getPuntoId();
            }

            if(!empty($intIdDepartamentoOrigen))
            {
                $objAdmiDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($intIdDepartamentoOrigen);
            }

            $strRegionServicio = '';

            if(is_object($objInfoServicio))
            {
                $objInfoPunto = $objInfoServicio->getPuntoId();
                if(is_object($objInfoPunto))
                {
                    //verifico el sector
                    $objSector = $objInfoPunto->getSectorId();
                    if(is_object($objSector))
                    {
                        //verifico la parroquia
                        $objParroquia = $objSector->getParroquiaId();
                        if(is_object($objParroquia))
                        {
                            //verifico el canton
                            $objCanton = $objParroquia->getCantonId();
                            if(is_object($objCanton))
                            {
                                $strCantonId       = $objCanton->getId();
                                $strRegionServicio = $objCanton->getRegion();
                            }
                        }
                    }
                }
            }

            $arrayParametros["strObservacion"]         = "<b>Producto:</b> ".$strNombreProducto." - <b>Descripción del problema:</b> "
                                                         .$strDescripcionProblema;
            $arrayParametros["intTarea"]               = $strTareaId;
            $arrayParametros["strTipoAfectado"]        = "Cliente";
            $arrayParametros["objPunto"]               = $objInfoPunto;
            $arrayParametros["objDepartamento"]        = $objAdmiDepartamento;
            $arrayParametros["strCantonId"]            = $strCantonId;
            $arrayParametros["strEmpresaCod"]          = $intIdEmpresa;
            $arrayParametros["strPrefijoEmpresa"]      = $strPrefijoEmpresa;
            $arrayParametros["strUsrCreacion"]         = $strUsrCreacion;
            $arrayParametros["strIpCreacion"]          = $strIpUsuarioCreacion;
            $arrayParametros["intDetalleSolId"]        = null;
            $arrayParametros["intDepartamentoOrigen"]  = $intIdDepartamentoOrigen;
            $arrayParametros["strIdPersonaAsig"]       = $intIdPersona;
            $arrayParametros["strNombrePersonaAsig"]   = $strNombrePersonaAsignada;
            $arrayParametros["strIdPerRolAsig"]        = $intIdPersonaEmpresaRol;
            $arrayParametros["strBanderaTraslado"]     = "S";
            $arrayParametros["strRegion"]              = $strRegionServicio;

            $strNumeroTarea = $serviceCambiarPlanService->crearTareaRetiroEquipoPorDemo($arrayParametros);

            //Consultar el idDetalle de la tarea
            $objInfoComunicacion = $emComunicacion->getRepository('schemaBundle:InfoComunicacion')->find($strNumeroTarea);

            if(is_object($objInfoComunicacion))
            {
               $intIdDetalle = $objInfoComunicacion->getDetalleId();
            }

            //Se cierra porque es una tarea rapida
            $arrayParametrosHist["intDetalleId"]            = $intIdDetalle;
            $arrayParametrosHist["strCodEmpresa"]           = $intIdEmpresa;
            $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
            $arrayParametrosHist["strIpCreacion"]           = $strIpUsuarioCreacion;
            $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamentoOrigen;
            $arrayParametrosHist["strEnviaDepartamento"]    = "";
            $arrayParametrosHist["strOpcion"]               = "Seguimiento";
            $arrayParametrosHist["strObservacion"]          = "Se finaliza la tarea de manera automática.";
            $arrayParametrosHist["strEstadoActual"]         = "Finalizada";
            $arrayParametrosHist["strAccion"]               = "Finalizada";

            $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            $arrayParametrosHist["strOpcion"] = "Historial";

            $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            /**Guardar Archivos**/
            $arrayParametrosArchivos = array("idCaso"                => 0,
                                             "idTarea"               => $intIdDetalle,
                                             "servicio"              => 0,
                                             "origenCaso"            => "N",
                                             "origenTarea"           => "S",
                                             "strCodigoDocumento"    => "",
                                             "strPrefijoEmpresa"     => $strPrefijoEmpresa,
                                             "strUser"               => $strUsrCreacion,
                                             "strIdEmpresa"          => $intIdEmpresa,
                                             "arrayArchivos"         => $arrayArchivos);

            $serviceSoporte->guardarMultiplesAdjuntosCasosTareasEnNfs($arrayParametrosArchivos);

            //*************************************************CREACION DE TAREA**********************************************//


            //***********************************************ENVIO DE NOTIFICACION********************************************//

            $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('PROYECTO INTEGRACION PARAMOUNT',
                                                         'INFRAESTRUCTURA',
                                                         'GENERACION DE USUARIO Y CLAVE',
                                                         'DATOS USADOS PARA ENVIO DE CORREO DEL FORMULARIO DE SOPORTE L1',
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         $intIdEmpresa);

            if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
            {
                $arrayTo[]    = $arrayValoresParametros["valor1"];
                $strRemitente = $arrayValoresParametros["valor2"];
                $strAsunto    = $arrayValoresParametros["valor3"];
                $intIdCanton  = $arrayValoresParametros["valor4"];
            }

            //Agregar correo de contacto en la notificacion
            if(!empty($strCorreoElectronico))
            {
                $arrayTo[] = $strCorreoElectronico;
            }

            $arrayParametrosCorreo = array('categoria'              => $strCategoria,
                                           'ticket'                 => $strTicket,
                                           'nombreCompleto'         => $strNombreCompleto,
                                           'correoElectronico'      => $strCorreoElectronico,
                                           'descripcionProblema'    => $strDescripcionProblema,
                                           'medidasSolucion'        => $strMedidasSolucion,
                                           'clientesAfectados'      => $strClientesAfectados,
                                           'gravedadProblema'       => $strGravedadProblema,
                                           'sugerenciasFuente'      => $strSugereniasProblema,
                                           'nombreProducto'         => $strNombreProducto);

            //Consultamos los documentos asociados a la tarea
            $strDocumentoAdjunto = null;
            $objDocRelacion      = $emComunicacion->getRepository("schemaBundle:InfoDocumentoRelacion")
                                                  ->findBy(array('detalleId' => $intIdDetalle,
                                                                 'estado'    => 'Activo'));

            if(count($objDocRelacion) > 1)
            {
                foreach($objDocRelacion as $idxDocRelacion)
                {
                    $objDocumento = $emComunicacion->getRepository("schemaBundle:InfoDocumento")->find($idxDocRelacion->getDocumentoId());

                    if(is_object($objDocumento))
                    {
                        $arrayRutasAnexos[] = $objDocumento->getUbicacionFisicaDocumento();
                    }
                }

                $serviceEnvioPlantilla->generarEnvioPlantilla($strAsunto." - ".$strNombreProducto,
                                                              $arrayTo,
                                                              'PARAMOUNT_L1',
                                                              $arrayParametrosCorreo,
                                                              $intIdEmpresa,
                                                              $intIdCanton,
                                                              $intIdDepartamentoOrigen,
                                                              $arrayRutasAnexos,
                                                              false,
                                                              $strRemitente);
            }
            else
            {
                if(count($objDocRelacion) > 0)
                {
                    foreach($objDocRelacion as $idxDocRelacion)
                    {
                        $objDocumento = $emComunicacion->getRepository("schemaBundle:InfoDocumento")->find($idxDocRelacion->getDocumentoId());

                        if(is_object($objDocumento))
                        {
                            $strDocumentoAdjunto = $objDocumento->getUbicacionFisicaDocumento();
                        }
                    }
                }

                $serviceEnvioPlantilla->generarEnvioPlantilla($strAsunto,
                                                              $arrayTo,
                                                              'PARAMOUNT_L1',
                                                              $arrayParametrosCorreo,
                                                              $intIdEmpresa,
                                                              $intIdCanton,
                                                              $intIdDepartamentoOrigen,
                                                              $strDocumentoAdjunto,
                                                              false,
                                                              $strRemitente);
            }

            //Se registra historial del servicio
            if(is_object($objInfoServicio))
            {
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objInfoServicio);
                $objServicioHistorial->setObservacion("Se creo Formulario de soporte - ".$strNombreProducto.", # tarea: ".$strNumeroTarea);
                $objServicioHistorial->setEstado($objInfoServicio->getEstado());
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strIpUsuarioCreacion);
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
            }

            //***********************************************ENVIO DE NOTIFICACION********************************************//

            $boolSuccess = true;
            $strMensaje  = "Formulario generado y enviado con éxito, se creó la tarea # ".$strNumeroTarea;
        }
        catch (\Exception $e)
        {
            $boolSuccess = false;
            $strMensaje  = "Se presento un error en la creación del Formulario";

            if($boolArchivoRestringido)
            {
                $strMensaje = $strMensajeError;
            }

            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController.crearFormularioL1ParamountNogginAction',
                                      $e->getMessage(),
                                      $strUsrCreacion,
                                      $strIpUsuarioCreacion
                                     );
        }

        $arrayRespuesta = '{"success":"'.$boolSuccess.'","respuesta":"'.$strMensaje.'"}';

        $objResponse->setContent($arrayRespuesta);

        return $objResponse;
}

    /**
     * Función que crea un formulario de reporte para los agentes de IPCC y ATC en cual se podrá reportar posibles daños 
     * en las plataformas de streaming de acuerdo con lo indicado por el cliente.
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.0 10-09-2021
     *
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.2
     * Se modifica el método para realizar el soporte de segundo nivel en el prodoucto ECDF
     * Se corrigen ciertos problemas con los mensajes y excepciones
     * @since 10-12-2021
     * 
     * @return JsonResponse
     */
    public function crearFormularioSoporteAction()
    {
        $objResponse = new Response();
        $objResponse->headers->set('Content-type', 'text/json');
        $emGeneral                  = $this->getDoctrine()->getManager('telconet_general');
        $emSoporte                  = $this->getDoctrine()->getManager('telconet_soporte');
        $emComunicacion             = $this->getDoctrine()->getManager('telconet_comunicacion');
        $emComercial                = $this->getDoctrine()->getManager('telconet');
        $objPeticion                = $this->get('request');
        $objSession                 = $objPeticion->getSession();
        $strIpUsuarioCreacion       = $objPeticion->getClientIp();
        $intIdEmpresa               = $objSession->get('idEmpresa');
        $strPrefijoEmpresa          = $objSession->get('prefijoEmpresa');
        $intIdPersonaEmpresaRol     = $objSession->get('idPersonaEmpresaRol');
        $intIdDepartamentoOrigen    = $objSession->get('IdDepartamento')?$objSession->get('IdDepartamento'):"";
        $strUsrCreacion             = $objSession->get('user');
        $strTicket                  = $objPeticion->get('ticket')?$objPeticion->get('ticket'):"";
        $strNombreCompleto          = $objPeticion->get('nombreCompleto')?$objPeticion->get('nombreCompleto'):"";
        $strCorreoElectronico       = $objPeticion->get('correoElectronico')?$objPeticion->get('correoElectronico'):"";
        $strUsuarioECDF             = $objPeticion->get('usuarioECDF')?$objPeticion->get('usuarioECDF'):"";
        $strTipo                    = $objPeticion->get('tipo')?$objPeticion->get('tipo'):"";
        $strMarca                   = $objPeticion->get('marca')?$objPeticion->get('marca'):"";
        $strModelo                  = $objPeticion->get('modelo')?$objPeticion->get('modelo'):"";
        $strDescripcionProblema     = $objPeticion->get('descripcionProblema')?$objPeticion->get('descripcionProblema'):"";
        $intIdServicio              = $objPeticion->get('idServicio');
        $strNombreProducto          = $objPeticion->get('nombreProducto')?$objPeticion->get('nombreProducto'):"";
        $objInfoServicio            = null;
        $intIdDetalle               = "";
        $serviceUtil                = $this->get('schema.Util');
        $serviceCambiarPlanService  = $this->get('tecnico.InfoCambiarPlan');
        $serviceSoporte             = $this->get('soporte.SoporteService');
        $serviceEnvioPlantilla      = $this->get('soporte.EnvioPlantilla');
        $objInfoServicioRepository  = $emComercial->getRepository('schemaBundle:InfoServicio');
        $serviceAuthorizationFox    = $this->get('tecnico.AuthorizationFox');
        $serviceFoxPremium          = $this->get('tecnico.FoxPremium');

        try
        {
            //Se consulta datos de la persona en session
            if(!empty($intIdPersonaEmpresaRol))
            {
                $objInfoPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);

                if(is_object($objInfoPersonaEmpresaRol))
                {
                    $objInfoPersona          = $objInfoPersonaEmpresaRol->getPersonaId();
                    $intIdDepartamentoOrigen = $objInfoPersonaEmpresaRol->getDepartamentoId();

                    if(is_object($objInfoPersona))
                    {
                        $intIdPersona             = $objInfoPersona->getId();
                        $strNombrePersonaAsignada = $objInfoPersona->__toString();
                    }
                }
            }

            //*************************************************CREACION DE TAREA**********************************************//

         //     //1ero.- Se obtiene el nombre de la tarea
            $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->getOne('PROYECTO_INTEGRACION_FORMULARIO_SOPORTE',
                                                         'TECNICO',
                                                         'FORMULARIO_SOPORTE',
                                                         'TAREA USADA PARA FORMULARIO DE SOPORTE',
                                                         $strNombreProducto,
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         $intIdEmpresa);

            if(isset($arrayValoresParametros["valor2"]) && !empty($arrayValoresParametros["valor2"]))
            {
                $strNombreTarea = $arrayValoresParametros["valor2"];

                if(!empty($strNombreTarea))
                {
                    $objAdmiTarea = $emSoporte->getRepository('schemaBundle:AdmiTarea')->findOneBy(array("nombreTarea" => $strNombreTarea,
                                                                                                         "estado"      => "Activo"));

                    if(is_object($objAdmiTarea))
                    {
                        $strTareaId = $objAdmiTarea->getId();
                    }
                }
            }

         //     //2do.- Se obtiene el punto del servicio
            if(!empty($intIdServicio))
            {
                $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                
            }

            if(is_object($objInfoServicio))
            {
                $objInfoPunto = $objInfoServicio->getPuntoId();

                $arrayProducto                      = $serviceFoxPremium->determinarProducto(array('intIdServicio'=>$intIdServicio));
                $arrayParamsGetSsidXIdServicio      = array("intIdServicio"                 => $intIdServicio,
                                                            "strDescripcionCaract"          => $arrayProducto['strSsid'],
                                                            "strEstadoSpcEstaParametrizado" => "SI");

                $arrayRespuestaGetSsidXIdServicio   = $objInfoServicioRepository->obtieneInfoSpcProductosTv($arrayParamsGetSsidXIdServicio);
                if($arrayRespuestaGetSsidXIdServicio['status'] !== "OK")
                {
                    throw new \Exception ("No se pudo obtener el SuscriberId del servicio");
                }
                $arrayRegistrosGetSsidXIdServicio = $arrayRespuestaGetSsidXIdServicio["arrayRegistros"];
                $intIdSpcUsuario = $arrayRegistrosGetSsidXIdServicio[0]["intIdSpc"];

                $arrayParametrosAuthorization   = array(
                                    'country_code'      =>'EC',
                                    'intIdSpcSuscriber' =>$intIdSpcUsuario,
                                    'strSsid'           => $arrayProducto['strSsid']
                            );
                $arrayRespuesta  =   $serviceAuthorizationFox->autorizarServicio($arrayParametrosAuthorization);
                if ($arrayRespuesta['strCodigoSalida'] != 'OK')
                {
                    $arrayRespuesta['strMensajeSalida'] = str_replace('"', "'", $arrayRespuesta['strMensajeSalida']);
                    throw new \Exception($arrayRespuesta['strMensajeSalida']);
                }
            }

            if(!empty($intIdDepartamentoOrigen))
            {
                $objAdmiDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($intIdDepartamentoOrigen);
            }

            $strRegionServicio = '';

            if(is_object($objInfoServicio))
            {
                $objInfoPunto = $objInfoServicio->getPuntoId();
                if(is_object($objInfoPunto))
                {
                    //verifico el sector
                    $objSector = $objInfoPunto->getSectorId();
                    if(is_object($objSector))
                    {
                        //verifico la parroquia
                        $objParroquia = $objSector->getParroquiaId();
                        if(is_object($objParroquia))
                        {
                            //verifico el canton
                            $objCanton = $objParroquia->getCantonId();
                            if(is_object($objCanton))
                            {
                                $strCantonId       = $objCanton->getId();
                                $strRegionServicio = $objCanton->getRegion();
                            }
                        }
                    }
                }
            }

            $arrayParametros["strObservacion"]          = "Producto:".$strNombreProducto." - Descripción del problema: "
                                                         .$strDescripcionProblema;
            $arrayParametros["intTarea"]                = $strTareaId;
            $arrayParametros["strTipoAfectado"]         = "Cliente";
            $arrayParametros["objPunto"]                = $objInfoPunto;
            $arrayParametros["objDepartamento"]         = $objAdmiDepartamento;
            $arrayParametros["strCantonId"]             = $strCantonId;
            $arrayParametros["strEmpresaCod"]           = $intIdEmpresa;
            $arrayParametros["strPrefijoEmpresa"]       = $strPrefijoEmpresa;
            $arrayParametros["strUsrCreacion"]          = $strUsrCreacion;
            $arrayParametros["strIpCreacion"]           = $strIpUsuarioCreacion;
            $arrayParametros["intDetalleSolId"]         = null;
            $arrayParametros["intDepartamentoOrigen"]   = $intIdDepartamentoOrigen;
            $arrayParametros["strIdPersonaAsig"]        = $intIdPersona;
            $arrayParametros["strNombrePersonaAsig"]    = $strNombrePersonaAsignada;
            $arrayParametros["strIdPerRolAsig"]         = $intIdPersonaEmpresaRol;
            $arrayParametros["strBanderaTraslado"]      = "S";
            $arrayParametros["strRegion"]               = $strRegionServicio;
            $arrayParametros["strEstadoActual"]         = "Finalizada";
            $arrayParametros["strAccion"]               = "Finalizada";
            $arrayParametros["asignadoEnDetSeguimiento"]= "Empleado";

            $strNumeroTarea = $serviceCambiarPlanService->crearTareaRetiroEquipoPorDemo($arrayParametros);
            //Consultar el idDetalle de la tarea
            $objInfoComunicacion = $emComunicacion->getRepository('schemaBundle:InfoComunicacion')->find($strNumeroTarea);

            if(is_object($objInfoComunicacion))
            {
               $intIdDetalle = $objInfoComunicacion->getDetalleId();
            }

            //Se cierra porque es una tarea rapida
            $arrayParametrosHist["intDetalleId"]            = $intIdDetalle;
            $arrayParametrosHist["strCodEmpresa"]           = $intIdEmpresa;
            $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
            $arrayParametrosHist["strIpCreacion"]           = $strIpUsuarioCreacion;
            $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamentoOrigen;
            $arrayParametrosHist["strEnviaDepartamento"]    = "";
            $arrayParametrosHist["strOpcion"]               = "Seguimiento";
            $arrayParametrosHist["strObservacion"]          = "Tarea fue Finalizada Obs: Tarea Rapida";
            $arrayParametrosHist["strEstadoActual"]         = "Finalizada";
            $arrayParametrosHist["strAccion"]               = "Finalizada";

            $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            $arrayParametrosHist["strOpcion"] = "Historial";

            $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

             //*************************************************CREACION DE TAREA**********************************************//

             //***********************************************ENVIO DE NOTIFICACION********************************************//

            $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->getOne('PROYECTO_INTEGRACION_FORMULARIO_SOPORTE',
                                                         'TECNICO',
                                                         'FORMULARIO_SOPORTE',
                                                         'DATOS USADOS PARA ENVIO DE CORREO DEL FORMULARIO DE SOPORTE',
                                                         $strNombreProducto,
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         $intIdEmpresa);

            if(isset($arrayValoresParametros["valor2"]) && !empty($arrayValoresParametros["valor2"]))
            {
                $strRemitente       = $arrayValoresParametros["valor2"];// DE
                $strAsunto          = $arrayValoresParametros["valor3"];
                $strCodPlantilla    = $arrayValoresParametros["valor4"];
            }

            //Correos destinatarios
            $arrayCorreoDestinatario = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->get('PROYECTO_INTEGRACION_FORMULARIO_SOPORTE',
                                                         'TECNICO',
                                                         'FORMULARIO_SOPORTE',
                                                         'CORREOS DESTINATARIOS USADOS PARA EL FORMULARIO DE SOPORTE',
                                                         $strNombreProducto,
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         $intIdEmpresa);

            if(isset($arrayCorreoDestinatario) && !empty($arrayCorreoDestinatario))
            {
                foreach($arrayCorreoDestinatario as $arrayCorreo)
                {
                    $arrayTo[] = $arrayCorreo["valor2"];// PARA
                }
            }

            //Agregar correo de contacto en la notificacion
            if(!empty($strCorreoElectronico))
            {
                $arrayTo[] = $strCorreoElectronico;
            }

            $arrayParametrosCorreo = array('ticket'                 => $strTicket,
                                           'nombreCompleto'         => $strNombreCompleto,
                                           'correoElectronico'      => $strCorreoElectronico,
                                           'usuario'                => $strUsuarioECDF,
                                           'tipo'                   => $strTipo,
                                           'marca'                  => $strMarca,
                                           'modelo'                 => $strModelo,
                                           'descripcionProblema'    => $strDescripcionProblema,
                                           'nombreProducto'         => $strNombreProducto);

            $serviceEnvioPlantilla->generarEnvioPlantilla($strAsunto." - ".$strNombreProducto,
                                                              $arrayTo,
                                                              $strCodPlantilla,
                                                              $arrayParametrosCorreo,
                                                              $intIdEmpresa,
                                                              $strCantonId,
                                                              $intIdDepartamentoOrigen,
                                                              null,
                                                              false,
                                                              $strRemitente);
            //Se registra historial del servicio
            if(is_object($objInfoServicio))
            {
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objInfoServicio);
                $objServicioHistorial->setObservacion("Se creo Formulario de soporte - ".$strNombreProducto.", # tarea: ".$strNumeroTarea);
                $objServicioHistorial->setEstado($objInfoServicio->getEstado());
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strIpUsuarioCreacion);
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
            }

            //***********************************************ENVIO DE NOTIFICACION********************************************//

            $boolSuccess = true;
            $strMensaje  = "Formulario generado y enviado con éxito, se creó la tarea # ".$strNumeroTarea;
        }
        catch (\Exception $e)
        {
            $boolSuccess = false;
            $strMensaje  = $e->getMessage();

            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController.crearFormularioSoporteAction',
                                      $e->getMessage(),
                                      $strUsrCreacion,
                                      $strIpUsuarioCreacion
                                     );
        }

        $arrayRespuesta = '{"success":"'.$boolSuccess.'","respuesta":"'.$strMensaje.'"}';

        $objResponse->setContent($arrayRespuesta);

        return $objResponse;
    }

    /**
    * Función que crea un formulario de soporte para los productos_tv (GolTv),
    * para reportear problemas o fallos con el servicio o los equipos
    *
    * @author Daniel Reyes <djreyes@telconet.ec>
    * @version 1.0 11-10-2021
    *
    * @return JsonResponse
    */
    public function crearFormularioL2GolTvAction()
    {
        ini_set('max_execution_time', 600000);

        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/html');
        $objPeticion         = $this->get('request');
        $emGeneral           = $this->getDoctrine()->getManager('telconet_general');
        $emSoporte           = $this->getDoctrine()->getManager('telconet_soporte');
        $emComunicacion      = $this->getDoctrine()->getManager('telconet_comunicacion');
        $emComercial         = $this->getDoctrine()->getManager('telconet');
        $objSession          = $objPeticion->getSession();
        $strNumeroTicket     = $objPeticion->get('numeroTicket')?$objPeticion->get('numeroTicket'):"";
        $strContratoServicio = $objPeticion->get('contratoServicio')?$objPeticion->get('contratoServicio'):"";
        $strNombreCliente    = $objPeticion->get('nombreCliente')?$objPeticion->get('nombreCliente'):"";
        $strCorreo           = $objPeticion->get('correo')?$objPeticion->get('correo'):"";
        $strCelular          = $objPeticion->get('celular')?$objPeticion->get('celular'):"";
        $strPlanContratado   = $objPeticion->get('planContratado')?$objPeticion->get('planContratado'):"";
        $strRecurrente       = $objPeticion->get('recurrente')?$objPeticion->get('recurrente'):"";
        $strPais             = $objPeticion->get('pais')?$objPeticion->get('pais'):"";
        $strContenido        = $objPeticion->get('contenido')?$objPeticion->get('contenido'):"";
        $strDispositivo      = $objPeticion->get('dispositivo')?$objPeticion->get('dispositivo'):"";
        $strResumen          = $objPeticion->get('resumen')?$objPeticion->get('resumen'):"";
        $intIdServicio       = $objPeticion->get('idServicio');
        $strNombreProducto   = $objPeticion->get('nombreProducto')?$objPeticion->get('nombreProducto'):"";
        $intIdEmpresa        = $objSession->get('idEmpresa');
        $strPrefijoEmpresa   = $objSession->get('prefijoEmpresa');
        $intIdPerEmpresaRol  = $objSession->get('idPersonaEmpresaRol');
        $strUsrSesion        = $objSession->get('user');
        $strIpSesion         = $objPeticion->getClientIp();
        $objInfoServicio     = null;
        $intIdDetalle        = "";
        $strMensajeError     = "";
        $serviceUtil           = $this->get('schema.Util');
        $serviceEnvioPlantilla = $this->get('soporte.EnvioPlantilla');
        $serviceSoporte        = $this->get('soporte.SoporteService');
        $servicePlanService    = $this->get('tecnico.InfoCambiarPlan');

        try
        {
            // Verificamos si existe informacion del servicio
            $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!empty($objInfoServicio))
            {
                // ********** CREACION DE TAREA ********** //
                $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('PROYECTO_INTEGRACION_FORMULARIO_SOPORTE',
                                                    'TECNICO',
                                                    'FORMULARIO_SOPORTE',
                                                    'TAREA USADA PARA FORMULARIO DE SOPORTE',
                                                    $strNombreProducto,
                                                    '','','','',
                                                    $intIdEmpresa);
                if(!empty($arrayValoresParametros))
                {
                    $intIdTarea = $arrayValoresParametros["valor3"];
                    $strNombreTarea = $arrayValoresParametros["valor2"];
                }
                // Obtenemos los datos para crear la tarrea
                $strRegionServicio = '';
                $objInfoPunto = $objInfoServicio->getPuntoId();
                if(is_object($objInfoPunto))
                {
                    //verifico el sector
                    $objSector = $objInfoPunto->getSectorId();
                    if(is_object($objSector))
                    {
                        //verifico la parroquia
                        $objParroquia = $objSector->getParroquiaId();
                        if(is_object($objParroquia))
                        {
                            //verifico el canton
                            $objCanton = $objParroquia->getCantonId();
                            if(is_object($objCanton))
                            {
                                $strCantonId       = $objCanton->getId();
                                $strRegionServicio = $objCanton->getRegion();
                            }
                        }
                    }
                }
                $objInfoPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                            ->find($intIdPerEmpresaRol);
                if(is_object($objInfoPersonaEmpresaRol))
                {
                    $objInfoPersona    = $objInfoPersonaEmpresaRol->getPersonaId();
                    $intIdDepartamento = $objInfoPersonaEmpresaRol->getDepartamentoId();

                    if(is_object($objInfoPersona))
                    {
                        $intIdPersona             = $objInfoPersona->getId();
                        $strNombrePersonaAsignada = $objInfoPersona->__toString();
                    }
                }
               $objAdmiDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                            ->find($intIdDepartamento);
                // Creamos la tarea
                $strObservacion = "<b>Producto:</b> ".$strNombreProducto.
                    " - <b>Con el contenido:</b> ".$strContenido.
                    " - <b>Presenta el problema:</b> ".$strResumen;
                $arrayParametros["strObservacion"]         = $strObservacion;
                $arrayParametros["intTarea"]               = $intIdTarea;
                $arrayParametros["strTipoAfectado"]        = "Cliente";
                $arrayParametros["objPunto"]               = $objInfoPunto;
                $arrayParametros["objDepartamento"]        = $objAdmiDepartamento;
                $arrayParametros["strCantonId"]            = $strCantonId;
                $arrayParametros["strEmpresaCod"]          = $intIdEmpresa;
                $arrayParametros["strPrefijoEmpresa"]      = $strPrefijoEmpresa;
                $arrayParametros["strUsrCreacion"]         = $strUsrSesion;
                $arrayParametros["strIpCreacion"]          = $strIpSesion;
                $arrayParametros["intDetalleSolId"]        = null;
                $arrayParametros["intDepartamentoOrigen"]  = $intIdDepartamento;
                $arrayParametros["strIdPersonaAsig"]       = $intIdPersona;
                $arrayParametros["strNombrePersonaAsig"]   = $strNombrePersonaAsignada;
                $arrayParametros["strIdPerRolAsig"]        = $intIdPerEmpresaRol;
                $arrayParametros["strBanderaTraslado"]     = "N";
                $arrayParametros["strRegion"]              = $strRegionServicio;
                $strNumeroTarea = $servicePlanService->crearTareaRetiroEquipoPorDemo($arrayParametros);

                // Verificamos se creara la tarea y procedemos a cerrarla por ser una tarea rapida
                if (!empty($strNumeroTarea))
                {
                    $objInfoComunicacion = $emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                        ->find($strNumeroTarea);
                    $intIdDetalle = $objInfoComunicacion->getDetalleId();

                    // Se cierra la tarea
                    $arrayParametrosHist["intDetalleId"]            = $intIdDetalle;
                    $arrayParametrosHist["strCodEmpresa"]           = $intIdEmpresa;
                    $arrayParametrosHist["strUsrCreacion"]          = $strUsrSesion;
                    $arrayParametrosHist["strIpCreacion"]           = $strIpSesion;
                    $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
                    $arrayParametrosHist["strEnviaDepartamento"]    = "";
                    $arrayParametrosHist["strOpcion"]               = "Seguimiento";
                    $arrayParametrosHist["strObservacion"]          = "Se finaliza la tarea de manera automática.";
                    $arrayParametrosHist["strEstadoActual"]         = "Finalizada";
                    $arrayParametrosHist["strAccion"]               = "Finalizada";
                    $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                    $arrayParametrosHist["strOpcion"] = "Historial";
                    $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                    // ********** ENVIO DE NOTIFICACION ********** //
                    $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('PROYECTO_INTEGRACION_FORMULARIO_SOPORTE',
                                                    'TECNICO',
                                                    'FORMULARIO_SOPORTE',
                                                    'DATOS USADOS PARA ENVIO DE CORREO DEL FORMULARIO DE SOPORTE',
                                                    $strNombreProducto,
                                                    '','','','',
                                                    $intIdEmpresa);

                    if(!empty($arrayValoresParametros))
                    {
                        $strRemitente = $arrayValoresParametros["valor2"];
                        $strAsunto    = $arrayValoresParametros["valor3"];
                        $strPlantilla = $arrayValoresParametros["valor4"];
                    }

                    // Acceder a los correos guardados
                    $arrayCorreoDestinatario = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PROYECTO_INTEGRACION_FORMULARIO_SOPORTE',
                                                    'TECNICO',
                                                    'FORMULARIO_SOPORTE',
                                                    'CORREOS DESTINATARIOS USADOS PARA EL FORMULARIO DE SOPORTE',
                                                    $strNombreProducto,
                                                    '','','','',
                                                    $intIdEmpresa);

                    if(isset($arrayCorreoDestinatario) && !empty($arrayCorreoDestinatario))
                    {
                        foreach( $arrayCorreoDestinatario as $arrayCorreo)
                        {
                            $strDestinatarios[] = $arrayCorreo['valor2'];
                        }
                    }

                    $arrayParametrosCorreo = array('numeroTicket' => $strNumeroTicket,
                                            'contratoServicio'     => $strContratoServicio,
                                            'nombreCliente'        => $strNombreCliente,
                                            'correo'               => $strCorreo,
                                            'celular'              => $strCelular,
                                            'planContratado'       => $strPlanContratado,
                                            'recurrente'           => $strRecurrente,
                                            'pais'                 => $strPais,
                                            'contenido'            => $strContenido,
                                            'dispositivo'          => $strDispositivo,
                                            'resumen'              => $strResumen,
                                            'nombreProducto'       => $strNombreProducto);
                    $serviceEnvioPlantilla->generarEnvioPlantilla($strAsunto,
                                            $strDestinatarios,
                                            $strPlantilla,
                                            $arrayParametrosCorreo,
                                            $intIdEmpresa,
                                            '','',
                                            null,
                                            false,
                                            $strRemitente);

                    // ********** REGISTRA EL HISTORIAL DE LA ACTIVIDAD ********** //
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objInfoServicio);
                    $objServicioHistorial->setObservacion("Se creo Formulario de soporte - ".$strNombreProducto.", # tarea: ".$strNumeroTarea);
                    $objServicioHistorial->setEstado($objInfoServicio->getEstado());
                    $objServicioHistorial->setUsrCreacion($strUsrSesion);
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($strIpSesion);
                    $emComercial->persist($objServicioHistorial);
                    $emComercial->flush();

                    // Desarrollo para oporte de 2do nivel golTv
                    $boolSuccess = true;
                    $strMensaje  = "Formulario generado y enviado con éxito, se creó la tarea # ".$strNumeroTarea;
                }
                else
                {
                    $boolSuccess = false;
                    $strMensaje  = "Problemas para crear tarea para el formulario";
                }
            }
            else
            {
                $boolSuccess = false;
                $strMensaje  = "No posee un servicio para generar formulario";
            }
        }
        catch (\Exception $e)
        {
            $boolSuccess = false;
            $strMensaje  = "Se presento un error en la creación del Formulario";
            $serviceUtil->insertError('Telcos+',
                            'InfoServicioController.crearFormularioL2GolTvAction',
                            $e->getMessage(),
                            $strUsrSesion,
                            $strIpSesion
            );
        }
        $arrayRespuesta = '{"success":"'.$boolSuccess.'","respuesta":"'.$strMensaje.'"}';
        $objResponse->setContent($arrayRespuesta);
        return $objResponse;
    }

    /**
     * 
     * cancelarClienteAction - función que cancela el servicio al ciente
     *
     * @author Desarrollo Inicial
     * @version 1.0
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 01-09-2017 -  Se obtiene el departamento de session
     *
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.2 26-12-2017 - Se realiza ajuste en cuanto a prefijo empresa y id empresa para el producto de TN "INTERNET SMALL BUSINESS".
     * 
     * @author Edgar Holguín <rcoello@telconet.ec>
     * @version 1.3 13-09-2018 - Se agrega funcionalidad fara facturación por cancelación voluntaria.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 01-12-2018 - Se agrega programación para verificar si el plan tiene incluido un producto McAfee y proceder con la cancelación
     * 
     * @author Jesús Banchen <jbanchen@telconet.ec>
     * @version 1.5 28-03-2019 - Se agregan validaciones para gestionar los productos de la empresa TNG
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 07-08-2019 - Se modifica validación para permitir realizar la cancelación de los servicios I. PROTEGIDO MULTI PAID con
     *                            licencias Kaspersky
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 18-02-2020 - Se agrega la inactivación de la información referente al corte de un servicio de MD al realizar la cancelación
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 15-05-2020 - Se regulariza cambio en caliente por error al realizar una cancelación voluntaria
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.9 28-09-2021 - Se agrega el flujo para la facturacion del producto EL CANAL DEL FUTBOL al ejecutar la cancelacion voluntaria.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 01-08-2022 - Se agregan nuevos parámetros intIdOficina y strPrefijoEmpresaOrigen para la cancelación
     *                           de los servicios adicionales del servicio principal INTERNET VPNoGPON.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 2.1 07-09-2022 - Se agregan nuevos parametros que se envian al proceso de Cancelación Voluntaria strCreaNC , arrayGeneralDescuentos,
     *                           arrayGeneralProdFacturar. 
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 2.2 28-02-2023 - Se Agrega Bandera Ecuanet para que permita actualizar información de corte y cancelación.
     */
    public function cancelarClienteAction(){
        
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        ini_set('max_execution_time', 3000000);
        $objJsonResponse    = new JsonResponse();
        
        $objRequest         =  $this->get('request');
        $serviceUtil        =  $this->get('schema.Util');
        $strFacturar        =  $objRequest->get('strFacturaCancelacion');
        $objSession         =  $objRequest->getSession();
        $intIdEmpresa       =  $objSession->get('idEmpresa');
        $strPrefijoEmpresa  =  $objSession->get('prefijoEmpresa');
        $intIdProducto      =  $objRequest->get('idProducto');
        $em                 =  $this->get('doctrine')->getManager('telconet');
        $emGeneral          =  $this->getDoctrine()->getManager('telconet_general');
        $emInfraestructura  =  $this->getDoctrine()->getManager('telconet_infraestructura');
        
        
        $objAdmiProducto = $em->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
       
        if(is_object($objAdmiProducto))
        {
            //Se obtienen la ultimas milla correspondiente al producto INTERNET SMALL BUSINESS para TN.
            $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('PRODUCTOS_ESPECIALES_UM', 
                                                     'COMERCIAL', 
                                                     '', 
                                                     '', 
                                                     $objAdmiProducto->getNombreTecnico(),
                                                     '', 
                                                     '', 
                                                     '', 
                                                     '', 
                                                     $intIdEmpresa);

            if( $arrayParametrosDet && count($arrayParametrosDet) > 0 )
            {
                 if(isset($arrayParametrosDet['valor2']) && !empty($arrayParametrosDet['valor2']))
                 {
                    $strPrefijoEmpresa =  $arrayParametrosDet['valor3'];
                 }
            }    
        }
 
        $arrayPeticiones=array( 'intIdDepartamento'     => $objSession->get('idDepartamento'),
                                'idEmpresa'             => $intIdEmpresa,
                                'prefijoEmpresa'        => $strPrefijoEmpresa,
                                'idServicio'            => $objRequest->get('idServicio'),
                                'idProducto'            => $objRequest->get('idProducto'),
                                'motivo'                => $objRequest->get('motivo'),
                                'perfil'                => $objRequest->get('perfil'),
                                'login'                 => $objRequest->get('login'),
                                'capacidad1'            => $objRequest->get('capacidad1'),
                                'capacidad2'            => $objRequest->get('capacidad2'),
                                'idAccion'              => $objRequest->get('idAccion'),
                                'usrCreacion'           => $objSession->get('user'),
                                'ipCreacion'            => $objRequest->getClientIp(),
                                'idPersonaEmpresaRol'   => $objSession->get('idPersonaEmpresaRol'),
                                'intIdOficina'          => $objSession->get('idOficina'),
                                'strPrefijoEmpresaOrigen' => $objSession->get('prefijoEmpresa'),
                                );

        /* @var $objCancelarServicioService InfoCancelarServicio */
        $objCancelarServicioService = $this->get('tecnico.InfoCancelarServicio');
        //*----------------------------------------------------------------------*/  
        
        if ($strPrefijoEmpresa == "TNG")
        { 
            $arrayRespuesta = $objCancelarServicioService->cancelarServicioTng($arrayPeticiones);
        }
        else
        {
            $arrayRespuesta = $objCancelarServicioService->cancelarServicio($arrayPeticiones);
        }
        $strStatus  = $arrayRespuesta[0]['status'];
        $strMensaje = $arrayRespuesta[0]['mensaje'];       
        
        if(($strPrefijoEmpresa === "MD" || $strPrefijoEmpresa === "EN") && $arrayRespuesta[0]['status'] === 'OK')
        {
            $strStatusActualizaInformacionInCorte   = str_repeat(' ', 5);
            $strMensajeActualizaInformacionInCorte  = str_repeat(' ', 4000);
            $intIdUltHistoInCorte                   = null;
            $strProcesoHistoInCorte                 = "CANCELACION";
            $strObservacionUltHistoInCorte          = "";
            try
            {
                $strSql                 = "BEGIN INFRK_TRANSACCIONES.P_ACTUALIZA_INFORMACION_CORTE(:intIdServicio, :intIdUltHistoInCorte, "
                                                                                                . ":strProceso, :strObservacion, "
                                                                                                . ":strUsrCreacion, :strIpCreacion, "
                                                                                                . ":strStatus, :strMensaje); END;";
                $objStmt                = $emInfraestructura->getConnection()->prepare($strSql);
                $objStmt->bindParam('intIdServicio', $objRequest->get('idServicio'));
                $objStmt->bindParam('intIdUltHistoInCorte', $intIdUltHistoInCorte);
                $objStmt->bindParam('strProceso', $strProcesoHistoInCorte);
                $objStmt->bindParam('strObservacion', $strObservacionUltHistoInCorte);
                $objStmt->bindParam('strUsrCreacion', $objSession->get('user'));
                $objStmt->bindParam('strIpCreacion', $objRequest->getClientIp());
                $objStmt->bindParam('strStatus', $strStatusActualizaInformacionInCorte);
                $objStmt->bindParam('strMensaje', $strMensajeActualizaInformacionInCorte);
                $objStmt->execute();
                if($strStatusActualizaInformacionInCorte === "ERROR")
                {
                    $strMensaje = $strMensaje . "<br />" . $strMensajeActualizaInformacionInCorte;
                }
            }
            catch (\Exception $e)
            {
                $strMensaje = $strMensaje . "<br>" ."No se ha podido inactivar la información de corte";
                error_log("Error al inactivar la información de corte ".$e->getMessage());
            }
        }
        
        if($strPrefijoEmpresa === "MD" && $arrayRespuesta[0]['status'] === 'OK'
            && !empty($arrayRespuesta[0]['arrayRespuestaProdsAdicionales']))
        {
            $arrayRespuestaProdsAdicionales = $arrayRespuesta[0]['arrayRespuestaProdsAdicionales'];
            if($arrayRespuestaProdsAdicionales["status"] === "OK" 
                && ((!empty($arrayRespuestaProdsAdicionales["arrayInfoClienteMcAfee"]) 
                        && $arrayRespuestaProdsAdicionales["strTieneSuscriberId"] === "NO")
                    || $arrayRespuestaProdsAdicionales["strTieneSuscriberId"] === "SI"))
            {
                $arrayParamsCancelarProdsAdicEnPlan = array(
                                                            "intIdServicio"             => $objRequest->get('idServicio'),
                                                            "arrayInfoClienteMcAfee"    => $arrayRespuestaProdsAdicionales["arrayInfoClienteMcAfee"],
                                                            "strTieneSuscriberId"       => $arrayRespuestaProdsAdicionales["strTieneSuscriberId"],
                                                            "intSuscriberId"            => $arrayRespuestaProdsAdicionales["intSuscriberId"],
                                                            "strCorreoSuscripcion"      => $arrayRespuestaProdsAdicionales["strCorreoSuscripcion"],
                                                            "strCodEmpresa"             => $intIdEmpresa,
                                                            "strUsrCreacion"            => $objSession->get('user'),
                                                            "strClientIp"               => $objRequest->getClientIp());
                $arrayRespuestaIPMP = $objCancelarServicioService->cancelarProductosAdicionalesEnPlan($arrayParamsCancelarProdsAdicEnPlan);
                if($arrayRespuestaIPMP["status"] === "ERROR")
                {
                    $strMensaje = $strMensaje . "<br />" . $arrayRespuestaIPMP["mensaje"];
                }
            }
        }
        if( $strPrefijoEmpresa != 'TNG')
        {
            if($strFacturar==='S' && $strStatus === 'OK' )
            { 
                $arrayParamsFacturarion = array( 'intIdServicio'           => $objRequest->get('idServicio'),
                                                 'floatSubtotal'           => $objRequest->get('floatSubtotal'),
                                                 'floatEquipos'            => $objRequest->get('floatEquipos'),
                                                 'floatInstalacion'        => $objRequest->get('floatInstalacion'),                
                                                 'floatSubtotalnc'         => $objRequest->get('floatSubtotalnc'),
                                                 'strCaracteristicas'      => $objRequest->get('strCaracteristicas'),
                                                 'strIpCliente'            => $objRequest->getClientIp(),
                                                 'strEmpresaCod'           => $objSession->get('idEmpresa'),
                                                 'strUsrCreacion'          => $objSession->get('user'),
                                                 'strPrefijoEmpresa'       => $strPrefijoEmpresa,
                                                 'intIdPersonaEmpresaRol'  => $objSession->get('idPersonaEmpresaRol'),
                                                 'serviceUtil'             => $serviceUtil,
                                                 'floatSubtotalNDI'        => $objRequest->get('floatSubtotalNDI'),
                                                 'strCreaNC'               => $objRequest->get('strCreaNC'),
                                                 'arrayGeneralDescuentos'  => $objRequest->get('arrayGeneralDescuentos'),
                                                 'arrayGeneralProdFacturar'=> $objRequest->get('arrayGeneralProdFacturar')
                                               );
                $objCancelarServicioService->ejecutarFacturacionCancelacion($arrayParamsFacturarion);  

            }
        
            $arrayParamsHistorialFact = array( 'intIdServicio'  => $objRequest->get('idServicio'),
                                               'intIdMotivo'    => $objRequest->get('motivoCancelacion'),
                                               'strObservacion' => $objRequest->get('observacion'),
                                               'strEmpresaCod'  => $objSession->get('idEmpresa'),
                                               'strUsrCreacion' => $objSession->get('user'),
                                               'strIpCliente'   => $objRequest->getClientIp(),
                                               'serviceUtil'    => $serviceUtil,
                                               'strFacturable'  => $strFacturar,            
                                             );

            $objCancelarServicioService->addHistorialFacturacion($arrayParamsHistorialFact);
        }
        $objJsonResponse->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
         
        return $objJsonResponse;
    }
    
    /**
     * Controlador que sirve para llamar al service que crea el cacti para el cliente
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 14-06-2016
     */
    public function crearCactiAction()
    {
        ini_set('max_execution_time', 800000);
        $respuesta   = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion    = $this->get('request');
        $session     = $peticion->getSession();
        $idServicio  = $peticion->get('idServicio');
        
        /* @var $activacion InfoActivarPuertoService */
        $activacion = $this->get('tecnico.InfoActivarPuerto');
        //---------------------------------------------------------------------*/
        
        $arrayParametros = array(
                                    'idServicio'            => $idServicio,
                                    'idPersonaEmpresaRol'   => $peticion->get('idPersonaEmpresaRol'),
                                    'idEmpresa'             => $session->get('idEmpresa'),
                                    'usrCreacion'           => $session->get('user'),
                                    'ipCreacion'            => $peticion->getClientIp()
                                );
        
        //COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)-------------------------*/
        $respuestaArray = $activacion->crearCacti($arrayParametros);
        //----------------------------------------------------------------------*/
        
        return $respuesta->setContent($respuestaArray['mensaje']);
    }
   
    public function ajaxReactivarClienteTNAction()
    {
        ini_set('max_execution_time', 3000000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/plain');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        
        $arrayParametros = array(                               
                                'usrCreacion'           => $session->get('user'),
                                'idServicio'            => $peticion->get('idServicio'),
                                'idProducto'            => $peticion->get('idProducto'),
                                'idAccion'              => $peticion->get('idAccion'),
                                'capacidadUno'          => $peticion->get('capacidad1'),
                                'capacidadDos'          => $peticion->get('capacidad2'),
                                'vlan'                  => $peticion->get('vlan'),
                                'anillo'                => $peticion->get('anillo'),
                                'mac'                   => $peticion->get('mac'),
                                'ipCreacion'            => $peticion->getClientIp(),
                                //valores para activar L3MPLS
                                'loginAux'                => $peticion->get('loginAux'),
                                'tipoEnlace'              => $peticion->get('tipoEnlace'),
                                'elementoPadre'           => $peticion->get('elementoPadre'),
                                'elementoNombre'          => $peticion->get('elementoNombre'),
                                'anillo'                  => $peticion->get('anillo'),
                                'interfaceElementoNombre' => $peticion->get('interfaceElementoNombre'),
                                'ipServicio'              => $peticion->get('ipServicio'),
                                'subredServicio'          => $peticion->get('subredServicio'),
                                'gwSubredServicio'        => $peticion->get('gwSubredServicio'),
                                'mascaraSubredServicio'   => $peticion->get('mascaraSubredServicio'),
                                'defaultGateway'          => $peticion->get('defaultGateway'),
                                'protocolo'               => $peticion->get('protocolo'),
                                'asPrivado'               => $peticion->get('asPrivado'),
                                'vrf'                     => $peticion->get('vrf'),
                                'rdId'                    => $peticion->get('rdId'),
                                'vlan'                    => $peticion->get('vlan'),
                                'mac'                     => $peticion->get('mac'),
                                'capacidadUno'            => $peticion->get('capacidad1'),
                                'capacidadDos'            => $peticion->get('capacidad2')                                
                              );
        
        $reconectarService = $this->get('tecnico.InfoReconectarServicio');
        
        $strRespuesta = $reconectarService->reactivarServicioTN($arrayParametros);        
        
        return $respuesta->setContent($strRespuesta[0]['mensaje']);
    }    

     /**
     * ajaxCancelarServicioAction - función que cancela el servicio al ciente
     *
     * @author Desarrollo Inicial
     * @version 1.0
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 01-09-2017 -  Se obtiene el departamento de session
     */    
    public function ajaxCancelarServicioAction()
    {
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        ini_set('max_execution_time', 3000000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();

        $arrayPeticiones=array( 'intIdDepartamento'     => $session->get('idDepartamento'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'usrCreacion'           => $session->get('user'),
                                'idServicio'            => $peticion->get('idServicio'),
                                'idProducto'            => $peticion->get('idProducto'),
                                'motivo'                => $peticion->get('idMotivo'),
                                'idAccion'              => $peticion->get('idAccion'),
                                'ipCreacion'            => $peticion->getClientIp(),
                                'idPersonaEmpresaRol'   => $session->get('idPersonaEmpresaRol')
                                );
        
        /* @var $cancelar InfoCancelarServicio */
        $cancelar = $this->get('tecnico.InfoCancelarServicio');
        //*----------------------------------------------------------------------*/
        
        $respuestaArray = $cancelar->cancelarServicio($arrayPeticiones);        

        return $respuesta->setContent($respuestaArray['mensaje']);
    }
        
     /**
     * Metodo utilizado para realizar cancelaciones de servicios para la empresa Telconet
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - Se modifica para agregar variable que indica si un servicio es pseudope o normal
     * @since 22-11-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 - Se agrega operacion ternaria para determina si un servicio es pseudope o no con las variables enviadas como S o N
     * @since 07-02-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 03-04-2018 Se envía el código de la empresa como parámetro
     * 
     * @since 1.0
     * 
     * @return type
     */
    public function ajaxCancelarClienteTNAction()
    {
        ini_set('max_execution_time', 3000000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/plain');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        
        $strEsPseudoPe   = $peticion->get('esPseudoPe')?$peticion->get('esPseudoPe'):'N';
        
        $arrayParametros = array(
                                'idEmpresa'             => $session->get('idEmpresa'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'usrCreacion'           => $session->get('user'),
                                'idServicio'            => $peticion->get('idServicio'),
                                'idProducto'            => $peticion->get('idProducto'),
                                'idMotivo'              => $peticion->get('idMotivo'),
                                'idAccion'              => $peticion->get('idAccion'),
                                'vlan'                  => $peticion->get('vlan'),
                                'mac'                   => $peticion->get('mac'),
                                'anillo'                => $peticion->get('anillo'),
                                'capacidadUno'          => $peticion->get('capacidadUno'),
                                'capacidadDos'          => $peticion->get('capacidadDos'),
                                'ipCreacion'            => $peticion->getClientIp(),
                                'idPersonaEmpresaRol'   => $session->get('idPersonaEmpresaRol')                              
                              );
        
        $cancelar = $this->get('tecnico.InfoCancelarServicio');
        
        if($strEsPseudoPe == 'N')
        {
            $strRespuesta = $cancelar->cancelarServicioTn($arrayParametros);
        }
        else
        {
            $strRespuesta = $cancelar->cancelarServicioPseudoPe($arrayParametros);
        }
                        
        return $respuesta->setContent($strRespuesta[0]['mensaje']);
    }
    
    public function ajaxCortarClienteTNAction()
    {
        ini_set('max_execution_time', 3000000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/plain');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        
        $arrayParametros = array(                                                               
                                'idServicio'            => $peticion->get('idServicio'),
                                'idProducto'            => $peticion->get('idProducto'),
                                'idMotivo'              => $peticion->get('idMotivo'),
                                'idAccion'              => $peticion->get('idAccion'),
                                'vlan'                  => $peticion->get('vlan'),
                                'mac'                   => $peticion->get('mac'),
                                'anillo'                => $peticion->get('anillo'),
                                'capacidadUno'          => $peticion->get('capacidadUno'),
                                'capacidadDos'          => $peticion->get('capacidadDos'),
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $peticion->getClientIp()
                              );
        
        /* @var $cortar InfoCortarServicio */
        $cortar = $this->get('tecnico.InfoCortarServicio');
        
        $strRespuesta = $cortar->cortarServicioTN($arrayParametros);        
        
        return $respuesta->setContent($strRespuesta[0]['mensaje']);
    }    
    /**
     * Funcion que sirve para reconectar Servicios de cualquier
     * ultima Milla
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 6-5-2015
     * @since 1.0
     * 
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.2 13-12-2017 - Se realiza ajuste en cuanto a prefijo empresa y id empresa para el producto de TN "INTERNET SMALL BUSINESS".
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 23-05-2018 - Se elimina cambio del id de la empresa para servicios Small Business
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 28-11-2018 - Se agregan validaciones para gestionar los productos de la empresa TNP
     * @since 1.3
     * 
     * @author Jesús Banchen <jbanchen@telconet.ec>
     * @version 1.5 28-03-2019 - Se agregan validaciones para gestionar los productos de la empresa TNG
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 07-10-2019 Se modifica la forma de retornar respuesta de proceso
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 15-05-2020 Se modifica el nombre del parámetro mensaje devuelto de la función reconectarServicio
     * 
     */
    public function reconectarClienteAction()
    {
        ini_set('max_execution_time', 650000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        $intIdEmpresa       =  $session->get('idEmpresa');
        $strPrefijoEmpresa  =  $session->get('prefijoEmpresa');
        $intIdProducto      =  $peticion->get('idProducto');
        $em                 =  $this->get('doctrine')->getManager('telconet');
        $emGeneral          =  $this->getDoctrine()->getManager('telconet_general');
        $strEsIsb           = 'NO';
        $strEstaInaudit     =  $peticion->get('estaInaudit');  
        $objAdmiProducto = $em->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
        
        if(is_object($objAdmiProducto))
        {
            //Se obtienen la ultimas milla correspondiente al producto INTERNET SMALL BUSINESS para TN.
            $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('PRODUCTOS_ESPECIALES_UM', 
                                                     'COMERCIAL', 
                                                     '', 
                                                     '', 
                                                     $objAdmiProducto->getNombreTecnico(),
                                                     '', 
                                                     '', 
                                                     '', 
                                                     '', 
                                                     $intIdEmpresa);

            if( $arrayParametrosDet && count($arrayParametrosDet) > 0 )
            {
                if(isset($arrayParametrosDet['valor2']) && !empty($arrayParametrosDet['valor2']))
                {
                    if ($strPrefijoEmpresa != 'TNP')
                    {
                         $strPrefijoEmpresa =  $arrayParametrosDet['valor3'];
                    }
                   $strEsIsb          =  'SI';
                }
            }    
        }
        
        $arrayPeticiones=array(
                                'idEmpresa'                     => $intIdEmpresa,
                                'prefijoEmpresa'                => $strPrefijoEmpresa,
                                'idServicio'                    => $peticion->get('idServicio'),
                                'idProducto'                    => $peticion->get('idProducto'),
                                'usrCreacion'                   => $session->get('user'),
                                'ipCreacion'                    => $peticion->getClientIp(),
                                'idAccion'                      => $peticion->get('idAccion'),
                                'strEsIsb'                      => $strEsIsb,
                                'strEstaInaudit'                => $strEstaInaudit                
                                );
        
        /* @var $reconectar InfoReconectarServicio */
        $serviceReconectar = $this->get('tecnico.InfoReconectarServicio');
        //*----------------------------------------------------------------------*/
        $strRetornaRespuesta = "";
        if ($strPrefijoEmpresa == "TNG")
        {
            $arrayRespuesta         = $serviceReconectar->reconectarServicioTng($arrayPeticiones);
            $strRetornaRespuesta    = $arrayRespuesta[0]['mensaje'];
        }
        else
        {
            $arrayRespuesta         = $serviceReconectar->reconectarServicio($arrayPeticiones);
            $strRetornaRespuesta    = $arrayRespuesta[0]['status'] ;
            if ($strRetornaRespuesta != "OK")
            {
                $strRetornaRespuesta = $arrayRespuesta[0]['mensaje'];
            }
        }
        return $respuesta->setContent($strRetornaRespuesta);

    }
    
    /**
     * cambioVelocidadAction
     * 
     * Funcion que sirve para ejecutar cambio de planes MD
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 23-02-2017     Se agregan parametros utilizados en proceso de cambio de planes que incluyen productos SmartWifi
     * @since 1.0
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 01-09-2017 -  Se obtiene el departamento de session
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 05-03-2018 - Se agrega el envío del parámetro para conocer si es un servicio Internet Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 11-06-2018 - Se agrega el envío del nuevo valor de las ips adicionales de acuerdo a la velocidad del cambio de plan
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 03-08-2018 - Se agrega el envío de las capacidades del plan actual que se desea cambiar
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 16-07-2020 - Se modifica el retorno de la función para mostrar el respectivo mensaje de error obtenido del cambio de plan
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.7 04-12-2020 - Se realiza la llamada al método que valida los planes de suspension.
     * 
     * @author Katherine Yager <kyager@telconet.ec>
     * @version 1.8 02-09-2020 - Se modifica función para que realice el llamado a service y ejecute el mapeo de promociones por cambio de plan.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.7 26-10-2020 - Se agrega nuevo parámetro utilizado para verificación de Ip Fija Wan en planes Pyme
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.8 03-03-2021 - Se agrega nuevo parámetro para validar si ippc solicita cableado ethernet
     * 
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 1.9 28-04-2023 - Se agrega un nuevo parametro "motivo" para cambio de plan y envio de adendum por cambio de plan.
     */
    public function cambioVelocidadAction()
    {
        ini_set('max_execution_time', 900000);
        $objJsonResponse    = new JsonResponse();
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $intIdDepartamento  = $objSession->get('idDepartamento');
        $serviceUtil        = $this->get('schema.Util');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
        $emGeneral          = $this->getDoctrine()->getManager("telconet_general");

        $arrayPeticiones    = array(
                                'idEmpresa'                 => $objSession->get('idEmpresa'),
                                'intIdDepartamento'         => $intIdDepartamento,
                                'prefijoEmpresa'            => $objSession->get('prefijoEmpresa'),
                                'idServicio'                => $objRequest->get('idServicio'),
                                'planId'                    => $objRequest->get('planId'),
                                'precioNuevo'               => $objRequest->get('precioNuevo'),
                                'precioViejo'               => $objRequest->get('precioViejo'),
                                'capacidad1'                => $objRequest->get('capacidad1'),
                                'capacidad2'                => $objRequest->get('capacidad2'),
                                'capacidad1Actual'          => $objRequest->get('capacidad1Actual'),
                                'capacidad2Actual'          => $objRequest->get('capacidad2Actual'),
                                'usrCreacion'               => $objSession->get('user'),
                                'ipCreacion'                => $objRequest->getClientIp(),
                                'intIdPersonaEmpRol'        => $objSession->get('idPersonaEmpresaRol'),
                                'intIdOficina'              => $objSession->get('idOficina'),
                                'velocidadNueva'            => $objRequest->get('velocidadNueva'),
                                'velocidadAnterior'         => $objRequest->get('velocidadAnterior'),
                                'esIsb'                     => $objRequest->get('esIsb'),
                                'precioNuevoIp'             => $objRequest->get('precioNuevoIp'),
                                'strConservarIp'            => $objRequest->get('strConservarIp'),
                                'ippcSolicita'              => $objRequest->get('ippcSolicita'),
                                'motivo'                    => $objRequest->get('motivo'),
                              );
        /* @var $serviceCambioPlan InfoCambiarPlan */
        $serviceCambioPlan = $this->get('tecnico.InfoCambiarPlan');

        $arrayValidaPlanSuspension = $serviceCambioPlan->validaPlanSuspension(
                array('intIdPlanNuevo'    => $objRequest->get('planId'),
                      'strPrefijoEmpresa' => $objSession->get('prefijoEmpresa'),
                      'intIdServicio'     => $objRequest->get('idServicio')));

        if (isset($arrayValidaPlanSuspension['status']) && $arrayValidaPlanSuspension['status'] === 'ERROR')
        {
            $objJsonResponse->setData($arrayValidaPlanSuspension);
            return $objJsonResponse;
        }

        //*----------------------------------------------------------------------*/      
        $intPlanIdViejo = $serviceCambioPlan->getPlanActualServicio($objRequest->get('idServicio'))->getId();
        $arrayRespuestaCambioPlan = $serviceCambioPlan->cambiarPlan($arrayPeticiones);
        if(isset($arrayRespuestaCambioPlan[0]) && !empty($arrayRespuestaCambioPlan[0]))
        {
            $strStatus  = $arrayRespuestaCambioPlan[0]["status"];
            $strMensaje = $arrayRespuestaCambioPlan[0]["mensaje"];
            if($strMensaje == "NO EXISTE PERFIL")
            {
                $strMensaje = "No existe el perfil, favor revisar!";
            }
            else if($strMensaje == "NO EXISTE TAREA")
            {
                $strMensaje = "No existe la relacion Tarea-Accion, favor revisar!";
            }
            else if($strMensaje == "PRECIO ANTERIOR DEBE SER MENOR AL NUEVO")
            {
                $strMensaje = "El nuevo precio tiene que se mayor al actual!";
            }
            else if($strMensaje == "NO SE PUDO ACTIVAR EL PLAN NUEVO")
            {
                $strMensaje = "No se Cambio el Plan del Cliente, problemas en la Ejecucion del Script!";
            }
            
            // Si se procedió con el cambio de plan, se ejecutan los procesos promocionales de cambio de plan.
            if($strStatus == "OK")
            {
                $serviceUtil->insertError('Telcos+', 
                                          'InfoServicioController.cambioVelocidadAction', 
                                          'Se inicia ejecución del proceso: P_CAMBIO_PLAN_INDIVIDUAL, ID_SERVICIO: '.$objRequest->get('idServicio'),
                                          $objSession->get('user'), 
                                          $objRequest->getClientIp()
                                         );
                $arrayNotificacionCambioPlan = array('strCodigoMens'      => $objRequest->get('strCodigoMens'),
                                                     'strIdTipoPromoMens' => $objRequest->get('idTipoPromoMens'),
                                                     'intIdServicio'      => $objRequest->get('idServicio'),
                                                     'intIdEmpresa'       => $objSession->get('idEmpresa'),
                                                     'precioViejo'        => $objRequest->get('precioViejo'),
                                                     'planId'             => $objRequest->get('planId'),
                                                     'planIdViejo'        => $intPlanIdViejo,
                                                     'strPrefijoEmpresa'  => $strPrefijoEmpresa,
                                                     'strMensaje'         => $strMensaje
                                                    );
                $arrayRespuestaNotificacionCP = $serviceCambioPlan->enviarNotificacionCambioPlan($arrayNotificacionCambioPlan);
                $strStatus  = $arrayRespuestaNotificacionCP['status'];
                $strMensaje = $arrayRespuestaNotificacionCP['mensaje'];
            }
        }
        else
        {
            $strStatus  = "ERROR";
            $strMensaje = "No se ha podido ejecutar el cambio de plan";
        }
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
        
    }

    /**
     * consultarEmpresaCambioPlan
     * 
     * Funcion que sirve para consultar empresa que realiza cambio de plan, mostrar combobox motivo en pantalla de cambio de plan.
     * 
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 1.0 28-04-2023
     * @since 1.0
     *
     */
    public function consultarEmpresaCambioPlanAction()
    {
        ini_set('max_execution_time', 900000);
        $objJsonResponse    = new JsonResponse();
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $serviceUtil        = $this->get('schema.Util');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
        $emGeneral          = $this->getDoctrine()->getManager("telconet_general");

        if (is_object($emGeneral) && isset($emGeneral))
        {
            $objParametroCambioPlan   = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')->findOneBy(
                array('nombreParametro' => 'REGULARIZACION_CAMBIO_DE_PLAN',
                    'estado'          => 'Activo'));
            if(is_object($objParametroCambioPlan))
            {
                $objMotivoCambioDePlan     = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findOneBy(
                    array("parametroId" => $objParametroCambioPlan->getId(),
                        "valor1"      => "EMPRESA_MOTIVO_SHOW",
                        "valor2"      => $strPrefijoEmpresa,
                        "estado"      => "Activo"));
                if(is_object($objMotivoCambioDePlan))
                {
                    if ($objMotivoCambioDePlan->getValor3() == "SI" )
                    {
                        $strStatus  = $objMotivoCambioDePlan->getValor3();
                        $strMensaje = "Motivo cambio de plan configurado para la empresa ".$strPrefijoEmpresa;
                    }
                    else
                    {
                        $strStatus  = "ERROR";
                        $strMensaje = "Empresa no configurada para mostrar motivo de cambio de plan ".$strPrefijoEmpresa;
                    }
                }
                else
                {
                    $strStatus  = "ERROR";
                    $strMensaje = "No se ha encontrado informacion del detalle de parametros para la empresa".$strPrefijoEmpresa;
                }
            }
            else
            {
                $strStatus  = "ERROR";
                $strMensaje = "No se ha encontrado informacion de la consulta de los parametros para la empresa ".$strPrefijoEmpresa;    
            }
        }
        else
        {
            $strStatus  = "ERROR";
            $strMensaje = "No se ha podido establecer conexion para consultar la informacion de la empresa ".$strPrefijoEmpresa;
        }

        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    
    public function cambiarPuertoClienteAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion = $this->get('request');
        $session  = $peticion->getSession();

        $arrayPeticiones=array(
                                'idEmpresa'             => $session->get('idEmpresa'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'idServicio'            => $peticion->get('idServicio'),
                                'interfaceElementoId'   => $peticion->get('interfaceElementoId'),
                                'dslamId'               => $peticion->get('dslamId'),
                                'elementoId'            => $peticion->get('elementoId'),
                                'elementoCajaId'        => $peticion->get('elementoCajaId'),
                                'elementoConectorId'    => $peticion->get('elementoSplitterId'),
                                'interfaceElementoConectorId' => $peticion->get('interfaceElementoSplitterId'),
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $peticion->getClientIp(),
                                );
        
        /* @var $cambioPuerto InfoCambiarPuerto */
        $cambioPuerto = $this->get('tecnico.InfoCambiarPuerto');
        
        $result = $cambioPuerto->cambiarPuerto($arrayPeticiones);
        
        return $respuesta->setContent($result);
    }
    
    /**
     * Funcion que realiza el cambio de linea pon, con ejecucion de scripts
     * 
     * @author Creado:     John Vera         <javera@telconet.ec>
     * @author Modificado: Francisco Adum    <fdaum@telconet.ec>
     * @version 1.0 17-06-2014
     * @version 1.1 modificado:21-06-2014
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 09-08-2017 -  Se obtiene el departamento de session
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 20-02-2018 -  Se envía el parámetro para conocer si es un servicio Internet Small Business
     * 
     * @author Jonathan Mazón <jmazon@telconet.ec>
     * @version 1.4 6-08-2020 - validación para los campos del cambio de línea Pon
     * 
     * @author Jonathan Montece <jmontece@telconet.ec>
     * @version 1.5 25-06-2021 Se agrega nuevo parametro en arrayPeticiones para ejecutar cambio de linea pon ZTE en TN
     *                          que tienen como nombre tecnico Internet Small Business, Telcohome
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.6 25-10-2021 Se agrega parametro session en arrayPeticiones para ejecutar cambio de linea pon ISB
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 15-11-2021 - Se modifica la función para validar correctamente el mensaje en caso de error al finalizar la tarea asociada al caso.
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.6 15-11-2021 - Se modifica la función para contruir arreglo para envio de datos al ws de NOT.
     * 
     */
    public function cambiarLineaPonAction()
    {
        $objJsonResponse        = new JsonResponse();
        $respuesta              = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion               = $this->get('request');
        $session                = $peticion->getSession();
        $idSolicitudPon         = $peticion->get('idSolicitudLineaPom');
        $em                     = $this->get('doctrine')->getManager('telconet_soporte');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $intIdDepartamento      = $session->get('idDepartamento');
        $strEsVip               = $session->get('esVIP');
        $arrayCliente           = $session->get('cliente');
        $arrayIngenierosVip     = $session->get('ingenierosVip');
        $arrayContactosCliente  = $session->get('contactosCliente');
        $arrayPuntoContactos    = $session->get('puntoContactos');
        $strElementoSplitterId  = $peticion->get('elementoSplitterId');
        $strInterfaceSplitterId = $peticion->get('interfaceElementoSplitterId');
        $strInterfaceElementoId = $peticion->get('interfaceElementoId');
        $strElementoCajaId      = $peticion->get('elementoCajaId');
        $arrayDatosNoc          = array();
        //Valida si los campos están vacíos
        if($strInterfaceElementoId != "" && $strElementoCajaId != "" && 
           $strElementoSplitterId != "" && $strInterfaceSplitterId != "" )
        {
            //valida si es número
            if(is_numeric($strInterfaceSplitterId))
            {
                $objInterfaceSplitterId = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                        ->findOneById($strInterfaceSplitterId);
                // valida si es un objeto
                if(is_object($objInterfaceSplitterId))
                {
                    $objElementoSplitter = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                         ->findOneById($strElementoSplitterId);
                    $objInterfaceSplitter = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                          ->findOneBy(array('id' => $objInterfaceSplitterId->getId(),
                                                                           'elementoId' => $objElementoSplitter->getId(),
                                                                            'estado' => "not connect"));
                    //Valida si la interface Splitter es un objeto
                    if(is_object($objInterfaceSplitter))
                    {
                        if($peticion->get('strTipoRed') == "GPON_MPLS")
                        {
                            $arrayDatosNoc     = array('esVIP'           => $strEsVip,
                                                       'cobertura'       => $arrayCliente['nombre_oficina'],
                                                       'ultimaMilla'     => $peticion->get('strUltimaMilla'),
                                                       'tipoEnlace'      => $peticion->get('strTipoEnlace'),
                                                       'bws'             => $peticion->get('capacidadUno'),
                                                       'bwb'             => $peticion->get('capacidadDos'),
                                                       'descripcion'     => $peticion->get('descripcion_pto'),
                                                       'ingenierosVip'   => $arrayIngenierosVip[0]['correo'],
                                                       'contactoCliente' => $arrayContactosCliente);
                            error_log(print_R($arrayDatosNoc,true));
                        }

                        $arrayPeticiones[] = array(
                                'idEmpresa'                     => $session->get('idEmpresa'),
                                'prefijoEmpresa'                => $session->get('prefijoEmpresa'),
                                'idServicio'                    => $peticion->get('idServicio'),
                                'interfaceElementoId'           => $peticion->get('interfaceElementoId'),
                                'dslamId'                       => $peticion->get('dslamId'),
                                'elementoId'                    => $peticion->get('elementoId'),
                                'elementoCajaId'                => $peticion->get('elementoCajaId'),
                                'elementoSplitterId'            => $peticion->get('elementoSplitterId'),
                                'interfaceElementoSplitterId'   => $objInterfaceSplitter->getId(),
                                'usrCreacion'                   => $session->get('user'),
                                'ipCreacion'                    => $peticion->getClientIp(),
                                'idSolicitud'                   => $idSolicitudPon,
                                'esIsb'                         => $peticion->get('esISB'),
                                'productoId'                    => $peticion->get('productoId'),
                                'objSession'                    => $session,
                                'tipoRed'                       => $peticion->get('strTipoRed'),
                                'arrayDatosNoc'                 => $arrayDatosNoc
                        );
                        $arrayFinal[] = array('status' => "OK", 'mensaje' => "Interface Correcta");
                    }
                    else if($objInterfaceSplitterId->getEstado() != 'connected')
                    {
                        $arrayFinal[] = array('status' => "ERROR", 
                        'mensaje' => "El valor ingresado en Splitter Interface no pertenece al Splitter Elemento: <br>".
                        $objElementoSplitter->getNombreElemento().",<br> ingrese uno nuevo.");
                    }else  
                    {
                        $arrayFinal[] = array('status' => "ERROR", 'mensaje' => "El Splitter Interface ingresado está en uso, ingrese uno nuevo.");
                    }
                }
                else
                {
                    $arrayFinal[] = array('status' => "ERROR", 'mensaje' => "El Splitter Interface ingresado no se encuentra.");
                }
            }
            else
            {
                $arrayFinal[] = array('status' => "ERROR", 'mensaje' => "El Splitter Interface ingresado es un valor incorrecto.");
            }
        }
        else 
        {
            $arrayFinal[] = array('status' => "ERROR", 'mensaje' => "Todos los campos son obligatorios.");
        }

        $strStatusInterface = $arrayFinal[0]['status'];
        $strMensajeIterface = $arrayFinal[0]['mensaje'];
        if($strStatusInterface == 'OK')
        {
            /* @var $cambioLineaPon InfoCambiarPuerto */
            $cambioLineaPon = $this->get('tecnico.InfoCambiarPuerto');
            $respuestaArray = $cambioLineaPon->cambiarPuertoScriptMd($arrayPeticiones);
            $status = $respuestaArray[0]['status'];
            $mensaje = $respuestaArray[0]['mensaje'];
            
            if(trim($status) == 'OK')
            {
                $em->getConnection()->beginTransaction();
                try
                {
                    //verificar si tiene un caso asociado
                    if($idSolicitudPon)
                    {
                        $objInfoDet = $em->getRepository('schemaBundle:InfoDetalle')
                            ->findOneByDetalleSolicitudId($idSolicitudPon);

                        if($objInfoDet)
                        {

                            $detalleHipotesisId = $objInfoDet->getDetalleHipotesisId();
                            if($detalleHipotesisId)
                            {
                                $objInfoDetHipotesis = $em->getRepository('schemaBundle:InfoDetalleHipotesis')
                                    ->find($detalleHipotesisId);
                            }


                            if($objInfoDetHipotesis)
                            {
                                $objCaso = $objInfoDetHipotesis->getCasoId();

                                $numeracionCaso = $objInfoDetHipotesis->getCasoId()->getNumeroCaso();
                            }
                            else
                            {
                                $objCaso = null;
                                $numeracionCaso = '';
                            }

                            if($objCaso)
                            {
                                //obtener los datos y departamento de la persona por empresa
                                $datosUsuario   = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                              ->getPersonaDepartamentoPorUserEmpresa($peticion->getSession()->get('user'), 
                                                                                                     $session->get('idEmpresa'));

                                //soporte service
                                $serviceSoporte = $this->get('soporte.SoporteService');

                                //tiempo transcurrido de la tarea
                                $fechaInicio    = $objInfoDet->getFeCreacion()->format('d-m-Y');
                                $horaInicio     = $objInfoDet->getFeCreacion()->format('h:m');

                                $arrayParametros1 = array(
                                                            'fechaInicio'   => $fechaInicio,
                                                            'horaInicio'    => $horaInicio
                                                        );
                                $tiempoHoraServer = $serviceSoporte->obtenerHoraTiempoTranscurrido($arrayParametros1);

                                //finalizar tarea
                                $arrayParametros = array(
                                        'idEmpresa'         => $session->get('idEmpresa'),
                                        'prefijoEmpresa'    => $peticion->getSession()->get('prefijoEmpresa'),
                                        'idCaso'            => $objCaso->getId(),
                                        'idDetalle'         => $objInfoDet->getId(),
                                        'intIdDepartamento' => $intIdDepartamento,
                                        'tarea'             => $objInfoDet->getTareaId(),
                                        'tiempoTotal'       => $tiempoHoraServer['tiempoTotal'],
                                        'fechaCierre'       => $tiempoHoraServer['fechaFin'],
                                        'horaCierre'        => $tiempoHoraServer['horaFin'],
                                        'fechaEjecucion'    => $tiempoHoraServer['fechaInicio'],
                                        'horaEjecucion'     => $tiempoHoraServer['horaInicio'],
                                        'fechaApertura'     => "",
                                        'horaApertura'      => "",
                                        'idAsignado'        => $datosUsuario['ID_PERSONA'],
                                        'esSolucion'        => 'S',
                                        'observacion'       => "Se finaliza Tarea Cambio Linea PON",
                                        'jsonMateriales'    => "",
                                        'empleado'          => $peticion->getSession()->get('empleado'),
                                        'usrCreacion'       => $peticion->getSession()->get('user'),
                                        'ipCreacion'        => $peticion->getClientIp()                                    
                                    );

                                $arrayResultado = $serviceSoporte->finalizarTarea($arrayParametros);
                                $statusTarea = $arrayResultado['status'];

                                if($statusTarea != 'OK')
                                {
                                    throw new \Exception($arrayResultado['mensaje']);
                                }
                                else
                                {
                                    $mensaje = '';
                                    $mensaje = 'Se realizo Cambio Linea PON exitosamente <br>'. $mensaje;
                                }
                            }
                        }
                    }
                    //*DECLARACION DE COMMITS*/
                    if($em->getConnection()->isTransactionActive())
                    {
                        $em->getConnection()->commit();
                    }
                }
                catch(\Exception $e)
                {
                    if($em->getConnection()->isTransactionActive())
                    {
                        $em->getConnection()->rollback();
                    }
                    $mensaje = "Se ejecutó el Cambio Linea PON exitosamente pero ocurrió un error al finalizar la tarea asociada al caso.<br>"
                                . "Error: " . $e->getMessage() . ", Favor Notificar a Sistemas.";
                    error_log('*****arrayDataGeneral datos mail*****'.print_R($e->getMessage(), true));
                }
            }
        }
        else
        {
            $status = $strStatusInterface;
            $mensaje = $strMensajeIterface;
        }

        $objJsonResponse->setData(array('status' => $status, 'mensaje' => $mensaje));
        return $objJsonResponse;
    }

    /**
     * Funcion que sirve para ejecutar el cambio de cpe
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.2 13-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO' y 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * @since 2.1
     *
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 2.1 20-06-2019 - Se agregan parámetros nuevos que se envian por background en la programación
     *                           para el procesamiento de operaciones con equipos dual band
     *                           Parámetros nuevos que ingresan al método:
     *                              strEsExtenderDualBand
     *                              strEsWifiDualBand
     *                              intIdServicioInternet
     *                              empleado
     *                              cambioEquiposDualBand
     *                              strEsCambioPorSoporte
     * @since 2.0
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.0 03-12-2018 - Se obtiene parámetro que indica si el elemento es un Extender Dual Band
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.10 01-10-2018 - Se realizan ajustes en la pantalla de cambio de cpe, se agrega la opción que registra la cuadrilla responsable
     *                           del retiro del equipo
     * @since 1.6
     * 
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.9 25-09-2018 - Se realizan ajustes en la pantalla de cambio de cpe, se agrega la opción que registra la cuadrilla responsable
     *                           del retiro del equipo
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.8 12-09-2018 - Se agregan cambios para gestionar nuevo producto AP WIFI
     * @since 1.7
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 25-06-2018 - Se finalizan automáticamente las tareas de cambio de equipo CPE WIFI asociadas al servicio Small Business
     * @since 1.6
     * 
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 01-09-2017 -  Se obtiene el departamento de la session
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.5 23-02-2017   Se agrega parametro necesario para identificar si es el cambio de un equipo SmartWifi
     * @since 1.4
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 Se agrega operacion ternaria para enviar S o N segun informacion enviada via Request
     * @since 07-02-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 Se agrega informacion de pseudope del servicio a realizar el cambio
     * @since 23-11-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 se agrega parametros para realizar cambio de equipo TN ( CPE ) que contenga mas de una interface Wan conectada 
     * @since 26-10-2016
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 04-10-2016   Se agrega parametros para gestionar cambio de equipo
     *                           hw con equipo adicional wifi para servicio hw
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.3 27-05-2021 - Se agrega el parámetro de la ubicación del dispositivo.
     */
    public function cambiarCpeAction()
    {
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion  = $this->get('request');
        $session   = $peticion->getSession();
        
        $strCodEmpresa      = $session->get('idEmpresa');
        $strPrefijoEmpresa  = $session->get('prefijoEmpresa');
        $strIpCreacion      = $peticion->getClientIp();
        $strUsrCreacion     = $session->get('user');
        $strUbicacionDisp   = $peticion->get('ubicacionDispositivo');
        
        $arrayPeticiones[] = array( 'strUbicacionDispositivo'=> $strUbicacionDisp,
                                    'intIdDepartamento'      => $session->get('intIdDepartamento'),
                                    'idEmpresa'              => $strCodEmpresa,
                                    'prefijoEmpresa'         => $strPrefijoEmpresa,
                                    'idServicio'             => $peticion->get('idServicio'),
                                    'idElemento'             => $peticion->get('idElemento'),
                                    'modeloCpe'              => $peticion->get('modeloCpe'),
                                    'ipCpe'                  => $peticion->get('ipCpe'),
                                    'idResponsable'          => $peticion->get('idResponsable'),
                                    'tipoResponsable'        => $peticion->get('tipoResponsable'),
                                    'nombreCpe'              => $peticion->get('nombreCpe'),
                                    'macCpe'                 => $peticion->get('macCpe'),
                                    'macCpeBck'              => $peticion->get('macCpeBck'),
                                    'strRegistraEquipo'      => $peticion->get('strRegistraEquipo')?$peticion->get('strRegistraEquipo'):"N",
                                    'serieCpe'               => $peticion->get('serieCpe'),
                                    'descripcionCpe'         => $peticion->get('descripcionCpe'),
                                    'tipoElementoCpe'        => $peticion->get('tipoElementoCpe'),
                                    'strEsCambioEquiSoporteMasivo'  => $peticion->get('strEsCambioEquiSoporteMasivo')?
                                                                       $peticion->get('strEsCambioEquiSoporteMasivo'):"NO",
                                    'nombreInterface'        => $peticion->get('nombreInterface'),
                                    'nombreInterfaceBck'     => $peticion->get('nombreInterfaceBck'),
                                    'interfacesConectadas'   => $peticion->get('interfacesConectadas'),
                                    'intIdElementoWifi'      => $peticion->get('intIdElementoWifi'),
                                    'strModeloWifi'          => $peticion->get('strModeloWifi'),
                                    'strMacWifi'             => $peticion->get('strMacWifi'),
                                    'strSerieWifi'           => $peticion->get('strSerieWifi'),
                                    'strDescripcionWifi'     => $peticion->get('strDescripcionWifi'),
                                    'strNombreWifi'          => $peticion->get('strNombreWifi'),
                                    'strTieneMigracionHw'    => $peticion->get('strTieneMigracionHw'),
                                    'strEquipoCpeHw'         => $peticion->get('strEquipoCpeHw'),
                                    'strEquipoWifiAdicional' => $peticion->get('strEquipoWifiAdicional'),
                                    'strAgregarWifi'         => $peticion->get('strAgregarWifi'),
                                    'strEsSmartWifi'         => $peticion->get('strEsSmartWifi'),
                                    'strEsApWifi'            => $peticion->get('strEsApWifi'),
                                    'strTipoRed'             => $peticion->get('tipoRed') ? $peticion->get('tipoRed') : "MPLS",
                                    'usrCreacion'            => $strUsrCreacion,
                                    'esPseudoPe'             => $peticion->get('esPseudoPe')?$peticion->get('esPseudoPe'):'N',
                                    'ipCreacion'             => $strIpCreacion,
                                    'serNaf'                 => $this->container->getParameter('database_host_naf'),
                                    'ptoNaf'                 => $this->container->getParameter('database_port_naf'),
                                    'sidNaf'                 => $this->container->getParameter('database_name_naf'),
                                    'usrNaf'                 => $this->container->getParameter('user_naf'),
                                    'pswNaf'                 => $this->container->getParameter('passwd_naf'),
                                    'host'                   => $this->container->getParameter('host'),
                                    'strEsExtenderDualBand'  => $peticion->get('strEsExtenderDualBand'),
                                    'strEsWifiDualBand'      => $peticion->get('strEsWifiDualBand'),
                                    'intIdServicioInternet'  => $peticion->get('intIdServicioInternet'),
                                    'objEmpleadoSesion'      => $session->get('empleado'),
                                    'cambioEquiposDualBand'  => $peticion->get('strCambioEquiposDualBand'),
                                    'strEsCambioPorSoporte'  => $peticion->get('strEsCambioPorSoporte')
                                  );
        
        /* @var $serviceCambioElemento InfoCambioElementoService */
        $serviceCambioElemento = $this->get('tecnico.InfoCambioElemento');

        $respuestaArray = $serviceCambioElemento->cambioElemento($arrayPeticiones);

        if($respuestaArray[0]['status']!="OK")
        {
            $strResult = $respuestaArray[0]['mensaje'];
        }
        else
        {
            $strResult = "OK";
        }

        if (trim($strResult) === 'OK' && $strUbicacionDisp !== 'Nodo')
        {
            $emComercial        = $this->get('doctrine')->getManager('telconet');
            $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
            $emSoporte          = $this->get('doctrine')->getManager('telconet_soporte');
            $serviceSoporte     = $this->get('soporte.SoporteService');
            $objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($peticion->get('idServicio'));
            if(is_object($objServicio))
            {
                $objProducto = $objServicio->getProductoId();
                if($strPrefijoEmpresa === "TN" && is_object($objProducto) && ($objProducto->getNombreTecnico() === "INTERNET SMALL BUSINESS")
                    && (($peticion->get('tipoElementoCpe') === "CPE WIFI") 
                        || ($peticion->get('tipoElementoCpe') === "CPE" && strrpos($peticion->get('nombreCpe'), "wifi"))))
                {
                    $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneBy(array( "servicioId" => $objServicio->getId()));
                    if(is_object($objServicioTecnico) && $objServicioTecnico->getInterfaceElementoId())
                    {
                        $intIdInterfaceElemento = $objServicioTecnico->getInterfaceElementoId();
                        $objInterfaceElemento   = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                    ->find($intIdInterfaceElemento);
                        $objElementoOlt         = $objInterfaceElemento->getElementoId();
                        if(is_object($objElementoOlt))
                        {
                            $strModeloElementoOlt   = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
                            if($strModeloElementoOlt === "EP-3116")
                            {
                                $objUsuario                 = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                                          ->getPersonaDepartamentoPorUserEmpresa($strUsrCreacion, 
                                                                                                                 $strCodEmpresa);
                                $objTareaCambioSB           = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                                        ->findOneByNombreTarea("CAMBIO DE EQUIPO SMALL BUSINESS");
                                $arrayParametrosTareas      = array("cliente"           => $objServicio->getPuntoId()->getId(),
                                                                    "tarea"             => $objTareaCambioSB->getId(),
                                                                    "estadosTareaNotIn" => array('Finalizada','Cancelada','Rechazada','Anulada'));
                                $arrayResultadosTareas      = $emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                                        ->getRegistrosMisTareas($arrayParametrosTareas,'','','data');
                                $arrayTareasCambioEquipo = $arrayResultadosTareas['resultados'];
                                if(!empty($arrayTareasCambioEquipo))
                                {
                                    foreach($arrayTareasCambioEquipo as $arrayTarea)
                                    {
                                        $objDetalleTarea = $emSoporte->getRepository('schemaBundle:InfoDetalle')->find($arrayTarea['idDetalle']);
                                        if($arrayTarea['estado'] === "Asignada")
                                        {
                                            $arrayParametrosIniciar['strTipo']              = "iniciar";
                                            $arrayParametrosIniciar['objDetalle']           = $objDetalleTarea;
                                            $arrayParametrosIniciar['strObservacion']       = "Tarea iniciada automáticamente por cambio de CPE WIFI";
                                            $arrayParametrosIniciar['strCodEmpresa']        = $strCodEmpresa;
                                            $arrayParametrosIniciar['strUser']              = $strUsrCreacion;
                                            $arrayParametrosIniciar['strIpUser']            = $strIpCreacion;  
                                            $arrayParametrosIniciar["intPersonaEmpresaRol"] = 0;
                                            $serviceSoporte->administrarTarea($arrayParametrosIniciar);
                                        }
                                        $arrayParametrosFecha   = array(
                                                                        'fechaInicio'   => $objDetalleTarea->getFeCreacion()->format('d-m-Y'),
                                                                        'horaInicio'    => $objDetalleTarea->getFeCreacion()->format('H:i')
                                                                     );
                                        $arrayTiempoServer              = $serviceSoporte->obtenerHoraTiempoTranscurrido($arrayParametrosFecha);
                                        $arrayParametrosFinalizarTarea  = array(
                                                                                'idEmpresa'             => $strCodEmpresa,
                                                                                'prefijoEmpresa'        => $strPrefijoEmpresa,
                                                                                'idCaso'                => null,
                                                                                'idDetalle'             => $arrayTarea['idDetalle'],
                                                                                'tarea'                 => null,
                                                                                'tiempoTotal'           => $arrayTiempoServer['tiempoTotal'],
                                                                                'fechaCierre'           => $arrayTiempoServer['fechaFin'],
                                                                                'horaCierre'            => $arrayTiempoServer['horaFin'],
                                                                                'fechaEjecucion'        => $arrayTiempoServer['fechaInicio'],
                                                                                'horaEjecucion'         => $arrayTiempoServer['horaInicio'],
                                                                                'esSolucion'            => '',
                                                                                'fechaApertura'         => "",
                                                                                'horaApertura'          => "",
                                                                                'jsonMateriales'        => null,
                                                                                'idAsignado'            => $objUsuario['ID_PERSONA'],
                                                                                'observacion'           => "Se finaliza automáticamente la tarea ".
                                                                                                           "por cambio de CPE WIFI",
                                                                                'empleado'              => $objUsuario['NOMBRES']." "
                                                                                                            .$objUsuario['APELLIDOS'],
                                                                                'usrCreacion'           => $strUsrCreacion,
                                                                                'ipCreacion'            => $strIpCreacion,
                                                                                'strEnviaDepartamento'  => "N"
                                                                            );
                                        $serviceSoporte->finalizarTarea($arrayParametrosFinalizarTarea);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return $respuesta->setContent($strResult);
    }
        
    /**
     * Funcion que actualiza el indice cliente 
     * para regularizar data por cambio de linea pon logico.
     * 
     * @author Francisco Adum    <fadum@telconet.ec>
     * @author Jesus Bozada  <jbozada@telconet.ec>
     * @author Jesus Bozada  <jbozada@telconet.ec>
     * @version 1.0 28-05-2014
     * @version 2.0 24-04-2015
     * @version 2.1 04-06-2015
     */
    public function updateIndiceClienteAction()
    {
        $respuesta          = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request            = $this->get('request');
        $session            = $request->getSession();
        $em                 = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa            = $session->get('idEmpresa');
        $idServicio         = $request->get('idServicio');
        $indice             = $request->get('indiceCliente');
        
        $em->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        try
        {
            $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            $entityInfoServicioTecnico=$em->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($idServicio);
            
            /*Se agrega codigo para realizar la cancelación del cliente nuevemente mediante proceso masivo,
              se setea cabecera y detalle de proceso masivo de cancelación para el registro del servicio
            */
            if ($servicio->getEstado() == 'Cancel')
            {
                $arrayProcesoMasivoDet = $emInfraestructura->getRepository('schemaBundle:InfoProcesoMasivoDet')
                                                           ->getObtenerUltimoProcesoMasivoDet('CancelarCliente', 
                                                                                              $empresa,
                                                                                              $servicio->getPuntoId()->getId(), 
                                                                                              $servicio->getId());
                
                if ($arrayProcesoMasivoDet)
                {
                    $entityInfoProcesoMasivoDet = $emInfraestructura->getRepository('schemaBundle:InfoProcesoMasivoDet')
                                                                    ->find($arrayProcesoMasivoDet[0]['ID_PROCESO_MASIVO_DET']);
                }
                else
                {
                    $entityInfoProcesoMasivoDet = null;
                }

                if ($entityInfoProcesoMasivoDet)
                {
                    $entityInfoProcesoMasivoDet->setEstado("Pendiente");
                    $entityInfoProcesoMasivoDet->setFeUltMod(new \DateTime('now'));
                    $entityInfoProcesoMasivoDet->setUsrUltMod($session->get('user'));
                    $entityInfoProcesoMasivoCab = $entityInfoProcesoMasivoDet->getProcesoMasivoCabId();
                    $entityInfoProcesoMasivoCab->setEstado("Pendiente");
                    $entityInfoProcesoMasivoCab->setFeUltMod(new \DateTime('now'));
                    $entityInfoProcesoMasivoCab->setUsrUltMod($session->get('user'));
                    $emInfraestructura->persist($entityInfoProcesoMasivoDet);
                    $emInfraestructura->persist($entityInfoProcesoMasivoCab);
                    $emInfraestructura->flush();
                }
            }

            //se agrega validacion de actualizacion del indice para que no existan indices duplicados por OLT
            $entityServiciosProdCaract = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                            ->obtieneIndiceClientesPorOlt( 
                                                                           $entityInfoServicioTecnico->getElementoId(), 
                                                                           $entityInfoServicioTecnico->getInterfaceElementoId(),
                                                                           $indice
                                                                         );
            if (count($entityServiciosProdCaract)>0)
            {
                $respuesta->setContent("ERROR INDICE");
                return $respuesta;
            }
            
            $caracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                  ->findOneBy(array( "descripcionCaracteristica" => "INDICE CLIENTE", "estado" => "Activo"));
            $producto = $em->getRepository('schemaBundle:AdmiProducto')
                           ->findOneBy(array( "nombreTecnico" => "INTERNET", "estado" => "Activo", "empresaCod"=>$empresa));
            $prodCaracteristica = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                      ->findOneBy(array( "productoId" => $producto->getId(), "caracteristicaId" => $caracteristica->getId()));
            $servicioProdCaractArray = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                     ->findBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $prodCaracteristica));

            for($i=0;$i<count($servicioProdCaractArray);$i++)
            {
                $servicioProdCaract = $servicioProdCaractArray[$i];
                $servicioProdCaract->setEstado("Eliminado");
                $em->persist($servicioProdCaract);
                $em->flush();
            }

            //servicio producto caracteristica - indice cliente
            $spc = new InfoServicioProdCaract();
            $spc->setServicioId($idServicio);
            $spc->setProductoCaracterisiticaId($prodCaracteristica->getId());
            $spc->setValor($indice);
            $spc->setEstado($servicio->getEstado());
            $spc->setUsrCreacion($session->get('user'));
            $spc->setFeCreacion(new \DateTime('now'));
            $em->persist($spc);
            $em->flush();

            //historial del servicio
            $servicioHistorial = new InfoServicioHistorial();
            $servicioHistorial->setServicioId($servicio);
            $servicioHistorial->setObservacion("Se actualizo el indice del cliente al:".$indice);
            $servicioHistorial->setEstado($servicio->getEstado());
            $servicioHistorial->setUsrCreacion($session->get('user'));
            $servicioHistorial->setFeCreacion(new \DateTime('now'));
            $servicioHistorial->setIpCreacion($request->getClientIp());
            $em->persist($servicioHistorial);
            $em->flush();
            $em->getConnection()->commit();
            $emInfraestructura->getConnection()->commit();
            $respuesta->setContent("OK");
        }
        catch(\Exception $e)
        {
            $em->getConnection()->rollback();
            $mensajeError = "Error: " . $e->getMessage();
            error_log($mensajeError);
            $respuesta->setContent("ERROR GENERAL");
        }
        return $respuesta;
    }
    
    
    /**
     * Funcion que genera la encuesta para ser llenada por el cliente.
     * 
     * @author Creado: Allan Suarez <arsuarez@telconet.ec>
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 28-07-2014
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.1 27-04-2017 - Se obtiene el codigo de la plantilla desde la tabla de parametros,
     *                           Se modifica envio de parametros en arreglo a la funcion obtenerPreguntasEncuesta
     * 
     */
    public function encuestaAction($id)
    {
        $request       = $this->get('request');
        $session       = $request->getSession();
        $strCodEmpresa = $session->get('idEmpresa');
        $em            = $this->getDoctrine()->getManager("telconet");
        $emC           = $this->getDoctrine()->getManager("telconet_comunicacion");
        
        if (null == $servicio = $em->find('schemaBundle:InfoServicio', $id)) 
        {
            throw new NotFoundHttpException('No existe el Servicio que se quiere mostrar');
        }
        
        /* @var $array \telconet\soporteBundle\Service\SoporteService */
        $soporte                                 = $this->get('soporte.SoporteService');
        $arrayParametrosPreguntas                = array();
        $arrayParametrosPreguntas['objServicio'] = $servicio;

        //Obtenemos el codigo de la plantilla para poder generar encuesta
        $arrayAdmiParametroDetActa = $em->getRepository('schemaBundle:AdmiParametroDet')
                                        ->getOne('CODIGO_ENCUESTA_INSTALACION_POR_EMPRESA',
                                                 'SOPORTE',
                                                 '',
                                                 '',
                                                 'CODIGO_ENCUESTA_INSTALACION',
                                                 '',
                                                 '',
                                                 '',
                                                 '',
                                                 $strCodEmpresa
                                                );
        if (isset($arrayAdmiParametroDetActa['valor2']) && !empty($arrayAdmiParametroDetActa['valor2']))
        {
            $arrayParametrosPreguntas['strCodigoPlantilla'] = $arrayAdmiParametroDetActa['valor2'];
        }
        else
        {
            throw new \Exception("No existe codigo de plantilla");
        }
        
        
        $array = $soporte->obtenerPreguntasEncuesta($arrayParametrosPreguntas);
        $array = array_merge($array, array('mensaje'=>null));
        
        return $this->render('tecnicoBundle:InfoServicio:encuesta.html.twig', $array);
    }
       
    /**
     * Funcion que guarda la encuesta del cliente en la base,
     * genera la firma digital en .png y
     * genera el archivo pdf de la encuesta.
     * 
     * @author Creado: Allan Suarez <arsuarez@telconet.ec>
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 28-07-2014
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.1 13-06-2017 - Se obtiene el codigo de la plantilla desde la tabla de parametros,
     *                           Se modifica envio de parametros en arreglo a la funcion obtenerPreguntasEncuesta
     */
    public function guardarEncuestaAction($id)
    {
        $request            = $this->get('request');
        $session            = $request->getSession();
        $prefijoEmpresa     = $session->get('prefijoEmpresa');
        $idEmpresa          = $session->get('idEmpresa');
        $usrCreacion        = $session->get('user');
        $ipCreacion         = $request->getClientIp();
        $feCreacion         = new \DateTime('now');
        $firma              = $request->request->get('firma');
        $preguntaRespuesta  = $request->request->get('preguntaRespuesta');
        $serverRoot         = $_SERVER['DOCUMENT_ROOT'];
        $emComercial        = $this->getDoctrine()->getManager("telconet");
        
        if(null == $servicio = $emComercial->find('schemaBundle:InfoServicio', $id))
        {
            throw new NotFoundHttpException('No existe el Servicio que se quiere mostrar');
        }
        
        $finder = new Finder();
        $finder->files()->in(__DIR__);

        foreach($finder as $file)
        {
            if(strpos($file->getRealpath(), "Default") !== false)
            {
                $pathSrc = explode("/Controller/DefaultController.php", $file->getRealpath())[0];
                $pathSrc = explode("\Controller\DefaultController.php", $pathSrc)[0];
            }
        }
        
        $arrayAdmiParametroEncuesta = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->getOne('CODIGO_ENCUESTA_INSTALACION_POR_EMPRESA',
                                                           'SOPORTE',
                                                           '',
                                                           '',
                                                           'CODIGO_ENCUESTA_INSTALACION',
                                                           '',
                                                           '',
                                                           '',
                                                           '',
                                                           $idEmpresa
                                                          );
        if (isset($arrayAdmiParametroEncuesta['valor2']) && !empty($arrayAdmiParametroEncuesta['valor2']))
        {
            $strCodigoPlantilla = $arrayAdmiParametroEncuesta['valor2'];
        }
        
        $arrayParametros = array(
                                    'idEmpresa'         => $idEmpresa,
                                    'prefijoEmpresa'    => $prefijoEmpresa,
                                    'idServicio'        => $id,
                                    'firmaCoordenadas'  => $firma,
                                    'firmaBase64'       => "",
                                    'preguntaRespuesta' => $preguntaRespuesta,
                                    'strCodigoPlantilla'=> $strCodigoPlantilla,
                                    'serverRoot'        => $serverRoot,
                                    'usrCreacion'       => $usrCreacion,
                                    'ipCreacion'        => $ipCreacion,
                                    'feCreacion'        => $feCreacion,
                                    'pathSource'        => $pathSrc
                                );
        
        $encuestaService = $this->get('tecnico.Encuesta');
        $arrayRespuesta  = $encuestaService->grabarEncuesta($arrayParametros);
        
        //obtenemos las preguntas y respuestas de la encuesta para enviarlas al twig
        $servicio                                  = $emComercial->getRepository('schemaBundle:InfoServicio')->find($id);
        $soporte                                   = $this->get('soporte.SoporteService');
        $arrayParametrosPreguntas                  = array();
        $arrayParametrosPreguntas['objServicio']   = $servicio;

        //Obtenemos el codigo de la plantilla para poder generar encuesta
        $arrayAdmiParametroDetActa = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('CODIGO_ENCUESTA_INSTALACION_POR_EMPRESA',
                                                          'SOPORTE',
                                                          '',
                                                          '',
                                                          'CODIGO_ENCUESTA_INSTALACION',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          $idEmpresa
                                                         );
        if (isset($arrayAdmiParametroDetActa['valor2']) && !empty($arrayAdmiParametroDetActa['valor2']))
        {
            $arrayParametrosPreguntas['strCodigoPlantilla'] = $arrayAdmiParametroDetActa['valor2'];
        }
        else
        {
            throw new \Exception("No existe codigo de plantilla");
        }
        
        
        $array                                    = $soporte->obtenerPreguntasEncuesta($arrayParametrosPreguntas);
        $arrayRespuesta                           = array_merge($arrayRespuesta, $array);
        
        return $this->render('tecnicoBundle:InfoServicio:encuesta.html.twig', $arrayRespuesta);
    }
    /**
     * @Secure(roles="ROLE_151-2420")
     * Funcion para consultar los datos ingresados en el ldap de clientes
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 30-03-2015
     * 
     * @author Lizbeth Cruz <javera@telconet.ec>
     * @version 1.1 12-04-2018 Se agrega el filtro por empresa para consultar el ldap de clientes
     */
    public function verLdapServicioAction()
    {
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        
        $objSession         = $request->getSession();
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
        $idServicio         = $request->get('idServicio');
        
        /* @var $migracion InfoServicioTecnicoService */
        $tecnicoService = $this->get('tecnico.InfoServicioTecnico');
        
        $resultadoJsonLdap = $tecnicoService->ejecutarComandoLdap("C", $idServicio, $strPrefijoEmpresa);
        
        $mensaje = substr($resultadoJsonLdap->mensaje, 11);
        $mensaje = str_replace(", ","\n",$mensaje);
        $mensaje = str_replace("}"," ",$mensaje);
        
        $respuesta->setContent($mensaje);        
        return $respuesta;        
    }
    /**
     * @Secure(roles="ROLE_151-2421")
     * Funcion para actualizar los datos en el ldap de clientes
     * 
     * @author creado: John Vera <javera@telconet.ec>
     * @author modificado: John Vera <javera@telconet.ec>
     * @version 1.1 17-04-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 13-04-2018 Se agrega el prefijo de la empresa para ejecutar el comando para actualizar un servicio en el árbol de ldap
     * 
     */
    public function configurarLdapServicioAction()
    {
        $respuesta          = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request            = $this->get('request');
        $session            = $request->getSession();
        $em                 = $this->get('doctrine')->getManager('telconet');               
        $idServicio         = $request->get('idServicio');
        $strPrefijoEmpresa  = $session->get('prefijoEmpresa');
                
        /* @var $migracion InfoServicioTecnicoService */
        $tecnicoService = $this->get('tecnico.InfoServicioTecnico');
        
        $resultadoJsonLdap = $tecnicoService->ejecutarComandoLdap("A", $idServicio, $strPrefijoEmpresa);
        
        if ($resultadoJsonLdap->status=='OK')
        {
            $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            //historial del servicio
            $servicioHistorial = new InfoServicioHistorial();
            $servicioHistorial->setServicioId($servicio);
            $servicioHistorial->setObservacion("Se reconfiguró el ldap.");
            $servicioHistorial->setEstado($servicio->getEstado());
            $servicioHistorial->setUsrCreacion($session->get('user'));
            $servicioHistorial->setFeCreacion(new \DateTime('now'));
            $servicioHistorial->setIpCreacion($request->getClientIp());
            $em->persist($servicioHistorial);
            $em->flush();
        }

        $respuesta->setContent($resultadoJsonLdap->mensaje);        
        return $respuesta;     
    }
    
    /**
     * @Secure(roles="ROLE_151-2458") 
     * Funcion para actualizar los datos en el ldap de clientes
     * 
     * @author John Vera <javera@telconet.ec>
     * @author modificado: John Vera <javera@telconet.ec>
     * @version 1.1 17-04-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 13-04-2018 Se agrega el prefijo de la empresa para ejecutar el comando para crear un servicio en el árbol de ldap
     * 
     */
    public function crearLdapServicioAction()
    {
        $respuesta          = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request            = $this->get('request');
        $session            = $request->getSession();
        $em                 = $this->get('doctrine')->getManager('telconet');
        $strPrefijoEmpresa  = $session->get('prefijoEmpresa');
               
        $idServicio = $request->get('idServicio');
        
        /* @var $migracion InfoServicioTecnicoService */
        $tecnicoService = $this->get('tecnico.InfoServicioTecnico');
        
        $resultadoJsonLdap = $tecnicoService->ejecutarComandoLdap("N", $idServicio, $strPrefijoEmpresa);

        if ($resultadoJsonLdap->status=='OK')
        {
            $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            //historial del servicio
            $servicioHistorial = new InfoServicioHistorial();
            $servicioHistorial->setServicioId($servicio);
            $servicioHistorial->setObservacion("Se creó el ldap.");
            $servicioHistorial->setEstado($servicio->getEstado());
            $servicioHistorial->setUsrCreacion($session->get('user'));
            $servicioHistorial->setFeCreacion(new \DateTime('now'));
            $servicioHistorial->setIpCreacion($request->getClientIp());
            $em->persist($servicioHistorial);
            $em->flush();
        }

        $respuesta->setContent($resultadoJsonLdap->mensaje);        
        return $respuesta;     
    }
    
    /**
     * @Secure(roles="ROLE_151-3277")  
     * Funcion para eliminar a un cliente del ldap
     * 
     * @author John Vera <javera@telconet.ec>
     * @author modificado: John Vera <javera@telconet.ec>
     * @version 1.0 10-12-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-04-2018 Se agrega el prefijo de la empresa para ejecutar el comando para eliminar un servicio en el árbol de ldap
     * 
     */
    public function eliminaLdapServicioAction()
    {
        $respuesta          = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request            = $this->get('request');
        $session            = $request->getSession();
        $em                 = $this->get('doctrine')->getManager('telconet');               
        $idServicio         = $request->get('idServicio');
        $strPrefijoEmpresa  = $session->get('prefijoEmpresa');
        
        try 
        {
            /* @var $migracion InfoServicioTecnicoService */
            $tecnicoService = $this->get('tecnico.InfoServicioTecnico');

            $resultadoJsonLdap = $tecnicoService->ejecutarComandoLdap("E", $idServicio, $strPrefijoEmpresa);

            if ($resultadoJsonLdap->status=='OK')
            {
                $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
                //historial del servicio
                $servicioHistorial = new InfoServicioHistorial();
                $servicioHistorial->setServicioId($servicio);
                $servicioHistorial->setObservacion("Se eliminó del ldap.");
                $servicioHistorial->setEstado($servicio->getEstado());
                $servicioHistorial->setUsrCreacion($session->get('user'));
                $servicioHistorial->setFeCreacion(new \DateTime('now'));
                $servicioHistorial->setIpCreacion($request->getClientIp());
                $em->persist($servicioHistorial);
                $em->flush(); 
            }

            $respuesta->setContent($resultadoJsonLdap->mensaje);        
            return $respuesta;        
        }
        
        catch(\Exception $e)
        {
            $result = "Error: " . $e->getMessage();
            
            $respuesta->setContent($result);        
            return $respuesta;   
        }
        
        
    }

    /*
     * ******************************************************
     * FUNCIONES PARA OBTENER DATOS
     * ******************************************************
     * 
     * Funcion obtener los elementos clientes por punto
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 05-11-2016 se valido para que soleccione el router wifi pre insertado
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 1.2 12-02-2020 Se crea array para obtener los elementos de clientes por punto.
     */
    public function ajaxGetElementosClientesPorPuntoAction()
    {
        $response   = new JsonResponse();        
        $request    = $this->get('request');        
        $idServicio = $request->get('idServicio');
        $estado     = $request->get('estado');
        $objSession    = $request->getSession();
        $intIdEmpresa  = $objSession->get('idEmpresa');        
        
        /* @var $migracion InfoServicioTecnicoService */
        $tecnicoService = $this->get('tecnico.InfoServicioTecnico');
        
        //valido si el punto esta relacionado a un NODO WIFI
        $objServicio = $this->getDoctrine()->getManager('telconet')->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $objDetalleElemento = '';
        if($objServicio)
        {
            $objDetalleElemento = $this->getDoctrine()->getManager('telconet')
                                       ->getRepository('schemaBundle:InfoDetalleElemento')
                                       ->findOneBy(array("detalleNombre"   => "ID_PUNTO",
                                                         "detalleValor"    => $objServicio->getPuntoId()->getId(),
                                                         "estado"          => "Activo"));
        }
        
        if($objDetalleElemento)
        {

            $objRelacionElemento = $this->getDoctrine()->getManager('telconet_infraestructura')
                                                       ->getRepository('schemaBundle:InfoRelacionElemento')
                                                       ->findOneBy(array("elementoIdA" => $objDetalleElemento->getElementoId(),
                                                                              "estado" => "Activo"));
            if($objRelacionElemento)
            {
                $jsonRespuesta = $this->getDoctrine()
                                      ->getManager('telconet')
                                      ->getRepository('schemaBundle:InfoServicioTecnico')
                                      ->getJsonElementosClientesPorPuntoWifi($idServicio, $objRelacionElemento->getElementoIdB());
            }
        }
        else
        {   
            $arrayParams                    =  array();
            $arrayParams['idServicio']      = $idServicio;
            $arrayParams['estado']          = $estado;
            $arrayParams['tecnicoService']  = $tecnicoService;
            $arrayParams['intIdEmpresa']    = $intIdEmpresa;
            $jsonRespuesta = $this->getDoctrine()
                                ->getManager('telconet')
                                ->getRepository('schemaBundle:InfoServicioTecnico')
                                ->getJsonElementosClientesPorPunto($arrayParams);
        }

        $response->setContent($jsonRespuesta);

        return $response;
    }
    
    /**
     * Funcion que sirve para cargar las ips fijas y las ips adicionales
     * de un cliente
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 06-05-2016    Se agrega parametro empresa en metodo generarJsonIpPublicaPorServicio por conflictos de 
     *                            producto INTERNET DEDICADO
     * 
     * @since 1.0
     */
    public function getIpPublicasAction(){
        $respuesta  = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request    = $this->get('request');
        $session    = $request->getSession();
        $idEmpresa  = $session->get('idEmpresa');
        $em         = $this->get('doctrine')->getManager('telconet');
        $peticion   = $this->get('request');
        $idServicio = $peticion->query->get('idServicio');
        $start      = $peticion->query->get('start');
        $limit      = $peticion->query->get('limit');
        
        $objJson    = $this->getDoctrine()
                           ->getManager("telconet_infraestructura")
                           ->getRepository('schemaBundle:InfoServicioTecnico')
                           ->generarJsonIpPublicaPorServicio( $idServicio,
                                                              "Activo",
                                                              $start, 
                                                              100,
                                                              $em, 
                                                              $idEmpresa );
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getMotivosAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        
        
        $peticion = $this->get('request');
        
        $accion = $peticion->query->get('accion');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonMotivos($accion,$start, 100);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getMotivosSuspensionTemporalAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        
        
        $peticion = $this->get('request');
        
        $accion = $peticion->query->get('accion');
        $nombreModulo = $peticion->query->get('nombreModulo');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonMotivosSuspensionTemporal($accion,$nombreModulo,$start, 100);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    /*
     * Documentación para el método 'getProductosPorEstadoAction'.
     *
     * Metodo para obtener el listado de los productos
     *
     * @version 1.0 - Función no documentada
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 04-03-2020 - Se envía la variable $strQuery para que el metodo
     *                           pueda filtrar por la descripción del producto
     *
     * @param Request $request [
     *                              idEmpresa, id de la empresa
     *                              query,     filtrar por el nombre del producto
     *                              start,     inicio de la consulta
     *                              limit      limite de registros de la consulta
     *                          ]
     * @return Response $respuesta
    */
    public function getProductosPorEstadoAction()
    {
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        
        $strEmpresa  = $session->get('idEmpresa');
        $objPeticion = $this->get('request');
        
        $strEstado  = 'Activo';
        $strStart   = $objPeticion->query->get('start');
        $strLimit   = $objPeticion->query->get('limit');
        $strQuery   = $objPeticion->query->get('query');
        $arrayParametros = array(
            'strEmpresa' => $strEmpresa,
            'strQuery'   => $strQuery,
            'strEstado'  => $strEstado,
            'strStart'   => $strStart,
            'strLimit'   => $strLimit,
        );
        $objJson    = $this->getDoctrine()->getManager("telconet")
                        ->getRepository('schemaBundle:AdmiProducto')
                        ->generarJsonProductosPorEstado($arrayParametros);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getPlanesPorEstadoAction(){
        ini_set('max_execution_time', 400000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $plan = $peticion->query->get('plan');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $tipo = $peticion->query->get('tipoPlan')?$peticion->query->get('tipoPlan'):'';
        
        $nombrePlan = $peticion->query->get('query')?$peticion->query->get('query'):'';
        
        if($plan!=""){
            if(stristr($plan, "HOME") === FALSE) {
                $planNombre = "PYME";
            }
            else{
                $planNombre = "Home";
            }    
        }
        else{
            $planNombre="";
        }
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoPlanCab')
            ->generarJsonPlanesPorEmpresa($nombrePlan,$empresa,"Activo",$start, 1000,$em,$tipo);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getNombresClientesAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emGeneral = $this->get('doctrine')->getManager('telconet_general');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonNombresClientes($empresa,"Activo",$start, 100);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getHistorialServicioAction(){                               
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emGeneral = $this->get('doctrine')->getManager('telconet_general');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->query->get('idServicio');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonHistorialServicio($idServicio,$start, 50000, $emGeneral);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getPopsAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonPop($empresa,"Activo",$start, 2000, $emInfraestructura);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getRadiosAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonRadio($empresa,"Activo",$start, 1000, $emInfraestructura);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getDslamsPorPopAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $popId = $peticion->query->get('popId');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonDslamsPorPop($popId,$empresa,"Activo",$start, 100, $emInfraestructura);
        $respuesta->setContent($objJson);
        
        return $respuesta;
        
    }
    
    public function getPuertosPorDslamAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        
        $peticion = $this->get('request');
        
        $dslamId = $peticion->query->get('dslamId');
        $estado = $peticion->query->get('estado');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $arrayParametros = array(
                    'intIdElemento'             => $dslamId,
                    'strEstado'                 => $estado,
                    'intStart'                  => $start,
                    'intLimit'                  => $limit,
                    'entityEmInfraestructura'   => $emInfraestructura,
                    'strTipoInterface'          => ""
                );
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonPuertosPorDslam($arrayParametros);
        $respuesta->setContent($objJson);
        
        return $respuesta;
        
    }

    public function getDatosClienteAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $emComercial = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonDatosCliente($idServicio,"Activo",$start, 1000, $emComercial);
        
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
 
    /*
     * 
     * Documentación para el método 'getDatosBackboneAction'.
     *
     * Metodo utilizado para obtener datos BackBone
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 14-07-2015
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.2 03-05-2021 | Se ajusta el llamado del metodo generarJsonDatosBackbone() para que acepte un arreglo como parametro.
     * 
     */

    public function getDatosBackboneAction()
    {
        $respuesta          = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request            = $this->get('request');
        $session            = $request->getSession();
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral          = $this->get('doctrine')->getManager('telconet_general');
        /* @var $migracion InfoServicioTecnicoService */
        $tecnicoService     = $this->get('tecnico.InfoServicioTecnico');
        $empresa            = $session->get('idEmpresa');
        $peticion           = $this->get('request');
        $idServicio         = $peticion->get('idServicio');
        $tipoElementoPadre  = $peticion->get('tipoElementoPadre');
        $objJson            = $this->getDoctrine()
                                   ->getManager("telconet_infraestructura")
                                   ->getRepository('schemaBundle:InfoServicioTecnico')
                                   ->generarJsonDatosBackbone(
                                       array(
                                       'idServicio' => $idServicio,
                                       'empresa' => $empresa,
                                       'serviceTecnico' => $tecnicoService,
                                       'tipoElementoPadre' => $tipoElementoPadre,
                                       'emComercial' => $emComercial,
                                       'emInfraestructura' => $emInfraestructura,
                                       'emGeneral' => $emGeneral
                                   ));


        $respuesta->setContent($objJson);
        return $respuesta;
    }
    
    /*
     * getDatosTrasladoExtenderAction
     * 
     * Método utilizado para obtener datos del equipo EXTENDER DUAL BAND a trasladar 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 26-02-2019
     */
    public function getDatosTrasladoExtenderAction()
    {
        $objRespuesta       = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest         = $this->get('request');
        $objSession         = $objRequest->getSession();
        /* @var $migracion InfoServicioTecnicoService */
        $intIdEmpresa       = $objSession->get('idEmpresa');
        $intIdServicio      = $objRequest->get('intIdServicio');
        $strTipoServicio    = $objRequest->get('strTipoServicio');
        
        $arrayParametros = array();
        $arrayParametros['intIdServicio']   = $intIdServicio;
        $arrayParametros['strTipoServicio'] = $strTipoServicio;
        $arrayParametros['intIdEmpresa']    = $intIdEmpresa;
        $arrayParametros['objEmComercial']  = $this->get('doctrine')->getManager('telconet');
        $arrayParametros['objServicioTecnicoService'] = $this->get('tecnico.InfoServicioTecnico');
        $objJson            = $this->getDoctrine()
                                   ->getManager("telconet_infraestructura")
                                   ->getRepository('schemaBundle:InfoServicioTecnico')
                                   ->generarJsonTrasladoExtender($arrayParametros);
        $objRespuesta->setContent($objJson);
        return $objRespuesta;
    }

    /*
     * getDatosTrasladoNetlifeCamAction
     * 
     * Método utilizado para obtener datos del equipo NetlifeCam a trasladar 
     *
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.1 25-10-2021
     * 
     */
    public function getDatosTrasladoNetlifeCamAction()
    {
        $objRespuesta       = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest         = $this->get('request');
        $objSession         = $objRequest->getSession();
        $intIdEmpresa       = $objSession->get('idEmpresa');
        $intIdServicio      = $objRequest->get('idServicio');
        
        $arrayParametros = array();
        $arrayParametros['intIdServicio']   = $intIdServicio;
        $arrayParametros['intIdEmpresa']    = $intIdEmpresa;
        $arrayParametros['objEmComercial']  = $this->get('doctrine')->getManager('telconet');
        $arrayParametros['objServicioTecnicoService'] = $this->get('tecnico.InfoServicioTecnico');
        $objJson            = $this->getDoctrine()
                                   ->getManager("telconet_infraestructura")
                                   ->getRepository('schemaBundle:InfoServicioTecnico')
                                   ->generarJsonTrasladoNetlifeCam($arrayParametros);
        $objRespuesta->setContent($objJson);
        return $objRespuesta;
    }

    /**
     * Metodo que obtiene los datos necesarios para mostrar la informacion tecnica de los servicios
     * Wifi Alquiler de equipos, en el grid Tecnico.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 27-08-2019
     * @return json
     * 
     * @author Pablo Pin  <ppin@telconet.ec>
     * @version 1.1 28-11-2019 - Se realiza un ajuste para que solo traiga las caracteristicas en estado Activo.
     * 
     */
    public function getDatosWifiAlquilerAction()
    {
        $objRequest         = $this->get('request');
        $intIdServicio      = $objRequest->get('idServicio');
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $arrayResponse      = array();

        $arrayCaracteristicas = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                ->findBy(array(
                                        'servicioId' => $intIdServicio,
                                        'estado' => 'Activo'
                                    ));

        foreach ($arrayCaracteristicas as $objCaracteristica)
        {
            $objProductoCaracteristica = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->find($objCaracteristica->getProductoCaracterisiticaId());

            $objAdmiCaracteristica = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->
                find($objProductoCaracteristica->getCaracteristicaId());

            $arrayResponse[$this->camelCase($objAdmiCaracteristica->getDescripcionCaracteristica())] = $objCaracteristica->getValor();

        }

        $objInfoServicioTecnico = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
            ->findOneBy(array('servicioId' => $intIdServicio));

        if (is_object($objInfoServicioTecnico) && $objInfoServicioTecnico->getElementoClienteId())
        {
            $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                ->find($objInfoServicioTecnico->getElementoClienteId());

            if ($objInfoServicioTecnico->getUltimaMillaId())
            {
                $objTipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                    ->find($objInfoServicioTecnico->getUltimaMillaId());
            }

            if (is_object($objInfoElemento) && $objInfoElemento->getId())
            {
                $objAdmiModeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                    ->find($objInfoElemento->getModeloElementoId());
            }
        }


        $arrayResponse['elementoClienteId'] = is_object($objInfoElemento) ? $objInfoElemento->getId() : null;
        $arrayResponse['serieElemento']     = is_object($objInfoElemento) ? $objInfoElemento->getSerieFisica() : null;
        $arrayResponse['modeloElemento']    = is_object($objAdmiModeloElemento) ? $objAdmiModeloElemento->getNombreModeloElemento() : null;
        $arrayResponse['ultimaMilla']       = is_object($objTipoMedio) ? $objTipoMedio->getNombreTipoMedio() : null;
        
        return new JsonResponse($arrayResponse);

    }

    /**
     * Método que obtiene los datos necesarios para mostrar la informaciópn técnica de los servicios
     * sin flujo definido de manera dinamica.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 10-06-2020
     * @return json
     *
     *
     */
    public function getDataCaracteristicasAction()
    {
        $objRequest         = $this->get('request');
        $intIdServicio      = $objRequest->get('idServicio');
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral      = $this->getDoctrine()->getManager("telconet_general");
        $arrayResponse      = array();

        $arrayCaracteristicas = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findBy(array(
                'servicioId' => $intIdServicio,
                'estado' => 'Activo'
            ));

        /*Obtenemos el array del parámetro INSTALACIÓN SIMULTANEA.*/
        $objParamsDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->get('CARACTERISTICAS_SERVICIOS_SIMULTANEOS',
                'TECNICO',
                'INSTALACION_SIMULTANEA',
                '',
                '',
                '',
                '',
                '',
                '',
                10);

        /*Si la operación anterior haya traido data.*/
        if (is_array($objParamsDet) && !empty($objParamsDet))
        {
            /*Convertimos el contenido de VALOR2 a un objeto asociativo.*/
            $objNoMostrarData = json_decode($objParamsDet[0]['valor2'], true);
            $arrayNoMostrarData = $objNoMostrarData['NO_MOSTRAR_DATA'];
        }

        foreach ($arrayCaracteristicas as $objCaracteristica)
        {
            $objProductoCaracteristica = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->find($objCaracteristica->getProductoCaracterisiticaId());

            /*Validamos si la variable fue definida y si el id esta dentro del arreglo, para saltarlo.*/
            if (isset($arrayNoMostrarData) &&
                in_array($objProductoCaracteristica->getCaracteristicaId()->getId(), $arrayNoMostrarData))
            {
                continue;
            }

            $objAdmiCaracteristica = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->
            find($objProductoCaracteristica->getCaracteristicaId());

            $arrayCaracteristica = array(
                'label' => $objAdmiCaracteristica->getDescripcionCaracteristica(),
                'descripcionCaracteristica' => $objAdmiCaracteristica->getDescripcionCaracteristica(),
                'valor' => $objCaracteristica->getValor()
            );

            $arrayResponse[] = $arrayCaracteristica;

        }

        $objInfoServicioTecnico = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
            ->findOneBy(array('servicioId' => $intIdServicio));

        if (is_object($objInfoServicioTecnico) && $objInfoServicioTecnico->getElementoClienteId())
        {
            $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                ->find($objInfoServicioTecnico->getElementoClienteId());

            if ($objInfoServicioTecnico->getUltimaMillaId())
            {
                $objTipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                    ->find($objInfoServicioTecnico->getUltimaMillaId());
            }

            if (is_object($objInfoElemento) && $objInfoElemento->getId())
            {
                $objAdmiModeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                    ->find($objInfoElemento->getModeloElementoId());

            }
        }

        array_push($arrayResponse, array(
            'label' => 'serie',
            'descripcionCaracteristica' => 'serieElemento',
            'valor' => is_object($objInfoElemento) ? $objInfoElemento->getSerieFisica() : null
        ));

        array_push($arrayResponse, array(
            'label' => 'modelo',
            'descripcionCaracteristica' => 'modeloElemento',
            'valor' => is_object($objAdmiModeloElemento) ? $objAdmiModeloElemento->getNombreModeloElemento() : null
        ));

        array_push($arrayResponse, array(
            'label' => 'ultima milla',
            'descripcionCaracteristica' => 'ultimaMilla',
            'valor' => is_object($objTipoMedio) ? $objTipoMedio->getNombreTipoMedio() : null
        ));

        return new JsonResponse($arrayResponse);

    }

   /**
     * Método para convertir strings en camelCase.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 27-08-2019
     * @return string
     * 
     */
    public function camelCase($strString, $arrayDontStrip = [])
    {
        return lcfirst(str_replace(' ', '', ucwords(preg_replace('/^a-z0-9' . implode('', $arrayDontStrip) . ']+/', ' ',
            str_replace('_', ' ', strtolower($strString))))));
    }

    /*
     * getDatosSincronizarExtenderAction
     * 
     * Método utilizado para obtener datos del equipo EXTENDER DUAL BAND a sincronizar 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 12-06-2019
     */
    public function getDatosSincronizarExtenderAction()
    {
        $objJsonResponse    = new JsonResponse();
        $objRequest         = $this->get('request');
        $objSession         = $objRequest->getSession();
        $intIdEmpresa       = $objSession->get('idEmpresa');
        $intIdServicio      = $objRequest->get('intIdServicio');
        $strTipoServicio    = $objRequest->get('strTipoServicio');
        
        $arrayParametros = array();
        $arrayParametros['intIdServicio']   = $intIdServicio;
        $arrayParametros['strTipoServicio'] = $strTipoServicio;
        $arrayParametros['intIdEmpresa']    = $intIdEmpresa;
        $arrayParametros['objEmComercial']  = $this->get('doctrine')->getManager('telconet');
        $arrayParametros['objServicioTecnicoService'] = $this->get('tecnico.InfoServicioTecnico');
        $arrayRespuesta = $this->getDoctrine()
                               ->getManager("telconet_infraestructura")
                               ->getRepository('schemaBundle:InfoServicioTecnico')
                               ->generarJsonSincronizarExtender($arrayParametros);
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    
    /**
     * getDatosLineasAction
     *
     * Metodo que obtiene los datos de las lineas telefonicas
     *
     * return $objRespuesta
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 16-02-2017
     */
    
    public function getDatosLineasAction()
    {
        $objRespuesta   = new JsonResponse();
        $emComercial    = $this->get('doctrine')->getManager('telconet');
        $objPeticion    = $this->get('request');
        $intIdServicio  = $objPeticion->get('idServicio');
        $strNumero      = '';
        $strDominio     = '';

        $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        
        if(is_object($objServicio))
        {
            $objProducto = $objServicio->getProductoId();

            if(is_object($objProducto))
            {
                $objSpcNumero = $serviceServicioTecnico->getServicioProductoCaracteristica($objServicio, "NUMERO", $objProducto);
                
                if(is_object($objSpcNumero))
                {
                    $strNumero = $objSpcNumero->getValor();
                }
                
                $objSpcDominio = $serviceServicioTecnico->getServicioProductoCaracteristica($objServicio, "DOMINIO", $objProducto);            
                if(is_object($objSpcDominio))
                {
                    $strDominio = $objSpcDominio->getValor();
                } 
            
            }
        }
        
        $arrayEncontrados[] = array( 'numeroTelefono'  => $strNumero,
                                     'dominio'         => $strDominio );
 

        $jsonData = json_encode($arrayEncontrados);
        $strResultado = '{"total":1,"encontrados":' . $jsonData . '}';

        $objRespuesta->setContent($strResultado);
        return $objRespuesta;
    }

    /**
     * activarLinea
     *
     * Metodo que obtiene los datos de las lineas telefonicas
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 16-02-2017
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 11-04-2017 - Se realizaron ajustes para registrar en el historial del servicio la acción de 'confirmarServicio' o
     *                           ingresar en la observación 'Se confirmo el servicio'
     */

    public function activarLineaAction()
    {
        
        $objRespuesta       = new JsonResponse();
        
        $objRequest         = $this->get('request');
        $objSession         = $objRequest->getSession();
        $intIdServicio      = $objRequest->get('idServicio');
        $strDominio         = $objRequest->get('dominio');
        $strContrasena      = $objRequest->get('contrasena');
        $strTelefono        = $objRequest->get('telefono');
        $strIpClient        = $objRequest->getClientIp();
        $strUser            = $objSession->get('user');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
      
        
        $arrayPeticiones['intIdServicio']     = $intIdServicio;
        $arrayPeticiones['strDominio']        = $strDominio;
        $arrayPeticiones['strContrasena']     = $strContrasena;
        $arrayPeticiones['strTelefono']       = $strTelefono;
        $arrayPeticiones['strUser']           = $strUser;
        $arrayPeticiones['strIpClient']       = $strIpClient;
        $arrayPeticiones['strPrefijoEmpresa'] = $strPrefijoEmpresa;

        $servicePuertoService = $this->get('tecnico.InfoActivarPuerto');
        $arrayRespuesta       = $servicePuertoService->activarLinea($arrayPeticiones);
        
        return $objRespuesta->setContent($arrayRespuesta[0]['mensaje']);
        
    }

    /**
     * Funcion que sirve para cargar los datos de CPE de clientes
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.1 06-05-2016    Se agrega parametro empresa en metodo generarJsonIpPublicaPorServicio por conflictos de 
     *                            producto INTERNET DEDICADO
     * 
     * @since 1.0
     */
    public function getDatosCpeTecnicoAction()
    {
        $respuesta         = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request           = $this->get('request');
        $session           = $request->getSession();
        $emComercial       = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa           = $session->get('idEmpresa');
        $prefijoEmpresa    = $session->get('prefijoEmpresa');
        $peticion          = $this->get('request');
        $idServicio        = $peticion->get('idServicio');
        $start             = $peticion->query->get('start');
        $limit             = $peticion->query->get('limit');
        
        //migracion_ttco_md
        $arrayEmpresaMigra = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                         ->getEmpresaEquivalente( $idServicio, 
                                                                  $prefijoEmpresa );

        if($arrayEmpresaMigra)
        {
            $empresa        = $arrayEmpresaMigra['id'];
            $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
        }

        //wsanchez separacion de la info a buscar por su empresa
        if ($prefijoEmpresa == "TTCO")
        {
            $objJson = $this->getDoctrine()
                            ->getManager("telconet_infraestructura")
                            ->getRepository('schemaBundle:InfoServicioTecnico')
                            ->generarJsonDatosCpe( $idServicio, 
                                                   $start, 
                                                   $limit, 
                                                   $emComercial, 
                                                   $emInfraestructura,
                                                   $empresa );
        }
        else if ($prefijoEmpresa == "MD") 
        {
            $existen         = false;
            $servicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);                    
            $solicitudCambio = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                           ->findSolicDescuentoPorServicio( $servicio->getId(), 
                                                                            "SOLICITUD CAMBIO EQUIPO", 
                                                                            "AsignadoTarea" );

            $cuantos = count($solicitudCambio);
            if ($cuantos > 0)
            {
                $existen = true;
            }
            else 
            {
                $solicitudCambio = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                               ->findSolicDescuentoPorServicio( $servicio->getId(), 
                                                                                "SOLICITUD CAMBIO DE MODEM INMEDIATO", 
                                                                                "AsignadoTarea");
                $cuantos = count($solicitudCambio);
                if ($cuantos > 0)
                    $existen = true;
            }
                        
            if ($existen)
            {
                $idSolicitudCambio = $solicitudCambio[0];
                $objJson           = $this->getDoctrine()
                                          ->getManager("telconet_infraestructura")
                                          ->getRepository('schemaBundle:InfoServicioTecnico')
                                          ->generarJsonDatosElementos( $servicio->getId(), 
                                                                       $idSolicitudCambio->getId(), 
                                                                       $emComercial, 
                                                                       $emInfraestructura,
                                                                       $empresa );
            }
            else $objJson = "";
        }
        
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }

    /**
     * Documentación para el método 'getInterfacesPorElementoAction'.
     * 
     * Funcion que sirve para cargar las interfaces IN/OUT
     * 
     * @version 1.0 version no documentada 
     * 
     * @author Angel Reina   <areina@telconet.ec>
     * @version 1.1 08-04-2019    Se agrega validación para las interfaces OUT splitte L1/ODF MIGRACIÓN SERVICIOS TELLION A HW/ZTE
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 04-08-2020 - Se agrega el filtro del cliente, para mostrar las interfaces ocupadas solo del mismo cliente.
     *
     */
    public function getInterfacesPorElementoAction(){
        ini_set('max_execution_time', 400000);
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idElemento = $peticion->get('idElemento');
        $strTipoInterface = $peticion->get('tipoInterface');
        $intIdCliente = $peticion->get('intIdCliente');
        $intIdInterfaceAnterior = $peticion->get('intIdInterfaceAnterior');
        $estado = $peticion->get('estado');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        if($estado){
            
        }
        else{
            $estado = "Todos";
        }
        
        $arrayParametros = array(
                    'intIdCliente'              => $intIdCliente,
                    'intIdInterfaceNot'         => $intIdInterfaceAnterior,
                    'intIdElemento'             => $idElemento,
                    'strEstado'                 => $estado,
                    'intStart'                  => $start,
                    'intLimit'                  => 500,
                    'entityEmInfraestructura'   => $emInfraestructura,
                    'strTipoInterface'          => $strTipoInterface
                );
        
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonPuertosPorDslam($arrayParametros);
            
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    /**
     * Función que obtiene los elementos conectores de un elemento contenedor
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 19/02/2018 Se agrega validación para el producto Internet Small Business
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 28/11/2018 Se agregan validaciones para gestionar los productos de la empresa TNP
     * @since 1.1
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.3 12-06-2019 - Se agrega funcionalidad que permite gestionar la restriccion por empresa.
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 1.4 02-03-2023 - Se agrega validación para la empresa Ecuanet para gestionar la restricción.
     *
     */
    public function getElementosConectorPorElementoContenedorAction()
    {
        ini_set('max_execution_time', 400000);
        $objResponse            = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $strPrefijoEmpresa      = $objSession->get('prefijoEmpresa');
        $intIdServicio          = $objRequest->get('idServicio');
        $strEsIsb               = $objRequest->get('esISB');
        $objInfoServicioService = $this->get('comercial.infoservicio');
        if($strPrefijoEmpresa == "MD" || $strPrefijoEmpresa == "EN" ||
          ($strPrefijoEmpresa == "TN" && $strEsIsb != "NO") || ($strPrefijoEmpresa == "TNP"))
        {
            $strTipoElemento = "SPLITTER";
        }
        else if($strPrefijoEmpresa == "TTCO")
        {
            $strTipoElemento = "DSLAM";
        }

        $intIdElemento  = $objRequest->get('idElementoContenedor');
        $intStart       = $objRequest->query->get('start');

        $strJson    = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                        ->generarJsonElementosConectorPorElementoContenedor($intIdElemento, 
                                                                                            $strTipoElemento,
                                                                                            array("Activo", "Restringido"),
                                                                                            $intStart, 
                                                                                            100, 
                                                                                            $emInfraestructura);

        $strJson = $objInfoServicioService->filtrarRestringidosArray($strJson, $strPrefijoEmpresa, $intIdServicio);

        $objResponse->setContent($strJson);

        return $objResponse;
    }

    public function getParametrosInicialesAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        
        $peticion = $this->get('request');
        
        $modeloElemento = $peticion->get('modeloElemento');
        $interfaceElementoId = $peticion->get('interfaceElementoId');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonParametrosIniciales($modeloElemento, $interfaceElementoId,"Activo",$start, 1000);
        
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    public function getParametrosInicialesMdAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion = $this->get('request');
        $em = $this->get('doctrine')->getManager('telconet');
        
        $idServicio = $peticion->get('idServicio');
        $idProducto = $peticion->get('idProducto');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $caracteristica1 = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "POTENCIA", "estado" => "Activo"));
        $producto = $em->getRepository('schemaBundle:AdmiProducto')->find($idProducto);
        $prodCaracteristica1 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $producto->getId(), "caracteristicaId" => $caracteristica1->getId()));
        
        $servProdCaract = $em->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "productoCaracterisiticaId" => $prodCaracteristica1->getId(), "servicioId" => $idServicio));
        
        if($servProdCaract){
            $respuesta->setContent($servProdCaract->getValor());
        }
        else{
            $respuesta->setContent("NA");
        }
        
        return $respuesta;
    }
    
    /**
     * Función que sirve para buscar los elementos por empresa,
     * tipo elemento e ip
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 13-01-2014
     * 
     * @author Jesús Bpzada <jbozada@telconet.ec>
     * @version 1.1 11-07-2018    Se agrega nuevo parámetro para ejecuciones de método desde el grid técnico de clientes
     * @since 1.0
     */
    public function getElementosPorEmpresaAction()
    {
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $peticion         = $this->get('request');
        $session          = $peticion->getSession();
        $empresa          = $session->get('idEmpresa');        
        $nombreElemento   = $peticion->query->get('nombreElemento');
        $tipoElemento     = $peticion->query->get('tipoElemento');
        $ip               = $peticion->query->get('ip');
        $start            = $peticion->query->get('start');
        $limit            = $peticion->query->get('limit');
        $strTipoEjecucion = $peticion->query->get('strTipoEjecucion');
        
        $arrayParametros                      = array();
        $arrayParametros['strNombreElemento'] = $nombreElemento;
        $arrayParametros['strIp']             = $ip;
        $arrayParametros['strTipoElemento']   = $tipoElemento;
        $arrayParametros['strEmpresaCod']     = $empresa;
        $arrayParametros['strEstado']         = "Todos";
        $arrayParametros['intStart']          = $start;
        $arrayParametros['intLimit']          = $limit;
        $arrayParametros['strTipoEjecucion']  = $strTipoEjecucion;
        
        
        $objJson = $this->getDoctrine()
                        ->getManager("telconet_infraestructura")
                        ->getRepository('schemaBundle:InfoServicioTecnico')
                        ->generarJsonElementosPorEmpresa($arrayParametros);
        $respuesta->setContent($objJson);
        
        return $respuesta;        
    }

    /**
     * Funcion que obtiene los elementos por tipo y modelo
     * 
     * @author modificado John Vera <javera@telconet.ec>
     * @since 1.0
     * @version 1.1 22-04-2015
     * 
     * @author John Vera
     * @version 1.2 07/01/2016 Validacion de tellion con CNR
     * 
     * @author Jesus Bozada
     * @version 1.3 28/03/2016 Se agrega validación para operaciones de cambio de linea pom y cambio de puerto
     * 
     * @author Jesus Bozada
     * @version 1.4 06/04/2016 Se agrega validación para operaciones de cambio de linea pom y cambio de puerto (se soporte un escenario adicional)
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 19/02/2018 Se agrega validación para el producto Internet Small Business
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 28/11/2018 Se agregan validaciones para gestionar los productos de la empresa TNP
     * @since 1.5
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 21/05/2020 Se agrega la obtención de la marca del olt para que la consulta sea por marca y no por modelo en el cambio de línea
     *                          pon 
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.7 27/08/2022 Se agrega la obtención del tipo red para poder permitir que la consulta sea para olt 
     *          multiplataforma en cambio de linea Pon 
     * 
     * @author jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 1.8 03/03/2023 Se agrega validación para la empresa ECUANET para permitir flujo de MD al cambiar puerto y línea Pon.
     */
    public function getElementosPorTipoAction(){
        $respuesta                  = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();
        $emInfraestructura          = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial                = $this->get('doctrine')->getManager('telconet');
        $strCodEmpresa              = $objSession->get('idEmpresa');
        $strLdap                    = $objRequest->query->get('ldap');
        $strValidaTecnologiaNp      = $objRequest->query->get('validaTnp'); //parametro para validar tecnologia de nuevos planes
        $strTipoElemento            = $objRequest->query->get('tipoElemento');
        $strNombreMarcaElemento     = $objRequest->query->get('marcaElemento');
        $strNombreModeloElemento    = $objRequest->query->get('modeloElemento');
        $intIdServicio              = $objRequest->query->get('idServicio');
        $strTipoRed                 = $objRequest->query->get('strTipoRed');
        $strNombreElemento          = $objRequest->query->get('query');
        $intStart                   = $objRequest->query->get('start');
        $intLimit                   = $objRequest->query->get('limit');
        $strEsIsb                   = $objRequest->query->get('esISB');
        $strPrefijoEmpresa          = $objSession->get('prefijoEmpresa');

        if((isset($strEsIsb) && !empty($strEsIsb) && $strEsIsb === "SI" && $strPrefijoEmpresa != 'TNP') || $strPrefijoEmpresa == 'EN')
        {
            $arrayEmpresaEquiv = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                             ->getEmpresaEquivalente($intIdServicio, $strPrefijoEmpresa);

            if(isset($arrayEmpresaEquiv) && !empty($arrayEmpresaEquiv))
            {
                $strCodEmpresa = $arrayEmpresaEquiv['id'];
            }
        }
        $arrayParametros    = array(
                                    'idServicio'            => $intIdServicio,
                                    'nombreElemento'        => $strNombreElemento,
                                    'nombreMarcaElemento'   => $strNombreMarcaElemento,
                                    'nombreModeloElemento'  => $strNombreModeloElemento,
                                    'tipoElemento'          => $strTipoElemento,
                                    'empresa'               => $strCodEmpresa,
                                    'estado'                => 'Todos',
                                    'start'                 => $intStart,
                                    'limit'                 => $intLimit,
                                    'emInfraestructura'     => $emInfraestructura,
                                    'emComercial'           => $emComercial,
                                    'validaCnr'             => $strLdap,
                                    'validaTnp'             => $strValidaTecnologiaNp,
                                    'esIsb'                 => $strEsIsb,
                                    'tipoRed'               => $strTipoRed,
                                    'prefijoEmpresa'        => $strPrefijoEmpresa
                                );
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonElementosPorTipo($arrayParametros);
        $respuesta->setContent($objJson);
        
        return $respuesta;
        
    }
    /**getElementosContenedoresPorPuertoAction
     * obtienes las cajas de dispersion segun la interface del elemento
     * 
     * @author modificado John Vera <javera@telconet.ec>
     * @version 1.1 5-11-2014
     * 
     */
    public function getElementosContenedoresPorPuertoAction()
    {
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session = $request->getSession();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $peticion = $this->get('request');

        $idInterfaceElemento = $peticion->query->get('idInterfaceElemento');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $arrayElementos = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoEnlace')
            ->getElementosPorInterfaz($idInterfaceElemento, 'SPLITTER', 2);

        $arrayElementos = explode('<>', $arrayElementos);

        if(count($arrayElementos) > 1)
        {
            foreach($arrayElementos as $registro)
            {
                $arrayRegistro = explode('&', $registro);

                if ($arrayRegistro[5] && $arrayRegistro[6])
                {
                    $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($arrayRegistro[5]);
                    // Funcion para validar la disponibilidad de la caja.
                    $arrayElemento[] = array(
                        'idElementoContenedor' => $arrayRegistro[5],
                        'nombreElementoContenedor' => $arrayRegistro[6],
                        'estadoElemento' => $objInfoElemento->getEstado()
                    );
                }
            }
            $data = json_encode($arrayElemento);
            $resultado = "{'total':'".count($arrayElementos)."','encontrados':$data}";
        }
        else
        {
            $resultado = "{'total':'0','encontrados':''}";
        }
        $respuesta->setContent($resultado);

        return $respuesta;
    }

    /**
     * Función que sirve para obtener las ultima milla.
     *
     * Version Inicial
     * @version 1.0
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 26-06-2021 - Se agrega la validación para obtener última milla para los servicios GPON.
     */
    public function getUltimaMillaAction()
    {
        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objRequest   = $this->get('request');
        $objSession   = $objRequest->getSession();
        $intIdEmpresa = $objSession->get('idEmpresa');
        $strPrefijoEmpresa = $objSession->get('prefijoEmpresa');
        $strTipoRed   = $objRequest->get('strTipoRed') ? $objRequest->get('strTipoRed') : "";
        $strNombreTecnico = $objRequest->get('strNombreTecnico') ? $objRequest->get('strNombreTecnico') : "";
        $intStart     = $objRequest->query->get('start');
        $intLimit     = $objRequest->query->get('limit');
        $emGeneral    = $this->getDoctrine()->getManager("telconet_general");
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');

        //se verifica si el servicio es tipo de red GPON
        $booleanTipoRedGpon = false;
        if($strPrefijoEmpresa == 'TN' && !empty($strTipoRed))
        {
            $arrayParVerTipoRed = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $strTipoRed,
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
            {
                $booleanTipoRedGpon = true;
            }
        }
        if($booleanTipoRedGpon && !empty($strNombreTecnico))
        {
            $arrayEncontrados = [];
            $arrayTipoMedio   = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->findByEstado('Activo');
            $arrayParametrosDetGPON = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('NUEVA_RED_GPON_TN',
                                                      'COMERCIAL',
                                                      '',
                                                      '',
                                                      $strNombreTecnico,
                                                      '',
                                                      '',
                                                      '',
                                                      'ULTIMA_MILLA_GPON_TN',
                                                      $intIdEmpresa);
            foreach($arrayTipoMedio as $objTipoMedio)
            {
                if(isset($arrayParametrosDetGPON) && !empty($arrayParametrosDetGPON) && is_array($arrayParametrosDetGPON))
                {
                    foreach($arrayParametrosDetGPON as $arrayItemGPON)
                    {
                        if($arrayItemGPON['valor2'] == $objTipoMedio->getNombreTipoMedio() && $arrayItemGPON['estado'] == 'Activo')
                        {
                            $arrayEncontrados[] = array('idTipoMedio'     => $objTipoMedio->getId(),
                                                        'nombreTipoMedio' => $objTipoMedio->getNombreTipoMedio());
                        }
                    }
                }
            }
            $objJson = '{"total":"'.count($arrayEncontrados).'","encontrados":'.json_encode($arrayEncontrados).'}';
        }
        else
        {
            $objJson = $this->getDoctrine()
                ->getManager("telconet_infraestructura")
                ->getRepository('schemaBundle:InfoServicioTecnico')
                ->generarJsonUltimaMilla("Activo",$intStart,$intLimit,$emInfraestructura);
        }
        $objResponse->setContent($objJson);
        return $objResponse;
    }
    
    /**
     * getUltimaMillaCambioMedioAction
     * Método que retorna el tipo medio para realizar un cambio de tipo medio
     * 
     * @author Walther Joao Gaibor C<wgaibor@telconet.ec>
     * @version 1.0
     * @since 27-01-2018
     * @return Response
     */
    public function getUltimaMillaCambioMedioAction(){
        $arrayRespuesta = new Response();
        $arrayRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest     = $this->get('request');
        $emGeneral      = $this->getDoctrine()->getManager("telconet_general");

        $objPeticion       = $this->get('request');
        
        $arrayValorTipoMedio = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                         ->getOne('LISTADO_TIPO_MEDIO',
                                                  'TECNICO',
                                                  '',
                                                  '',
                                                  $objRequest->get('idTipoMedio'),
                                                  '',
                                                  '',
                                                  '',
                                                  '',
                                                  '');

        if(isset($arrayValorTipoMedio['valor2']))
        {
            $arrayParametros = array('strEstado'        => 'Activo',
                                     'arrayTipoMedio'   => $arrayValorTipoMedio['valor2'],
                                     'intStart'         => $objPeticion->query->get('start'),
                                     'intLimit'         => $objPeticion->query->get('limit'));

            $objJson = $this->getDoctrine()
                            ->getManager("telconet_infraestructura")
                            ->getRepository('schemaBundle:InfoServicioTecnico')
                            ->generarJsonUltimaMillaCambioMedio($arrayParametros);
            $arrayRespuesta->setContent($objJson);
        }

        return $arrayRespuesta;
    }
    
    /**
     * Funcion que obtiene los elementos que fueron
     * escogidos al crear un solicitud de cambio de elemento
     * 
     * @author Francisco Adum
     * @version 1.0 5-11-2014
     * 
     * @author Lizbeth Cruz
     * @version 1.2 13-03-2018 Se modifica la función para enviar por parámetros el nombre técnico de servicios Internet Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 25-02-2019 Se adapta función para obtener correctamente el nombre técnico del producto asociado al servicio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 02-05-2020 Se modifica la función para obtener el id del producto de Internet correspondiente por la reestructuración de
     *                          Servicios Small Business
     * 
     */
    public function getElementosPorSolicitudAction()
    {
        ini_set('max_execution_time', 400000);
        $objResponse        = new JsonResponse();
        $objRequest         = $this->get('request');
        $objSession         = $objRequest->getSession();
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $strCodEmpresa      = $objSession->get('idEmpresa');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
        $strEsIsb           = $objRequest->get('esIsb');
        $intIdServicio      = $objRequest->get('idServicio');
        $intIdProdServicio  = 0;
        
        if(isset($strEsIsb) && !empty($strEsIsb) && $strEsIsb === "SI")
        {
            $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio) && is_object($objServicio->getProductoId()))
            {
                $intIdProdServicio = $objServicio->getProductoId()->getId();
            }
            
            $arrayEmpresaEquiv  = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getEmpresaEquivalente($intIdServicio, $strPrefijoEmpresa);

            if(isset($arrayEmpresaEquiv) && !empty($arrayEmpresaEquiv))
            {
                $strPrefijoEmpresa = $arrayEmpresaEquiv['prefijo'];
            }
        }

        $objTipoSolicitudCambioModem    = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                      ->findOneBy(array("descripcionSolicitud" => "SOLICITUD CAMBIO DE MODEM INMEDIATO"));

        $objTipoSolicitudCambioEquip    = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                      ->findOneBy(array("descripcionSolicitud" => "SOLICITUD CAMBIO EQUIPO"));

        $objJson                        = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->generarJsonElementosPorSolicitud(array(
                                                                                        "intIdServicio"     => $intIdServicio, 
                                                                                        "intIdSolModem"     => $objTipoSolicitudCambioModem->getId(),
                                                                                        "intIdSolEquipo"    => $objTipoSolicitudCambioEquip->getId(),
                                                                                        "strEstadoSol"      => "AsignadoTarea", 
                                                                                        "strPrefijoEmpresa" => $strPrefijoEmpresa, 
                                                                                        "strCodEmpresa"     => $strCodEmpresa, 
                                                                                        "emComercial"       => $emComercial,
                                                                                        "strEsIsb"          => $strEsIsb,
                                                                                        "intIdProdServicio" => $intIdProdServicio));
        $objResponse->setContent($objJson);

        return $objResponse;
    }

    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO IP/IP FIJA/IP PUBLICA
     * ******************************************************
     */
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de ip 
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 15-09-2016 Se agrega el envío de correo al confirmar el servicio
     */
    public function confirmarServicioIpPublicaAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $em             = $this->get('doctrine')->getManager('telconet');
        $emSeguridad    = $this->get('doctrine')->getManager('telconet_seguridad');
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $empleadoSesion = $session->get('empleado');
        $strIpClient    = $request->getClientIp();
        $strUser        = $session->get('user');
        
        $idServicio     = $request->get('idServicio');
        $idAccion       = $request->get('idAccion');
        
        $servicio       = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion         = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("IP: Se confirmo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($strIpClient);
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        $arrayParametrosMail=array(
                                    "servicio"                      => $servicio,
                                    "prefijoEmpresa"                => $prefijoEmpresa,
                                    "empleadoSesion"                => $empleadoSesion,
                                    "idEmpresa"                     => $idEmpresa,
                                    "user"                          => $strUser,
                                    "ipClient"                      => $strIpClient,
        );
        /* @var $confirmar InfoConfirmarServicio */
        $confirmar = $this->get('tecnico.InfoConfirmarServicio');
        $confirmar->envioMailConfirmarServicio($arrayParametrosMail);
        
        return $respuesta;
    }
    
    /**
     * Funcion que agrega una ip en la base de datos
     * para el servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function agregarIpPublicaServicioAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emI = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $ip = $peticion->get('ip');
        $mascara = $peticion->get('mascara');
        $gateway = $peticion->get('gateway');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        
        $em->getConnection()->beginTransaction();
        $emI->getConnection()->beginTransaction();
        
        //info ip publica
        $infoIp = new InfoIp();
        $infoIp->setIp($ip);
        $infoIp->setMascara($mascara);
        $infoIp->setGateway($gateway);
        $infoIp->setTipoIp("PUBLICA");
        $infoIp->setVersionIp("IPV4");
        $infoIp->setEstado("Activo");
        $infoIp->setServicioId($idServicio);
        $infoIp->setUsrCreacion($session->get('user'));
        $infoIp->setFeCreacion(new \DateTime('now'));
        $infoIp->setIpCreacion($peticion->getClientIp());
        $emI->persist($infoIp);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se agrego una ip al servicio");
        $servicioHistorial->setEstado($servicio->getEstado());
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $em->persist($servicioHistorial);
        
        $emI->flush();
        $emI->getConnection()->commit();
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que obtiene datos de las ips que se encuentran
     * en la base de datos para el servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function getIpPublicaAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->query->get('idServicio');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet_infraestructura")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonIpPublica($idServicio,$start, 100, $em);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    /**
     * Funcion que elimina una ip de la base de datos para
     * el servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function eliminarIpPublicaAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emI = $this->get('doctrine')->getManager('telconet_infraestructura');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $spc = $peticion->get('spc');
        
        $ipObj = $emI->getRepository('schemaBundle:InfoIp')->find($spc);
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($ipObj->getServicioId());
        
        $em->getConnection()->beginTransaction();
        $emI->getConnection()->beginTransaction();
        
        $ipObj->setEstado("Eliminado");
        $emI->persist($ipObj);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se elimino la ip: ".$ipObj->getIp());
        $servicioHistorial->setEstado($servicio->getEstado());
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $em->persist($servicioHistorial);
        
        $emI->flush();
        $emI->getConnection()->commit();
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Cancel al servicio
     * adicional de ip
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cancelarServicioIpAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Cancel");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("IP: Se cancelo el servicio");
        $servicioHistorial->setEstado("Cancel");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a In-Corte al servicio
     * adicional de ip
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cortarServicioIpAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("In-Corte");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("IP: Se corto el servicio");
        $servicioHistorial->setEstado("In-Corte");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de ip
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function reconectarServicioIpAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("IP: Se reactivo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia el estado del servicio a Activo y
     * configura la ip grabada en el elemento (olt)
     * 
     * @author Creado: Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 17-10-2014
     * 
     * @author Modificado: Francisco Adum <fadum@telconet.ec>
     * @version 2.0 02-06-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.1 23-07-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.2 23-12-2015 Se agrega codigo para activacion de Ips Tellion CNR
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.3 18-08-2016 Se agrega seteo de campo Accion en registro de historial de servicio
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 2.4 27-06-2017  Se agrega validacion para que se ejecute el service de activacion de ips que usa el middleware
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.5 26-04-2017  Se agrega flujo para activar Ips adicionales para producto Small Business y finalizar tareas asociadas a la
     *                          solicitud de info técnica
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.6 23-07-2018  Se agrega programación para aprovisionar ips en nueva tecnología ZTE
     * @since 2.5
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.7 01-10-2018 Se agrega programación para eliminar característica de traslado de los servicios ips 
     *                         que no se trasladaron correctamente
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.8 28-11-2018  Se agregan validaciones para gestions los productos de la empresa TNP
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.9 11-02-2019 Se obtienen los nombres técnicos del servicio principal y sus ips de acuerdo al servicio Small Business o TelcoHome
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 2.10 05-08-2019 Lógica para activación de ip fija para los productos SMB.
     * @since 2.6
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 2.11 08-11-2019 Se agrega descripción de producto en la búsqueda de la función findOneBy, ya que actualmente
     *                          para el producto INTERNET SMALL BUSINESS existen n registros con el mismo nombre tecnico.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 2.12 12-11-2019 Se agrega lógica para que la búsqueda del producto sea dinámico tanto para MD como para TN.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 2.13 14-01-2020 Se agrega lógica para obtener el id del producto INTERNET SMALL BUSINESS.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.14 02-05-2020 Se elimina la función obtenerInfoMapeoProdPrefYProdsAsociados debido a que la función activarIpFijaAdicional
     *                           ya no necesita el envío de los parámetros strNombreTecnicoInternet y strNombreTecnicoIP
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.15 24-03-2021 Se valida si la ip es privada
     *
     */
    public function ajaxActivarIpFijaAction()
    {
        $respuesta  = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $result     = "Error no identificado";
        $parametros = array();
        
        $emComercial       = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSoporte         = $this->get('doctrine')->getManager('telconet_soporte');
        $peticion          = $this->get('request');
        $session           = $peticion->getSession();

        $idEmpresa         = $session->get('idEmpresa');
        $strPrefijoEmpresa = $session->get('prefijoEmpresa');
        $idServicio        = $peticion->get('idServicio');
        $idServicioRef     = $peticion->get('idServicioRef');
        $macIpFija         = $peticion->get('macIpFija');
        $tieneIpFijaActiva = $peticion->get('tieneIpFijaActiva');
        $strUsrCreacion    = $session->get('user');
        $strIpCreacion     = $peticion->getClientIp();
        $strTipoNegocio    = "";
        $flagMiddleware    = false;
        $boolFinalizaTarea = false;
        
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();

        try
        {
            $servicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            $servicioInternet= $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicioRef);
            $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($idServicioRef);

            $interfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($servicioTecnico->getInterfaceElementoId());

            $elementoId       = $interfaceElemento->getElementoId();
            $elemento         = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
            $modeloElementoId = $elemento->getModeloElementoId();
            $modeloElemento   = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);

            if($strPrefijoEmpresa === "TN" || $strPrefijoEmpresa === "TNP")
            {
                $boolFinalizaTarea  = true;
                $objProducto        = $servicioInternet->getProductoId();
            }
            else
            {
                $objProducto    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array("esPreferencia" => "SI", 
                                                                                                            "nombreTecnico" => "INTERNET", 
                                                                                                            "empresaCod"    => $idEmpresa, 
                                                                                                            "estado"        => "Activo"));
            }
            
            $entityPerfil     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy(array("descripcionCaracteristica" => "PERFIL", 
                                                              "estado"                    => "Activo"));
            $prodCaractPerfil = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array("productoId"          => $objProducto->getId(), 
                                                              "caracteristicaId"    => $entityPerfil->getId(), 
                                                              "estado"              => "Activo"));
            if(is_object($prodCaractPerfil))
            {
                $perfilProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->findOneBy(array("servicioId"                  => $idServicio, 
                                                                  "estado"                      => "Activo", 
                                                                  "productoCaracterisiticaId"   => $prodCaractPerfil->getId()));
            }
            else
            {
                $perfilProdCaract = null;
            }
            $objDetElemento   = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                  ->findOneBy(array('detalleNombre' => 'OLT MIGRADO CNR',
                                                                    'elementoId'    => $interfaceElemento->getElementoId()->getId()));
            
            $strTipoNegocio   = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();
            
            $objDetalleElementoMid  = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                            ->findOneBy(array(  "elementoId"   => $servicioTecnico->getElementoId(),
                                                                "detalleNombre"=> 'MIDDLEWARE',
                                                                "estado"       => 'Activo'));

            if($objDetalleElementoMid)
            {
                if($objDetalleElementoMid->getDetalleValor() == 'SI')
                {
                    $flagMiddleware = true;
                }
            }
            
            $strTipoIp = 'FIJA';
            
            if ($idEmpresa == '10')
            {
                $objCaracteristicaIpPrivada = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                          ->findOneBy(array( "descripcionCaracteristica" => "TIPO_ENRUTAMIENTO"));
                if(is_object($objCaracteristicaIpPrivada))
                {
                    $objProductoIp = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($servicio->getProductoId()->getId());

                    $objProdCaracteristicaIpPrivada = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                  ->findOneBy(array( "productoId"       => $objProductoIp->getId(), 
                                                                                     "caracteristicaId" => $objCaracteristicaIpPrivada->getId()
                                                                                   )
                                                                             );
                    if(is_object($objProdCaracteristicaIpPrivada))
                    {
                        $objInfoServicioProdCaractIpPrivada = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array( "servicioId"                 => $servicio->getId(), 
                                                                            "productoCaracterisiticaId" => $objProdCaracteristicaIpPrivada->getId()
                                                                         )
                                                                   );
                        if (is_object($objInfoServicioProdCaractIpPrivada))
                        {
                            $strIpPrivada = ($objInfoServicioProdCaractIpPrivada)?$objInfoServicioProdCaractIpPrivada->getValor():"";
                            $strTipoIp = strtoupper($strIpPrivada);
                        }
                    }
                }
            }
            
            if($flagMiddleware)
            {
                
                if($perfilProdCaract)
                {
                    $controlIp = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->tieneControlIpFIja($perfilProdCaract->getValor());
                }
                else
                {
                    $controlIp = "";
                }
                
                $ipFija = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array("servicioId"  => $servicio->getId(),
                                                              "tipoIp"      => $strTipoIp,
                                                              "estado"      => "Reservada"));
                
                $arrayDatos = array(    'servicio'                  => $servicio,
                                        'servicioInternet'          => $servicioInternet,
                                        'servicioTecnico'           => $servicioTecnico,
                                        'interfaceElemento'         => $interfaceElemento,
                                        'producto'                  => $objProducto,
                                        'ipFija'                    => $ipFija,
                                        'macIpFija'                 => $macIpFija,
                                        'idEmpresa'                 => $idEmpresa,
                                        'tieneIpFijaActiva'         => $tieneIpFijaActiva,
                                        'controlIpFija'             => $controlIp,
                                        'usrCreacion'               => $session->get('user'),
                                        'ipCreacion'                => $peticion->getClientIp(),
                                        'strPrefijoEmpresa'         => $strPrefijoEmpresa);
                
                $respuestaArray = $this->get('tecnico.InfoActivarPuerto')->activarIpFijaAdicional($arrayDatos);
                
                $status         = $respuestaArray['status'];
                $mensaje        = $respuestaArray['mensaje'];
            }
            else
            {
                if($modeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI")
                {
                    $entityIndice     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array("descripcionCaracteristica" => "INDICE CLIENTE", 
                                                                      "estado"                    => "Activo"));
                    $prodCaractIndice = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                    ->findOneBy(array("productoId"       => $objProducto->getId(), 
                                                                      "caracteristicaId" => $entityIndice->getId(), 
                                                                      "estado"           => "Activo"));
                    $indiceProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->findOneBy(array("servicioId"                  => $idServicioRef, 
                                                                      "estado"                      => "Activo", 
                                                                      "productoCaracterisiticaId"   => $prodCaractIndice->getId()));
                    $parametros['tieneIpFijaActiva']    = $tieneIpFijaActiva;
                    $parametros['servicio']             = $servicio;
                    $parametros['servicioTecnico']      = $servicioTecnico;
                    $parametros['producto']             = $objProducto;
                    $parametros['interfaceElemento']    = $interfaceElemento;
                    $parametros['modeloElemento']       = $modeloElemento;
                    $parametros['indice']               = $indiceProdCaract->getValor();
                    $parametros['macWifi']              = trim($macIpFija);
                    $parametros['perfil']               = $perfilProdCaract->getValor();
                    $parametros['controlIpFija']        = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                            ->tieneControlIpFIja($perfilProdCaract->getValor());
                    $parametros['usrCreacion']          = $session->get('user');

                    $parametros['tipoNegocio']          = $strTipoNegocio;

                    $activacion     = $this->get('tecnico.InfoActivarPuerto');
                    $respuestaArray = $activacion->activarIpsFijas($parametros);
                    $status         = $respuestaArray[0]['status'];
                    $mensaje        = $respuestaArray[0]['mensaje'];
                }
                else
                {
                    $ipFija = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId"  => $servicio->getId(),
                                                                  "tipoIp"      => $strTipoIp,
                                                                  "estado"      => "Reservada"));

                    $arrayPeticiones['ipFija']          = $ipFija->getIp();
                    $arrayPeticiones['mac']             = $macIpFija;
                    $arrayPeticiones['idServicio']      = $servicio->getId();
                    $arrayPeticiones['idEmpresa']       = $idEmpresa;
                    $arrayPeticiones['usrCreacion']     = $session->get('user');
                    $arrayPeticiones['ipCreacion']      = $peticion->getClientIp();
                    $arrayPeticiones['puertoNuevoOnt']  = "SI";

                    $cambiarPuertoService = $this->get('tecnico.InfoCambiarPuerto');
                    $respuestaArray       = $cambiarPuertoService->activarIpAdicionalHuawei($arrayPeticiones);
                    $status               = $respuestaArray[0]['status'];
                    $mensaje              = $respuestaArray[0]['mensaje'];
                }
            }

            //--------RESPUESTA-----------------------------------------------------*/
            if($status == "OK")
            {
                if($flagMiddleware)
                {
                    //ingresar mac nueva
                    $this->get('tecnico.InfoServicioTecnico')
                        ->ingresarServicioProductoCaracteristica($servicio, $objProducto, "MAC", $macIpFija, $session->get('user'));

                    //historial del servicio
                    $servicioHistorial = new InfoServicioHistorial();
                    $servicioHistorial->setServicioId($servicio);
                    $servicioHistorial->setObservacion("Se configuró Ip Fija:" . $ipFija->getIp() . " con Mac:" . $macIpFija);
                    $servicioHistorial->setEstado($servicio->getEstado());
                    $servicioHistorial->setUsrCreacion($session->get('user'));
                    $servicioHistorial->setFeCreacion(new \DateTime('now'));
                    $servicioHistorial->setIpCreacion($peticion->getClientIp());
                    $emComercial->persist($servicioHistorial);
                    $emComercial->flush();
                    
                    if($strTipoNegocio == 'PRO')
                    {
                        //OBTENER VLAN
                        $objSpcVlan = $this->get('tecnico.InfoServicioTecnico')
                                           ->getServicioProductoCaracteristica($servicioInternet, "VLAN", $objProducto);

                        if(is_object($objSpcVlan))
                        {
                            //ELIMINAR VLAN ANTERIOR
                            $this->get('tecnico.InfoServicioTecnico')->setEstadoServicioProductoCaracteristica($objSpcVlan, "Eliminado");

                            //AGREGAR NUEVA VLAN
                            $this->get('tecnico.InfoServicioTecnico')
                                 ->ingresarServicioProductoCaracteristica(  $servicioInternet, 
                                                                            $objProducto, 
                                                                            "VLAN", 
                                                                            '302', 
                                                                            $session->get('user'));
                        }
                    }
                    
                    if( $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI" &&
                        $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "ZTE" )
                    {
                        //OBTENER PERFIL
                        $objSpcPerfil   = $this->get('tecnico.InfoServicioTecnico')
                                               ->getServicioProductoCaracteristica($servicioInternet, "PERFIL", $objProducto);
                        
                        if(is_object($objSpcPerfil) && count($respuestaArray) > 3 && $objSpcPerfil->getValor() != $respuestaArray['perfil'])
                        {
                            //ELIMINAR PERFIL ANTERIOR
                            $this->get('tecnico.InfoServicioTecnico')->setEstadoServicioProductoCaracteristica($objSpcPerfil, "Eliminado");

                            //AGREGAR NUEVO PERFIL
                            $this->get('tecnico.InfoServicioTecnico')
                                 ->ingresarServicioProductoCaracteristica(  $servicioInternet, 
                                                                            $objProducto, 
                                                                            "PERFIL", 
                                                                            $respuestaArray['perfil'], 
                                                                            $session->get('user'));
                        }
                    }
                    $objSpcTrasladoServicioIp   = $this->get('tecnico.InfoServicioTecnico')->getServicioProductoCaracteristica( $servicio, 
                                                                                                                                "TRASLADO", 
                                                                                                                                $objProducto);
                    if(is_object($objSpcTrasladoServicioIp))
                    {
                        $objSpcTrasladoServicioIp->setEstado('Eliminado');
                        $objSpcTrasladoServicioIp->setUsrUltMod($strUsrCreacion);
                        $objSpcTrasladoServicioIp->setFeUltMod(new \DateTime('now'));
                        $emComercial->persist($objSpcTrasladoServicioIp);
                        $emComercial->flush();
                    }
                }
                //actualizo estado del servicio
                $servicio->setEstado("Activo");
                $emComercial->persist($servicio);
                $emComercial->flush();

                //GUARDAR INFO SERVICIO HISTORIAL
                $entityServicioHistorial = new InfoServicioHistorial();
                $entityServicioHistorial->setServicioId($servicio);
                $entityServicioHistorial->setIpCreacion($peticion->getClientIp());
                $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                $entityServicioHistorial->setUsrCreacion($session->get('user'));
                $entityServicioHistorial->setEstado("Activo");
                $entityServicioHistorial->setAccion("confirmarServicio");
                $entityServicioHistorial->setObservacion("Se activaron la(s) Ip(s) Fija(s)");
                $emComercial->persist($entityServicioHistorial);
                $emComercial->flush();

                //actualizar ips
                //obtener ips fijas q tiene el servicio
                $ipsFijas = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                              ->findBy(array("servicioId"   => $idServicio, 
                                                             "tipoIp"       => $strTipoIp, 
                                                             "estado"       => "Reservada"));
                foreach($ipsFijas as $ipFija)
                {
                    $ipFija->setEstado("Activo");
                    $emInfraestructura->persist($ipFija);
                    $emInfraestructura->flush();
                }

                $result = "OK";
                
                $emComercial->getConnection()->commit();
                $emInfraestructura->getConnection()->commit();

                //agregar validacion si es tellion cnr enviar actualizacion al ldap
                if ($objDetElemento && $strTipoNegocio == "PRO")
                {
                    $serviceServicioGeneral = $this->get('tecnico.InfoServicioTecnico');
                    $resultadoJsonLdap      = $serviceServicioGeneral->ejecutarComandoLdap("A", $idServicio);
                    if ($resultadoJsonLdap->status != "OK")
                    {
                        $mensaje = $mensaje . "<br>" . $resultadoJsonLdap->mensaje;
                    }
                }
            }
            else if($status == "ERROR")
            {
                $result = $mensaje;

                $emComercial->getConnection()->rollback();
                $emInfraestructura->getConnection()->rollback();
            }
        }
        catch(\Exception $e)
        {
            $emComercial->getConnection()->rollback();
            $emInfraestructura->getConnection()->rollback();

            $result = "Error: " . $e->getMessage();
        }
        
        if($result === "OK" && $boolFinalizaTarea)
        {
            $objTipoSolInfoTecnica      = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                      ->findOneBy(array("descripcionSolicitud" => "SOLICITUD INFO TECNICA",
                                                                        "estado"               => "Activo"));
            $objSolicitudInfoTecnica    = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                      ->findOneBy(array("servicioId"      => $servicio->getId(),
                                                                        "tipoSolicitudId" => $objTipoSolInfoTecnica->getId(),
                                                                        "estado"          => "Finalizada"),
                                                                  array('id'              => 'DESC'));
            if (is_object($objSolicitudInfoTecnica))
            {
                $arrayParametros            = array();
                $intIdSolicitudInfoTecnica  = $objSolicitudInfoTecnica->getId();
                $objDetalleTareaInfoTecnica = $emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                        ->findOneBy(array("detalleSolicitudId" => $intIdSolicitudInfoTecnica));
                if(is_object($objDetalleTareaInfoTecnica))
                {
                    $arrayParametros['strTipo']              = "iniciar";
                    $arrayParametros['objDetalle']           = $objDetalleTareaInfoTecnica;
                    $arrayParametros['strObservacion']       = "Tarea iniciada automáticamente por activación";
                    $arrayParametros['strCodEmpresa']        = $idEmpresa;
                    $arrayParametros['strUser']              = $strUsrCreacion;
                    $arrayParametros['strIpUser']            = $strIpCreacion;  
                    $arrayParametros["intPersonaEmpresaRol"] = 0;
                    
                    $serviceSoporte = $this->get('soporte.SoporteService');
                    $serviceSoporte->administrarTarea($arrayParametros);
                }
                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudInfoTecnica->getId();
                $arrayParametros['strProceso']            = 'Activar';
                $emInfraestructura->getRepository('schemaBundle:InfoDetalleSolicitud')->cerrarTareasPorSolicitud($arrayParametros);
            }
        }
        return $respuesta->setContent($result);
    }

    /**
     * Funcion que migra la Ip Fija del cliente
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 17-05-2015
     */
    public function migrarIpFijaAction()
    {
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $mensaje        = "Error no identificado";
        $peticion       = $this->get('request');
        $session        = $peticion->getSession();
        $idEmpresa      = $session->get('idEmpresa');
        $idServicio     = $peticion->get('idServicio');
        $ipFija         = $peticion->get('ipFija');
        $macIpFija      = $peticion->get('macIpFija');
        $strIpReservada = $peticion->get('ipReservada');
        
        $arrayPeticiones = array(
                                    'idEmpresa'     => $idEmpresa,
                                    'idServicio'    => $idServicio,
                                    'ipFija'        => $ipFija,
                                    'mac'           => $macIpFija,
                                    'usrCreacion'   => $session->get('user'),
                                    'ipReservada'   => $strIpReservada,
                                    'ipCreacion'    => $peticion->getClientIp()
                                );
        
        /* @var $migracion MigracionHuaweiService */
        $migracion = $this->get('tecnico.MigracionHuawei');
        //---------------------------------------------------------------------*/
        
        //COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)-------------------------*/
        $respuestaArray = $migracion->migrarIpCliente($arrayPeticiones);
        $mensaje = $respuestaArray[0]['mensaje'];
        
        return $respuesta->setContent($mensaje);
        //----------------------------------------------------------------------*/
    }
    
    /**
     * Funcion que cambia la mac del cliente en
     * el olt.
     * 
     * @author Creado: Kenneth Jimenez <kjimenez@telconet.ec>
     * @author Modificado: Francisco Adum <fadum@telconet.ec>
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0  3-05-2014
     * @version 2.0 02-06-2015
     * @version 2.1 23-07-2015
     * @version 2.2 09-05-2016     Se agrega parametro empresa en metodo ajaxCambiarMacIpFijaAction por conflictos de 
     *                             producto INTERNET DEDICADO
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.3 28-05-2018 Se agregan validaciones para IPs Small Business
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.4 23-07-2018 Se agrega programación para poder gestionar servicios con nueva tecnología ZTE 
     * @since 2.3
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.5 28-11-2018 Se agregan validaciones para gestionar los productos de la empresa TNP
     * @since 2.4
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.6 11-02-2019 Se obtienen los nombres técnicos del servicio principal y sus ips de acuerdo al servicio Small Business o TelcoHome
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 2.7 05-07-2019 Al existir varios SMB se debe identificar a que producto pertenece.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.8 04-05-2020 Se elimina la función obtenerInfoMapeoProdPrefYProdsAsociados y en su lugar se usa obtenerParametrosProductosTnGpon,
     *                          debido a los cambios realizados por la reestructuración de servicios Small Business
     * 
     */
    public function ajaxCambiarMacIpFijaAction()
    {
        $respuesta  = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $result     = "Error no identificado";
        $parametros = array();

        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $peticion           = $this->get('request');
        $session            = $peticion->getSession();

        $idEmpresa          = $session->get('idEmpresa');
        $strPrefijoEmpresa  = $session->get('prefijoEmpresa');
        $idServicio         = $peticion->get('idServicio');
        $idServicioRef      = $peticion->get('idServicioRef');
        $macIpFija          = $peticion->get('macIpFija');
        $macIpFijaNueva     = $peticion->get('macIpFijaNueva');
        $tieneIpFijaActiva  = $peticion->get('tieneIpFijaActiva');
        $strEsIsb           = "NO";
        $arrayProdIp        = array();

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();

        try
        {
            $servicio        = $emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->find($idServicio);
            $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                           ->findOneByServicioId($idServicioRef);
            
            $objServicioInternet = $emComercial->getRepository('schemaBundle:InfoServicio')
                                               ->find($idServicioRef);
            
            if (!is_object($objServicioInternet))
            {
                throw new \Exception("No se encontro información acerca del punto del servicio");
            }

            $interfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($servicioTecnico->getInterfaceElementoId());
            
            //OBTENER TIPO DE NEGOCIO
            $strTipoNegocio = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();

            $servicioTecnicoService     = $this->get('tecnico.InfoServicioTecnico');
            $cancelarServicioService    = $this->get('tecnico.InfoCancelarServicio');
            $serviceRedAccesoMiddleware = $this->get('tecnico.RedAccesoMiddleware');
            
            if($servicio->getPlanId())
            {
                $arrayProdIp = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                           ->findBy(array("nombreTecnico"   => "IP", 
                                                          "empresaCod"      => $idEmpresa, 
                                                          "estado"          => "Activo"));
                $planDet     = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                           ->findBy(array("planId" => $servicio->getPlanId()->getId()));
                $indiceProductoIp = $servicioTecnicoService->obtenerIndiceInternetEnPlanDet($planDet, $arrayProdIp);
                if($indiceProductoIp != -1)
                {
                    $productoIp = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                              ->find($planDet[$indiceProductoIp]->getProductoId());
                }
                else
                {
                    $productoIp = null;
                }
            }
            else
            {
                $productoIp = $servicio->getProductoId();
            }

            $elementoId         = $interfaceElemento->getElementoId();
            $elemento           = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
            $modeloElementoId   = $elemento->getModeloElementoId();
            $modeloElemento     = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);
            
            if($strPrefijoEmpresa === "TN" || $strPrefijoEmpresa === "TNP")
            {
                $objProducto   = $objServicioInternet->getProductoId();
                if(is_object($objProducto) && $objProducto->getNombreTecnico() === "INTERNET SMALL BUSINESS")
                {
                    $strEsIsb               = "SI";
                    $arrayParamsInfoProds   = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                    "strCodEmpresa"                 => $idEmpresa,
                                                    "intIdProductoInternet"         => $objProducto->getId());
                    $arrayInfoMapeoProds    = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                          ->obtenerParametrosProductosTnGpon($arrayParamsInfoProds);
                    if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds))
                    {
                        foreach($arrayInfoMapeoProds as $arrayInfoProd)
                        {
                            $intIdProductoIp    = $arrayInfoProd["intIdProdIp"];
                            $objProdIPSB        = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProductoIp);
                            $arrayProdIp[]      = $objProdIPSB;
                        }
                    }
                    else
                    {
                        throw new \Exception("No se ha podido obtener el correcto mapeo del servicio con sus ips");
                    }
                }
            }
            else
            {
                $objProducto    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array("esPreferencia" => "SI",
                                                                                                            "nombreTecnico" => "INTERNET",
                                                                                                            "empresaCod"    => $idEmpresa,
                                                                                                            "estado"        => "Activo"));
                $arrayProdIp    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findBy(array(   "nombreTecnico" => "IP",
                                                                                                            "empresaCod"    => $idEmpresa,
                                                                                                            "estado"        => "Activo"));
            }
            
            //caract perfil
            $entityPerfil = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                        ->findOneBy(array("descripcionCaracteristica" => "PERFIL", 
                                                          "estado"                    => "Activo"));
            $prodCaractPerfil = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                              "caracteristicaId" => $entityPerfil->getId(),
                                                              "estado"           => "Activo"));
            if(is_object($prodCaractPerfil))
            {
                $perfilProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->findOneBy(array("servicioId"                => $idServicio,
                                                                  "estado"                    => "Activo",
                                                                  "productoCaracterisiticaId" => $prodCaractPerfil->getId()));
            }
            
            //caract indice cliente
            $entityIndice = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                        ->findOneBy(array("descripcionCaracteristica" => "INDICE CLIENTE", 
                                                          "estado"                    => "Activo"));
            $prodCaractIndice = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array("productoId"        => $objProducto->getId(),
                                                              "caracteristicaId"  => $entityIndice->getId(),
                                                              "estado"            => "Activo"));
            $indiceProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                            ->findOneBy(array("servicioId"                => $idServicioRef,
                                                              "estado"                    => "Activo",
                                                              "productoCaracterisiticaId" => $prodCaractIndice->getId()));
            
            if (!is_object($indiceProdCaract))
            {
                throw new \Exception("No se encontro información acerca del INDICE CLIENTE del servicio");
            }
            
            $strIndiceCliente = $indiceProdCaract->getValor();

            //OBTENER MAC ONT
            $objMacOnt = $servicioTecnicoService->getServicioProductoCaracteristica($objServicioInternet, "MAC ONT", $objProducto);
            if(is_object($objMacOnt))
            {
                $strMacOnt = $objMacOnt->getValor();
            }
            //caract mac cliente
            $entityMac     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                         ->findOneBy(array("descripcionCaracteristica" => "MAC", 
                                                           "estado"                    => "Activo"));
            $prodCaractMac = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                           "caracteristicaId" => $entityMac->getId(),
                                                           "estado"           => "Activo"));

            $perfilInternet = "";
            
            //obtener scope
            $objCaractScope = $servicioTecnicoService->getServicioProductoCaracteristica($servicio, "SCOPE", $servicio->getProductoId());
            if(is_object($objCaractScope))
            {
                $strScope = $objCaractScope->getValor();
            }
            
            $objDetalleElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array("elementoId"    => $servicioTecnico->getElementoId(),
                                                                      "detalleNombre" => 'MIDDLEWARE',
                                                                      "estado"        => 'Activo'));

            $booleanFlagMiddleware = false;

            if($objDetalleElemento && $objDetalleElemento->getDetalleValor() == 'SI')
            {
                $booleanFlagMiddleware = true;
            }
            
            if($booleanFlagMiddleware)
            {
                $objIpElemento = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                   ->findOneBy(array("elementoId" => $elemento->getId(),
                                                                     "estado"     => "Activo"));
                //OBTENER SERIE ONT
                $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                        ->find($servicioTecnico->getElementoClienteId());
                if (!is_object($objElementoCliente))
                {
                    throw new \Exception("No se encontro información acerca del elemento cliente del servicio");
                }
                $strSerieOnt        = $objElementoCliente->getSerieFisica();
                
                $objPersona    = $servicio->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();
                if (!is_object($objPersona))
                {
                    throw new \Exception("No se encontro información acerca del cliente del servicio");
                }
                $strLogin          = $servicio->getPuntoId()->getLogin();
                $strIdentificacion = $objPersona->getIdentificacionCliente();
                $strNombreCliente  = ($objPersona->getRazonSocial() != "") ?
                                     $objPersona->getRazonSocial() : 
                                     $objPersona->getNombres()." ".$objPersona->getApellidos();
                
                $objIpFija = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                               ->findOneBy(array("servicioId" => $servicio->getId(),
                                                                 "estado"     => "Activo"));
                
                if (!is_object($objIpFija))
                {
                    throw new \Exception("No se encontro información acerca de la IP del servicio");
                }
                
                //OBTENER CARACTERISTICAS PARA TELLION
                if($modeloElemento->getNombreModeloElemento() == "EP-3116")
                {
                    //OBTENER MAC WIFI
                    $objMacWifi = $servicioTecnicoService->getServicioProductoCaracteristica($objServicioInternet, "MAC WIFI", $objProducto);
                    if(is_object($objMacWifi))
                    {
                        $strMacWifi = $objMacWifi->getValor();
                    }
                }
                //OBTENER CARACTERISTICAS PARA HUAWEI
                else if($modeloElemento->getNombreModeloElemento() == "MA5608T")
                {
                    //obtener service profile
                    $objProfileProdCaract = $servicioTecnicoService->getServicioProductoCaracteristica($objServicioInternet,
                                                                                                       "SERVICE-PROFILE",
                                                                                                       $objProducto);
                    if(is_object($objProfileProdCaract))
                    {
                        $strServiceProfile = $objProfileProdCaract->getValor();
                    }
                    
                    //obtener vlan
                    $objVlanProdCaract = $servicioTecnicoService->getServicioProductoCaracteristica($objServicioInternet, "VLAN", $objProducto);
                    if(is_object($objVlanProdCaract))
                    {
                        $strVlan = $objVlanProdCaract->getValor();                
                    }
                    
                    //obtener service-port
                    $objServicePort = $servicioTecnicoService->getServicioProductoCaracteristica($objServicioInternet, "SPID", $objProducto);
                    if(is_object($objServicePort))
                    {
                        $strSpid = $objServicePort->getValor();
                    }
                }
                else
                {
                    $strSpid = "";
                    $strVlan = "";
                    $strServiceProfile = "";
                }

                //OBTENER SERVICIOS DEL PUNTO
                $arrayServicios     = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(array('puntoId' => $servicio->getPuntoId()));

                //OBTENER IPS ADICIONALES Y CUANTAS IPS
                $arrayDatosIps      = $servicioTecnicoService->getInfoIpsFijaPunto($arrayServicios, 
                                                                                   $arrayProdIp, 
                                                                                   $objServicioInternet, 
                                                                                   $servicio->getEstado(),
                                                                                   'Activo',
                                                                                   $objProducto);

                $intIpFijasActivas  = $arrayDatosIps['ip_fijas_activas'];
                
                if($strEsIsb === "SI")
                {
                    $strTipoNegocio = "PYME";
                }

                $arrayDatos = array(
                                    'serial_ont'            => $strSerieOnt,
                                    'mac_ont'               => $strMacOnt,
                                    'mac_wifi'              => $strMacWifi,
                                    "mac_cpe"               => $macIpFija,
                                    "mac_cpe_nueva"         => $macIpFijaNueva,
                                    'nombre_olt'            => $elemento->getNombreElemento(),
                                    'ip_olt'                => $objIpElemento->getIp(),
                                    'puerto_olt'            => $interfaceElemento->getNombreInterfaceElemento(),
                                    'modelo_olt'            => $modeloElemento->getNombreModeloElemento(),
                                    "ip_fijas_activas"      => $intIpFijasActivas,
                                    'service_profile'       => $strServiceProfile,
                                    'ont_id'                => $strIndiceCliente,
                                    'service_port'          => $strSpid,
                                    'vlan'                  => $strVlan,
                                    'estado_servicio'       => $servicio->getEstado(),
                                    'ip'                    => $objIpFija->getIp(),
                                    'tipo_negocio_actual'   => $strTipoNegocio,
                                    'scope'                 => $strScope
                                );

                $arrayDatosMiddleware = array(
                                                'nombre_cliente'        => $strNombreCliente,
                                                'login'                 => $strLogin,
                                                'identificacion'        => $strIdentificacion,
                                                'datos'                 => $arrayDatos,
                                                'opcion'                => 'CAMBIAR_CPE',
                                                'ejecutaComando'        => $this->container->getParameter('ws_rda_ejecuta_scripts'),
                                                'usrCreacion'           => $session->get('user'),
                                                'ipCreacion'            => $peticion->getClientIp()
                                            );

                $arrayFinal         = $serviceRedAccesoMiddleware->middleware(json_encode($arrayDatosMiddleware));
                $strStatus          = $arrayFinal['status'];
                $strMensaje         = $arrayFinal['mensaje'];
            }
            else
            {
                if($modeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI")
                {
                    if($perfilProdCaract)
                    {
                        $perfilInternet = $perfilProdCaract->getValor();
                    }
                    else
                    {
                        $id_punto = $servicio->getPuntoId()->getId();
                        $perfil   = $emComercial->getRepository("schemaBundle:InfoPlanCab")->getPerfilByPlanIdAndPuntoId("no", "", $id_punto);

                        if($perfil)
                        {
                            $infoServProdCaractPerfil = new InfoServicioProdCaract();
                            $infoServProdCaractPerfil->setServicioId($servicio->getId());
                            $infoServProdCaractPerfil->setProductoCaracterisiticaId($prodCaractPerfil->getId());
                            $infoServProdCaractPerfil->setValor(trim($perfil));
                            $infoServProdCaractPerfil->setFeCreacion(new \DateTime('now'));
                            $infoServProdCaractPerfil->setUsrCreacion($session->get('user'));
                            $infoServProdCaractPerfil->setEstado("Activo");
                            $emComercial->persist($infoServProdCaractPerfil);
                            $emComercial->flush();

                            $perfilInternet = $perfil;
                        }//if($perfil)
                        else
                        {
                            $emComercial->getConnection()->rollback();
                            $emInfraestructura->getConnection()->rollback();

                            return $respuesta->setContent("Error: No existe Perfil para poder gestionar la IP FIJA. Favor notificar a Sistemas");
                        }
                    }//else - if($perfilProdCaract)
                    //parametros para cancelar ip adicional
                    $parametros['idEmpresa']            = $idEmpresa;
                    $parametros['tieneIpFijaActiva']    = $tieneIpFijaActiva;
                    $parametros['servicio']             = $servicio;
                    $parametros['servicioTecnico']      = $servicioTecnico;
                    $parametros['producto']             = $objProducto;
                    $parametros['interfaceElemento']    = $interfaceElemento;
                    $parametros['modeloElemento']       = $modeloElemento;
                    $parametros['indice']               = $indiceProdCaract->getValor();
                    $parametros['macWifi']              = trim($macIpFija);
                    $parametros['perfil']               = $perfilInternet;
                    $parametros['usrCreacion']          = $session->get('user');
                    $parametros['controlIpFija']        = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                            ->tieneControlIpFIja($perfilInternet);

                    $respuestaArray = $cancelarServicioService->cancelarIpsFijas($parametros);
                    $strStatus      = $respuestaArray[0]['status'];
                    $strMensaje     = $respuestaArray[0]['mensaje'];
                }
                else
                {
                    $servProdCaractScopeAdi = $servicioTecnicoService->getServicioProductoCaracteristica($servicio, "SCOPE", $productoIp);

                    $objServProdCaractMacAdi= $servicioTecnicoService->getServicioProductoCaracteristica($servicio, "MAC", $objProducto);

                    $arrParametrosCancel = array(
                                                    'servicioTecnico'   => $servicioTecnico,
                                                    'modeloElemento'    => $modeloElemento,
                                                    'interfaceElemento' => $interfaceElemento,
                                                    'producto'          => $objProducto,
                                                    'servicio'          => $servicio,
                                                    'spcMac'            => $objServProdCaractMacAdi,
                                                    'scope'             => $servProdCaractScopeAdi->getValor(),
                                                    'esAdicional'       => "NO"
                                                );

                    //cancelar ip adicional (script y base)
                    $respuestaArray = $cancelarServicioService->cancelarServicioIp($arrParametrosCancel);
                    $strStatus      = $respuestaArray[0]['status'];
                    $strMensaje     = $respuestaArray[0]['mensaje'];
                }
            }
            
            if($strStatus == "OK")
            {
                //ELIMINAR MACS ANTERIORES
                $macServProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                 ->findBy(array("servicioId"                => $idServicio,
                                                                "estado"                    => "Activo",
                                                                "productoCaracterisiticaId" => $prodCaractMac->getId()));
                for($i = 0; $i < count($macServProdCaract); $i++)
                {
                    $macClienteProdCaract = $macServProdCaract[$i];
                    $macClienteProdCaract->setEstado("Eliminado");
                    $emComercial->persist($macClienteProdCaract);
                    $emComercial->flush();
                }

                if($booleanFlagMiddleware)
                {
                    //crear MAC NUEVA
                    //servicio prod caract mac
                    $servicioTecnicoService->ingresarServicioProductoCaracteristica($servicio, 
                                                                                    $objProducto,
                                                                                    "MAC",
                                                                                    $macIpFijaNueva,
                                                                                    $session->get('user'));
                }
                else
                {
                    //parametros para activar la ip adicional con la nueva mac
                    $parametros['macWifi'] = trim($macIpFijaNueva);

                    if($modeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI")
                    {
                        /* @var $activacion InfoActivarPuertoService */
                        $activacion     = $this->get('tecnico.InfoActivarPuerto');
                        $respuestaArray = $activacion->activarIpsFijas($parametros);
                        $strStatus      = $respuestaArray[0]['status'];
                        $strMensaje     = $respuestaArray[0]['mensaje'];
                    }
                    else
                    {
                        $ipFija = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneBy(array("servicioId" => $servicio->getId(),
                                                                      "tipoIp" => "FIJA",
                                                                      "estado" => "Activo"));

                        $arrayPeticiones['ipFija']      = $ipFija->getIp();
                        $arrayPeticiones['mac']         = trim($macIpFijaNueva);
                        $arrayPeticiones['idServicio']  = $servicio->getId();
                        $arrayPeticiones['idEmpresa']   = $idEmpresa;
                        $arrayPeticiones['usrCreacion'] = $session->get('user');
                        $arrayPeticiones['ipCreacion']  = $peticion->getClientIp();
                        $arrayPeticiones['intIdServicioRef'] = $idServicioRef;
                        $cambiarPuertoService   = $this->get('tecnico.InfoCambiarPuerto');
                        $respuestaArray         = $cambiarPuertoService->activarIpAdicionalHuawei($arrayPeticiones);
                        $strStatus              = $respuestaArray[0]['status'];
                        $strMensaje             = $respuestaArray[0]['mensaje'];
                    }
                }
                
                if($strStatus == "OK")
                {
                    //GUARDAR INFO SERVICIO HISTORIAL
                    $entityServicioHistorial = new InfoServicioHistorial();
                    $entityServicioHistorial->setServicioId($servicio);
                    $entityServicioHistorial->setIpCreacion($peticion->getClientIp());
                    $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $entityServicioHistorial->setUsrCreacion($session->get('user'));
                    $entityServicioHistorial->setEstado("Activo");
                    $entityServicioHistorial->setObservacion("Se cambio la Mac de la(s) Ip(s) Fija(s).<br>"
                                                             . "Mac Anterior:" . $macIpFija . "<br>"
                                                             . "Mac Nueva:" . $macIpFijaNueva);
                    $emComercial->persist($entityServicioHistorial);
                    $emComercial->flush();

                    $result = "OK";
                    $emComercial->getConnection()->commit();
                    $emInfraestructura->getConnection()->commit();
                }//if($status=="OK")
                else if($strStatus == "ERROR")
                {
                    $result = $strMensaje;

                    $emComercial->getConnection()->rollback();
                    $emInfraestructura->getConnection()->rollback();
                }
            }//if($status=="OK")
            else if($strStatus == "ERROR")
            {
                $result = $strMensaje;

                $emComercial->getConnection()->rollback();
                $emInfraestructura->getConnection()->rollback();
            }
        }//try
        catch(\Exception $e)
        {
            $emComercial->getConnection()->rollback();
            $emInfraestructura->getConnection()->rollback();

            $result = "Error: " . $e->getMessage();
        }

        return $respuesta->setContent($result);
    }

    /**
     * Funcion que cambia el estado del servicio a Cancel y
     * desconfigura la ip grabada en el elemento (olt)
     * 
     * @author Creado: Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 17-10-2014
     * 
     * @author Modificado: Francisco Adum <fadum@telconet.ec>
     * @version 2.0 02-06-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.1 07-07-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.2 23-07-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.3 23-12-2015 Se agrega codigo para cancelacion de Ips Tellion CNR
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.4 13-04-2016 Se modifica funcion que recupera equivalencia de perfiles de planes para poder
     *                         aprovisionar a clientes con planes UAV
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.5 09-05-2016 Se agrega parametro empresa en metodo ajaxCambiarMacIpFijaAction por conflictos de 
     *                         producto INTERNET DEDICADO
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 2.6 06-07-2016 Se agrega registro de motivo en historial de servicio
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.7 07-05-2018 Se agrega flujo para cancelación de IPs Adicionales Small Business
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 2.8 28-11-2018 Se agregan validaciones para gestionar los productos de la empresa TNP
     * @since 2.7
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.9 11-02-2019 Se obtienen los nombres técnicos del servicio principal y sus ips de acuerdo al servicio Small Business o TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.10 04-05-2020 Se elimina la función obtenerInfoMapeoProdPrefYProdsAsociados debido a que la función cancelarIpFijaAdicional
     *                           ya no necesita el envío de los parámetros strNombreTecnicoInternet y strNombreTecnicoIP 
     * 
     * @author Antonio Ayala <afayalaz@telconet.ec>
     * @version 2.11 25-03-2021 Se realiza validación si la Ip es privada
     * 
     * @author Antonio Ayala <afayalaz@telconet.ec>
     * @version 2.12 14-01-2022 Cuando se cancela la ip adicional se envia como parametro $strTipoIp
     * 
     */
    public function ajaxCancelarIpFijaAction()
    {
        $respuesta  = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $result     = "Error no identificado";
        $parametros = array();

        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSeguridad        = $this->get('doctrine')->getManager('telconet_seguridad');
        $peticion           = $this->get('request');
        $session            = $peticion->getSession();

        $idEmpresa          = $session->get('idEmpresa');
        $strPrefijoEmpresa  = $session->get('prefijoEmpresa');
        $idServicio         = $peticion->get('idServicio');
        $idServicioRef      = $peticion->get('idServicioRef');
        $intMotivoId        = $peticion->get('motivo');
        $macIpFija          = $peticion->get('macIpFija');
        $idAccion           = $peticion->get('idAccion');
        $strEsAdicional     = "SI";
        $strTipoNegocio     = "";
        $flagMiddleware     = false; 

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();

        try
        {
            $servicioTecnicoService  = $this->get('tecnico.InfoServicioTecnico');
            $cancelarServicioService = $this->get('tecnico.InfoCancelarServicio');

            $servicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            $servicioInternet= $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicioRef);
            $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($idServicioRef);

            $interfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($servicioTecnico->getInterfaceElementoId());
            
            $strTipoNegocio = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();
            
            if($servicio->getPlanId())
            {
                $arrayProdIp = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                           ->findBy(array("nombreTecnico"   => "IP", 
                                                          "empresaCod"      => $idEmpresa, 
                                                          "estado"          => "Activo"));
                $planDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                       ->findBy(array("planId" => $servicio->getPlanId()->getId()));
                $indiceProductoIp = $servicioTecnicoService->obtenerIndiceInternetEnPlanDet($planDet, $arrayProdIp);
                if($indiceProductoIp != -1)
                {
                    $productoIp = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                              ->find($planDet[$indiceProductoIp]->getProductoId());
                }
                else
                {
                    $productoIp = null;
                }
            }
            else
            {
                $productoIp = $servicio->getProductoId();
            }

            $elementoId         = $interfaceElemento->getElementoId();
            $elemento           = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
            $modeloElementoId   = $elemento->getModeloElementoId();
            $modeloElemento     = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);

            $accion   = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
            
            if($strPrefijoEmpresa === "TN" || $strPrefijoEmpresa === "TNP")
            {
                $objProducto    = $servicioInternet->getProductoId();
            }
            else
            {
                $objProducto    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array("esPreferencia"   => "SI",
                                                                                                            "nombreTecnico"   => "INTERNET",
                                                                                                            "empresaCod"      => $idEmpresa,
                                                                                                            "estado"          => "Activo"));
            }

            $entityPerfil = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                        ->findOneBy(array("descripcionCaracteristica" => "PERFIL", 
                                                          "estado"                    => "Activo"));
            $prodCaractPerfil = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                              "caracteristicaId" => $entityPerfil->getId(),
                                                              "estado"           => "Activo"));
            if(is_object($prodCaractPerfil))
            {
                $perfilProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->findOneBy(array("servicioId"                  => $idServicio,
                                                                   "estado"                     => "Activo",
                                                                   "productoCaracterisiticaId"  => $prodCaractPerfil->getId()));
            }
            else
            {
                $perfilProdCaract = null;
            }
            
            $entityIndice     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy(array("descripcionCaracteristica" => "INDICE CLIENTE", 
                                                              "estado"                    => "Activo"));
            $prodCaractIndice = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array("productoId"       => $objProducto->getId(), 
                                                              "caracteristicaId" => $entityIndice->getId(), 
                                                              "estado"           => "Activo"));
            $indiceProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                            ->findOneBy(array("servicioId"                  => $idServicioRef, 
                                                              "estado"                      => "Activo", 
                                                              "productoCaracterisiticaId"   => $prodCaractIndice->getId()));

            $perfilInternet = "";

            $objDetalleElementoMid  = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                            ->findOneBy(array(  "elementoId"   => $servicioTecnico->getElementoId(),
                                                                "detalleNombre"=> 'MIDDLEWARE',
                                                                "estado"       => 'Activo'));

            if($objDetalleElementoMid)
            {
                if($objDetalleElementoMid->getDetalleValor() == 'SI')
                {
                    $flagMiddleware = true;
                }
            }
            
            if($flagMiddleware)
            {
                
                if($perfilProdCaract)
                {
                    $controlIp = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->tieneControlIpFIja($perfilProdCaract->getValor());
                }
                else
                {
                    $controlIp = "";
                }
                
                
                $strTipoIp = 'FIJA';
            
                if ($idEmpresa == '10')
                {
                    $objCaracteristicaIpPrivada = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                              ->findOneBy(array( "descripcionCaracteristica" => "TIPO_ENRUTAMIENTO"));
                    if(is_object($objCaracteristicaIpPrivada))
                    {
                        $objProductoIp = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($servicio->getProductoId()->getId());

                        $objProdCaracteristicaIpPrivada = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                      ->findOneBy(array( "productoId"       => $objProductoIp->getId(), 
                                                                                         "caracteristicaId" => $objCaracteristicaIpPrivada->getId()
                                                                                       )
                                                                                 );
                        if(is_object($objProdCaracteristicaIpPrivada))
                        {
                            $objInfoServicioProdCaractIpPrivada = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                         ->findOneBy(array( "servicioId"                 => $servicio->getId(), 
                                                                            "productoCaracterisiticaId" => $objProdCaracteristicaIpPrivada->getId()
                                                                         )
                                                                   );
                            if (is_object($objInfoServicioProdCaractIpPrivada))
                            {
                                $strIpPrivada = ($objInfoServicioProdCaractIpPrivada)?$objInfoServicioProdCaractIpPrivada->getValor():"";
                                $strTipoIp = strtoupper($strIpPrivada);
                            }
                        }
                    }
                }
                
                $ipFija = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array("servicioId"  => $servicio->getId(),
                                                              "tipoIp"      => $strTipoIp,
                                                              "estado"      => "Activo"));
                
                $arrayDatos = array(    'servicio'                  => $servicio,
                                        'servicioInternet'          => $servicioInternet,
                                        'servicioTecnico'           => $servicioTecnico,
                                        'interfaceElemento'         => $interfaceElemento,
                                        'producto'                  => $objProducto,
                                        'productoIp'                => $productoIp,
                                        'ipFija'                    => $ipFija,
                                        'macIpFija'                 => $macIpFija,
                                        'idEmpresa'                 => $idEmpresa,
                                        'controlIpFija'             => $controlIp,
                                        'usrCreacion'               => $session->get('user'),
                                        'ipCreacion'                => $peticion->getClientIp(),
                                        'strPrefijoEmpresa'         => $strPrefijoEmpresa);
                
                $respuestaArray = $this->get('tecnico.InfoCancelarServicio')->cancelarIpFijaAdicional($arrayDatos);
                
                $status         = $respuestaArray['status'];
                $mensaje        = $respuestaArray['mensaje'];
            }
            else
            {
                if($modeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI")
                {
                    if($perfilProdCaract)
                    {
                        $perfilInternet = $perfilProdCaract->getValor();
                    }
                    else
                    {
                        $id_punto = $servicio->getPuntoId()->getId();

                        $perfil   = $emComercial->getRepository("schemaBundle:InfoPlanCab")->getPerfilByPlanIdAndPuntoId("no", "", $id_punto);

                        if($perfil)
                        {
                            $infoServProdCaractPerfil = new InfoServicioProdCaract();
                            $infoServProdCaractPerfil->setServicioId($servicio->getId());
                            $infoServProdCaractPerfil->setProductoCaracterisiticaId($prodCaractPerfil->getId());
                            $infoServProdCaractPerfil->setValor(trim($perfil));
                            $infoServProdCaractPerfil->setFeCreacion(new \DateTime('now'));
                            $infoServProdCaractPerfil->setUsrCreacion($session->get('user'));
                            $infoServProdCaractPerfil->setEstado("Activo");
                            $emComercial->persist($infoServProdCaractPerfil);
                            $emComercial->flush();

                            $perfilInternet = $perfil;
                        }
                        else
                        {
                            $emComercial->getConnection()->rollback();
                            $emInfraestructura->getConnection()->rollback();

                            return $respuesta->setContent("Error: No existe Perfil para poder gestionar la IP FIJA. Favor notificar a Sistemas");
                        }
                    }

                    //consultar si el olt tiene aprovisionamiento de ips en el CNR
                    $objDetalleElemento    = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                               ->findOneBy(array('detalleNombre' => 'OLT MIGRADO CNR',
                                                                                 'elementoId'    => $interfaceElemento->getElementoId()->getId()));
                    if ($objDetalleElemento)
                    {
                        //Obtiene registro de parametro de perfil equivalente
                        $arrayParametrosFuncion           = "";
                        $arrayParametrosFuncion['idPlan'] = $servicioTecnico->getServicioId()->getPlanId()->getId();
                        $id_punto                         = $servicio->getPuntoId()->getId();

                        $perfil   = $emComercial->getRepository("schemaBundle:InfoPlanCab")->getPerfilByPlanIdAndPuntoId("no", "", $id_punto);

                        if($perfil)
                        {
                            $perfilInternet=$perfil;
                        }
                        $arrayParametrosFuncion['valorPerfil']           = $perfilInternet;
                        $arrayParametrosFuncion['tipoAprovisionamiento'] = 'CNR';
                        $arrayParametrosFuncion['elementoOltId']         = $servicioTecnico->getElementoId();
                        $arrayParametrosFuncion['marca']                 = $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                        $arrayParametrosFuncion['empresaCod']            = $idEmpresa;
                        $arrayParametrosFuncion['tipoNegocio']           = $strTipoNegocio;
                        $arrayParametrosFuncion['tipoEjecucion']         = 'FLUJO';
                        $serviceRecursoDeRed                             = $this->get('planificacion.RecursosDeRed');
                        $perfilInternet                                  = $serviceRecursoDeRed->getPerfilPlanEquivalente($arrayParametrosFuncion);
                    }

                    $parametros['idEmpresa']            = $idEmpresa;
                    $parametros['servicio']             = $servicio;
                    $parametros['servicioTecnico']      = $servicioTecnico;
                    $parametros['producto']             = $objProducto;
                    $parametros['interfaceElemento']    = $interfaceElemento;
                    $parametros['modeloElemento']       = $modeloElemento;
                    $parametros['macWifi']              = trim($macIpFija);
                    $parametros['perfil']               = $perfilInternet;
                    $parametros['usrCreacion']          = $session->get('user');
                    $parametros['indice']               = $indiceProdCaract->getValor();
                    $parametros['tipoNegocio']          = $strTipoNegocio;

                    $respuestaArray = $cancelarServicioService->cancelarIpsFijas($parametros);
                    $status         = $respuestaArray[0]['status'];
                    $mensaje        = $respuestaArray[0]['mensaje'];
                }
                else
                {
                    $servProdCaractScopeAdi = $servicioTecnicoService->getServicioProductoCaracteristica($servicio, "SCOPE", $productoIp);

                    $objServProdCaractMacAdi= $servicioTecnicoService->getServicioProductoCaracteristica($servicio, "MAC", $objProducto);

                    if ($strTipoNegocio == 'PRO')
                    {
                        $strEsAdicional = "NO";
                    }

                    $arrParametrosCancel = array(
                                                    'servicioTecnico'   => $servicioTecnico,
                                                    'modeloElemento'    => $modeloElemento,
                                                    'interfaceElemento' => $interfaceElemento,
                                                    'producto'          => $objProducto,
                                                    'servicio'          => $servicio,
                                                    'spcIndiceCliente'  => $indiceProdCaract,
                                                    'spcMac'            => $objServProdCaractMacAdi,
                                                    'scope'             => $servProdCaractScopeAdi->getValor(),
                                                    'esAdicional'       => $strEsAdicional
                                                );


                    //cancelar ip adicional (script y base)
                    $respuestaArray = $cancelarServicioService->cancelarServicioIp($arrParametrosCancel);
                    $status         = $respuestaArray[0]['status'];
                    $mensaje        = $respuestaArray[0]['mensaje'];
                }    
            }
            
            //--------RESPUESTA-----------------------------------------------------*/
            if($status == "OK")
            {
                if($flagMiddleware)
                {
                    //historial del servicio
                    $servicioHistorial = new InfoServicioHistorial();
                    $servicioHistorial->setServicioId($servicio);
                    $servicioHistorial->setObservacion("Se desconfiguro la Ip Fija:" + $ipFija . " con Mac:" . $macIpFija);
                    $servicioHistorial->setEstado($servicio->getEstado());
                    $servicioHistorial->setUsrCreacion($session->get('user'));
                    $servicioHistorial->setFeCreacion(new \DateTime('now'));
                    $servicioHistorial->setIpCreacion($peticion->getClientIp());
                    $emComercial->persist($servicioHistorial);
                    $emComercial->flush();
                    
                    if($strTipoNegocio == 'PRO')
                    {
                        //OBTENER VLAN
                        $objSpcVlan = $this->get('tecnico.InfoServicioTecnico')
                                        ->getServicioProductoCaracteristica($servicioInternet, "VLAN", $objProducto);
                        
                        if(is_object($objSpcVlan))
                        {
                            //ELIMINAR VLAN ANTERIOR
                            $this->get('tecnico.InfoServicioTecnico')->setEstadoServicioProductoCaracteristica($objSpcVlan, "Eliminado");

                            //AGREGAR NUEVA VLAN
                            $this->get('tecnico.InfoServicioTecnico')
                                 ->ingresarServicioProductoCaracteristica(  $servicioInternet, 
                                                                            $objProducto, 
                                                                            "VLAN", 
                                                                            '301', 
                                                                            $session->get('user'));
                        }    
                    }
                    
                    if($modeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI")
                    {
                        //OBTENER PERFIL
                        $objSpcPerfil = $this->get('tecnico.InfoServicioTecnico')
                                          ->getServicioProductoCaracteristica($servicioInternet, "PERFIL", $objProducto);
                        
                        if(is_object($objSpcPerfil) && count($respuestaArray) > 3 && $objSpcPerfil->getValor() != $respuestaArray['perfil'])
                        {
                            //ELIMINAR PERFIL ANTERIOR
                            $this->get('tecnico.InfoServicioTecnico')->setEstadoServicioProductoCaracteristica($objSpcPerfil, "Eliminado");

                            //AGREGAR NUEVO PERFIL
                            $this->get('tecnico.InfoServicioTecnico')
                                 ->ingresarServicioProductoCaracteristica(  $servicioInternet, 
                                                                            $objProducto, 
                                                                            "PERFIL", 
                                                                            $respuestaArray['perfil'], 
                                                                            $session->get('user'));
                        }
                    }
                }
                
                //actualizo estado del servicio
                $servicio->setEstado("Cancel");
                $emComercial->persist($servicio);
                $emComercial->flush();

                //GUARDAR INFO SERVICIO HISTORIAL
                $entityServicioHistorial = new InfoServicioHistorial();
                $entityServicioHistorial->setServicioId($servicio);
                $entityServicioHistorial->setIpCreacion($peticion->getClientIp());
                $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                $entityServicioHistorial->setMotivoId($intMotivoId);
                $entityServicioHistorial->setUsrCreacion($session->get('user'));
                $entityServicioHistorial->setEstado("Cancel");
                $entityServicioHistorial->setObservacion("Se cancelaron la(s) Ip(s) Fija(s)");
                $entityServicioHistorial->setAccion($accion->getNombreAccion());
                $emComercial->persist($entityServicioHistorial);
                $emComercial->flush();
                
                //actualizar ips
                //obtener ips fijas q tiene el servicio
                $ipsFijas = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                    ->findBy(array("servicioId" => $idServicio, "tipoIp" => $strTipoIp, "estado" => "Activo"));
                foreach($ipsFijas as $ipFija)
                {
                    $ipFija->setEstado("Cancel");
                    $emInfraestructura->persist($ipFija);
                    $emInfraestructura->flush();
                }

                $result = "OK";

                $emComercial->getConnection()->commit();
                $emInfraestructura->getConnection()->commit();
                
                //agregar validacion si es tellion cnr enviar actualizacion al ldap
                if ($objDetalleElemento && $strTipoNegocio =="PRO")
                {
                    $serviceServicioGeneral = $this->get('tecnico.InfoServicioTecnico');
                    $resultadoJsonLdap      = $serviceServicioGeneral->ejecutarComandoLdap("A", $idServicio);
                    if ($resultadoJsonLdap->status != "OK")
                    {
                        $mensaje = $mensaje . "<br>" . $resultadoJsonLdap->mensaje;
                    }
                }
            }
            else if($status == "ERROR")
            {
                $result = $mensaje;

                $emComercial->getConnection()->rollback();
                $emInfraestructura->getConnection()->rollback();
            }
        }
        catch(\Exception $e)
        {
            $emComercial->getConnection()->rollback();
            $emInfraestructura->getConnection()->rollback();

            $result = "Error: " . $e->getMessage();
        }

        return $respuesta->setContent($result);
    }

    /**
     * Funcion que agrega mac address (wifi) para servicios
     * que no se les migro dicha informacion
     * 
     * @author Creado: John Vera <javera@telconet.ec>
     * @author Modificado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 17-10-2014
     * 
     */
    public function agregarMacAddressAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        $validacionMacOnt = $peticion->get('validacionMacOnt');
        $mac = $peticion->get('mac');
        $idServicio = $peticion->get('idServicio');
        $idProducto =  $peticion->get('idProducto');

        //consuto si el servicio pertenece a un plan
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $Plan = $servicio -> getPlanId();
        
    
        if ($Plan->getId()){
            $tipoMac='MAC WIFI';
            if ($validacionMacOnt=="incorrecta"){
                $respuesta->setContent("Mac Wifi Incorrecta (aaaa.bbbb.cccc), favor revisar!");
                return $respuesta;
            }
            
        }else{
            $tipoMac='MAC';
        }
        
        $caracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
                             ->findOneBy(array( "descripcionCaracteristica" => $tipoMac, "estado"=>"Activo"));
        $idCaracteristica = $caracteristica->getId();
        
        $prodCaracteristica = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                   ->findOneBy(array( "productoId" => $idProducto, "caracteristicaId" => $idCaracteristica, "estado"=>"Activo"));
        
        $em->getConnection()->beginTransaction();
                 
        //inserto en la tabla info_servicio_prod_caracterisitica
        $ServicioProdCaract = new InfoServicioProdCaract();
        $ServicioProdCaract-> setServicioId($idServicio);
        $ServicioProdCaract-> setProductoCaracterisiticaId($prodCaracteristica->getId());
        $ServicioProdCaract-> setValor($mac);
        $ServicioProdCaract-> setEstado('Activo');
        $ServicioProdCaract-> setFeCreacion(new \DateTime('now'));
        $ServicioProdCaract-> setUsrCreacion($session->get('user'));
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se agrego Mac Address: ".$mac);
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
                
                
        try {
            $em->persist($servicioHistorial);
            $em->persist($ServicioProdCaract);
            $em->flush();
            $em->getConnection()->commit();
        } catch(\Doctrine\DBAL\DBALException $e)
            {
            $respuesta->setContent($e);
            return $respuesta;
            }
        
        $respuesta->setContent("OK");
        return $respuesta;
     }
        
    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO DOMINIO/HOSTING/SITIO WEB
     * ******************************************************
     */
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de dominio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-09-2016 Se agrega el envío de correo al confirmar el servicio
     */
    public function confirmarServicioDominioAction(){
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $em             = $this->get('doctrine')->getManager('telconet');
        $emSeguridad    = $this->get('doctrine')->getManager('telconet_seguridad');
        
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $empleadoSesion = $session->get('empleado');
        $strIpClient    = $request->getClientIp();
        $strUser        = $session->get('user');
        
        $idServicio     = $request->get('idServicio');
        $idAccion       = $request->get('idAccion');
        
        $servicio       = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion         = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("DOMINIO: Se confirmo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($strIpClient);
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        $arrayParametrosMail=array(
                                    "servicio"                      => $servicio,
                                    "prefijoEmpresa"                => $prefijoEmpresa,
                                    "empleadoSesion"                => $empleadoSesion,
                                    "idEmpresa"                     => $idEmpresa,
                                    "user"                          => $strUser,
                                    "ipClient"                      => $strIpClient
        );
        /* @var $confirmar InfoConfirmarServicio */
        $confirmar = $this->get('tecnico.InfoConfirmarServicio');
        $confirmar->envioMailConfirmarServicio($arrayParametrosMail);
        
        return $respuesta;
    }
    
    /**
     * Funcion que agrega un domino en la base de datos para
     * el servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 11-04-2017 - Se realizaron ajustes para registrar en el historial del servicio la acción de 'confirmarServicio' o 
     *                           ingresar en la observación 'Se confirmo el servicio'
     */
    public function agregarDominioServicioAction(){       
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio         = $peticion->get('idServicio');
        $dominio            = $peticion->get('dominio');
        $serviceComercial   = $this->get('comercial.Comercial');
        $strExisteHistorial = ""; 
        $arrayParametros    = array();
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        
        $caracteristica1 = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "DOMINIO", "estado" => "Activo"));
        $producto = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "descripcionProducto" => "DOMINIO", "estado" => "Activo"));
        $prodCaracteristica1 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $producto->getId(), "caracteristicaId" => $caracteristica1->getId()));
        
        
        $em->getConnection()->beginTransaction();
        
        //servicio prod caract - dominio
        $spc = new InfoServicioProdCaract();
        $spc->setServicioId($idServicio);
        $spc->setProductoCaracterisiticaId($prodCaracteristica1->getId());
        $spc->setValor($dominio);
        $spc->setEstado("Activo");
        $spc->setUsrCreacion($session->get('user'));
        $spc->setFeCreacion(new \DateTime('now'));
        $em->persist($spc);
        
        //info servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se agrego un dominio al servicio");
        $servicioHistorial->setEstado("Activo");

        if($session->get('prefijoEmpresa') === 'TN')
        {
            $arrayParametros["strCaracteristica"] = 'FACTURACION_PROPORCIONAL';
            $arrayParametros["strUser"]           = $session->get('user');
            $arrayParametros["strIpUser"]         = $peticion->getClientIp();

            if(is_object($servicio))
            {
                $arrayParametros["intServicioId"] = $servicio->getId();
            }                    
            
            //Se llama al service para validar si este producto necesita que se le ingrese la accion o la observacion 
            //que confirma la activación del servicio
            $strExisteHistorial = $serviceComercial->validarFrecuenciaRecurrente($arrayParametros);

            if($strExisteHistorial == "N")
            {
                $servicioHistorial->setAccion('confirmarServicio');
            }                    
        }
        
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que obtiene los dominios almacenados
     * en la base de datos para el servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function getDominiosAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');        
        $idServicio = $peticion->query->get('idServicio');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
               
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonDominios($idServicio, $empresa,$start, 100, $em);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    /**
     * Funcion que obtiene los dominios almacenados
     * en la base de datos para cada punto del cliente 
     * 
     * @author Andres Flores <aoflores@telconet.ec>
     * @version 1.0 07-04-2016
     */
     public function getDominiosCorreosAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $idServicioDominio=array();
        $objJson="";        
        $peticion = $this->get('request');        
        $idServicio = $peticion->query->get('idServicio');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $productos = $em->getRepository('schemaBundle:AdmiProducto')  
                       ->findBy(array( "nombreTecnico" => "DOMINIO",
                                          "estado"        => "Activo", 
                                          "empresaCod"    => $empresa));        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')
                       ->find($idServicio);
        $punto = $em->getRepository('schemaBundle:InfoPunto')
                ->find($servicio->getPuntoId()->getId());        
        $puntos = $em->getRepository('schemaBundle:InfoPunto')
                ->findBy(array( "personaEmpresaRolId" => $punto->getPersonaEmpresaRolId()));
                
        foreach ($productos as $producto)
        {
            $idProducto = $producto->getId();
            foreach($puntos as $punto){
                $servicio = $em->getRepository('schemaBundle:InfoServicio')
                       ->findOneBy(array( "puntoId"     => $punto->getId(),
                                          "productoId"  => $producto->getId()));
                if($servicio != null){
                    $idServicioDominio[] = array($servicio->getId());
                }
            }
            
        }
        $objJson = $this->getDoctrine()
                            ->getManager("telconet")
                            ->getRepository('schemaBundle:InfoServicioTecnico')
                            ->generarJsonDominiosCorreos($idServicioDominio,$empresa,$start, 100, $em);
        $respuesta->setContent($objJson);
        return $respuesta;
    }
    

    /**
     * Funcion que cambia de estado Eliminado en la base de datos
     * para el servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function eliminarDominioAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $spc = $peticion->get('spc');
        
        $spcObj = $em->getRepository('schemaBundle:InfoServicioProdCaract')->find($spc);
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($spcObj->getServicioId());
        
        $em->getConnection()->beginTransaction();
        
        $spcObj->setEstado("Eliminado");
        $em->persist($spcObj);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se elimino el dominio: ".$spcObj->getValor());
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Cancel al servicio
     * adicional de dominio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cancelarServicioDominioAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Cancel");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("DOMINIO: Se cancelo el servicio");
        $servicioHistorial->setEstado("Cancel");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a In-Corte al servicio
     * adicional de dominio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cortarServicioDominioAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("In-Corte");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("DOMINIO: Se corto el servicio");
        $servicioHistorial->setEstado("In-Corte");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de dominio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function reconectarServicioDominioAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("DOMINIO: Se reactivo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO CORREO/SMTP AUTENTICADO
     * ******************************************************
     */
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de correo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-09-2016 Se agrega el envío de correo al confirmar el servicio
     * 
     */
    public function confirmarServicioCorreoAction(){
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $em             = $this->get('doctrine')->getManager('telconet');
        $emSeguridad    = $this->get('doctrine')->getManager('telconet_seguridad');
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $empleadoSesion = $session->get('empleado');
        $strIpClient    = $request->getClientIp();
        $strUser        = $session->get('user');
        
        $idServicio     = $request->get('idServicio');
        $idAccion       = $request->get('idAccion');
        
        $servicio       = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion         = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("CORREO: Se confirmo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($strIpClient);
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        $arrayParametrosMail=array(
                                    "servicio"                      => $servicio,
                                    "prefijoEmpresa"                => $prefijoEmpresa,
                                    "empleadoSesion"                => $empleadoSesion,
                                    "idEmpresa"                     => $idEmpresa,
                                    "user"                          => $strUser,
                                    "ipClient"                      => $strIpClient
        );
        /* @var $confirmar InfoConfirmarServicio */
        $confirmar = $this->get('tecnico.InfoConfirmarServicio');
        $confirmar->envioMailConfirmarServicio($arrayParametrosMail);
        
        return $respuesta;
    }
    
    /**
     * Funcion que sirve para insertar un mail en la 
     * base de datos para el servicio de correo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 11-04-2017 - Se realizaron ajustes para registrar en el historial del servicio la acción de 'confirmarServicio' o 
     *                           ingresar en la observación 'Se confirmo el servicio'
     */
    public function agregarCorreoServicioAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('prefijoEmpresa');
        $empresaId = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio             = $peticion->get('idServicio');
        $usuario                = $peticion->get('usuario');
        $clave                  = $peticion->get('clave');
        $dominioCorreo          = $peticion->get('dominio');
        $arrayParametros        = array();    
        $strExisteHistorial     = "";
        $serviceComercial       = $this->get('comercial.Comercial');        
        
        $caracteristica3="";
        $prodCaracteristica3="";
        $caracteristica4="";
        $prodCaracteristica4="";
        $idServProdCaractDominio ="";
        
        $mensaje="";
        $status="";
        $claveCod="";
        $dominio="";
        $cliente="";
        //jvera 06/05/2014 inicio 
        $respuesta->setContent("OK");
        if ($empresa=="MD"){
            //separo al usuario del dominio de correo
            $pos = strpos($usuario, "@");
            if ($pos>0) { 
            $usuario = substr($usuario, 0, $pos);
            }
        
            $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->container->getParameter('path_telcos')."telcos/src/telconet/tecnicoBundle/batch/GestionCuentasCorreos.jar 'C' '".$usuario."' '".$clave."' ";
            $salida= shell_exec($comando);
            $pos = strpos($salida, "{"); 
            $jsonObj= substr($salida, $pos);
            $resultadJson = json_decode($jsonObj);
            $mensaje = $resultadJson->mensaje;
            $status = $resultadJson->status;
            $claveCod = $resultadJson->clave;
                        
            if ($status=='error'){
                $respuesta->setContent($mensaje);
                return $respuesta;
            }
            //jvera 06/05/2014 fin            
        }
        //aoflores 08/04/2016
        if ($empresa=="TN"){            
             //encriptar contrasena
            $encriptacion = $this->get('seguridad.crypt');
            $claveCod = $encriptacion->encriptar($clave);
                        
            if ($status=='error'){
                $respuesta->setContent("Error al guardar el usuario: ".$usuario."@".$dominioCorreo);
                return $respuesta;
            }
            
        }
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $infoServicioProdCaract = $em->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array( "id" => $dominioCorreo));
        
        if($empresa == "TN")
        {
            $valorDominio = $infoServicioProdCaract->getValor();
            if(strpos(strtoupper($valorDominio), 'TELCONET') !== false)
            {
                $cliente = "Telconet";
            }
            else
            {
                $cliente = "Cliente";
            }
        }

        $caracteristica1 = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "USUARIO", "estado" => "Activo"));        
        $caracteristica2 = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "CLAVE", "estado" => "Activo"));
        
        $producto = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "nombreTecnico" => "CORREO", "empresaCod"=>$empresaId, "estado" => "Activo"));        
        $productoDominio = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "nombreTecnico" => "DOMINIO", "empresaCod"=>$empresaId, "estado" => "Activo"));
        $prodCaracteristica1 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $producto->getId(), "caracteristicaId" => $caracteristica1->getId(), "estado"=>"Activo"));
        $prodCaracteristica2 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $producto->getId(), "caracteristicaId" => $caracteristica2->getId(), "estado"=>"Activo"));
        if ($empresa == "TN") {
            $caracteristica3 = $em->getRepository('schemaBundle:AdmiCaracteristica')->
                    findOneBy(array( "descripcionCaracteristica" => "DOMINIO",
                                     "estado" => "Activo"));
            $caracteristica4 = $em->getRepository('schemaBundle:AdmiCaracteristica')->
                    findOneBy(array( "descripcionCaracteristica" => "Propiedad Dominio",
                                     "estado" => "Activo"));            
            $prodCaracteristica3 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->
                    findOneBy(array("productoId" => $productoDominio->getId(),
                                    "caracteristicaId" => $caracteristica3->getId(),
                                    "estado" => "Activo"));
            $prodCaracteristica4 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->
                    findOneBy(array("productoId" => $producto->getId(),
                                    "caracteristicaId" => $caracteristica4->getId(),
                                    "estado" => "Activo"));
        }
        $em->getConnection()->beginTransaction();
        
        //servicio prod caract - usuario
        $spc = new InfoServicioProdCaract();//$idServProdCaractDominio
        $spc->setServicioId($idServicio);
        $spc->setProductoCaracterisiticaId($prodCaracteristica1->getId());
        $spc->setValor($usuario);
        if ($empresa == "TN") {
            $spc->setRefServicioProdCaractId($dominioCorreo);
        }
        $spc->setEstado("Activo");
        $spc->setUsrCreacion($session->get('user'));
        $spc->setFeCreacion(new \DateTime('now'));
        $em->persist($spc);

        $spc1 = new InfoServicioProdCaract();
        $spc1->setServicioId($idServicio);
        $spc1->setProductoCaracterisiticaId($prodCaracteristica2->getId());
        $spc1->setValor($claveCod);
        $spc1->setRefServicioProdCaractId($spc->getId());
        $spc1->setEstado("Activo");
        $spc1->setUsrCreacion($session->get('user'));
        $spc1->setFeCreacion(new \DateTime('now'));
        $em->persist($spc1);
        
        if ($empresa == "TN") {
            $spc3 = new InfoServicioProdCaract();
            $spc3->setServicioId($idServicio);
            $spc3->setProductoCaracterisiticaId($prodCaracteristica4->getId());
            $spc3->setValor($cliente);
            $spc3->setRefServicioProdCaractId($spc->getId());
            $spc3->setEstado("Activo");
            $spc3->setUsrCreacion($session->get('user'));
            $spc3->setFeCreacion(new \DateTime('now'));
            $em->persist($spc3);
        }
        
        // info servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
                       
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se agrego un correo al servicio");
        $servicioHistorial->setEstado("Activo");
                        
        if($session->get('prefijoEmpresa') === 'TN')
        {
            $arrayParametros["strCaracteristica"] = 'FACTURACION_PROPORCIONAL';
            $arrayParametros["strUser"]           = $session->get('user');
            $arrayParametros["strIpUser"]         = $peticion->getClientIp();

            if(is_object($servicio))
            {
                $arrayParametros["intServicioId"] = $servicio->getId();
            }                    

            //Se llama al service para validar si este producto necesita que se le ingrese la accion o la observacion 
            //que confirma la activación del servicio
            $strExisteHistorial = $serviceComercial->validarFrecuenciaRecurrente($arrayParametros);

            if($strExisteHistorial == "N")
            {
                $servicioHistorial->setAccion('confirmarServicio');
            }                    
        }      

        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que obtiene los mails que tiene
     * el servicio de correo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function getCorreosAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->query->get('idServicio');
        $producto   = $peticion->query->get('producto');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonCorreos($idServicio,$empresa,$producto,$start, 100, $em);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    /**
     * Funcion que obtiene la contrasenia de cada mail
     * que tiene el servicio de correo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function getContraseniaDelCorreoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $idEmpresa = $session->get('idEmpresa');
        $empresa = $session->get('prefijoEmpresa');
        $peticion = $this->get('request');
        
        $spc = $peticion->get('spc');
        
        $caracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array(   "descripcionCaracteristica" => "CLAVE",
                                                                                                    "estado"                    => "Activo"));
        $producto = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(   "nombreTecnico" =>  "CORREO", 
                                                                                        "empresaCod"    =>  $idEmpresa, 
                                                                                        "estado"        =>  "Activo"));
        $prodCaracteristica = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array(   "productoId"        => $producto->getId(),
                                                                                                                "caracteristicaId"  => $caracteristica->getId(), 
                                                                                                                "estado"            =>"Activo"));        
        $objServicioProdCarac = $em->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array("refServicioProdCaractId"    =>$spc,
                                                                                                           "estado"                     => "Activo",
                                                                                                           "productoCaracterisiticaId"  => $prodCaracteristica->getId()));
        
        if($objServicioProdCarac)
        {
            $claveCifrada = $objServicioProdCarac->getValor();

            if($claveCifrada)
            {
                
                if ($empresa=="MD"){
                    //desencriptar la clave
                    $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->container->getParameter('path_telcos')."telcos/src/telconet/tecnicoBundle/batch/GestionCuentasCorreos.jar 'DC' '' '" . $claveCifrada . "' ";

                    $salida = shell_exec($comando);
                    $pos = strpos($salida, "{");
                    $jsonObj = substr($salida, $pos);
                    $resultadJson = json_decode($jsonObj);
                    $result = $resultadJson->clave;
                    $status = $resultadJson->status;

                    if($status == "ok")
                    {
                        $respuesta->setContent($result);
                        return $respuesta;
                    }
                    else
                    {
                        $respuesta->setContent('Error en la ejecucion del script');
                        return $respuesta;
                    }
                }
                if ($empresa=="TN"){                    
                    //desencriptar contrasena
                    $mensaje = "Ha ocurrido un error al encriptar la clave";
                    $encriptacion = $this->get('seguridad.crypt');
                    $result = $encriptacion->descencriptar($claveCifrada);
                    if($result!=null){
                        $respuesta->setContent($result);
                    }else{
                        $respuesta->setContent($mensaje);
                    }
                    return $respuesta;
                    
                }else{
                    $respuesta->setContent('No se puede desencriptar la contraseña');
                    return $respuesta;
                }
            }
        }
        else
        {
            $respuesta->setContent('No tiene contraseña');
            return $respuesta;
        }
        
    }
    
    /**
     * Funcion que elimina un correo de la base de datos y del servidor
     * de correos
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * @version 1.1 06-08-2015 John Vera 
     */
    public function eliminarCorreoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('prefijoEmpresa');
        
        $peticion = $this->get('request');
        
        $spc = $peticion->get('spc');
        
        $spcObj = $em->getRepository('schemaBundle:InfoServicioProdCaract')->find($spc);
        $arraySpcRef = $em->getRepository('schemaBundle:InfoServicioProdCaract')->findBy(array( "refServicioProdCaractId" => $spc));
        
        $usuario =  $spcObj->getValor();
        //jvera  06/05/2014 inicio
        $respuesta->setContent("OK");
        if ($empresa=="MD"){
            //separo al usuario del dominio de correo
            $pos = strpos($usuario, "@");
            if ($pos>0) { 
            $usuario = substr($usuario, 0, $pos);
            }
            
            $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->container->getParameter('path_telcos').
                       "telcos/src/telconet/tecnicoBundle/batch/GestionCuentasCorreos.jar 'E' '".$usuario."' ' ' ";
            $salida= shell_exec($comando);
            $pos = strpos($salida, "{"); 
            $jsonObj= substr($salida, $pos);
            $resultadJson = json_decode($jsonObj);
            $mensaje = $resultadJson->mensaje;
            $status = $resultadJson->status;
                        
            if ($status=='error'){
                $respuesta->setContent($mensaje);
                return $respuesta;
            }
            //jvera 06/05/2014 fin            
        }
                
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($spcObj->getServicioId());
        
        $em->getConnection()->beginTransaction();
        
        $spcObj->setEstado("Eliminado");
        foreach($arraySpcRef as $spcRef){
            $spcRef->setEstado("Eliminado");
            $em->persist($spcRef);
        }
        $em->persist($spcObj);
        
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se elimino el correo: ".$spcObj->getValor());
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();        
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de clave en la base de datos
     * y en el servidor de correos
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cambiarClaveCorreoAction(){
        
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('prefijoEmpresa');
        $idEmpresa = $session->get('idEmpresa');

        $spc = $request->get('spc');
        $clave = $request->get('clave');
        
        $mensaje = "";
        $status = "";
        $claveCod = "";
        
        $spcObj = $em->getRepository('schemaBundle:InfoServicioProdCaract')->find($spc);
        $usuario =  $spcObj->getValor();
        
        
        if($empresa == "MD")
        {
            $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->container->getParameter('path_telcos')."telcos/src/telconet/tecnicoBundle/batch/GestionCuentasCorreos.jar 'CC' '" . $usuario . "' '" . $clave . "' ";
            $salida = shell_exec($comando);
            $pos = strpos($salida, "{");
            $jsonObj = substr($salida, $pos);
            $resultadJson = json_decode($jsonObj);
            $mensaje = $resultadJson->mensaje;
            $status = $resultadJson->status;
            $claveCod = $resultadJson->clave;

            if($status == 'error')
            {
                $respuesta->setContent($mensaje);
                return $respuesta;
            }
        }
        
        if($empresa == "TN"){
            //encriptar contrasena
            $encriptacion = $this->get('seguridad.crypt');
            if($clave!=null){
                $claveCod = $encriptacion->encriptar($clave); 
            }else{
                $mensaje = "Existe un error en la clave asignada, verificar";
                $respuesta->setContent($mensaje);
                return $respuesta;
            }
        }
        $caracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array(   "descripcionCaracteristica" => "CLAVE",
                                                                                                    "estado"                    => "Activo"));
        $producto = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(   "nombreTecnico" =>  "CORREO", 
                                                                                        "empresaCod"    =>  $idEmpresa, 
                                                                                        "estado"        =>  "Activo"));
        $prodCaracteristica = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array(   "productoId"        => $producto->getId(),
                                                                                                                "caracteristicaId"  => $caracteristica->getId(), 
                                                                                                                "estado"            =>"Activo"));
        $spcRef = $em->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array(   "refServicioProdCaractId"   => $spc,
                                                                                                "estado"                    => "Activo",
                                                                                                "productoCaracterisiticaId" => $prodCaracteristica->getId()));

        if(!$spcRef)
        {
            $respuesta->setContent("No existe clave relacionada a la cuenta de correo.");
            return $respuesta;
        }

        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($spcObj->getServicioId());
        //cambio estado a registro de clave
        $em->getConnection()->beginTransaction();
        $spcRef->setEstado('Eliminado');
        $spcRef->setUsrUltMod($session->get('user'));
        $spcRef->setFeUltMod(new \DateTime('now'));
        $em->persist($spcRef);

        //inserto registro de clave
        $spc1 = new InfoServicioProdCaract();
        $spc1->setServicioId($servicio->getId());
        $spc1->setProductoCaracterisiticaId($spcRef->getProductoCaracterisiticaId());
        $spc1->setValor($claveCod);
        $spc1->setRefServicioProdCaractId($spc);
        $spc1->setEstado("Activo");
        $spc1->setUsrCreacion($session->get('user'));
        $spc1->setFeCreacion(new \DateTime('now'));
        $em->persist($spc1);

        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Se cambio la contraseña de la cuenta " . $usuario . " a " . $clave);
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($request->getClientIp());
        $em->persist($servicioHistorial);

        try
        {
            $em->flush();
            $em->getConnection()->commit();
        }
        catch(\Doctrine\DBAL\DBALException $e)
        {
            $respuesta->setContent($e);
            return $respuesta;
        }

        $respuesta->setContent("OK");
        return $respuesta;
        
        
    }
    
    /**
     * Funcion que cambia de estado a Cancel al servicio
     * adicional de correo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cancelarServicioCorreoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        $prejifoEmpresa = $session->get('prefijoEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        if (!$idServicio){
            $respuesta->setContent("El id de servicio no puede ser nulo.");
            return $respuesta;
        }
        
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')
                       ->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();

        $spc = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                  ->findBy(array( "servicioId" => $idServicio, 
                                  "estado" => "Activo"));
        
        //obtener el id producto caracteristica del correo
        $caracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
                             ->findOneBy(array( "descripcionCaracteristica" => "USUARIO", 
                                                "estado" => "Activo"));
        $producto = $em->getRepository('schemaBundle:AdmiProducto')
                       ->findOneBy(array("nombreTecnico" => "CORREO", 
                                         "empresaCod"=>$empresa, 
                                         "estado" => "Activo"));
        $prodCaracteristica = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                 ->findOneBy(array( "productoId" => $producto->getId(), 
                                                    "caracteristicaId" => $caracteristica->getId(), 
                                                    "estado"=>"Activo"));
                
        //seteo estado eliminado a los registros relacionados al servicio en la tabla InfoServicioProdCaract
        foreach ($spc as $correo){
            $correo->setEstado('Eliminado');
            $correo->setUsrUltMod($session->get('user'));
            $correo->setFeUltMod(new \DateTime('now'));
            $em->persist($correo);
                        

            if ($prejifoEmpresa=="MD"){
                if (($correo->getProductoCaracterisiticaId())==($prodCaracteristica->getId())){

                    $usuario = $correo->getValor() ;
                    $comando = "java -jar -Djava.security.egd=file:/dev/./urandom /home/telcos/src/telconet/tecnicoBundle/batch/GestionCuentasCorreos.jar 'E' '".$usuario."' ' ' ";
                    $salida= shell_exec($comando);
                    $pos = strpos($salida, "{"); 
                    $jsonObj= substr($salida, $pos);
                    $resultadJson = json_decode($jsonObj);
                    $mensaje = $resultadJson->mensaje;
                    $status = $resultadJson->status;

                    if ($status=='error'){
                        $em->getConnection()->rollback();
                        $respuesta->setContent($mensaje);
                        return $respuesta;

                    }
                }
            }    
            
        } 
        
       
        //servicio
        $servicio->setEstado("Cancel");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("CORREO: Se cancelo el servicio.");
        $servicioHistorial->setEstado("Cancel");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();

        $respuesta->setContent("OK");
         return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a In-Corte al servicio
     * adicional de correo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cortarServicioCorreoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("In-Corte");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("CORREO: Se corto el servicio");
        $servicioHistorial->setEstado("In-Corte");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de correo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function reconectarServicioCorreoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("CORREO: Se reactivo el servicio");
        $servicioHistorial->setEstado("Activo"); 
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO ANTIVIRUS
     * ******************************************************
     */
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de Antivirus
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-09-2016 Se agrega el envío de correo al confirmar el servicio
     * 
     */
    public function confirmarServicioAntivirusAction(){
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $em             = $this->get('doctrine')->getManager('telconet');
        $emSeguridad    = $this->get('doctrine')->getManager('telconet_seguridad');
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $empleadoSesion = $session->get('empleado');
        $strIpClient    = $request->getClientIp();
        $strUser        = $session->get('user');
        
        $idServicio     = $request->get('idServicio');
        $idAccion       = $request->get('idAccion');
        
        $servicio       = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion         = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Internet Protegido: Se confirmo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($strIpClient);
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        $arrayParametrosMail=array(
                                    "servicio"                      => $servicio,
                                    "prefijoEmpresa"                => $prefijoEmpresa,
                                    "empleadoSesion"                => $empleadoSesion,
                                    "idEmpresa"                     => $idEmpresa,
                                    "user"                          => $strUser,
                                    "ipClient"                      => $strIpClient
        );
        /* @var $confirmar InfoConfirmarServicio */
        $confirmar = $this->get('tecnico.InfoConfirmarServicio');
        $confirmar->envioMailConfirmarServicio($arrayParametrosMail);
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Cancel al servicio
     * adicional de Antivirus
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cancelarServicioAntivirusAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Cancel");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Internet Protegido: Se cancelo el servicio");
        $servicioHistorial->setEstado("Cancel");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }

    /**
     * Funcion que cambia de estado a In-Corte al servicio
     * adicional de Antivirus
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cortarServicioAntivirusAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("In-Corte");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Internet Protegido: Se corto el servicio");
        $servicioHistorial->setEstado("In-Corte");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de Antivirus
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function reconectarServicioAntivirusAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Internet Protegido: Se reactivo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO  EQUIPO PROTEGIDO
     * ******************************************************
     */
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de Equipo Protegido
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-09-2016 Se agrega el envío de correo al confirmar el servicio
     */
    public function confirmarServicioEquipoProtegidoAction(){
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $em             = $this->get('doctrine')->getManager('telconet');
        $emSeguridad    = $this->get('doctrine')->getManager('telconet_seguridad');

        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $empleadoSesion = $session->get('empleado');
        $strIpClient    = $request->getClientIp();
        $strUser        = $session->get('user');

        $idServicio     = $request->get('idServicio');
        $idAccion       = $request->get('idAccion');

        $servicio       = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion         = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);

        $em->getConnection()->beginTransaction();

        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);

        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Equipo Protegido: Se confirmo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($strIpClient);
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);

        $em->flush();
        $em->getConnection()->commit();

        $respuesta->setContent("OK");

        $arrayParametrosMail=array(
                                    "servicio"                      => $servicio,
                                    "prefijoEmpresa"                => $prefijoEmpresa,
                                    "empleadoSesion"                => $empleadoSesion,
                                    "idEmpresa"                     => $idEmpresa,
                                    "user"                          => $strUser,
                                    "ipClient"                      => $strIpClient
        );
        /* @var $confirmar InfoConfirmarServicio */
        $confirmar = $this->get('tecnico.InfoConfirmarServicio');
        $confirmar->envioMailConfirmarServicio($arrayParametrosMail);

        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Cancel al servicio
     * adicional de Equipo Protegido
     * 
     * @author Francisco Adum <fadum@telconet.ec> 
     * @version 1.0 16-10-2014
     */
    public function cancelarServicioEquipoProtegidoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Cancel");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Equipo Protegido: Se cancelo el servicio");
        $servicioHistorial->setEstado("Cancel");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a In-Corte al servicio
     * adicional de Equipo Protegido
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function cortarServicioEquipoProtegidoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("In-Corte");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Equipo Protegido: Se corto el servicio");
        $servicioHistorial->setEstado("In-Corte");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia de estado a Activo al servicio
     * adicional de Equipo Protegido
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function reconectarServicioEquipoProtegidoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->get('idServicio');
        $idAccion = $peticion->get('idAccion');
        
        $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion("Equipo Protegido: Se reactivo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que obtiene el mail que se encuentra registrado en 
     * la base de datos para el servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     */
    public function verMailServicioEquipoProtegidoAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request = $this->get('request');
        $session  = $request->getSession();
        $em = $this->get('doctrine')->getManager('telconet');
        $empresa = $session->get('idEmpresa');
        
        $peticion = $this->get('request');
        
        $idServicio = $peticion->query->get('idServicio');
        $start = $peticion->query->get('start');
        $limit = $peticion->query->get('limit');
        
        $objJson = $this->getDoctrine()
            ->getManager("telconet")
            ->getRepository('schemaBundle:InfoServicioTecnico')
            ->generarJsonCorreosAntivirus($idServicio,$empresa,$start, 100, $em);
        $respuesta->setContent($objJson);
        
        return $respuesta;
    }
    
    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO OTROS
     * ******************************************************
     */

    /**
     * @Secure(roles="ROLE_151-847")
     * 
     * Funcion que cambia de estado a Activo al servicio
     * adicional de Otros
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 16-10-2014
     * @version 2.0 29-07-2015
     * @version 3.0 27-10-2015 Se modifica proceso debido a creación de servicios
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.1 13-09-2016 Se agrega el envío de correo al confirmar el servicio
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 3.2 02-07-2018 -Se agrega a la respuesta del Json que se envie al menos 1 : destinatario del Correo, destinatario del SMS, 
     * para mostrar mensaje por pantalla indicando que el Servicio Fox_Premium fue Activado y que el Usuario y Contraseña fueron 
     * enviados al correo y movil del cliente.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 3.3 03-09-2021 - Se agrega la variable 'arrayCliente' para enviar los datos al services para el envio de correo.
     * 
     */
    public function confirmarServicioOtrosAction()
    {
        $respuestaProceso           = new Response();
        $respuestaProceso->headers->set('Content-Type', 'text/json');
        
        $emComercial                = $this->get('doctrine')->getManager('telconet');
        $request                    = $this->get('request');
        $session                    = $request->getSession();
        $peticion                   = $this->get('request');
        $idServicio                 = $peticion->get('idServicio');
        $idAccion                   = $peticion->get('idAccion');
        $usrCreacion                = $session->get('user');
        $clientIp                   = $request->getClientIp();
        $empresa                    = $session->get('idEmpresa');
        $oficina                    = $session->get('idOficina');
        $idEmpresa                  = $session->get('idEmpresa');
        $prefijoEmpresa             = $session->get('prefijoEmpresa');
        $empleadoSesion             = $session->get('empleado');
        $strUser                    = $session->get('user');
        $arrayPeticiones            = array();
        
        try
        {
            /* @var $activacion InfoActivarPuertoService */
            $activacion = $this->get('tecnico.InfoActivarPuerto');
            
            $arrayPeticiones['idServicio']  = $idServicio;
            $arrayPeticiones['idEmpresa']   = $empresa;
            $arrayPeticiones['idOficina']   = $oficina;
            $arrayPeticiones['idAccion']    = $idAccion;
            $arrayPeticiones['usrCreacion'] = $usrCreacion;
            $arrayPeticiones['clientIp']    = $clientIp;
            $arrayPeticiones['arrayCliente']  = $arrayCliente;
                    
            $respuestaArray = $activacion->activarServiciosOtros($arrayPeticiones);
            $strStatus      = $respuestaArray['status'];
            $strMensaje     = $respuestaArray['mensaje'];
            
            $arrayResultado           = array();
            $arrayDestinatariosCorreo = array();
            $arrayDestinatariosMovil  = array();
            if ($strStatus == "OK")
            {                
                $servicio                 = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio); 
                $objInfoPunto             = $emComercial->getRepository('schemaBundle:InfoPunto')->find($servicio->getPuntoId()->getId()); 
                $objInfoPersonaEmpRol     = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                        ->find($objInfoPunto->getPersonaEmpresaRolId()->getId()); 
                $arrayDestinatariosCorreo = $emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                        ->obtieneFormaContactoxParametros(
                                                          array("intPuntoId"                  => $servicio->getPuntoId()->getId(),
                                                                "intPersonaId"                => $objInfoPersonaEmpRol->getPersonaId()->getId(),
                                                                "strDescripcionFormaContacto" => "Correo Electronico"));
                $arrayDestinatariosMovil  = $emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                        ->obtieneFormaContactoxParametros(
                                                          array("intPuntoId"                  => $servicio->getPuntoId()->getId(),
                                                                "intPersonaId"                => $objInfoPersonaEmpRol->getPersonaId()->getId(),
                                                                "strDescripcionFormaContacto" => "%Movil%"));
               
                $arrayResultado = array('srtResultado'  => 'OK',
                                        'strCorreo'     => $arrayDestinatariosCorreo[0], 
                                        'strMovil'      => $arrayDestinatariosMovil[0]);        
                $objJson        = json_encode($arrayResultado); 
                $respuestaProceso->setContent($objJson);
                        
                $arrayParametrosMail    =   array(
                                                    "servicio"                      => $servicio,
                                                    "prefijoEmpresa"                => $prefijoEmpresa,
                                                    "empleadoSesion"                => $empleadoSesion,
                                                    "idEmpresa"                     => $idEmpresa,
                                                    "user"                          => $strUser,
                                                    "ipClient"                      => $clientIp
                                            );
                /* @var $confirmar InfoConfirmarServicio */
                $confirmar = $this->get('tecnico.InfoConfirmarServicio');
                $confirmar->envioMailConfirmarServicio($arrayParametrosMail);
                
            }
            else
            {                
                $arrayResultado = array('srtResultado'  => $strMensaje,
                                        'strCorreo'     => '', 
                                        'strMovil'      => '');      
                $objJson = json_encode($arrayResultado);  
                $respuestaProceso->setContent($objJson);                               
            }            
        }
        catch(\Exception $ex)
        {
            error_log("error principal: " . $ex->getMessage());
            $respuestaProceso->setContent("");
        }
        
        return $respuestaProceso;
    }
    
    /**
     * confirmarServicioSmartWifiAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Funcion que cambia de estado a Activo al servicio adicional SmartWifi
     * 
     * @author  Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 23-02-2017
     * @since 1.0
     * 
     * @return  Object $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function confirmarServicioSmartWifiAction()
    {
        $objRespuesta                   = new JsonResponse();
        $emComercial                    = $this->get('doctrine')->getManager('telconet');
        $emSeguridad                    = $this->get('doctrine')->getManager('telconet_seguridad');
        $objPeticion                    = $this->get('request');
        $objSession                     = $objPeticion->getSession();
        $strUsrCreacion                 = $objSession->get('user');
        $strEmpresaCod                  = $objSession->get('idEmpresa');
        $strPrefijoEmpresa              = $objSession->get('prefijoEmpresa');
        $objEmpleadoSesion              = $objSession->get('empleado');
        $intIdServicio                  = $objPeticion->get('idServicio');
        $intIdAccion                    = $objPeticion->get('idAccion');
        $strObsActivarServicio          = $objPeticion->get('strObservacionServicio');
        $strIpCreacion                  = $objPeticion->getClientIp();
        $strSerieSmartWifi              = $objPeticion->get('strSerieSmartWifi');
        $strModeloSmartWifi             = $objPeticion->get('strModeloSmartWifi');
        $strMacSmartWifi                = $objPeticion->get('strMacSmartWifi');
        $intIdServicioInternet          = $objPeticion->get('intIdServicioInternet');
        $intIdSolicitudServicio         = $objPeticion->get('intIdSolicitudServicio');
        $serviceUtil                    = $this->get('schema.Util');
        $serviceConfirmarServicio       = $this->get('tecnico.InfoConfirmarServicio');
        $arrayPeticiones                = array();
        $strMensajeRespuesta            = "ERROR";
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            $objProducto = $objServicio->getProductoId();
            if (!is_object($objProducto))
            {
                throw new \Exception("El servicio no es un producto adicional");
            }
            
            $arrayPeticiones['ojbServicio']                     = $objServicio;
            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
            $arrayPeticiones['objProducto']                     = $objProducto;
            $arrayPeticiones['objAccion']                       = $objAccion;
            $arrayPeticiones['strEmpresaCod']                   = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
            $arrayPeticiones['strSerieSmartWifi']               = $strSerieSmartWifi;
            $arrayPeticiones['strModeloSmartWifi']              = $strModeloSmartWifi;
            $arrayPeticiones['strMacSmartWifi']                 = $strMacSmartWifi;
            $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
                    
            $strStatus = $serviceConfirmarServicio->confirmarServicioSmartWifi($arrayPeticiones);
            
            if ($strStatus == "OK")
            {
                $strMensajeRespuesta = $strStatus;
                $arrayParametrosMail =   array(
                                               "servicio"                      => $objServicio,
                                               "prefijoEmpresa"                => $strPrefijoEmpresa,
                                               "empleadoSesion"                => $objEmpleadoSesion,
                                               "observacionActivarServicio"    => $strObsActivarServicio,
                                               "idEmpresa"                     => $strEmpresaCod,
                                               "user"                          => $strUsrCreacion,
                                               "ipClient"                      => $strIpCreacion
                                              );
                
                $serviceConfirmarServicio->envioMailConfirmarServicio($arrayParametrosMail);
            }
            else
            {
                throw new \Exception("Se presentaron errores al confirmar la activación del servicio SmarttWifi");
            }            
        }
        catch(\Exception $ex)
        {
            $strMensajeRespuesta = 'Se presentaron errores al confirmar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.confirmarServicioSmartWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * cancelarServicioSmartWifiAction
     * 
     * Funcion que cambia el estado a Cancel al servicio SmartWifi
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 23-02-2017 
     * @since 1.0
     * 
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 09-08-2017 -  En la tabla INFO_DETALLE_HISTORIAL se registra el id_persona_empresa_rol del responsable de la tarea
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 14-09-2017 - Se realizan ajustes para definir que el estado inicial de una tarea sea 'Asignada'
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 21-12-2017 - En la tabla INFO_DETALLE_ASIGNACION se registra el campo tipo asignado 'EMPLEADO'
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 01-03-2018 Se registra tracking del elemento
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.5 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     *
     * @return  Object  $objJsonResponse   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function cancelarServicioSmartWifiAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $intIdDepartamento      = $objSession->get('idDepartamento');
        $intIdServicio          = $objRequest->get('idServicio');
        $intIdAccion            = $objRequest->get('idAccion');
        $intIdPersonaEmpRol     = $objSession->get('idPersonaEmpresaRol');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSeguridad            = $this->get('doctrine')->getManager('telconet_seguridad');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $emSoporte              = $this->get('doctrine')->getManager('telconet_soporte');
        $serviceUtil            = $this->get('schema.Util');
        $strMensajeRespuesta    = "";
        $strAfectadoNombre      = "";
        $intPuntoId             = "";
        $strPuntoLogin          = "";
        $intIdCriterioAfectado  = 1;
        $serviceSoporte       = $this->get('soporte.SoporteService');
        $serviceInfoElemento  = $this->get('tecnico.InfoElemento');
        $arrayParametrosHist  = array();
        $arrayParametrosAuditoria = array();
        
        $arrayParametrosHist["strCodEmpresa"]           = $objSession->get('idEmpresa');
        $arrayParametrosHist["strUsrCreacion"]          = $objSession->get('user');
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strIpCreacion"]           = $objRequest->getClientIp();    
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
        
        $emGeneral->getConnection()->beginTransaction();
        $emSoporte->getConnection()->beginTransaction();
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            $objProducto = $objServicio->getProductoId();
            if (!is_object($objProducto))
            {
                throw new \Exception("El servicio no es un producto adicional");
            }
            //servicio
            $objServicio->setEstado("Cancel");
            $emComercial->persist($objServicio);
            $emComercial->flush();
            //historial del servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($objProducto->getDescripcionProducto().": Se cancelo el servicio");
            $objServicioHistorial->setEstado("Cancel");
            $objServicioHistorial->setUsrCreacion($objSession->get('user'));
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
            $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorial);
            $emComercial->flush();
            
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }

            $objElementoSmartWifi = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                      ->find($objServicioTecnico->getElementoClienteId());
            if (!is_object($objElementoSmartWifi))
            {
                throw new \Exception("No se encontro información del equipo Smart Wifi del servicio");
            }

            $objEnlaceCliente = $emInfraestructura
                                ->getRepository('schemaBundle:InfoEnlace')
                                ->findOneBy(array("interfaceElementoFinId" => $objServicioTecnico->getInterfaceElementoClienteId(),
                                                  "estado"                 => "Activo"));

            //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
            if(is_object($objEnlaceCliente))
            {
                //elimino enlace
                $objEnlaceCliente->setEstado("Eliminado");
                $emInfraestructura->persist($objEnlaceCliente);
                $emInfraestructura->flush(); 

                //crear las caract para la solicitud de retiro de equipo
                $objEnlaceClienteSiguiente = $emInfraestructura
                                             ->getRepository('schemaBundle:InfoEnlace')
                                             ->findOneBy(array("interfaceElementoIniId" => $objServicioTecnico->getInterfaceElementoClienteId(),
                                                               "estado"                 => "Activo"));

                //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
                if(is_object($objEnlaceClienteSiguiente))
                {
                    //elimino enlace
                    $objEnlaceClienteSiguiente->setEstado("Eliminado");
                    $emInfraestructura->persist($objEnlaceClienteSiguiente);
                    $emInfraestructura->flush(); 

                    $objEnlaceNuevo = new InfoEnlace();
                    $objEnlaceNuevo->setInterfaceElementoIniId($objEnlaceCliente->getInterfaceElementoIniId());
                    $objEnlaceNuevo->setInterfaceElementoFinId($objEnlaceClienteSiguiente->getInterfaceElementoFinId());
                    $objEnlaceNuevo->setTipoMedioId($objEnlaceClienteSiguiente->getTipoMedioId());
                    $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                    $objEnlaceNuevo->setEstado("Activo");
                    $objEnlaceNuevo->setUsrCreacion($objSession->get('user'));
                    $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                    $objEnlaceNuevo->setIpCreacion($objRequest->getClientIp());
                    $emInfraestructura->persist($objEnlaceNuevo);
                    $emInfraestructura->flush(); 
                }
            }

            //se eliminan elementos del servicio
            $objElementoSmartWifi->setEstado("Eliminado");
            $emInfraestructura->persist($objElementoSmartWifi);
            $emInfraestructura->flush();

            //SE REGISTRA EL TRACKING DEL ELEMENTO
            $arrayParametrosAuditoria["strNumeroSerie"]  = $objElementoSmartWifi->getSerieFisica();
            $arrayParametrosAuditoria["strEstadoTelcos"] = 'Eliminado';
            $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
            $arrayParametrosAuditoria["strEstadoActivo"] = 'Cancelado';
            $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
            $arrayParametrosAuditoria["strCodEmpresa"]   = $objSession->get('idEmpresa');
            $arrayParametrosAuditoria["strTransaccion"]  = 'Cancelacion Servicio';
            $arrayParametrosAuditoria["intOficinaId"]    = 0;

            //Se consulta el login del cliente
            if(is_object($objServicioTecnico->getServicioId()))
            {
                $objInfoPunto = $emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                                  ->find($objServicioTecnico->getServicioId()->getPuntoId()->getId());
                if(is_object($objInfoPunto))
                {
                    $arrayParametrosAuditoria["strLogin"] = $objInfoPunto->getLogin();
                }
            }

            $arrayParametrosAuditoria["strUsrCreacion"] = $objSession->get('user');

            $serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
            ////

            //historial del elemento
            $objHistorialElemento = new InfoHistorialElemento();
            $objHistorialElemento->setElementoId($objElementoSmartWifi);
            $objHistorialElemento->setObservacion("Se elimino el elemento por cancelacion de Servicio");
            $objHistorialElemento->setEstadoElemento("Eliminado");
            $objHistorialElemento->setUsrCreacion($objSession->get('user'));
            $objHistorialElemento->setFeCreacion(new \DateTime('now'));
            $objHistorialElemento->setIpCreacion($objRequest->getClientIp());
            $emInfraestructura->persist($objHistorialElemento);
            $emInfraestructura->flush();

            //eliminar puertos elemento
            $arrayInterfacesElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                         ->findBy(array("elementoId" => $objElementoSmartWifi->getId()));

            foreach($arrayInterfacesElemento as $objInterfaceElemento)
            {
                $objInterfaceElemento->setEstado("Eliminado");
                $emInfraestructura->persist($objInterfaceElemento);
                $emInfraestructura->flush();
            }

            //se agrega codigo para generación de solicitud de retiro de equipo y tarea en cancelaciones de servicios SmartWifi
            if (strpos($objProducto->getDescripcionProducto(), 'Renta') !== false)
            {
                //crear solicitud para retiro de equipo (ont y wifi)
                $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO", 
                                                                  "estado"               => "Activo"));
                $objDetalleSolicitud = new InfoDetalleSolicitud();
                $objDetalleSolicitud->setServicioId($objServicio);
                $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                $objDetalleSolicitud->setEstado("AsignadoTarea");
                $objDetalleSolicitud->setUsrCreacion($objSession->get('user'));
                $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                $objDetalleSolicitud->setObservacion("SOLICITA RETIRO DE EQUIPO POR CANCELACION DEL SERVICIO");
                $emComercial->persist($objDetalleSolicitud);
                $emComercial->flush();
                $objAdmiCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                     ->findOneBy(array('descripcionCaracteristica' => 'ELEMENTO CLIENTE',
                                                                       'estado'                    => 'Activo'));
                if (!is_object($objAdmiCaracteristica))
                {
                    throw new \Exception("No se encontro información acerca de caracteristica ELEMENTO CLIENTE");
                }
                
                //valor del ont
                $objDetalleSolCaract= new InfoDetalleSolCaract();
                $objDetalleSolCaract->setCaracteristicaId($objAdmiCaracteristica);
                $objDetalleSolCaract->setDetalleSolicitudId($objDetalleSolicitud);
                $objDetalleSolCaract->setValor($objElementoSmartWifi->getId());
                $objDetalleSolCaract->setEstado("AsignadoTarea");
                $objDetalleSolCaract->setUsrCreacion($objSession->get('user'));
                $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                $emComercial->persist($objDetalleSolCaract);
                $emComercial->flush();

                //obtener tarea
                $objProceso   = $emSoporte->getRepository('schemaBundle:AdmiProceso')
                                          ->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");
                if (!is_object($objProceso))
                {
                    throw new \Exception("No se encontro información acerca del proceso SOLICITAR RETIRO EQUIPO");
                }
                $arrayTareas  = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                          ->findTareasActivasByProceso($objProceso->getId());
                $objTarea     = $arrayTareas[0];

                //grabar nuevo info_detalle para la solicitud de retiro de equipo
                $objDetalle = new InfoDetalle();
                $objDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
                $objDetalle->setTareaId($objTarea);
                $objDetalle->setLongitud($objServicio->getPuntoId()->getLongitud());
                $objDetalle->setLatitud($objServicio->getPuntoId()->getLatitud());
                $objDetalle->setPesoPresupuestado(0);
                $objDetalle->setValorPresupuestado(0);
                $objDetalle->setIpCreacion($objRequest->getClientIp());
                $objDetalle->setFeCreacion(new \DateTime('now'));
                $objDetalle->setUsrCreacion($objSession->get('user'));
                $objDetalle->setFeSolicitada(new \DateTime('now'));
                $emSoporte->persist($objDetalle);
                $emSoporte->flush();                              

                //obtenemos el persona empresa rol del usuario
                $objPersonaEmpresaRolUsr = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                       ->find($intIdPersonaEmpRol);

                if (!is_object($objPersonaEmpresaRolUsr))
                {
                    throw new \Exception("No se encontro información acerca del rol del cliente en sesion");
                }

                //buscamos datos del dept, persona
                $objDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($objPersonaEmpresaRolUsr->getDepartamentoId());

                if (!is_object($objDepartamento))
                {
                    throw new \Exception("No se encontro información acerca del departamento del usuario en sesión");
                }

                $objPersona = $objPersonaEmpresaRolUsr->getPersonaId();

                if (!is_object($objPersona))
                {
                    throw new \Exception("No se encontro información acerca de la persona en sesión");
                }

                //grabamos soporte.info_detalle_asignacion
                $objDetalleAsignacion = new InfoDetalleAsignacion();
                $objDetalleAsignacion->setDetalleId($objDetalle);
                $objDetalleAsignacion->setAsignadoId($objDepartamento->getId());
                $objDetalleAsignacion->setAsignadoNombre($objDepartamento->getNombreDepartamento());
                $objDetalleAsignacion->setRefAsignadoId($objPersona->getId());

                if($objPersona->getRazonSocial()=="")
                {
                    $strNombreAsignado = $objPersona->getNombres()." ".$objPersona->getApellidos();
                }
                else
                {
                    $strNombreAsignado = $objPersona->getRazonSocial();
                }
                $objDetalleAsignacion->setRefAsignadoNombre($strNombreAsignado);
                $objDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRolUsr->getId());
                $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
                $objDetalleAsignacion->setUsrCreacion($objSession->get('user'));
                $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                $objDetalleAsignacion->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objDetalleAsignacion);
                $emSoporte->flush();
                                
                //Se ingresa el historial de la tarea
                if(is_object($objDetalle))
                {
                    $arrayParametrosHist["intDetalleId"] = $objDetalle->getId();            
                }

                $arrayParametrosHist["strObservacion"]  = "Tarea Asignada";                
                $arrayParametrosHist["strEstadoActual"] = "Asignada";
                $arrayParametrosHist["strAccion"]       = "Asignada";

                $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);                  

                $objPunto = $objServicio->getPuntoId();
                if (!is_object($objPunto))
                {
                    throw new \Exception("No se encontro información acerca del punto del servicio");
                }

                $strAfectadoNombre = $objPunto->getNombrePunto();
                $intPuntoId        = $objPunto->getId();
                $strPuntoLogin     = $objPunto->getLogin();

                // se graba en la DB_SOPORTE.INFO_CRITERIO_AFECTADO
                $objCriterio = new InfoCriterioAfectado();
                $objCriterio->setId($intIdCriterioAfectado);
                $objCriterio->setDetalleId($objDetalle);
                $objCriterio->setCriterio("Clientes");
                $objCriterio->setOpcion("Cliente: " . $strAfectadoNombre . " | OPCION: Punto Cliente");
                $objCriterio->setFeCreacion(new \DateTime('now'));
                $objCriterio->setUsrCreacion($objSession->get('user'));
                $objCriterio->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objCriterio);
                $emSoporte->flush();

                // se graba en la DB_SOPORTE.INFO_PARTE_AFECTADA
                $objAfectado = new InfoParteAfectada();
                $objAfectado->setTipoAfectado("Cliente");
                $objAfectado->setDetalleId($objDetalle->getId());
                $objAfectado->setCriterioAfectadoId($objCriterio->getId());
                $objAfectado->setAfectadoId($intPuntoId);
                $objAfectado->setFeIniIncidencia(new \DateTime('now'));
                $objAfectado->setAfectadoNombre($strPuntoLogin);
                $objAfectado->setAfectadoDescripcion($strAfectadoNombre);
                $objAfectado->setFeCreacion(new \DateTime('now'));
                $objAfectado->setUsrCreacion($objSession->get('user'));
                $objAfectado->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objAfectado);
                $emSoporte->flush();

                //crear historial para la solicitud
                $objHistorialSolicitud = new InfoDetalleSolHist();
                $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
                $objHistorialSolicitud->setEstado("AsignadoTarea");
                $objHistorialSolicitud->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE EQUIPO POR CANCELACION DEL SERIVICIO");
                $objHistorialSolicitud->setUsrCreacion($objSession->get('user'));
                $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
                $objHistorialSolicitud->setIpCreacion($objRequest->getClientIp());
                $emComercial->persist($objHistorialSolicitud);
                $emComercial->flush();
            }
            
            $emGeneral->getConnection()->commit();
            $emSoporte->getConnection()->commit();
            $emComercial->getConnection()->commit();
            $emInfraestructura->getConnection()->commit();
            $strMensajeRespuesta = "OK";

            //Proceso que graba tarea en INFO_TAREA
            if (is_object($objDetalle))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $objDetalle->getId();
                $arrayParametrosInfoTarea['strUsrCreacion'] = $objSession->get('user');
                $objServiceSoporte                          = $this->get('soporte.SoporteService');
                $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
            }
        }
        catch (\Exception $ex)
        {
            if ($emGeneral->getConnection()->isTransactionActive())
            {
                $emGeneral->getConnection()->rollback();
            }
            if ($emSoporte->getConnection()->isTransactionActive())
            {
                $emSoporte->getConnection()->rollback();
            }
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
            
            $emGeneral->getConnection()->close();
            $emSoporte->getConnection()->close();
            $emComercial->getConnection()->close();
            $emInfraestructura->getConnection()->close();
            
            $strMensajeRespuesta = "ERROR";
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.cancelarServicioNetlifeCamAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objRequest->getClientIp()
                                     );
        }
        
        $objJsonResponse->setData(array('strStatus' => $strMensajeRespuesta));
        return $objJsonResponse;
    }
    
    /**
     * cortarServicioSmartWifiAction
     * 
     * Funcion que cambia el estado a In-Corte al servicio SmartWifi
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 23-02-2017 
     * @since 1.0
     * 
     * @return  Object  $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function cortarServicioSmartWifiAction()
    {
        $objRespuesta        = new JsonResponse();
        $objPeticion         = $this->get('request');
        $objSession          = $objPeticion->getSession();
        $strUsrCreacion      = $objSession->get('user');
        $strIpCreacion       = $objPeticion->getClientIp();
        $intIdServicio       = $objPeticion->get('idServicio');
        $intIdAccion         = $objPeticion->get('idAccion');
        $emComercial         = $this->get('doctrine')->getManager('telconet');
        $emSeguridad         = $this->get('doctrine')->getManager('telconet_seguridad');
        $serviceUtil         = $this->get('schema.Util');
        $strMensajeRespuesta = "ERROR";
        
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            
            $objAccion   = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la accion utilizada en el proceso");
            }
            
            $objServicio->setEstado("In-Corte");
            $emComercial->persist($objServicio);

            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($objServicio->getProductoId()->getDescripcionProducto().": Se corto el servicio");
            $objServicioHistorial->setEstado("In-Corte");
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorial);

            $emComercial->flush();
            $emComercial->getConnection()->commit();
            $strMensajeRespuesta = "OK";
        }
        catch(\Exception $ex)
        {
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            $emComercial->getConnection()->close();
            $strMensajeRespuesta = 'Se presentaron errores al Cortar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.confirmarServicioSmartWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * reconectarServicioSmartWifiAction
     * 
     * Funcion que cambia el estado a Activo al servicio SmartWifi
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 23-02-2017
     * @since 1.0
     * 
     * @return Object   $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function reconectarServicioSmartWifiAction()
    {
        $objRespuesta           = new JsonResponse();
        $objPeticion            = $this->get('request');
        $objSession             = $objPeticion->getSession();
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emSeguridad            = $this->get('doctrine')->getManager('telconet_seguridad');
        $intIdServicio          = $objPeticion->get('idServicio');
        $intIdAccion            = $objPeticion->get('idAccion');
        $strIpCreacion          = $objPeticion->getClientIp();
        $strUsrCreacion         = $objSession->get('user');
        $serviceUtil            = $this->get('schema.Util');
        $strMensajeRespuesta    = "ERROR";
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            
            $objAccion      = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la accion utilizada en el proceso");
            }
        
            $objServicio->setEstado("Activo");
            $emComercial->persist($objServicio);

            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($objServicio->getProductoId()->getDescripcionProducto().": Se reactivo el servicio");
            $objServicioHistorial->setEstado("Activo");
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorial);

            $emComercial->flush();
            $emComercial->getConnection()->commit();
            $strMensajeRespuesta = "OK";
        }
        catch(\Exception $ex)
        {
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            $emComercial->getConnection()->close();
            $strMensajeRespuesta = 'Se presentaron errores al Cortar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.confirmarServicioSmartWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * agregarEquipoSmartWifiAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Funcion que registra el equipo SmartWifi del nuevo plan asignado al cliente
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 23-02-2017
     * @since 1.0
     * 
     * @return Object   $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function agregarEquipoSmartWifiAction()
    {
        $objRespuesta                   = new JsonResponse();
        $emComercial                    = $this->get('doctrine')->getManager('telconet');
        $emSeguridad                    = $this->get('doctrine')->getManager('telconet_seguridad');
        $objPeticion                    = $this->get('request');
        $objSession                     = $objPeticion->getSession();
        $strUsrCreacion                 = $objSession->get('user');
        $strEmpresaCod                  = $objSession->get('idEmpresa');
        $intIdServicio                  = $objPeticion->get('idServicio');
        $intIdAccion                    = $objPeticion->get('idAccion');
        $strIpCreacion                  = $objPeticion->getClientIp();
        $strSerieSmartWifi              = $objPeticion->get('strSerieSmartWifi');
        $strModeloSmartWifi             = $objPeticion->get('strModeloSmartWifi');
        $strMacSmartWifi                = $objPeticion->get('strMacSmartWifi');
        $intIdServicioInternet          = $objPeticion->get('intIdServicioInternet');
        $intIdSolicitudServicio         = $objPeticion->get('intIdSolicitudServicio');
        $serviceUtil                    = $this->get('schema.Util');
        $serviceConfirmarServicio       = $this->get('tecnico.InfoConfirmarServicio');
        $arrayPeticiones                = array();
        $strMensajeRespuesta            = "ERROR";
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            
            $objProdSmartWifiRenta = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                 ->findOneBy(array("descripcionProducto" => "Renta SmartWiFi (Aironet 1602)",
                                                                   "empresaCod"          => $strEmpresaCod, 
                                                                   "estado"              => "Activo"));
            if (!is_object($objProdSmartWifiRenta))
            {
                throw new \Exception("No se encontro información del producto Renta SmartWifi");
            }
            
            $arrayPeticiones['ojbServicio']                     = $objServicio;
            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
            $arrayPeticiones['objAccion']                       = $objAccion;
            $arrayPeticiones['objProducto']                     = $objProdSmartWifiRenta;
            $arrayPeticiones['strEmpresaCod']                   = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
            $arrayPeticiones['strSerieSmartWifi']               = $strSerieSmartWifi;
            $arrayPeticiones['strModeloSmartWifi']              = $strModeloSmartWifi;
            $arrayPeticiones['strMacSmartWifi']                 = $strMacSmartWifi;
            $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
            $arrayPeticiones['strEsCambioPlan']                 = 'SI';
                    
            $strStatus = $serviceConfirmarServicio->confirmarServicioSmartWifi($arrayPeticiones);
            
            if ($strStatus == "OK")
            {
                //validar el cierre de tareas 
                $strMensajeRespuesta = $strStatus;
            }
            else
            {
                throw new \Exception("Se presentaron errores al agregar el equipo del plan SmarttWifi");
            }            
        }
        catch(\Exception $ex)
        {
            $strMensajeRespuesta = 'Se presentaron errores al confirmar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.agregarEquipoSmartWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * crearSolCambioEquipoSoporte
     * 
     * @Secure(roles="ROLE_151-6497")
     * 
     * Funcion que sirve para generar una solicitud de cambio de elemento por soporte MD a clientes
     * con planes antiguos que presentan problemas con sus equipos obsoletos
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 07-05-2019
     * @since 1.0
     * 
     * @return JsonResponse $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function crearSolCambioEquipoSoporteAction()
    {
        $objRespuesta             = new JsonResponse();
        $emComercial              = $this->get('doctrine')->getManager('telconet');
        $objPeticion              = $this->get('request');
        $objSession               = $objPeticion->getSession();
        $strUsrCreacion           = $objSession->get('user');
        $strEmpresaCod            = $objSession->get('idEmpresa');
        $intIdServicio            = $objPeticion->get('intIdServicio');
        $strIpCreacion            = $objPeticion->getClientIp();
        $serviceUtil              = $this->get('schema.Util');
        $serviceServicioTecnico   = $this->get('tecnico.InfoServicioTecnico');
        $arrayPeticiones          = array();
        $strMensaje               = "ERROR";
        $strStatus                = "ERROR";
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            
            $arrayPeticiones['objServicio']          = $objServicio;
            $arrayPeticiones['objServicioTecnico']   = $objServicioTecnico;
            $arrayPeticiones['strEmpresaCod']        = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']       = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']        = $strIpCreacion;
                    
            $arrayRespuesta = $serviceServicioTecnico->crearSolicitudCambioEquipoPorSoporte($arrayPeticiones);
            $strStatus      = $arrayRespuesta['strStatus'];
            $strMensaje     = $arrayRespuesta['strMensaje'];
            if ($strStatus != "OK")
            {
                throw new \Exception("Se presentaron errores al generar la SOLICITUD CAMBIO EQUIPO POR SOPORTE");
            }            
        }
        catch(\Exception $objEx)
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.crearSolCambioEquipoSoporteAction', 
                                      $strMensaje.' - '.$objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
            $strMensaje = 'Se presentaron errores al crear la solicitud en el servicio, favor notificar a sistemas.';
        }
        $objRespuesta->setData(array('strStatus' => $strStatus, 'strMensaje' => $strMensaje));
        return $objRespuesta;
    }
    

    /**
     * Función que sirve para Realizar un cambio de Equipo de manarea Lógica
     * almacena Trazabilidad del elemento
     * 
     * @author Jorge Gomez <jigomez@telconet.ec>
     * @version 1.0 13-09-2016 Version inicial
     * 
    */
    public function cambioLogicoEquipoSoporteAction()
    {
        $objRespuesta             = new JsonResponse();
        $emComercial              = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura        = $this->get('doctrine')->getManager('telconet_infraestructura');
        $serviceInfoElemento      = $this->get('tecnico.InfoElemento');
        $objPeticion              = $this->get('request');
        $objSession               = $objPeticion->getSession();

        $strUsrCreacion           = $objSession->get('user');
        $strEmpresaCod            = $objSession->get('idEmpresa');
        $intIdServicio            = $objPeticion->get('intIdServicio');
        $strSerie                 = $objPeticion->get('serieActual');
        $strMac                   = $objPeticion->get('macActual');
        $strModelo                = $objPeticion->get('modeloCamara');
        $intIdPersonaEmpresaRol   = $objPeticion->get('intIdPersonaEmpresaRol');
        $strSerieNueva            = $objPeticion->get('serieCamara');
        $strMacNueva              = $objPeticion->get('macCamara');
        
        $intIdServProdCaractMac   = $objPeticion->get('idServicioProdCaractMac');
        $strEstadoMac             = $objPeticion->get('estadoMac');
        $strCaracteristicaMac     = $objPeticion->get('descripcionMac');

        $intIdServProdCaractSerie = $objPeticion->get('idServicioProdCaractSerie');
        $strEstadoSerie           = $objPeticion->get('estadoSerie');
        $strCaracteristicaSerie   = $objPeticion->get('caracteristicaSerie');

        $strLogin                 = $objPeticion->get('login');
        $strIpCreacion            = $objPeticion->getClientIp();
        $serviceUtil              = $this->get('schema.Util');
        $serviceServicioTecnico   = $this->get('tecnico.InfoServicioTecnico');
        $arrayPeticiones          = array();
        $strMensaje               = "ERROR";
        $strStatus                = "ERROR";

        $emComercial->getConnection()->beginTransaction();  
        $emInfraestructura->getConnection()->beginTransaction();  

        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            

            $arrayParametrosActualizarCaracMac["idServicioProdCaract"]  = $intIdServProdCaractMac;
            $arrayParametrosActualizarCaracMac["valor"]  = $strMacNueva;
            $arrayParametrosActualizarCaracMac["estado"]  = $strEstadoMac;
            $arrayParametrosActualizarCaracMac["caracteristica"]  = $strCaracteristicaMac;
            $arrayRespuestaActualizarMac = $serviceServicioTecnico->actualizarCaracteristicaServicio($arrayParametrosActualizarCaracMac);
            
            if ($arrayRespuestaActualizarMac["status"] != "ok")
            {
                throw new \Exception($arrayRespuestaActualizarMac["mensaje"]);
            }  

            

            $arrayParametrosActualizarCaracSerie["idServicioProdCaract"]  = $intIdServProdCaractSerie;
            $arrayParametrosActualizarCaracSerie["valor"]  = $strSerieNueva;
            $arrayParametrosActualizarCaracSerie["estado"]  = $strEstadoSerie;
            $arrayParametrosActualizarCaracSerie["caracteristica"]  = $strCaracteristicaSerie;
            $arrayRespuestaActualizarSerie = $serviceServicioTecnico->actualizarCaracteristicaServicio($arrayParametrosActualizarCaracSerie);
            
            if ($arrayRespuestaActualizarSerie["status"] != "ok")
            {
                throw new \Exception($arrayRespuestaActualizarSerie["mensaje"]);
            }  


            $objPersonaEmpresaRolUsr = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
            ->find($intIdPersonaEmpresaRol);

            $arrayParametrosAuditoria["intIdPersona"]    = $objPersonaEmpresaRolUsr->getPersonaId()->getId();
            $arrayParametrosAuditoria["strNumeroSerie"]  = $strSerieNueva;
            $arrayParametrosAuditoria["strEstadoTelcos"] = 'Eliminado';
            $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
            $arrayParametrosAuditoria["strEstadoActivo"] = 'CambioEquipo';
            $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
            $arrayParametrosAuditoria["strCodEmpresa"]   = "10";
            $arrayParametrosAuditoria["strTransaccion"]  = 'Cambio de Elemento';
            $arrayParametrosAuditoria["intOficinaId"]    = 0;
            $arrayParametrosAuditoria["strLogin"]        = $strLogin;
            $arrayParametrosAuditoria["strUsrCreacion"]  = $strUsrCreacion;
            $serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);


            $arrayParametrosAuditoriaRetiro["intIdPersona"]    = $objPersonaEmpresaRolUsr->getPersonaId()->getId();
            $arrayParametrosAuditoriaRetiro["strNumeroSerie"]  = $strSerie;
            $arrayParametrosAuditoriaRetiro["strEstadoTelcos"] = 'Eliminado';
            $arrayParametrosAuditoriaRetiro["strEstadoNaf"]    = 'Instalado';
            $arrayParametrosAuditoriaRetiro["strEstadoActivo"] = 'Eliminado';
            $arrayParametrosAuditoriaRetiro["strUbicacion"]    = 'EnTransito';
            $arrayParametrosAuditoriaRetiro["strCodEmpresa"]  = "10";
            $arrayParametrosAuditoriaRetiro["strTransaccion"]  = 'Retiro Equipo';
            $arrayParametrosAuditoriaRetiro["strObservacion"]  = 'Retiro Equipo';
            $arrayParametrosAuditoriaRetiro["intOficinaId"]    = 0;
            $arrayParametrosAuditoriaRetiro["strLogin"]        = $strLogin;
            $arrayParametrosAuditoriaRetiro["strUsrCreacion"]  = $strUsrCreacion;
            $serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoriaRetiro);

            $arrayParametrosRetiroNaf["intIdEmpresa"]  = $strEmpresaCod;
            $arrayParametrosRetiroNaf["strSerie"]  = $strSerie;
            $arrayParametrosRetiroNaf["strUser"]  = $strUsrCreacion;
            $arrayParametrosRetiroNaf["strIpUser"]  = $strIpCreacion;
            $arrayParametrosRetiroNaf["strModelo"]  = $strModelo;
            $arrayRespuestaRetiro = $serviceInfoElemento->ingresaRetiroNaf($arrayParametrosRetiroNaf);

            if ($arrayRespuestaRetiro["status"] != "ok")
            {
                throw new \Exception("Se presento error al realizar el Cambio de Equipo");
            }   


            $arrayParametrosIngresaoNaf["intIdEmpresa"]  = $strEmpresaCod;
            $arrayParametrosIngresaoNaf["strSerie"]  = $strSerieNueva;
            $arrayParametrosIngresaoNaf["strUser"]  = $strUsrCreacion;
            $arrayParametrosIngresaoNaf["strIpUser"]  = $strIpCreacion;
            $arrayRespuestaIngreso = $serviceInfoElemento->ingresaInstalacionNaf($arrayParametrosIngresaoNaf);

            if ($arrayRespuestaIngreso["status"] != "ok")
            {
                throw new \Exception("Se presento error al realizar el Cambio de Equipo");
            }   

            $strObservacionServicio .= "Se regularizó información del elemento cliente: <br/><br/>";
            
            $strObservacionServicio .= "Equipo Anterior <br/>";
            $strObservacionServicio .= "Modelo: ".$strModelo."<br/>";
            $strObservacionServicio .= "Serie: ".$strSerie."<br/>";
            $strObservacionServicio .= "Mac: ".$strMac."<br/>";

            $strObservacionServicio .= "<br/>Equipo Nuevo <br/>";
            $strObservacionServicio .= "Modelo: ".$strModelo."<br/>";
            $strObservacionServicio .= "Serie: ".$strSerieNueva."<br/>";
            $strObservacionServicio .= "Mac: ".$strMacNueva."<br/>";

            $strEstado = $objServicio->getEstado();
            $objServHistServicio   = new InfoServicioHistorial();
            $objServHistServicio->setServicioId($objServicio);
            $objServHistServicio->setObservacion($strObservacionServicio);
            $objServHistServicio->setEstado($strEstado);
            $objServHistServicio->setAccion('aprobacionComisionista');
            $objServHistServicio->setUsrCreacion($strUsrCreacion);
            $objServHistServicio->setFeCreacion(new \DateTime('now'));
            $objServHistServicio->setIpCreacion($strIpCreacion);
            $emComercial->persist($objServHistServicio);
            $emComercial->flush();
        
            $emComercial->getConnection()->commit();
            $emInfraestructura->getConnection()->commit();  
            $strStatus    = 'OK';
           
         
        }
        catch(\Exception $objEx)
        { 
            $emComercial->getConnection()->rollback();
            $emInfraestructura->getConnection()->rollback();

            $emComercial->getConnection()->close();
            $emInfraestructura->getConnection()->close();
            
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.cambioLogicoEquipoSoporteAction', 
                                      $strMensaje.' - '.$objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );

            $strMensaje = $objEx->getMessage();
        }

        $objRespuesta->setData(array('strStatus' => $strStatus, 'strMensaje' => $strMensaje));
        return $objRespuesta;
    }
    
    /**
     * confirmarServicioNetHomeAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Funcion que cambia de estado a Activo al servicio adicional NETHOME
     * 
     * @author  Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 21-09-2018
     * @since 1.0
     * 
     * @return  Object $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function confirmarServicioNetHomeAction()
    {
        $objRespuesta                   = new JsonResponse();
        $emComercial                    = $this->get('doctrine')->getManager('telconet');
        $emSeguridad                    = $this->get('doctrine')->getManager('telconet_seguridad');
        $objPeticion                    = $this->get('request');
        $objSession                     = $objPeticion->getSession();
        $strUsrCreacion                 = $objSession->get('user');
        $strEmpresaCod                  = $objSession->get('idEmpresa');
        $strPrefijoEmpresa              = $objSession->get('prefijoEmpresa');
        $objEmpleadoSesion              = $objSession->get('empleado');
        $intIdServicio                  = $objPeticion->get('intIdServicio');
        $intIdAccion                    = $objPeticion->get('intIdAccion');
        $strDatosElementos              = $objPeticion->get('jsonDatosElementos');
        $strObsActivarServicio          = $objPeticion->get('strObservacionServicio');
        $strIpCreacion                  = $objPeticion->getClientIp();
        $intIdSolicitudServicio         = $objPeticion->get('intIdSolicitudServicio');
        $serviceUtil                    = $this->get('schema.Util');
        $serviceConfirmarServicio       = $this->get('tecnico.InfoConfirmarServicio');
        $arrayPeticiones                = array();
        $strMensajeRespuesta            = "ERROR";
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            $objProducto = $objServicio->getProductoId();
            if (!is_object($objProducto))
            {
                throw new \Exception("El servicio no es un producto adicional");
            }
            
            $arrayPeticiones['ojbServicio']                     = $objServicio;
            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
            $arrayPeticiones['objProducto']                     = $objProducto;
            $arrayPeticiones['objAccion']                       = $objAccion;
            $arrayPeticiones['strEmpresaCod']                   = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
            $arrayPeticiones['strJsonDatosElementos']           = $strDatosElementos;
            
                    
            $strStatus = $serviceConfirmarServicio->confirmarServicioNetHome($arrayPeticiones);
            
            if ($strStatus == "OK")
            {
                $strMensajeRespuesta = $strStatus;
                $arrayParametrosMail =   array(
                                               "servicio"                      => $objServicio,
                                               "prefijoEmpresa"                => $strPrefijoEmpresa,
                                               "empleadoSesion"                => $objEmpleadoSesion,
                                               "observacionActivarServicio"    => $strObsActivarServicio,
                                               "idEmpresa"                     => $strEmpresaCod,
                                               "user"                          => $strUsrCreacion,
                                               "ipClient"                      => $strIpCreacion
                                              );
                
                $serviceConfirmarServicio->envioMailConfirmarServicio($arrayParametrosMail);
            }
            else
            {
                throw new \Exception("Se presentaron errores al confirmar la activación del servicio NetHome");
            }            
        }
        catch(\Exception $ex)
        {
            $strMensajeRespuesta = 'Se presentaron errores al confirmar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.confirmarServicioNetHomeAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * confirmarServicioApWifiAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Funcion que cambia de estado a Activo al servicio adicional ApWifi
     * 
     * @author  Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 10-09-2018
     * @since 1.0
     * 
     * @return  Object $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function confirmarServicioApWifiAction()
    {
        $objRespuesta                   = new JsonResponse();
        $emComercial                    = $this->get('doctrine')->getManager('telconet');
        $emSeguridad                    = $this->get('doctrine')->getManager('telconet_seguridad');
        $objPeticion                    = $this->get('request');
        $objSession                     = $objPeticion->getSession();
        $strUsrCreacion                 = $objSession->get('user');
        $strEmpresaCod                  = $objSession->get('idEmpresa');
        $strPrefijoEmpresa              = $objSession->get('prefijoEmpresa');
        $objEmpleadoSesion              = $objSession->get('empleado');
        $intIdServicio                  = $objPeticion->get('idServicio');
        $intIdAccion                    = $objPeticion->get('idAccion');
        $strObsActivarServicio          = $objPeticion->get('strObservacionServicio');
        $strIpCreacion                  = $objPeticion->getClientIp();
        $strSerieApWifi                 = $objPeticion->get('strSerieApWifi');
        $strModeloApWifi                = $objPeticion->get('strModeloApWifi');
        $strMacApWifi                   = $objPeticion->get('strMacApWifi');
        $intIdServicioInternet          = $objPeticion->get('intIdServicioInternet');
        $intIdSolicitudServicio         = $objPeticion->get('intIdSolicitudServicio');
        $serviceUtil                    = $this->get('schema.Util');
        $serviceConfirmarServicio       = $this->get('tecnico.InfoConfirmarServicio');
        $arrayPeticiones                = array();
        $strMensajeRespuesta            = "ERROR";
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            $objProducto = $objServicio->getProductoId();
            if (!is_object($objProducto))
            {
                throw new \Exception("El servicio no es un producto adicional");
            }
            
            $arrayPeticiones['ojbServicio']                     = $objServicio;
            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
            $arrayPeticiones['objProducto']                     = $objProducto;
            $arrayPeticiones['objAccion']                       = $objAccion;
            $arrayPeticiones['strEmpresaCod']                   = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
            $arrayPeticiones['strSerieApWifi']                  = $strSerieApWifi;
            $arrayPeticiones['strModeloApWifi']                 = $strModeloApWifi;
            $arrayPeticiones['strMacApWifi']                    = $strMacApWifi;
            $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
                    
            $strStatus = $serviceConfirmarServicio->confirmarServicioApWifi($arrayPeticiones);
            
            if ($strStatus == "OK")
            {
                $strMensajeRespuesta = $strStatus;
                $arrayParametrosMail =   array(
                                               "servicio"                      => $objServicio,
                                               "prefijoEmpresa"                => $strPrefijoEmpresa,
                                               "empleadoSesion"                => $objEmpleadoSesion,
                                               "observacionActivarServicio"    => $strObsActivarServicio,
                                               "idEmpresa"                     => $strEmpresaCod,
                                               "user"                          => $strUsrCreacion,
                                               "ipClient"                      => $strIpCreacion
                                              );
                
                $serviceConfirmarServicio->envioMailConfirmarServicio($arrayParametrosMail);
            }
            else
            {
                throw new \Exception("Se presentaron errores al confirmar la activación del servicio ApWifi");
            }            
        }
        catch(\Exception $ex)
        {
            $strMensajeRespuesta = 'Se presentaron errores al confirmar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.confirmarServicioApWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * cancelarServicioApWifiAction
     * 
     * Funcion que cambia el estado a Cancel al servicio ApWifi
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 10-09-2018
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 03-12-2018 Se agrega parámetro para identificar un servicio Extender Dual Band
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.2 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 22-09-2019 Se agrega condición para validar que en caso de que no existan más extenders conectados al servicio, se cancele 
     *                         automáticamente el Wifi Dual Band siempre y cuando éste sea un servicio adicional
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 27-05-2021 Se agrega la eliminación de solicitudes que gestionan ont y solicitudes de servicios dual band asociadas a servicios
     *                         Wifi Dual Band y Extender Dual Band
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 01-02-2022 Se agrega validación para buscar si  el modelo del ap es de un extender dual band que funcionen con Wifi Dual Band 
     *                         y así proceder con la eliminación de servicios con W en caso de aplicar al eliminar un extender
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 21-03-2022  Se agrega la programación para enviar a cancelar a middleware el equipo extender de un servicio adicional
     *                          siempre y cuando el servicio de internet forme parte de una tecnología permitida.
     *                          
     * 
     * @return  Object  $objJsonResponse   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function cancelarServicioApWifiAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $strUsrCreacion         = $objSession->get('user');
        $strIpCreacion          = $objRequest->getClientIp();
        $intIdDepartamento      = $objSession->get('idDepartamento');
        $strCodEmpresa          = $objSession->get('idEmpresa');
        $intIdServicio          = $objRequest->get('idServicio');
        $intIdAccion            = $objRequest->get('idAccion');
        $intIdPersonaEmpRol     = $objSession->get('idPersonaEmpresaRol');
        $strEsExtenderDualBand  = $objRequest->get('esExtenderDualBand') ? $objRequest->get('esExtenderDualBand') : "NO";
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSeguridad            = $this->get('doctrine')->getManager('telconet_seguridad');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $emSoporte              = $this->get('doctrine')->getManager('telconet_soporte');
        $serviceUtil            = $this->get('schema.Util');
        $strMensajeRespuesta    = "";
        $strAfectadoNombre      = "";
        $intPuntoId             = "";
        $strPuntoLogin          = "";
        $strMensaje             = "";
        $intIdCriterioAfectado  = 1;
        $serviceSoporte             = $this->get('soporte.SoporteService');
        $serviceInfoElemento        = $this->get('tecnico.InfoElemento');
        $serviceServicioTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $serviceCancelacionServicio = $this->get('tecnico.InfoCancelarServicio');
        $arrayParametrosHist  = array();
        $arrayParametrosAuditoria = array();
        
        $arrayParametrosHist["strCodEmpresa"]           = $objSession->get('idEmpresa');
        $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;    
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
        
        $emSoporte->getConnection()->beginTransaction();
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            
            $objPunto = $objServicio->getPuntoId();
            if (!is_object($objPunto))
            {
                throw new \Exception("No se encontro información acerca del punto del servicio");
            }
            $intIdPuntoServicio = $objPunto->getId();
            
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            $objProducto = $objServicio->getProductoId();
            if (!is_object($objProducto))
            {
                throw new \Exception("El servicio no es un producto adicional");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }

            $objElementoApWifi = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                      ->find($objServicioTecnico->getElementoClienteId());
            if (!is_object($objElementoApWifi))
            {
                throw new \Exception("No se encontro información del equipo Ap Wifi del servicio");
            }
            
            if($strEsExtenderDualBand === "SI")
            {
                $serviceServicioTecnico->eliminaSolicitudesDualBand(array("intIdServicio" => $intIdServicio));
                
                $arrayRespuestaServInternetValido   = $serviceServicioTecnico->obtieneServicioInternetValido(
                                                        array(  "intIdPunto"    => $intIdPuntoServicio,
                                                                "strCodEmpresa" => $strCodEmpresa
                                                            ));
                $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];
                if(!is_object($objServicioInternet))
                {
                    throw new \Exception("No se encontró el servicio de Internet asociado al punto");
                }
                
                $intIdServicioInternet      = $objServicioInternet->getId();
                $objServicioTecnicoInternet = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneBy(array( "servicioId" => $intIdServicioInternet));
                if(!is_object($objServicioTecnicoInternet))
                {
                    throw new \Exception("No se ha podido obtener la información técnica del servicio de Internet");
                }
                
                $intIdElementoOlt       = $objServicioTecnicoInternet->getElementoId();
                if(!isset($intIdElementoOlt) || empty($intIdElementoOlt))
                {
                    throw new \Exception("No se ha podido obtener la información técnica del olt asociado al servicio de Internet");
                }
                $objElementoOlt         = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoOlt);
                if(!is_object($objElementoOlt))
                {
                    throw new \Exception("No se ha podido obtener el olt asociado al servicio de Internet");
                }
                $objModeloElementoOlt   = $objElementoOlt->getModeloElementoId();
                $strModeloElementoOlt   = $objModeloElementoOlt->getNombreModeloElemento();
                $strMarcaElementoOlt    = $objModeloElementoOlt->getMarcaElementoId()->getNombreMarcaElemento();
                $arrayVerifTecnologiaCancelarExtenderWs = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                'MARCA_Y_MODELO_OLT_PERMITIDO_CANCELACION_WS_EXTENDER',
                                                                                $strMarcaElementoOlt,
                                                                                $strModeloElementoOlt,
                                                                                '',
                                                                                '',
                                                                                $strCodEmpresa);
                if(isset($arrayVerifTecnologiaCancelarExtenderWs) && !empty($arrayVerifTecnologiaCancelarExtenderWs))
                {
                    $serviceRedAccesoMiddleware = $this->get('tecnico.RedAccesoMiddleware');
                    $intIdInterfaceOlt          = $objServicioTecnicoInternet->getInterfaceElementoId();
                    if(!isset($intIdInterfaceOlt) || empty($intIdInterfaceOlt))
                    {
                        throw new \Exception("No se ha podido obtener la información técnica de la interface del olt "
                                             ."asociado al servicio de Internet");
                    }
                    $objInterfaceOlt    = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($intIdInterfaceOlt);
                    if(!is_object($objInterfaceOlt))
                    {
                        throw new \Exception("No se ha podido obtener la interface del olt asociado al servicio de Internet");
                    }
                    $objIpElementoOlt   = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("elementoId" => $intIdElementoOlt));
                    if(!is_object($objIpElementoOlt))
                    {
                        throw new \Exception("No se ha podido obtener la ip del olt");
                    }
                    $strIpElementoOlt = $objIpElementoOlt->getIp();
                    
                    $objPersonaEmpresaRolCliente    = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                  ->find($objPunto->getPersonaEmpresaRolId()->getId());
                    $objPersonaCliente              = $objPersonaEmpresaRolCliente->getPersonaId();
                    $strIdentificacion              = $objPersonaCliente->getIdentificacionCliente();
                    $strNombreCliente               = $objPersonaCliente->__toString();
                    $strTipoNegocio                 = $objPunto->getTipoNegocioId()->getNombreTipoNegocio();

                    $objProductoInternet    = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                          ->findOneBy(array('empresaCod'    => $strCodEmpresa, 
                                                                            'nombreTecnico' => 'INTERNET',
                                                                            'estado'        => 'Activo'));
                    if(!is_object($objProductoInternet))
                    {
                        throw new \Exception("No se ha podido obtener el producto INTERNET, favor revisar!");
                    }
                    
                    $objDetEleMacExtender   = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                ->findOneBy(array(   'elementoId'    => $objElementoApWifi->getId(),
                                                                                     'detalleNombre' => 'MAC',
                                                                                     'estado'        => 'Activo'
                                                                                 )
                                                                            );
                    $strMacExtender         = "";
                    if(is_object($objDetEleMacExtender))
                    {
                        $strMacExtender = $objDetEleMacExtender->getDetalleValor();
                    }
                    
                    
                    $strIndiceCliente       = "";
                    $objSpcIndiceCliente    = $serviceServicioTecnico->getServicioProductoCaracteristica($objServicioInternet, 
                                                                                                         "INDICE CLIENTE", 
                                                                                                         $objProductoInternet);
                    if(is_object($objSpcIndiceCliente))
                    {
                        $strIndiceCliente   = $objSpcIndiceCliente->getValor();
                    }

                    $strServiceProfile      = "";
                    $objSpcServiceProfile   = $serviceServicioTecnico->getServicioProductoCaracteristica($objServicioInternet, 
                                                                                                         "SERVICE-PROFILE", 
                                                                                                         $objProductoInternet);
                    if(is_object($objSpcServiceProfile))
                    {
                        $strServiceProfile = $objSpcServiceProfile->getValor();
                    }
                    
                    $arrayParams['intInterfaceElementoConectorId'] = $objServicioTecnicoInternet->getInterfaceElementoClienteId();
                    $arrayParams['strTipoSmartWifi']               = 'ExtenderDualBand';
                    $arrayParams['arrayData']                      = array();
                    $arrayElementosExtenderDualBand                = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                       ->getElementosSmartWifiByInterface($arrayParams);
                    $arrayDatosExtender = array(
                                                    'serie_extender'        => $objElementoApWifi->getSerieFisica(),
                                                    'mac_extender'          => $strMacExtender,
                                                    'estado_servicio'       => $objServicioInternet->getEstado(),
                                                    'ip_olt'                => $strIpElementoOlt,
                                                    'tipo_negocio_actual'   => $strTipoNegocio,
                                                    'numero_de_extender'    => count($arrayElementosExtenderDualBand),
                                                    'puerto_olt'            => $objInterfaceOlt->getNombreInterfaceElemento(),
                                                    'ont_id'                => $strIndiceCliente,
                                                    'service_profile'       => $strServiceProfile,
                                                    'modelo_olt'            => $strModeloElementoOlt
                                                );

                    $arrayDatosMiddleware   = array(
                                                    'nombre_cliente'        => $strNombreCliente,
                                                    'login'                 => $objPunto->getLogin(),
                                                    'identificacion'        => $strIdentificacion,
                                                    'datos'                 => $arrayDatosExtender,
                                                    'opcion'                => "CANCELAR_EXTENDER",
                                                    'ejecutaComando'        => $this->container->getParameter('ws_rda_ejecuta_scripts'),
                                                    'usrCreacion'           => $strUsrCreacion,
                                                    'ipCreacion'            => $strIpCreacion
                                                );
                    $arrayRespuestaMiddleware   = $serviceRedAccesoMiddleware->middleware(json_encode($arrayDatosMiddleware));
                    $strStatusMiddleware        = $arrayRespuestaMiddleware['status'];
                    $strMensajeMiddleware       = $arrayRespuestaMiddleware['mensaje'];

                    if($strStatusMiddleware !== "OK")
                    {
                        throw new \Exception($strMensajeMiddleware);
                    }
                }
            }
            
            //servicio
            $objServicio->setEstado("Cancel");
            $emComercial->persist($objServicio);
            $emComercial->flush();
            //historial del servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($objProducto->getDescripcionProducto().": Se cancelo el servicio");
            $objServicioHistorial->setEstado("Cancel");
            $objServicioHistorial->setUsrCreacion($objSession->get('user'));
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
            $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorial);
            $emComercial->flush();
            
            
            $strModeloApWifi  = $objElementoApWifi->getModeloElementoId()->getNombreModeloElemento();
            $objEnlaceCliente = $emInfraestructura
                                ->getRepository('schemaBundle:InfoEnlace')
                                ->findOneBy(array("interfaceElementoFinId" => $objServicioTecnico->getInterfaceElementoClienteId(),
                                                  "estado"                 => "Activo"));

            //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
            if(is_object($objEnlaceCliente))
            {
                //elimino enlace
                $objEnlaceCliente->setEstado("Eliminado");
                $emInfraestructura->persist($objEnlaceCliente);
                $emInfraestructura->flush(); 

                //crear las caract para la solicitud de retiro de equipo
                $objEnlaceClienteSiguiente = $emInfraestructura
                                             ->getRepository('schemaBundle:InfoEnlace')
                                             ->findOneBy(array("interfaceElementoIniId" => $objServicioTecnico->getInterfaceElementoClienteId(),
                                                               "estado"                 => "Activo"));

                //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
                if(is_object($objEnlaceClienteSiguiente))
                {
                    //elimino enlace
                    $objEnlaceClienteSiguiente->setEstado("Eliminado");
                    $emInfraestructura->persist($objEnlaceClienteSiguiente);
                    $emInfraestructura->flush(); 

                    $objEnlaceNuevo = new InfoEnlace();
                    $objEnlaceNuevo->setInterfaceElementoIniId($objEnlaceCliente->getInterfaceElementoIniId());
                    $objEnlaceNuevo->setInterfaceElementoFinId($objEnlaceClienteSiguiente->getInterfaceElementoFinId());
                    $objEnlaceNuevo->setTipoMedioId($objEnlaceClienteSiguiente->getTipoMedioId());
                    $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                    $objEnlaceNuevo->setEstado("Activo");
                    $objEnlaceNuevo->setUsrCreacion($objSession->get('user'));
                    $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                    $objEnlaceNuevo->setIpCreacion($objRequest->getClientIp());
                    $emInfraestructura->persist($objEnlaceNuevo);
                    $emInfraestructura->flush(); 
                }
            }

            //se eliminan elementos del servicio
            $objElementoApWifi->setEstado("Eliminado");
            $emInfraestructura->persist($objElementoApWifi);
            $emInfraestructura->flush();

            //SE REGISTRA EL TRACKING DEL ELEMENTO
            $arrayParametrosAuditoria["strNumeroSerie"]  = $objElementoApWifi->getSerieFisica();
            $arrayParametrosAuditoria["strEstadoTelcos"] = 'Eliminado';
            $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
            $arrayParametrosAuditoria["strEstadoActivo"] = 'Cancelado';
            $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
            $arrayParametrosAuditoria["strCodEmpresa"]   = $objSession->get('idEmpresa');
            $arrayParametrosAuditoria["strTransaccion"]  = 'Cancelacion Servicio';
            $arrayParametrosAuditoria["intOficinaId"]    = 0;

            //Se consulta el login del cliente
            if(is_object($objServicioTecnico->getServicioId()))
            {
                $objInfoPunto = $emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                                  ->find($objServicioTecnico->getServicioId()->getPuntoId()->getId());
                if(is_object($objInfoPunto))
                {
                    $arrayParametrosAuditoria["strLogin"] = $objInfoPunto->getLogin();
                }
            }

            $arrayParametrosAuditoria["strUsrCreacion"] = $objSession->get('user');

            $serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);

            //historial del elemento
            $objHistorialElemento = new InfoHistorialElemento();
            $objHistorialElemento->setElementoId($objElementoApWifi);
            $objHistorialElemento->setObservacion("Se elimino el elemento por cancelacion de Servicio");
            $objHistorialElemento->setEstadoElemento("Eliminado");
            $objHistorialElemento->setUsrCreacion($objSession->get('user'));
            $objHistorialElemento->setFeCreacion(new \DateTime('now'));
            $objHistorialElemento->setIpCreacion($objRequest->getClientIp());
            $emInfraestructura->persist($objHistorialElemento);
            $emInfraestructura->flush();

            //eliminar puertos elemento
            $arrayInterfacesElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                         ->findBy(array("elementoId" => $objElementoApWifi->getId()));

            foreach($arrayInterfacesElemento as $objInterfaceElemento)
            {
                $objInterfaceElemento->setEstado("Eliminado");
                $emInfraestructura->persist($objInterfaceElemento);
                $emInfraestructura->flush();
            }

            //se agrega codigo para generación de solicitud de retiro de equipo y tarea en cancelaciones de servicios ApWifi
            if (strpos($objProducto->getDescripcionProducto(), 'Renta') !== false || $strEsExtenderDualBand === "SI")
            {
                //crear solicitud para retiro de equipo (ont y wifi)
                $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO", 
                                                                  "estado"               => "Activo"));
                $objDetalleSolicitud = new InfoDetalleSolicitud();
                $objDetalleSolicitud->setServicioId($objServicio);
                $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                $objDetalleSolicitud->setEstado("AsignadoTarea");
                $objDetalleSolicitud->setUsrCreacion($objSession->get('user'));
                $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                $objDetalleSolicitud->setObservacion("SOLICITA RETIRO DE EQUIPO POR CANCELACION DEL SERVICIO");
                $emComercial->persist($objDetalleSolicitud);
                $emComercial->flush();
                $objAdmiCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                     ->findOneBy(array('descripcionCaracteristica' => 'ELEMENTO CLIENTE',
                                                                       'estado'                    => 'Activo'));
                if (!is_object($objAdmiCaracteristica))
                {
                    throw new \Exception("No se encontro información acerca de caracteristica ELEMENTO CLIENTE");
                }
                
                //valor del ont
                $objDetalleSolCaract= new InfoDetalleSolCaract();
                $objDetalleSolCaract->setCaracteristicaId($objAdmiCaracteristica);
                $objDetalleSolCaract->setDetalleSolicitudId($objDetalleSolicitud);
                $objDetalleSolCaract->setValor($objElementoApWifi->getId());
                $objDetalleSolCaract->setEstado("AsignadoTarea");
                $objDetalleSolCaract->setUsrCreacion($objSession->get('user'));
                $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                $emComercial->persist($objDetalleSolCaract);
                $emComercial->flush();

                //obtener tarea
                $objProceso   = $emSoporte->getRepository('schemaBundle:AdmiProceso')
                                          ->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");
                if (!is_object($objProceso))
                {
                    throw new \Exception("No se encontro información acerca del proceso SOLICITAR RETIRO EQUIPO");
                }
                $arrayTareas  = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                          ->findTareasActivasByProceso($objProceso->getId());
                $objTarea     = $arrayTareas[0];

                //grabar nuevo info_detalle para la solicitud de retiro de equipo
                $objDetalle = new InfoDetalle();
                $objDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
                $objDetalle->setTareaId($objTarea);
                $objDetalle->setLongitud($objServicio->getPuntoId()->getLongitud());
                $objDetalle->setLatitud($objServicio->getPuntoId()->getLatitud());
                $objDetalle->setPesoPresupuestado(0);
                $objDetalle->setValorPresupuestado(0);
                $objDetalle->setIpCreacion($objRequest->getClientIp());
                $objDetalle->setFeCreacion(new \DateTime('now'));
                $objDetalle->setUsrCreacion($objSession->get('user'));
                $objDetalle->setFeSolicitada(new \DateTime('now'));
                $emSoporte->persist($objDetalle);
                $emSoporte->flush();                              

                //obtenemos el persona empresa rol del usuario
                $objPersonaEmpresaRolUsr = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                       ->find($intIdPersonaEmpRol);

                if (!is_object($objPersonaEmpresaRolUsr))
                {
                    throw new \Exception("No se encontro información acerca del rol del cliente en sesion");
                }

                //buscamos datos del dept, persona
                $objDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($objPersonaEmpresaRolUsr->getDepartamentoId());

                if (!is_object($objDepartamento))
                {
                    throw new \Exception("No se encontro información acerca del departamento del usuario en sesión");
                }

                $objPersona = $objPersonaEmpresaRolUsr->getPersonaId();

                if (!is_object($objPersona))
                {
                    throw new \Exception("No se encontro información acerca de la persona en sesión");
                }

                //grabamos soporte.info_detalle_asignacion
                $objDetalleAsignacion = new InfoDetalleAsignacion();
                $objDetalleAsignacion->setDetalleId($objDetalle);
                $objDetalleAsignacion->setAsignadoId($objDepartamento->getId());
                $objDetalleAsignacion->setAsignadoNombre($objDepartamento->getNombreDepartamento());
                $objDetalleAsignacion->setRefAsignadoId($objPersona->getId());

                if($objPersona->getRazonSocial()=="")
                {
                    $strNombreAsignado = $objPersona->getNombres()." ".$objPersona->getApellidos();
                }
                else
                {
                    $strNombreAsignado = $objPersona->getRazonSocial();
                }
                $objDetalleAsignacion->setRefAsignadoNombre($strNombreAsignado);
                $objDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRolUsr->getId());
                $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
                $objDetalleAsignacion->setUsrCreacion($objSession->get('user'));
                $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                $objDetalleAsignacion->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objDetalleAsignacion);
                $emSoporte->flush();
                                
                //Se ingresa el historial de la tarea
                if(is_object($objDetalle))
                {
                    $arrayParametrosHist["intDetalleId"] = $objDetalle->getId();            
                }

                $arrayParametrosHist["strObservacion"]  = "Tarea Asignada";                
                $arrayParametrosHist["strEstadoActual"] = "Asignada";
                $arrayParametrosHist["strAccion"]       = "Asignada";

                $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);                  

                $strAfectadoNombre = $objPunto->getNombrePunto();
                $intPuntoId        = $objPunto->getId();
                $strPuntoLogin     = $objPunto->getLogin();

                // se graba en la DB_SOPORTE.INFO_CRITERIO_AFECTADO
                $objCriterio = new InfoCriterioAfectado();
                $objCriterio->setId($intIdCriterioAfectado);
                $objCriterio->setDetalleId($objDetalle);
                $objCriterio->setCriterio("Clientes");
                $objCriterio->setOpcion("Cliente: " . $strAfectadoNombre . " | OPCION: Punto Cliente");
                $objCriterio->setFeCreacion(new \DateTime('now'));
                $objCriterio->setUsrCreacion($objSession->get('user'));
                $objCriterio->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objCriterio);
                $emSoporte->flush();

                // se graba en la DB_SOPORTE.INFO_PARTE_AFECTADA
                $objAfectado = new InfoParteAfectada();
                $objAfectado->setTipoAfectado("Cliente");
                $objAfectado->setDetalleId($objDetalle->getId());
                $objAfectado->setCriterioAfectadoId($objCriterio->getId());
                $objAfectado->setAfectadoId($intPuntoId);
                $objAfectado->setFeIniIncidencia(new \DateTime('now'));
                $objAfectado->setAfectadoNombre($strPuntoLogin);
                $objAfectado->setAfectadoDescripcion($strAfectadoNombre);
                $objAfectado->setFeCreacion(new \DateTime('now'));
                $objAfectado->setUsrCreacion($objSession->get('user'));
                $objAfectado->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objAfectado);
                $emSoporte->flush();

                //crear historial para la solicitud
                $objHistorialSolicitud = new InfoDetalleSolHist();
                $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
                $objHistorialSolicitud->setEstado("AsignadoTarea");
                $objHistorialSolicitud->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE EQUIPO POR CANCELACION DEL SERIVICIO");
                $objHistorialSolicitud->setUsrCreacion($objSession->get('user'));
                $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
                $objHistorialSolicitud->setIpCreacion($objRequest->getClientIp());
                $emComercial->persist($objHistorialSolicitud);
                $emComercial->flush();
            }
            
            $emSoporte->getConnection()->commit();
            $emComercial->getConnection()->commit();
            $emInfraestructura->getConnection()->commit();
            $strMensajeRespuesta = "OK";

            //Proceso que graba tarea en INFO_TAREA
            if (is_object($objDetalle))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $objDetalle->getId();
                $arrayParametrosInfoTarea['strUsrCreacion'] = $objSession->get('user');
                $objServiceSoporte                          = $this->get('soporte.SoporteService');
                $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
            }
        }
        catch (\Exception $ex)
        {
            if ($emSoporte->getConnection()->isTransactionActive())
            {
                $emSoporte->getConnection()->rollback();
            }
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
            
            $emSoporte->getConnection()->close();
            $emComercial->getConnection()->close();
            $emInfraestructura->getConnection()->close();
            
            $strMensajeRespuesta = "ERROR";
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.cancelarServicioApWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objRequest->getClientIp()
                                     );
        }
        
        if($strMensajeRespuesta === "OK" && $strEsExtenderDualBand === "SI")
        {
            $arrayVerifModelosExtenderDualBand  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get(  'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    'MODELOS_EQUIPOS',
                                                                    '',
                                                                    '',
                                                                    'EXTENDER DUAL BAND',
                                                                    $strModeloApWifi,
                                                                    $strCodEmpresa);
            if(is_array($arrayVerifModelosExtenderDualBand) && count($arrayVerifModelosExtenderDualBand) > 0)
            {
                $arrayRespuestaCancelaW = $serviceCancelacionServicio->cancelaServiciosWXCancelacionEdb(
                                                    array(  "intIdPunto"                => $intIdPuntoServicio,
                                                            "intIdPersonaEmpresaRol"    => $intIdPersonaEmpRol,
                                                            "strCodEmpresa"             => $strCodEmpresa,
                                                            "strUsrCreacion"            => $objSession->get('user'),
                                                            "strIpCreacion"             => $objRequest->getClientIp()));
                $strMensaje = $arrayRespuestaCancelaW["mensaje"];
            }
        }
        $objJsonResponse->setData(array('strStatus' => $strMensajeRespuesta,
                                        'strMensaje'=> $strMensaje));
        return $objJsonResponse;
    }
    
    /**
     * cancelarServicioWyApAction
     * 
     * Funcion que cancela el servicio W + AP
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 24-09-2020
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 25-05-2021 Se agrega la eliminación de solicitudes dual band y que gestionen ont asociadas a servicios W+AP a cancelar
     * 
     * @return  Object  $objJsonResponse   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function cancelarServicioWyApAction()
    {
        $objJsonResponse            = new JsonResponse();
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();
        $intIdServicio              = $objRequest->get('idServicio');
        $intIdAccion                = $objRequest->get('idAccion');
        $emComercial                = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura          = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSeguridad                = $this->get('doctrine')->getManager('telconet_seguridad');
        $emGeneral                  = $this->get('doctrine')->getManager('telconet_general');
        $emSoporte                  = $this->get('doctrine')->getManager('telconet_soporte');
        $serviceUtil                = $this->get('schema.Util');
        $serviceServicioTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $strIpCreacion              = $objRequest->getClientIp();
        $strUsrCreacion             = $objSession->get('user');
        $strCodEmpresa              = $objSession->get('idEmpresa');
        $intIdDepartamento          = $objSession->get('idDepartamento');
        $intIdPersonaEmpresaRol     = $objSession->get('idPersonaEmpresaRol');
        $strContinuaFlujoCambioW    = "NO";
        $strMensaje                 = "";
        $emGeneral->getConnection()->beginTransaction();
        $emSoporte->getConnection()->beginTransaction();
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $objServicioWyAp = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicioWyAp))
            {
                $strMensaje = "No se encontró información del servicio";
                throw new \Exception($strMensaje);
            }
            
            $objPunto = $objServicioWyAp->getPuntoId();
            if (!is_object($objPunto))
            {
                $strMensaje = "No se encontró información acerca del punto del servicio";
                throw new \Exception($strMensaje);
            }
            
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                $strMensaje = "No se encontró información de la acción";
                throw new \Exception($strMensaje);
            }
            
            $objProducto = $objServicioWyAp->getProductoId();
            if (!is_object($objProducto))
            {
                $strMensaje = "El servicio no es un producto adicional";
                throw new \Exception($strMensaje);
            }
            $intIdElementoCliente               = null;
            $arrayRespuestaServInternetValido   = $serviceServicioTecnico->obtieneServicioInternetValido(array( "intIdPunto"    => $objPunto->getId(),
                                                                                                                "strCodEmpresa" => $strCodEmpresa));
            $strStatusServicioInternet          = $arrayRespuestaServInternetValido["status"];
            $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];
            if($strStatusServicioInternet === "OK" && is_object($objServicioInternet))
            {
                $arrayRespuestaEdbEnlazado  = $serviceServicioTecnico->verificaEquipoEnlazado(
                                                                        array(  "intIdServicioInternet" => $objServicioInternet->getId(),
                                                                                "strTipoEquipoABuscar"  => "WIFI DUAL BAND"));
                $strStatusEquipoWdbEnlazado = $arrayRespuestaEdbEnlazado["status"];
                $strInfoEquipoWdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                if($strStatusEquipoWdbEnlazado === "OK")
                {
                    if(isset($strInfoEquipoWdbEnlazado) && !empty($strInfoEquipoWdbEnlazado))
                    {
                        /**
                         * El servicio tiene atado un Wifi Dual Band por lo que se procede a crear una solicitud de cambio de modem inmediato
                         */
                        $strContinuaFlujoCambioW    = "SI";
                        $arrayInfoElemento          = explode(',', $strInfoEquipoWdbEnlazado);
                        $intIdElementoCliente       = $arrayInfoElemento[0];
                    }
                }
                else
                {
                    $strMensaje = "No se ha podido verificar los enlaces del servicio de Internet de este punto";
                    throw new \Exception($strMensaje);
                }
            }
            else
            {
                $strMensaje = "No se ha podido obtener el servicio de Internet asociado a este punto";
                throw new \Exception($strMensaje);
            }
            
            if($strContinuaFlujoCambioW === "SI")
            {
                /**
                 * Se verifica si el plan incluye el Wifi Dual Band, ya que puede darse el caso que se agregó el W+AP cuando el W venía incluido
                 * en el plan pero no incluía el Extender Dual Band
                 */
                $arrayRespuestaProdWdbEnPlan    = $serviceServicioTecnico->obtieneProductoEnPlan(
                                                            array(  "intIdPlan"                 => $objServicioInternet->getPlanId()->getId(),
                                                                    "strNombreTecnicoProducto"  => "WIFI_DUAL_BAND"));
                $strProductoWdbEnPlan           = $arrayRespuestaProdWdbEnPlan["strProductoEnPlan"];
                if($strProductoWdbEnPlan === "SI")
                {
                    /**
                     * Si existe el detalle Wifi Dual Band dentro del plan, se procederá a generar el retiro del Ap y
                     * se eliminará el elemento
                     * 
                     */
                    $arrayRespuestaEliminarEquipoAp = $serviceServicioTecnico->eliminarEquipoConectado(array(  
                                                                                                    "intIdServicio"             => $intIdServicio,
                                                                                                    "strUsrCreacion"            => $strUsrCreacion,
                                                                                                    "strIpCreacion"             => $strIpCreacion,
                                                                                                    "strCodEmpresa"             => $strCodEmpresa,
                                                                                                    "intIdDepartamento"         => $intIdDepartamento,
                                                                                                    "intIdPersonaEmpresaRol"    => 
                                                                                                    $intIdPersonaEmpresaRol,
                                                                                                    "strDescripcionProducto"    => "Ap"));
            
                    if($arrayRespuestaEliminarEquipoAp["status"] != "OK")
                    {
                        $strMensaje = "No se ha podido eliminar el elemento Ap";
                        throw new \Exception($strMensaje);
                    }
                }
                else
                {
                    /**
                     * La solicitud de cambio de módem estará asociada al servicio de Internet siempre y cuando el plan de Internet 
                     * no incluya el producto Wifi Dual Band
                     */                    
                    $arrayRespuestaCreaSolCambioModemInmediato = 
                        $serviceServicioTecnico->creaSolAutomaticaCambioModemInmediatoCpeOnt
                            (
                            array(  "objServicio"               => $objServicioInternet,
                                    "intIdPersonaEmpresaRol"    => $intIdPersonaEmpresaRol,
                                    "strIpCreacion"             => $strIpCreacion,
                                    "strUsrCreacion"            => $strUsrCreacion,
                                    "strObservacion"            => 
                                    "Solicitud creada automáticamente por cancelación de servicio ".$objProducto->getDescripcionProducto(),
                                    "strNombreTecnicoProdMotivo"=> $objProducto->getNombreTecnico(),
                                    "strProcesoEjecutante"      => "CANCELACION",
                                    "strCodEmpresa"             => $strCodEmpresa,
                                    "intPrecioDescuento"        => null,
                                    "intIdElementoCliente"      => $intIdElementoCliente,
                                    "strTipoDocumento"          => "c"));

                    if($arrayRespuestaCreaSolCambioModemInmediato["status"] !== "OK")
                    {
                        $strMensaje = $arrayRespuestaCreaSolCambioModemInmediato["mensaje"];
                        throw new \Exception($strMensaje);
                    }
                }
            }
            else
            {
                //Se eliminará y se generará la solicitud de retiro del Extender Dual Band
                $arrayRespuestaEliminarEquipoAp = $serviceServicioTecnico->eliminarEquipoConectado(array(  
                                                                                                "intIdServicio"             => $intIdServicio,
                                                                                                "strUsrCreacion"            => $strUsrCreacion,
                                                                                                "strIpCreacion"             => $strIpCreacion,
                                                                                                "strCodEmpresa"             => $strCodEmpresa,
                                                                                                "intIdDepartamento"         => $intIdDepartamento,
                                                                                                "intIdPersonaEmpresaRol"    => 
                                                                                                $intIdPersonaEmpresaRol,
                                                                                                "strDescripcionProducto"    => "Ap"));

                if($arrayRespuestaEliminarEquipoAp["status"] != "OK")
                {
                    $strMensaje = "No se ha podido eliminar el elemento Ap";
                    throw new \Exception($strMensaje);
                }
            }
            
            $serviceServicioTecnico->eliminaSolicitudesGestionaOnt(array("intIdServicio" => $objServicioWyAp->getId()));
            $serviceServicioTecnico->eliminaSolicitudesDualBand(array("intIdServicio" => $objServicioWyAp->getId()));
            
            $objServicioWyAp->setEstado("Cancel");
            $emComercial->persist($objServicioWyAp);
            $emComercial->flush();
            //historial del servicio
            $objServicioHistorialWyAp = new InfoServicioHistorial();
            $objServicioHistorialWyAp->setServicioId($objServicioWyAp);
            $objServicioHistorialWyAp->setObservacion($objProducto->getDescripcionProducto().": Se cancelo el servicio");
            $objServicioHistorialWyAp->setEstado("Cancel");
            $objServicioHistorialWyAp->setUsrCreacion($objSession->get('user'));
            $objServicioHistorialWyAp->setFeCreacion(new \DateTime('now'));
            $objServicioHistorialWyAp->setIpCreacion($objRequest->getClientIp());
            $objServicioHistorialWyAp->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorialWyAp);
            $emComercial->flush();
            
            $emGeneral->getConnection()->commit();
            $emSoporte->getConnection()->commit();
            $emComercial->getConnection()->commit();
            $emInfraestructura->getConnection()->commit();
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            if ($emGeneral->getConnection()->isTransactionActive())
            {
                $emGeneral->getConnection()->rollback();
            }
            if ($emSoporte->getConnection()->isTransactionActive())
            {
                $emSoporte->getConnection()->rollback();
            }
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
            
            $emGeneral->getConnection()->close();
            $emSoporte->getConnection()->close();
            $emComercial->getConnection()->close();
            $emInfraestructura->getConnection()->close();
            
            $strStatus = "ERROR";
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController->cancelarServicioWyApAction', 
                                      $e->getMessage(), 
                                      $objSession->get('user'), 
                                      $objRequest->getClientIp()
                                     );
        }
        $objJsonResponse->setData(array('strStatus'     => $strStatus,
                                        'strMensaje'    => $strMensaje));
        return $objJsonResponse;
    }
    
    
    /**
     * cancelarServicioWAction
     * 
     * Función que cancela el servicio W
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 24-09-2020
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 27-05-2021 Se agrega la eliminación de solicitudes dual band y que gestionen ont asociadas a servicios Wifi Dual Band a cancelar
     * 
     * @return  Object  $objJsonResponse   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function cancelarServicioWAction()
    {
        $objJsonResponse            = new JsonResponse();
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();
        $intIdServicio              = $objRequest->get('idServicio');
        $intIdAccion                = $objRequest->get('idAccion');
        $emComercial                = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura          = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSeguridad                = $this->get('doctrine')->getManager('telconet_seguridad');
        $emGeneral                  = $this->get('doctrine')->getManager('telconet_general');
        $emSoporte                  = $this->get('doctrine')->getManager('telconet_soporte');
        $serviceUtil                = $this->get('schema.Util');
        $serviceServicioTecnico     = $this->get('tecnico.InfoServicioTecnico'); 
        $strIpCreacion              = $objRequest->getClientIp();
        $strUsrCreacion             = $objSession->get('user');
        $strCodEmpresa              = $objSession->get('idEmpresa');
        $intIdPersonaEmpresaRol     = $objSession->get('idPersonaEmpresaRol');
        $strContinuaFlujoCambioW    = "NO";
        $strMensaje                 = "";
        $emGeneral->getConnection()->beginTransaction();
        $emSoporte->getConnection()->beginTransaction();
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $objServicioW = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicioW))
            {
                $strMensaje = "No se encontró información del servicio";
                throw new \Exception($strMensaje);
            }
            
            $objPunto = $objServicioW->getPuntoId();
            if (!is_object($objPunto))
            {
                $strMensaje = "No se encontró información acerca del punto del servicio";
                throw new \Exception($strMensaje);
            }
            
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                $strMensaje = "No se encontró información de la acción";
                throw new \Exception($strMensaje);
            }
            $objProducto = $objServicioW->getProductoId();
            if (!is_object($objProducto))
            {
                $strMensaje = "El servicio no es un producto adicional";
                throw new \Exception($strMensaje);
            }
            
            $intIdElementoCliente               = null;
            $arrayRespuestaServInternetValido   = $serviceServicioTecnico->obtieneServicioInternetValido(array( "intIdPunto"    => $objPunto->getId(),
                                                                                                                "strCodEmpresa" => $strCodEmpresa));
            $strStatusServicioInternet          = $arrayRespuestaServInternetValido["status"];
            $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];
            if($strStatusServicioInternet === "OK" && is_object($objServicioInternet))
            {
                $arrayRespuestaEdbEnlazado  = $serviceServicioTecnico->verificaEquipoEnlazado(
                                                                        array(  "intIdServicioInternet" => $objServicioInternet->getId(),
                                                                                "strTipoEquipoABuscar"  => "EXTENDER DUAL BAND"));
                $strStatusEquipoEdbEnlazado = $arrayRespuestaEdbEnlazado["status"];
                $strInfoEquipoEdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                if($strStatusEquipoEdbEnlazado === "OK" && isset($strInfoEquipoEdbEnlazado) && !empty($strInfoEquipoEdbEnlazado))
                {
                    $strMensaje =  "El punto aún tiene equipos extender conectados";
                    throw new \Exception($strMensaje);
                }
                
                $arrayRespuestaWdbEnlazado  = $serviceServicioTecnico->verificaEquipoEnlazado(
                                                                        array(  "intIdServicioInternet" => $objServicioInternet->getId(),
                                                                                "strTipoEquipoABuscar"  => "WIFI DUAL BAND"));
                $strStatusEquipoWdbEnlazado = $arrayRespuestaWdbEnlazado["status"];
                $strInfoEquipoWdbEnlazado   = $arrayRespuestaWdbEnlazado["infoEquipoEnlazado"];
                if($strStatusEquipoWdbEnlazado === "OK")
                {
                    if(isset($strInfoEquipoWdbEnlazado) && !empty($strInfoEquipoWdbEnlazado))
                    {
                        /**
                         * El servicio tiene atado un Wifi Dual Band por lo que se procede a crear una solicitud de cambio de modem inmediato
                         */
                        $strContinuaFlujoCambioW    = "SI";
                        $arrayInfoElemento          = explode(',', $strInfoEquipoWdbEnlazado);
                        $intIdElementoCliente       = $arrayInfoElemento[0];
                    }
                }
                else
                {
                    $strMensaje =  "No se ha podido verificar los enlaces del servicio de Internet de este punto";
                    throw new \Exception($strMensaje);
                }
            }
            else
            {
                $strMensaje = "No se ha podido obtener el servicio de Internet asociado a este punto";
                throw new \Exception($strMensaje);
            }
            
            
            if($strContinuaFlujoCambioW === "SI")
            {
                //La solicitud de cambio de modem estará asociada al servicio de Internet
                $arrayRespuestaCreaSolCambioModemInmediato = 
                    $serviceServicioTecnico->creaSolAutomaticaCambioModemInmediatoCpeOnt
                        (
                        array(  "objServicio"               => $objServicioInternet,
                                "intIdPersonaEmpresaRol"    => $intIdPersonaEmpresaRol,
                                "strIpCreacion"             => $strIpCreacion,
                                "strUsrCreacion"            => $strUsrCreacion,
                                "strObservacion"            => 
                                "Solicitud creada automáticamente por cancelación de servicio ".$objProducto->getDescripcionProducto(),
                                "strNombreTecnicoProdMotivo"=> $objProducto->getNombreTecnico(),
                                "strProcesoEjecutante"      => "CANCELACION",
                                "strCodEmpresa"             => $strCodEmpresa,
                                "intPrecioDescuento"        => null,
                                "intIdElementoCliente"      => $intIdElementoCliente,
                                "strTipoDocumento"          => "c"));
                
                
                if($arrayRespuestaCreaSolCambioModemInmediato["status"] !== "OK")
                {
                    $strMensaje = $arrayRespuestaCreaSolCambioModemInmediato["mensaje"];
                    throw new \Exception($strMensaje);
                }
            }
                        
            $serviceServicioTecnico->eliminaSolicitudesGestionaOnt(array("intIdServicio" => $objServicioW->getId()));
            $serviceServicioTecnico->eliminaSolicitudesDualBand(array("intIdServicio" => $objServicioW->getId()));
            
            $objServicioW->setEstado("Cancel");
            $emComercial->persist($objServicioW);
            $emComercial->flush();
            //historial del servicio
            $objServicioHistorialW = new InfoServicioHistorial();
            $objServicioHistorialW->setServicioId($objServicioW);
            $objServicioHistorialW->setObservacion($objProducto->getDescripcionProducto().": Se cancelo el servicio");
            $objServicioHistorialW->setEstado("Cancel");
            $objServicioHistorialW->setUsrCreacion($objSession->get('user'));
            $objServicioHistorialW->setFeCreacion(new \DateTime('now'));
            $objServicioHistorialW->setIpCreacion($objRequest->getClientIp());
            $objServicioHistorialW->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorialW);
            $emComercial->flush();
            
            $emGeneral->getConnection()->commit();
            $emSoporte->getConnection()->commit();
            $emComercial->getConnection()->commit();
            $emInfraestructura->getConnection()->commit();
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            if ($emGeneral->getConnection()->isTransactionActive())
            {
                $emGeneral->getConnection()->rollback();
            }
            if ($emSoporte->getConnection()->isTransactionActive())
            {
                $emSoporte->getConnection()->rollback();
            }
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
            
            $emGeneral->getConnection()->close();
            $emSoporte->getConnection()->close();
            $emComercial->getConnection()->close();
            $emInfraestructura->getConnection()->close();
            
            $strStatus = "ERROR";
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController->cancelarServicioWAction', 
                                      $e->getMessage(), 
                                      $objSession->get('user'), 
                                      $objRequest->getClientIp()
                                     );
        }
        $objJsonResponse->setData(array('strStatus'     => $strStatus,
                                        'strMensaje'    => $strMensaje));
        return $objJsonResponse;
    }
    
    
    /**
     * verificaServiciosDualBandCambioPlanAction
     * 
     * Función que verifica los precios de los planes para mostrar alerta de servicios adicionales que serán facturados
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 29-09-2020
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 01-02-2022 Se agregan validaciones para que no verifique los wifi dual band y extender dentro de los planes de servicios de 
     *                         Internet con tecnología ZTE
     * 
     * @return  Object  $objJsonResponse   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function verificaServiciosDualBandCambioPlanAction()
    {
        $objJsonResponse            = new JsonResponse();
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();
        $intIdServicioInternet      = $objRequest->get('intIdServicioInternet');
        $intIdPlanNuevo             = $objRequest->get('intIdPlanNuevo');
        $emComercial                = $this->get('doctrine')->getManager('telconet');
        $emGeneral                  = $this->get('doctrine')->getManager('telconet_general');
        $serviceServicioTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $strCodEmpresa              = $objSession->get('idEmpresa');
        $strMensaje                 = "";
        $strNecesitaConfirmacion    = "";
        $strCreaServicioAdicionalWdb="";
        $strCreaServicioAdicionalEdb= "";
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioInternet);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontró información del servicio");
            }
            
            $objPunto = $objServicio->getPuntoId();
            if (!is_object($objPunto))
            {
                throw new \Exception("No se encontró información acerca del punto del servicio");
            }
            
            $objPlan = $objServicio->getPlanId();
            if (!is_object($objPlan))
            {
                throw new \Exception("El servicio no se encuentra asociado a un plan");
            }
            $intIdPlanActual = $objPlan->getId();
            
            $arrayRespuestaServiciosWyAp    = $serviceServicioTecnico->obtenerServiciosPorProducto(
                                                                                    array(  "intIdPunto"                    => $objPunto->getId(),
                                                                                            "arrayNombresTecnicoProducto"   => array("WDB_Y_EDB"),
                                                                                            "strCodEmpresa"                 => $strCodEmpresa));
            $intContadorServiciosWyAp       = $arrayRespuestaServiciosWyAp["intContadorServiciosPorProducto"];
            if(intval($intContadorServiciosWyAp) === 0)
            {
                $arrayVerifTecnologiaDualBand           = $serviceServicioTecnico->verificaTecnologiaDualBand(array("intIdServicioInternet" => 
                                                                                                                    $intIdServicioInternet));
                $strStatusVerifTecnologiaDualBand       = $arrayVerifTecnologiaDualBand["status"];
                $strMensajeVerifTecnologiaDualBand      = $arrayVerifTecnologiaDualBand["mensaje"];
                $strModelosEquiposWdbTecnologiaDualBand = $arrayVerifTecnologiaDualBand["modelosEquiposWdb"];
                if($strStatusVerifTecnologiaDualBand === "OK")
                {
                    $arrayInfoVerifVerifTecnologiaDualBand  = explode('|', $strMensajeVerifTecnologiaDualBand);
                    $strEsPermitidoWYExtenderEnPlanes       = $arrayInfoVerifVerifTecnologiaDualBand[2];
                    if(isset($strModelosEquiposWdbTecnologiaDualBand) && !empty($strModelosEquiposWdbTecnologiaDualBand))
                    {
                        /**
                         * Se verifican si el wifi dual band se encuentra registrado en la data técnica
                         */
                        $arrayRespuestaWdbEnlazado  = $serviceServicioTecnico->verificaEquipoEnlazado(array( "intIdServicioInternet" => 
                                                                                                            $intIdServicioInternet,
                                                                                                            "strTipoEquipoABuscar"  => 
                                                                                                            "WIFI DUAL BAND"));
                        $strInfoEquipoWdbEnlazado   = $arrayRespuestaWdbEnlazado["infoEquipoEnlazado"];
                        
                        if($strEsPermitidoWYExtenderEnPlanes === "SI")
                        {
                            /**
                             * Se verifica si el producto wifi dual band se encuentra como detalle del plan de Internet actual
                             */
                            $arrayRespuestaProdWdbEnPlanActual  = $serviceServicioTecnico->obtieneProductoEnPlan(
                                                                                                                array(  "intIdPlan"                 =>
                                                                                                                        $intIdPlanActual,
                                                                                                                        "strNombreTecnicoProducto"  =>
                                                                                                                        "WIFI_DUAL_BAND"));
                            $strProductoWdbEnPlanActual         = $arrayRespuestaProdWdbEnPlanActual["strProductoEnPlan"];

                            /**
                             * Se verifica si el producto wifi dual band se encuentra como detalle del plan de Internet nuevo
                             */
                            $arrayRespuestaProdWdbEnPlanNuevo   = $serviceServicioTecnico->obtieneProductoEnPlan(
                                                                                                                array(  "intIdPlan"                 =>
                                                                                                                        $intIdPlanNuevo,
                                                                                                                        "strNombreTecnicoProducto"  =>
                                                                                                                        "WIFI_DUAL_BAND"));
                            $strProductoWdbEnPlanNuevo          = $arrayRespuestaProdWdbEnPlanNuevo["strProductoEnPlan"];
                        }

                        /**
                         * Se verifican si existen servicios adicionales wifi dual band
                         */

                        $arrayRespuestaServiciosWdb         = $serviceServicioTecnico->obtenerServiciosPorProducto(
                                                                    array(  "intIdPunto"                    => $objPunto->getId(),
                                                                            "arrayNombresTecnicoProducto"   => array("WIFI_DUAL_BAND"),
                                                                            "strCodEmpresa"                 => $strCodEmpresa,
                                                                            "arrayEstadosServicioABuscar"   => array("Activo")));
                        $intContadorServiciosWdb            = $arrayRespuestaServiciosWdb["intContadorServiciosPorProducto"];

                        if($strProductoWdbEnPlanNuevo === "NO" && isset($strInfoEquipoWdbEnlazado) && !empty($strInfoEquipoWdbEnlazado)
                            && intval($intContadorServiciosWdb) === 0 && $strProductoWdbEnPlanActual === "SI")
                        {
                            $strCreaServicioAdicionalWdb = "SI";
                        }
                    }
                    
                    /**
                     * Se verifican si el extender dual band se encuentra registrado en la data técnica
                     */
                    $arrayRespuestaEdbEnlazado  = $serviceServicioTecnico->verificaEquipoEnlazado(array( "intIdServicioInternet" => 
                                                                                                        $intIdServicioInternet,
                                                                                                        "strTipoEquipoABuscar"  => 
                                                                                                        "EXTENDER DUAL BAND"));
                    $strStatusEdbEnlazado       = $arrayRespuestaEdbEnlazado["status"];
                    $strInfoEquipoEdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                    
                    
                    if($strEsPermitidoWYExtenderEnPlanes === "SI")
                    {
                        /**
                         * Se verifica si el producto extender dual band se encuentra como detalle del plan de Internet actual
                         */
                        $arrayRespuestaProdEdbEnPlanActual  = $serviceServicioTecnico->obtieneProductoEnPlan(
                                                                                                            array(  "intIdPlan"                 => 
                                                                                                                    $intIdPlanActual,
                                                                                                                    "strNombreTecnicoProducto"  => 
                                                                                                                    "EXTENDER_DUAL_BAND"));
                        $strProductoEdbEnPlanActual         = $arrayRespuestaProdEdbEnPlanActual["strProductoEnPlan"];

                        /**
                         * Se verifica si el producto extender dual band se encuentra como detalle del plan de Internet nuevo
                         */
                        $arrayRespuestaProdEdbEnPlanNuevo   = $serviceServicioTecnico->obtieneProductoEnPlan(
                                                                                                            array(  "intIdPlan"                 => 
                                                                                                                    $intIdPlanNuevo,
                                                                                                                    "strNombreTecnicoProducto"  => 
                                                                                                                    "EXTENDER_DUAL_BAND"));
                        $strProductoEdbEnPlanNuevo          = $arrayRespuestaProdEdbEnPlanNuevo["strProductoEnPlan"];
                    }
                    
                    if($strStatusEdbEnlazado ===  "OK" && isset($strInfoEquipoEdbEnlazado) && !empty($strInfoEquipoEdbEnlazado))
                    {
                        $arrayEdbEncontrado                 = explode(',', $strInfoEquipoEdbEnlazado);
                        $arrayResultadoServiciosAdicEdb     = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                          ->getServiciosAdicDualBandPorDataTecnica(array(
                                                                                "intIdPunto"                => $objPunto->getId(),
                                                                                "intElementoClienteId"      => $arrayEdbEncontrado[0],
                                                                                "intInterfaceElemClienteId" => $arrayEdbEncontrado[4],
                                                                                "strNombreTecnicoProducto"  => "EXTENDER_DUAL_BAND"));
                        
                        $intContadorServiciosEdb           = $arrayResultadoServiciosAdicEdb['total'];
                    }
                    
                    if($strProductoEdbEnPlanNuevo === "NO" && isset($strInfoEquipoEdbEnlazado) && !empty($strInfoEquipoEdbEnlazado)
                        && intval($intContadorServiciosEdb) === 0 && $strProductoEdbEnPlanActual === "SI")
                    {
                        $strCreaServicioAdicionalEdb = "SI";
                    }
                }
            }
            
            if($strCreaServicioAdicionalWdb === "SI" || $strCreaServicioAdicionalEdb === "SI")
            {
                $floatPrecioPlanNuevo   = 0;
                $arrayDetallesPlanNuevo = $emComercial->getRepository('schemaBundle:InfoPlanDet')->findBy(array("planId" => $intIdPlanNuevo));
                foreach($arrayDetallesPlanNuevo as $objDetallePlanNuevo)
                {
                    if($objDetallePlanNuevo->getEstado() != "Eliminado")
                    {
                        $floatPrecioPlanNuevo   = $floatPrecioPlanNuevo 
                                                    + ($objDetallePlanNuevo->getPrecioItem() * $objDetallePlanNuevo->getCantidadDetalle());
                    }
                }
                
                $floatPrecioPlanActual  = 0;
                $arrayDetallesPlanActual = $emComercial->getRepository('schemaBundle:InfoPlanDet')->findBy(array("planId" => $intIdPlanActual));
                foreach($arrayDetallesPlanActual as $objDetallePlanActual)
                {
                    if($objDetallePlanActual->getEstado() != "Eliminado")
                    {
                        $floatPrecioPlanActual  = $floatPrecioPlanActual 
                                                    + ($objDetallePlanActual->getPrecioItem() * $objDetallePlanActual->getCantidadDetalle());
                    }
                }
                
                $strServiciosDbEsGratis = "NO";
                if($floatPrecioPlanNuevo >= $floatPrecioPlanActual)
                {
                    $strServiciosDbEsGratis = "SI";
                }
                
                if($strServiciosDbEsGratis === "NO")
                {
                    $strNecesitaConfirmacion    = "SI";
                    $strDescripcionEdb          = "";
                    $strPrecioEdb               = "";
                    $strDescripcionWyAp         = "";
                    $strPrecioWyAp              = "";
                    
                    $objProductoEdb = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneByNombreTecnico('EXTENDER_DUAL_BAND');
                    if(is_object($objProductoEdb))
                    {
                        $arrayProdPrecioEdb = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    'PRECIOS_PRODUCTOS',
                                                                    $objProductoEdb->getId(),
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $strCodEmpresa);
                        if(isset($arrayProdPrecioEdb) && !empty($arrayProdPrecioEdb))
                        {
                            $strDescripcionEdb = $objProductoEdb->getDescripcionProducto();
                            $strPrecioEdb      = $arrayProdPrecioEdb["valor3"];
                        }
                    }
                    
                    $objProductoWyAp = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneByNombreTecnico('WDB_Y_EDB');
                    if(is_object($objProductoWyAp))
                    {
                        $arrayProdPrecioWyAp    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        'PRECIOS_PRODUCTOS',
                                                                        $objProductoWyAp->getId(),
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
                        if(isset($arrayProdPrecioWyAp) && !empty($arrayProdPrecioWyAp))
                        {
                            $strDescripcionWyAp = $objProductoWyAp->getDescripcionProducto();
                            $strPrecioWyAp      = $arrayProdPrecioWyAp["valor3"];
                        }
                    }
                    
                    $strInfoServiciosXCrear     = "";
                    if($strCreaServicioAdicionalWdb === "SI" && $strCreaServicioAdicionalEdb === "SI")
                    {
                        $strInfoServiciosXCrear .= "Se facturará el servicio nuevo ".$strDescripcionWyAp . " con el precio de $".$strPrecioWyAp;
                    }
                    else if($strCreaServicioAdicionalWdb === "SI")
                    {
                        if(isset($intContadorServiciosEdb) && !empty($intContadorServiciosEdb) && $intContadorServiciosEdb > 0)
                        {
                            $strInfoServiciosXCrear .= "Se facturará el servicio nuevo ".$strDescripcionWyAp . " con el precio de $".$strPrecioWyAp
                                                       ." que incluirá la cancelación de un servicio adicional ".$strDescripcionEdb;
                        }
                        else
                        {
                            $strInfoServiciosXCrear .= "Se creará el servicio nuevo ".$strDescripcionWyAp . " con el precio de $".$strPrecioWyAp
                                                       ." que necesita agregar el equipo ".$strDescripcionEdb." para empezar a facturar";
                        }
                    }
                    else
                    {
                        $strInfoServiciosXCrear .= "Se facturará el servicio nuevo ".$strDescripcionEdb . " con el precio de $".$strPrecioEdb;
                    }
                    
                    $strMensaje = "Al generar el cambio de plan, se facturarán nuevos servicios dual band. "
                                  ."Está seguro que desea realizar el cambio de plan?<br>"
                                  ."<b>Precio Plan Actual:</b> ".$floatPrecioPlanActual."<br>"
                                  ."<b>Precio Plan Nuevo:</b> ".$floatPrecioPlanNuevo."<br>"
                                  .$strInfoServiciosXCrear;
                }
            }
            
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus = "ERROR";
            error_log("No se ha podido realizar la verificación de los servicios respecto a los equipos dual band ".$e->getMessage());
        }
        $objJsonResponse->setData(array('status'                => $strStatus,
                                        'mensaje'               => $strMensaje,
                                        "necesitaConfirmacion"  => $strNecesitaConfirmacion));
        return $objJsonResponse;
    }

    /**
     * verificaIpWanCambioPlanAction
     * 
     * Función que verifica los planes pymes utilizados en el proceso de cambio de plan, esto es necesario
     * para saber si el cliente desea conservar la IP FIJA WAN que puede incluir el plan anterior.
     * 
     * Dentro del alcance inicial del proyecto Pyme sin Ip Fija solo se considera el escenario de cambio de planes PYME con IP -> Pyme sin IP,
     * es cambio de plan Pyme sin Ip > Pyme con Ip no está considerado en esta fase del proyecto, esto fue definido por el usuario.
     * 
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 23-10-2020
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 28-10-2020 - Se agrega parámetro (intIdPlanNuevo) con identificador de plan nuevo a utilizar en el proceso de cambio de plan
     * 
     * @return  Object  $objJsonResponse   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function verificaIpWanCambioPlanAction()
    {
        $objJsonResponse           = new JsonResponse();
        $objRequest                = $this->get('request');
        $objSession                = $objRequest->getSession();
        $intIdServicioInternet     = $objRequest->get('intIdServicioInternet');
        $intIdPlanNuevo            = $objRequest->get('intIdPlanNuevo');
        $emComercial               = $this->get('doctrine')->getManager('telconet');
        $serviceInternetProtegido  = $this->get('tecnico.InternetProtegido');
        $serviceUtil               = $this->get('schema.Util');
        $strMensaje                = "";
        $strMostrarConfirmacion    = "";
        $strPlanNuevoConIp         = "NO";
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioInternet);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontró información del servicio");
            }
            
            $objPlan = $objServicio->getPlanId();
            if (!is_object($objPlan))
            {
                throw new \Exception("El servicio no se encuentra asociado a un plan");
            }
            $intIdPlanActual = $objPlan->getId();
            $arrayRespuestaProdIp   = $serviceInternetProtegido
                                      ->verificaProductosEnPlan(array("intIdPlan"                => $intIdPlanActual,
                                                                      "strNombreTecnicoProducto" => "IP"));
            $strMostrarConfirmacion = $arrayRespuestaProdIp["strPlanTieneProducto"];
            $arrayRespuestaProdIpNuevo = $serviceInternetProtegido
                                         ->verificaProductosEnPlan(array("intIdPlan"                => $intIdPlanNuevo,
                                                                         "strNombreTecnicoProducto" => "IP"));
            $strPlanNuevoConIp = $arrayRespuestaProdIpNuevo["strPlanTieneProducto"];
            $strStatus = "OK";
        }
        catch (\Exception $ex)
        {
            $strStatus = "ERROR";
            $strMensaje = "Existieron problemas al validar la información de planes Pyme, favor notificar a Sistemas.";
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.verificaIpWanCambioPlanAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objRequest->getClientIp()
                                     );
        }
        $objJsonResponse->setData(array('strStatus'               => $strStatus,
                                        'strMensaje'              => $strMensaje,
                                        "strMostrarConfirmacion"  => $strMostrarConfirmacion,
                                        "strPlanNuevoConIp"       => $strPlanNuevoConIp));
        return $objJsonResponse;
    }
    
    /**
     * cortarServicioApWifiAction
     * 
     * Funcion que cambia el estado a In-Corte al servicio ApWifi
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 10-09-2018
     * @since 1.0
     * 
     * @return  Object  $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function cortarServicioApWifiAction()
    {
        $objRespuesta        = new JsonResponse();
        $objPeticion         = $this->get('request');
        $objSession          = $objPeticion->getSession();
        $strUsrCreacion      = $objSession->get('user');
        $strIpCreacion       = $objPeticion->getClientIp();
        $intIdServicio       = $objPeticion->get('idServicio');
        $intIdAccion         = $objPeticion->get('idAccion');
        $emComercial         = $this->get('doctrine')->getManager('telconet');
        $emSeguridad         = $this->get('doctrine')->getManager('telconet_seguridad');
        $serviceUtil         = $this->get('schema.Util');
        $strMensajeRespuesta = "ERROR";
        
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            
            $objAccion   = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la accion utilizada en el proceso");
            }
            
            $objServicio->setEstado("In-Corte");
            $emComercial->persist($objServicio);

            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($objServicio->getProductoId()->getDescripcionProducto().": Se corto el servicio");
            $objServicioHistorial->setEstado("In-Corte");
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorial);

            $emComercial->flush();
            $emComercial->getConnection()->commit();
            $strMensajeRespuesta = "OK";
        }
        catch(\Exception $ex)
        {
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            $emComercial->getConnection()->close();
            $strMensajeRespuesta = 'Se presentaron errores al Cortar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.cortarServicioApWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * reconectarServicioApWifiAction
     * 
     * Funcion que cambia el estado a Activo al servicio ApWifi
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 10-09-2018
     * @since 1.0
     * 
     * @return Object   $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function reconectarServicioApWifiAction()
    {
        $objRespuesta           = new JsonResponse();
        $objPeticion            = $this->get('request');
        $objSession             = $objPeticion->getSession();
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emSeguridad            = $this->get('doctrine')->getManager('telconet_seguridad');
        $intIdServicio          = $objPeticion->get('idServicio');
        $intIdAccion            = $objPeticion->get('idAccion');
        $strIpCreacion          = $objPeticion->getClientIp();
        $strUsrCreacion         = $objSession->get('user');
        $serviceUtil            = $this->get('schema.Util');
        $strMensajeRespuesta    = "ERROR";
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            
            $objAccion      = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la accion utilizada en el proceso");
            }
        
            $objServicio->setEstado("Activo");
            $emComercial->persist($objServicio);

            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($objServicio->getProductoId()->getDescripcionProducto().": Se reactivo el servicio");
            $objServicioHistorial->setEstado("Activo");
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorial);

            $emComercial->flush();
            $emComercial->getConnection()->commit();
            $strMensajeRespuesta = "OK";
        }
        catch(\Exception $ex)
        {
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            $emComercial->getConnection()->close();
            $strMensajeRespuesta = 'Se presentaron errores al Cortar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.reconectarServicioApWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * agregarEquipoApWifiAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Funcion que registra el equipo ApWifi del nuevo plan asignado al cliente
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 10-09-2018
     * @since 1.0
     * 
     * @return Object   $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function agregarEquipoApWifiAction()
    {
        $objRespuesta                   = new JsonResponse();
        $emComercial                    = $this->get('doctrine')->getManager('telconet');
        $emSeguridad                    = $this->get('doctrine')->getManager('telconet_seguridad');
        $objPeticion                    = $this->get('request');
        $objSession                     = $objPeticion->getSession();
        $strUsrCreacion                 = $objSession->get('user');
        $strEmpresaCod                  = $objSession->get('idEmpresa');
        $intIdServicio                  = $objPeticion->get('idServicio');
        $intIdAccion                    = $objPeticion->get('idAccion');
        $strIpCreacion                  = $objPeticion->getClientIp();
        $strSerieApWifi                 = $objPeticion->get('strSerieApWifi');
        $strModeloApWifi                = $objPeticion->get('strModeloApWifi');
        $strMacApWifi                   = $objPeticion->get('strMacApWifi');
        $intIdServicioInternet          = $objPeticion->get('intIdServicioInternet');
        $intIdSolicitudServicio         = $objPeticion->get('intIdSolicitudServicio');
        $serviceUtil                    = $this->get('schema.Util');
        $serviceConfirmarServicio       = $this->get('tecnico.InfoConfirmarServicio');
        $arrayPeticiones                = array();
        $strMensajeRespuesta            = "ERROR";
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            
            $objProdApWifiRenta = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                 ->findOneBy(array("descripcionProducto" => "Renta AP WIFI",
                                                                   "empresaCod"          => $strEmpresaCod, 
                                                                   "estado"              => "Activo"));
            if (!is_object($objProdApWifiRenta))
            {
                throw new \Exception("No se encontro información del producto Renta SmartWifi");
            }
            
            $arrayPeticiones['ojbServicio']                     = $objServicio;
            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
            $arrayPeticiones['objAccion']                       = $objAccion;
            $arrayPeticiones['objProducto']                     = $objProdApWifiRenta;
            $arrayPeticiones['strEmpresaCod']                   = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
            $arrayPeticiones['strSerieApWifi']                  = $strSerieApWifi;
            $arrayPeticiones['strModeloApWifi']                 = $strModeloApWifi;
            $arrayPeticiones['strMacApWifi']                    = $strMacApWifi;
            $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
            $arrayPeticiones['strEsCambioPlan']                 = 'SI';
                    
            $strStatus = $serviceConfirmarServicio->confirmarServicioApWifi($arrayPeticiones);
            
            if ($strStatus == "OK")
            {
                //validar el cierre de tareas 
                $strMensajeRespuesta = $strStatus;
            }
            else
            {
                throw new \Exception("Se presentaron errores al agregar el equipo del plan ApWifi");
            }            
        }
        catch(\Exception $ex)
        {
            $strMensajeRespuesta = 'Se presentaron errores al confirmar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.agregarEquipoApWifiAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    
    /**
     * @Secure(roles="ROLE_151-4637")
     * 
     * Funcion empleado por el producto Office 365 para reenvio de la licencia al correo y
     * mensaje de texto al cliente.
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 31-08-2016
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 - 26-03-2020 - Se envia el productoId que se obtiene del grid técnico.
     */
    public function reenviarInformacionOfficeAction()
    {
        $objResponse           = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
 
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();
        $strIpClient                = $objRequest->getClientIp();
        $intIdServicio              = $objRequest->get('idServicio');     
        $intIdDepartamento          = $objSession->get('idDepartamento');
        $strNombreProducto          = $objRequest->get('nombreProducto');
        $intProductoId              = $objRequest->get('productoId');
        $strUser                    = $objSession->get("user");
        $serviceUtil                = $this->get('schema.Util');
        $arrayPeticiones            = array();
        
        try
        {
            /* @var $serviceActivacion InfoActivarPuertoService */
            $serviceActivacion = $this->get('tecnico.InfoActivarPuerto');
            
            $arrayPeticiones['idServicio']         = $intIdServicio;
            $arrayPeticiones['idDepartamento']     = $intIdDepartamento;
            $arrayPeticiones['strIpClient']        = $strIpClient;
            $arrayPeticiones['strUsrCreacion']     = $strUser;
            $arrayPeticiones['strNombreProducto']  = $strNombreProducto;
            $arrayPeticiones['intProductoId']      = $intProductoId;
                    
            $arrayRespuesta = $serviceActivacion->reenviarInformacionOffice($arrayPeticiones);
            $strStatus      = $arrayRespuesta['status'];
            $strMensaje     = $arrayRespuesta['mensaje'];
            
            $strResultado = "{'status':'$strStatus','mensaje':'$strMensaje'}";
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->reenviarInformacionOfficeAction',
                                      $ex->getMessage(),
                                      $strUser,
                                      $strIpClient);
            $strResultado = "{'status':'ERROR','mensaje':'Problemas al reenviar información al cliente'}";
        }
        $objResponse->setContent($strResultado);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_151-313")
     * 
     * Funcion que cambia de estado a Cancel al servicio
     * adicional de Otros
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 16-10-2014
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 2.0 29-07-2015
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 3.0 27-10-2015 Se modifica proceso debido a creación de servicios
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 3.1 06-07-2016 Se agrega motivo de cancelacion de servicio
     * 
     * @author Edgar Holguín   <eholguin@telconet.ec>
     * @version 3.2 25-07-2018 Se agrega envoí del prefijo de la empresa en sesión.
     * 
     * @author Jonathan Mazón Sanchez  <jmazon@telconet.ec>
     * @version 3.3 28-09-2021 Se agrega envio del idPersonaEmpresaRol en sesión.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.4 01-08-2022 - Se agregan nuevos parámetros para la cancelación de los servicios SECURITY NG FIREWALL con cámaras safecity.
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 3.5 09-12-2022 - Se agrega el parametro idDepartamento
     */
    public function cancelarServicioOtrosAction()
    {
        $objRespuesta   = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest            = $this->get('request');
        $objSession            = $objRequest->getSession();
        $objPeticion           = $this->get('request');
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $intIdServicio         = $objPeticion->get('idServicio');
        $intIdAccion           = $objPeticion->get('idAccion');
        $intMotivoId        = $objPeticion->get('motivo');
        $intIdProducto      = $objPeticion->get('idProducto');
        $strLogin           = $objPeticion->get('login');
        $strSerie           = $objPeticion->get('serie')?$objPeticion->get('serie'):'';
        $strEsSerReqSafeCity = $objPeticion->get('esServicioRequeridoSafeCity')
                               ? $objPeticion->get('esServicioRequeridoSafeCity') : null;
        $strUserCreacion        = $objSession->get('user');
        $strIpUser           = $objRequest->getClientIp();
        $intIdEmpresa            = $objSession->get('idEmpresa');
        $intOficina            = $objSession->get('idOficina');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
        $intIdPersonaEmpresaRol = $objSession->get('idPersonaEmpresaRol');
        

        $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneById($intIdProducto);
        $objPersonaEmpresaRolUsr = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
        ->find($intIdPersonaEmpresaRol);
        $intDepartamentoId  = $objSession->get('idDepartamento');

        try
        {
            /* @var $cancelacionService InfoCancelarServicio */
            $cancelacionService = $this->get('tecnico.InfoCancelarServicio');
            $serviceInfoElemento = $this->get('tecnico.InfoElemento');
            $objServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
            
            $arrayPeticiones['idServicio']  = $intIdServicio;
            $arrayPeticiones['idEmpresa']   = $intIdEmpresa;
            $arrayPeticiones['idOficina']   = $intOficina;
            $arrayPeticiones['idAccion']    = $intIdAccion;
            $arrayPeticiones['idMotivo']    = $intMotivoId;
            $arrayPeticiones['usrCreacion'] = $strUserCreacion;
            $arrayPeticiones['clientIp']    = $strIpUser;
            $arrayPeticiones['strPrefijoEmpresa'] = $strPrefijoEmpresa;
            $arrayPeticiones['intIdPersonaEmpresaRol']  = $intIdPersonaEmpresaRol;
            $arrayPeticiones['booleanEliminarEnlaces']  = $strEsSerReqSafeCity === "S";
            $arrayPeticiones['idDepartamento'] = $intDepartamentoId;
                    
            $arrayRespuesta = $cancelacionService->cancelarServiciosOtros($arrayPeticiones);

            if($strSerie != '')
            {
                $arrayParametrosAuditoria["intIdPersona"]    = $objPersonaEmpresaRolUsr->getPersonaId()->getId();
                $arrayParametrosAuditoria["strNumeroSerie"]  = $strSerie;
                $arrayParametrosAuditoria["strEstadoTelcos"] = 'Eliminado';
                $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
                $arrayParametrosAuditoria["strEstadoActivo"] = 'Cancelado';
                $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
                $arrayParametrosAuditoria["strCodEmpresa"]   = "10";
                $arrayParametrosAuditoria["strTransaccion"]  = 'Cancelacion Servicio';
                $arrayParametrosAuditoria["intOficinaId"]    = 0;
                $arrayParametrosAuditoria["strLogin"]        = $strLogin;
                $arrayParametrosAuditoria["strUsrCreacion"]  = $strUserCreacion;
                $serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
    
    
                $arrayParametrosIngresoNaf["intIdEmpresa"]  = $intIdEmpresa;
                $arrayParametrosIngresoNaf["strSerie"]  = $strSerie;
                $arrayParametrosIngresoNaf["strUser"]  = $strUserCreacion;
                $arrayParametrosIngresoNaf["strIpUser"]  = $strIpUser;
                $serviceInfoElemento->ingresaRetiroNaf($arrayParametrosIngresoNaf);
            }



            $strStatus      = $arrayRespuesta['status'];
            $strMensaje     = $arrayRespuesta['mensaje'];
            
            if ($strStatus == "OK")
            {
                $objRespuesta->setContent("OK");
            }
            else
            {
                $objRespuesta->setContent($strMensaje);
            }                  
        }
        catch(\Exception $ex)
        {
            error_log("error principal: " . $ex->getMessage());
            $objRespuesta->setContent("");
        }
        return $objRespuesta;
    }
    
    /**
     * @Secure(roles="ROLE_151-311")
     * 
     * Funcion que cambia de estado a In-Corte al servicio
     * adicional de Otros
     * Se agrega funcionalidad McAfee
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 16-10-2014
     * @version 1.0 29-07-2015
     * @version 3.0 27-10-2015 Se modifica proceso debido a creación de servicios
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.1 09-08-2019 Se agrega el envío del parámetro strCodEmpresa a la función cortarServiciosOtros por cambios necesarios para
     *                          el corte de servicios con el producto I. PROTEGIDO MULTI PAID con tecnología Kaspersky
     * 
     */
    public function cortarServicioOtrosAction()
    {
        $respuestaProceso      = new Response();
        $respuestaProceso->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $peticion       = $this->get('request');
        $idServicio     = $peticion->get('idServicio');
        $idAccion       = $peticion->get('idAccion');
        $usrCreacion    = $session->get('user');
        $clientIp       = $request->getClientIp();
        $strCodEmpresa  = $session->get('idEmpresa');

        try
        {
            /* @var $cortarService InfoCortarServicioService */
            $cortarService = $this->get('tecnico.InfoCortarServicio');
            
            $arrayPeticiones['idServicio']  = $idServicio;
            $arrayPeticiones['idAccion']    = $idAccion;
            $arrayPeticiones['usrCreacion'] = $usrCreacion;
            $arrayPeticiones['clientIp']    = $clientIp;
            $arrayPeticiones['strCodEmpresa'] = $strCodEmpresa;
                  
            $respuestaArray = $cortarService->cortarServiciosOtros($arrayPeticiones);
            $strStatus      = $respuestaArray['status'];
            $strMensaje     = $respuestaArray['mensaje'];
            
            if ($strStatus == "OK")
            {
                $respuestaProceso->setContent("OK");
            }
            else
            {
                $respuestaProceso->setContent($strMensaje);
            }             
        }
        catch(\Exception $ex)
        {
            error_log("error principal: " . $ex->getMessage());
            $respuestaProceso->setContent("");
        }

        return $respuestaProceso;
    }

    /**
     * @Secure(roles="ROLE_151-315")
     * 
     * Funcion que cambia de estado a Activo al servicio
     * adicional de Otros
     * Se agrega funcionalidad McAfee
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.0 16-10-2014
     * @version 2.0 29-07-2015
     * @version 3.0 27-10-2015 Se modifica proceso debido a creación de servicios
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.1 09-08-2019 Se agrega el envío del parámetro strCodEmpresa a la función reactivarServiciosOtros por cambios necesarios para
     *                          reconectar servicios con el producto I. PROTEGIDO MULTI PAID con tecnología Kaspersky
     */
    public function reconectarServicioOtrosAction()
    {
        $respuestaProceso  = new Response();
        $respuestaProceso->headers->set('Content-Type', 'text/json');
        $request     = $this->get('request');
        $session     = $request->getSession();
        $peticion    = $this->get('request');
        $usrCreacion = $session->get('user');
        $idServicio  = $peticion->get('idServicio');
        $idAccion    = $peticion->get('idAccion');
        $clientIp    = $request->getClientIp();
        $strCodEmpresa  = $session->get('idEmpresa');
        try
        {
            /* @var $reconectarService InfoReconectarServicioService */
            $reconectarService = $this->get('tecnico.InfoReconectarServicio');
            
            $arrayPeticiones['idServicio']  = $idServicio;
            $arrayPeticiones['idAccion']    = $idAccion;
            $arrayPeticiones['usrCreacion'] = $usrCreacion;
            $arrayPeticiones['clientIp']    = $clientIp;
            $arrayPeticiones['strCodEmpresa'] = $strCodEmpresa;
            $respuestaArray = $reconectarService->reactivarServiciosOtros($arrayPeticiones);
            $strStatus      = $respuestaArray['status'];
            $strMensaje     = $respuestaArray['mensaje'];

            if ($strStatus == "OK")
            {
                $respuestaProceso->setContent("OK");
            }
            else
            {
                $respuestaProceso->setContent($strMensaje);
            }     
        }
        catch(\Exception $ex)
        {
            error_log("error principal: " . $ex->getMessage());
            $respuestaProceso->setContent("");
        }

        return $respuestaProceso;
    }

    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO NETLIFE CAM
     * ******************************************************
     */    
    /**
     * Funcion que cambia el estado a Activo al servicio
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0163-06-2014
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 19-01-2016 Se modifica Observacion de historial de servicios para Productos con nombreTecnico NETLIFECAM(Smart WiFi y NetlifeCam),
     *                         Se guarda en la observacion las descripcion del producto a procesar
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-09-2016 Se agrega el envío de correo al confirmar el servicio
     * 
     */
    public function confirmarServicioNetlifeCamAction(){
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $em             = $this->get('doctrine')->getManager('telconet');
        $emSeguridad    = $this->get('doctrine')->getManager('telconet_seguridad');
        $idServicio     = $request->get('idServicio');
        $idAccion       = $request->get('idAccion');
        $servicio       = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion         = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        $idEmpresa      = $session->get('idEmpresa');
        $prefijoEmpresa = $session->get('prefijoEmpresa');
        $empleadoSesion = $session->get('empleado');
        $strIpClient    = $request->getClientIp();
        $strUser        = $session->get('user');
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion($servicio->getProductoId()->getDescripcionProducto().": Se confirmo el servicio");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($strIpClient);
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        $arrayParametrosMail=array(
                                    "servicio"                      => $servicio,
                                    "prefijoEmpresa"                => $prefijoEmpresa,
                                    "empleadoSesion"                => $empleadoSesion,
                                    "idEmpresa"                     => $idEmpresa,
                                    "user"                          => $strUser,
                                    "ipClient"                      => $strIpClient
        );
        /* @var $confirmar InfoConfirmarServicio */
        $confirmar = $this->get('tecnico.InfoConfirmarServicio');
        $confirmar->envioMailConfirmarServicio($arrayParametrosMail);
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia el estado a Cancel al servicio
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0163-06-2014
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 19-01-2016 Se modifica Observacion de historial de servicios para Productos con nombreTecnico NETLIFECAM(Smart WiFi y NetlifeCam),
     *                         Se guarda en la observacion las descripcion del producto a procesar
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 06-11-2020 Se crea solicitud y se genera tarea automatica de retiro de equipo.
     * 
     * @author Modificado: Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.3 02-03-2020 se agrega que al cancelar el servicio se guarde el motivo.
     *
     * @author Modificado: Edgar Holguin <eholguin@telconet.ec>
     * @version 1.4 05-03-2021 Se agrega funcionalidad para ejecución de proceso de facturación por cancelación de servicio.
     *
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.5 28-09-2021 - Se agrega el flujo para la facturacion del producto EL CANAL DEL FUTBOL al ejecutar la cancelacion voluntaria.
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.10 07-09-2022 - Se modifican los parametros que se envian al proceso de Cancelación Voluntaria.
     * 
     * @author  Andre Lazo <alazo@telconet.ec>
     * @version 2.1 16-03-2023 - Se modifican vaidacion de prefijo empresa para que permita flujo pára Ecuanet EN.
     * 
     */
    public function cancelarServicioProdAdicionalAction()
    {
        $respuesta               = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request                 = $this->get('request');
        $session                 = $request->getSession();
        $strUsuario              = $session->get('user');
        $em                      = $this->get('doctrine')->getManager('telconet');
        $emSeguridad             = $this->get('doctrine')->getManager('telconet_seguridad');
        $emGeneral               = $this->get('doctrine')->getManager('telconet_general');
        $strCodEmpresa           = $session->get('idEmpresa');
        $intIdPersonaEmpresaRol  = $session->get('idPersonaEmpresaRol');
        $objRequest              = $this->get('request');
        $strUserIp               = $objRequest->getClientIp();
        $intIdServicio           = $objRequest->get('idServicio');
        $intIdAccion             = $objRequest->get('idAccion');
        $strMotivo               = $objRequest->get('strMotivo');//strMotivo
        $objMotivo               = $emGeneral->getRepository('schemaBundle:AdmiMotivo')->find($strMotivo);
        $objServicio             = $em->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $objAccion               = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
        $serviceCambPlanService  = $this->get('tecnico.InfoCambiarPlan');
        $strPrefijoEmpresa       = $session->get('prefijoEmpresa');
        $intIdDepartamentoOrigen = $session->get('idDepartamento');
        $strFacturar             = $objRequest->get('strFacturaCancelacion');
        $intNumeroTarea          = "";
        $arrayParametros         = array();
        
        $serviceUtil                = $this->get('schema.Util');
        $objCancelarServicioService = $this->get('tecnico.InfoCancelarServicio');
        
        $em->getConnection()->beginTransaction();   
        
        //servicio
        $objServicio->setEstado("Cancel");
        $em->persist($objServicio);

        //Si el motivo es erroneo
        if(!is_object($objMotivo))
        {
            $respuesta->setContent("MOTIVO ERRONEO");
            return $respuesta;
        }
        //historial del servicio
        $objServicioHistorial = new InfoServicioHistorial();
        $objServicioHistorial->setServicioId($objServicio);
        $objServicioHistorial->setObservacion($objServicio->getProductoId()->getDescripcionProducto().",<br/> Se cancelo el servicio.");
        $objServicioHistorial->setMotivoId($objMotivo->getId());
        $objServicioHistorial->setEstado("Cancel");
        $objServicioHistorial->setUsrCreacion($strUsuario);
        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
        $objServicioHistorial->setIpCreacion($strUserIp);
        $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
        $em->persist($objServicioHistorial);

        //******************************************CREAR SOLICITUD DE RETIRO DE EQUIPO*********************************************//
        //Se obtiene el objeto solicitud
        $objTipoSolicitud = $em->getRepository('schemaBundle:AdmiTipoSolicitud')
                               ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO",
                                                 "estado"               =>"Activo"));

        //Se graba el detalle solicitud
        $objInfoDetalleSolicitud = new InfoDetalleSolicitud();
        $objInfoDetalleSolicitud->setServicioId($objServicio);
        $objInfoDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
        $objInfoDetalleSolicitud->setEstado("AsignadoTarea");
        $objInfoDetalleSolicitud->setUsrCreacion($session->get('user'));
        $objInfoDetalleSolicitud->setFeCreacion(new \DateTime('now'));
        $objInfoDetalleSolicitud->setObservacion("SOLICITA RETIRO DE EQUIPO POR CANCELACION DEL SERVICIO");
        $em->persist($objInfoDetalleSolicitud);

        //Se graba el historial de la solicitud
        $objInfoDetalleSolHist = new InfoDetalleSolHist();
        $objInfoDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
        $objInfoDetalleSolHist->setEstado("AsignadoTarea");
        $objInfoDetalleSolHist->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE EQUIPO POR CANCELACION DEL SERIVICIO");
        $objInfoDetalleSolHist->setUsrCreacion($strUsuario);
        $objInfoDetalleSolHist->setFeCreacion(new \DateTime('now'));
        $objInfoDetalleSolHist->setIpCreacion($strUserIp);
        $em->persist($objInfoDetalleSolHist);

        //Se graba la serie del equipo a retirar como caracteristica de la solicitud
        $objAdmiCaractElementoCliente = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                           ->findOneBy(array("descripcionCaracteristica" => 'ELEMENTO CLIENTE',
                                                             "estado"                    => "Activo"));

        $objSolRetiroEquipoCaract = new InfoDetalleSolCaract();

        if(is_object($objAdmiCaractElementoCliente))
        {
            $objSolRetiroEquipoCaract->setCaracteristicaId($objAdmiCaractElementoCliente);
        }

        //Se consulta la serie en el elemento cliente del servicio a retirar
        $objServicioTecnico   = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array("servicioId" => $objServicio->getId()));
        $intElementoClienteId = "";

        if (is_object($objServicioTecnico) && $objServicioTecnico->getElementoClienteId())
        {
            $intElementoClienteId = $objServicioTecnico->getElementoClienteId();

            $objSolRetiroEquipoCaract->setDetalleSolicitudId($objInfoDetalleSolicitud);
            $objSolRetiroEquipoCaract->setValor($intElementoClienteId);
            $objSolRetiroEquipoCaract->setEstado("AsignadoTarea");
            $objSolRetiroEquipoCaract->setUsrCreacion($strUsuario);
            $objSolRetiroEquipoCaract->setFeCreacion(new \DateTime('now'));
            $em->persist($objSolRetiroEquipoCaract);
            $em->flush();
            //******************************************CREAR SOLICITUD DE RETIRO DE EQUIPO*********************************************//

            //******************************************CREACION DE TAREA AUTOMATICA*********************************************//
            //1ero.- Se obtiene el nombre de la tarea
            $objProceso = $em->getRepository('schemaBundle:AdmiProceso')->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");

            if (is_object($objProceso))
            {
                $arrayTareas  = $em->getRepository('schemaBundle:AdmiTarea')->findTareasActivasByProceso($objProceso->getId());
                $objTarea     = $arrayTareas[0];

                if(is_object($objTarea))
                {
                    $intIdTarea = $objTarea->getId();
                }
            }

            //2do.- Se obtiene el punto del servicio
            if(is_object($objServicio))
            {
                $objInfoPunto = $objServicio->getPuntoId();
            }

            //Consultar el idPersona
            $objInfoPersonaEmpresaRol = $em->getRepository("schemaBundle:InfoPersonaEmpresaRol")->find($intIdPersonaEmpresaRol);

            if(is_object($objInfoPersonaEmpresaRol))
            {
                if(is_object($objInfoPersonaEmpresaRol->getPersonaId()))
                {
                    $intIdPersona       = $objInfoPersonaEmpresaRol->getPersonaId()->getId();
                    $strNombrePerAsigna = $objInfoPersonaEmpresaRol->getPersonaId()->getNombres()." ".
                                          $objInfoPersonaEmpresaRol->getPersonaId()->getApellidos();
                }

                //Se obtiene el deparamento del responsable
                $objAdmiDepartamento = $em->getRepository("schemaBundle:AdmiDepartamento")->find($objInfoPersonaEmpresaRol->getDepartamentoId());

                if(is_object($objAdmiDepartamento))
                {
                    $arrayParametros["objDepartamento"] = $objAdmiDepartamento;
                }
            }

            $arrayParametros["strObservacion"]         = "Generacion de tarea de retiro de equipo por cancelacion de servicio NETLIFECAM";
            $arrayParametros["intTarea"]               = $intIdTarea;
            $arrayParametros["strTipoAfectado"]        = "Cliente";
            $arrayParametros["objPunto"]               = $objInfoPunto;
            $arrayParametros["strEmpresaCod"]          = $strCodEmpresa;
            $arrayParametros["strPrefijoEmpresa"]      = $strPrefijoEmpresa;
            $arrayParametros["strUsrCreacion"]         = $strUsuario;
            $arrayParametros["strIpCreacion"]          = $strUserIp;
            $arrayParametros["intDetalleSolId"]        = $objInfoDetalleSolicitud->getId();
            $arrayParametros["intDepartamentoOrigen"]  = $intIdDepartamentoOrigen;
            $arrayParametros["strBanderaTraslado"]     = "S";
            $arrayParametros["strRegion"]              = "";
            $arrayParametros["strIdPersonaAsig"]       = $intIdPersona;
            $arrayParametros["strNombrePersonaAsig"]   = $strNombrePerAsigna;
            $arrayParametros["strIdPerRolAsig"]        = $intIdPersonaEmpresaRol;
            $arrayParametros["objDepartamento"]        = $objAdmiDepartamento;

            $intNumeroTarea = $serviceCambPlanService->crearTareaRetiroEquipoPorDemo($arrayParametros);
            //******************************************CREACION DE TAREA AUTOMATICA*********************************************//
        }

        $em->flush();
        $em->getConnection()->commit();        

        $respuesta->setContent("OK");
        if( ($strPrefijoEmpresa === 'MD' || $strPrefijoEmpresa === 'EN') && $strFacturar==='S' && $respuesta->getContent() === 'OK')
        {
            $arrayParamsFacturarion = array( 'intIdServicio'           => $objRequest->get('idServicio'),
                                             'floatSubtotal'           => $objRequest->get('floatSubtotal'),
                                             'floatEquipos'            => $objRequest->get('floatEquipos'),
                                             'floatInstalacion'        => $objRequest->get('floatInstalacion'),                
                                             'floatSubtotalnc'         => $objRequest->get('floatSubtotalnc'),
                                             'strCaracteristicas'      => $objRequest->get('strCaracteristicas'),
                                             'strIpCliente'            => $objRequest->getClientIp(),
                                             'intIdPersonaEmpresaRol'  => $intIdPersonaEmpresaRol,
                                             'strPrefijoEmpresa'       => $strPrefijoEmpresa,
                                             'strEmpresaCod'           => $strCodEmpresa,
                                             'strUsrCreacion'          => $strUsuario,
                                             'serviceUtil'             => $serviceUtil,
                                             'floatSubtotalNDI'        => $objRequest->get('floatSubtotalNDI'),
                                             'strCreaNC'               => $objRequest->get('strCreaNC'),
                                             'arrayGeneralDescuentos'  => $objRequest->get('arrayGeneralDescuentos'),
                                             'arrayGeneralProdFacturar'=> $objRequest->get('arrayGeneralProdFacturar')
                
                                           );
                                        
            $objCancelarServicioService->ejecutarFacturacionCancelacion($arrayParamsFacturarion);  

            $arrayParamsHistorialFact = array( 'intIdServicio'  => $objRequest->get('idServicio'),
                                               'intIdMotivo'    => $objRequest->get('motivoCancelacion'),
                                               'strObservacion' => $objRequest->get('observacion'),
                                               'strEmpresaCod'  => $strCodEmpresa,
                                               'strUsrCreacion' => $strUsuario,
                                               'strIpCliente'   => $objRequest->getClientIp(),
                                               'serviceUtil'    => $serviceUtil,
                                               'strFacturable'  => $strFacturar,            
                                             );

            $objCancelarServicioService->addHistorialFacturacion($arrayParamsHistorialFact);
        }
        
        return $respuesta;
    }
                
    /**
     * Funcion que cambia el estado a In-Corte al servicio
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0163-06-2014
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 19-01-2016 Se modifica Observacion de historial de servicios para Productos con nombreTecnico NETLIFECAM(Smart WiFi y NetlifeCam),
     *                         Se guarda en la observacion las descripcion del producto a procesar
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 06-11-2020 Se modifica la observacion del historial del servicio.
     *
     */
    public function cortarServicioNetlifeCamAction(){
        $respuesta   = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request     = $this->get('request');
        $session     = $request->getSession();
        $em          = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa     = $session->get('idEmpresa');
        $peticion    = $this->get('request');
        $idServicio  = $peticion->get('idServicio');
        $idAccion    = $peticion->get('idAccion');
        $servicio    = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion      = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("In-Corte");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion($servicio->getProductoId()->getDescripcionProducto().",<br/> Se corto el servicio.");
        $servicioHistorial->setEstado("In-Corte");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    /**
     * Funcion que cambia el estado a Activo al servicio
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0163-06-2014
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 19-01-2016 Se modifica Observacion de historial de servicios para Productos con nombreTecnico NETLIFECAM(Smart WiFi y NetlifeCam),
     *                         Se guarda en la observacion las descripcion del producto a procesar
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 06-11-2020 Se modifica la observacion del historial del servicio.
     *
     */
    public function reconectarServicioNetlifeCamAction(){
        $respuesta   = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request     = $this->get('request');
        $session     = $request->getSession();
        $em          = $this->get('doctrine')->getManager('telconet');
        $emSeguridad = $this->get('doctrine')->getManager('telconet_seguridad');
        $empresa     = $session->get('idEmpresa');
        $peticion    = $this->get('request');
        $idServicio  = $peticion->get('idServicio');
        $idAccion    = $peticion->get('idAccion');
        $servicio    = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $accion      = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($idAccion);
        
        $em->getConnection()->beginTransaction();
        
        //servicio
        $servicio->setEstado("Activo");
        $em->persist($servicio);
        
        //historial del servicio
        $servicioHistorial = new InfoServicioHistorial();
        $servicioHistorial->setServicioId($servicio);
        $servicioHistorial->setObservacion($servicio->getProductoId()->getDescripcionProducto().",<br/> Se reactivo el servicio.");
        $servicioHistorial->setEstado("Activo");
        $servicioHistorial->setUsrCreacion($session->get('user'));
        $servicioHistorial->setFeCreacion(new \DateTime('now'));
        $servicioHistorial->setIpCreacion($peticion->getClientIp());
        $servicioHistorial->setAccion ($accion->getNombreAccion());
        $em->persist($servicioHistorial);
        
        $em->flush();
        $em->getConnection()->commit();
        
        $respuesta->setContent("OK");
        
        return $respuesta;
    }
    
    
     /**
     * Funciones Extras
     *
     * @author Desarrollo Inicial
     * @version 1.0
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 11-04-2017 - Se realizaron ajustes para registrar en el historial del servicio la acción de 'confirmarServicio' o
     *                           ingresar en la observación 'Se confirmo el servicio'
     */
    public function cambiarEstadoClienteAction(){
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $arrayParametros    = array();    
        $strExisteHistorial = "";
        $serviceComercial   = $this->get('comercial.Comercial');        
                        
        $peticion = $this->get('request');
        $session  = $peticion->getSession();
        $idServicio = $peticion->get('idServicio');
        $servicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        
        $emComercial->getConnection()->beginTransaction();
        $estado = $servicio->getEstado();
        
        if($estado=="In-Corte" || $estado=="In-Corte-SinEje"){
            //historial del servicio
            $servicioHistorial = new InfoServicioHistorial();
            $servicioHistorial->setServicioId($servicio);
            $servicioHistorial->setObservacion("Se reactivo el servicio");
            $servicioHistorial->setEstado("Activo");
            $servicioHistorial->setUsrCreacion($session->get('user'));
            $servicioHistorial->setFeCreacion(new \DateTime('now'));
            $servicioHistorial->setIpCreacion($peticion->getClientIp());
            $emComercial->persist($servicioHistorial);
            
            $servicio->setEstado("Activo");
        }
        else if($estado=="Cancel"){
            //historial del servicio
            $servicioHistorial = new InfoServicioHistorial();
            $servicioHistorial->setServicioId($servicio);
            $servicioHistorial->setObservacion("Se corto el servicio, se cancela al cliente como paso intermedio para cortar el servicio.");
            $servicioHistorial->setEstado("In-Corte");
            $servicioHistorial->setUsrCreacion($session->get('user'));
            $servicioHistorial->setFeCreacion(new \DateTime('now'));
            $servicioHistorial->setIpCreacion($peticion->getClientIp());
            $emComercial->persist($servicioHistorial);
            
            $servicio->setEstado("In-Corte");
        }
        else if($estado=="Activo" || $estado=="Pre-cancelado"){
            
            //revisar si es el ultimo servicio en el punto
            $punto = $servicio->getPuntoId();
            $servicios = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(array( "puntoId" => $punto->getId()));
            $numServicios = count($servicios);
            $cont = 0;
            for($i=0;$i<count($servicios);$i++){
                $servicio1 = $servicios[$i];
                if($servicio1=="Cancel" || $servicio1=="Cancel-SinEje"){
                    $cont++;
                }
            }
            
            if($cont == ($numServicios-1)){
                //print("eliminar punto");
                $punto->setEstado("Cancelado");
            }
            $emComercial->persist($punto);
            $emComercial->flush();
            
            //revisar los puntos si estan todos Cancelados
            $personaEmpresaRol = $punto->getPersonaEmpresaRolId();
            $puntos = $emComercial->getRepository('schemaBundle:InfoPunto')->findBy(array( "personaEmpresaRolId" => $personaEmpresaRol->getId()));
            $numPuntos = count($puntos);
            $contPuntos = 0;
            for($i=0;$i<count($puntos);$i++){
                $punto1 = $puntos[$i];
                
                if($punto1->getEstado()=="Cancelado"){
                    $contPuntos++;
                }
            }
            
            if(($numPuntos) == $contPuntos){
                //se cancela el contrato
                $contrato = $emComercial->getRepository('schemaBundle:InfoContrato')->findOneBy(array( "personaEmpresaRolId" => $personaEmpresaRol->getId()));
                $contrato->setEstado("Cancelado");
                
                //se cancela el personaEmpresaRol
                $personaEmpresaRol->setEstado("Cancelado");
                
                //se cancela el cliente
                $persona = $personaEmpresaRol->getPersonaId();
                $persona->setEstado("Cancelado");
                
                $emComercial->persist($contrato);
                $emComercial->persist($personaEmpresaRol);
                $emComercial->persist($persona);
                $emComercial->flush();
            }
            
            //historial del servicio
            $servicioHistorial = new InfoServicioHistorial();
            $servicioHistorial->setServicioId($servicio);
            $servicioHistorial->setObservacion("Se cancelo el servicio");
            $servicioHistorial->setEstado("Cancel");
            $servicioHistorial->setUsrCreacion($session->get('user'));
            $servicioHistorial->setFeCreacion(new \DateTime('now'));
            $servicioHistorial->setIpCreacion($peticion->getClientIp());
            $emComercial->persist($servicioHistorial);
            $emComercial->flush();
            
            $servicio->setEstado("Cancel");
        }
        else if($estado=="Pendiente"){
            //historial del servicio
            $servicioHistorial = new InfoServicioHistorial();
            $servicioHistorial->setServicioId($servicio);
            $servicioHistorial->setObservacion("Se activo el servicio");
            $servicioHistorial->setEstado("Activo");
           
            if($session->get('prefijoEmpresa') === 'TN')
            {
                $arrayParametros["strCaracteristica"] = 'FACTURACION_PROPORCIONAL';
                $arrayParametros["strUser"]           = $session->get('user');
                $arrayParametros["strIpUser"]         = $peticion->getClientIp();

                if(is_object($servicio))
                {
                    $arrayParametros["intServicioId"] = $servicio->getId();
                }                    

                //Se llama al service para validar si este producto necesita que se le ingrese la accion o la observacion 
                //que confirma la activación del servicio
                $strExisteHistorial = $serviceComercial->validarFrecuenciaRecurrente($arrayParametros);

                if($strExisteHistorial == "N")
                {
                    $servicioHistorial->setAccion('confirmarServicio');
                }                    
            }

            $servicioHistorial->setUsrCreacion($session->get('user'));
            $servicioHistorial->setFeCreacion(new \DateTime('now'));
            $servicioHistorial->setIpCreacion($peticion->getClientIp());
            $emComercial->persist($servicioHistorial);
            $emComercial->flush();
            
            $servicio->setEstado("Activo");
            
        }
        
        $emComercial->persist($servicio); 
        
        
        
        $emComercial->flush();
        $emComercial->getConnection()->commit();
        
        $result = "OK";
        
        return $respuesta->setContent($result);
    }
    
    
    /**
     * @Secure(roles="ROLE_151-2277")
     * Funcion que sirve para reversar la solicitud de migración
     * 
     * @author Creado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 13-03-2015
     */
    public function reversarSolicitudMigraAction()
    {
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion       = $this->get('request');
        $emComercial    = $this->get('doctrine')->getManager('telconet');
        $intIdServicio  = $peticion->get('idServicio');
        
        
        $pv_mensajeerror  = str_repeat(' ', 2000);
        $sql              = "BEGIN comp_reservar_solicitud_migra(:idServicioParam, :mensajeSalidaParam); END;";
        $stmt             = $emComercial->getConnection()->prepare($sql);
        $stmt->bindParam('idServicioParam', $intIdServicio);
        $stmt->bindParam('mensajeSalidaParam', $pv_mensajeerror);
        $stmt->execute();
        if(strlen(trim($pv_mensajeerror)) > 0)
        {
            $mensajeResponse = $pv_mensajeerror;
        }
        else
        {
            $mensajeResponse = 'OK';
        }
        
        return $respuesta->setContent($mensajeResponse);
    }
    
    /**
     * Funcion que sirve para reversar la solicitud de migración
     * 
     * @author Creado: John Vera <javera@telconet.ec>
     * @version 1.0 02-08-2016
     * 
     * @author Creado: Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 15-08-2016 - Se modifica para que solo muestre puertos wan al momento de realizar cambio de CPE
     * 
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.2 2016-09-12 - Considerar las interfaces tipo Wan verificando el NOMBRE_TIPO_INTERFACE
     *                           Para los modelos de equipos ROUTER se inicia en 0 las interfaces
     * 
     * @author Modificado: John Vera <javera@telconet.ec>
     * @version 1.3 07-11-2016 Se requiere aumentar para que aparezcan las interfaces de los elementos radio
     *
     * @author Modificado: Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.4 2016-11-22 - Se recibe información de elemento anterior para determinar de que tipo de elemento proviene el cambio
     */
    public function getInterfacesPorModeloAction()
    {
        $respuesta           = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion            = $this->get('request');
        $strModelo           = $peticion->get('modeloElemento');
        $intElementoAnterior = $peticion->get('idElementoAnterior');
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        $arrayInterfaces     = array();
        $intTotal            = 0;

        try
        {
            $arrayQuery = array("nombreModeloElemento" => $strModelo, 
                                "estado"               => "Activo");
            
            if($intElementoAnterior>0)
            {
                $objElementoAnterior = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intElementoAnterior);
                
                if(is_object($objElementoAnterior))
                {
                    $arrayQuery = array("nombreModeloElemento" => $strModelo,
                                        "tipoElementoId"       => $objElementoAnterior->getModeloElementoId()->getTipoElementoId()->getId(),
                                        "estado"               => "Activo");
                }
            }            
            
            $objModeloElementoCliente = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->findOneBy($arrayQuery);

            //buscar el interface Modelo
            $arrayInterfaceModelo = $emInfraestructura->getRepository('schemaBundle:AdmiInterfaceModelo')
                                                      ->findBy(array( "modeloElementoId" =>$objModeloElementoCliente->getId()));

            foreach($arrayInterfaceModelo as $objInterfaceModelo)
            {
                $cantidadInterfaces = $objInterfaceModelo->getCantidadInterface();
                $formato            = $objInterfaceModelo->getFormatoInterface();

                if($objInterfaceModelo->getTipoInterfaceId() && ($objInterfaceModelo->getTipoInterfaceId()->getNombreTipoInterface() == 'Wan' ||
                                                                 $objInterfaceModelo->getTipoInterfaceId()->getNombreTipoInterface() == 'Wireless'))
                {
                    //Para iniciar en 0 para los modelos de ROUTER
                    $ini = ($objModeloElementoCliente->getTipoElementoId()->getNombreTipoElemento()=='ROUTER')? 0 : 1;
                    for($i = $ini; $i < ($cantidadInterfaces+$ini); $i++)
                    {
                        $format = explode("?", $formato);
                        $nombreInterfaceElemento = $format[0].$i;
                        $arrayInterfaces[] = array('nombreInterface'    => $nombreInterfaceElemento);
                    }
                }
            }
            $intTotal = count($arrayInterfaces);
        }
        catch(\Exception $ex)
        {
            error_log("ERROR en getInterfacesPorModeloAction(): ".$ex->getMessage());
        }
        
        $arrResultado = array('total'       => $intTotal,
                              'encontrados' => $arrayInterfaces);
        
        return $respuesta->setContent(json_encode($arrResultado));
    }
    
    /**
     * @Secure(roles="ROLE_151-3837")
     * 
     * Documentación para el método 'generarActaEntregaRecepcionPdfAction'.
     *
     * Método utilizado para generar el formato del acta de entrega recepcion en pdf
     *
     * @return Response response
     *
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.0 06-04-2016
     */    
    public function generarActaEntregaRecepcionPdfAction()
    {
        $objRequest             = $this->get('request'); 
        $objSession             = $objRequest->getSession(); 
        $intIdEmpresaSession    = $objSession->get('idEmpresa') ? $objSession->get('idEmpresa') : 0; 
        $intIdOficinaSession    = $objRequest->getSession()->get('idOficina');
        $objClienteSesion       = $objSession->get('cliente');   
        $intIdServicio          = $objRequest->query->get('idServicio');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $objServicio            = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $strPathTelcos          = $this->container->getParameter('path_telcos');
        $strUrlLogo             = $strPathTelcos."telcos/web/public/images/logo_telconet.jpg";
        $arrayDatos = array();
        $arrayDatos['cliente']                  = "";
        $arrayDatos['login']                    = "";
        $arrayDatos['ciudad']                   = "";
        $arrayDatos['vendedor']                 = "";
        $arrayDatos['direccion']                = ""; 
        $arrayDatos['numeracion']               = "";
        $arrayDatos['ip']                       = "";
        $arrayDatos['mac']                      = "";
        $arrayDatos['numeracion']               = "";
        $arrayDatos['bw_up']                    = "";
        $arrayDatos['bw_down']                  = "";   
        $arrayDatos['descripcion_punto']        = "";             
        $arrayDatos['contactosTelefonosFijos']  = "";
        $arrayDatos['contacto']                 = ""; 
        $arrayDatos['fecha']                    = date("Y-m-d");
        $arrayDatos['urlLogo']                  = $strUrlLogo;

        if($objServicio)
        {
            $objInfoPunto = $emComercial->getRepository('schemaBundle:InfoPunto')->find($objServicio->getPuntoId()->getId());

            if($objInfoPunto)
            {
                $objEmpresaRol          = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                      ->find($objInfoPunto->getPersonaEmpresaRolId()->getId()); 
                $objVendedor            = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                      ->findOneBy(array( "login" => trim($objInfoPunto->getUsrVendedor())));
                $objAdmiJurisdiccion    = $emInfraestructura->getRepository('schemaBundle:AdmiJurisdiccion')
                                                            ->find($objInfoPunto->getPuntoCoberturaId()->getId());

                $arrayDatos['login']             = $objInfoPunto->getLogin();
                $arrayDatos['direccion']         = $objInfoPunto->getDireccion();
                $arrayDatos['descripcion_punto'] = $objInfoPunto->getDescripcionPunto();

                if($objVendedor)
                {
                    $arrayDatos['vendedor'] = $objVendedor->getNombres().' '.$objVendedor->getApellidos();
                }                   
            }
            $objInfoPersona         = $emComercial->getRepository('schemaBundle:InfoPersona')->find($objEmpresaRol->getPersonaId()->getId());

            $objInfoOficinaGrupo    = $emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                                                  ->find($objAdmiJurisdiccion->getOficinaId());
            $objAdmiCanton          = $emGeneral->getRepository('schemaBundle:AdmiCanton')->find($objInfoOficinaGrupo->getCantonId());

            if($objInfoPersona)
            {
                if(trim($objInfoPersona->getTipoTributario())=='NAT')
                {
                    $arrayDatos['cliente'] = $objInfoPersona->getNombres().' '.$objInfoPersona->getApellidos();
                }
                else if(trim($objInfoPersona->getTipoTributario())=='JUR')
                {
                  $arrayDatos['cliente'] = $objInfoPersona->getRazonSocial(); 
                }                    

            }
            $objInfoIp = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array( "servicioId" => $intIdServicio, 
                                                                                                    "tipoIp"     => "WAN"
                                                                                                   )
                                                                                             );
            $arrayDatos['ip']= ($objInfoIp)?$objInfoIp->getIp():"";

            $objCaracteristicaMac = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array( "descripcionCaracteristica" => "MAC"));
            if($objCaracteristicaMac && $objServicio->getProductoId()!=null)
            {
                $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId()->getId());

                $objProdCaracteristicaMac = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array( "productoId"       => $objProducto->getId(), 
                                                                           "caracteristicaId" => $objCaracteristicaMac->getId()
                                                                         )
                                                                   );
                if($objProdCaracteristicaMac)
                {
                    $objInfoServicioProdCaractMac = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                     ->findOneBy(array( "servicioId"                => $objServicio->getId(), 
                                                                        "productoCaracterisiticaId" => $objProdCaracteristicaMac->getId()
                                                                      )
                                                                );
                    $arrayDatos['mac']= ($objInfoServicioProdCaractMac)?$objInfoServicioProdCaractMac->getValor():""; 
                }
            }
            $objCaracteristicaCap1 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array( "descripcionCaracteristica" => "CAPACIDAD1"));                
            if($objCaracteristicaCap1 && $objServicio->getProductoId()!=null)
            {
                $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId()->getId());

                $objProdCaracteristicaCap1 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array( "productoId"       => $objProducto->getId(), 
                                                                           "caracteristicaId" => $objCaracteristicaCap1->getId()
                                                                         )
                                                                   );
                if($objProdCaracteristicaCap1!=null)
                {
                    $objInfoServicioProdCaractCap1 = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                     ->findOneBy(array( "servicioId"                => $objServicio->getId(), 
                                                                        "productoCaracterisiticaId" => $objCaracteristicaCap1->getId()
                                                                      )
                                                                );
                    $arrayDatos['bw_up']= ($objInfoServicioProdCaractCap1)?$objInfoServicioProdCaractCap1->getValor():""; 
                }
            }                
            $objCaracteristicaCap2 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array( "descripcionCaracteristica" => "CAPACIDAD2"));                
            if($objCaracteristicaCap2 && $objServicio->getProductoId()!=null)
            {
                $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId()->getId());

                $objProdCaracteristicaCap2 = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array( "productoId"       => $objProducto->getId(), 
                                                                           "caracteristicaId" => $objCaracteristicaCap2->getId()
                                                                         )
                                                                   );
                if($objProdCaracteristicaCap2!=null)
                {
                    $objInfoServicioProdCaractCap2 = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                     ->findOneBy(array( "servicioId"                => $objServicio->getId(), 
                                                                        "productoCaracterisiticaId" => $objCaracteristicaCap2->getId()
                                                                      )
                                                                );
                    $arrayDatos['bw_down']= ($objInfoServicioProdCaractCap2)?$objInfoServicioProdCaractCap2->getValor():""; 
                }
            }              

        }

        $arrayContactosTelefonosFijos = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                             ->findContactosByLoginAndFormaContacto(trim($arrayDatos['login']), 'Telefono Fijo');

        $arrayDatos['contactosTelefonosFijos'] = $arrayContactosTelefonosFijos[0]['valor'];
        $arrayDatos['ciudad']                  = $objAdmiCanton->getNombreCanton();

        $intIdCliente = $objClienteSesion['id']; 

        $objContactoTecnico =$emComercial->getRepository('schemaBundle:InfoPersonaContacto')
                                         ->getResultadoTipoContactosPorCliente($intIdEmpresaSession,$intIdCliente,'Contacto Tecnico');
        if($objContactoTecnico)
        {
            $arrayDatos['contacto'] = $objContactoTecnico->getNombres().' '.$objContactoTecnico->getApellidos();
        }

        // Obtener la numeracion de la tabla admi_numeracion
        $strSecuenciaAsig  = null;
        $objAdmiNumeracion = $emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                         ->findByEmpresaYOficina($intIdEmpresaSession, $intIdOficinaSession, 'ACT');

        if($objAdmiNumeracion!=null)
        {
            $strSecuenciaAsig  = str_pad($objAdmiNumeracion->getSecuencia(), 7, "0", STR_PAD_LEFT);
            $strNumeroActa     = $objAdmiNumeracion->getNumeracionUno() . "-" . $objAdmiNumeracion->getNumeracionDos() .
                                 "-" . $strSecuenciaAsig;
            $arrayDatos['numeracion'] = "ACT-".$strNumeroActa; 
            // Actualizo la numeracion de la secuencia de actas en la tabla
            $intNumeroAct = ($objAdmiNumeracion->getSecuencia() + 1);
            $objAdmiNumeracion->setSecuencia($intNumeroAct);
            $emComercial->persist($objAdmiNumeracion);
            $emComercial->flush();

        }          



        $html = $this->renderView('tecnicoBundle:InfoServicio:actaEntregaRecepcion.html.twig', array('arrayDatos'=>$arrayDatos));
        return new Response($this->get('knp_snappy.pdf')->getOutputFromHtml($html),200,
                            array('Content-Type'          => 'application/pdf',
                                  'Content-Disposition'   => 'attachment; filename=AER-'.trim($arrayDatos['login']).'-'.
                                                                                         $arrayDatos['fecha'].'.pdf',
                                 )
                            );                    
    }
    
    /**
     * Funcion que sirve para obtener la trazabilidad de interfaces del elemento
     * 
     * @author Creado: John Vera <javera@telconet.ec>
     * @version 1.0 09-04-2015
     */    
    public function getTrazabilidadInterfaceElementoAction()
    {
        $respuesta                      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $peticion                       = $this->get('request');
        $interfaceElementoSplitterId    = $peticion->get('interfaceElementoSplitterId');
        $tipoElementoPadre              = $peticion->get('tipoElementoPadre');

        $em = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        $ruta = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                   ->getTrazabilidadInterfaceElemento($interfaceElementoSplitterId,$tipoElementoPadre);

        $arrayRuta = explode(';', $ruta);

        if(count($arrayRuta) > 1)
        {
            foreach($arrayRuta as $registro)
            {
                $arrayRegistro = explode(',', $registro);

                $arrayTraza[] = array(  'idElemento'        => $arrayRegistro[0],
                                        'tipoElemento'      => $arrayRegistro[1],
                                        'nombreElemento'    => $arrayRegistro[2],
                                        'nombreInterface'   => $arrayRegistro[3]);
            }
            $data=json_encode($arrayTraza);
            $resultado = "{'status':'OK','mensaje':$data}";
        }
        else
        {
            $resultado = "{'status':'ERROR','mensaje':'$ruta'}";
        }

        $respuesta->setContent($resultado);

        return $respuesta;
    }

    /**
     * @Secure(roles="ROLE_151-831")
     *
     * Documentación para el método 'ajaxGetAsPrivadoAction'.
     *
     * Método utilizado para obtener el as privado de un cliente en session
     *
     * @return Response response
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 10-01-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 26-08-2018 - Se agrega bloque que obtiene el as privado configurado dentro de servicios de INTMPLS
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 22-03-2021 Se abre la programacion para servicios Internet SDWAN
    */
    public function ajaxGetAsPrivadoAction()
    {
        $objResponse              = new Response();
        $objRequest               = $this->get('request');
        $intAsPrivado             = 0;
        $servicioTecnicoService   = $this->get('tecnico.InfoServicioTecnico');
        $intIdPersonaEmpresaRol   = $objRequest->get('idPersonaEmpresaRol');
        $strNombreTecnico         = $objRequest->get('producto');
        $intIdServicio            = $objRequest->get('idServicio');
        $emComercial              = $this->get('doctrine')->getManager();

        if(!empty($strNombreTecnico) && ($strNombreTecnico == 'INTMPLS' || $strNombreTecnico == 'INTERNET SDWAN'))
        {
            $objServicio = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
            
            if(is_object($objServicio))
            {
                $objServProdAsPrivado = $servicioTecnicoService->getServicioProductoCaracteristica($objServicio,
                                                                                                    'AS_PRIVADO',
                                                                                                    $objServicio->getProductoId()
                                                                                                   );
                if(is_object($objServProdAsPrivado))
                {
                    $intAsPrivado = $objServProdAsPrivado->getValor();
                }
                else
                {
                    $objAsPrivado = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                ->getOneByCaracteristica($intIdPersonaEmpresaRol,"AS_PRIVADO");
                    if(is_object($objAsPrivado))
                    {
                        $intAsPrivado = $objAsPrivado->getValor();
                    }
                }
            }
        }
        else
        {
            $objAsPrivado = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                        ->getOneByCaracteristica($intIdPersonaEmpresaRol,"AS_PRIVADO");
            if($objAsPrivado)
            {
                $intAsPrivado = $objAsPrivado->getValor();
            }
        }
         
        $objResponse->setContent($intAsPrivado);

        return $objResponse;
    }
    
    /**
     *
     * Documentación para el método 'ajaxGetProtocolosEnrutamientoAction'.
     *
     * Método utilizado para generar el Json de registros de los protocolos de enrutamiento
     *
     * @return JsonResponse [{ 
     *                      'data'  : [{
     *                                   'id':'',
     *                                   'nombre':'',
     *                                   'feCreacion':'',
     *                                   'usrCreacion':'',
     *                                   }]
     *                      }]
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 26-12-2015
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 20-02-2017 - Se ajusta para que se pueda obtener protocolos de enrutamiento valido para L3MPLS e INTMPLS
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.2 05-08-2019 - Se agrega el producto L3MPLS Sdwan, a obtener los protocolos de enrutamiento.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 25-05-2021 - Se agrega el tipo de red, se verifica si es GPON para setear la cabecera de parámetros.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 20-07-2021 Se agrega validaciones para los tipos de red
    */
    public function ajaxGetProtocolosEnrutamientoAction()
    {
        $objResponse      = new JsonResponse();
        
        $objRequest       = $this->getRequest();
        
        $strNombreTecnico = $objRequest->get('nombreTecnico')?$objRequest->get('nombreTecnico'):'L3MPLS';
        $strTipoRed       = $objRequest->get('strTipoRed') ? $objRequest->get('strTipoRed') : 'MPLS';
        $strTipo          = $objRequest->get('strTipo') ? $objRequest->get('strTipo') : '';
        
        //se verifica si el servicio es tipo de red GPON
        $booleanTipoRedGpon = false;
        if(!empty($strTipoRed))
        {
            $arrayParVerTipoRed = $this->getDoctrine()
                                            ->getManager('telconet_infraestructura')
                                            ->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $strTipoRed,
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
            {
                $booleanTipoRedGpon = true;
            }
        }
        if($booleanTipoRedGpon)
        {
            $strNombreCab = 'PROTOCOLOS_ENRUTAMIENTO_GPON';
            $strNombreTecnico = 'L3MPLS';
        }
        else if($strNombreTecnico == 'L3MPLS' || $strNombreTecnico == 'L3MPLS SDWAN')
        {
            $strNombreCab = 'PROTOCOLOS_ENRUTAMIENTO';
            $strNombreTecnico = 'L3MPLS';
        }
        else
        {
            $strNombreCab = 'PROTOCOLOS_ENRUTAMIENTO_INTMPLS';
        }
        
        $arrayParametros = $this->getDoctrine()
                                ->getManager('telconet_infraestructura')
                                ->getRepository('schemaBundle:AdmiParametroDet')
                                ->get(
                                      $strNombreCab, 
                                      "TECNICO", 
                                      $strNombreTecnico, 
                                      "", 
                                      $strTipo,
                                      "", 
                                      "", 
                                      ""
                                     );
        
        $arrayResultado = array(
                              'data'  => $arrayParametros
                             );

        $objResponse->setData($arrayResultado);

        return $objResponse;
    }
    
    /**
     * @Secure(roles="ROLE_332-3")
     *
     * Documentación para el método 'ajaxGetProtocolosEnrutamientoServicioAction'.
     *
     * Método utilizado para generar el Json de registros de los protocolos de enrutamiento de un servicio
     *
     * @param int idServicio id del servicio a consultar los protocolos de enrutamiento
     * @param int start min de registros a buscar.
     * @param int limit max de registros a buscar.
     *
     * @return JsonResponse [{ 
     *                      'total' : ''
     *                      'data'  : [{
     *                                   'id':'',
     *                                   'nombre':'',
     *                                   'feCreacion':'',
     *                                   'usrCreacion':'',
     *                                   }]
     *                      }]
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 26-12-2015
    */
    public function ajaxGetProtocolosEnrutamientoServicioAction()
    {
        $response        = new JsonResponse();
        $request         = $this->get('request');
        $arrayProtocolos = array();
        
        $idServicio              = $request->get('idServicio');
        $start                   = $request->get('start');
        $limit                   = $request->get('limit');
        $emComercial             = $this->get('doctrine')->getManager();
        $objServicio             = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        
        $arrayServProdCaracts    = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                               ->getByServicioCaracteristicaAndProducto($idServicio, 
                                                                                        'PROTOCOLO_ENRUTAMIENTO',
                                                                                        $objServicio->getProductoId()->getId(),
                                                                                        $start,
                                                                                        $limit
                                                                                       );
        
        $objResultado = json_encode($arrayServProdCaracts);
        
        $response->setContent($objResultado);

        return $response;
    }
    
    /**
     * @Secure(roles="ROLE_332-3")
     * 
     * Documentación para el método 'ajaxCrearProtocoloEnrutamiento'.
     *
     * Método utilizado para crear un protocolo de enrutamiento a un servicio
     *
     * @param int idServicio Id del servicio al cual se le creara el protocolo de enrutamiento
     * @param int idProducto Id del producto del servicio
     * @param string nombreTecnico nombre tecnico del producto
     * @param int idElemento Id del switch del servicio
     * @param string protocolo Nombre del protocolo a crear
     * @param string asPrivado as privado utilizado para crear el protocolo de enrutamiento
     *
     * @return string $mensaje
     *
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 22-12-2015
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.1 26-05-2016 - Se recupera elementoPe desde ws networking
     *
     * @author Duval Median C. <dmedina@telconet.ec>
     * @version 1.2 2016-09-23 - Se elimina referencias no usadas y variable $idPe que tampoco es usada
     *                           Al crear un nuevo protocolo, si existe protocolo STANDARD asociado => se lo elimina lógicamente.
     *                                          Siempre que no sea el STANDARD el que se esté creando.
     * 
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.3 2017-02-21 - Se modifica metodo para que soporte creacion de BGP para Servicios INTMPLS y creacion de RouteMap por default
     *                           establecida para producto INTMPLS
     * 
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.4 2017-03-01 - Se modifica metodo para que solo permita ingresar un protoclo de enrutamiento eliminando los protocolos existentes
     *                           logica y fisicamente del PE
     * 
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.5 2017-03-07 - Se modifica metodo para que valida si es necesario eliminar protcolo OSPF o EIGRP si existe mas de una ip activa
     *                           perteneciente a la subred asignada al servicio
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     * 
     * @author David Leon      <mdleon@telconet.ec>
     * @version 1.7 05-08-2019 - Se agrega el producto L3MPLS SDWAN para que realice el enrutamiento L3MPLS.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 20-07-2021 Se agrega validaciones para los tipos de red
     *
    */
    public function ajaxCrearProtocoloEnrutamientoAction()
    {
        ini_set('max_execution_time', 9000000);
        
        $strMensaje          = "Error";
        $objRequest          = $this->get('request');                 
        $emComercial         = $this->get('doctrine')->getManager();        
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral           = $this->get('doctrine')->getManager('telconet_general');
        
        $intIdServicio          = $objRequest->get('idServicio');
        $intIdProducto          = $objRequest->get('idProducto');
        $intIdElemento          = $objRequest->get('idElemento');
        $strProtocolo           = $objRequest->get('protocolo');        
        $intIdPersonaEmpresaRol = $objRequest->get('idPersonaEmpresaRol');               
        $strNombreTecnico       = $objRequest->get('nombreTecnico')?$objRequest->get('nombreTecnico'):'L3MPLS';
                
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');           
        $serviceUtil            = $this->get('schema.Util');
        $arrayParametrosWs      = array();

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {                        
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
            
            //validacion de existencia de as privado para el cliente
            $objAsPrivado = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                        ->getOneByCaracteristica($intIdPersonaEmpresaRol,"AS_PRIVADO");
            
            //Verificar si ya no existe protocolo enviado configurado en el Servicio
            $objServProdCaractProtocolo = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                             'PROTOCOLO_ENRUTAMIENTO',
                                                                                             $objProducto
                                                                                             );
            if(is_object($objServProdCaractProtocolo))
            {
                //Valida si el protocolo ya se encuentra configurado
                if($objServProdCaractProtocolo->getValor() == $strProtocolo)
                {
                    $objResponse = new Response("Servicio ya tiene configurado un Protocolo <b>".$strProtocolo."</b>.");
                    $objResponse->setStatusCode('406');
                    return $objResponse;
                }
            }

            //verifico el tipo de red
            $strTipoRed = "MPLS";
            if(is_object($objServicio) && is_object($objProducto))
            {
                $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'TIPO_RED',
                                                                                               $objProducto);
                if(is_object($objServProdCaractTipoRed))
                {
                    $strTipoRed = $objServProdCaractTipoRed->getValor();
                }
            }
            //se verifica si el servicio es tipo de red GPON
            $booleanTipoRedGpon = false;
            if(!empty($strTipoRed))
            {
                $arrayParVerTipoRed = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $strTipoRed,
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
            }

            $arrayParametrosWs["intIdElemento"] = $intIdElemento;
            $arrayParametrosWs["intIdServicio"] = $intIdServicio;            

            if($booleanTipoRedGpon)
            {
                $objElementoPe = $serviceTecnico->getPeByOlt($arrayParametrosWs);
            }
            else
            {
                $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
            }            

            if(!is_object($objElementoPe))
            {
                $objResponse = new Response("Imposible crear protocolo de enrutamiento. No existe enlace de Switch con Pe"); 
                $objResponse->setStatusCode('406');
                return $objResponse;
            }

            $arrayParametrosProtocolos                         = array();
            $arrayParametrosProtocolos['objAsPrivado']         = $objAsPrivado;
            $arrayParametrosProtocolos['objServicio']          = $objServicio;
            $arrayParametrosProtocolos['objProducto']          = $objProducto;
            $arrayParametrosProtocolos['objRequest']           = $objRequest;
            $arrayParametrosProtocolos['objServicioProtocolo'] = $objServProdCaractProtocolo;
            $arrayParametrosProtocolos['emComercial']          = $emComercial;
            $arrayParametrosProtocolos['emInfraestructura']    = $emInfraestructura;
            $arrayParametrosProtocolos['objElementoPe']        = $objElementoPe;
            $arrayParametrosProtocolos['strTipoRed']           = $strTipoRed;
            
            //Realizar el llamada de los metodos segun el nombre tecnico del servicio
            if($strNombreTecnico == 'L3MPLS' || $strNombreTecnico == 'L3MPLS SDWAN')
            {
                $arrayRespuesta = $this->enrutamientoL3mpls($arrayParametrosProtocolos);
            }
            else//INTMPLS
            {
                $arrayRespuesta = $this->enrutamientoInternetMpls($arrayParametrosProtocolos);
            }
            
            if($arrayRespuesta['status'] == 'ERROR')
            {
                $objResponse = new Response($arrayRespuesta['mensaje']); 
                $objResponse->setStatusCode('406');
                return $objResponse;
            }
            else
            {
                $emComercial->commit();
                $emInfraestructura->commit();
                
                $strMensaje = "Se creó el Protocolo de Enrutamiento satisfactoriamente.";
            }            
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al crear protocolo de Enrutamiento, notificar a Sistemas";
            
            $serviceUtil->insertError('TELCOS', 
                                      'ajaxCrearProtocoloEnrutamientoAction', 
                                      $e->getMessage(), 
                                      $objRequest->getSession()->get('user'), 
                                      $objRequest->getClientIp()
                                     );
            
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
        
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
                $emInfraestructura->close();
            }
        }
        
        return new Response($strMensaje);
    }
    
    /**
     * 
     * Metodo encargado de realizar el cambio de protocolo de enrutamiento para servicios de L3mpls
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 28-06-2018
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - 16-07-2018 - Se obtiene información de variable Request de forma correcta ( objeto ) ya que se la obtenía como un arreglo
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 19-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                           enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 20-07-2021 Se agrega validaciones para los tipos de red
     *
     * @param type $arrayParametros
     * @return Array [ status, mensaje ]
     */
    private function enrutamientoL3mpls($arrayParametros)
    {
        $objAsPrivado       = $arrayParametros['objAsPrivado'];
        $objServicio        = $arrayParametros['objServicio'];
        $objProducto        = $arrayParametros['objProducto'];
        $emComercial        = $arrayParametros['emComercial'];
        $emInfraestructura  = $arrayParametros['emInfraestructura'];
        $objRequest         = $arrayParametros['objRequest'];
        $boolConfig         = filter_var($objRequest->get('configurarPE'), FILTER_VALIDATE_BOOLEAN);
        $objSession         = $objRequest->getSession();
        $objServProtocolo   = $arrayParametros['objServicioProtocolo'];
        $strProtocolo       = $objRequest->get('protocolo');
        $serviceNetworking  = $this->get('tecnico.NetworkingScripts');
        $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $serviceActivacion  = $this->get('tecnico.InfoActivarPuerto');
        $strTipoRed         = isset($arrayParametros['strTipoRed']) ? $arrayParametros['strTipoRed'] : "MPLS";

        $strBanderaLineasBravco = "N";
        $strRouteTargetExport   = "";
        $strRouteTargetImport   = "";
        $strRazonSocial         = "";
        $strIpOlt               = "";

        //si no existe, se crear registro de as privado
        if(!is_object($objAsPrivado))
        {
            $objAdmiCaracteristica   = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findOneBy(array("descripcionCaracteristica"=>"AS_PRIVADO","estado"=>"Activo"));

            $objPersonaEmpresaRol    = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                   ->find($objRequest->get('idPersonaEmpresaRol'));

            if(is_object($objAdmiCaracteristica) && is_object($objPersonaEmpresaRol))
            {
                $objAsPrivado = new InfoPersonaEmpresaRolCarac();
                $objAsPrivado->setPersonaEmpresaRolId($objPersonaEmpresaRol);
                $objAsPrivado->setCaracteristicaId($objAdmiCaracteristica);
                $objAsPrivado->setValor($objRequest->get('asPrivado'));
                $objAsPrivado->setEstado("Activo");
                $objAsPrivado->setFeCreacion(new \DateTime('now'));
                $objAsPrivado->setUsrCreacion($objSession->get('user'));
                $objAsPrivado->setIpCreacion($objRequest->getClientIp());
                $emComercial->persist($objAsPrivado);
                $emComercial->flush();
            }
        }
        else
        {
            //Si exste creado el registro el mismo es actualizado
            $objAsPrivado->setValor($objRequest->get('asPrivado'));
            $emComercial->persist($objAsPrivado);
            $emComercial->flush();
        }

        //verifico el tipo de red
        if(is_object($objServicio) && is_object($objProducto))
        {
            $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                           'TIPO_RED',
                                                                                           $objProducto);
            if(is_object($objServProdCaractTipoRed))
            {
                $strTipoRed = $objServProdCaractTipoRed->getValor();
            }
        }
        //se verifica si el servicio es tipo de red GPON
        $booleanTipoRedGpon = false;
        if(!empty($strTipoRed))
        {
            $arrayParVerTipoRed = $emComercial->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $strTipoRed,
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
            {
                $booleanTipoRedGpon = true;
            }
        }

        if(($objServicio->getEstado()=="Activo" || $objServicio->getEstado()=="EnPruebas") && $boolConfig )
        {
            // ------------------------------------------------------------------------------------
            // call al WebService NetworkingScriptsService
            // ------------------------------------------------------------------------------------

            //Consultar Razon Social
            $objInfoPersona = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();

            if(is_object($objInfoPersona))
            {
                $strRazonSocial = $objInfoPersona->getRazonSocial();
            }

            if(!empty($strRazonSocial))
            {
                $arrayRazonesSociales = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PROYECTO MONITOREO CLIENTES GRUPO BRAVCO',
                                                             'INFRAESTRUCTURA',
                                                             'ACTIVAR SERVICIO',
                                                             'RAZON SOCIAL GRUPO BRAVCO',
                                                              $strRazonSocial,
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              '');
            }

            if(isset($arrayRazonesSociales["valor1"]) && !empty($arrayRazonesSociales["valor1"]))
            {
                $strBanderaLineasBravco = "S";
                $strRouteTargetExport   = $arrayRazonesSociales["valor2"];
                $strRouteTargetImport   = $arrayRazonesSociales["valor3"];
                $strRazonSocial         = $arrayRazonesSociales["valor4"];
            }

            //obtener elemento
            $objElementoPe          = null;
            $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array("servicioId" => $objServicio->getId()));
            if(is_object($objInfoServicioTecnico))
            {
                $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                     ->find($objInfoServicioTecnico->getElementoId());
                if(is_object($objInfoElemento))
                {
                    //obtengo el pe por tipo de red
                    $arrayParametrosPe = array("intIdElemento" => $objInfoElemento->getId(), "intIdServicio" => $objServicio->getId());
                    if($booleanTipoRedGpon)
                    {
                        $objElementoPe = $serviceTecnico->getPeByOlt($arrayParametrosPe);
                    }
                    else
                    {
                        $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosPe);
                    }
                }
            }

            if($booleanTipoRedGpon)
            {
                //Se consulta la IP del OLT
                $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneBy(array("servicioId" => $objServicio->getId()));

                if(is_object($objInfoServicioTecnico))
                {
                    $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                         ->find($objInfoServicioTecnico->getElementoId());
                    if(is_object($objInfoElemento))
                    {
                        $objInfoIp = $emInfraestructura->getRepository('schemaBundle:InfoIp')->find($objInfoElemento->getId());

                        if(is_object($objInfoIp))
                        {
                            $strIpOlt = $objInfoIp->getIp();
                        }
                    }
                }
                                
                $arrayParametrosEnrutamiento                            = array();
                $arrayParametrosEnrutamiento["strPrefijoEmpresa"]       = $objSession->get('prefijoEmpresa');
                $arrayParametrosEnrutamiento["strUsrCreacion"]          = $objSession->get('user');
                $arrayParametrosEnrutamiento["strIpCreacion"]           = $objRequest->getClientIp();
                $arrayParametrosEnrutamiento["strTipoEnrutamiento"]     = "DINAMICO";
                $arrayParametrosEnrutamiento["strOpcion"]               = "TN_ENRUTAMIENTO_DATOS";
                $arrayParametrosEnrutamiento["objServicio"]             = $objServicio;
                $arrayParametrosEnrutamiento["objProducto"]             = $objProducto;
                $arrayParametrosEnrutamiento["strIpOlt"]                = $strIpOlt;
                $arrayParametrosEnrutamiento["strModulo"]               = "enrutamientos";
                $arrayParametrosEnrutamiento["strOpcionEnrutamiento"]   = "enrutamientoDinamicoOLT";
                $arrayParametrosEnrutamiento["strAccion"]               = "agregar";                
                $arrayParametrosEnrutamiento["strVrf"]                  = $objRequest->get('vrf');                
                $arrayParametrosEnrutamiento["strIpBGP"]                = $objRequest->get('ip');
                $arrayParametrosEnrutamiento["strAsPrivado"]            = $objRequest->get('asPrivado');
                $arrayParametrosEnrutamiento["strGateway"]              = $objRequest->get('gateway');
                $arrayParametrosEnrutamiento["strNombreSesionBgp"]      = $objRequest->get('loginAux');
                $arrayParametrosEnrutamiento["strDefaultGw"]            = "N";
                $arrayParametrosEnrutamiento["strProtocolo"]            = "BGP";                
                $arrayParametrosEnrutamiento["strTipoEnlace"]           = "PRINCIPAL";  
                $arrayParametrosEnrutamiento["strBanderaBravco"]        = "N";                
                $arrayParametrosEnrutamiento["strRazonSocial"]          = "";  
                
                $arrayRespuesta = $serviceActivacion->llamadaWsEnrutamientoGPON($arrayParametrosEnrutamiento);  
                
                $strStatus  = $arrayRespuesta['strStatus'];
                $strMensaje = $arrayRespuesta['strMensaje'];                
            }
            else
            {
                $arrayPeticiones                      = array();
                $arrayPeticiones['url']               = 'enrutamientoDinamicoPe';
                $arrayPeticiones['accion']            = 'agregar';                
                $arrayPeticiones['clase_servicio']    = $objProducto->getNombreTecnico();
                $arrayPeticiones['vrf']               = $objRequest->get('vrf');
                $arrayPeticiones['pe']                = is_object($objElementoPe) ? $objElementoPe->getNombreElemento() : $objRequest->get('pe');
                $arrayPeticiones['vlan']              = $objRequest->get('vlan');
                $arrayPeticiones['gateway']           = $objRequest->get('gateway');
                $arrayPeticiones['ip_bgp']            = $objRequest->get('ip');
                $arrayPeticiones['asprivado']         = $objRequest->get('asPrivado');
                $arrayPeticiones['nombre_sesion_bgp'] = $objRequest->get('loginAux');
                $arrayPeticiones['default_gw']        = 'N';
                $arrayPeticiones['protocolo']         = $strProtocolo;
                $arrayPeticiones['tipo_enlace']       = $objRequest->get('tipoEnlace');
                $arrayPeticiones['banderaBravco']     = 'N';                
                $arrayPeticiones['servicio']          = $objProducto->getNombreTecnico();
                $arrayPeticiones['login_aux']         = $objRequest->get('loginAux');
                $arrayPeticiones['user_name']         = $objSession->get('user');
                $arrayPeticiones['user_ip']           = $objRequest->getClientIp();

                //Se envian a configurar lineas de monitoreo de enlaces de datos
                if($strBanderaLineasBravco === "S")
                {
                    $arrayPeticiones['razon_social'] = $strRazonSocial;
                    $arrayPeticiones['rt_export']    = $strRouteTargetExport;
                    $arrayPeticiones['rt_import']    = $strRouteTargetImport;
                }

                //Ejecucion del metodo via WS para realizar la configuracion del SW
                $arrayRespuesta = $serviceNetworking->callNetworkingWebService($arrayPeticiones);

                $strStatus  = $arrayRespuesta['status'];
                $strMensaje = $arrayRespuesta['mensaje'];
                // ------------------------------------------------------------------------------------
            }
        }
        else
        {
            $strStatus = 'OK';
        }
        
        if($strStatus == 'OK')
        {
            //Se elimina la informacion de protocolo anterior
            if(is_object($objServProtocolo))
            {
                $objServProtocolo->setEstado('Eliminado');
                $emComercial->persist($objServProtocolo);
                $emComercial->flush();

                $strProtocoloAnterior    = $objServProtocolo->getValor();

                $strObservacionHistorial = 'Se Elimino el protocolo de enrutamiento <b>'.$strProtocoloAnterior.'</b>'
                                         . ' por creación de Protocolo <b>'.$strProtocolo.'</b> ';

                if($boolConfig)
                {
                    $boolRequiereEjecucion   = true;

                    $strObservacionAdicional = '<br>Se ejecuta ws de networking para eliminacion de protocolo en Pe';

                    //Validar si el protocolo que esta siendo eliminado es EIGRP o OSPF verificar si no existen ips aun activas dentro
                    //de la subred, en caso de existir mas de una a parte del servicio no ejecutar nada a nivel de pe
                    if($strProtocoloAnterior == 'EIGRP' || $strProtocoloAnterior == 'OSPF')
                    {
                        //Verificar si no existe ya el protocolo a eliminar en otro servicio configurado dentro de la misma subred
                        $arrayParametrosVerificar                  = array();
                        $arrayParametrosVerificar['intIdServicio'] = $objServicio->getId();
                        $arrayParametrosVerificar['strProtocolo']  = $strProtocoloAnterior;
                        $arrayServiciosProtocolo = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                                                     ->getArrayServiciosPorProtocoloYSubred($arrayParametrosVerificar);

                        //Si existe mas de una ip activa diferente a la propia del servicio no se elimina a nivel de pe
                        if(count($arrayServiciosProtocolo)>1)
                        {
                            $boolRequiereEjecucion   = false;
                            $strObservacionAdicional = '<br>No se ejecuta ws de networking por tener '
                                                        . 'aun ips activas en la subred ';
                        }
                    }   

                    $strObservacionHistorial .= $strObservacionAdicional;

                    //Si requiere ejecucion a nivel de Pe para eliminar protocolo se ejecuta
                    if($boolRequiereEjecucion)
                    {
                        if($booleanTipoRedGpon)
                        { 
                            $arrayParametrosEnrutamiento["strAccion"]    = "eliminar";
                            $arrayParametrosEnrutamiento['strProtocolo'] = $strProtocoloAnterior;
                            
                            $arrayRespuesta = $serviceActivacion->llamadaWsEnrutamientoGPON($arrayParametrosEnrutamiento);  

                            $strStatus  = $arrayRespuesta['strStatus'];
                            $strMensaje = $arrayRespuesta['strMensaje'];                             
                        }                        
                        else
                        {
                            // ------------------------------------------------------------------------------------
                            // call al WebService NetworkingScriptsService
                            // ------------------------------------------------------------------------------------
                            $arrayPeticiones['accion']       = 'eliminar';
                            $arrayPeticiones['protocolo']    = $strProtocoloAnterior;                                                
                            $arrayRespuesta                  = $serviceNetworking->callNetworkingWebService($arrayPeticiones);

                            $strStatus  = $arrayRespuesta['status'];
                            $strMensaje = $arrayRespuesta['mensaje'];
                        }
                        
                        if($strStatus != 'OK')
                        {
                            return array('status'  => $strStatus,
                                         'mensaje' => $strMensaje);
                        }                                                
                    }
                }

                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strObservacionHistorial);
                $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                $objServicioHistorial->setEstado($objServicio->getEstado());
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
            }

            //-------------------------------------------------------------------
            //                  Se ingresa el nuevo protocolo
            //-------------------------------------------------------------------

            $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio, 
                                                                    $objProducto,
                                                                    'PROTOCOLO_ENRUTAMIENTO',
                                                                    $strProtocolo,
                                                                    $objSession->get('user')
                                                                    );
            //se crea registro de historial en el servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion('Se Creo el Protocolo de Enrutamiento <b>'.$strProtocolo.'</b> con AS '.
                                                   $objRequest->get('asPrivado'));
            $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setUsrCreacion($objSession->get('user'));
            $objServicioHistorial->setEstado($objServicio->getEstado());
            $emComercial->persist($objServicioHistorial);
            $emComercial->flush();
        }
        else
        {
            return array('status'  => 'ERROR',
                         'mensaje' => "Problemas con el Ws. ".$strMensaje);
        }
        
        return array('status'  => 'OK','mensaje' => 'OK');
    }
    
    /**
     * 
     * Metodo encargado de realizar el cambio de protocolo de enrutamiento para servicios de internet mpls
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 28-06-2018
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 04-07-2019 - Se cambia el orden de ejecución de los comandos. Se envia a eliminar la sesión BGP antes que los prefix y routemap,
     *                           ( por los nuevos PE ASR que se estan implementando en la red )
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 20-07-2021 Se agrega validaciones para los tipos de red
     *
     * @param type $arrayParametros
     * @return Array [ status, mensaje ]
     */
    private function enrutamientoInternetMpls($arrayParametros)
    {
        $objAsPrivado       = $arrayParametros['objAsPrivado'];
        $objServicio        = $arrayParametros['objServicio'];
        $objProducto        = $arrayParametros['objProducto'];
        $emComercial        = $arrayParametros['emComercial'];
        $emInfraestructura  = $arrayParametros['emInfraestructura'];
        $objRequest         = $arrayParametros['objRequest'];
        $boolConfig         = filter_var($objRequest->get('configurarPE'), FILTER_VALIDATE_BOOLEAN);
        $objSession         = $objRequest->getSession();
        $objServProtocolo   = $arrayParametros['objServicioProtocolo'];
        $strProtocolo       = $objRequest->get('protocolo');
        $emGeneral          = $this->get('doctrine')->getManager('telconet_general');
        $serviceNetworking  = $this->get('tecnico.NetworkingScripts');
        $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $arrayParametrosWs  = array();
        $strTipoRed         = isset($arrayParametros['strTipoRed']) ? $arrayParametros['strTipoRed'] : "MPLS";
        //se verifica si el servicio es tipo de red GPON
        $booleanTipoRedGpon = false;
        if(!empty($strTipoRed))
        {
            $arrayParVerTipoRed = $emComercial->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $strTipoRed,
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
            {
                $booleanTipoRedGpon = true;
            }
        }

        //Verificar para INTMPLS si el asprivado no existe para servicios de este tipo solo cuando se requiere cambiar a protocolo
        //BGP
        if($strProtocolo == 'BGP')
        {
            //Se busca si el as privado no esta configurado en otro servicio de tipo INTMPLS - Anillo
            //Si existe devuelve excepcion a usuario indicando
            $arrayParametrosAs                     = array();
            $arrayParametrosAs['intAsPrivado']     = $objRequest->get('asPrivado');
            $arrayParametrosAs['strNombreTecnico'] = 'INTMPLS';
            $arrayParametrosAs['intIdPersonaRol']  = $objRequest->get('idPersonaEmpresaRol');
            $strExisteAsPrivado = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->getAsPrivadoExiste($arrayParametrosAs);

            //Si existe mas de uno , envia excepcion
            if($strExisteAsPrivado == 'SI')
            {
                return array('status'  => 'ERROR',
                             'mensaje' => "Imposible crear protocolo de enrutamiento. <b>As Privado</b> ya existe en otro Servicio");
            }

            //Verificacion a nivel de L3MPLS ( asprivado ligado al cliente )
            if(is_object($objAsPrivado))
            {
                //Si los asprivados son diferentes
                if($objAsPrivado->getValor() != $objRequest->get('asPrivado'))
                {
                    $arrayParametrosAs['strNombreTecnico'] = 'L3MPLS';
                    $strExisteAsPrivado = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                      ->getAsPrivadoExiste($arrayParametrosAs);
                    
                    //Si existe mas de uno , envia excepcion
                    if($strExisteAsPrivado == 'SI')
                    {
                        return array('status'  => 'ERROR',
                                     'mensaje' => "Imposible crear protocolo de enrutamiento. <b>As Privado</b> ya existe en otro Servicio");
                    }
                }
            }
        }

        //Obtener la VRF definida para servicios de INTMPLS
        $objEmpresaCod = $emComercial->getRepository("schemaBundle:InfoEmpresaGrupo")->findOneByPrefijo('TN');

        //Se obtiene la VRF para INTMPLS
        $arrayParametrosResultado = $emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                              ->getOne('VRF-INTERNET',
                                                       'TECNICO',
                                                       '',
                                                       'VRF-INTERNET',
                                                       '','','','','',
                                                       is_object($objEmpresaCod)?$objEmpresaCod->getId():'',
                                                       null
                                                       );

        $strVrf = isset($arrayParametrosResultado['valor1'])?$arrayParametrosResultado['valor1']:'';

        //Verificar que tipo protocolo se requiere ejecutar sobre el servicio de internet
        if($strProtocolo == 'BGP')
        {
            //Se guarda la informacion de AS Privado para INTMPLS
            $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                    $objProducto,
                                                                    'AS_PRIVADO',
                                                                    $objRequest->get('asPrivado'),
                                                                    $objSession->get('user')
                                                                    );

            //Guardar informacion de la routemap ligada al Servicio
            $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                    $objProducto,
                                                                    'ROUTE_MAP',
                                                                    $objRequest->get('loginAux'),
                                                                    $objSession->get('user')
                                                                  );
            
            //Obtener los prefijos requeridos para las diferentes configuraciones
            $arrayPrefijos            = $serviceTecnico->getPrefijosCreacionRouteMap();
            $strPrefijoRouteMap       = isset($arrayPrefijos['strRouteMap'])?$arrayPrefijos['strRouteMap']:'';
            $strPrefijoRmPrefix       = isset($arrayPrefijos['strPrefix'])?$arrayPrefijos['strPrefix']:'';
            
            //Ejecutar en PE configuracion de la routemap por defecto para InternetMPLS
            $arrayParametrosRouteMap                         = array();
            $arrayParametrosRouteMap['url']                  = 'adminEnrutamientoPe';
            $arrayParametrosRouteMap['accion']               = 'agregar-routemap-config';
            $arrayParametrosRouteMap['servicio']             = 'INTMPLS';
            $arrayParametrosRouteMap['login_aux']            = $objRequest->get('loginAux');
            $arrayParametrosRouteMap['user_name']            = $objSession->get("user");
            $arrayParametrosRouteMap['user_ip']              = $objRequest->getClientIp();                
            $arrayParametrosRouteMap['clase_servicio']       = 'INTMPLS';
            $arrayParametrosRouteMap['vrf']                  = $strVrf;
            $arrayParametrosRouteMap['pe']                   = $objRequest->get('pe');
            $arrayParametrosRouteMap['asprivado']            = $objRequest->get('asPrivado');
            $arrayParametrosRouteMap['protocolo']            = $strProtocolo;
            $arrayParametrosRouteMap['ip_bgp']               = $objRequest->get('ip');                
            $arrayParametrosRouteMap['routemap_name']        = $strPrefijoRouteMap.$objRequest->get('loginAux');
            $arrayParametrosRouteMap['routemap_prefix_name'] = $strPrefijoRmPrefix.$objRequest->get('loginAux');

            //Ejecutar WS para creacion de RouteMap previo a crear los prefix
            $arrayRespuestaWs          = $serviceNetworking->callNetworkingWebService($arrayParametrosRouteMap);
            $strStatus                 = $arrayRespuestaWs['status'];
            $strMensaje                = $arrayRespuestaWs['mensaje'];

            if($strStatus != 'OK')
            {
                return array('status'  => 'ERROR', 'mensaje' => "Problemas con el Ws. ".$strMensaje);
            }
        }

        //obtener elemento
        $objElementoPe          = null;
        $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                ->findOneBy(array("servicioId" => $objServicio->getId()));
        if(is_object($objInfoServicioTecnico))
        {
            $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                 ->find($objInfoServicioTecnico->getElementoId());
            if(is_object($objInfoElemento))
            {
                //obtengo el pe por tipo de red
                $arrayParametrosPe = array("intIdElemento" => $objInfoElemento->getId(), "intIdServicio" => $objServicio->getId());
                if($booleanTipoRedGpon)
                {
                    $objElementoPe = $serviceTecnico->getPeByOlt($arrayParametrosPe);
                }
                else
                {
                    $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosPe);
                }
            }
        }

        //Array de parametros para configurar/desconfigurar el protocolo de enrutamiento
        $arrayPeticiones                      = array();
        $arrayPeticiones['url']               = 'enrutamientoDinamicoPe';                 
        $arrayPeticiones['clase_servicio']    = $objProducto->getNombreTecnico();
        $arrayPeticiones['vrf']               = $strVrf;
        $arrayPeticiones['pe']                = is_object($objElementoPe) ? $objElementoPe->getNombreElemento() : $objRequest->get('pe');
        $arrayPeticiones['vlan']              = $objRequest->get('vlan');
        $arrayPeticiones['gateway']           = $objRequest->get('gateway');
        $arrayPeticiones['ip_bgp']            = $objRequest->get('ip');
        $arrayPeticiones['asprivado']         = $objRequest->get('asPrivado');
        $arrayPeticiones['nombre_sesion_bgp'] = $objRequest->get('loginAux');
        $arrayPeticiones['default_gw']        = 'N';
        $arrayPeticiones['tipo_enlace']       = $objRequest->get('tipoEnlace');
        $arrayPeticiones['banderaBravco']     = 'N';                
        $arrayPeticiones['servicio']          = $objProducto->getNombreTecnico();
        $arrayPeticiones['login_aux']         = $objRequest->get('loginAux');
        $arrayPeticiones['user_name']         = $objSession->get('user');
        $arrayPeticiones['user_ip']           = $objRequest->getClientIp();
        
        //Configuracion del nuevo protocolo, solo se ejecuta si es protocolo BGP
        if(($objServicio->getEstado()=="Activo" || $objServicio->getEstado()=="EnPruebas") && $boolConfig && $strProtocolo == 'BGP')
        {
            $arrayPeticiones['accion']            = 'agregar';                            
            $arrayPeticiones['protocolo']         = $strProtocolo;
            $arrayRespuesta                       = $serviceNetworking->callNetworkingWebService($arrayPeticiones);

            $strStatus  = $arrayRespuesta['status'];
            $strMensaje = $arrayRespuesta['mensaje'];
        }
        else
        {
            $strStatus = 'OK';
        }

        if($strStatus == 'OK')
        {
            //Se elimina la informacion de protocolo anterior
            if(is_object($objServProtocolo))
            {
                $objServProtocolo->setEstado('Eliminado');
                $emComercial->persist($objServProtocolo);
                $emComercial->flush();

                $strProtocoloAnterior    = $objServProtocolo->getValor();

                $strObservacionHistorial = 'Se Eliminó el protocolo de enrutamiento <b>'.$strProtocoloAnterior.'</b>'
                                         . ' por creación de Protocolo <b>'.$strProtocolo.'</b> ';

                if($boolConfig)
                {                    
                    $strObservacionAdicional .= '<br>Se ejecuta ws de networking para eliminacion de protocolo en Pe';
                    
                    //Si el protocolo anterior es BGP se elimina configuracion de protocolo asignadas
                    if($strProtocoloAnterior == 'BGP')
                    {
                        //Eliminar el protocolo de enrutamiento, se cambia el orden de ejecución para eliminar primero la sesión BGP
                        //Por validación en equipos ASR
                        $arrayPeticiones['accion']     = 'eliminar';
                        $arrayPeticiones['protocolo']  = $strProtocoloAnterior;
                        $arrayRespuestaWs              = $serviceNetworking->callNetworkingWebService($arrayPeticiones);

                        $strStatus  = $arrayRespuestaWs['status'];
                        $strMensaje = $arrayRespuestaWs['mensaje'];

                        if($strStatus != 'OK')
                        {
                            return array('status' => $strStatus, 'mensaje' => $strMensaje);
                        }

                        //Configuraciones a nivel de routemap
                        $arrayParametrosRouteMap                         = array();
                        $arrayParametrosRouteMap['url']                  = 'adminEnrutamientoPe';
                        $arrayParametrosRouteMap['servicio']             = 'INTMPLS';
                        $arrayParametrosRouteMap['login_aux']            = $objRequest->get('loginAux');
                        $arrayParametrosRouteMap['user_name']            = $objSession->get("user");
                        $arrayParametrosRouteMap['user_ip']              = $objRequest->getClientIp();                
                        $arrayParametrosRouteMap['clase_servicio']       = 'INTMPLS';
                        $arrayParametrosRouteMap['vrf']                  = $strVrf;
                        $arrayParametrosRouteMap['pe']                   = is_object($objElementoPe) ? $objElementoPe->getNombreElemento() :
                                                                           $objRequest->get('pe');
                        $arrayParametrosRouteMap['asprivado']            = $objRequest->get('asPrivado');
                        $arrayParametrosRouteMap['protocolo']            = $strProtocoloAnterior;
                        $arrayParametrosRouteMap['ip_bgp']               = $objRequest->get('ip');                
                        
                        //Se obtiene los prefijos desfinidos para las routemaps
                        $arrayPrefijos            = $serviceTecnico->getPrefijosCreacionRouteMap();
                        $strPrefijoRouteMap       = isset($arrayPrefijos['strRouteMap'])?$arrayPrefijos['strRouteMap']:'';
                        $strPrefijoRmPrefix       = isset($arrayPrefijos['strPrefix'])?$arrayPrefijos['strPrefix']:'';
                        
                        $arrayParametrosRouteMap['routemap_name']        = $strPrefijoRouteMap.$objRequest->get('loginAux');
                        $arrayParametrosRouteMap['routemap_prefix_name'] = $strPrefijoRmPrefix.$objRequest->get('loginAux');
                        
                        //Se debe primero eliminar las prefixlist configuradas en caso de existir
                        //Luego eliminar la routemap
                        //Luego eliminar el protocolo
                        //Volver a configurar la ruta como estatica que estaba en estado Dinamica}
                        //Realizar el proceso para servicios backup
                        $objCaractteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                          ->findOneBy(array('descripcionCaracteristica' => 'ROUTE_MAP_PREFIX',
                                                                            'estado'                    => 'Activo'));
                        
                        $arrayServProdCaracRmPrefix = array();
                        
                        if(is_object($objCaractteristica))
                        {
                            $objProdCarac =  $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                           "caracteristicaId" => $objCaractteristica->getId(),
                                                                           "estado"           => "Activo"));
                            if(is_object($objProdCarac))
                            {
                                $arrayServProdCaracRmPrefix = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                          ->findBy(array("servicioId"                => $objServicio->getId(),
                                                                                         "productoCaracterisiticaId" => $objProdCarac->getId(),
                                                                                         "estado"                    => "Activo")
                                                                                        );
                            }
                        }
                        
                        $objServProdRouteMap       = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                        'ROUTE_MAP',
                                                                                                         $objProducto
                                                                                                         );
                        if(!empty($arrayServProdCaracRmPrefix))
                        {
                            $strObservacionHistorial .= '<br>Se eliminaron las siguientes prefix : ';
                                
                            foreach($arrayServProdCaracRmPrefix as $objServProdRouteMapPrefix)
                            {
                                $arrayPrefix       = explode("|",$objServProdRouteMapPrefix->getValor());
                                $arrayPrefixList[] = array(
                                                            'ip'           => $arrayPrefix[0],
                                                            'mask'         => $arrayPrefix[1],
                                                            'length_type'  => $arrayPrefix[2],
                                                            'length_value' => $arrayPrefix[3],
                                                            'seq'          => $arrayPrefix[4]
                                                           );
                                
                                $strObservacionHistorial .= '<br/> - '.$objServProdRouteMapPrefix->getValor();
                                
                                $objServProdRouteMapPrefix->setEstado('Eliminado');
                                $emComercial->persist($objServProdRouteMapPrefix);
                                $emComercial->flush();
                            }

                            //Antes de eliminar los prefix se valida que la sesión BGP se halla eliminado correctamente
                            if($strStatus == 'OK')
                            {
                                $arrayParametrosRouteMap['accion']                 = 'eliminar-routemap-prefix';
                                $arrayParametrosRouteMap['routemap_prefix_list']   = $arrayPrefixList;

                                //Desconfiguracion del PE de las prefixlist
                                $arrayRespuestaWs  = $serviceNetworking->callNetworkingWebService($arrayParametrosRouteMap);
                                $strStatus         = $arrayRespuestaWs['status'];
                                $strMensaje        = $arrayRespuestaWs['mensaje'];

                                if($strStatus != 'OK')
                                {
                                    return array('status' => $strStatus, 'mensaje' => $strMensaje);
                                }
                            }
                        }
                        else
                        {
                            $strStatus = 'OK';
                        }
                        
                        if($strStatus == 'OK')
                        {
                            //Si se eliminaron las prefix list en caso de existir, se procede a eliminar las routemap configuradas
                            $arrayParametrosRouteMap['accion']  = 'eliminar-routemap-config';
                            $arrayRespuestaWs  = $serviceNetworking->callNetworkingWebService($arrayParametrosRouteMap);
                            $strStatus         = $arrayRespuestaWs['status'];
                            $strMensaje        = $arrayRespuestaWs['mensaje'];
                            
                            if($strStatus != 'OK')
                            {
                                return array('status' => $strStatus, 'mensaje' => $strMensaje);
                            }
                        }

                        //----------------------------------------------------------
                        // ELIMINAR INFORMACION DE PROTOCOLO DEL SERVICIO
                        //----------------------------------------------------------
                        if(is_object($objAsPrivado))
                        {
                            $objAsPrivado->setEstado('Eliminado');
                            $emComercial->persist($objAsPrivado);
                            $emComercial->flush();
                        }

                        if(is_object($objServProdRouteMap))
                        {
                            $objServProdRouteMap->setEstado('Eliminado');
                            $emComercial->persist($objServProdRouteMap);
                            $emComercial->flush();

                            $strObservacionHistorial .= '<br>Se eliminó la routemap';
                        }

                        //---------------------------------------------------------------
                        
                        
                        //--------------------------- BACKUPS ---------------------------
                        //Obtener servicios backups para revisar la configuracion que se realizo en al backup para ser reversada de igual manera
                        $arrayServiciosBackup = $serviceTecnico->getServiciosBackupByServicioPrincipal($objServicio);

                        if(!empty($arrayServiciosBackup))
                        {
                            $arrayParametrosRouteMap                         = array();
                            $arrayParametrosRouteMap['url']                  = 'adminEnrutamientoPe';
                            $arrayParametrosRouteMap['servicio']             = 'INTMPLS';
                            $arrayParametrosRouteMap['user_name']            = $objSession->get("user");
                            $arrayParametrosRouteMap['user_ip']              = $objRequest->getClientIp();                
                            $arrayParametrosRouteMap['clase_servicio']       = 'INTMPLS';
                            
                            foreach($arrayServiciosBackup as $arrayServicioBackup)
                            {
                                $objServicioBackup      = $emComercial->getRepository("schemaBundle:InfoServicio")
                                                                      ->find($arrayServicioBackup['id']);
                                $objProductoBck         = $objServicioBackup->getProductoId();
                                $objServProdRouteMapBck = $serviceTecnico->getServicioProductoCaracteristica($objServicioBackup,
                                                                                                            'ROUTE_MAP',
                                                                                                             $objProductoBck
                                                                                                            );
                                //Obtener datos del servicio para realizar configuraciones en el PE
                                //AS
                                $objServProdAsPrivadoBck = $serviceTecnico->getServicioProductoCaracteristica($objServicioBackup,
                                                                                                            'AS_PRIVADO',
                                                                                                             $objProductoBck
                                                                                                            );
                                
                                $objServProdProtocoloBck = $serviceTecnico->getServicioProductoCaracteristica($objServicioBackup,
                                                                                                            'PROTOCOLO_ENRUTAMIENTO',
                                                                                                             $objProductoBck
                                                                                                            );
                                //obtener tipo red
                                $objServProdTipoRedBck = $serviceTecnico->getServicioProductoCaracteristica($objServicioBackup,
                                                                                                            'TIPO_RED',
                                                                                                             $objProductoBck
                                                                                                            );
                                //Servicio Tecnico
                                $objServicioTecnicoBck = $emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                                                                     ->findOneByServicioId($objServicioBackup->getId());
                                
                                if(is_object($objServicioTecnicoBck))
                                {
                                    $objElementoSwBck = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                          ->find($objServicioTecnicoBck->getElementoId());
                                    
                                    if(is_object($objElementoSwBck))
                                    {
                                        $arrayParametrosWs["intIdElemento"] = $objElementoSwBck->getId();
                                        $arrayParametrosWs["intIdServicio"] = $objServicio->getId();

                                        //se verifica si el servicio es tipo de red GPON
                                        $booleanTipoRedGponBk = false;
                                        if(is_object($objServProdTipoRedBck))
                                        {
                                            $arrayParVerTipoRedBk = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                                                                    ->getOne('NUEVA_RED_GPON_TN',
                                                                                                            'COMERCIAL',
                                                                                                            '',
                                                                                                            'VERIFICAR TIPO RED',
                                                                                                            'VERIFICAR_GPON',
                                                                                                            $objServProdTipoRedBck->getValor(),
                                                                                                            '',
                                                                                                            '',
                                                                                                            '');
                                            if(isset($arrayParVerTipoRedBk) && !empty($arrayParVerTipoRedBk))
                                            {
                                                $booleanTipoRedGponBk = true;
                                            }
                                        }
                                        //Obtener informacion del PE
                                        if($booleanTipoRedGponBk)
                                        {
                                            $objElementoPeBck = $serviceTecnico->getPeByOlt($arrayParametrosWs);
                                        }
                                        else
                                        {
                                            $objElementoPeBck = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
                                        }

                                        if(!is_object($objElementoPeBck))
                                        {
                                            return array('status' => 'ERROR', 'mensaje' => 'Imposible crear protocolo de enrutamiento. '
                                                                                          . 'No existe enlace de Switch con Pe del Backup');
                                        }
                                    }
                                }
                                else
                                {
                                    return array('status' => 'ERROR', 'mensaje' => 'No existe Información Técnica en el Backup');
                                }
                                
                                //Obetenr La IP del servicios backup
                                $objIp = $emInfraestructura->getRepository("schemaBundle:InfoIp")
                                                           ->findOneBy(array('servicioId' => $objServicioBackup->getId(),
                                                                             'estado'     => 'Activo'));
                                if(is_object($objIp))
                                {
                                    $objSubred = $emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objIp->getSubredId());
                                    
                                    if(!is_object($objSubred))
                                    {
                                        return array('status' => 'ERROR', 'mensaje' => 'No existe Información de Subred en el Backup');
                                    }
                                }
                                
                                if(is_object($objServProdRouteMapBck))
                                {
                                    if(!is_object($objServProdAsPrivadoBck))
                                    {
                                        return array('status' => 'ERROR', 'mensaje' => 'No existe Información de As Privado en el Backup');
                                    }
                                    
                                    $strObservacionBackup = 'Se realiza desconfiguración de routemap y protocolo BGP sobre enlace BACKUP'
                                                          . ' por cambio de Protocolo en enlace PRINCIPAL';
                                    
                                    $arrayParametrosRouteMap['login_aux']            = $objServicioBackup->getLoginAux();
                                    $arrayParametrosRouteMap['vrf']                  = $strVrf;
                                    $arrayParametrosRouteMap['pe']                   = $objElementoPeBck->getNombreElemento();
                                    $arrayParametrosRouteMap['asprivado']            = $objServProdAsPrivadoBck->getValor();
                                    $arrayParametrosRouteMap['protocolo']            = is_object($objServProdProtocoloBck)?
                                                                                       $objServProdProtocoloBck->getValor():$strProtocoloAnterior;
                                    $arrayParametrosRouteMap['ip_bgp']               = is_object($objIp)?$objIp->getIp():'';
                                    
                                    //Se obtiene los prefijos desfinidos para las routemaps
                                    $arrayPrefijos            = $serviceTecnico->getPrefijosCreacionRouteMap();
                                    $strPrefijoRouteMap       = isset($arrayPrefijos['strRouteMap'])?$arrayPrefijos['strRouteMap']:'';
                                    $strPrefijoRmPrefix       = isset($arrayPrefijos['strPrefix'])?$arrayPrefijos['strPrefix']:'';

                                    $arrayParametrosRouteMap['routemap_name']        = $strPrefijoRouteMap.$objServicioBackup->getLoginAux();
                                    $arrayParametrosRouteMap['routemap_prefix_name'] = $strPrefijoRmPrefix.$objServicioBackup->getLoginAux();
                                    
                                    $arrayServProdCaracRmPrefixBck = array();
                                    
                                    if(is_object($objCaractteristica))
                                    {
                                        $objProdCarac =  $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                     ->findOneBy(array("productoId"       => $objProductoBck->getId(),
                                                                                       "caracteristicaId" => $objCaractteristica->getId(),
                                                                                       "estado"           => "Activo"));
                                        if(is_object($objProdCarac))
                                        {
                                            $arrayServProdCaracRmPrefixBck = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                             ->findBy(array("servicioId"               => $objServicioBackup->getId(),
                                                                                            "productoCaracterisiticaId"=> $objProdCarac->getId(),
                                                                                            "estado"                   => "Activo")
                                                                                           );
                                        }
                                    }

                                    $strVlan = $serviceTecnico->obtenerVlanServicio($objServicioBackup);

                                    //Desconfigurar el protocolo del PE del BACKUP
                                    //Se cambia el orden de ejecución para eliminar primero la sesión BGP, por validación en equipos ASR
                                    $arrayPeticiones                      = array();
                                    $arrayPeticiones['url']               = 'enrutamientoDinamicoPe';
                                    $arrayPeticiones['accion']            = 'eliminar';
                                    $arrayPeticiones['clase_servicio']    = $objProductoBck->getNombreTecnico();
                                    $arrayPeticiones['vrf']               = $strVrf;
                                    $arrayPeticiones['pe']                = $objElementoPeBck->getNombreElemento();
                                    $arrayPeticiones['vlan']              = $strVlan;
                                    $arrayPeticiones['gateway']           = $objSubred->getGateway();
                                    $arrayPeticiones['ip_bgp']            = $objIp->getIp();
                                    $arrayPeticiones['asprivado']         = $objServProdAsPrivadoBck->getValor();
                                    $arrayPeticiones['nombre_sesion_bgp'] = $objServicioBackup->getLoginAux();
                                    $arrayPeticiones['default_gw']        = 'N';
                                    $arrayPeticiones['protocolo']         = $strProtocoloAnterior;
                                    $arrayPeticiones['tipo_enlace']       = $objServicioTecnicoBck->getTipoEnlace();
                                    $arrayPeticiones['banderaBravco']     = 'N';
                                    $arrayPeticiones['servicio']          = $objProductoBck->getNombreTecnico();
                                    $arrayPeticiones['login_aux']         = $objServicioBackup->getLoginAux();
                                    $arrayPeticiones['user_name']         = $objSession->get('user');
                                    $arrayPeticiones['user_ip']           = $objRequest->getClientIp();
                                    $arrayRespuesta                       = $serviceNetworking->callNetworkingWebService($arrayPeticiones);

                                    //En caso de existir prefixlist configurados en el enlace backup
                                    if(!empty($arrayServProdCaracRmPrefixBck))
                                    {
                                        $strObservacionBackup .= '<br>Se eliminó la routemap prefix list : ';
                                        $arrayPrefixList       = array();
                                        
                                        foreach($arrayServProdCaracRmPrefixBck as $objServProdRouteMapPrefixBck)
                                        {
                                            $arrayPrefix       = explode("|",$objServProdRouteMapPrefixBck->getValor());
                                            $arrayPrefixList[] = array(
                                                                        'ip'           => $arrayPrefix[0],
                                                                        'mask'         => $arrayPrefix[1],
                                                                        'length_type'  => $arrayPrefix[2],
                                                                        'length_value' => $arrayPrefix[3],
                                                                        'seq'          => $arrayPrefix[4]
                                                                       );
                                            
                                            $strObservacionBackup .= '<br/> - '.$objServProdRouteMapPrefixBck->getValor();
                                            
                                            $objServProdRouteMapPrefixBck->setEstado('Eliminado');
                                            $emComercial->persist($objServProdRouteMapPrefixBck);
                                            $emComercial->flush($objServProdRouteMapPrefixBck);
                                        }
                                        
                                        $arrayParametrosRouteMap['accion']                 = 'eliminar-routemap-prefix';
                                        $arrayParametrosRouteMap['routemap_prefix_list']   = $arrayPrefixList;

                                        //Desconfiguracion del PE de las prefixlist ( BACKUP )
                                        $arrayRespuestaWs = $serviceNetworking->callNetworkingWebService($arrayParametrosRouteMap);
                                    }
                                        
                                    //Desconfigurar del PE la routemap del BACKUP
                                    $arrayParametrosRouteMap['accion']  = 'eliminar-routemap-config';
                                    $arrayRespuestaWs  = $serviceNetworking->callNetworkingWebService($arrayParametrosRouteMap);
                                    
                                    $objServProdRouteMapBck->setEstado('Eliminado');
                                    $emComercial->persist($objServProdRouteMapBck);
                                    $emComercial->flush($objServProdRouteMapBck);

                                    $strObservacionBackup .= '<br>Se eliminó la RouteMap del enlace';

                                    $serviceTecnico->ingresarServicioProductoCaracteristica($objServicioBackup,
                                                                                            $objProductoBck,
                                                                                            'PROTOCOLO_ENRUTAMIENTO',
                                                                                            $strProtocolo,
                                                                                            $objSession->get('user')
                                                                                            );

                                    $objServProdProtocoloBck->setEstado('Eliminado');
                                    $emComercial->persist($objServProdProtocoloBck);
                                    $emComercial->flush($objServProdRouteMapPrefixBck);
                                    
                                    $objServicioHistorial = new InfoServicioHistorial();
                                    $objServicioHistorial->setServicioId($objServicioBackup);
                                    $objServicioHistorial->setObservacion($strObservacionBackup);
                                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                                    $objServicioHistorial->setEstado($objServicio->getEstado());
                                    $emComercial->persist($objServicioHistorial);
                                    $emComercial->flush();
                                }//end if desconfiguracion sobre backup
                            }//end foreach servicios backup
                        }//end if servicios backup

                        //Despues de realizar la configuracion en el servicio principal y backup, se envia a reconfigurar las rutas como estaticas
                        $arrayRutas  = $emInfraestructura->getRepository("schemaBundle:InfoRutaElemento")
                                                         ->findBy(array('servicioId' => $objServicio->getId(),
                                                                        'estado'     => 'Activo',
                                                                        'tipo'       => 'Ruta Dinámica'
                                                                       ));
                        if(!empty($arrayRutas))
                        {
                            $arrayPeticionesRuta                    = array();
                            $arrayPeticionesRuta['url']             = 'enrutamientoEstaticoPe';
                            $arrayPeticionesRuta['accion']          = 'agregar';
                            $arrayPeticionesRuta['clase_servicio']  = 'INTMPLS';
                            $arrayPeticionesRuta['vrf']             = $strVrf;
                            $arrayPeticionesRuta['pe']              = is_object($objElementoPe) ? $objElementoPe->getNombreElemento() :
                                                                      $objRequest->get('pe');
                            if($booleanTipoRedGpon)
                            {
                                $arrayPeticionesRuta['sw']          = "";
                                $arrayPeticionesRuta['olt']         = $objRequest->get('sw');
                            }
                            else
                            {
                                $arrayPeticionesRuta['olt']         = "";
                                $arrayPeticionesRuta['sw']          = $objRequest->get('sw');
                            }
                            $arrayPeticionesRuta['ip_destino']      = $objRequest->get('ip');
                            $arrayPeticionesRuta['option']          = 'A';
                            $arrayPeticionesRuta['servicio']        = 'INTMPLS';
                            $arrayPeticionesRuta['login_aux']       = $objServicio->getLoginAux();
                            $arrayPeticionesRuta['user_name']       = $objSession->get('user');
                            $arrayPeticionesRuta['user_ip']         = $objRequest->getClientIp();

                            foreach($arrayRutas as $objRutas)
                            {
                                if($objRutas->getSubredId())
                                {
                                    $objRutas->setTipo('Ruta Automática');
                                }
                                else
                                {
                                    $objRutas->setTipo('Ruta Estática');
                                }

                                $emInfraestructura->persist($objRutas);
                                $emInfraestructura->flush();

                                if($objRutas->getSubredId())
                                {
                                    $objSubredRuta                    = $objRutas->getSubredId();
                                    $arrayPeticionesRuta['net_lan']   = stristr($objSubredRuta->getSubred(),"/",true);
                                    $arrayPeticionesRuta['mask_lan']  = $objSubredRuta->getMascara();
                                }
                                else
                                {
                                    $arrayPeticionesRuta['net_lan']   = $objRutas->getRedLan();
                                    $arrayPeticionesRuta['mask_lan']  = $objRutas->getMascaraRedLan();
                                }

                                $arrayPeticionesRuta['name_route']      = $objRutas->getNombre();
                                $arrayPeticionesRuta['distance_admin']  = $objRutas->getDistanciaAdmin();
                                $arrayRespuestaWs                       = $serviceNetworking->callNetworkingWebService($arrayPeticionesRuta);

                                $strStatus         = $arrayRespuestaWs['status'];
                                $strMensaje        = $arrayRespuestaWs['mensaje'];

                                if($strStatus != 'OK')
                                {
                                    return array('status' => $strStatus, 'mensaje' => $strMensaje);
                                }
                            }
                        }
                    }
                }

                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strObservacionHistorial);
                $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                $objServicioHistorial->setEstado($objServicio->getEstado());
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
            }

            //-------------------------------------------------------------------
            //                  Se ingresa el nuevo protocolo
            //-------------------------------------------------------------------

            $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio, 
                                                                    $objProducto,
                                                                    'PROTOCOLO_ENRUTAMIENTO',
                                                                    $strProtocolo,
                                                                    $objSession->get('user')
                                                                    );
            
            $strObservacion = 'Se Creo el Protocolo de Enrutamiento <b>'.$strProtocolo.'</b>';
            
            if($strProtocolo == 'BGP')
            {
                $strObservacion = $strObservacion.' con As Privado : <b>'.$objRequest->get('asPrivado').'</b>';
            }
            
            //se crea registro de historial en el servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($strObservacion);
            $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setUsrCreacion($objSession->get('user'));
            $objServicioHistorial->setEstado($objServicio->getEstado());
            $emComercial->persist($objServicioHistorial);
            $emComercial->flush();
        }
        else
        {
            return array('status' => 'ERROR', 'mensaje' => "Problemas con el Ws. ".$strMensaje);
        }
        
        return array ('status' => 'OK', 'mensaje' => 'OK');
    }
    
    /**     
     * ajaxCambiarUltimaMillaAction
     * 
     * Funcion que de encarga de realizar el cambio de ultima milla de un cliente
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1  Se agregan validaciones para soportar cambio de Um Radio Tn
     * 
     * @since 07-04-2016
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     * 
     * @Secure(roles="ROLE_151-3779")
     */
    public function ajaxCambiarUltimaMillaAction()
    {
        $response    = new Response();
        $request     = $this->get('request');
        $session     = $this->get('session');                                               
        
        try
        {
            /* @var $cambioPuerto InfoCambiarPuerto */
            $cambioPuerto = $this->get('tecnico.InfoCambiarPuerto');

            $arrayPeticiones=array(
                                    'idEmpresa'             => $session->get('idEmpresa'),
                                    'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                    'idServicio'            => $request->get('idServicio'),
                                    'mac'                   => $request->get('mac'),
                                    'macRadio'              => $request->get('macRadio'),
                                    'vlan'                  => $request->get('vlan'),
                                    'capacidad1'            => $request->get('capacidad1'),
                                    'capacidad2'            => $request->get('capacidad2'),
                                    'usrCreacion'           => $session->get('user'),
                                    'ipCreacion'            => $request->getClientIp()
                                  );                
            if ($request->get('ultimaMilla') == "Radio")
            {
                $result = $cambioPuerto->cambiarUltimaMillaRadioTn($arrayPeticiones);
            }
            else
            {
                $result = $cambioPuerto->cambiarUltimaMillaTn($arrayPeticiones);
            }
        } 
        catch (\Exception $ex) 
        {
            $result = "ERROR ".$ex->getMessage();
        }
        
        $response->setContent($result);
        return $response;  
    }
    

    /**     
     * ajaxCambiarElementoPasivoAction
     * 
     * Funcion que devuelve un elemento segun el tipo y el puerto del SW
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0
     * 
     */    
    
    public function ajaxGetElementosByPuertoAction()
    {
        $objResponse  = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objRequest   = $this->get('request');
        
        $intInterface        = $objRequest->get('puertoElemento');
        $strTipoElemento     = $objRequest->get('tipoElemento');
        
        $emComercial         = $this->get('doctrine')->getManager();
        
       
        try
        {
            $arrayParamRequest = array('interfaceElementoConectorId' => $intInterface,
                                                      'tipoElemento' => $strTipoElemento);

            $arrayResponse = $emComercial->getRepository("schemaBundle:InfoElemento")
                                         ->getElementoClienteByTipoElemento($arrayParamRequest);


            if(isset($arrayResponse['msg']) && $arrayResponse['msg'] == "FOUND")
            {
                //si encuenctra asigno ese elemento
                $arrayElementos[] = array('idElemento'        => $arrayResponse['idElemento'],
                                          'nombreElemento'    => $arrayResponse['nombreElemento']);

                  $arrayResult['total']       = count($arrayElementos);
                  $arrayResult['encontrados'] = $arrayElementos;
                
            }
            else
            {
                throw new \Exception('No existe relación con elementos tipo '.$strTipoElemento);
            }
        }
        catch (\Exception $ex) 
        {
            $arrayResult['status']  = "ERROR";
            $arrayResult['mensaje'] = $ex->getMessage();            
        }
        
        $objResponse->setContent(json_encode($arrayResult));
        
        return $objResponse;
    }
    
    /**
     * 
     * Funcion que se encarga de obtener la informacion de los parametros ya parametrizados, 
     * estos datos seran mostrados en un combobox del formulario TNG.
     *       
     * @author Jesus Banchen <jbanchen@telconet.ec>
     * @version 1.0
     * @since 05-04-2019
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     * 
     */
    public function codConexionUpStreamTngAction()
    {
        $arrayEncontrados                   = array();
        $arrayParametros                    = array();
        $arrayParametros['strDescripcion']  = 'CodConexionUpStream';
        $arrayParametros['strModulo']       = 'TECNICO';
        $arrayParametros['strEstado']       = 'Activo';
        $emGeneral                          = $this->getDoctrine()->getManager('telconet_general');
        $objRespuesta                       = new JsonResponse();
              
        $arrayAdmiParametroCab = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')->findParametrosCab($arrayParametros);
        
        if ($arrayAdmiParametroCab)
        {
            $intNum = count($arrayAdmiParametroCab);

            foreach ($arrayAdmiParametroCab['arrayResultado'] as $arrayAdmiParamCab):
                $arrayEncontrados[] = array('intIdParametro' => $arrayAdmiParamCab['intIdParametro'],
                    'strNombreParametro' => $arrayAdmiParamCab['strNombreParametro']
                );
            endforeach;
            
            $arrayData = json_encode($arrayEncontrados);
            $objJson = '{"total":"' . $intNum . '","encontrados":' . $arrayData . '}';
            
            $objRespuesta->setContent($objJson);
            return $objRespuesta;
        }
    }

    /**
     * 
     * Funcion que se encarga de obtener la informacion de los parametros ya parametrizados, 
     * que se mostrara de pendiendo de la accion del combobox del formulario TNG.
     * 
     * @author Jesus Banchen <jbanchen@telconet.ec>
     * @version 1.0
     * @since 05-04-2019
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     * 
     */
     public function getInfoConexionUpStreamAction()
    {
        $arrayEncontrados                     = array();
        $objRequest                           = $this->getRequest();
        $arrayParametros                      = array();
        $arrayParametros['intIdParametroCab'] = $objRequest->get('idElemento');
        $arrayParametros['strEstado']         = 'Activo';
        $emGeneral                            = $this->getDoctrine()->getManager('telconet_general');
        $objRespuesta                       = new JsonResponse();
              
        $arrayAdmiParametroDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findParametrosDet($arrayParametros);

        if ($arrayAdmiParametroDet)
        {
            $intNum = count($arrayAdmiParametroDet);

            foreach ($arrayAdmiParametroDet['arrayResultado'] as $arrayAdmiParamDet):

                $arrayEncontrados[] = array('intIdParametroDet' => $arrayAdmiParamDet['intIdParametroDet'],
                                            'strDescripcionDet' => $arrayAdmiParamDet['strDescripcionDet'],
                                            'strValor1'         => $arrayAdmiParamDet['strValor1']
                );
            endforeach;

            $objData = json_encode($arrayEncontrados);
            $objJson = '{"total":"' . $intNum . '","encontrados":' . $objData . '}';

            $objRespuesta->setContent($objJson);
            return $objRespuesta;
        }
    }

    /**     
     * ajaxCambiarElementoPasivoAction
     * 
     * Funcion que de encarga de realizar el cambio del elemento pasivo de un cliente
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 Se valida caso cuando se elimina el enlace de un cliente 
     * 
     */
    public function ajaxCambiarElementoPasivoAction()
    {
        $objResponse    = new Response();
        $objRequest  = $this->get('request');
        $objSession  = $this->get('session'); 
        
        $intElementoConector = $objRequest->get('idElementoConector');
        $intInterface        = $objRequest->get('idHilo');
        $intServicio         = $objRequest->get('idServicio');
        
        $strElementoConector = $objRequest->get('strElementoConector');
        $strHilo             = $objRequest->get('strHilo');
        $strElementoNuevo    = $objRequest->get('strElementoConectorNuevo');
        $strHiloNuevo        = $objRequest->get('strHiloNuevo');
        
        $strStatus  = 'OK';
        $strMensaje = 'OK';        
        
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial         = $this->get('doctrine')->getManager();
        
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {   
            $objServicio = $emInfraestructura->getRepository('schemaBundle:InfoServicio')->find($intServicio);
            
            if(is_object($objServicio))
            {
                //consulto la info tecnica
                $objServicioTecnico = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intServicio);
                
                if(is_object($objServicioTecnico))
                {
                    
                    $objElementoContenedor = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                               ->findOneBy(array( 'elementoIdB' => $intElementoConector,
                                                                                  'estado'      => 'Activo'));
                    
                    if(is_object($objElementoContenedor))
                    {
                        $intElementoContenedor = $objElementoContenedor->getElementoIdA();
                    }
                    else
                    {
                        throw new \Exception('No existe elemento Contenedor.');
                    }
                    
                    //procedo a eliminar los enlaces y liberar el puerto                    
                    $objInterfaceNuevo = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($intInterface);
                    
                    if(is_object($objInterfaceNuevo))
                    {
                        $objInterface = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                          ->find($objServicioTecnico->getInterfaceElementoClienteId()) ;
                        
                        if(is_object($objInterface))
                        {                          

                            $objEnlace = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                           ->findOneBy(array('interfaceElementoFinId' => $objInterface->getId(),
                                                                             'estado'                 => 'Activo'));

                            if(is_object($objEnlace))
                            {                            
                                $objEnlace->setEstado('Eliminado');
                                $emInfraestructura->persist($objEnlace);

                                //libero la interface antigua
                                $objInterface->setEstado('not connect');
                                $emInfraestructura->persist($objInterface);
                                $emInfraestructura->flush();
                            }

                            $objTipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                              ->find($objServicioTecnico->getUltimaMillaId());                        
                            //creo el nuevo enlace
                            $objEnlaceNuevo = new InfoEnlace();
                            $objEnlaceNuevo->setInterfaceElementoIniId($objInterfaceNuevo);
                            $objEnlaceNuevo->setInterfaceElementoFinId($objInterface);
                            $objEnlaceNuevo->setTipoMedioId($objTipoMedio);
                            $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                            $objEnlaceNuevo->setEstado("Activo");
                            $objEnlaceNuevo->setUsrCreacion($objSession->get('user'));
                            $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                            $objEnlaceNuevo->setIpCreacion($objRequest->getClientIp());
                            $emInfraestructura->persist($objEnlaceNuevo);
                            $emInfraestructura->flush();                             
                        }
                        //actualizo la nueva interface
                        $objInterfaceNuevo->setEstado('connected');
                        $emInfraestructura->persist($objInterfaceNuevo);
                        $emInfraestructura->flush();
                        
                    }
                    else
                    {
                        throw new \Exception('No existe interface del elemento.');
                    }
                     
                    //obtengo todos los servicios del punto
                    $arrayServicios = $emInfraestructura->getRepository('schemaBundle:InfoServicio')
                                                        ->findBy(array('puntoId'=> $objServicio->getPuntoId()));
                
                    foreach ($arrayServicios as $objServicios)
                    {
                        $objServiciosTecnico = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                             ->findOneBy(array('servicioId'                 =>$objServicios->getId(),
                                                               'interfaceElementoId'        =>$objServicioTecnico->getInterfaceElementoId()));
                        //actualizo la info tecnica de los servicios
                        if(is_object($objServiciosTecnico))
                        {
                            $objServiciosTecnico->setElementoContenedorId($intElementoContenedor);
                            $objServiciosTecnico->setElementoConectorId($intElementoConector);
                            $objServiciosTecnico->setInterfaceElementoConectorId($intInterface);
                            $emInfraestructura->persist($objServiciosTecnico);
                            $emInfraestructura->flush();
                        }
                    }
                }
            }
            else
            {
                throw new \Exception ('No existe el servicio.');
            }
            
            $objServicioCom = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicio);
            $objInfoServicioHistorial = new InfoServicioHistorial();
            $objInfoServicioHistorial->setServicioId($objServicioCom);
            $objInfoServicioHistorial->setObservacion("Se realizó el cambio de elemento pasivo: <br> <b>Elemento Anterior:</b> <br> "
                                                    ."Nombre: ".$strElementoConector." <br> Puerto: ".$strHilo." <br> <b>Elemento Nuevo:</b> "
                                                    . "<br> Nombre: ".$strElementoNuevo." <br> Puerto: ".$strHiloNuevo." <br>");
            $objInfoServicioHistorial->setEstado($objServicioCom->getEstado());
            $objInfoServicioHistorial->setUsrCreacion($objSession->get('user'));
            $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objInfoServicioHistorial->setIpCreacion($objRequest->getClientIp());
            $emComercial->persist($objInfoServicioHistorial);
            $emComercial->flush();        
            
            $emInfraestructura->commit();
         
        } 
        catch (\Exception $ex) 
        {
            $strStatus  = 'ERROR';
            $strMensaje = $ex->getMessage();
            
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }            
        }
        
        if($emInfraestructura->getConnection()->isTransactionActive())
        {
            $emInfraestructura->getConnection()->close();
        }        

        $arrayResult['status']  = $strStatus;
        $arrayResult['mensaje'] = $strMensaje;        
        
        $objResponse->setContent(json_encode($arrayResult));
        return $objResponse;  
    }
        
    
    /**     
     * ajaxRegulaRadioTnAction
     * 
     * Funcion que se encarga de realizar la regularización de un servicio de radio TN
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0
     * @since 22-08-2016
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     * 
     * @Secure(roles="ROLE_151-4597")
     */
    public function ajaxRegulaRadioTnAction()
    {
        $response            = new Response();
        $request             = $this->get('request');
        $strMensajeRespuesta = "ERROR";
        $session             = $this->get('session');
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial         = $this->get('doctrine')->getManager('telconet');
        $serviceUtil         = $this->get('schema.Util');
        $strTipoRegula       = $request->get('tipoRegularizacion');
        $emComercial->getConnection()->beginTransaction();
        try
        {
            $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->find($request->get('idServicio'));
            if ($strTipoRegula == 'nuevo')
            {
                $arrayPeticiones = array(
                                        'idServicio'     => $request->get('idServicio'),
                                        'nombreSw'       => $request->get('nombreSw'),
                                        'puertoSw'       => $request->get('puertoSw'),
                                        'modeloRadioBb'  => $request->get('modeloRadioBb'),
                                        'macRadioBb'     => $request->get('macRadioBb'),
                                        'ipRadioBb'      => $request->get('ipRadioBb'),
                                        'sidRadioBb'     => $request->get('sidRadioBb'),
                                        'modeloRadioCli' => $request->get('modeloRadioCli'),
                                        'macRadioCli'    => $request->get('macRadioCli'),
                                        'sidRadioCli'    => $request->get('sidRadioCli'),
                                        'user'           => $session->get('user'),
                                        'clienteIp'      => $request->getClientIp(),
                                        );                

                $strMensajeRespuesta = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                                         ->ejecutaRegularizacionRadioTn($arrayPeticiones);
                if ($strMensajeRespuesta == "OK")
                {
                    //historial del servicio
                    $objInfoServicioHistorial = new InfoServicioHistorial();
                    $objInfoServicioHistorial->setServicioId($objInfoServicio);
                    $objInfoServicioHistorial->setObservacion("Se regularizo la Información Técnica del servicio");
                    $objInfoServicioHistorial->setEstado($objInfoServicio->getEstado());
                    $objInfoServicioHistorial->setUsrCreacion($session->get('user'));
                    $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objInfoServicioHistorial->setIpCreacion($request->getClientIp());
                    $emComercial->persist($objInfoServicioHistorial);
                    $emComercial->flush();
                    $emComercial->getConnection()->commit();
                }
            }
            else
            {
                $objInfoServicioTecnico     = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneBy(array( "servicioId" => $request->get('idServicio')));
                
                $objInfoServicioTecnicoInfo = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneBy(array( "servicioId" => $request->get('idServicioInfo')));
                
                //se actualiza data tecnica del servicio radio TN que se encontraba inconsistente
                $objInfoServicioTecnico->setElementoId($objInfoServicioTecnicoInfo->getElementoId());
                $objInfoServicioTecnico->setInterfaceElementoId($objInfoServicioTecnicoInfo->getInterfaceElementoId());
                $objInfoServicioTecnico->setElementoConectorId($objInfoServicioTecnicoInfo->getElementoConectorId());
                $objInfoServicioTecnico->setElementoClienteId($objInfoServicioTecnicoInfo->getElementoClienteId());
                $objInfoServicioTecnico->setInterfaceElementoClienteId($objInfoServicioTecnicoInfo->getInterfaceElementoClienteId());
                $emComercial->persist($objInfoServicioTecnico);
                
                //historial del servicio
                $objInfoServicioHistorial = new InfoServicioHistorial();
                $objInfoServicioHistorial->setServicioId($objInfoServicio);
                $objInfoServicioHistorial->setObservacion("Se regularizó la Información Técnica del servicio");
                $objInfoServicioHistorial->setEstado($objInfoServicio->getEstado());
                $objInfoServicioHistorial->setUsrCreacion($session->get('user'));
                $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objInfoServicioHistorial->setIpCreacion($request->getClientIp());
                $emComercial->persist($objInfoServicioHistorial);
                
                $emComercial->flush();
                $emComercial->getConnection()->commit();
                
                $strMensajeRespuesta = "OK";
            }
        } 
        catch (\Exception $ex) 
        {
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            $arrayMensajes = explode("[*]", $ex->getMessage());
            if (count($arrayMensajes)>1)
            {
                $strMensajeRespuesta = "Se presento un error al ejecutar la transacción: ".$arrayMensajes[1];
            }
            else
            {
                $strMensajeRespuesta = "Se presento un error al ejecutar la transacción.";
            }
            $serviceUtil->insertError('TELCOS', 'ajaxRegulaRadioTnAction', $ex->getMessage(), $session->get('user'), $request->getClientIp());
        }
        if($emComercial->getConnection()->isTransactionActive())
        {
            $emComercial->getConnection()->close();
        }
        $response->setContent($strMensajeRespuesta);
        return $response;  
    }
    
    /**     
     * ajaxObtieneServiciosRadioTnAction
     * 
     * Funcion que se encarga de recuperar los clientes Radio TN que tienen información regularizada
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0
     * @since 22-08-2016
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     * 
     * @Secure(roles="ROLE_151-4597")
     */
    public function ajaxObtieneServiciosRadioTnAction()
    {
        $response            = new Response();
        $request             = $this->get('request');
        $strRespuesta        = "";
        $session             = $this->get('session');
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial         = $this->get('doctrine')->getManager('telconet');
        $serviceUtil         = $this->get('schema.Util');
        $arrayEstados        = array('Activo', 'In-Corte', 'EnPruebas');
        try
        {
            $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($request->get('idServicio'));
            $arrayPeticiones = array(
                                    'puntoId'     => $objInfoServicio->getPuntoId()->getId(),
                                    'estados'     => $arrayEstados,
                                    'ultimaMilla' => 'Radio'
                                    );                

            $strRespuesta = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->getRegistrosServiciosRadioTn($arrayPeticiones);
        } 
        catch (\Exception $ex) 
        {
            $strRespuesta = "Error al obtener información.";
            $serviceUtil->insertError('TELCOS', 'ajaxObtieneServiciosRadioTnAction', $ex->getMessage(), $session->get('user'), $request->getClientIp());
        }
        
        $response->setContent($strRespuesta);
        return $response;  
    }
    
    /**     
     * ajaxObtieneInfoServicioRadioTnAction
     * 
     * Funcion que se encarga de recuperar información regularizada de un servicio Radio Tn
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0
     * @since 23-08-2016
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     * 
     * @Secure(roles="ROLE_151-4597")
     */
    public function ajaxObtieneInfoServicioRadioTnAction()
    {
        $response            = new Response();
        $request             = $this->get('request');
        $strRespuesta        = "";
        $arrayPeticiones     = array();
        $arrayRespuesta      = array();
        $session             = $this->get('session');
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial         = $this->get('doctrine')->getManager('telconet');
        $serviceUtil         = $this->get('schema.Util');
        $arrayEstados        = array('Activo', 'In-Corte', 'EnPruebas');
        try
        {
            /* @var $serviceDataTecnica DataTecnicaService */
            $serviceDataTecnica  = $this->get('tecnico.DataTecnica');
        
            $arrayPeticiones = array(   'idServicio'    => $request->get('idServicio'),
                                        'idEmpresa'     => $session->get('idEmpresa'),
                                        'prefijoEmpresa'=> $session->get('prefijoEmpresa'));

            $arrayRespuesta  = $serviceDataTecnica->getDataTecnica($arrayPeticiones);
            $arrayRespuesta  = array ('nombreSw' => $arrayRespuesta['elemento']->getNombreElemento(), 
                                      'puertoSw' => $arrayRespuesta['interfaceElemento']->getNombreInterfaceElemento(),
                                      'radioBb'  => $arrayRespuesta['interfaceElementoConector']->getElementoId()->getNombreElemento(),
                                      'radioCli' => $arrayRespuesta['elementoRoseta']->getNombreElemento(),
                                      'cpeCli'   => $arrayRespuesta['elementoCpe']->getNombreElemento());
            $strRespuesta    = json_encode($arrayRespuesta);
        } 
        catch (\Exception $ex) 
        {
            $strRespuesta = "Error al obtener información.";
            $serviceUtil->insertError('TELCOS', 'ajaxObtieneInfoServicioRadioTnAction', $ex->getMessage(), $session->get('user'), $request->getClientIp());
        }
        
        $response->setContent($strRespuesta);
        return $response;  
    }
    
    /**
     * @Secure(roles="ROLE_151-3779")
     * Función ajax que sirve para crear la solicitud de cambio de UM
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 10-05-2016
     */
    public function ajaxCrearSolicitudCambioUMAction()
    {
        $response    = new Response();
        $request     = $this->get('request');
        $session     = $this->get('session');
         
        /* @var $cambioPuerto InfoCambiarPuerto */
        $cambioPuerto = $this->get('tecnico.InfoCambiarPuerto');

        $arrayPeticiones = array(
                                'idEmpresa'             => $session->get('idEmpresa'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'idServicio'            => $request->get('idServicio'),
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $request->getClientIp()
                                );

        $respuesta = $cambioPuerto->crearSolicitudCambioUM($arrayPeticiones);
        
        return $response->setContent($respuesta);
    }
    
    /**
     * @Secure(roles="ROLE_151-3779")
     * Función ajax que sirve para cambiar la data por migración a anillo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 10-05-2016
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 30-18-2019 - Se agrega el parametro tipoSolicitud con el objetivo de reutilizar esta funcionalidad en la herramienta individual
     *                           de migracion de vlan
     */
    public function ajaxCrearSolicitudMigracionAnilloTnAction()
    {
        $response         = new Response();
        $request          = $this->get('request');
        $session          = $this->get('session');
        $strMigracionVlan = $request->get('strMigracionVlan')?$request->get('strMigracionVlan'):"N";
        $strTipoSolicitud = "SOLICITUD MIGRACION ANILLO";

        if($strMigracionVlan === "S")
        {
            $strTipoSolicitud = "SOLICITUD MIGRACION DE VLAN";
        }

        /* @var $cambioPuerto InfoCambiarPuerto */
        $cambioPuerto = $this->get('tecnico.InfoCambiarPuerto');

        $arrayPeticiones = array(
                                'idEmpresa'                 => $session->get('idEmpresa'),
                                'prefijoEmpresa'            => $session->get('prefijoEmpresa'),
                                'idServicio'                => $request->get('idServicio'),
                                'idElementoPadre'           => $request->get('idElementoPadre'),
                                'ultimaMilla'               => $request->get('ultimaMilla'),
                                'hilo'                      => "",
                                'tipoSolicitud'             => $strTipoSolicitud,
                                'usrCreacion'               => $session->get('user'),
                                'ipCreacion'                => $request->getClientIp(),
                                'personaEmpresaRolId'       => $request->get('idPersonaEmpresaRol'),
                                'capacidadUno'              => $request->get('capacidadUno'),
                                'capacidadDos'              => $request->get('capacidadDos'),
                                'vlan'                      => $request->get('vlan'),
                                'vrf'                       => $request->get('vrf'),
                                'protocolo'                 => $request->get('protocolo'),
                                'mascara'                   => $request->get('mascara'),
                                'defaultGateway'            => $request->get('defaultGateway'),
                                'asPrivado'                 => $request->get('asPrivado'),
                                'idSubred'                  => $request->get('idSubred'),
                                'flagRecursos'              => $request->get('flagRecursos'),
                                'tipoSubred'                => $request->get('tipoSubred'),
                                'anillo'                    => $request->get('anillo'),
                                'nombreElemento'            => $request->get('nombreElemento'),
                                'nombreElementoConector'    => $request->get('nombreElementoConector'),
                                'nombreInterfaceElemento'   => $request->get('nombreInterfaceElemento'),
                                );

        $arrayRespuesta = $cambioPuerto->solicitarMigracionAnilloTN($arrayPeticiones);
        
        return $response->setContent($arrayRespuesta['mensaje']);
    }
    
    /**
     * @Secure(roles="ROLE_151-3779")
     * Función que sirve para ejecutar la migracion anillo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 10-05-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 05-07-2016 - Se agrega MAC al array para configurar el BW del cambio de ultima milla
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 28-08-2019 - Se agrega el parametro 'strMigracionVlan' con el objetivo de reutilizar esta funcionalidad en la herramienta
     *                           individual de migración de vlan
     */
    public function ajaxEjecutarMigracionAnilloAction()
    {
        $response    = new Response();
        $request     = $this->get('request');
        $session     = $this->get('session');
         
        /* @var $cambioPuerto InfoCambiarPuerto */
        $cambioPuerto = $this->get('tecnico.InfoCambiarPuerto');
        
        $arrayPeticiones = array(
                                'idEmpresa'             => $session->get('idEmpresa'),
                                'prefijoEmpresa'        => $session->get('prefijoEmpresa'),
                                'idServicio'            => $request->get('idServicio'),
                                'idElementoPadre'       => $request->get('idElementoPadre'),
                                'idElemento'            => $request->get('idElemento'),
                                'idInterfaceElemento'   => $request->get('idInterfaceElemento'),
                                'vlan'                  => $request->get('vlan'),
                                'mac'                   => $request->get('mac'),
                                'vrf'                   => $request->get('vrf'),
                                'protocolo'             => $request->get('protocolo'),
                                'asPrivado'             => $request->get('asPrivado'),
                                'ipServicio'            => $request->get('ipServicio'),
                                'subredServicio'        => $request->get('subredServicio'),
                                'capacidadUno'          => $request->get('capacidadUno'),
                                'capacidadDos'          => $request->get('capacidadDos'),
                                'rdId'                  => $request->get('rdId'),
                                'anillo'                => $request->get('anillo'),
                                'nombreElementoPadre'   => $request->get('nombreElementoPadre'),
                                'mascaraSubredServicio' => $request->get('mascaraSubredServicio'),
                                'gwSubredServicio'      => $request->get('gwSubredServicio'),
                                'defaultGateway'        => $request->get('defaultGateway'),
                                'tipoEnlace'            => $request->get('tipoEnlace'),
                                'strMigracionVlan'      => $request->get('strMigracionVlan')?$request->get('strMigracionVlan'):"",
                                'usrCreacion'           => $session->get('user'),
                                'ipCreacion'            => $request->getClientIp(),
                                );

        $arrayRespuesta = $cambioPuerto->ejecutaMigracionAnillo($arrayPeticiones);
        
        return $response->setContent($arrayRespuesta['mensaje']);
    }
    
    /**
     * @Secure(roles="ROLE_332-8") 
     * 
     * Documentación para el método 'ajaxEliminarProtocoloEnrutamientoAction'.
     *
     * Método utilizado para eliminar un protocolo de enrutamiento
     *
     * @param int id Id del protocolo de enrutamiento a eliminar
     *
     * @return Response response
     *
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 26-12-2015
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 19-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                           enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     *
     */
    public function ajaxEliminarProtocoloEnrutamientoAction()
    {
        $response    = new Response();
        $request     = $this->get('request');
        $session     = $this->get('session');

        $strBanderaLineasBravco = "N";
        $strRouteTargetExport   = "";
        $strRouteTargetImport   = "";
        $strRazonSocial         = "";

        $emComercial = $this->get('doctrine')->getManager();
        $msg         = "El protocolo de enrutamiento ha sido eliminado exitosamente.";
        
        $idProtocoloEnrutamiento = $request->get('id');
        
        $idServicio     = $request->get('idServicio');
        $idProducto     = $request->get('idProducto');
        $nombreTecnico  = $request->get('nombreTecnico');
        $idElemento     = $request->get('idElemento');
        $protocolo      = $request->get('protocolo');
        $asPrivado      = $request->get('asPrivado');
        
        $vrf            = $request->get('vrf');
        $pe             = $request->get('pe');
        $vlan           = $request->get('vlan');
        $gateway        = $request->get('gateway');
        $ipServicio     = $request->get('ip');
        $loginAux       = $request->get('loginAux');
        $tipoEnlace     = $request->get('tipoEnlace');
        
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            $objProtocoloEnrutamiento = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->find($idProtocoloEnrutamiento);
            
            if($objProtocoloEnrutamiento)
            {
                $objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
                $objProducto        = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($idProducto);
                
                //solo si el estado es activo, ejecuta Ws
                if($objServicio->getEstado()=="Activo")
                {
                    // ------------------------------------------------------------------------------------
                    // call al WebService NetworkingScriptsService
                    // ------------------------------------------------------------------------------------
                    // 
                    //Consultar Razon Social
                    $objInfoPersona = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();

                    if(is_object($objInfoPersona))
                    {
                        $strRazonSocial = $objInfoPersona->getRazonSocial();
                    }

                    if(!empty($strRazonSocial))
                    {
                        $arrayRazonesSociales = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('PROYECTO MONITOREO CLIENTES GRUPO BRAVCO',
                                                                     'INFRAESTRUCTURA',
                                                                     'ACTIVAR SERVICIO',
                                                                     'RAZON SOCIAL GRUPO BRAVCO',
                                                                     $strRazonSocial,
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '');
                    }

                    if(isset($arrayRazonesSociales["valor1"]) && !empty($arrayRazonesSociales["valor1"]))
                    {
                        $strBanderaLineasBravco = "S";
                        $strRouteTargetExport   = $arrayRazonesSociales["valor2"];
                        $strRouteTargetImport   = $arrayRazonesSociales["valor3"];
                        $strRazonSocial         = $arrayRazonesSociales["valor4"];
                    }

                    $arrayPeticiones = array();
                    $arrayPeticiones['url']    = 'enrutamientoDinamicoPe';
                    $arrayPeticiones['accion'] = 'eliminar';
                    //...
                    $arrayPeticiones['clase_servicio']    = $objProducto->getNombreTecnico();
                    $arrayPeticiones['vrf']               = $vrf;
                    $arrayPeticiones['pe']                = $pe;
                    $arrayPeticiones['vlan']              = $vlan;
                    $arrayPeticiones['gateway']           = $gateway;
                    $arrayPeticiones['ip_bgp']            = $ipServicio;
                    $arrayPeticiones['asprivado']         = $asPrivado;
                    $arrayPeticiones['nombre_sesion_bgp'] = $loginAux;
                    $arrayPeticiones['default_gw']        = 'N';
                    $arrayPeticiones['protocolo']         = $protocolo;
                    $arrayPeticiones['tipo_enlace']       = $tipoEnlace;
                    $arrayPeticiones['banderaBravco']     = 'N';
                    //...
                    $arrayPeticiones['servicio']          = $objProducto->getNombreTecnico();
                    $arrayPeticiones['login_aux']         = $loginAux;
                    $arrayPeticiones['user_name']         = $session->get('user');
                    $arrayPeticiones['user_ip']           = $request->getClientIp();
                    //...

                    //Se envian a configurar lineas de monitoreo de enlaces de datos
                    if($strBanderaLineasBravco === "S")
                    {
                        $arrayPeticiones['razon_social'] = $strRazonSocial;
                        $arrayPeticiones['rt_export']    = $strRouteTargetExport;
                        $arrayPeticiones['rt_import']    = $strRouteTargetImport;
                    }

                    //Ejecucion del metodo via WS para realizar la configuracion del SW
                    $networkingScriptsService = $this->get('tecnico.NetworkingScripts');
                    $arrayRespuesta = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);

                    $status  = $arrayRespuesta['status'];
                    $mensaje = $arrayRespuesta['mensaje'];
                    // ------------------------------------------------------------------------------------
                }
                else
                {
                    $status = 'OK';
                }
                
                if($status == 'OK')
                {
                    $objProtocoloEnrutamiento->setEstado('Eliminado');
                    $emComercial->persist($objProtocoloEnrutamiento);
                    
                    $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($objProtocoloEnrutamiento->getServicioId());
                    
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setObservacion('Se Elimino el protocolo de enrutamiento <b>'.$objProtocoloEnrutamiento->getValor().'</b>');
                    $objServicioHistorial->setIpCreacion($request->getClientIp());
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setUsrCreacion($session->get('user'));
                    $objServicioHistorial->setEstado($objServicio->getEstado());
                    $emComercial->persist($objServicioHistorial);
                        
                    $emComercial->flush();
                    $emComercial->getConnection()->commit();
                }
                else
                {
                    $response = new Response("Problemas con el Ws. ".$mensaje); 
                    $response->setStatusCode('406');
                    return $response;
                }
            }
            else
            {
                $msg = "Error Eliminar Protocolo de Enrutamiento: No existe protocolo de enrutamiento a eliminar con id: ".$idProtocoloEnrutamiento;
                error_log($msg);
            }
        }
        catch (\Exception $e) 
        {
            $msg = "Error Eliminar Protocolo de Enrutamiento: ".$e->getMessage();
            error_log($msg);
            
            $emComercial->getConnection()->rollback();
            $emComercial->getConnection()->close();
            
        }
        
        $response->setContent($msg);
        return $response;  
        
    }

     /**
     * Método para obtener Datos del Backbone
     *
     * @author Initial - 1.0
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.1 05-08-2019 - Se agrega el producto L3MPLS SDWAN a la validación.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     *
     * @return JsonResponse
     */
    public function ajaxGetDatosBackboneL3mplsAction()
    {
        $response           = new JsonResponse();
        $emComercial        = $this->get('doctrine')->getManager();
        $emInfraestructura  = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        $idServicio         = $this->get('request')->get('idServicio');
        $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array( "servicioId" => $objServicio->getId()));       
        
        if($objServicio->getProductoId()->getNombreTecnico() === 'INTMPLS' 
            || $objServicio->getProductoId()->getNombreTecnico() === 'INTERNET SDWAN')
        {
            $respuesta = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                     ->getJsonInfoBackboneInternetMPLS($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico);
        }
        else if($objServicio->getProductoId()->getNombreTecnico() === 'L3MPLS' || 
                $objServicio->getProductoId()->getNombreTecnico() === 'L3MPLS SDWAN')
        {
            $respuesta = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                     ->getJsonInfoBackboneL3mpls($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico);
        }
        
        $response->setContent($respuesta);
        
        return $response;
    }
    
     /**
     *
     * Documentación de la funcion 'consultarSubredAsignadaAction'.
     *
     * Método que consulta la subred asignada
     *
     * @return $objRespuesta retorna la subred asignada
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 03-07-2020
     */
    public function consultarSubredAsignadaAction()
    {
        $emInfraestructura  = $this->getDoctrine()->getManager('telconet_infraestructura');
        $objPeticion        = $this->getRequest();
        $objSession         = $objPeticion->getSession();
        $arrayParametros    = array();
        $arrayParametrosWs  = array();
        $intIdPe            = "";
        $strUsoSubred       = 'RUTASINTMPLS';
        $objRespuesta       = new Response();
        $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil        = $this->get('schema.Util');
        $objRespuesta->headers->set('Content-Type', 'text/plain');

        $emInfraestructura->getConnection()->beginTransaction();

        $intIdServicio = $objPeticion->get("idServicio");
        $intIdElemento = $objPeticion->get("idElemento");
        $strMascara    = $objPeticion->get("maskLan");
        $strOrigen     = $objPeticion->get("origen");
        $strSubred     = $objPeticion->get("subred");

        $arrayParametrosWs["intIdElemento"] = $intIdElemento;
        $arrayParametrosWs["intIdServicio"] = $intIdServicio;

        $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosWs);

        if($objElementoPe)
        {
            $intIdPe = $objElementoPe->getId();
        }

        try
        {
            if($strOrigen === "select" && $strSubred !== "")
            {
                // Obtener Subred
                $objSubred = $emInfraestructura->getRepository('schemaBundle:InfoSubred')->findOneBy(array("subred" => $strSubred,
                                                                                                           "estado" => "Reservada"));

                //Verificamos si la subred asignada no se encuentra ya utilizada en una ruta estatica
                if(is_object($objSubred))
                {
                    //Verificamos si la subred asignada no se encuentra ya utilizada en una ruta estatica
                    if(is_object($objSubred))
                    {
                        //Poner en estado Ocupada la subred
                        $objSubred->setEstado("Ocupado");
                        $emInfraestructura->persist($objSubred);
                        $emInfraestructura->flush();

                        $emInfraestructura->getConnection()->commit();
                    }

                    //Si existe una subred generada previamente se envia a liberar
                    $arrayParametros                      = array();
                    $arrayParametros['tipoAccion']        = 'liberar';
                    $arrayParametros['uso']               = $strUsoSubred;
                    $arrayParametros['subredId']          = $objSubred->getId();
                    $arrayParametros['elementoId']        = $intIdPe;

                    $emInfraestructura->getRepository('schemaBundle:InfoSubred')->provisioningSubred($arrayParametros);
                }
            }

            //Asignar nueva subred
            $arrayParametros               = array();
            $arrayParametros['tipoAccion'] = 'asignar';
            $arrayParametros['uso']        = $strUsoSubred;
            $arrayParametros['mascara']    = $strMascara;
            $arrayParametros['elementoId'] = $intIdPe;

            $arrayResponse = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                               ->provisioningSubred($arrayParametros);

            if($arrayResponse['msg']=='OK')
            {
                // Obtener Subred
                $objSubred = $emInfraestructura->getRepository('schemaBundle:InfoSubred')->find($arrayResponse['subredId']);

                if(is_object($objSubred))
                {
                    $strSubredId = $arrayResponse['subredId'];
                    $strSubred   = $objSubred->getSubred();
                    $strMensaje  = "Subred asignada con exito";
                    $strEstatus  = "OK";

                    $objSubred->setEstado("Reservada");
                    $emInfraestructura->persist($objSubred);
                    $emInfraestructura->flush();

                    if ($emInfraestructura->getConnection()->isTransactionActive())
                    {
                        $emInfraestructura->getConnection()->commit();
                    }
                }
            }
            else
            {
                $strSubredId = "";
                $strSubred   = "";
                $strMensaje  = "Imposible crear protocolo de enrutamiento. No existen subredes disponibles.";
                $strEstatus  = "ERROR";
            }
        }
        catch (\Exception $ex)
        {
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }

            $emInfraestructura->getConnection()->close();

            $strEstatus = "ERROR";

            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController.consultarSubredAsignadaAction',
                                      $ex->getMessage(),
                                      $objSession->get('user'),
                                      $objPeticion->getClientIp()
                                     );
        }

        return $objRespuesta->setContent(json_encode(array('strSubredId' => $strSubredId,
                                                           'strSubred'   => $strSubred,
                                                           'strEstatus'  => $strEstatus,
                                                           'strMsg'      => $strMensaje)));
    }


     /**
     *
     * Documentación de la funcion 'liberarSubredAsignadaAction'.
     *
     * Método que se encarga de liberar una subred asignada
     *
     * @return $objRespuesta retorna mensaje de respuesta
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 03-07-2020
     */
    public function liberarSubredAsignadaAction()
    {
        $emInfraestructura  = $this->getDoctrine()->getManager('telconet_infraestructura');
        $objPeticion        = $this->getRequest();
        $objSession         = $objPeticion->getSession();
        $arrayParametros    = array();
        $arrayParametrosWs  = array();
        $intIdPe            = "";
        $strUsoSubred       = 'RUTASINTMPLS';
        $objRespuesta       = new Response();
        $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil        = $this->get('schema.Util');
        $objRespuesta->headers->set('Content-Type', 'text/plain');

        $emInfraestructura->getConnection()->beginTransaction();

        $intIdServicio = $objPeticion->get("idServicio");
        $intIdElemento = $objPeticion->get("idElemento");
        $strSubred     = $objPeticion->get("subred");

        $arrayParametrosWs["intIdElemento"] = $intIdElemento;
        $arrayParametrosWs["intIdServicio"] = $intIdServicio;

        $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosWs);

        if($objElementoPe)
        {
            $intIdPe = $objElementoPe->getId();
        }

        try
        {
            // Obtener Subred
            $objSubred = $emInfraestructura->getRepository('schemaBundle:InfoSubred')->findOneBy(array("subred" => $strSubred,
                                                                                                       "estado" => "Reservada"));

            //Verificamos si la subred asignada no se encuentra ya utilizada en una ruta estatica
            if(is_object($objSubred))
            {
                //Poner en estado Ocupada la subred
                $objSubred->setEstado("Ocupado");
                $emInfraestructura->persist($objSubred);
                $emInfraestructura->flush();

                $emInfraestructura->getConnection()->commit();
            }

            $arrayParametros                      = array();
            $arrayParametros['tipoAccion']        = 'liberar';
            $arrayParametros['uso']               = $strUsoSubred;
            $arrayParametros['subredId']          = $objSubred->getId();
            $arrayParametros['elementoId']        = $intIdPe;

            $emInfraestructura->getRepository('schemaBundle:InfoSubred')->provisioningSubred($arrayParametros);
            
            $strMensaje = "Pantalla cerrada con exito";
        }
        catch (\Exception $ex)
        {
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }

            $emInfraestructura->getConnection()->close();

            $strMensaje = "Se encontro un problema, favor notificar a Sistemas";
            $strEstatus = "ERROR";

            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController.liberarSubredAsignadaAction',
                                      $ex->getMessage(),
                                      $objSession->get('user'),
                                      $objPeticion->getClientIp()
                                     );
        }

        return $objRespuesta->setContent(json_encode(array('strEstatus'  => $strEstatus,
                                                           'strMsg'      => $strMensaje)));
    }


     /**
     *
     * Documentación de la funcion 'verificarSubredAsignadaAction'.
     *
     * Método que verifica si la subred asignada esta en uso en otro cliente.
     *
     * @return $objRespuesta retorna mensaje de respuesta
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 07-07-2020
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 03-08-2020  - Se agrega logica para reutilizar la funciona para creacion de rutas manuales.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 07-08-2020  - Se valida la región del servicio para asignar la tarea al jefe de esa región.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 14-06-2021 - Se agrega el tipo de red, para la obtener el pe del servicio.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 20-07-2021 Se agrega validaciones para los tipos de red
     */
    public function verificarSubredAsignadaAction()
    {
        $emInfraestructura         = $this->getDoctrine()->getManager('telconet_infraestructura');
        $emGeneral                 = $this->getDoctrine()->getManager('telconet_general');
        $emSoporte                 = $this->getDoctrine()->getManager('telconet_soporte');
        $emComercial               = $this->getDoctrine()->getManager('telconet');
        $objPeticion               = $this->getRequest();
        $objSession                = $objPeticion->getSession();
        $intIdDepartamentoOrigen   = $objPeticion->get('IdDepartamento');
        $intIdServicio             = $objPeticion->get('IdServicio');
        $intIdElemento             = $objPeticion->get("idElemento");
        $intIdProducto             = $objPeticion->get("idProducto");
        $intIpDestino              = $objPeticion->get("ipDestino");
        $strVrf                    = $objPeticion->get("vrf");
        $strOrigen                 = $objPeticion->get("origen") ? $objPeticion->get("origen") : "";
        $arrayRespuesta            = array();
        $arrayParametrosWs         = array();
        $strEstatus                = "OK";
        $strNumeroTarea            = "";
        $strSubredValida           = "";
        $strIpRedLan               = "";
        $strLoginAux               = "";
        $strNombreTecnico          = "";
        $strMensajeConfigurado     = "Enrutamiento listo para configurar";
        $strCodEmpresa             = $objSession->get('idEmpresa');
        $strPrefijoEmpresa         = $objSession->get('prefijoEmpresa');
        $objRespuesta              = new Response();
        $strSubred                 = $objPeticion->get("subred");
        $strMascara                = $objPeticion->get("mascara")?$objPeticion->get("mascara"):"";
        $serviceNetworking         = $this->get('tecnico.NetworkingScripts');
        $serviceTecnico            = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil               = $this->get('schema.Util');
        $serviceCambiarPlanService = $this->get('tecnico.InfoCambiarPlan');
        $objRespuesta->headers->set('Content-Type', 'text/plain');

        try
        {
            //Se obtiene el nombre tecnico del servicio
            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
            //obtengo el servicio
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

            if(is_object($objProducto))
            {
                $strNombreTecnico  = $objProducto->getNombreTecnico();
            }

            $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElemento);

            //Se obtiene el nombre del PE
            $arrayParametrosWs["intIdElemento"] = $intIdElemento;
            $arrayParametrosWs["intIdServicio"] = $intIdServicio;

            //verifico el tipo de red
            $strTipoRed         = "MPLS";
            if(is_object($objServicio) && is_object($objProducto))
            {
                $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'TIPO_RED',
                                                                                               $objProducto);
                if(is_object($objServProdCaractTipoRed))
                {
                    $strTipoRed = $objServProdCaractTipoRed->getValor();
                }
            }
            //se verifica si el servicio es tipo de red GPON
            $booleanTipoRedGpon = false;
            if(!empty($strTipoRed))
            {
                $arrayParVerTipoRed = $emComercial->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $strTipoRed,
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
            }
            //obtengo el pe por tipo de red
            if($booleanTipoRedGpon)
            {
                $objElementoPe = $serviceTecnico->getPeByOlt($arrayParametrosWs);
            }
            else
            {
                $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
            }

            if($objElementoPe)
            {
                $strNombrePe = $objElementoPe->getNombreElemento();
            }

            if(is_object($objServicio))
            {
                $strLoginAux = $objServicio->getLoginAux();
            }

            if($strOrigen === "rutaEstatico")
            {
                $strEstadoSubred = "Activo";
            }
            else
            {
                $strEstadoSubred = "Reservada";
            }

            //Se obtiene la red LAN
            $objSubred = $emInfraestructura->getRepository('schemaBundle:InfoSubred')->findOneBy(array("subred" => $strSubred,
                                                                                                       "estado" => $strEstadoSubred));

            if(is_object($objSubred))
            {
                $strIpRedLan = explode("/", $objSubred->getSubred())[0];
                $strMascara  = $objSubred->getMascara();
            }
            else if($strOrigen === "rutaEstatico")
            {
                $strIpRedLan = $strSubred;
            }

            $arrayParametrosWs = array();
            $arrayParametrosWs['url']            = 'validarEnrutamientoEstaticoPe';
            $arrayParametrosWs['accion']         = 'agregar';
            //...
            $arrayParametrosWs['clase_servicio'] = $strNombreTecnico;
            $arrayParametrosWs['vrf']            = $strVrf;
            $arrayParametrosWs['pe']             = $strNombrePe;
            if($booleanTipoRedGpon)
            {
                $arrayParametrosWs['sw']  = '';
                $arrayParametrosWs['olt'] = is_object($objInfoElemento)?$objInfoElemento->getNombreElemento():'';
            }
            else
            {
                $arrayParametrosWs['olt'] = '';
                $arrayParametrosWs['sw']  = is_object($objInfoElemento)?$objInfoElemento->getNombreElemento():'';
            }
            $arrayParametrosWs['net_lan']        = $strIpRedLan;
            $arrayParametrosWs['mask_lan']       = $strMascara;
            $arrayParametrosWs['ip_destino']     = $intIpDestino;
            //..
            $arrayParametrosWs['servicio']       = $strNombreTecnico;
            $arrayParametrosWs['login_aux']      = $strLoginAux;
            $arrayParametrosWs['user_name']      = $objSession->get('user');
            $arrayParametrosWs['user_ip']        = $objPeticion->getClientIp();

            //Ejecucion del metodo via WS para realizar la validacion de la subred
            $arrayRespuesta = $serviceNetworking->callNetworkingWebService($arrayParametrosWs);

            $strBand      = $arrayRespuesta['band'];
            $strStatus    = $arrayRespuesta['status'];
            $strMensajeWs = $arrayRespuesta['mensaje'];
            //*****************Se consulta el msg de exito configurado de Networking***************//
            $arrayValoresMensajes = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne('MEJORAS PROCESO CREACION DE RUTAS AUTOMATICAS',
                                                       'INFRAESTRUCTURA',
                                                       'CREACION DE RUTAS AUTOMATICAS',
                                                       'MENSAJE DE EXITO - RESPUESTA DE NETWORKING',
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       $strCodEmpresa);

            if(isset($arrayValoresMensajes) && !empty($arrayValoresMensajes))
            {
                $strMensajeNetworkingConfigurado = $arrayValoresMensajes["valor1"];
                $strMensajeSistemasConfigurado   = $arrayValoresMensajes["valor2"];
            }
            //*****************Se consulta el msg de exito configurado de Networking***************//

            if($strMensajeWs === $strMensajeNetworkingConfigurado)
            {
                $strMensajeWs = $strMensajeSistemasConfigurado;
            }

            $strMensajeUsuario = "<b>Subred Verificada:</b> ".$strSubred."<br/><b>Observacion:</b> ".$strMensajeWs;

            if($strStatus ==='OK')
            {
                $strSubredValida = "S";
            }
            else
            {
                $strSubredValida = "N";
                //*****************Se consultan los mensajes configurados para disparar la tarea a L2*************//
                $arrayValoresMensajes = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->getOne('MEJORAS PROCESO CREACION DE RUTAS AUTOMATICAS',
                                                           'INFRAESTRUCTURA',
                                                           'CREACION DE RUTAS AUTOMATICAS',
                                                           'MENSAJE DE RESPUESTA DE NETWORKING',
                                                           $strBand,
                                                           '',
                                                           '',
                                                           '',
                                                           '',
                                                           $strCodEmpresa);

                //*****************Se consultan los mensajes configurados para disparar la tarea a L2*************//
                if(!empty($arrayValoresMensajes))
                {
                    //*************************Generacion de Tarea Automatica***************************//
                    //1ero.- Se obtiene el nombre de la tarea
                    $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('MEJORAS PROCESO CREACION DE RUTAS AUTOMATICAS',
                                                                 'INFRAESTRUCTURA',
                                                                 'CREACION DE RUTAS AUTOMATICAS',
                                                                 'TAREA USADA PARA MEJORAS EN CREACION RUTAS AUTOMATICAS',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $strCodEmpresa);

                    if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
                    {
                        $strNombreTarea = $arrayValoresParametros["valor1"];

                        if(!empty($strNombreTarea))
                        {
                            $objAdmiTarea = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                      ->findOneBy(array("nombreTarea" => $strNombreTarea,
                                                                        "estado"      => "Activo"));

                            if(is_object($objAdmiTarea))
                            {
                                $strTareaId = $objAdmiTarea->getId();
                            }
                        }
                    }

                    //2do.- Se obtiene el punto del servicio
                    if(!empty($intIdServicio))
                    {
                        $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                    }

                    if(is_object($objInfoServicio))
                    {
                        $objInfoPunto = $objInfoServicio->getPuntoId();
                    }

                    //3ero.- Se obtiene departamento a asignar
                    $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('MEJORAS PROCESO CREACION DE RUTAS AUTOMATICAS',
                                                                 'INFRAESTRUCTURA',
                                                                 'CREACION DE RUTAS AUTOMATICAS',
                                                                 'DEPARTAMENTO USADO PARA ASIGNAR TAREA',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $strCodEmpresa);

                    if(!empty($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor2"]))
                    {
                        $strDepartamentoId = $arrayValoresParametros["valor1"];
                        $strCantonId       = $arrayValoresParametros["valor2"];

                    }

                    if(!empty($strDepartamentoId))
                    {
                        $objAdmiDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($strDepartamentoId);
                    }

                    //4to.- Se obtiene la region del servicio
                    $arrayParametrosRegion["intServicioId"] = $intIdServicio;

                    $strRegionServicio = '';
                    //verifico el punto
                    $objInfoPunto = $objServicio->getPuntoId();
                    if(is_object($objInfoPunto))
                    {
                        //verifico el sector
                        $objSector = $objInfoPunto->getSectorId();
                        if(is_object($objSector))
                        {
                            //verifico la parroquia
                            $objParroquia = $objSector->getParroquiaId();
                            if(is_object($objParroquia))
                            {
                                //verifico el canton
                                $objCanton = $objParroquia->getCantonId();
                                if(is_object($objCanton))
                                {
                                    $strRegionServicio = $objCanton->getRegion();
                                }
                            }
                        }
                    }

                    if(empty($strRegionServicio))
                    {
                        $strRegionServicio = $strCantonId;
                    }

                    $arrayParametros["strObservacion"]         = $strMensajeWs;
                    $arrayParametros["intTarea"]               = $strTareaId;
                    $arrayParametros["strTipoAfectado"]        = "Cliente";
                    $arrayParametros["objPunto"]               = $objInfoPunto;
                    $arrayParametros["objDepartamento"]        = $objAdmiDepartamento;
                    $arrayParametros["strCantonId"]            = $strCantonId;
                    $arrayParametros["strEmpresaCod"]          = $strCodEmpresa;
                    $arrayParametros["strPrefijoEmpresa"]      = $strPrefijoEmpresa;
                    $arrayParametros["strUsrCreacion"]         = $objSession->get('user');
                    $arrayParametros["strIpCreacion"]          = $objPeticion->getClientIp();
                    $arrayParametros["intDetalleSolId"]        = null;
                    $arrayParametros["intDepartamentoOrigen"]  = $intIdDepartamentoOrigen;
                    $arrayParametros["strBanderaTraslado"]     = "S";
                    $arrayParametros["strRegion"]              = $strRegionServicio;

                    $strNumeroTarea = $serviceCambiarPlanService->crearTareaRetiroEquipoPorDemo($arrayParametros);
                    //*************************Generacion de Tarea Automatica***************************//
                }
            }
        }
        catch (\Exception $ex)
        {
            $strEstatus        = "ERROR";
            $strMensajeUsuario = "Se presento un error en el metodo InfoServicioController.verificarSubredAsignadaAction";

            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController.verificarSubredAsignadaAction',
                                      $ex->getMessage(),
                                      $objSession->get('user'),
                                      $objPeticion->getClientIp()
                                     );
        }

        return $objRespuesta->setContent(json_encode(array('strEstatus'      => $strEstatus,
                                                           'strSubredValida' => $strSubredValida,
                                                           'strMsg'          => $strMensajeUsuario)));
    }


    /**
     * @Secure(roles="ROLE_324-3")
     * 
     * Funcion ajax que sirve para asignar las rutas automaticas al
     * servicio del cliente
     * 
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.0 28-03-2016
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.1 26-05-2016 - Se recupera elementoPe desde ws networking
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 10-05-2018 - Se agrega validaciones para que el enrutamiento funcione correctamente para INTERNETDC
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 19-06-2018 - Se ajusta para verificar si la subred automatica a ser generada ya existe configurada dentro de una ruta estatica
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 09-05-2018 - Se agrega programación para llenar nuevo campo TIPO en tabla INFO_RUTA_ELEMENTO
     * @since 1.2
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 09-07-2020 - Se implementa el concepto de enviar a validar contra Networking la subred generada.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.7 27-05-2021 - Se agrega el tipo de red, para la obtener el pe del servicio.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 20-07-2021 Se agrega validaciones para los tipos de red
     *
     * @param  $request [ idServicio , idProducto , idElemento, nombreRuta, maskLan, enrutarPE, distanciaAdmin ]
     * @return $response Response
     */
    public function ajaxAsignarRutaAutomaticaAction()
    {
        $response          = new Response();
        $request           = $this->get('request');
        $session           = $this->get('session');
        
        $emComercial       = $this->get('doctrine')->getManager();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral         = $this->get('doctrine')->getManager('telconet_general');
        $serviceActivacion = $this->get('tecnico.InfoActivarPuerto');

        $idServicio        = $request->get('idServicio');
        $idProducto        = $request->get('idProducto');
        $idElemento        = $request->get('idElemento');
        $nombreRuta        = $request->get('nombreRuta');
        $maskLan           = $request->get('maskLan');
        $vrf               = $request->get('vrf');
        $distanciaAdmin    = $request->get('distanciaAdmin');
        $strSubred         = $request->get('subred');
        $strRutaAutomatica = $request->get('rutaAutomatica')?$request->get('rutaAutomatica'):"N";
        $arrayParametrosWs = array();

        $msg  = "El protocolo de enrutamiento se ha procesado exitosamente.";

        $serviceTecnico  = $this->get('tecnico.InfoServicioTecnico');
        
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($idProducto);
            $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($idElemento);

            $strNombreTecnico  = $objProducto->getNombreTecnico();

            $arrayParametrosWs["intIdElemento"] = $idElemento;
            $arrayParametrosWs["intIdServicio"] = $idServicio;

            //verifico el tipo de red
            $strTipoRed         = "MPLS";
            if(is_object($objServicio) && is_object($objProducto))
            {
                $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'TIPO_RED',
                                                                                               $objProducto);
                if(is_object($objServProdCaractTipoRed))
                {
                    $strTipoRed = $objServProdCaractTipoRed->getValor();
                }
            }
            //se verifica si el servicio es tipo de red GPON
            $booleanTipoRedGpon = false;
            if(!empty($strTipoRed))
            {
                $arrayParVerTipoRed = $emComercial->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $strTipoRed,
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
            }
            //obtengo el pe por tipo de red
            if($booleanTipoRedGpon)
            {
                $objElementoPe = $serviceTecnico->getPeByOlt($arrayParametrosWs);
            }
            else
            {
                $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
            }

            $strUsoSubred      = 'RUTASINTMPLS';
            
            if($strNombreTecnico == 'INTERNETDC')
            {
                $objElementoPadre = $objElementoPe;
                $strUsoSubred     = 'RUTASINTERNETDC';
                $strTipoSolucion  = 'HOSTING';
                
                if(!is_object($objElementoPadre))
                {
                    $intIdOficina = $objServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId();

                    $objOficina   = $emComercial->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);

                    if(is_object($objOficina))
                    {
                        $objCanton = $emComercial->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());

                        if(is_object($objCanton))
                        {
                            $strRegion = $objCanton->getProvinciaId()->getRegionId()->getNombreRegion();
                        }
                    }

                    //Obtener el Pe parametrizado dado que no existe factibilidad a nivel de backbone
                    $arrayInfoPe   =  $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('ROUTERS DC - HOSTING', 
                                                        'TECNICO', 
                                                        '',
                                                        $strRegion,
                                                        '',
                                                        '',
                                                        '',
                                                        '', 
                                                        '', 
                                                        $session->get('idEmpresa'));
                    if(!empty($arrayInfoPe))
                    {
                        $strPe            = $arrayInfoPe['valor1'];
                        $objElementoPadre = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                           ->findOneByNombreElemento($strPe);

                        if(!is_object($objElementoPadre))
                        {
                            $response = new Response("Imposible crear protocolo de enrutamiento. No existe enlace de Switch con Pe"); 
                            $response->setStatusCode('406');
                            return $response;
                        }
                    }
                }
                else
                {
                    $strTipoSolucion = 'HOUSING';
                }
            }
            else//INTMPLS
            {
                //PE: Obtener Elemento Padre                
                if($objElementoPe)
                {                
                    $idPe             = $objElementoPe->getId();
                    $objElementoPadre = $objElementoPe;
                }
                else
                {
                    $response = new Response("Imposible crear protocolo de enrutamiento. No existe enlace de Switch con Pe"); 
                    $response->setStatusCode('406');
                    return $response;
                }
            }
                                  
            //Obtener IP Asignada al servicio
            $arrayParametros                = array();
            $arrayParametros['idServicio']  = $idServicio;
            $arrayParametros['arrayEstados']= array("Activo");
            $arrayIpsAsignada = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                  ->getIpsPorServicioPorEstados($arrayParametros);
            if($arrayIpsAsignada && count($arrayIpsAsignada)===1)
            {            
                $objIp = $arrayIpsAsignada[0];
            }
            else
            {
                $response = new Response("Imposible crear protocolo de enrutamiento. Problemas de configuraciones con la IP asignada"); 
                $response->setStatusCode('406');
                return $response;
            }

            //**************Si la la peticion viene desde la pantalla de creacion de rutas automaticas no se genera una subred************//
            if($strRutaAutomatica === "S")
            {
                //Se setea el id de la subred
                $arrayResponse['msg']      = "OK";

                // Obtener Subred
                $objSubred = $emInfraestructura->getRepository('schemaBundle:InfoSubred')->findOneBy(array("subred" => $strSubred,
                                                                                                           "estado" => "Reservada"));
                if(is_object($objSubred))
                {
                    $arrayResponse['subredId'] = $objSubred->getId();
                }
            }
            //**************Si la la peticion viene desde la pantalla de creacion de rutas automaticas no se genera una subred************//
            else
            {
                unset($arrayParametros);

                $arrayParametros               = array();
                $arrayParametros['tipoAccion'] = 'asignar';
                //....
                $arrayParametros['uso']        = $strUsoSubred;
                $arrayParametros['mascara']    = $maskLan;
                $arrayParametros['elementoId'] = $idPe;

                $arrayResponse = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                   ->provisioningSubred($arrayParametros);
            }

            if($arrayResponse['msg']=='OK')
            {
                // Obtener Subred
                $objSubred = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                               ->find($arrayResponse['subredId']);                
                
                //Verificamos si la subred asignada no se encuentra ya utilizada en una ruta estatica
                if(is_object($objSubred))
                {
                    //Poner en estado Ocupada la subred
                    if($strRutaAutomatica === "S")
                    {
                        $objSubred->setEstado("Ocupado");
                        $emInfraestructura->persist($objSubred);
                        $emInfraestructura->flush();
                    }

                    $objSubredTmp = $objSubred;
                    
                    while($objSubredTmp->getSubredId())
                    {
                        $strIpRedLan = explode("/", $objSubredTmp->getSubred())[0];
                    
                        $objRutaElemento = $emInfraestructura->getRepository("schemaBundle:InfoRutaElemento")
                                                             ->findOneBy(array('redLan'        => $strIpRedLan,
                                                                               'mascaraRedLan' => $objSubredTmp->getMascara(),
                                                                               'estado'        => 'Activo'));
                        //Si no existe la subred asignada en una ruta estatica
                        //continua el proceso
                        if(is_object($objRutaElemento))
                        {
                            $arrayParametros                      = array();
                            $arrayParametros['tipoAccion']        = 'liberar';                        
                            $arrayParametros['uso']               = $strUsoSubred;
                            $arrayParametros['subredId']          = $objSubredTmp->getId();
                            $arrayParametros['elementoId']        = $idPe;

                            $emInfraestructura->getRepository('schemaBundle:InfoSubred')->provisioningSubred($arrayParametros);

                            $response = new Response("La siguiente Subred disponible que generó el Telcos no puede ser asignada dado que la misma o"
                                                   . " la subred padre esta siendo usada en otro cliente:<br/>"
                                                   . " <b>Subred usada</b>: ".$objSubredTmp->getSubred()
                                                  . '  <br><b>Nombre Ruta</b>: '.$objRutaElemento->getNombre().'</b><br>Por favor verificar con'
                                                  . ' Sistemas si debe ser liberada u ocupada para continuar.'); 
                            $response->setStatusCode('406');
                            return $response;
                        }
                        else
                        {
                            if($objSubredTmp->getSubredId())
                            {
                                $objSubredTmp = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                  ->find($objSubredTmp->getSubredId()->getId());
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                }
                
                if($objProducto->getNombreTecnico()=="INTMPLS" || $objProducto->getNombreTecnico()=="INTERNET SDWAN")
                {
                    //Se obtiene la configuracion de los paneles que se visualizaran de manera dinamica por tipo de caso escogido
                    $arrayResponse = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->get("VRF_INTERNET",'TECNICO',null,null,null,null,null,null);

                    if(count($arrayResponse)>0)
                    {
                        foreach($arrayResponse as $reg) {          
                            
                            $objInfoPersonaEmpresaRolCarac = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                         ->find($reg['valor1']);
                            $vrf = $objInfoPersonaEmpresaRolCarac->getValor();
                        }
                    }
                }
                // ------------------------------------------------------------------------------------
                // call al WebService NetworkingScriptsService
                // ------------------------------------------------------------------------------------
                
                if($strNombreTecnico == 'INTERNETDC')
                {
                    $strNombreTecnico = $strNombreTecnico."-".$strTipoSolucion;
                }
                //verificar GPON
                if($booleanTipoRedGpon && $objProducto->getNombreTecnico()=="L3MPLS")
                {
                    //obtengo la ip del elemento
                    $objIpElemento  = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                            ->findOneBy(array("elementoId" => $objElemento->getId(),
                                                                              "estado"     => "Activo"));
                    if(!is_object($objIpElemento))
                    {
                        throw new \Exception("No se encontró la Ip del elemento ".$objElemento->getNombreElemento().", ".
                                             "por favor notificar a Sistemas.");
                    }
                    //setea arreglo para ejecutar rda
                    $arrayParametrosEnrutamiento                            = array();
                    $arrayParametrosEnrutamiento["strPrefijoEmpresa"]       = $session->get('prefijoEmpresa');
                    $arrayParametrosEnrutamiento["strUsrCreacion"]          = $session->get('user');
                    $arrayParametrosEnrutamiento["strIpCreacion"]           = $request->getClientIp();
                    $arrayParametrosEnrutamiento["strTipoEnrutamiento"]     = "ESTATICO";
                    $arrayParametrosEnrutamiento["strOpcion"]               = "TN_ENRUTAMIENTO_DATOS";
                    $arrayParametrosEnrutamiento["objServicio"]             = $objServicio;
                    $arrayParametrosEnrutamiento["objProducto"]             = $objProducto;
                    $arrayParametrosEnrutamiento["strIpOlt"]                = $objIpElemento->getIp();
                    $arrayParametrosEnrutamiento["strModulo"]               = "enrutamientos";
                    $arrayParametrosEnrutamiento["strOpcionEnrutamiento"]   = "enrutamientoEstaticoOLT";
                    $arrayParametrosEnrutamiento["strAccion"]               = "agregar";
                    $arrayParametrosEnrutamiento["strVrf"]                  = $vrf;
                    $arrayParametrosEnrutamiento["strNameRoute"]            = $nombreRuta;
                    $arrayParametrosEnrutamiento["strNetLan"]               = stristr($objSubred->getSubred(),"/",true);
                    $arrayParametrosEnrutamiento["strMaskLan"]              = $objSubred->getMascara();
                    $arrayParametrosEnrutamiento["strIpDestino"]            = $objIp->getIp();
                    $arrayParametrosEnrutamiento["strDistanceAdmin"]        = $distanciaAdmin;
                    //se ejecuta ws de RDA
                    $arrayRespuesta = $serviceActivacion->llamadaWsEnrutamientoGPON($arrayParametrosEnrutamiento);
                    $strStatus  = $arrayRespuesta['strStatus'];
                    $strMensaje = $arrayRespuesta['strMensaje'];
                }
                else
                {
                    $arrayPeticiones = array();
                    $arrayPeticiones['url']    = 'enrutamientoEstaticoPe';
                    $arrayPeticiones['accion'] = 'agregar';
                    //...
                    $arrayPeticiones['clase_servicio']  = $strNombreTecnico;
                    $arrayPeticiones['vrf']             = $vrf;
                    $arrayPeticiones['pe']              = $objElementoPadre->getNombreElemento();
                    if($booleanTipoRedGpon)
                    {
                        $arrayPeticiones['sw']          = "";
                        $arrayPeticiones['olt']         = $objElemento->getNombreElemento();
                    }
                    else
                    {
                        $arrayPeticiones['olt']         = "";
                        $arrayPeticiones['sw']          = $objElemento->getNombreElemento();
                    }
                    $arrayPeticiones['name_route']      = $nombreRuta;
                    $arrayPeticiones['net_lan']         = stristr($objSubred->getSubred(),"/",true);
                    $arrayPeticiones['mask_lan']        = $objSubred->getMascara();
                    $arrayPeticiones['ip_destino']      = $objIp->getIp();
                    $arrayPeticiones['distance_admin']  = $distanciaAdmin;
                    $arrayPeticiones['option']          = 'A';
                    //...
                    $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
                    $arrayPeticiones['login_aux']       = $objServicio->getLoginAux();
                    $arrayPeticiones['user_name']       = $session->get('user');
                    $arrayPeticiones['user_ip']         = $request->getClientIp();                                          
                                  
                    //Ejecucion del metodo via WS para realizar la configuracion del SW
                    $networkingScriptsService = $this->get('tecnico.NetworkingScripts');
                    $arrayRespuesta = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);
    
                    $strStatus  = $arrayRespuesta['status'];
                    $strMensaje = $arrayRespuesta['mensaje'];
                    // ------------------------------------------------------------------------------------
                }
                
                if($strStatus == 'OK')
                {
                    if($objSubred)
                    {
                        // Creacion de la rutaElemento
                        $objRutaElemento = new InfoRutaElemento();
                        $objRutaElemento->setServicioId($objServicio);
                        $objRutaElemento->setElementoId($objElementoPadre);
                        $objRutaElemento->setSubredId($objSubred);
                        $objRutaElemento->setIpId($objIp);
                        $objRutaElemento->setNombre($nombreRuta);
                        $objRutaElemento->setEstado("Activo");
                        $objRutaElemento->setTipo("Ruta Automática");
                        $objRutaElemento->setDistanciaAdmin($distanciaAdmin);
                        $objRutaElemento->setFeCreacion(new \DateTime('now'));
                        $objRutaElemento->setUsrCreacion($session->get('user'));
                        $objRutaElemento->setIpCreacion($request->getClientIp());
                        $emInfraestructura->merge($objRutaElemento);
                        $emInfraestructura->flush();

                        $objServicioHistorial = new InfoServicioHistorial();
                        $objServicioHistorial->setServicioId($objServicio);
                        $objServicioHistorial->setObservacion('Se Creo la ruta:<br/><b>Nombre : </b>'.$nombreRuta.
                                                              '<br/><b> Subred: </b>'.$objSubred->getSubred());
                        $objServicioHistorial->setIpCreacion($request->getClientIp());
                        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objServicioHistorial->setUsrCreacion($session->get('user'));
                        $objServicioHistorial->setEstado($objServicio->getEstado());
                        $emComercial->persist($objServicioHistorial);
                        $emComercial->flush();

                        $emComercial->getConnection()->commit();
                        $emInfraestructura->getConnection()->commit();   
                    }
                    else
                    {
                        $response = new Response("Imposible crear protocolo de enrutamiento. problemas con la subred asignada."); 
                        $response->setStatusCode('406');
                        return $response;
                    }
                }
                else
                {
                    $response = new Response($strMensaje); 
                    $response->setStatusCode('406');
                    return $response;
                }
                
            }
            else
            {
                $response = new Response("Imposible crear protocolo de enrutamiento. No existen subredes disponibles."); 
                $response->setStatusCode('406');
                return $response;
            }
            
        }
        catch (\Exception $e) 
        {
            $msg = "Error al asignar el protocolo de enrutamiento: ".$e->getMessage();
            //...
            $emComercial->getConnection()->rollback();
            $emComercial->getConnection()->close();
            //...
            $emInfraestructura->getConnection()->rollback();
            $emInfraestructura->getConnection()->close();
            //...
        }
        
        $response->setContent($msg);
        return $response;  
    }

    /**
     * @Secure(roles="ROLE_324-3")
     * 
     * Funcion ajax que sirve para asignar las rutas estaticas al
     * servicio del cliente
     * 
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.0 28-03-2016
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.1 26-05-2016 - Se recupera elementoPe desde ws networking
     *
     * @author Juan Lafuente
     * @version 1.2 27-07-2016
     * Se agrega validacion para enrutar sin ejecucion en PEs
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 10-05-2018 - Se agrega validaciones para que el enrutamiento funcione correctamente para INTERNETDC y DATOSDC
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 19-06-2018 - Se ajusta para asignar la subred ingresada siempre y cuando la misma exista dentro del pool de subredes del sistema
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 09-05-2018 - Se agrega programación para llenar nuevo campo TIPO en tabla INFO_RUTA_ELEMENTO
     * @since 1.3
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.7 27-05-2021 - Se agrega el tipo de red, y se válida si es GPON con producto L3MPLS para ejecutar en el middleware.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 20-07-2021 Se agrega validaciones para los tipos de red
     *
     * @param  $request [ idServicio , idProducto , idElemento, nombreRuta, maskLan, maskLan, enrutarPE, distanciaAdmin ]
     * @return $response Response
     */
    public function ajaxAsignarRutaEstaticaAction()
    {        
        $response          = new Response();
        $request           = $this->get('request');
        $session           = $this->get('session');
        
        $emComercial       = $this->get('doctrine')->getManager();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral         = $this->get('doctrine')->getManager('telconet_general');
        $serviceActivacion = $this->get('tecnico.InfoActivarPuerto');

        $idServicio     = $request->get('idServicio');
        $idProducto     = $request->get('idProducto');
        $idElemento     = $request->get('idElemento');
        $nombreRuta     = $request->get('nombreRuta');
        $redLan         = $request->get('redLan');
        $intMaskValue   = $request->get('maskValue');
        $maskLan        = $request->get('maskLan');
        $vrf            = $request->get('vrf');
        $enrutarPE      = $request->get('enrutarPE');
        $distanciaAdmin = $request->get('distanciaAdmin');
        $arrayParametrosWs = array();
        $msg  = "La ruta estática se ha procesado exitosamente.";

        $serviceTecnico  = $this->get('tecnico.InfoServicioTecnico');        
        
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            $objProducto        = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($idProducto);
            $objElemento        = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($idElemento);
               
            $strNombreTecnico   = $objProducto->getNombreTecnico();
            $strUsoSubred       = '';

            //verifico el tipo de red
            $strTipoRed         = "MPLS";
            if(is_object($objServicio) && is_object($objProducto))
            {
                $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'TIPO_RED',
                                                                                               $objProducto);
                if(is_object($objServProdCaractTipoRed))
                {
                    $strTipoRed = $objServProdCaractTipoRed->getValor();
                }
            }
            //se verifica si el servicio es tipo de red GPON
            $booleanTipoRedGpon = false;
            if(!empty($strTipoRed))
            {
                $arrayParVerTipoRed = $emComercial->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $strTipoRed,
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
            }

            $arrayParametrosWs["intIdElemento"] = $idElemento;
            $arrayParametrosWs["intIdServicio"] = $idServicio;

            //Figuara de INTMPLS o L3MPLS
            if($strNombreTecnico != 'DATOSDC' && $strNombreTecnico != 'INTERNETDC')
            {
                //PE: Obtener Elemento Padre
                if($booleanTipoRedGpon)
                {
                    $objElementoPadre = $serviceTecnico->getPeByOlt($arrayParametrosWs);
                }
                else
                {
                    $objElementoPadre = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
                }

                if(!is_object($objElementoPadre))
                {
                    $response = new Response("Imposible crear protocolo de enrutamiento. No existe enlace de Switch con Pe"); 
                    $response->setStatusCode('406');
                    return $response;
                }
            }
            else//Servicios de Datacenter
            {
                $objElementoPadre = $serviceTecnico->getPeBySwitch($arrayParametrosWs);

                if(!is_object($objElementoPadre))
                {
                    $intIdOficina = $objServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId();

                    $objOficina   = $emComercial->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);

                    if(is_object($objOficina))
                    {
                        $objCanton = $emComercial->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());

                        if(is_object($objCanton))
                        {
                            $strRegion = $objCanton->getProvinciaId()->getRegionId()->getNombreRegion();
                        }
                    }

                    //Obtener el Pe parametrizado dado que no existe factibilidad a nivel de backbone
                    $arrayInfoPe   =  $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('ROUTERS DC - HOSTING', 
                                                        'TECNICO', 
                                                        '',
                                                        $strRegion,
                                                        '',
                                                        '',
                                                        '',
                                                        '', 
                                                        '', 
                                                        $session->get('idEmpresa'));
                    if(!empty($arrayInfoPe))
                    {
                        $strPe            = $arrayInfoPe['valor1'];
                        $objElementoPadre = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                           ->findOneByNombreElemento($strPe);

                        if(!is_object($objElementoPadre))
                        {
                            $response = new Response("Imposible crear protocolo de enrutamiento. No existe enlace de Switch con Pe"); 
                            $response->setStatusCode('406');
                            return $response;
                        }
                    }
                }
            }
            
            //Obtener IP Asignada al servicio
            $arrayParametros                = array();
            $arrayParametros['idServicio']  = $idServicio;
            $arrayParametros['arrayEstados']= array("Activo");
            $arrayParametros['noTipoIp']    = array("TELEFONIA");
            $arrayIpsAsignada = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                  ->getIpsPorServicioPorEstados($arrayParametros);
            if($arrayIpsAsignada && count($arrayIpsAsignada) === 1)
            {            
                $objIp = $arrayIpsAsignada[0];
            }
            else
            {
                $response = new Response("Imposible crear protocolo de enrutamiento. Problemas de configuraciones con la IP asignada"); 
                $response->setStatusCode('406');
                return $response;
            }
            
            //validar que no exista la ruta
            $arrayResponse = $emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                               ->findOneBy( array( "redLan"        => $redLan,
                                                                   "mascaraRedLan" => $maskLan,
                                                                   "ipId"          => $objIp,
                                                                   "estado"        => "Activo" ));
            if($arrayResponse)
            {
                //login auxiliar y estado del servicio
                $strLoginEstadoServicio = '';
                //verifico la ip de la subred
                if(is_object($objIp))
                {
                    //obtengo el servicio
                    $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($objIp->getServicioId());
                    if(is_object($objServicio))
                    {
                        $strLoginEstadoServicio = '<br>[Login Auxiliar: '.$objServicio->getLoginAux().
                                                  ', Estado: '.$objServicio->getEstado().']';
                    }
                }
                $response = new Response("Ruta ya existente. Favor ingresar nuevos datos.".$strLoginEstadoServicio); 
                $response->setStatusCode('406');
                return $response;
            }
            else
            {                
                if($objProducto->getNombreTecnico()=="INTMPLS" || $objProducto->getNombreTecnico()=="INTERNET"
                    || $objProducto->getNombreTecnico()=="INTERNET SDWAN")
                {
                    if($objProducto->getNombreTecnico()=="INTMPLS" || $objProducto->getNombreTecnico()=="INTERNET SDWAN")
                    {
                        //Se obtiene la configuracion de los paneles que se visualizaran de manera dinamica por tipo de caso escogido
                        $arrayResponse = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                     ->get("VRF_INTERNET",'TECNICO',null,null,null,null,null,null);

                        if(count($arrayResponse)>0)
                        {
                            foreach($arrayResponse as $reg) {          

                                $objInfoPersonaEmpresaRolCarac = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                             ->find($reg['valor1']);
                                $vrf = $objInfoPersonaEmpresaRolCarac->getValor();
                            } 
                        }
                    }
                    
                    //Validar que la subred que se desea enrutar no se encuentre dentro del POOL de Ips que el telcos asigna y si es asi
                    //verificar que esta se encuentre disponible para proceder a reservarla
                    $strSubredRuta = $redLan.$intMaskValue;

                    //Verificamos que la subred exista en el pool de telconet
                    $objSubred = $emInfraestructura->getRepository("schemaBundle:InfoSubred")
                                                   ->findOneBy(array('subred'  =>  $strSubredRuta));
                    if(is_object($objSubred))
                    {                    
                        $objSubredTmp = $objSubred;
                        
                        if($objSubredTmp->getEstado()=='Activo')
                        {
                            //Si la subred esta activa verificamos si no existen subredes padres ocupadas o configuradas en otra ruta
                            while($objSubredTmp->getSubredId())
                            {
                                $strIpRedLan = explode("/", $objSubredTmp->getSubred())[0];

                                $objRutaElemento = $emInfraestructura->getRepository("schemaBundle:InfoRutaElemento")
                                                                     ->findOneBy(array('redLan'        => $strIpRedLan,
                                                                                       'mascaraRedLan' => $objSubredTmp->getMascara(),
                                                                                       'estado'        => 'Activo'));
                                //Si no existe la subred asignada en una ruta estatica
                                //continua el proceso
                                if(is_object($objRutaElemento))
                                {
                                    $response = new Response("No es posible generar la Ruta Estática dado que existe una subred padre de la subred"
                                                           . " ingresada que esta siendo ocupada en otra Ruta:<br/>"
                                                           . " <b>Subred usada</b>: ".$objSubredTmp->getSubred()
                                                           . ' <br><b>Nombre Ruta</b>: '.$objRutaElemento->getNombre().'</b><br>'
                                                           . 'Por favor verificar con'
                                                           . ' Sistemas si debe ser liberada u ocupada para continuar.'); 
                                    $response->setStatusCode('406');
                                    return $response;
                                }
                                else
                                {
                                    if($objSubredTmp->getSubredId())
                                    {
                                        $objSubredTmp = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                          ->find($objSubredTmp->getSubredId()->getId());
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                            }

                            //Si la subred existe en el pool y esta se encuentra disponible se la reserva en el telcos
                            $arrayParametrosSubred                  = array();
                            $arrayParametrosSubred['tipoAccion']    = "asignar";
                            $arrayParametrosSubred['uso']           = 'RUTASINTMPLS';
                            $arrayParametrosSubred['subredId']      = $objSubred->getId();
                            $arrayParametrosSubred['mascara']       = trim($maskLan);
                            $arrayParametrosSubred['subredPrefijo'] = null;

                            $arraySubred = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                             ->provisioningSubred($arrayParametrosSubred);

                            if(isset($arraySubred['subredId']) && $arraySubred['subredId']>0)
                            {
                                $objSubred->setElementoId($objElementoPadre);
                                $emInfraestructura->persist($objSubred);
                                $emInfraestructura->flush();                            
                            }
                        }
                        else
                        {
                            //login auxiliar y estado del servicio
                            $strLoginEstadoServicio = '';
                            //obtengo el objeto de la ruta elemento
                            $objInfoRutaElemento = $emInfraestructura->getRepository("schemaBundle:InfoRutaElemento")->findOneBy(
                                                                                    array('subredId' => $objSubredTmp->getId(),
                                                                                          'estado'   => 'Activo'));
                            //obtengo la ip de la subred
                            $objIp = $emInfraestructura->getRepository("schemaBundle:InfoIp")->findOneBy(
                                                            array('subredId' => $objSubredTmp->getId(),
                                                                  'estado'   => 'Activo'));
                            if(is_object($objInfoRutaElemento))
                            {
                                //obtengo el servicio
                                $objServicio = $objInfoRutaElemento->getServicioId();
                                if(is_object($objServicio))
                                {
                                    $strLoginEstadoServicio = ':<br>[Login Auxiliar: '.$objServicio->getLoginAux().
                                                              ', Estado: '.$objServicio->getEstado().']';
                                }
                            }
                            elseif(is_object($objIp))
                            {
                                //obtengo el servicio
                                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($objIp->getServicioId());
                                if(is_object($objServicio))
                                {
                                    $strLoginEstadoServicio = ':<br>[Login Auxiliar: '.$objServicio->getLoginAux().
                                                              ', Estado: '.$objServicio->getEstado().']';
                                }
                            }
                            $response = new Response("Subred escogida para generación de Ruta Estática ya se encuentra Ocupada, "
                                                   . "notificar a Sistemas".$strLoginEstadoServicio);
                            $response->setStatusCode('406');
                            return $response;
                        }
                    }
                }

                if ($enrutarPE === 'true')
                {
                    if($strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'INTERNETDC')
                    {
                        $strTipoSolucion = 'HOSTING';
                        
                        //Si existe informacion de SW ( HOUSING )
                        if(is_object($objElemento))
                        {
                            $strTipoSolucion = 'HOUSING';
                        }
                                                
                        if($strNombreTecnico == 'DATOSDC')
                        {
                            $strNombreTecnico = $strNombreTecnico.'-L3';
                        }
                        
                        $strNombreTecnico = $strNombreTecnico.'-'.$strTipoSolucion;
                    }

                    //verifico si el tipo de red es GPON
                    if($booleanTipoRedGpon && $objProducto->getNombreTecnico()=="L3MPLS")
                    {
                        $strIdentificacion  = "";
                        $strNombreCliente   = "";
                        //obtengo los datos del cliente
                        $objInfoPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
                        if(is_object($objInfoPersonaEmpresaRol))
                        {
                            $strIdentificacion = $objInfoPersonaEmpresaRol->getPersonaId()->getIdentificacionCliente();
                            $strNombreCliente  = $objInfoPersonaEmpresaRol->getPersonaId()->__toString();
                        }
                        //obtengo la ip del elemento
                        $objIpElemento         = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                ->findOneBy(array("elementoId" => $objElemento->getId(),
                                                                                  "estado"     => "Activo"));
                        if(!is_object($objIpElemento))
                        {
                            throw new \Exception("No se encontró la Ip del elemento ".$objElemento->getNombreElemento().", ".
                                                 "por favor notificar a Sistemas.");
                        }

                        //setea arreglo para ejecutar rda
                        $arrayParametrosEnrutamiento                            = array();
                        $arrayParametrosEnrutamiento["strPrefijoEmpresa"]       = $session->get('prefijoEmpresa');
                        $arrayParametrosEnrutamiento["strUsrCreacion"]          = $session->get('user');
                        $arrayParametrosEnrutamiento["strIpCreacion"]           = $request->getClientIp();
                        $arrayParametrosEnrutamiento["strTipoEnrutamiento"]     = "ESTATICO";
                        $arrayParametrosEnrutamiento["strOpcion"]               = "TN_ENRUTAMIENTO_DATOS";
                        $arrayParametrosEnrutamiento["objServicio"]             = $objServicio;
                        $arrayParametrosEnrutamiento["objProducto"]             = $objProducto;
                        $arrayParametrosEnrutamiento["strIpOlt"]                = $objIpElemento->getIp();
                        $arrayParametrosEnrutamiento["strModulo"]               = "enrutamientos";
                        $arrayParametrosEnrutamiento["strOpcionEnrutamiento"]   = "enrutamientoEstaticoOLT";
                        $arrayParametrosEnrutamiento["strAccion"]               = "agregar";
                        $arrayParametrosEnrutamiento["strVrf"]                  = $vrf;
                        $arrayParametrosEnrutamiento["strNameRoute"]            = $nombreRuta;
                        $arrayParametrosEnrutamiento["strNetLan"]               = $redLan;
                        $arrayParametrosEnrutamiento["strMaskLan"]              = $maskLan;
                        $arrayParametrosEnrutamiento["strIpDestino"]            = $objIp->getIp();
                        $arrayParametrosEnrutamiento["strDistanceAdmin"]        = $distanciaAdmin;
                        //se ejecuta ws de RDA
                        $arrayRespuesta = $serviceActivacion->llamadaWsEnrutamientoGPON($arrayParametrosEnrutamiento);
                        $strStatus  = $arrayRespuesta['strStatus'];
                        $strMensaje = $arrayRespuesta['strMensaje'];
                    }
                    else
                    {
                        // ------------------------------------------------------------------------------------
                        // call al WebService NetworkingScriptsService
                        // ------------------------------------------------------------------------------------
                        $arrayPeticiones = array();
                        $arrayPeticiones['url']    = 'enrutamientoEstaticoPe';
                        $arrayPeticiones['accion'] = 'agregar';
                        //...
                        $arrayPeticiones['clase_servicio']  = $strNombreTecnico;
                        $arrayPeticiones['vrf']             = $vrf;
                        $arrayPeticiones['pe']              = $objElementoPadre->getNombreElemento();
                        if($booleanTipoRedGpon)
                        {
                            $arrayPeticiones['sw']          = "";
                            $arrayPeticiones['olt']         = is_object($objElemento)?$objElemento->getNombreElemento():'';
                        }
                        else
                        {
                            $arrayPeticiones['olt']         = "";
                            $arrayPeticiones['sw']          = is_object($objElemento)?$objElemento->getNombreElemento():'';
                        }
                        $arrayPeticiones['name_route']      = $nombreRuta;
                        $arrayPeticiones['net_lan']         = $redLan;
                        $arrayPeticiones['mask_lan']        = $maskLan;
                        $arrayPeticiones['ip_destino']      = $objIp->getIp();
                        $arrayPeticiones['distance_admin']  = $distanciaAdmin;
                        $arrayPeticiones['option']          = 'A';
                        //...
                        $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
                        $arrayPeticiones['login_aux']       = $objServicio->getLoginAux();
                        $arrayPeticiones['user_name']       = $session->get('user');
                        $arrayPeticiones['user_ip']         = $request->getClientIp();
                        //...
                        $arrayPeticiones['idServicio']      = $idServicio;
                        $arrayPeticiones['idProducto']      = $idProducto;

                        //Ejecucion del metodo via WS para realizar la configuracion del SW
                        $networkingScriptsService = $this->get('tecnico.NetworkingScripts');
                        $arrayRespuesta = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);

                        $strStatus  = $arrayRespuesta['status'];
                        $strMensaje = $arrayRespuesta['mensaje'];
                        // ------------------------------------------------------------------------------------
                    }
                }
                else
                {
                    $strStatus = 'OK';
                }
                
                if($strStatus == 'OK')
                {
                    // Creacion de la rutaElemento
                    $objRutaElemento = new InfoRutaElemento();
                    $objRutaElemento->setServicioId($objServicio);
                    $objRutaElemento->setElementoId($objElementoPadre);
                    $objRutaElemento->setIpId($objIp);
                    $objRutaElemento->setNombre($nombreRuta);
                    $objRutaElemento->setEstado("Activo");
                    $objRutaElemento->setTipo("Ruta Estática");
                    $objRutaElemento->setRedLan($redLan);
                    $objRutaElemento->setMascaraRedLan($maskLan);
                    $objRutaElemento->setDistanciaAdmin($distanciaAdmin);
                    $objRutaElemento->setFeCreacion(new \DateTime('now'));
                    $objRutaElemento->setUsrCreacion($session->get('user'));
                    $objRutaElemento->setIpCreacion($request->getClientIp());
                    $emInfraestructura->merge($objRutaElemento);
                    $emInfraestructura->flush();

                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setObservacion('Se Creo la ruta <b>'.$nombreRuta.'</b>');
                    $objServicioHistorial->setIpCreacion($request->getClientIp());
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setUsrCreacion($session->get('user'));
                    $objServicioHistorial->setEstado($objServicio->getEstado());
                    $emComercial->persist($objServicioHistorial);
                    $emComercial->flush();

                    $emComercial->getConnection()->commit();
                    $emInfraestructura->getConnection()->commit();  
                }
                else
                {
                    $response = new Response($strMensaje); 
                    $response->setStatusCode('406');
                    return $response;
                }
            }            
        }
        catch (\Exception $e) 
        {
            $msg = "Error al asignar el protocolo de enrutamiento: ".$e->getMessage();
            //...
            $emComercial->getConnection()->rollback();
            $emComercial->getConnection()->close();
            //...
            $emInfraestructura->getConnection()->rollback();
            $emInfraestructura->getConnection()->close();
            //...
        }
        $response->setContent($msg);
        return $response;  
    }

    /**
     * Funcion ajax que sirve para mostrar las rutas del
     * servicio del cliente
     * 
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.0 28-03-2016
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 07-05-2018    Se agrega programación para filtrar rutas por tipo
     * @since
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 25-06-2018    Se valida para que los servicios BACKUP solo escojan las prefixlist a configurar de las rutas dinamicas
     *                            del principal ya configuradas
     * @since
     * 
     * @param  $request [ idServicio , start , limit ]
     * @return $response Response
     */
    public function ajaxMostrarRutasAction()
    {
        $objResponse       = new Response();
        $objRequest        = $this->get('request');
        
        $emComercial       = $this->get('doctrine')->getManager();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $serviceTecnico = $this->get('tecnico.InfoServicioTecnico');
        $intIdServicio  = $objRequest->get('idServicio');
        $intStart       = $objRequest->get('start');
        $intLimit       = $objRequest->get('limit');
        $strOrigen      = $objRequest->get('origen');
                
        $strMensaje     = "No dispone de enrutamientos.";
        
        try
        {
            //Obtener json para el mapeo del grid
            $arrayParametros = array();
            $arrayParametros['idServicio']   = $intIdServicio;
            $arrayParametros['arrayEstados'] = array("Activo");
            $arrayParametros['start']        = $intStart;
            $arrayParametros['limit']        = $intLimit;
            
            if($strOrigen == 'AdminBGP')
            {
                $arrayParametros['arrayTipos'] = array("Ruta Estática",
                                                       "Ruta Automática");
            }
            else
            {
                $arrayParametros['arrayTipos'] = array("Ruta Estática",
                                                       "Ruta Automática",
                                                       "Ruta Dinámica"
                                                      );
            }
            
            $arrayResponse = $emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                               ->getAjaxRutasPorServicioPorEstados($arrayParametros);
            
            $objServicioTecnico = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
            
            //Buscar subredes ligadas a rutas para procesos de administracion BGP
            if(!empty($strOrigen) && 
               $strOrigen == 'AdminBGP' && 
               is_object($objServicioTecnico) &&
               $objServicioTecnico->getTipoEnlace() == 'BACKUP')
            {
                $arrayResponse = json_decode($arrayResponse);
                $intTotal      = $arrayResponse->total;
                $arrayRutas    = $arrayResponse->encontrados;
                
                $arrayParametros['arrayTipos'] = array(                                                       
                                                       "Ruta Dinámica"
                                                      );
                
                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

                if(is_object($objServicio))
                {
                    $objServicioProductoCaract = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 
                                                                                                    "ES_BACKUP", 
                                                                                                    $objServicio->getProductoId());
                    if(is_object($objServicioProductoCaract))
                    {
                        $arrayParametros['idServicio'] = $objServicioProductoCaract->getValor();
                        $arrayResponsePri              = $emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                                                           ->getAjaxRutasPorServicioPorEstados($arrayParametros);

                        $arrayRutasPri   = json_decode($arrayResponsePri);                                
                        $arrayRutas      = array_merge($arrayRutasPri->encontrados,$arrayRutas);

                        //Response      
                        $arrayResponseRutasAdicionales                = array();
                        $arrayResponseRutasAdicionales['total']       = $intTotal + $arrayRutasPri->total;
                        $arrayResponseRutasAdicionales['encontrados'] = $arrayRutas;
                        $arrayResponse = json_encode($arrayResponseRutasAdicionales);
                    }
                }
            }
                        
            $objResponse->setContent($arrayResponse);
            return $objResponse;  
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al asignar el protocolo de enrutamiento: ".$e->getMessage();
        }
        
        $objResponse->setContent($strMensaje);
        return $objResponse;  
    }

    
        /**
     * Funcion ajax que sirve para mostrar las Ip del
     * servicio clear channel del cliente 

     * @author Brenyx Giraldo <agiraldo@telconet.ec>
     * @version 1.0 14-06-2022 
     *                           
     * @since
     * 
     * @param  $request [ idServicio , start , limit ]
     * @return $response Response
     */
    public function ajaxMostrarIpClearChannelWanAction()
    {
        $objResponse       = new Response();
        $objRequest        = $this->get('request');
        
        $emComercial       = $this->get('doctrine')->getManager();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $serviceTecnico = $this->get('tecnico.InfoServicioTecnico');
        $intIdServicio  = $objRequest->get('idServicio');
                
        $strMensaje     = "No tiene Ipa Asociadas.";
        
        try
        {
            //Obtener json para el mapeo del grid
            $arrayParametros = array();
            $arrayParametros['idServicio']   = $intIdServicio;
            $arrayParametros['strEstadoIp']        = 'Activo';
            
   
            
            $arrayResponse = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                               ->getIpsSubredPorServicio($arrayParametros);
            
            if (!empty($arrayResponse)) 
            {


               $arrayResponse = json_encode($arrayResponse);
               $objResponse->setContent($arrayResponse);

            
            }
            else 
            {
                $objResponse->setContent($strMensaje);   
            }     
               
            
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al encontrar Ips para este servicio: ".$e->getMessage();
            $objResponse->setContent($strMensaje); 
        }
        
       
        return $objResponse;  
    }

         /**
     * Funcion ajax que sirve para mostrar las Ip del
     * servicio clear channel del cliente 

     * @author Brenyx Giraldo <agiraldo@telconet.ec>
     * @version 1.0 14-06-2022 
     *                           
     * @since
     * 
     * @param  $request [ idServicio , start , limit ]
     * @return $response Response
     */
    public function ajaxMostrarIpClearChannelLanAction()
    {
        $objResponse       = new Response();
        $objRequest        = $this->get('request');
        
        $emComercial       = $this->get('doctrine')->getManager();
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $serviceTecnico = $this->get('tecnico.InfoServicioTecnico');
        $intIdServicio  = $objRequest->get('idServicio');
                
        $strMensaje     = "No tiene Ipa Asociadas.";
        
        try
        {
            //Obtener json para el mapeo del grid
            $arrayParametros = array();
            $arrayParametros['idServicio']   = $intIdServicio;
            $arrayParametros['strEstadoIp']        = 'Activo';
            
   
            
            $arrayResponse = $emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                               ->getSubredRutasPorServicio($arrayParametros);
            
            if (!empty($arrayResponse)) 
            {


               $arrayResponse = json_encode($arrayResponse);
               $objResponse->setContent($arrayResponse);

            
            }
            else 
            {
                $objResponse->setContent($strMensaje);   
            }     
               
            
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al encontrar Ips para este servicio: ".$e->getMessage();
            $objResponse->setContent($strMensaje); 
        }
        
       
        return $objResponse;  
    }




    
    /**
     * @Secure(roles="ROLE_324-8")
     * 
     * Funcion ajax que sirve para elminar una ruta seleccionada
     * servicio del cliente
     * 
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.0 28-03-2016
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 07-05-2018   Se cambia programación service para reutilizar funcionamiento
     * @since 1.0
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 19-06-2018 - Se ajusta para que al momento de eliminar verifique si la subred de la ruta existe ocupada ya en el catalogo de
     *                           pool de subredes ( en caso de rutas estaticas ) y proceder a liberarla
     * 
     * @param  $request [ idServicio , idRuta ]
     * @return $response Response
     */
    public function ajaxEliminarRutaAction()
    {
        $response   = new Response();
        $msg        = "Ruta eliminada satisfactoriamente.";
        $objRequest = $this->get('request');
        $objSession = $objRequest->getSession();
        $request    = $this->get('request');
        $session    = $this->get('session');
        
        $idRuta     = $request->get('idRuta');
        $idElemento = $request->get('idElemento');
        $idServicio = $request->get('idServicio');
        $idProducto = $request->get('idProducto');
        $vrf        = $request->get('vrf');
        
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial       = $this->get('doctrine')->getManager('telconet'); 
        
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil            = $this->get('schema.Util');     
        
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();

        try {
            $arrayParametrosMetodo = array(
                                            'strIdRuta'     => $idRuta,
                                            'strIdElemento' => $idElemento,
                                            'strIdServicio' => $idServicio,
                                            'strIdProducto' => $idProducto,
                                            'strVrf'        => $vrf,
                                            'strUserClient' => $session->get('user'),
                                            'strIpClient'   => $request->getClientIp(),
                                            'strProceso'    => 'botonEliminar'
                                          );
            $arrayRespuestaEliminar = $serviceServicioTecnico->eliminarRutaEnEquipos($arrayParametrosMetodo);
            if ($arrayRespuestaEliminar['strStatus'] == "OK")
            {
                $emComercial->commit();
                $emInfraestructura->commit();
            }
            else
            {
                if($emComercial->getConnection()->isTransactionActive())
                {
                    $emComercial->rollback();
                }

                if($emInfraestructura->getConnection()->isTransactionActive())
                {
                    $emInfraestructura->rollback();
                }
            }
            $emComercial->close();
            $emInfraestructura->close();
        }
        catch (\Exception $objEx) 
        {
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->rollback();
            }
            
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->rollback();
            }
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxEliminarRutaAction',
                                      $objEx->getMessage(),
                                      $objSession->get('user'),
                                      $objRequest->getClientIp());
            
            $emComercial->close();
            $emInfraestructura->close();
        }
        $response->setContent($arrayRespuestaEliminar['strMensaje']);
        if(isset($arrayRespuestaEliminar['strStatusCode']) && !empty($arrayRespuestaEliminar['strStatusCode']))
        {
            $response->setStatusCode($arrayRespuestaEliminar['strStatusCode']);
        }
        return $response;  
    }
    /**
     * Metodo ajax que retorna un JSON con el usuario, clave y ssid del servicio
     * que se va a activar.
     * @return Response JSON con informacion de credenciales de usuario
     * @author Veronica Carrasco <vcarrasco@telconet.ec>
     * @version 1.0 12-06-2016
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 05-09-2018    Se agrega programación para nueva versión de proyecto Netlifezone
     * @since 1.0
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 21-12-2020 - Se agrega logica de activacion de SSID_MOVIL
     * @since 1.1
     */
    public function ajaxGenerarCredencialesWifiAction()
    {
        ini_set('max_execution_time', 400000);
        $response        = new Response();
        $request         = $this->get('request');
        $session         = $request->getSession();
        $servicioId      = $request->get('servicioId');
        $strTipo         = $request->get('strTipo');
        $cliente         = $session->get('cliente');
        $empresaId       = $session->get('idEmpresa');
        $strUsrCreacion  = $session->get('user');
        $strIpCreacion   = $request->getClientIp();
        $arrayParametros = array();
        $arrayParametros['intEmpresaId']   = $empresaId;
        $arrayParametros['intServicioId']  = $servicioId;
        $arrayParametros['arrayCliente']   = $cliente;
        $arrayParametros['strTipo']        = $strTipo;
        $arrayParametros['strUsrCreacion'] = $strUsrCreacion;
        $arrayParametros['strIpCreacion']  = $strIpCreacion;
        $arrayParametros['strActivacion']  = "S";
        $response->setContent(json_encode($this->get('tecnico.Wifi')
                 ->generarCredencialesWifi($arrayParametros)));
        return $response;
    }
    
    /**
     * @Secure(roles="ROLE_151-4237")
     * Funcion que Activa un usuario en Telcos para hacer usuo del servico 
     * Wifi  y registra al usuario en Portal Cautivo
     * @return Response objeto de respuesta
     * 
     * @author Veronica Carrasco <vcarrasco@telconet.ec>
     * @version 1.0 12-06-2016
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 05-09-2018    Se agrega programación para nueva versión de proyecto Netlifezone
     * @since 1.0
     */
    public function agregarServicioWifiAction()
    {
        ini_set('max_execution_time', 400000);
        $request   = $this->get('request');
        $session   = $request->getSession();
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $empresaId      = $session->get('idEmpresa');
        $cliente        = $session->get('cliente');
        $strClave       = $request->get('clave');
        $strUsuario     = $request->get('usuario');
        $servicioId     = $request->get('idServicio');
        
        $arrayParametros = array(
                                "empresaId"    => $empresaId,
                                "servicioId"   => $servicioId, 
                                "cliente"      => $cliente, 
                                "strUsuario"   => $strUsuario, 
                                "strClave"     => $strClave, 
                                "usrCreacion"  => $session->get('user'), 
                                "ipCreacion"   => $request->getClientIp()
                                );
        
        $respuesta->setContent(json_encode($this->get('tecnico.Wifi')
                  ->activarServicioWifi($arrayParametros)));
        
        return $respuesta;
    }
    
    /**
     * @Secure(roles="ROLE_151-4257")
     * 
     * Método que permite recuperar las credenciales del producto Wifi 
     * de Netlife
     * 
     * @author Veronica Carrasco <vcarrasco@telconet.ec>
     * @version 1.0 12-06-2016
     */
    public function recuperarCredencialesWifiAction()
    {
        ini_set('max_execution_time', 400000);
        $request   = $this->get('request');
        $session   = $request->getSession();
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        
        $empresaId      = $session->get('idEmpresa');
        $cliente        = $session->get('cliente');
        $strClave       = $request->get('clave');
        $strUsuario     = $request->get('usuario');
        $servicioId     = $request->get('idServicio');
        $strSsid        = $request->get('ssid');
        
        $arrayParametros = array(
                                "empresaId"     =>  $empresaId,
                                "servicioId"    =>  $servicioId,
                                "cliente"       =>  $cliente,
                                "strSsid"       =>  $strSsid,
                                "strUsuario"    =>  $strUsuario,
                                "strClave"      =>  $strClave,
                                "usrCreacion"   =>  $session->get('user'),
                                "ipCreacion"    =>  $request->getClientIp()
                                );
        
        $respuesta->setContent(json_encode($this->get('tecnico.Wifi')
                                                ->recuperarCredencialesServicioWifi($arrayParametros)));
        return $respuesta;
    }
    
    /**
     * ajaxOperacionesNetlifeWifiAction
     * 
     * @Secure(roles="ROLE_151-311") 
     * Funcion que corta un servicio Wifi para un punto determinado
     * 
     * @author Veronica Carrasco <vcarrasco@telconet.ec>
     * @version 1.0 27-06-2016
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 21-08-2018   Se reestructura proceso por nueva version de producto NETLIFEZONE
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 07-10-2019 Se cambia programacíon del proceso a método Service
     * @since 1.1
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 04-12-2020 Se reutiliza metodo para nuevo producto SSID_MOVIL
     * @since 1.2
     */
    public function ajaxOperacionesNetlifeWifiAction()
    {
        ini_set('max_execution_time', 400000);
        $respuesta      = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $request        = $this->get('request');
        $session        = $request->getSession();
        $empresaId      = $session->get('idEmpresa');
        $emComercial    = $this->get('doctrine')->getManager('telconet');
        $peticion       = $this->get('request');
        $idServicio     = $peticion->get('idServicio');
        $idAccion       = $peticion->get('idAccion');
        $strProceso     = $peticion->get('strProceso');
        $strUsrCreacion = $session->get('user');
        $strIpCreacion  = $peticion->getClientIp();
        $serviceUtil    = $this->get('schema.Util');
        $serviceWifi    = $this->get('tecnico.Wifi');
        $strEstado      = "";
        $strObservacion = "";
        $strMetodoWs    = "";
        $strProducto    = "";
        $emComercial->getConnection()->beginTransaction();
        try
        {
            $strProducto = "Netlife Zone";
            if($empresaId == "10")
            {
                $strProducto = "SSID_MOVIL";
            }

            if ($strProceso == "Cortar")
            {
                $strMetodoWs    = "inactive_user";
                $strEstado      = "In-Corte";
                $strObservacion = $strProducto.": Servicio cortado.";
            }
            else if ($strProceso == "Reactivar")
            {
                $strMetodoWs    = "active_user";
                $strEstado      = "Activo";
                $strObservacion = $strProducto.": Servicio reconectado.";
            }
            else if ($strProceso == "Cancel")
            {
                $strMetodoWs    = "delete_user";
                $strEstado      = "Cancel";
                $strObservacion = $strProducto.": Se cancelo el servicio.";
            }
            else
            {
                throw new \Exception("Se debe especificar el proceso a ejecutar.");
            }
            $arrayParametrosOperaciones = array();
            $arrayParametrosOperaciones['intIdEmpresa']   = $empresaId;
            $arrayParametrosOperaciones['intIdServicio']  = $idServicio;
            $arrayParametrosOperaciones['intIdAccion']    = $idAccion;
            $arrayParametrosOperaciones['strUsuario']     = $strUsrCreacion;
            $arrayParametrosOperaciones['strIpCliente']   = $strIpCreacion;
            $arrayParametrosOperaciones['strEstado']      = $strEstado;
            $arrayParametrosOperaciones['strObservacion'] = $strObservacion;
            $arrayParametrosOperaciones['strMetodoWs']    = $strMetodoWs;
            $strRespuesta = $serviceWifi->procesarOperacionesNetlifeWifi($arrayParametrosOperaciones);
            if($strRespuesta == "OK")
            {
                if($emComercial->getConnection()->isTransactionActive())
                {
                    $emComercial->commit();
                }
            }
            else
            {
                if($emComercial->getConnection()->isTransactionActive())
                {
                    $emComercial->getConnection()->rollback();
                }
            }
            $respuesta->setContent($strRespuesta);
        }
        catch(\Exception $objEx)
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController->ajaxOperacionesNetlifeWifiAction', 
                                      $objEx->getMessage(),
                                      $strUsrCreacion, 
                                      $strIpCreacion
                                     );
            $respuesta->setContent("Error : Se presentaron errores al ejecutar el proceso, favor comunicar a Sistemas.");
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
        }
        $emComercial->getConnection()->close();
        return $respuesta;
    }
    
    /* * 
     * Metodo que devuelve el json de las interfaces de un elemento dado segun el nombre del interface enviado como parametro
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 04-07-2016
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.1 05-01-2020 - Para productos Internet SDWAN con un Servicio Ng Firewall activo, se envía a consultar los puertos del CPE.
     * 
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function ajaxGetInterfacePorCpeAction()
    {
        $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');     
        
        $request    = $this->get('request');       
       
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial       = $this->get('doctrine')->getManager('telconet'); 
        $serviceInfoServTecnico    = $this->get('tecnico.InfoServicioTecnico');
        $arrayParams = array();
        
        $arrayParams['intIdElemento']      = $request->get('idElemento');
        $arrayParams['strNombreInterface'] = $request->get('interface');
        $usaUMExistente                    = $request->get('usaUMExistente');
        $arrayParams['tipoElemento']       = $request->get('tipoElemento');
        $arrayParams['strTipoOrden']       = $request->get('tipoOrden');
        $intIdServicioCpe                  = $request->get('idServicioCpe');
        $intIdServicio                     = $request->get('idServicio');

        if(isset($intIdServicio) && !empty($intIdServicio) && isset($intIdServicioCpe) && !empty($intIdServicioCpe))
        {
            $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objServicioCpe = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioCpe);
            
            if(is_object($objServicio) && !empty($objServicio) && is_object($objServicioCpe) && !empty($objServicioCpe))
            {
                $objServProdCaractSDWAN   = $serviceInfoServTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                        'SDWAN',
                                                                                                        $objServicio->getProductoId()
                                                                                                        );
            }
            
            if(is_object($objServProdCaractSDWAN) && !empty($objServProdCaractSDWAN))
            {
                $objProducto    = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId());
                $objProductoCpe = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicioCpe->getProductoId());
                
                if(is_object($objProducto) && !empty($objProducto) && $objProducto->getDescripcionProducto()=='Internet MPLS' && 
                    $objProductoCpe->getDescripcionProducto()=='SECURITY NG FIREWALL')
                {
                    $usaUMExistente = 'NO';
                }
            }
            
        }
        //Si la ultima Milla es NUEVA para activar usando cpe existente es obligatorio obtener solo puertos disponibles "not connect"
        if($usaUMExistente === 'NO')
        {
            $arrayParams['consultaEstado']  = true;
        }
        
        $objJson = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->getJsonInterfacesElementoPorNombreInterface($arrayParams);
                        
        $respuesta->setContent($objJson);
        return $respuesta; 
    }
    
    /**
     * Metodo que devuelve el json de la información de la MAC de cada servicio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 16-09-2016
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     * @Secure(roles="ROLE_151-4697") 
     */
    public function ajaxGetInformacionMacAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');     
        
        $objRequest    = $this->get('request');       
       
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        $arrayParams  = array();                
        $strNombreCpe = 'N/A';        
        
        //Se obtiene la MAC vinculado al servicio
        $arrayResultado = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                            ->getMacCpePorServicioInterface($objRequest->get('idServicio'));        
        if($arrayResultado)
        {
            if(isset($arrayResultado['elementoId']))
            {
                $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($arrayResultado['elementoId']);
                
                if($objElemento)
                {
                    $strNombreCpe = $objElemento->getNombreElemento();
                }
            }
            
            $arrayParams['idInterface'] = $arrayResultado['idInterface'];
            $arrayParams['interface']   = $arrayResultado['nombreInterface'];
            $arrayParams['mac']         = $arrayResultado['mac'];
            $arrayParams['elemento']    = $strNombreCpe;  
            $arrayParams['tipoEnlace']  = $arrayResultado['tipoEnlace'];
        }
                                       
        $objRespuesta->setContent(json_encode($arrayParams));
        
        return $objRespuesta; 
    }
    
    /**
     * Metodo que actualiza la MAC relacionada con el servicio del cliente en su respectiva interface wan
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 16-09-2016
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     * @Secure(roles="ROLE_151-4697")
     */
    public function ajaxActualizarMacServicioAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');     
        
        $objRequest        = $this->get('request');       
        
        $objSession        = $objRequest->getSession();
       
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial       = $this->get('doctrine')->getManager('telconet'); 
        
        $emInfraestructura->getConnection()->beginTransaction();
        $emComercial->getConnection()->beginTransaction();
        
        try
        {                    
            $intIdInterface = $objRequest->get('idInterface');
            $intIdServicio  = $objRequest->get('idServicio');
            $strMacAnterior = $objRequest->get('macAnterior');
            $strMacNueva    = $objRequest->get('macNueva');
            
            $objInterface   = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                ->findOneByMacInterfaceElemento($strMacNueva);
            
            //Si la MAC ya existe en otro servicio configurada no permite continuar
            if($objInterface)
            {
                $objInfoDetalleInterface = $emInfraestructura->getRepository('schemaBundle:InfoDetalleInterface')
                                                             ->findOneByInterfaceElementoId($objInterface);
                $strLoginAux = "";
                
                if($objInfoDetalleInterface)
                {
                    $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($objInfoDetalleInterface->getDetalleValor());
                    
                    if($objServicio)
                    {
                        $strLoginAux = ": ".$objServicio->getLoginAux();
                    }
                }
                
                $arrayRespuesta = array(
                                            'status' => "ERROR" , 
                                            'mensaje'=> 'La MAC ingresada ya se encuentra configurada en otro Servicio <b>'.$strLoginAux.'</b><br>'
                                                        . 'Por favor, ingresa una MAC diferente ');
            }
            else
            {
                if($strMacAnterior && $strMacAnterior!='')
                {
                    //Se obtiene la MAC vinculado al servicio
                    $objInterface = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($intIdInterface);

                    if($objInterface)
                    {
                        //Se realiza el cambio de la MAC ligada a la interface y al servicio
                        $objInterface->setMacInterfaceElemento($strMacNueva);
                        $emInfraestructura->persist($objInterface);
                        $emInfraestructura->flush();

                        $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

                        if($objServicio)
                        {
                            $strMensaje = 'Se actualizó la Mac correctamente.<br/> De <b>'.$strMacAnterior.'</b> a <b>'.$strMacNueva.'</b>';

                            $objServicioHistorial = new InfoServicioHistorial();
                            $objServicioHistorial->setServicioId($objServicio);
                            $objServicioHistorial->setObservacion($strMensaje);
                            $objServicioHistorial->setEstado($objServicio->getEstado());
                            $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $objServicioHistorial->setIpCreacion($objRequest->getClientIp());                    
                            $emComercial->persist($objServicioHistorial);               
                            $emComercial->flush();                            

                            $arrayRespuesta = array(
                                                    'status' => "OK" , 
                                                    'mensaje'=> $strMensaje); 
                        }
                        else
                        {
                            $arrayRespuesta = array(
                                                    'status' => "ERROR" , 
                                                    'mensaje'=> 'No existe el Servicio requerido');
                        }
                    }         
                    else
                    {
                        $arrayRespuesta = array(
                                            'status' => "ERROR" , 
                                            'mensaje'=> 'No existe interface relacionada al Servicio');    
                    }      
                }
                else
                {
                    $arrayRespuesta = array(
                                            'status' => "ERROR" , 
                                            'mensaje'=> 'No se encuentra registro de MAC anterior, por favor verificar');
                }
            }
                
            $emComercial->getConnection()->commit();           
            $emInfraestructura->getConnection()->commit();       
        }
        catch(\Exception $e)
        {
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->getConnection()->close();
            }
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
                $emInfraestructura->getConnection()->close();
            }
            
            error_log($e->getMessage());
            
            $arrayRespuesta = array(
                                    'status' => "ERROR" , 
                                    'mensaje'=> 'Error al Actualizar la Mac del Servicio');           
        }
                        
        $objRespuesta->setContent(json_encode($arrayRespuesta));
        
        return $objRespuesta;
    }
        
    /**
     * 
     * Metodo que sirve para migrar a pseudope cada servicio ( agregar edificio a datos del punto )
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 30-01-2017
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     * 
     * @Secure(roles="ROLE_151-5057")
     */
    public function ajaxMigrarAPseudPeAction()
    {
        $objRequest        = $this->get('request');
        $serviceUtil       = $this->get('schema.Util');
        $objSession        = $objRequest->getSession();
        $intIdServicio     = $objRequest->get('idServicio');
        $intIdEdificio     = $objRequest->get('idEdificio');
        
        $emComercial       = $this->get('doctrine')->getManager('telconet');
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            //Obtener el punto ligado al Servicio
            $objServicio   = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            
            if(is_object($objServicio))
            {
                $intIdPunto            = $objServicio->getPuntoId()->getId();
                
                $objPuntoDatoAdicional = $emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')->findOneByPuntoId($intIdPunto);
                
                if(is_object($objPuntoDatoAdicional))
                {
                    $objElementoEdificio = $emComercial->getRepository('schemaBundle:InfoElemento')->find($intIdEdificio);
                    
                    if(is_object($objElementoEdificio))
                    {
                        //Se relaiza la relacion del punto del servicio con el edificio seleccionado
                        $objPuntoDatoAdicional->setElementoId($objElementoEdificio);
                        $objPuntoDatoAdicional->setDependeDeEdificio('S');
                        $emComercial->persist($objPuntoDatoAdicional);
                        $emComercial->flush();
                        
                        $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
                
                        if(is_object($objServicioTecnico))
                        {
                            $objAdmiTipoMedio = $emComercial->getRepository('schemaBundle:AdmiTipoMedio')->findOneByNombreTipoMedio('UTP');

                            if(is_object($objAdmiTipoMedio))
                            {
                                //Se cambia ultima Milla a UTP para generar proceso correctamente
                                $objServicioTecnico->setUltimaMillaId($objAdmiTipoMedio->getId());
                                $emComercial->persist($objServicioTecnico);
                                $emComercial->flush();

                                $objServicioHistorial = new InfoServicioHistorial();
                                $objServicioHistorial->setServicioId($objServicio);
                                $objServicioHistorial->setObservacion('El Servicio fue AGREGADO correctamente a Edificio Pseudo-Pe : '
                                                                    . '<b>'.$objElementoEdificio->getNombreElemento().'</b>');
                                $objServicioHistorial->setEstado($objServicio->getEstado());
                                $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                $objServicioHistorial->setIpCreacion($objRequest->getClientIp());                    
                                $emComercial->persist($objServicioHistorial);               
                                $emComercial->flush();
                                
                                $strMensaje = 'El Servicio fue migrado correctamente a Esquema Edifico Pseudo-Pe';
                
                                $emComercial->commit();
                            }
                        }
                    }
                    else
                    {
                        $strMensaje = 'No existe el Edificio al cual requiere relacionar con el Servicio';
                    }
                }
                else
                {
                    $strMensaje = 'No existe datos del Punto relacionado al Servicio a ser migrado';
                }
            }
            else
            {
                $strMensaje = 'No existe el Servicio al cual se desea migrar a esquema Pseudo-Pe';
            }
        } 
        catch (\Exception $e) 
        {
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->rollback();
            }
            
            $serviceUtil->insertError('Telcos+', 
                                      'ajaxMigrarAPseudPeAction', 
                                      $e->getMessage(), 
                                      $objSession->get("user"), 
                                      $objRequest->getClientIp()
                                     );
            
            $strMensaje = 'Error al migrar servicio a esquema PseudoPe';
        }
        
        $emComercial->close();
        
        $objRespuesta = new JsonResponse();
        $objRespuesta->setData(array('mensaje' => $strMensaje));
        return $objRespuesta;
    }
    /**
     * Metodo que devuelve el enlace completo de un servicio enviado como parámetro
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 19-09-2016
     * 
     * @author  Rafael Vera <rsvera@telconet.ec>
     * @version 1.1 15-06-2023 - Se agregó la variable $strEstadoEnlace para filtrar por estado los puntos de enlaces
     *  
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     * @Secure(roles="ROLE_151-4717")
     */
    public function ajaxConsultarEnlacesServicioAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        
        $serviceUtil       = $this->get('schema.Util');
        $objRequest        = $this->get('request');
        $objSession        = $objRequest->getSession();
        
        $emInfraestructura = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        $intIdServicio     = $objRequest->get('idServicio');
        
        $strEstadoEnlace = $objRequest->get('estado') ? $objRequest->get('estado') : "";

        try
        {        
            $objResultadoEnlace = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                    ->getJsonResultadoEnlacesServicio($intIdServicio,$strEstadoEnlace);
        }
        catch(\Exception $e)
        {            
            $serviceUtil->insertError('Telcos+', 
                                      'ajaxConsultarEnlacesServicioAction', 
                                      $e->getMessage(), 
                                      $objSession->get("user"), 
                                      $objRequest->getClientIp()
                                     );
            $objResultadoEnlace = json_encode(array('total' => 0 , 'encontrados' => array()));
        }
        
        $objRespuesta->setContent($objResultadoEnlace);
        
        return $objRespuesta;
    }

    /**
     * Funcion para obtener los modelos de acuerdo a los parámetros
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.0 2016-09-09
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 2021-10-25 - Se obtiene todos los modelos para los servicios GPON_MPLS
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.2 2022-08-03 - Se inicializa el campo $strLimit en vacío para que obtenga
     *                           todos los modelos existentes
     */
    public function ajaxGetModelosElementoAction()
    {
        $objRequest  = $this->get('request');
        $session     = $objRequest->getSession();
        $usrCreacion = $session->get('user');
        $ipCreacion  = $objRequest->getClientIp();
        $serviceUtil = $this->get('schema.Util');
        $respuesta   = new Response();
        $respuesta->headers->set('Content-Type', 'text/json');
        $emGeneral   = $this->get('doctrine')->getManager('telconet_general');
        
        try
        {
            $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
            $repositoryServTecn = $this->getDoctrine()->getManager("telconet_infraestructura")
                                                      ->getRepository('schemaBundle:InfoServicioTecnico');

            $strForma  = $objRequest->get('forma');
            $strTipo   = $objRequest->get('tipo');
            $strTipoRed = $objRequest->get('strTipoRed') ? $objRequest->get('strTipoRed') : "";
            $strEstado = $objRequest->get('estado');
            $strStart  = $objRequest->get('start');
            $strLimit  = '';

            $booleanTipoRedGpon = false;
            if(isset($strTipoRed) && !empty($strTipoRed))
            {
                $arrayParVerTipoRed = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('NUEVA_RED_GPON_TN',
                                                        'COMERCIAL',
                                                        '',
                                                        'VERIFICAR TIPO RED',
                                                        'VERIFICAR_GPON',
                                                        $strTipoRed,
                                                        '',
                                                        '',
                                                        '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
            }
            if($booleanTipoRedGpon)
            {
                $arrayNombreTipoElemento = array();
            }
            elseif(strcasecmp($strForma, "Igual que") == 0)
            {
                $arrayNombreTipoElemento = array('arrayNombreElemento' => [$strTipo]);
            }
            else
            {
                $strTipo   = $serviceTecnico->armarParametroBusquedaPorForma($strTipo,$strForma);
                $arrayNombreTipoElemento = array('arrayNombreElemento' => [$strTipo],
                                                 'strComparador'       => 'LIKE'
                                                );
            }

            $arrayParametros = array(
                                        'arrayNombreTipoElemento'   => $arrayNombreTipoElemento,
                                        'arrayEstadoModeloElemento' => ['arrayEstado' => [$strEstado]],
                                        'start'  => $strStart,
                                        'limit'  => $strLimit
                                    );

            $objJson = $repositoryServTecn->generarJsonModelosPorElemento($arrayParametros);

            $respuesta->setContent($objJson);
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError('Telcos+', 'ajaxGetModelosElementoAction', $ex->getMessage(),$usrCreacion,$ipCreacion);
        }
        
        return $respuesta;
    }
    
   /*
     * Metodo que devuelve las interfaces de un elemento y por un estado determinado
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 - 25/05/2021
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 - 15/10/2021 - Se valida los puertos del ONT por el producto SW POE
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     */    
    public function ajaxGetInterfacesPoEstadoYElementoAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');             
        $objRequest          = $this->get('request');
        $objSession          = $objRequest->getSession();
        $intEmpresaId        = $objSession->get('idEmpresa');
        $strEstadoInterface  = $objRequest->get('estadoInterface');
        $strElementoId       = $objRequest->get('elementoId');       
        $strProductoId       = $objRequest->get('productoId');
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral           = $this->get('doctrine')->getManager('telconet_general');
        $emComercial         = $this->get('doctrine')->getManager('telconet');
        $arrayRespuesta      = array();

        $arrayInterfacesElemento = array();
        if(!empty($strElementoId) && !empty($strEstadoInterface))
        {
            $arrayInterfacesElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->findBy(array("elementoId" => $strElementoId,
                                                                      "estado"     => $strEstadoInterface));
        }

        //obtener los puertos permitidos del ont
        $arrayPuertosPermitidos  = array();
        if(!empty($strProductoId))
        {
            $arrayParametrosPuertos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                    'INFRAESTRUCTURA',
                                                                                    '',
                                                                                    'PUERTOS_ONT_PERMITIDOS_POR_PRODUCTO',
                                                                                    $strProductoId,
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    $intEmpresaId);
            foreach($arrayParametrosPuertos as $arrayDetalles)
            {
                $arrayPuertosPermitidos[] = $arrayDetalles['valor2'];
            }
            //obtener los modelos camaras PTZ
            $arrayModelosCamarasPtz    = array();
            $arrayParametrosModelosPtz = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                        'INFRAESTRUCTURA',
                                                                        '',
                                                                        'MODELOS_CAMARAS_PTZ',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $intEmpresaId);
            foreach($arrayParametrosModelosPtz as $arrayDetalles)
            {
                $arrayModelosCamarasPtz[] = $arrayDetalles['valor1'];
            }
            //verificar si el puerto esta ocupado por una camara
            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($strProductoId);
            if(is_object($objProducto) && $objProducto->getNombreTecnico() === "SAFECITYSWPOE"
               && !empty($arrayPuertosPermitidos) && !empty($arrayModelosCamarasPtz))
            {
                //recorrer puertos
                foreach($arrayPuertosPermitidos as $strPuertoPermitido)
                {
                    $objInterfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                               ->findOneBy(array("elementoId"              => $strElementoId,
                                                                                 "nombreInterfaceElemento" => $strPuertoPermitido,
                                                                                 "estado"                  => 'connected'));
                    if(is_object($objInterfaceElemento))
                    {
                        $arrayEstadosCamaras  = array("Activo","In-Corte","EnPruebas");
                        $arrayServicioCamaras = $emComercial->getRepository('schemaBundle:InfoServicio')
                                    ->createQueryBuilder('s')
                                    ->innerJoin('schemaBundle:AdmiProducto', 'p', 'WITH', 's.productoId = p.id')
                                    ->innerJoin('schemaBundle:InfoServicioTecnico', 'tec', 'WITH', 'tec.servicioId = s.id')
                                    ->innerJoin('schemaBundle:InfoElemento', 'ele', 'WITH', 'tec.elementoClienteId = ele.id')
                                    ->innerJoin('schemaBundle:AdmiModeloElemento', 'mod', 'WITH', 'ele.modeloElementoId = mod.id')
                                    ->innerJoin('schemaBundle:InfoEnlace', 'enl', 'WITH', 
                                                'tec.interfaceElementoClienteId = enl.interfaceElementoFinId')
                                    ->where("p.nombreTecnico = :nombreTecnico")
                                    ->andWhere("enl.interfaceElementoIniId = :interfaceElementoIniId")
                                    ->andWhere("enl.estado = :estadoActivo")
                                    ->andWhere("s.estado IN (:estadosServicio)")
                                    ->andWhere("mod.nombreModeloElemento NOT IN (:nombresModeloElemento)")
                                    ->setParameter('nombreTecnico', "SAFECITYDATOS")
                                    ->setParameter('interfaceElementoIniId', $objInterfaceElemento->getId())
                                    ->setParameter('estadoActivo', "Activo")
                                    ->setParameter('estadosServicio', array_values($arrayEstadosCamaras))
                                    ->setParameter('nombresModeloElemento', array_values($arrayModelosCamarasPtz))
                                    ->getQuery()
                                    ->getResult();
                        if(!empty($arrayServicioCamaras) && count($arrayServicioCamaras) > 0)
                        {
                            $arrayInterfacesElemento[] = $objInterfaceElemento;
                        }
                    }
                }
            }
        }
        if(count($arrayInterfacesElemento) > 0)
        {
            foreach($arrayInterfacesElemento as $objInterfaceElemento)
            {
                if(empty($arrayPuertosPermitidos) || in_array($objInterfaceElemento->getNombreInterfaceElemento(), $arrayPuertosPermitidos))
                {
                    $arrayEncontrados[] = array('idInterface'     => $objInterfaceElemento->getId(),
                                                'nombreInterface' => $objInterfaceElemento->getNombreInterfaceElemento());
                }
            }
            
            $arrayRespuesta = array('encontrados' => $arrayEncontrados); 
        }
        else
        {
            $arrayRespuesta = array('encontrados' => '[]');
        }
                     
        $objRespuesta->setContent(json_encode($arrayRespuesta));

        return $objRespuesta;
    }

       /*
     * Metodo que devuelve las ips controladoras po marca elemento AP
     *
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.0 - 25/05/2021
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function ajaxGetIpsControladoraAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $intEmpresaId           = $objSession->get('idEmpresa');
        $strModeloElemento      = $objRequest->get('modeloAp');
        $strSerieElemento       = $objRequest->get('serieAp');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');
        $serviceCancelarServicio= $this->get('tecnico.InfoCancelarServicio');
        $arrayRespuesta         = array();


        if(!empty($strSerieElemento) && !empty($strModeloElemento))
        {
            $arrayRespuesta   = $serviceTecnico->ipsControladoras(array("modeloAp"    => $strModeloElemento,
                                                                        "serieAp"     => $strSerieElemento,
                                                                        "empresaCod"  => $intEmpresaId));

            if($arrayRespuesta['status'] == 200)
            {
                foreach($arrayRespuesta['data']['ipsControladoras'] as $intIdxRegistro)
                {
                    $arrayEncontrados[] = array('idIpControladora' => $intIdxRegistro,
                                                'ipControladora'   => $intIdxRegistro);
                }
            }
        }

		$arrayRespuesta = array('encontrados' => $arrayEncontrados);

        $objRespuesta->setContent(json_encode($arrayRespuesta));
        
        return $objRespuesta; 
    }   
    
    /*
     * Metodo que devuelve las resoluciones configuradas para camaras safecity
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 - 25/05/2021
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     */    
    public function ajaxGetResolucionCamaraAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');             
        $objRequest          = $this->get('request'); 
        $objSession          = $objRequest->getSession();
        $intEmpresaId        = $objSession->get('idEmpresa');
        $emGeneral           = $this->get('doctrine')->getManager('telconet_general');
        $arrayRespuesta      = array();

        $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                              'INFRAESTRUCTURA',
                                                                                              'PARAMETROS',
                                                                                              'RESOLUCION_CAMARA',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              $intEmpresaId);

        if(count($arrayParametrosDet) > 0)
        {            
            foreach($arrayParametrosDet as $idxRegistro)
            {
                $arrayEncontrados[] = array('resolucionCam'  => $idxRegistro['valor1'],
                                            'resCamText'     => $idxRegistro['valor2'].'x'.$idxRegistro['valor3'],
                                            'resolucionCam'  => $idxRegistro['valor1'],
                                            'resCamText'     => $idxRegistro['valor2'].'x'.$idxRegistro['valor3']);
            }
            
            $arrayRespuesta = array('encontrados' => $arrayEncontrados); 
        }
        else
        {
            $arrayRespuesta = array('encontrados' => '[]');
        }
                     
        $objRespuesta->setContent(json_encode($arrayRespuesta));
        
        return $objRespuesta; 
    }  

    /*
     * Metodo que devuelve los valores de codec configurados para camaras safecity
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 - 25/05/2021
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     */    
    public function ajaxGetCodecCamaraAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');             
        $objRequest          = $this->get('request'); 
        $objSession          = $objRequest->getSession();
        $intEmpresaId        = $objSession->get('idEmpresa');
        $emGeneral           = $this->get('doctrine')->getManager('telconet_general');
        $arrayRespuesta      = array();

        $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                              'INFRAESTRUCTURA',
                                                                                              'PARAMETROS',
                                                                                              'CODEC',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              $intEmpresaId);

        if(count($arrayParametrosDet) > 0)
        {            
            foreach($arrayParametrosDet as $idxRegistro)
            {
                $arrayEncontrados[] = array('codecCam'  => $idxRegistro['valor1'],
                                            'codecCam'  => $idxRegistro['valor1']);
            }
            
            $arrayRespuesta = array('encontrados' => $arrayEncontrados); 
        }
        else
        {
            $arrayRespuesta = array('encontrados' => '[]');
        }
                     
        $objRespuesta->setContent(json_encode($arrayRespuesta));
        
        return $objRespuesta; 
    }  

    /*
     * Metodo que devuelve los valores de FPS configurados para camaras safecity
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 - 25/05/2021
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     */    
    public function ajaxGetFpsCamaraAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');             
        $objRequest          = $this->get('request'); 
        $objSession          = $objRequest->getSession();
        $intEmpresaId        = $objSession->get('idEmpresa');
        $emGeneral           = $this->get('doctrine')->getManager('telconet_general');
        $arrayRespuesta      = array();

        $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                              'INFRAESTRUCTURA',
                                                                                              'PARAMETROS',
                                                                                              'FPS',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              '',
                                                                                              $intEmpresaId);

        if(count($arrayParametrosDet) > 0)
        {            
            foreach($arrayParametrosDet as $idxRegistro)
            {
                $arrayEncontrados[] = array('fpsCam'  => $idxRegistro['valor1'],
                                            'fpsCam'  => $idxRegistro['valor1']);
            }
            
            $arrayRespuesta = array('encontrados' => $arrayEncontrados); 
        }
        else
        {
            $arrayRespuesta = array('encontrados' => '[]');
        }
                     
        $objRespuesta->setContent(json_encode($arrayRespuesta));
        
        return $objRespuesta; 
    }     
    
    /**
     * Metodo encargado de realizar el cambio de Subredes publicas/privadas y viceversa para productos internet mpls
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 06-03-2017
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 19-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                           enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 20-07-2021 Se agrega validaciones para los tipos de red
     *
     * @return JsonResponse $objResponse {
     *                                      status  :  Status OK/ERROR
     *                                      mensaje :  Mensaje necesario de acuerdo al evento ocurrido de OK o ERROR
     *                                   {
     * 
     * @Secure(roles="ROLE_151-5137")
     */
    public function ajaxCambiarSubredesAction()
    {
        $arrayRespuesta    = array();        
        $objResponse       = new JsonResponse();
        $objRequest        = $this->get('request');
        $objSession        = $objRequest->getSession();
        $emComercial       = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura = $this->getDoctrine()->getManager("telconet_infraestructura");
        $serviceUtil       = $this->get('schema.Util');        
        
        $intSubred         = $objRequest->get('subred')?$objRequest->get('subred'):0;
        $strTipoSubred     = $objRequest->get('tipoSubred')?$objRequest->get('tipoSubred'):'';
        $intIdServicio     = $objRequest->get('idServicio')?$objRequest->get('idServicio'):0;
        $strSwitch         = $objRequest->get('elemento')?$objRequest->get('elemento'):'';
        $strPe             = $objRequest->get('pe')?$objRequest->get('pe'):'';
        $strVrf            = $objRequest->get('vrf')?$objRequest->get('vrf'):'';
        $strVlan           = $objRequest->get('vlan')?$objRequest->get('vlan'):'';
        $strProtocolo      = $objRequest->get('protocolo')?$objRequest->get('protocolo'):'';
        $strIpServicio     = $objRequest->get('ipServicio')?$objRequest->get('ipServicio'):'';
        $strGateway        = $objRequest->get('gateway')?$objRequest->get('gateway'):'';
        $strAsPrivado      = $objRequest->get('asPrivado')?$objRequest->get('asPrivado'):'';
        $strLoginAux       = $objRequest->get('loginAux')?$objRequest->get('loginAux'):'';
        $strTipoEnlace     = $objRequest->get('tipoEnlace')?$objRequest->get('tipoEnlace'):'';
        $strTieneCambioIp  = $objRequest->get('solCambioIp')?$objRequest->get('solCambioIp'):'';

        $strBanderaLineasBravco = "N";
        $strRouteTargetExport   = "";
        $strRouteTargetImport   = "";
        $strRazonSocial         = "";

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        $networkingScriptsService = $this->get('tecnico.NetworkingScripts');
        $serviceTecnico           = $this->get('tecnico.InfoServicioTecnico');
        
        $strTipoCambioHist = $strTipoSubred=='WAN'?'Privada a Publica':'Publica a Privada';

        try
        {
            $objServicio = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
            
            if(is_object($objServicio))
            {
                $objProducto = $objServicio->getProductoId();
                
                if(!is_object($objProducto))
                {
                    $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No existe referencia al Producto ligado al Servicio');
                    $objResponse->setData($arrayRespuesta);
                    return $objResponse;
                }
                
                $objAdmiTipoSolicitud = $emComercial->getRepository("schemaBundle:AdmiTipoSolicitud")
                                                    ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD CAMBIO IP',
                                                                      'estado'               => 'Activo'));
                if(!is_object($objAdmiTipoSolicitud))
                {
                    $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No existe referencia de Solicitud de Cambio '
                                                                               . 'de IP para genera el cambio,'
                                                                               . ' porfavor notificar a Sistemas');
                    $objResponse->setData($arrayRespuesta);
                    return $objResponse;
                }

                //verifico el tipo de red
                $strTipoRed         = "MPLS";
                if(is_object($objServicio) && is_object($objProducto))
                {
                    $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                   'TIPO_RED',
                                                                                                   $objProducto);
                    if(is_object($objServProdCaractTipoRed))
                    {
                        $strTipoRed = $objServProdCaractTipoRed->getValor();
                    }
                }
                //se verifica si el servicio es tipo de red GPON
                $booleanTipoRedGpon = false;
                if(!empty($strTipoRed))
                {
                    $arrayParVerTipoRed = $emComercial->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                            'COMERCIAL',
                                                                                                            '',
                                                                                                            'VERIFICAR TIPO RED',
                                                                                                            'VERIFICAR_GPON',
                                                                                                            $strTipoRed,
                                                                                                            '',
                                                                                                            '',
                                                                                                            '');
                    if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                    {
                        $booleanTipoRedGpon = true;
                    }
                }

                //Si existe una solicitud pendiente de cambio de ip se crea como pendiente para realizar el proceso
                if($strTieneCambioIp == 'NO')
                {
                    $objSubred = $emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($intSubred);
                    
                    if(!is_object($objSubred))
                    {
                        $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No existe referencia de Subred escogida, notificar a Sistemas');
                        $objResponse->setData($arrayRespuesta);
                        return $objResponse;
                    }
                    
                    // ===========================================================================================
                    // Se asigna la ip al servicio basado en la subred seleccionda
                    // ===========================================================================================
                    $strIp = $emInfraestructura->getRepository('schemaBundle:InfoIp')->getIpDisponibleBySubred($intSubred);

                    if($strIp == 'NoDisponible')
                    {
                        $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No Existe IP Disponible, favor comunicarse con Sistemas!');
                        $objResponse->setData($arrayRespuesta);
                        return $objResponse;
                    }
                    else
                    {
                        //Eliminar IP anterior
                        $objInfoIp = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array('servicioId' => $intIdServicio,
                                                                                                               'estado'     => 'Activo')
                                                                                                        );
                        //Se elimina Ip dada por Subred anterior
                        if(is_object($objInfoIp))
                        {
                            $objInfoIp->setEstado('Eliminado');
                            $emInfraestructura->persist($objInfoIp);
                            $emInfraestructura->flush();

                            $objServicioHistorial = new InfoServicioHistorial();
                            $objServicioHistorial->setServicioId($objServicio);
                            $objServicioHistorial->setObservacion('Se Elimino la Ip <b>'.$objInfoIp->getIp().'</b> '
                                                                  . 'por cambio de Subred de tipo '.$strTipoCambioHist);
                            $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                            $objServicioHistorial->setEstado($objServicio->getEstado());
                            $emComercial->persist($objServicioHistorial);
                            $emComercial->flush();
                        }
                        else
                        {
                            $arrayRespuesta = array('status' =>'ERROR' ,'mensaje' => 'No existe IP configurada en el Servicio, notificar a Sistemas');
                            $objResponse->setData($arrayRespuesta);
                            return $objResponse;
                        }

                        //Se agrega la nueva IP asignada para el tipo de subred escogida por el usuario
                        $objInfoIpNueva = new InfoIp();
                        $objInfoIpNueva->setIp($strIp);
                        $objInfoIpNueva->setServicioId($objServicio->getId());
                        $objInfoIpNueva->setEstado("Activo");
                        $objInfoIpNueva->setSubredId($intSubred);
                        $objInfoIpNueva->setTipoIp($strTipoSubred);
                        $objInfoIpNueva->setVersionIp("IPV4");
                        $objInfoIpNueva->setUsrCreacion($objSession->get('user'));
                        $objInfoIpNueva->setFeCreacion(new \DateTime('now'));
                        $objInfoIpNueva->setIpCreacion($objRequest->getClientIp());
                        $emInfraestructura->persist($objInfoIpNueva);
                        $emInfraestructura->flush();

                        //Historial de asignacion de nueva IP
                        $objServicioHistorial = new InfoServicioHistorial();
                        $objServicioHistorial->setServicioId($objServicio);
                        $objServicioHistorial->setObservacion('Se asignó una nueva Ip <b>'.$strIp.'</b> dada la subred <b>'.
                                                              $objSubred->getSubred().'</b>'
                                                              .' por cambio de Subred de tipo '.$strTipoCambioHist);
                        $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                        $objServicioHistorial->setEstado($objServicio->getEstado());
                        $emComercial->persist($objServicioHistorial);
                        $emComercial->flush();
                        
                        //Se genera la solicitud de cambio de Ip y se guarda la informacion de la Subred anterior
                        $objDetalleSolicitud = new InfoDetalleSolicitud();
                        $objDetalleSolicitud->setServicioId($objServicio);
                        $objDetalleSolicitud->setTipoSolicitudId($objAdmiTipoSolicitud);
                        $objDetalleSolicitud->setEstado("Pendiente");
                        $objDetalleSolicitud->setUsrCreacion($objSession->get('user'));
                        $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                        $objDetalleSolicitud->setObservacion("SOLICITA CAMBIO DE IP DEL SERVICIO");
                        $emComercial->persist($objDetalleSolicitud);
                        $emComercial->flush();
                        
                        $objCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                         ->findOneBy(array('descripcionCaracteristica' => 'SUBRED ANTERIOR SERVICIO',
                                                                           'estado'                    => 'Activo'));
                        
                        if(!is_object($objCaracteristica))
                        {
                            $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'Error para generar Cambio de Ip, notificar a Sistemas');
                            $objResponse->setData($arrayRespuesta);
                            return $objResponse;
                        }
                        
                        $objDetalleSolCaract= new InfoDetalleSolCaract();
                        $objDetalleSolCaract->setCaracteristicaId($objCaracteristica);
                        $objDetalleSolCaract->setDetalleSolicitudId($objDetalleSolicitud);
                        $objDetalleSolCaract->setValor($objInfoIp->getId());
                        $objDetalleSolCaract->setEstado("Activo");
                        $objDetalleSolCaract->setUsrCreacion($objSession->get('user'));
                        $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                        $emComercial->persist($objDetalleSolCaract);
                        $emComercial->flush();
                        
                        $objHistorialSolicitud = new InfoDetalleSolHist();
                        $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
                        $objHistorialSolicitud->setEstado("Pendiente");
                        $objHistorialSolicitud->setObservacion("SOLICITA CAMBIO DE IP DEL SERVICIO");
                        $objHistorialSolicitud->setUsrCreacion($objSession->get('user'));
                        $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
                        $objHistorialSolicitud->setIpCreacion($objRequest->getClientIp());
                        $emComercial->persist($objHistorialSolicitud);
                        $emComercial->flush();
                        
                        $arrayRespuesta = array('status' => 'OK' , 'mensaje' => 'Se genero nueva Ip : <b>'.$strIp.'</b> dada la Subred '
                                                                              . '<b>'.$objSubred->getSubred().'</b>');
                    }
                }
                else //Se realiza configuracion de la nueva Ip asignada en los procesos que involucren ejecucion de WS de NW
                {
                    //Verificacion si existe una solicitud de CAMBIO DE IP finalizada para proceder a ejecutar scripts de NW, caso contrario
                    //se procede a generar la nueva IP y referenciar la subred anterior                    

                    //Se verifica que existe una solicitud pendiente
                    $objDetalleSolicitud = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                       ->findOneBy(array('servicioId'      => $intIdServicio,
                                                                         'estado'          => 'Pendiente',
                                                                         'tipoSolicitudId' => $objAdmiTipoSolicitud->getId())
                                                                   );
                    
                    if(!is_object($objDetalleSolicitud))
                    {
                        $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No existe referencia de Solicitud de Cambio '
                                                                                   . 'de IP para genera el cambio,'
                                                                                   . ' porfavor notificar a Sistemas');
                        $objResponse->setData($arrayRespuesta);
                        return $objResponse;
                    }
                
                    $objElementoPadre = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->findOneByNombreElemento($strPe);
                    
                    if(!is_object($objElementoPadre))
                    {
                        $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No existe Elemento Pe a ser configurado, notificar a Sistemas');
                        $objResponse->setData($arrayRespuesta);
                        return $objResponse;
                    }
                    
                    //Obtener datos anterior de la Subred habida en el Servicio par ser desconfigurada
                    
                    $objSolCaract = $emComercial->getRepository("schemaBundle:InfoDetalleSolCaract")
                                                ->findOneBy(array( 'detalleSolicitudId' => $objDetalleSolicitud->getId(),
                                                                   'estado'             => 'Activo'));
                    
                    if(!is_object($objSolCaract))
                    {
                        $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No se pudo obtener información de Subred Anterior');
                        $objResponse->setData($arrayRespuesta);
                        return $objResponse;
                    }
                    
                    $intIdIpAnterior = $objSolCaract->getValor();
                    
                    $objIpAnterior = $emInfraestructura->getRepository("schemaBundle:InfoIp")->find($intIdIpAnterior);
                    $objIpNueva    = $emInfraestructura->getRepository("schemaBundle:InfoIp")
                                                       ->findOneBy(array('servicioId' => $intIdServicio,
                                                                         'estado'     => 'Activo'));
                    
                    if(!is_object($objIpAnterior))
                    {
                        $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No se pudo obtener información de Subred Anterior');
                        $objResponse->setData($arrayRespuesta);
                        return $objResponse;
                    }
                    
                    if(!is_object($objIpNueva))
                    {
                        $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No se pudo obtener información de Subred Configurada');
                        $objResponse->setData($arrayRespuesta);
                        return $objResponse;
                    }
                    
                    //Obtener la Subred Anterior
                    $objSubredAnterior = $emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objIpAnterior->getSubredId());
                    
                    //Determinar si existe protocolo BGP configurado, por tanto reconfigurar protocolo enrutamiento y mantener 
                    //rutas estáticas existentes
                    if($strProtocolo == 'BGP')
                    {
                        // ------------------------------------------------------------------------------------
                        // call al WebService NetworkingScriptsService
                        // ------------------------------------------------------------------------------------

                        //Consultar Razon Social
                        $objInfoPersona = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();

                        if(is_object($objInfoPersona))
                        {
                            $strRazonSocial = $objInfoPersona->getRazonSocial();
                        }

                        if(!empty($strRazonSocial))
                        {
                            $arrayRazonesSociales = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('PROYECTO MONITOREO CLIENTES GRUPO BRAVCO',
                                                                         'INFRAESTRUCTURA',
                                                                         'ACTIVAR SERVICIO',
                                                                         'RAZON SOCIAL GRUPO BRAVCO',
                                                                         $strRazonSocial,
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         '');
                        }

                        if(isset($arrayRazonesSociales["valor1"]) && !empty($arrayRazonesSociales["valor1"]))
                        {
                            $strBanderaLineasBravco = "S";
                            $strRouteTargetExport   = $arrayRazonesSociales["valor2"];
                            $strRouteTargetImport   = $arrayRazonesSociales["valor3"];
                            $strRazonSocial         = $arrayRazonesSociales["valor4"];
                        }

                        //Eliminar protocolo de enrutamiento anterior ligada a la IP a ser eliminada                        
                        $arrayPeticiones                      = array();
                        $arrayPeticiones['url']               = 'enrutamientoDinamicoPe';
                        $arrayPeticiones['accion']            = 'eliminar';                        
                        $arrayPeticiones['clase_servicio']    = $objProducto->getNombreTecnico();
                        $arrayPeticiones['vrf']               = $strVrf;
                        $arrayPeticiones['pe']                = $strPe;
                        $arrayPeticiones['vlan']              = $strVlan;
                        $arrayPeticiones['gateway']           = is_object($objSubredAnterior)?$objSubredAnterior->getGateway():'';
                        $arrayPeticiones['ip_bgp']            = $objIpAnterior->getIp();
                        $arrayPeticiones['asprivado']         = $strAsPrivado;
                        $arrayPeticiones['nombre_sesion_bgp'] = $strLoginAux;
                        $arrayPeticiones['default_gw']        = 'N';
                        $arrayPeticiones['protocolo']         = $strProtocolo;
                        $arrayPeticiones['tipo_enlace']       = $strTipoEnlace;
                        $arrayPeticiones['banderaBravco']     = 'N';
                        $arrayPeticiones['servicio']          = $objProducto->getNombreTecnico();
                        $arrayPeticiones['login_aux']         = $strLoginAux;
                        $arrayPeticiones['user_name']         = $objSession->get('user');
                        $arrayPeticiones['user_ip']           = $objRequest->getClientIp();

                        if($strBanderaLineasBravco === "S")
                        {
                            $arrayPeticiones['razon_social'] = $strRazonSocial;
                            $arrayPeticiones['rt_export']    = $strRouteTargetExport;
                            $arrayPeticiones['rt_import']    = $strRouteTargetImport;
                        }

                        $arrayRespuesta = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);

                        $strStatus  = $arrayRespuesta['status'];

                        //Si se realizo el eliminacion de la sesion BGP anterior se configura la nueva sesion
                        if($strStatus == 'OK')
                        {
                            $arrayPeticiones['accion']  = 'agregar';
                            $arrayPeticiones['ip_bgp']  = $strIpServicio;        //Ip nueva asignada
                            $arrayPeticiones['gateway'] = $strGateway;   //Gateway relacionada a la Ip nueva asignada
                            $arrayRespuesta             = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);
                            
                            $strStatus  = $arrayRespuesta['status'];
                            
                            if($strStatus != 'OK')
                            {
                                $arrayRespuestaSalida = array('status'  => $strStatus , 
                                                              'mensaje' => $arrayRespuesta['mensaje']);
                                $objResponse->setData($arrayRespuestaSalida);
                                return $objResponse;
                            }
                        }
                        else
                        {
                            $arrayRespuestaSalida = array('status'  => $strStatus , 
                                                          'mensaje' => $arrayRespuesta['mensaje']);
                            $objResponse->setData($arrayRespuestaSalida);
                            return $objResponse;
                        }
                    }
                                        
                    //Eliminar Rutas Estaticas en caso de existir Y CREAR y asociarlas con la nueva IP
                    $arrayRutasCreadas = $emInfraestructura->getRepository("schemaBundle:InfoRutaElemento")
                                                           ->findBy(array('servicioId' => $intIdServicio,
                                                                          'estado'     => 'Activo'));
                    if(isset($arrayRutasCreadas))
                    {
                        //Se recorren las rutas creadas ligadas al servicio
                        foreach($arrayRutasCreadas as $objRutaElemento)
                        {                            
                            $boolEsRutaEstatica = true;
                            $strTipoRuta        = 'Estática';
                            $objSubred          = null;
                            
                            //Posee ruta automatica
                            if($objRutaElemento->getSubredId())
                            {
                                $boolEsRutaEstatica = false;
                                $strTipoRuta        = 'Automática';
                                $objSubred          = $objRutaElemento->getSubredId();
                            }
                            
                            $objRutaElemento->setEstado('Eliminado');
                            $objRutaElemento->setUsrUltMod($objSession->get('user'));
                            $objRutaElemento->setFeUltMod(new \DateTime('now'));
                            $emInfraestructura->merge($objRutaElemento);
                            $emInfraestructura->flush();

                            // ------------------------------------------------------------------------------------
                            // call al WebService NetworkingScriptsService - Eliminacion de ruta estatica
                            // ------------------------------------------------------------------------------------
                            $arrayPeticiones                    = array();
                            $arrayPeticiones['url']             = 'enrutamientoEstaticoPe';
                            $arrayPeticiones['accion']          = 'eliminar';
                            $arrayPeticiones['clase_servicio']  = $objProducto->getNombreTecnico();
                            $arrayPeticiones['vrf']             = $strVrf;
                            $arrayPeticiones['pe']              = $strPe;
                            if($booleanTipoRedGpon)
                            {
                                $arrayPeticiones['sw']          = "";
                                $arrayPeticiones['olt']         = $strSwitch;
                            }
                            else
                            {
                                $arrayPeticiones['olt']         = "";
                                $arrayPeticiones['sw']          = $strSwitch;
                            }
                            $arrayPeticiones['name_route']      = $objRutaElemento->getNombre();
                            
                            //Si no es ruta estatica
                            if(!$boolEsRutaEstatica)
                            {
                                $strNetLan   =  $objRutaElemento->getSubredId()->getSubred();
                                $strMaskLan  =  $objRutaElemento->getSubredId()->getMascara();
                            }
                            else
                            {
                                $strNetLan   =  $objRutaElemento->getRedLan();
                                $strMaskLan  =  $objRutaElemento->getMascaraRedLan();
                            }
                            
                            $arrayPeticiones['net_lan']         = $strNetLan;
                            $arrayPeticiones['mask_lan']        = $strMaskLan;                            
                            $arrayPeticiones['ip_destino']      = $objRutaElemento->getIpId()->getIp();
                            $arrayPeticiones['distance_admin']  = $objRutaElemento->getDistanciaAdmin();
                            $arrayPeticiones['option']          = 'E';
                            $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
                            $arrayPeticiones['login_aux']       = $objServicio->getLoginAux();
                            $arrayPeticiones['user_name']       = $objSession->get('user');
                            $arrayPeticiones['user_ip']         = $objRequest->getClientIp();                            
                            $arrayPeticiones['idServicio']      = $objServicio->getId();
                            $arrayPeticiones['idProducto']      = $objProducto->getId();

                            //Ejecucion del metodo via WS para realizar la configuracion del SW
                            $arrayRespuesta           = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);

                            $strStatus  = $arrayRespuesta['status'];
                            $strMensaje = $arrayRespuesta['mensaje'];

                            if($strStatus == 'OK')
                            {
                                //Historial de eliminacion de ruta
                                $objServicioHistorial = new InfoServicioHistorial();
                                $objServicioHistorial->setServicioId($objServicio);
                                $objServicioHistorial->setObservacion('Se Eliminó la ruta '.$strTipoRuta.' <b>'.$objRutaElemento->getNombre().'</b>'.
                                                                      ' ligada a la IP : <b>'.$objIpAnterior->getIp().'</b> '
                                                                      . 'por cambio de Subred de tipo '.$strTipoCambioHist);
                                $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                                $objServicioHistorial->setEstado($objServicio->getEstado());
                                $emComercial->persist($objServicioHistorial);
                                $emComercial->flush();

                                //Si el protocolo es STANDARD, crear la nueva ruta estatica con la nueva IP,
                                //caso contrario no vuelve a crear la ruta dejando eliminadas todas las existentes
                                if($strProtocolo != 'BGP')
                                {
                                    //Agregar la nueva ruta estatica con la ip de la subred nueva asignada
                                    $arrayPeticiones['accion']       = 'agregar';
                                    $arrayPeticiones['ip_destino']   = $strIpServicio;
                                    $arrayPeticiones['option']       = 'A';
                                    $arrayRespuesta                  = $networkingScriptsService->callNetworkingWebService($arrayPeticiones);

                                    $strStatus  = $arrayRespuesta['status'];
                                    $strMensaje = $arrayRespuesta['mensaje'];

                                    if($strStatus != 'OK')
                                    {
                                        $arrayRespuesta = array('status' => 'ERROR' , 
                                                               'mensaje' => 'Problemas con la ejecución del ws '.$strMensaje);
                                        $objResponse->setData($arrayRespuesta);
                                        return $objResponse;
                                    }
                                    else
                                    {
                                        $objRutaElementoNuevo = new InfoRutaElemento();
                                        $objRutaElementoNuevo->setServicioId($objServicio);
                                        $objRutaElementoNuevo->setElementoId($objElementoPadre);
                                        $objRutaElementoNuevo->setIpId($objIpNueva);
                                        $objRutaElementoNuevo->setNombre($objRutaElemento->getNombre());
                                        $objRutaElementoNuevo->setEstado("Activo");                                                                                
                                        
                                        //Automaticas
                                        if(!$boolEsRutaEstatica)
                                        {
                                            $objRutaElementoNuevo->setSubredId($objSubred);
                                        }
                                        else
                                        {
                                            $objRutaElementoNuevo->setRedLan($strNetLan);
                                            $objRutaElementoNuevo->setMascaraRedLan($strMaskLan);
                                        }
                                        
                                        $objRutaElementoNuevo->setDistanciaAdmin($objRutaElemento->getDistanciaAdmin());
                                        $objRutaElementoNuevo->setFeCreacion(new \DateTime('now'));
                                        $objRutaElementoNuevo->setUsrCreacion($objSession->get('user'));
                                        $objRutaElementoNuevo->setIpCreacion($objRequest->getClientIp());
                                        $emInfraestructura->merge($objRutaElementoNuevo);
                                        $emInfraestructura->flush();

                                        //Historial de creacion de ruta
                                        $objServicioHistorial = new InfoServicioHistorial();
                                        $objServicioHistorial->setServicioId($objServicio);
                                        $objServicioHistorial->setObservacion('Se Creó la ruta '.$strTipoRuta.' '
                                                                              . '<b>'.$objRutaElemento->getNombre().'</b>'
                                                                              .' ligada a la Nueva IP : <b>'.$strIpServicio.'</b> '
                                                                              . 'por cambio de Subred de tipo '.$strTipoCambioHist);
                                        $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                                        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                        $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                                        $objServicioHistorial->setEstado($objServicio->getEstado());
                                        $emComercial->persist($objServicioHistorial);
                                        $emComercial->flush();
                                    }
                                }
                            }
                            else
                            {
                                $arrayRespuesta = array('status'  => 'ERROR' , 
                                                        'mensaje' => 'Problemas con la ejecución del ws '.$strMensaje);
                                $objResponse->setData($arrayRespuesta);
                                return $objResponse;
                            }
                        }//Bucle que recorre rutas creadas
                    }
                    
                    //Finalizar Solicitud de Cambio de Ip
                    $objDetalleSolicitud->setEstado("Finalizada");
                    $emComercial->persist($objDetalleSolicitud);
                    $emComercial->flush();
                    
                    $objHistorialSolicitud = new InfoDetalleSolHist();
                    $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
                    $objHistorialSolicitud->setEstado("Finalizada");
                    $objHistorialSolicitud->setObservacion("SOLICITA CAMBIO DE IP DEL SERVICIO FINALIZADA CORRECTAMENTE");
                    $objHistorialSolicitud->setUsrCreacion($objSession->get('user'));
                    $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
                    $objHistorialSolicitud->setIpCreacion($objRequest->getClientIp());
                    $emComercial->persist($objHistorialSolicitud);
                    $emComercial->flush();
                    
                    $arrayRespuesta = array('status' => 'OK' , 'mensaje' => 'Ejecución para Cambio de Subred ejecutada exitosamente');
                }
                
                $emComercial->commit();
                $emInfraestructura->commit();
            }
            else
            {
                $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'No existe referencia del Servicio, favor comunicarse con Sistemas');
                $objResponse->setData($arrayRespuesta);
                return $objResponse;
            }
        } 
        catch (\Exception $e) 
        {
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->rollback();
            }
            
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->rollback();
            }
            
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxCambiarSubredesAction',
                                      $e->getMessage(),
                                      $objSession->get('user'),
                                      $objRequest->getClientIp());
            
            $emComercial->close();
            
            $arrayRespuesta = array('status' => 'ERROR' , 'mensaje' => 'Error al realizar el cambio de Subred, notificar a Ssitemas');
        }                
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }
    
    /**
     * 
     * Metodo encargado de realizar la ejecucion de las configuraciones de enrutamiento via webService de acuerdo a la opcion escogida por el usuario
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 06-01-2017
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 09-05-2018 - Se agrega programación para manejar los ajuste realizados en la creación y eliminación
     *                           de Rutas Dinámicas BGP
     * 
     * @since 1.0
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     * 
     * @Secure(roles="ROLE_151-5017")
     */
    public function ajaxAdministrarEnrutamientoBgpAction()
    {
        $arrayRespuesta = array();        
        $objResponse    = new JsonResponse();
        $objRequest     = $this->get('request');
        $objSession     = $objRequest->getSession();
        $emComercial    = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura = $this->getDoctrine()->getManager("telconet_infraestructura");
        $serviceUtil       = $this->get('schema.Util');        
        
        $strOpcion      = $objRequest->get('opcion')?$objRequest->get('opcion'):'';
        $strInfo        = $objRequest->get('info')?$objRequest->get('info'):'';
        $strTipo        = $objRequest->get('tipo')?$objRequest->get('tipo'):'';
        $strJsonData    = $objRequest->get('dataAdicional')?$objRequest->get('dataAdicional'):''; 
        
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {        
            if(!empty($strOpcion))
            {
                //El tipo de opcion override, originate y shutdown solo requieren el tipo de ejecucion a enviar incluido la data basica del servicio
                if($strOpcion == 'override' || $strOpcion == 'originate' || $strOpcion == 'shutdown')
                {
                    //Si no contiene tipo ni dato adicional devuelve excepcion
                    if($strTipo == '' || $strJsonData == '')
                    {
                        $objResponse->setData(array('status'  => 'ERROR' ,
                                                    'mensaje' => 'Falta información para poder realizar configuración BGP, notificar a Sistemas'));
                        return $objResponse;
                    }
                }
                else //Para el resto de opciones se valida el resto de variables ya que todas son requeridas para la gestion
                {
                    if( $strInfo == '' || $strTipo == '' || $strJsonData == '' )
                    {
                        $objResponse->setData(array('status'  => 'ERROR' ,
                                                    'mensaje' => 'Falta información para poder realizar configuración BGP, notificar a Sistemas'));
                        return $objResponse;
                    }
                }
            }
            else
            {
                $objResponse->setData(array('status'  => 'ERROR' ,
                                            'mensaje' => 'No existe una opción válida a ejecutar, Notificar a Sistemas'));
                return $objResponse;
            }

            $arrayData      = json_decode($strJsonData);

            //Parametros a enviar al WS de NW
            $arrayParametros                    = array();

            $arrayParametros['url']             = 'adminEnrutamientoPe';

            //Data de auditoria general        
            $arrayParametros['servicio']        = $arrayData->descripcion;
            $arrayParametros['login_aux']       = $arrayData->loginAux;
            $arrayParametros['user_name']       = $objSession->get("user");
            $arrayParametros['user_ip']         = $objRequest->getClientIp();
            //Informacion tecnica del servicio general
            $arrayParametros['clase_servicio']  = $arrayData->claseServicio;
            $arrayParametros['vrf']             = $arrayData->vrf;
            $arrayParametros['pe']              = $arrayData->pe;
            $arrayParametros['asprivado']       = $arrayData->asPrivado;
            $arrayParametros['protocolo']       = $arrayData->protocolo;
            $arrayParametros['ip_bgp']          = $arrayData->ipBgp;
            //Informacion de configuraciones
            $arrayParametros['weight']                     = '';
            $arrayParametros['routemap_name']              = '';
            $arrayParametros['routemap_prefix_name']       = '';
            $arrayParametros['routemap_type']              = '';
            $arrayParametros['routemap_prefix_list']       = '';
            $arrayParametros['redistribute_bgp_protocolo'] = '';
            $arrayParametros['redistribute_bgp_type']      = '';
            $arrayParametros['redistribute_bgp_metric']    = '';
            $arrayParametros['redistribute_bgp_routemap']  = '';
            $arrayParametros['redistribute_bgp_match']     = '';

            $boolSeCreaRouteMap                 = false;
            $strStatus                          = 'OK';
            $strMensaje                         = 'OK';
            $strObservacionHistorial            = 'Se ejecuto configuracion por Enrutamiento BGP : </br>';
            $networkingScriptsService           = $this->get('tecnico.NetworkingScripts');
            $servicioTecnico                    = $this->get('tecnico.InfoServicioTecnico');         
            
            //Obtener los prefijos requeridos para las diferentes configuraciones
            $arrayPrefijos            = $servicioTecnico->getPrefijosCreacionRouteMap();
            $strPrefijoRouteMap       = isset($arrayPrefijos['strRouteMap'])?$arrayPrefijos['strRouteMap']:'';
            $strPrefijoRmPrefix       = isset($arrayPrefijos['strPrefix'])?$arrayPrefijos['strPrefix']:'';
            $strPrefijoRmRedistribute = isset($arrayPrefijos['strRedistribute'])?$arrayPrefijos['strRedistribute']:'';

            switch($strOpcion)
            {
                case 'override':
                    $arrayParametros['accion']  = $strTipo.'-bgp-asoverride';
                    $strObservacionHistorial    .= "Se agrego comando : ".($strTipo=='agregar'?
                                                  '<b>neighbor '.$arrayData->ipBgp.' as-override</b> al Pe':
                                                  '<b>no neighbor '.$arrayData->ipBgp.' as-override</b> al Pe');
                    break;

                case 'originate':
                    $arrayParametros['accion']  = $strTipo.'-bgp-defaultoriginate';
                    $strObservacionHistorial    .= "Se agrego comando : ".($strTipo=='agregar'?'<b>default-information originate</b> al Pe':
                                                                                             '<b>no default-information originate</b> al Pe');
                    break;

                case 'weight':
                    $arrayParametros['accion']  = $strTipo.'-bgp-weight';
                    $arrayParametros['weight']  = $strInfo;
                    $strObservacionHistorial    .= $strTipo=='agregar'?'Se agrego comando weight : <b>'.$strInfo.'</b> al Pe':
                                                                      'Se elimino comando weight : <b>'.$strInfo.'</b> al Pe';
                    break;

                case 'clear':
                    $arrayParametros['accion']  = $strTipo.'-'.$strInfo;
                    $strObservacionHistorial    .= 'Se ejecuto comando <b>'.$strTipo.'-'.$strInfo.'</b> en el Pe';
                    break;

                case 'shutdown':
                    $arrayParametros['accion']  = $strTipo.'-bgp-shutdown';
                    $strObservacionHistorial    .= 'Se ejecuto comando <b>'.$strTipo."-bgp-shutdown.".'</b> en el Pe';
                    break;

                case 'crearEliminarRouteMap':
                    $boolSeCreaRouteMap = true;
                    $arrayInfo          = json_decode($strInfo);                                

                    //Array con la informacion a ser guardad de manera logica de la routemap y sus prefix
                    $arrayParametrosRouteMap                  = array();
                    $arrayParametrosRouteMap['intIdServicio'] = $arrayData->idServicio;
                    $arrayParametrosRouteMap['strRouteMap']   = $arrayInfo->routeMap;
                    $arrayParametrosRouteMap['jsonPrefixList']= $arrayInfo->infoAdicional;
                    $arrayParametrosRouteMap['strUsrCreacion']= $objSession->get("user");
                    $arrayParametrosRouteMap['strIpCreacion'] = $objRequest->getClientIp();
                    $arrayParametrosRouteMap['boolEsNuevoRm'] = $arrayInfo->tipoCreacion == 'nuevos'?true:false;
                    $arrayParametrosRouteMap['boolAgregarRm'] = $strTipo == 'agregar'?true:false;

                    $arrayParametros['routemap_name']         = $strPrefijoRouteMap . $arrayInfo->routeMap;
                    $arrayParametros['routemap_prefix_name']  = $strPrefijoRmPrefix . $arrayInfo->routeMap;

                    //----------------------------------------------------------------
                    //              AGREGAR NUEVA ROUTE MAP Y SUBRED PREFIX
                    //----------------------------------------------------------------
                    if($strTipo == 'agregar')
                    {                                                
                        //Solo cuando la opcion es nueva se crea en el PE la informacion de la RouteMap
                        if($arrayInfo->tipoCreacion == 'nuevos')
                        {
                            //Validar que la RouteMap no haya sido agregada previamente para otro Servicio
                            $arrayParametrosExisteRm                      = array();
                            $arrayParametrosExisteRm['strProceso']        = 'ROUTEMAP';
                            $arrayParametrosExisteRm['intIdServicio']     = '';
                            $arrayParametrosExisteRm['strCaracteristica'] = 'ROUTE_MAP';
                            $arrayParametrosExisteRm['strValor']          = $arrayInfo->routeMap;
                            $strExisteRouteMap = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                             ->getExisteValorCaracteristicaPorProceso($arrayParametrosExisteRm);
                            
                            if($strExisteRouteMap == 'NO')
                            {
                                //Crear una nueva routeMap
                                $arrayParametros['accion'] = $strTipo.'-routemap-config';

                                //Ejecutar WS para creacion de RouteMap previo a crear los prefix
                                $arrayRespuestaWs          = $networkingScriptsService->callNetworkingWebService($arrayParametros);
                                $strStatus                 = $arrayRespuestaWs['status'];
                                $strMensaje                = $arrayRespuestaWs['mensaje'];

                                $strObservacionHistorial   .= 'Se agrego nueva RouteMap : <b>'.$arrayInfo->routeMap.'</b> al Servicio</br>';
                            }
                            else
                            {
                                $strStatus   = 'ERROR';
                                $strMensaje  = 'RouteMap <b>'.$arrayInfo->routeMap.'</b> ya se encuentra ingresada para otro Servicio';
                            }
                        }

                        //Si se ejecuto correctamente el ingreso de l route map o si necesita solo 
                        //crear el prefix dado que la route map ya esta creada          
                        //Solo hara analisis de subred prefixlist agregadas/eliminadas si eligiese le opcion de la misma
                        if($strStatus == 'OK' && $arrayInfo->tipoRoute != 'asPrivado')
                        {
                            //Se obtiene la informacion de que prefix son nuevos y cuales requieren ser eliminados y desconfigurados
                            $arrayPrefixActualizar = $servicioTecnico->obtenerPrefixActualizar($arrayParametrosRouteMap);

                            $boolSeEjecuto   = true;
                            $arrayPrefixList = array();
                            $intIndiceJson   = 1;

                            //----------------------------------------------------------------------
                            //       AGREGAR  SUBRED PREFIX LIGADA A LA ROUTEMAP
                            //       
                            //    - prefixEliminar ( Elimina las subredes que han sido eliminados por el usuario dentro de una routemap creada )
                            //    - prefixAgregar  ( Agrega nuevas subredes a una nueva routemap o una routemap seleccionada )
                            //    
                            //----------------------------------------------------------------------
                            if(!empty($arrayPrefixActualizar['prefixAgregar']))
                            {
                                foreach($arrayPrefixActualizar['prefixAgregar'] as $strPrefix)
                                {
                                    $arrayPrefix                     = explode("|",$strPrefix);
                                    $arrayPrefixList[$intIndiceJson] = array(
                                                                             'ip'           => $arrayPrefix[0],
                                                                             'mask'         => $arrayPrefix[1],
                                                                             'length_type'  => $arrayPrefix[2],
                                                                             'length_value' => $arrayPrefix[3],
                                                                             'seq'          => $arrayPrefix[4]
                                                                            );
                                    $intIndiceJson++;
                                }

                                $arrayParametros['accion']                 = 'agregar-routemap-prefix';
                                $arrayParametros['routemap_prefix_list']   = $arrayPrefixList;

                                //Desconfiguracion del PE de la prefix
                                $arrayRespuestaWs  = $networkingScriptsService->callNetworkingWebService($arrayParametros);
                                $strStatus         = $arrayRespuestaWs['status'];
                                $strMensaje        = $arrayRespuestaWs['mensaje'];
                                
                                $strObservacionHistorial .= 'Se agrego nueva Prefix a la RouteMap : <b>'.$arrayInfo->routeMap.'</b> del Servicio</br>';
                                if($strStatus != 'OK')
                                {
                                    $boolSeEjecuto = false;
                                }
                            }

                            //Si existe prefix a eliminar y previamente se configuraron los prefix nuevos, se desconfiguran los que el usuario eligio
                            if(!empty($arrayPrefixActualizar['prefixEliminar']) && $boolSeEjecuto)
                            {
                                $arrayPrefixList = array();
                                $intIndiceJson   = 1;

                                foreach($arrayPrefixActualizar['prefixEliminar'] as $arrayPrefixRm)
                                {
                                    $arrayPrefix                     = explode("|",$arrayPrefixRm['prefix']);
                                    $arrayPrefixList[$intIndiceJson] = array(
                                                                             'ip'           => $arrayPrefix[0],
                                                                             'mask'         => $arrayPrefix[1],
                                                                             'length_type'  => $arrayPrefix[2],
                                                                             'length_value' => $arrayPrefix[3],
                                                                             'seq'          => $arrayPrefix[4]
                                                                            );
                                    $intIndiceJson++;
                                }

                                $arrayParametros['accion']                 = 'eliminar-routemap-prefix';
                                $arrayParametros['routemap_prefix_list']   = $arrayPrefixList;

                                $arrayRespuestaWs  = $networkingScriptsService->callNetworkingWebService($arrayParametros);
                                $strStatus         = $arrayRespuestaWs['status'];
                                $strMensaje        = $arrayRespuestaWs['mensaje'];
                                
                                $strObservacionHistorial  .= 'Se elimino Prefix a la RouteMap : <b>'.$arrayInfo->routeMap.'</b> del Servicio</br>';

                                if($strStatus != 'OK')
                                {
                                    $boolSeEjecuto = false;
                                }
                            }

                            //-----------------------------------------------------------------------
                            //       CONFIGURACION A NIVEL TELCOS ( TRANSACCIONES )
                            //-----------------------------------------------------------------------
                            //Si existe al menos una opcion (agregar o eliminar) que no se ejecuto correctamente en WS no realiza Transaccion
                            if($boolSeEjecuto)
                            {
                                $arrayParametrosRouteMap['strVrf']= $arrayData->vrf;
                                //Se obtiene la referencia de la routemap nueva o existente
                                $arrayParametrosRouteMap['arrayPrefixActualizar'] = $arrayPrefixActualizar;
                                $arrayResultado = $servicioTecnico->crearEliminarRouteMap($arrayParametrosRouteMap);

                                $strStatus      = $arrayResultado['strStatus'];
                                $strMensaje     = $arrayResultado['strMensaje'];
                            }
                            else
                            {
                                $strStatus      = 'ERROR';
                            }
                        }
                    }
                    //----------------------------------------------------------------
                    //              ELIMINAR ROUTE MAP Y SUBRED PREFIX
                    //----------------------------------------------------------------
                    else
                    {
                        //Eliminar RouteMap
                        $arrayParametros['accion'] = $strTipo.'-routemap-config'; //Eliminacion de la RouteMap
                        $arrayRespuestaWs          = $networkingScriptsService->callNetworkingWebService($arrayParametros);
                        $strStatus                 = $arrayRespuestaWs['status'];
                        $strMensaje                = $arrayRespuestaWs['mensaje'];
                        
                        //Si se elimino correctamente la routeMap se desconfigura los prefix posteriormente
                        if($strStatus == 'OK')
                        {
                            //Obtener los prefix ligados a la routemap PARA que sean desconfigurados del PE
                            $arrayPrefixAEliminar  = $servicioTecnico->getArrayPrefixRouteMapExistente($arrayParametrosRouteMap);

                            $strStatus = 'OK';

                            //Si existen prefix relacionadas se desconfiguran del PE
                            //Caso contrario solo elimina la informacion logica de la routemap ligada al servicio
                            if(!empty($arrayPrefixAEliminar))
                            {
                                $arrayPrefixList = array();
                                $intIndiceJson   = 1;

                                foreach($arrayPrefixAEliminar as $objProCaractPrefix)
                                {
                                    $arrayPrefix = explode("|",$objProCaractPrefix->getValor());

                                    $arrayPrefixList[$intIndiceJson] = array(
                                                                            'ip'           =>  $arrayPrefix[0],
                                                                            'mask'         =>  $arrayPrefix[1],
                                                                            'length_type'  =>  $arrayPrefix[2],
                                                                            'length_value' =>  $arrayPrefix[3],
                                                                            'seq'          =>  $arrayPrefix[4]
                                                                            );
                                    $intIndiceJson++;
                                }

                                $arrayParametros['accion']                 = $strTipo.'-routemap-prefix';
                                $arrayParametros['routemap_prefix_list']   = $arrayPrefixList;

                                //Realizar la eliminacion en el Pe de los prefix en caso de existir que sean ligados a la routemap del servicio
                                $arrayRespuestaWs  = $networkingScriptsService->callNetworkingWebService($arrayParametros);
                                $strStatus         = $arrayRespuestaWs['status'];
                                $strMensaje        = $arrayRespuestaWs['mensaje'];
                            }

                            //Eliminacion logica de la routeMap
                            if($strStatus == 'OK')
                            {
                                $arrayParametrosRouteMap['strVrf']= $arrayData->vrf;
                                $arrayResultado = $servicioTecnico->crearEliminarRouteMap($arrayParametrosRouteMap);
                                $strStatus      = $arrayResultado['strStatus'];
                                $strMensaje     = $arrayResultado['strMensaje'];

                                $strObservacionHistorial   .= 'Se elimino la RouteMap : <b>'.$arrayInfo->routeMap.'</b> y sus Prefix Subred'
                                                            . ' relacionados del Servicio</br>';
                            }
                        }
                    }

                    break;

                case 'agregarEliminarNeighbor':
                    $arrayInfo                         = json_decode($strInfo);
                    $arrayParametros['accion']         = $strTipo.'-bgp-routemapneighbor';
                    $arrayParametros['routemap_name']  = $strPrefijoRouteMap . $arrayInfo->routemap_name;
                    $arrayParametros['routemap_type']  = $arrayInfo->routemap_type;
                    $strObservacionHistorial           .= $strInfo=='agregar'?'Se adiciona filtro <b>'.$arrayInfo->routemap_type.'</b>'
                                                       . ' aplicado en neighbor mediante route-map <b>'.$arrayInfo->routemap_name.'</b>':
                                                        'Se elimina filtro <b>'.$arrayInfo->routemap_type.'</b> aplicado en neighbor '
                                                       . 'mediante route-map <b>'.$arrayInfo->routemap_name.'</b>';
                    break;

                case 'agregarEliminarRedistribucion':
                    $arrayInfo      = json_decode($strInfo);
                    $arrayMatches   = explode("-",$arrayInfo->redistribute_bgp_match);

                    $intIndiceJson  = 1;
                    $arrayJson      = array();

                    foreach($arrayMatches as $strMatch)
                    {
                        $arrayJson[$intIndiceJson] = $strMatch;
                        $intIndiceJson++;
                    }

                    $arrayParametros['accion']                     = $strTipo.'-bgp-redistribute';
                    $arrayParametros['redistribute_bgp_protocolo'] = $arrayInfo->redistribute_bgp_protocolo;
                    $arrayParametros['redistribute_bgp_type']      = $arrayInfo->redistribute_bgp_type;
                    $arrayParametros['redistribute_bgp_metric']    = $arrayInfo->redistribute_bgp_metric;
                    $arrayParametros['redistribute_bgp_routemap']  = $strPrefijoRmRedistribute.$arrayInfo->redistribute_bgp_routemap;
                    $arrayParametros['redistribute_bgp_match']     = $arrayJson;
                    $strProtocolosEjcutados                        = $arrayInfo->redistribute_bgp_protocolo.' '.$arrayInfo->redistribute_bgp_type;
                    $strObservacionHistorial                       .= ($strTipo=='agregar'?
                                                                     'Se ejecuto comandos para redistribucion de otros protocolos hacia BGP':
                                                                     'Se ejecuto comandos para eliminar redistribucion de otros protocolos'
                                                                     . ' hacia BGP').' </br><b>('.$strProtocolosEjcutados.')</b>';
                    break;                   
            }

            //Si la opcion es diferente a la creacion de la RouteMap ( realiza un proceso individual ) se ejecuta la accion via Ws hacia cada PE
            if(!$boolSeCreaRouteMap)
            {
                //Ejecucion del metodo via WS para realizar la configuracion del SW                
                $arrayRespuestaWs = $networkingScriptsService->callNetworkingWebService($arrayParametros);
                $strStatus        = $arrayRespuestaWs['status'];
                $strMensaje       = $arrayRespuestaWs['mensaje'];
            }

            if($strStatus == 'OK')
            {
                //Crear historial de ejecucion de accion sobre el Servicio
                $objServicio          = $emComercial->getRepository("schemaBundle:InfoServicio")->find($arrayData->idServicio );  
                
                if(is_object($objServicio))
                {
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId( $objServicio );
                    $objServicioHistorial->setObservacion($strObservacionHistorial  );
                    $objServicioHistorial->setEstado($objServicio->getEstado());
                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());                    
                    $emComercial->persist($objServicioHistorial);               
                    $emComercial->flush();
                }
                
                $emComercial->commit();
                $emInfraestructura->commit();
                
                $arrayRespuesta = array('status' => $strStatus , 'mensaje' => 'Se ejecutó correctamente la configuración');
            }
            else
            {
                $arrayRespuesta = array('status' => $strStatus , 'mensaje' => $strMensaje);
            }

        }
        catch(\Exception $e)
        {
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->rollback();
            }
            
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->rollback();
            }
            
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxAdministrarEnrutamientoBgpAction',
                                      $e->getMessage(),
                                      $objSession->get('user'),
                                      $objRequest->getClientIp());
            
            $emComercial->close();
            $emInfraestructura->close();
        }                
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }
    
    /**
     * 
     * Metodo encargado de devolver la informacion a renderizar en la administracion de enrutamiento bgp
     * 
     *  - Mascara de subred de prefijo de enrutamiento y valor ligado al tipo del mismo
     *  - Informacion de seleccion de tipo de protocolo
     *  - Informacion de seleccion de protocolos
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 05-01-2017
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     * 
     * @Secure(roles="ROLE_151-5017")
     */
    public function ajaxGetInformacionEnrutamientoBgpAction()
    {
        $objResponse     = new JsonResponse();
        $objRequest      = $this->get('request');
        $objSession      = $objRequest->getSession(); 
        $strCodEmpresa   = $objSession->get('idEmpresa')?$objSession->get('idEmpresa'):'';
        $strParametro    = 'ADMINISTRACION_ENRUTAMIENTO';
        $arrayParametros = array();
        
        $strNombreTecnico= $objRequest->get('nombreProducto')?$objRequest->get('nombreProducto'):'';
        
        $emGeneral       = $this->getDoctrine()->getManager("telconet_general");
        
        //Se obtiene las valores minimo y maximo del rango de la mascara de subred para el prefijo a ingresar
        //Funcion internamente valida existencia de cada variable enviada como parametros para cumplir con la consulta
        $arrayParametroDetPrefix =  $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne( $strParametro,
                                                        'TECNICO',
                                                        '','',
                                                        $strNombreTecnico,
                                                        '','','','',$strCodEmpresa
                                                       );
        
        //Se obtiene las valores minimo y maximo del rango de valores en el cual se escoge el tipo de prefijo
        $arrayParametroDetType   =  $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne( $strParametro,
                                                        'TECNICO',
                                                        '','',
                                                        'TYPE_VALUE',
                                                        '','','','',$strCodEmpresa
                                                       );
        
        if(isset($arrayParametroDetPrefix) && isset($arrayParametroDetType))
        {
            $arrayParametros['prefixMask'] = $arrayParametroDetPrefix['valor2'] . '|' . $arrayParametroDetPrefix['valor3'];
            $arrayParametros['prefixType'] = $arrayParametroDetType['valor2']   . '|' . $arrayParametroDetType['valor3'];
        }
        
        //Se obtiene la información de protocolo y tipo de enrutamiento ( redistribucion ) a ser escogido
        $strProtocolos = '';
        $strTipos      = '';
        
        $arrayParametrosDet                          = array();
        $arrayParametrosDet['strNombreParametroCab'] = $strParametro;
        $arrayParametrosDet['strEstado']             = array('Activo');        
        $arrayParametrosDet['strEmpresaCod']         = $strCodEmpresa;
        $arrayParametrosDet['strDescripcionDet']     = 'PROTOCOLOS_REDISTRIBUCION';
        $arrayParametrosDet['intStart']              = null;
        $arrayParametrosDet['intLimit']              = null;
        
        $arrayRespuestaProtocolos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findParametrosDet($arrayParametrosDet);
        
        if(isset($arrayRespuestaProtocolos['arrayResultado']))
        {
            foreach($arrayRespuestaProtocolos['arrayResultado'] as $strResultado)
            {
                $strProtocolos .=  $strResultado['strValor1'] . "|";
            }
        }
        
        $arrayParametrosDet['strDescripcionDet']     = 'TIPO_REDISTRIBUCION';
        
        $arrayRespuestaTipos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findParametrosDet($arrayParametrosDet);
        
        if(isset($arrayRespuestaTipos['arrayResultado']))
        {
            foreach($arrayRespuestaTipos['arrayResultado'] as $strResultado)
            {
                $strTipos .=  $strResultado['strValor1'] . "|";
            }
        }
        
        $arrayParametros['protocolos'] = $strProtocolos;
        $arrayParametros['tipos']      = $strTipos;
        
        $objResponse->setData($arrayParametros);
        return $objResponse;
    }
    
    /**
     * 
     * Metodo encargado de obtener la informacion de routeMap y sus prefix de acuerdo a la opcion enviada
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 10-01-2017
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     * 
     * @Secure(roles="ROLE_151-5017")
     */
    public function ajaxGetPrefixRouteMapAction()
    {
        $objResponse     = new JsonResponse();
        $objRequest      = $this->get('request');
        $emComercial     = $this->getDoctrine()->getManager("telconet");
        
        $arrayResultado  = array();
        
        $strOpcion       = $objRequest->get('opcion')?$objRequest->get('opcion'):'';
        $strRouteMap     = $objRequest->get('routeMap')?$objRequest->get('routeMap'):'';
        $intIdServicio   = $objRequest->get('idServicio')?$objRequest->get('idServicio'):0;
        
        if($strOpcion == '')
        {
            $objResponse->setData(array('encontrados' => array()));
            return $objResponse;
        }
        
        $objServicio     = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        
        if(is_object($objServicio))
        {
            if($strOpcion == 'RM')
            {
                $objCaracteristicaRouteMap    = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array('descripcionCaracteristica' => 'ROUTE_MAP',
                                                                              'estado'                    => 'Activo')
                                                                       );
                if(is_object($objCaracteristicaRouteMap))
                {
                    $objProdCaracteristicaRouteMap = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                 ->findOneBy(array('caracteristicaId' => $objCaracteristicaRouteMap->getId(),
                                                                                   'productoId'       => $objServicio->getProductoId()->getId(),
                                                                                   'estado'           => 'Activo')
                                                                            );
                    if(is_object($objProdCaracteristicaRouteMap))
                    {
                        $arrayServicioProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                               ->findBy(array('servicioId'               => $objServicio->getId(),
                                                                              'productoCaracterisiticaId'=> $objProdCaracteristicaRouteMap->getId(),
                                                                              'estado'                   => 'Activo'
                                                                             ));

                        foreach($arrayServicioProdCaract as $objServProdCaract)
                        {
                            $arrayResultado[] = array('routeMap' => $objServProdCaract->getValor());
                        }
                    }
                }
            }
            else
            {
                $objServicioProdCaractRouteMap = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                             ->findOneBy(array( 'servicioId'                => $objServicio->getId(),
                                                                                'valor'                     => $strRouteMap,
                                                                                'estado'                    => 'Activo')
                                                                              );
                if(is_object($objServicioProdCaractRouteMap))
                {
                    $arrayServicioProdCaract =  $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findBy(array( 'servicioId'              => $objServicio->getId(),
                                                                            'refServicioProdCaractId' => $objServicioProdCaractRouteMap->getId(),
                                                                            'estado'                  => 'Activo'
                                                                          ));
                    
                    foreach($arrayServicioProdCaract as $objServProdPrefix)
                    {
                        $strValor    = $objServProdPrefix->getValor();
                        
                        $arrayPrefix = explode("|",$strValor);
                        
                        $arrayResultado[] = array('idPrefix'    =>  $objServProdPrefix->getId(),
                                                  'prefixIp'    =>  $arrayPrefix[0],
                                                  'prefixMask'  =>  $arrayPrefix[1],
                                                  'tipo'        =>  $arrayPrefix[2],
                                                  'valor'       =>  $arrayPrefix[3],
                                                  'seq'         =>  $arrayPrefix[4]
                                                  );
                    }
                }
            }
        }
        
        $objResponse->setData(array('encontrados' => $arrayResultado));
        return $objResponse;
    }
    
    
    /**
     * Documentación para la función 'tienePortalActivoNetlifeCamStoragePortalAction'
     * Función utilizada para saber si el cliente ya tiene un portal activo.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 13-04-2017
     * 
     * @return JsonResponse $objResponse
     **/
    public function tienePortalActivoNetlifeCamStoragePortalAction()
    {
        $objResponse                = new JsonResponse();
        $objRequest                 = $this->getRequest();
        
        $objSession                 = $objRequest->getSession();
        $strIpClient                = $objRequest->getClientIp();
        $strUsrCreacion             = $objSession->get('user');
        $intIdPersonaEmpresaRol     = $objRequest->get('idPersonaEmpresaRol') ? $objRequest->get('idPersonaEmpresaRol') : 0;
        
        $servicePortalNetlifecam    = $this->get('tecnico.PortalNetlifeCamService');
        $arrayParametrosTienePortal = array(
                                                "intIdPersonaEmpresaRol"    => $intIdPersonaEmpresaRol,
                                                "strUsrCreacion"            => $strUsrCreacion,
                                                "strIpClient"               => $strIpClient
                                           );
        $arrayRespuestaTienePortal  = $servicePortalNetlifecam->tienePortalActivoNetlifeCamStoragePortal($arrayParametrosTienePortal);
        $objResponse->setData($arrayRespuestaTienePortal);
        return $objResponse;
    }
    
    
    /**
     * Documentación para la función 'getInfoCamNetlifeCamStoragePortalAction'
     * Función utilizada para obtener la información de la cámara si es que existiera y para generar el nombre de la cámara de acuerdo 
     * al login y al número de planes NETLIFECAM + STORAGE + PORTAL que el cliente tenga.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 16-03-2017
     * 
     * @return JsonResponse $objResponse
     **/
    public function getInfoCamNetlifeCamStoragePortalAction()
    {
        $objResponse                = new JsonResponse();
        $objRequest                 = $this->getRequest();
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $servicePortalNetlifecam    = $this->get('tecnico.PortalNetlifeCamService');
        
        $intIdServicio          = $objRequest->get('idServicio') ? $objRequest->get('idServicio') : 0;
        
        $objSession             = $objRequest->getSession();
        $strCodEmpresa          = $objSession->get('idEmpresa');
        
        $strNombreCamara        = "";
        $strSerieCamara         = "";
        $intIdElementoCam       = 0;
        $intIdModeloElemento    = 0;
        $strUserAdminCam        = "";
        $strUserVisitorCam      = "";
        

        $strStatus              = "ERROR";
        $strMensaje             = "";
        
        if($intIdServicio)
        {
            $objServicio    = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
            if(is_object($objServicio))
            {
                $objPunto = $objServicio->getPuntoId();
                if(is_object($objPunto))
                {
                    $strLoginPunto          = $objPunto->getLogin();
                    $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
                    
                    if(is_object($objInfoServicioTecnico))
                    {
                        /*
                         * No hay elemento asociado a la solicitud, por lo que se procederá a buscar todos los servicios de cámara 
                         * asociados al punto para poder obtener el correcto nombre de la cámara generada automáticamente
                         */                  
                        $arrayParamsBusqServPlanNetlifeCamSP    = array(
                                                                        "nombreTecnicoProducto"             => "CAMARA IP",
                                                                        "login"                             => $strLoginPunto,
                                                                        "estadosServicios"                  => array("Activo"),
                                                                        "productoInternetPorLogin"          => "S",
                                                                        "estadoActivo"                      => "Activo",
                                                                        "empresaCod"                        => $strCodEmpresa
                                                                   );

                        $arrayRespuestaServPlanNetlifeCamSP     = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                              ->getServiciosByCriterios($arrayParamsBusqServPlanNetlifeCamSP);
                        $intTotalServPlanNetlifeCamSP           = $arrayRespuestaServPlanNetlifeCamSP["total"];
                        $intCantidadCamaras                     = $intTotalServPlanNetlifeCamSP+1;

                        $boolSinNombreCam   = true;
                        while($boolSinNombreCam) 
                        {
                            $strNombreCamGeneral    = "CAM_".$intCantidadCamaras;
                            $strNombreCamara        = $strLoginPunto."_".$strNombreCamGeneral;
                            $strUserAdminCam        = $strNombreCamGeneral."_admin";
                            $strUserVisitorCam      = $strNombreCamGeneral."_visit";
                            $objElementoCamNueva    = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                        ->findOneBy(array("nombreElemento" => $strNombreCamara));

                            if(is_object($objElementoCamNueva))
                            {
                                $intCantidadCamaras++;
                            }
                            else
                            {
                                $boolSinNombreCam = false;
                            }
                        }
                        $strStatus          = "OK";
                    }
                    else
                    {
                        $strMensaje = "No se ha podido encontrar el servicio técnico del servicio";
                    }
                }
                else
                {
                    $strMensaje = "No se ha podido encontrar el punto del servicio";
                }
            }
            else
            {
                $strMensaje = "No se ha podido encontrar el servicio";
            }
        }
        else
        {
            $strMensaje         = "No existe el parámetro del servicio";
        }
        
        $intLongitudPass        = "12";
        $strPassAdminCam        = $servicePortalNetlifecam->generarClaveAleatoria( array("intLongitudClave"  => $intLongitudPass));
        $strPassVisitorCamara   = $servicePortalNetlifecam->generarClaveAleatoria( array("intLongitudClave"  => $intLongitudPass));
        
        $objResponse->setData(array(
                                    "strStatus"             => $strStatus,
                                    "intIdElementoCam"      => $intIdElementoCam,
                                    "strSerieCamara"        => $strSerieCamara,
                                    "intIdModeloElemento"   => $intIdModeloElemento,
                                    "strMensaje"            => $strMensaje,
                                    "strNombreCamara"       => $strNombreCamara,
                                    "strUserAdminCam"       => $strUserAdminCam,
                                    "strPassAdminCam"       => $strPassAdminCam,
                                    "strUserVisitorCam"     => $strUserVisitorCam,
                                    "strPassVisitorCam"     => $strPassVisitorCamara,
                              ));
        return $objResponse;
    }
    
    
    /**
     * Documentación para la función 'buscarCamNafNetlifeCamStoragePortalAction'
     * Función utilizada para buscar la cámarade NETLIFECAM + STORAGE + PORTAL de un cliente en NAF.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 15-03-2017
     * 
     * @return JsonResponse $objResponse
     **/
    public function buscarCamNafNetlifeCamStoragePortalAction()
    {
        $objResponse            = new JsonResponse();
        $strStatus              = "";
        $strMensaje             = "";
        $objRequest             = $this->getRequest();
        $intIdElementoCam       = $objRequest->get('idElementoCam') ? $objRequest->get('idElementoCam') : 0;
        $strSerieCam            = $objRequest->get('serieCam') ? $objRequest->get('serieCam') : "";
        $strModeloCam           = $objRequest->get('modeloCam') ? $objRequest->get('modeloCam') : "";
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        
        if($intIdElementoCam)
        {
            $strStatus  = 'OK';
            $strMensaje = "Cámara ya asociada a la activación del servicio";
        }
        else
        {
            $arrayRespuestaService  = $serviceServicioTecnico->buscarElementoEnNaf($strSerieCam,$strModeloCam,'PI','ActivarServicio');

            if($arrayRespuestaService[0])
            {
                $strStatus  = $arrayRespuestaService[0]['status'];
                $strMensaje = $arrayRespuestaService[0]['mensaje'];
            }
        }
        
        $objResponse->setData(array(
                                    "strStatus"     => $strStatus,
                                    "strMensaje"    => $strMensaje));
        return $objResponse;
    }

    
    
    
    
    /**
     * Documentación para la función 'guardarConfirmaNetlifeCamStoragePortalAction'
     * Función utilizada para guardar la información de la cámara y el o los contactos seleccionados al confirmar el servicio 
     * de NETLIFECAM + STORAGE + PORTAL de un cliente.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 16-04-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 14-07-2017 Se agrega la finalización de la solicitud de planificación y cerrar las tareas relacionadas a dicha solicitud.
     *                         Además se agrega el puerto para que se guarde junto con el DDNS , la IP y su respectivo puerto.
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 10-10-2017 Se asigna el valor de error que devuelve el ldap
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 16-04-2018 Se agrega parametro de empresa en proceso de validación de usuarios de netlifecam
     * @since 1.2
     *
     * @return JsonResponse $objResponse
     **/
    public function guardarConfirmaNetlifeCamStoragePortalAction()
    {
        $objResponse                        = new JsonResponse();
        $objRequest                         = $this->getRequest();
        $emGeneral                          = $this->getDoctrine()->getManager("telconet_general");
        $emComercial                        = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura                  = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emNaf                              = $this->getDoctrine()->getManager("telconet_naf");
        $emSeguridad                        = $this->getDoctrine()->getManager("telconet_seguridad");

        $intIdAccion                        = $objRequest->get('intIdAccion') ? $objRequest->get('intIdAccion') : 0;
        $intIdServicio                      = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0;
        $intIdPersonaEmpresaRol             = $objRequest->get('intIdPersonaEmpresaRol') ? $objRequest->get('intIdPersonaEmpresaRol') : 0;
        $strSerieCam                        = $objRequest->get('strSerieCam') ? $objRequest->get('strSerieCam') : "";
        $strNombreCam                       = $objRequest->get('strNombreCam') ? $objRequest->get('strNombreCam') : "";
        $strDDNSCam                         = $objRequest->get('strDDNSCam') ? $objRequest->get('strDDNSCam') : "";
        $strPuertoDDNSCam                   = $objRequest->get('strPuertoDDNSCam') ? $objRequest->get('strPuertoDDNSCam') : "";
        $strIPCam                           = $objRequest->get('strIPCam') ? $objRequest->get('strIPCam') : "";
        $strPuertoIPCam                     = $objRequest->get('strPuertoIPCam') ? $objRequest->get('strPuertoIPCam') : "";
        $strMacCam                          = $objRequest->get('strMACCam') ? $objRequest->get('strMACCam') : "";
        $strUserAdminCam                    = $objRequest->get('strUserAdminCam') ? $objRequest->get('strUserAdminCam') : "";
        $strPassAdminCam                    = $objRequest->get('strPassAdminCam') ? $objRequest->get('strPassAdminCam') : "";
        $strUserVisitorCam                  = $objRequest->get('strUserVisitorCam') ? $objRequest->get('strUserVisitorCam') : "";
        $strPassVisitorCam                  = $objRequest->get('strPassVisitorCam') ? $objRequest->get('strPassVisitorCam') : "";
        
        $intIdModeloCam                     = $objRequest->get('intIdModeloCam') ? $objRequest->get('intIdModeloCam') : 0;
        $strTienePortalActivo               = $objRequest->get('strTienePortalActivo') ? $objRequest->get('strTienePortalActivo') : "";
        
        $strJsonFormasContactoGestionados   = $objRequest->get('strFormasContactoGestionados');
        
        $objSession                         = $objRequest->getSession();
        $strIpClient                        = $objRequest->getClientIp();
        $strUsrCreacion                     = $objSession->get('user');
        $strCodEmpresa                      = $objSession->get('idEmpresa');
        $serviceUtil                        = $this->get('schema.Util');
        $servicePortalNetlifecam            = $this->get('tecnico.PortalNetlifeCamService');
        $serviceInfoServicioTecnico         = $this->get('tecnico.InfoServicioTecnico');
        
        $strMsjError                        = "Ha ocurrido un error. Por favor notificar a Sistemas!";
        $strMensaje                         = "";
        $strStatus                          = "";
        $strCodAleatoria                    = "";
        $boolCrearClienteLDAP               = false;
        $strTokenRespuesta                  = "";
        $strObservacionCamHistorial         = "";
        $strCorreoUserPortal                = "";
        $emInfraestructura->beginTransaction();
        $emComercial->beginTransaction();
        $emGeneral->beginTransaction();
        try
        {
            if($intIdPersonaEmpresaRol)
            {
                $objPersonaEmpresaRolCliente = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                           ->find($intIdPersonaEmpresaRol);
                if(is_object($objPersonaEmpresaRolCliente))
                {
                    $objPersonaCliente          = $objPersonaEmpresaRolCliente->getPersonaId();
                    if(is_object($objPersonaCliente))
                    {
                        if($intIdServicio)
                        {
                            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                            if(is_object($objServicio))
                            {
                                $arrayParamsVerifEstadoCamara   = array(
                                                                        "strDDNSCam"        => $strDDNSCam.":".$strPuertoDDNSCam,
                                                                        "strUserAdminCam"   => $strUserAdminCam,
                                                                        "strPassAdminCam"   => $strPassAdminCam,
                                                                        "strUserVisitorCam" => $strUserVisitorCam,
                                                                        "strPassVisitorCam" => $strPassVisitorCam
                                                                  );
                                $arrayRespVerifEstadoCamara = $servicePortalNetlifecam->verificarConfiguracionCamara($arrayParamsVerifEstadoCamara);
                                if($arrayRespVerifEstadoCamara["strStatus"] == "OK")
                                {
                                    $strNombreCliente       = sprintf("%s",$objPersonaCliente);
                                    $objFormaContactoCorreo = $emComercial->getRepository('schemaBundle:AdmiFormaContacto')
                                                                          ->findOneBy(array("descripcionFormaContacto" => 'Correo Electronico',
                                                                                            "estado"                   => 'Activo'));
                                    if(is_object($objFormaContactoCorreo))
                                    {
                                        $arrayParametrosCaractCorreosPortal = array('descripcionCaracteristica' => 'CORREOS_PORTAL',
                                                                                    'estado'                    => "Activo");
                                    
                                        $objCaractCorreosPortal             = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                          ->findOneBy($arrayParametrosCaractCorreosPortal);
                                        if(is_object($objCaractCorreosPortal))
                                        {
                                            $objFormasContactoGestionado            = json_decode($strJsonFormasContactoGestionados);
                                            $intTotalJsonFormasContactoGestionados  = $objFormasContactoGestionado->intTotal;
                                            if($intTotalJsonFormasContactoGestionados > 0)
                                            {
                                                $arrayFormasContactoGestionados = $objFormasContactoGestionado->arrayRegistros;
                                                if($arrayFormasContactoGestionados)
                                                {
                                                    foreach($arrayFormasContactoGestionados as $objFormaContactoGestionado)
                                                    {
                                                        $intIdPerCaractCorreo       = $objFormaContactoGestionado->intIdPerCaractCorreo;
                                                        $strValorFormaContactoSelec = $objFormaContactoGestionado->strValorFormaContactoSeleccionado;
                                                        $intIdPersonaFormaContacto  = $objFormaContactoGestionado->intIdPersonaFormaContacto;
                                                        $strValorFormaContacto      = $objFormaContactoGestionado->strValorFormaContacto;
                                                        $strValorCorreoUsuarioSelec = $objFormaContactoGestionado->strValorCorreoUsuarioSeleccionado;

                                                        if($intIdPerCaractCorreo)
                                                        {
                                                            $objPerCarCorreo = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                           ->find($intIdPerCaractCorreo);

                                                            if(is_object($objPerCarCorreo))
                                                            {
                                                                if($strValorFormaContactoSelec == "1")
                                                                {
                                                                    $objPerCarCorreo->setEstado('Activo');
                                                                }
                                                                else
                                                                {
                                                                    $objPerCarCorreo->setEstado('Eliminado');
                                                                    $objPerCarCorreo->setUsrUltMod($strUsrCreacion);
                                                                    $objPerCarCorreo->setFeUltMod(new \DateTime('now'));
                                                                }
                                                                $emComercial->persist($objPerCarCorreo);
                                                                $emComercial->flush();
                                                            }
                                                            else
                                                            {
                                                                throw new \Exception("No se ha podido encontrar el objeto de la forma de"
                                                                                     . " contacto");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if($strValorFormaContactoSelec == "1")
                                                            {
                                                                
                                                                $arrayParamCaracPortal  = array(
                                                                                                "objPersonaEmpresaRol"          => 
                                                                                                $objPersonaEmpresaRolCliente,
                                                                                                "objCaracteristica"             =>
                                                                                                $objCaractCorreosPortal,
                                                                                                "strValor"                      =>
                                                                                                $intIdPersonaFormaContacto,
                                                                                                "strUsrCreacion"                =>
                                                                                                $strUsrCreacion,
                                                                                                "strIpClient"                   =>
                                                                                                $strIpClient
                                                                                          );
                                                                $objPerCaracPortal      = $servicePortalNetlifecam->ingresarPerCaracteristica(
                                                                                                                    $arrayParamCaracPortal);
                                                            }
                                                        }

                                                        //Se crea la caracteristica del cliente con el correo seleccionado como usuario
                                                        if($strValorCorreoUsuarioSelec == "1")
                                                        {
                                                            $strCorreoUserPortal = $strValorFormaContacto;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new \Exception("No se ha encontrado la característica CORREO_PORTAL");
                                        }
                                    }
                                    else
                                    {
                                        throw new \Exception("No se ha encontrado la forma de contacto");
                                    }
                                    /**
                                     * CARACTERISTICAS ASOCIADAS AL CLIENTE
                                     * Generar Acceso
                                     * Validar que ya no haya ingresado anteriormente, es decir que no tenga una netlifecam activa
                                     */
                                    $arrayParametrosCaractPortalActivo  = array('descripcionCaracteristica'     => 'PORTAL_ACTIVO',
                                                                                'estado'                        => "Activo");

                                    $objCaractPortalActivo              = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                      ->findOneBy($arrayParametrosCaractPortalActivo);

                                    $arrayParametrosCaractUserPortal    = array('descripcionCaracteristica' => 'USUARIO_PORTAL',
                                                                                'estado'                    => "Activo");

                                    $objCaractUserPortal                = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                      ->findOneBy($arrayParametrosCaractUserPortal);
                                    
                                    $arrayParametrosCaractCodPortal     = array('descripcionCaracteristica' => 'CODIGO_TMP_PORTAL',
                                                                                'estado'                    => "Activo");

                                    $objCaractCodPortal                 = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                      ->findOneBy($arrayParametrosCaractCodPortal);

                                    if(is_object($objCaractPortalActivo) && is_object($objCaractUserPortal) && is_object($objCaractCodPortal))
                                    {
                                        $intIdCaractPortalActivo    = $objCaractPortalActivo->getId();
                                        $intIdCaractUserPortal      = $objCaractUserPortal->getId();

                                        
                                        $objCaractPerPortalActivo = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                    ->findOneBy(
                                                                                                    array(
                                                                                                            'personaEmpresaRolId' => 
                                                                                                            $intIdPersonaEmpresaRol,
                                                                                                            'caracteristicaId'    => 
                                                                                                            $intIdCaractPortalActivo,
                                                                                                            'estado'              => 
                                                                                                            "Activo"
                                                                                                    )
                                                                                               );

                                        if(is_object($objCaractPerPortalActivo))
                                        {
                                            $strMensaje         = "El cliente ya posee credenciales en el portal.";
                                            $boolPortalActivo   = true;
                                        }
                                        else
                                        {
                                            $strMensaje = "Se crearon las credenciales para el acceso al portal de manera correcta. ";
                                        }


                                        if($boolPortalActivo)
                                        {
                                            /**
                                             * El cliente ya tiene acceso al portal, es decir que ya tiene un usuario y password para acceder al portal
                                             */
                                            $objCaractPerUserPortal   = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                    ->findOneBy(
                                                                                                    array(
                                                                                                          'personaEmpresaRolId'   => 
                                                                                                          $intIdPersonaEmpresaRol,
                                                                                                          'caracteristicaId'      => 
                                                                                                          $intIdCaractUserPortal,
                                                                                                          'estado'                => 
                                                                                                          "Activo"
                                                                                              ));                            
                                            if(is_object($objCaractPerUserPortal))
                                            {
                                                $strCorreoUserPortal = $objCaractPerUserPortal->getValor();
                                            }

                                        }
                                        else
                                        {
                                            //Se verifica que el correo no esté asociado como usuario del portal para otro cliente
                                            $objCarUsrPortalExist = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                ->findCaracteristicaPorCriterios(
                                                                                array("caracteristicaId"       => $intIdCaractUserPortal,
                                                                                      "notPersonaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                                                      "valor"      => $strCorreoUserPortal,
                                                                                      "empresaCod" => $objPersonaEmpresaRolCliente->getEmpresaCod(),
                                                                                      "estado"     => "Activo"));

                                            if(is_object($objCarUsrPortalExist))
                                            {
                                                $strMsjError = "Ya existe otro cliente con el mismo usuario de acceso "
                                                                ."al portal. Por favor seleccione otro correo electrónico como usuario!";
                                                //Ya existe otro cliente con ese mismo correo asociado
                                                throw new \Exception($strMsjError);
                                            }
                                            else
                                            {
                                                $arrayParamCaracPortal  = array(
                                                                                "objPersonaEmpresaRol"  => $objPersonaEmpresaRolCliente,
                                                                                "objCaracteristica"     => $objCaractUserPortal,
                                                                                "strValor"              => $strCorreoUserPortal,
                                                                                "strUsrCreacion"        => $strUsrCreacion,
                                                                                "strIpClient"           => $strIpClient
                                                                          );
                                                $objPerCaracPortal      = $servicePortalNetlifecam->ingresarPerCaracteristica($arrayParamCaracPortal);
                                            }

                                            $arrayParamClaveAleat   = array("intMinLongitudClave"   => 8,
                                                                            "intMaxLongitudClave"   => 15);

                                            $strCodAleatoria    = $servicePortalNetlifecam->generarClaveAleatoria($arrayParamClaveAleat);
                                            if($strCodAleatoria)
                                            {
                                                $arrayParamCaracPortal  = array(
                                                                                "objPersonaEmpresaRol"  => $objPersonaEmpresaRolCliente,
                                                                                "objCaracteristica"     => $objCaractCodPortal,
                                                                                "strValor"              => $strCodAleatoria,
                                                                                "strUsrCreacion"        => $strUsrCreacion,
                                                                                "strIpClient"           => $strIpClient
                                                                          );
                                                $objPerCaracPortal      = $servicePortalNetlifecam->ingresarPerCaracteristica($arrayParamCaracPortal);
                                            }
                                            else
                                            {
                                                throw new \Exception("No se ha podido generar el código temporal");
                                            }

                                            /**
                                             * Se crea la característica para registrar que al cliente ya se le generó el usuario 
                                             * y código de verificación
                                             */
                                            $arrayParamCaracPortal  = array(
                                                                            "objPersonaEmpresaRol"  => $objPersonaEmpresaRolCliente,
                                                                            "objCaracteristica"     => $objCaractPortalActivo,
                                                                            "strValor"              => "SI",
                                                                            "strUsrCreacion"        => $strUsrCreacion,
                                                                            "strIpClient"           => $strIpClient
                                                                      );
                                            $objPerCaracPortal      = $servicePortalNetlifecam->ingresarPerCaracteristica($arrayParamCaracPortal);


                                            $strNombresClienteLdap      = "";
                                            $strApellidosClienteLdap    = "";

                                            $strRazonSocial         = $objPersonaCliente->getRazonSocial();
                                            $strNombresCliente      = $objPersonaCliente->getNombres();
                                            $strApellidosCliente    = $objPersonaCliente->getApellidos();
                                            if($strRazonSocial != "")
                                            {
                                                $strNombresClienteLdap      = $strRazonSocial;
                                                $strApellidosClienteLdap    = $strRazonSocial;
                                            }
                                            else if($strNombresCliente != "" && $strApellidosCliente != "")
                                            {
                                                $strNombresClienteLdap      = $strNombresCliente;
                                                $strApellidosClienteLdap    = $strApellidosCliente;
                                            }
                                            else
                                            {
                                                throw new \Exception("No se ha podido obtener el nombre del cliente");
                                            }
                                            /*
                                             * Crear Usuario LDAP
                                             */
                                            $arrayParametrosLdap = array(
                                                                            "intIdPersonaEmpresaRol"    => $intIdPersonaEmpresaRol,
                                                                            "strNombre"                 => $strNombresClienteLdap,
                                                                            "strApellido"               => $strApellidosClienteLdap,
                                                                            "strMail"                   => $strCorreoUserPortal,
                                                                            "strIpClient"               => $strIpClient,
                                                                            "strUser"                   => $strUsrCreacion);

                                            $arrayCrearClienteLdap = $servicePortalNetlifecam->crearClienteLdapPortalNetlifecam($arrayParametrosLdap);

                                            if($arrayCrearClienteLdap["status"]=="OK")
                                            {
                                                $boolCrearClienteLDAP   = true;
                                                $strTokenRespuesta      = $arrayCrearClienteLdap["token"];
                                            }
                                            else
                                            {
                                                throw new \Exception("No se ha podido crear el cliente en LDAP");
                                            }
                                        }
                                        if(empty($strCorreoUserPortal))
                                        {
                                            throw new \Exception("No se ha enviado de manera correcta el correo que servirá de usuario.");
                                        }
                                    }
                                    else
                                    {
                                        throw new \Exception("No se ha encontrado alguna de las características para el portal");
                                    }

                                    $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                          ->findOneByServicioId($objServicio);
                                    if(is_object($objInfoServicioTecnico))
                                    {
                                        if($intIdModeloCam)
                                        {
                                            $objModeloElementoCam = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                                                                      ->find($intIdModeloCam);
                                            if(is_object($objModeloElementoCam))
                                            {
                                                $objElementoCam = new InfoElemento();
                                                $objElementoCam->setNombreElemento($strNombreCam);
                                                $objElementoCam->setDescripcionElemento("CAMARA: ".$strNombreCam);
                                                $objElementoCam->setSerieFisica($strSerieCam);
                                                $objElementoCam->setModeloElementoId($objModeloElementoCam);
                                                $objElementoCam->setUsrCreacion($strUsrCreacion);
                                                $objElementoCam->setFeCreacion(new \DateTime('now'));
                                                $objElementoCam->setIpCreacion($strIpClient);
                                                $objElementoCam->setEstado("Activo");
                                                $emInfraestructura->persist($objElementoCam);
                                                $emInfraestructura->flush();


                                                $strObservacionCamHistorial = '<b>Datos Nuevos<b><br>'; 
                                                $strObservacionCamHistorial .= 'Tipo: CAMARA<br>';
                                                $strObservacionCamHistorial .= 'Modelo: '.$objModeloElementoCam->getNombreModeloElemento().'<br>';
                                                $strObservacionCamHistorial .= 'Descripcion: CAMARA '.$strNombreCam.'<br>';
                                                $strObservacionCamHistorial .= 'Serie Fisica: '.$strSerieCam.'<br>';

                                                
                                                $intIdElementoCam       = $objElementoCam->getId();
                                                $strDetalleNombreDDNS   = "DDNS_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetalleNombreDDNS, 
                                                                                                        $strDetalleNombreDDNS, 
                                                                                                        $strDDNSCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);
                                                $strObservacionCamHistorial .= 'DDNS: '.$strDDNSCam.'<br>';
                                                
                                                $strDetallePuertoDDNSCam    = "PUERTO_DDNS_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetallePuertoDDNSCam, 
                                                                                                        $strDetallePuertoDDNSCam, 
                                                                                                        $strPuertoDDNSCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);
                                                $strObservacionCamHistorial .= 'PUERTO DDNS: '.$strPuertoDDNSCam.'<br>';

                                                $strDetalleIPCam    = "IP_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetalleIPCam, 
                                                                                                        $strDetalleIPCam, 
                                                                                                        $strIPCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);
                                                $strObservacionCamHistorial .= 'IP: '.$strIPCam.'<br>';
                                                
                                                $strDetallePuertoIPCam  = "PUERTO_IP_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetallePuertoIPCam, 
                                                                                                        $strDetallePuertoIPCam, 
                                                                                                        $strPuertoIPCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);
                                                $strObservacionCamHistorial .= 'PUERTO IP: '.$strPuertoIPCam.'<br>';
                                                
                                                
                                                $strDetalleNombreCam        = "NOMBRE_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetalleNombreCam, 
                                                                                                        $strDetalleNombreCam, 
                                                                                                        $strNombreCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);
                                                
                                                $strDetalleMacCam        = "MAC_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetalleMacCam, 
                                                                                                        $strDetalleMacCam, 
                                                                                                        $strMacCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);
                                                $strObservacionCamHistorial .= 'MAC: '.$strDetalleMacCam.'<br>';

                                                $strDetalleUserAdminCam     = "USER_ADMIN_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetalleUserAdminCam, 
                                                                                                        $strDetalleUserAdminCam, 
                                                                                                        $strUserAdminCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);


                                                $strDetallePassAdminCam     = "PASS_ADMIN_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetallePassAdminCam, 
                                                                                                        $strDetallePassAdminCam, 
                                                                                                        $strPassAdminCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);


                                                $strDetalleUserVisitorCam   = "USER_VISIT_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetalleUserVisitorCam, 
                                                                                                        $strDetalleUserVisitorCam, 
                                                                                                        $strUserVisitorCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);


                                                $strDetallePassVisitorCam   = "PASS_VISIT_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetallePassVisitorCam, 
                                                                                                        $strDetallePassVisitorCam, 
                                                                                                        $strPassVisitorCam, 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);


                                                $strDetalleEstadoGrabacionCam = "ESTADO_GRABACION_CAMARA";
                                                $serviceInfoServicioTecnico->ingresarDetalleElemento(   $objElementoCam, 
                                                                                                        $strDetalleEstadoGrabacionCam, 
                                                                                                        $strDetalleEstadoGrabacionCam, 
                                                                                                        'Pendiente', 
                                                                                                        $strUsrCreacion, 
                                                                                                        $strIpClient);


                                                $objInfoHistorialElementoCam = new InfoHistorialElemento();
                                                $objInfoHistorialElementoCam->setElementoId($objElementoCam);
                                                $objInfoHistorialElementoCam->setObservacion($strObservacionCamHistorial);
                                                $objInfoHistorialElementoCam->setFeCreacion(new \DateTime('now'));
                                                $objInfoHistorialElementoCam->setUsrCreacion($strUsrCreacion);
                                                $objInfoHistorialElementoCam->setIpCreacion($strIpClient);
                                                $objInfoHistorialElementoCam->setEstadoElemento("Activo");
                                                $emInfraestructura->persist($objInfoHistorialElementoCam);
                                                $emInfraestructura->flush();

                                                $objInfoServicioTecnico->setElementoClienteId($intIdElementoCam);
                                                $emComercial->persist($objInfoServicioTecnico);
                                                $emComercial->flush();
                                            }
                                            else
                                            {
                                                throw new \Exception("No se ha podido encontrar el modelo de la cámara");
                                            }
                                        }
                                        else
                                        {
                                            throw new \Exception("No se ha enviado el parámetro del modelo de la cámara");
                                        }
                                    }
                                    else
                                    {
                                        throw new \Exception("No se ha podido encontrar la información técnica del servicio");
                                    }


                                    $objProductoStorageCam  = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                          ->findOneBy(array("nombreTecnico"    => "STORAGE CAM",
                                                                                            "estado"           => "Activo"));


                                    if(is_object($objProductoStorageCam))
                                    {
                                        $arrayParametrosCaractServidor      = array('descripcionCaracteristica' => 'SERVIDOR_VIDEOS_CLIENTE',
                                                                                    'estado'                    => "Activo");

                                        $objCaractServidorVideosCliente     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                          ->findOneBy($arrayParametrosCaractServidor);
                                        /**
                                         * Se crea la característica con la información del servidor donde se almacenarán los videos del cliente
                                         * asociada al servicio
                                         */
                                        if(is_object($objCaractServidorVideosCliente))
                                        {
                                            $arrayAdmiParamDetsServVideo        = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                            ->get(  'SERVIDORES_VIDEOS_NETLIFECAM', 
                                                                                                    '', 
                                                                                                    '', 
                                                                                                    '', 
                                                                                                    '', 
                                                                                                    '', 
                                                                                                    'DISPONIBLE', 
                                                                                                    '', 
                                                                                                    '', 
                                                                                                    $strCodEmpresa,
                                                                                                    'valor2');

                                            if( $arrayAdmiParamDetsServVideo[0] )
                                            {
                                                $intIdParamDetServidorCliente       = $arrayAdmiParamDetsServVideo[0]["id"];
                                                $strCantidadActualClientesServidor  = $arrayAdmiParamDetsServVideo[0]["valor1"];
                                                $strCantidadMaxClientesServidor     = $arrayAdmiParamDetsServVideo[0]["valor2"];
                                                $strCantidadProximaClientesServidor = $strCantidadActualClientesServidor+1;

                                                $objPDServidorCliente   = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                    ->find($intIdParamDetServidorCliente);

                                                if(is_object($objPDServidorCliente))
                                                {
                                                    $objPDServidorCliente->setValor1($strCantidadProximaClientesServidor);

                                                    if($strCantidadProximaClientesServidor == $strCantidadMaxClientesServidor)
                                                    {
                                                        $objPDServidorCliente->setValor3('NO DISPONIBLE');
                                                    }
                                                    $emGeneral->persist($objPDServidorCliente);
                                                    $emGeneral->flush();


                                                    /**
                                                     * Característica asociada al servicio producto storage SERVIDOR
                                                     */
                                                    $objProdCaractServidorCam = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                                                ->findOneBy(array(  "productoId"        => 
                                                                                                                    $objProductoStorageCam,
                                                                                                                    "caracteristicaId"  => 
                                                                                                                    $objCaractServidorVideosCliente,
                                                                                                                    "estado"            =>
                                                                                                                    "Activo"
                                                                                                                    ));

                                                    if(is_object($objProdCaractServidorCam))
                                                    {
                                                        $intIdProdCaractServidor  = $objProdCaractServidorCam->getId();

                                                        $objServProdCaracServidor = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                                                ->findOneBy(array(  "servicioId"                => 
                                                                                                                    $intIdServicio, 
                                                                                                                    "productoCaracterisiticaId" =>
                                                                                                                    $intIdProdCaractServidor,
                                                                                                                    "estado"                    =>
                                                                                                                    "Activo"
                                                                                                            ));
                                                        if(is_object($objServProdCaracServidor))
                                                        {
                                                            $objServProdCaracServidor->setValor($intIdParamDetServidorCliente);
                                                            $objServProdCaracServidor->setFeUltMod(new \DateTime('now'));
                                                            $objServProdCaracServidor->setUsrUltMod($strUsrCreacion);
                                                            $emComercial->persist($objServProdCaracServidor);
                                                            $emComercial->flush();
                                                        }
                                                        else
                                                        {
                                                            $objServProdCaracServidor  = new InfoServicioProdCaract();	
                                                            $objServProdCaracServidor->setServicioId($intIdServicio);
                                                            $objServProdCaracServidor->setProductoCaracterisiticaId($intIdProdCaractServidor);
                                                            $objServProdCaracServidor->setValor($intIdParamDetServidorCliente);
                                                            $objServProdCaracServidor->setEstado("Activo");	
                                                            $objServProdCaracServidor->setUsrCreacion($strUsrCreacion);	
                                                            $objServProdCaracServidor->setFeCreacion(new \DateTime('now'));	
                                                            $emComercial->persist($objServProdCaracServidor);
                                                            $emComercial->flush();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new \Exception("No se ha encontrado un producto asociado a la característica "
                                                                             ."del servidor");
                                                    }
                                                }
                                                else
                                                {
                                                    throw new \Exception("No se ha encontrado el servidor asignado para el cliente");
                                                }
                                            }
                                            else
                                            {
                                                $strMsjError = "No se ha encontrado un servidor disponible para almacenar los videos. "
                                                               . "Por favor notifique a Sistemas";
                                                throw new \Exception($strMsjError);
                                            }
                                        }
                                        else
                                        {
                                            throw new \Exception("No se ha encontrado la característica asociada al plan para determinar "
                                                                 . "el servidor de videos asignado al servicio");
                                        }

                                        $arrayParametrosCaractHorasStorage  = array('descripcionCaracteristica' => 'HORAS_STORAGE_CAM',
                                                                                    'estado'                    => "Activo");

                                        $objCaractHorasStorageCliente       = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                          ->findOneBy($arrayParametrosCaractHorasStorage);

                                        if(is_object($objCaractHorasStorageCliente))
                                        {
                                            /**
                                             * Característica asociada al servicio producto storage HORAS_STORAGE_CAM
                                             */
                                           $objAdmiProdCaractHorasStorageCam  = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                                            ->findOneBy(array(  "productoId"            => 
                                                                                                                $objProductoStorageCam,
                                                                                                                "caracteristicaId"      => 
                                                                                                                $objCaractHorasStorageCliente,
                                                                                                                "estado"                =>
                                                                                                                "Activo"
                                                                                                                ));

                                           if(is_object($objAdmiProdCaractHorasStorageCam))
                                           {
                                               $intIdProdCaractHorasStorageCam   = $objAdmiProdCaractHorasStorageCam->getId();

                                               $objServProdCaractHorasStorageCam = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                                               ->findOneBy(array("servicioId"                 => 
                                                                                                                 $intIdServicio, 
                                                                                                                 "productoCaracterisiticaId"  => 
                                                                                                                 $intIdProdCaractHorasStorageCam,
                                                                                                                 "estado"                    => 
                                                                                                                 "Activo"
                                                                                                          ));
                                               if(is_object($objServProdCaractHorasStorageCam))
                                               {
                                                   $objServProdCaractHorasStorageCam->setValor("48");
                                                   $objServProdCaractHorasStorageCam->setFeUltMod(new \DateTime('now'));
                                                   $objServProdCaractHorasStorageCam->setUsrUltMod($strUsrCreacion);
                                                   $emComercial->persist($objServProdCaractHorasStorageCam);
                                                   $emComercial->flush();
                                               }
                                               else
                                               {
                                                   $objServProdCaractHorasStorageCam  = new InfoServicioProdCaract();	
                                                   $objServProdCaractHorasStorageCam->setServicioId($intIdServicio);
                                                   $objServProdCaractHorasStorageCam->setProductoCaracterisiticaId($intIdProdCaractHorasStorageCam);
                                                   $objServProdCaractHorasStorageCam->setValor("48");
                                                   $objServProdCaractHorasStorageCam->setEstado("Activo");	
                                                   $objServProdCaractHorasStorageCam->setUsrCreacion($strUsrCreacion);	
                                                   $objServProdCaractHorasStorageCam->setFeCreacion(new \DateTime('now'));	
                                                   $emComercial->persist($objServProdCaractHorasStorageCam);
                                                   $emComercial->flush();
                                               }
                                           }
                                           else
                                           {
                                               throw new \Exception("No se ha encontrado un producto asociado a la característica del servidor");
                                           }
                                        }
                                        else
                                        {
                                            throw new \Exception("No se ha encontrado la característica asociada a las horas de almacenamiento "
                                                                 . "de una cámara");
                                        }
                                    }
                                    else
                                    {
                                        throw new \Exception("No existe el producto de almacenamiento de la cámara");
                                    }
                                    /**
                                     * Se activa el servicio
                                     */
                                    $objServicio->setEstado("Activo");
                                    $emComercial->persist($objServicio);
                                    $emComercial->flush();

                                    /**
                                     * Se genera el historial del servicio
                                     */
                                    $objAccion   = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
                                    $objServicioHistorial = new InfoServicioHistorial();
                                    $objServicioHistorial->setServicioId($objServicio);
                                    $objServicioHistorial->setObservacion("Se confirmo el servicio");
                                    $objServicioHistorial->setEstado("Activo");
                                    $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                    $objServicioHistorial->setIpCreacion($strIpClient);
                                    $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
                                    $emComercial->persist($objServicioHistorial);
                                    $emComercial->flush();
                                    
                                    /**
                                     * Se finaliza la solicitud de planificación
                                     */
                                    $objTipoSolicitudPlanificacion = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                                                  "estado"               => "Activo"));
                                    
                                    if(is_object($objTipoSolicitudPlanificacion))
                                    {
                                        $intIdTipoSolPlanificacion  = $objTipoSolicitudPlanificacion->getId();
                                        $objSolicitudPlanificacion  = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                                  ->findOneBy(array("servicioId"      => $intIdServicio,
                                                                                                    "tipoSolicitudId" => $intIdTipoSolPlanificacion,
                                                                                                    "estado"          => "Asignada"));
                                        
                                        if($objSolicitudPlanificacion)
                                        {
                                            $objSolicitudPlanificacion->setEstado("Finalizada");
                                            $emComercial->persist($objSolicitudPlanificacion);
                                            $emComercial->flush();

                                            //crear historial para la solicitud
                                            $objHistorialSolicitudPlanif = new InfoDetalleSolHist();
                                            $objHistorialSolicitudPlanif->setDetalleSolicitudId($objSolicitudPlanificacion);
                                            $objHistorialSolicitudPlanif->setEstado("Finalizada");
                                            $objHistorialSolicitudPlanif->setObservacion("Cliente instalado");
                                            $objHistorialSolicitudPlanif->setUsrCreacion($strUsrCreacion);
                                            $objHistorialSolicitudPlanif->setFeCreacion(new \DateTime('now'));
                                            $objHistorialSolicitudPlanif->setIpCreacion($strIpClient);
                                            $emComercial->persist($objHistorialSolicitudPlanif);
                                            $emComercial->flush();
                                            
                                            $intIdSolicitudPlanificacion                        = $objSolicitudPlanificacion->getId(); 
                                            $arrayParametrosFinTareas['intIdDetalleSolicitud']  = $intIdSolicitudPlanificacion;
                                            $arrayParametrosFinTareas['strProceso']             = 'Activar';
                                            
                                            $strMensajeResponse = $emInfraestructura->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                                    ->cerrarTareasPorSolicitud($arrayParametrosFinTareas);
                                            
                                            if($strMensajeResponse!="OK")
                                            {
                                                throw new \Exception("No se han podido cerrar las tareas para la solicitud con id "
                                                                     .$intIdSolicitudPlanificacion);
                                            }
                                        }
                                        else
                                        {
                                            throw new \Exception("No existe la solicitud de planificación para el servicio con id".$intIdServicio);
                                        }
                                        
                                    }
                                    else
                                    {
                                        throw new \Exception("No existe el tipo de solicitud de planificación");
                                    }

                                    $strCodEmpresaNaf   = "";
                                    $strCodArticulo     = "";
                                    $strIdentificacion  = "";
                                    $strTipoArticulo    = "AF";
                                    $strMsjErrorNAF     = str_repeat(' ', 1000);                                                                  
                                    $strSql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, ".
                                                          ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, ".
                                                          ":cantidad, :pv_mensajeerror); END;";
                                    $objStmt = $emNaf->getConnection()->prepare($strSql);
                                    $objStmt->bindParam('codigoEmpresaNaf'     , $strCodEmpresaNaf);
                                    $objStmt->bindParam('codigoArticulo'       , $strCodArticulo);
                                    $objStmt->bindParam('tipoArticulo'         , $strTipoArticulo);
                                    $objStmt->bindParam('identificacionCliente', $strIdentificacion);
                                    $objStmt->bindParam('serieCpe'             , $strSerieCam);
                                    $objStmt->bindParam('cantidad'             , intval(1));
                                    $objStmt->bindParam('pv_mensajeerror'      , $strMsjErrorNAF);
                                    $objStmt->execute();

                                    if(strlen(trim($strMsjErrorNAF))>0)
                                    {
                                        throw new \Exception("ERROR NAF: ".$strMsjErrorNAF);
                                    }
                                    else
                                    {
                                        $emComercial->commit();
                                        $emInfraestructura->commit();
                                        $emGeneral->commit();
                                        $strStatus = "OK";

                                        $arrayParametrosEnvioMail   = array(
                                                                            "strUsrCreacion"                => $strUsrCreacion,
                                                                            "strIpClient"                   => $strIpClient,
                                                                            "intIdPersonaEmpresaRol"        => $intIdPersonaEmpresaRol,
                                                                            "strAsunto"                     => "Bienvenido a NetlifeCam. "
                                                                                                               ."Tu servicio se ha activado. "
                                                                                                               ."Sigue las instrucciones de ingreso.",
                                                                            "strCodPlantilla"               => 'ACTIVAR_NTLFCAM',
                                                                            "arrayDataMail"                 => array(
                                                                                                                        "strNombreCliente"      =>
                                                                                                                        $strNombreCliente,
                                                                                                                        "strUserPortal"         => 
                                                                                                                        $strCorreoUserPortal,
                                                                                                                        "strTienePortalActivo"  => 
                                                                                                                        $strTienePortalActivo,
                                                                                                                        "strCodigoTmp"          => 
                                                                                                                        $strCodAleatoria,
                                                                                                               )
                                                                      );
                                        $servicePortalNetlifecam->enviarInformacionCorreoNetlifeCam($arrayParametrosEnvioMail);
                                    }
                                    
                                }
                                else
                                {
                                    $strMsjError = $arrayRespVerifEstadoCamara["strMsj"];
                                    throw new \Exception($strMsjError);
                                }
                            }
                            else
                            {
                                throw new \Exception("No se ha podido encontrar la información del servicio");
                            }
                        }
                        else
                        {
                            throw new \Exception("No se pudo obtener el id del servicio");
                        }
                    }
                    else
                    {
                        throw new \Exception("No se ha encontrado la información del cliente");
                    }      
                }
                else
                {
                    throw new \Exception("No se ha encontrado al cliente");
                }
            }
            else
            {
                throw new \Exception("No se ha enviado el parámetro del cliente");
            }
        }
        catch (\Exception $e) 
        {
            $strMsjErrorLdap = "";
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->rollback();
                $emComercial->close();
            }
            
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->rollback();
                $emInfraestructura->close();
            }
            
            if($emGeneral->getConnection()->isTransactionActive())
            {
                $emGeneral->rollback();
                $emGeneral->close();
            }
            
            if($boolCrearClienteLDAP)
            {
                $arrayParametrosWsEliminarLdap        = array(
                                                                "intIdPersonaEmpresaRol"    => $intIdPersonaEmpresaRol,
                                                                "strIpClient"               => $strIpClient,
                                                                "strUser"                   => $strUsrCreacion,
                                                                "strToken"                  => $strTokenRespuesta);

                $arrayRespuestaWsEliminarClienteLdap  = $servicePortalNetlifecam->eliminarClienteLdapPortalNetlifecam($arrayParametrosWsEliminarLdap);
                
                if($arrayRespuestaWsEliminarClienteLdap["status"]!="OK")
                {
                    $strMsjErrorLdap = " ".$arrayRespuestaWsEliminarClienteLdap["strMensaje"]." - "
                                       .$arrayRespuestaWsEliminarClienteLdap["strMsjException"];
                }
            }
            
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->guardarConfirmaNetlifeCamStoragePortalAction',
                                      $e->getMessage().$strMsjErrorLdap,
                                      $strUsrCreacion,
                                      $strIpClient);
            $strStatus   = "ERROR";
            $strMsjError = $e->getMessage().$strMsjErrorLdap;
            
        }
        
        $objResponse->setData(array(
                                    "strStatus"             => $strStatus,
                                    "strMsjError"           => $strMsjError,
                                    "strMensaje"            => $strMensaje));
        return $objResponse;
    }


    
    /**
     * Documentación para la función 'getFormasContactoClienteNetlifeCamStoragePortalAction'
     * Función utilizada para obtener todos los contactos del cliente.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 10-04-2017
     * 
     * @return JsonResponse $objResponse
     **/
    public function getFormasContactoClienteNetlifeCamStoragePortalAction()
    {
        $objResponse                = new JsonResponse();
        $objRequest                 = $this->getRequest();
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        
        $intIdPersonaEmpresaRol     = $objRequest->get('intIdPersonaEmpresaRol') ? $objRequest->get('intIdPersonaEmpresaRol') : 0;
        $boolTienePortalActivo      = $objRequest->get('boolTienePortalActivo');
        $strCorreoUsuario           = $objRequest->get('strCorreoUsuario') ? $objRequest->get('strCorreoUsuario') : "";
        
        $strJsonData                = "";
        try
        {
            $objPersonaEmpresaRolContacto   = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($intIdPersonaEmpresaRol);
            if(is_object($objPersonaEmpresaRolContacto))
            {
                $arrayParamsContactos   = array(
                                                "intIdPersonaEmpresaRol"            => $intIdPersonaEmpresaRol,
                                                "strLeftJoinFormasContactoCliente"  => "SI",
                                                "strDescripcionFormaContacto"       => "Correo Electronico",
                                                "boolTienePortalActivo"             => $boolTienePortalActivo,
                                                "strCorreoUsuario"                  => $strCorreoUsuario
                                          );
                $strJsonData            = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                      ->getJSONFormasContactoClienteByCriterios($arrayParamsContactos);
            }
        } 
        catch (\Exception $e) 
        {
            $strJsonData = json_encode(array('strStatus' => 'ERROR', 'strMessageStatus' => $e->getMessage()));
        }
        $objResponse->setContent($strJsonData);
        return $objResponse;
    }
    
    /**
     * Documentación para la función 'tieneServicioInternetValidoAction'
     * Función utilizada para obtener todos los contactos del cliente.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 31-05-2017
     * 
     * @return JsonResponse $objResponse
     **/
    public function tieneServicioInternetValidoAction()
    {
        $objResponse                = new JsonResponse();
        $objRequest                 = $this->getRequest();
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $emGeneral                  = $this->getDoctrine()->getManager("telconet_general");

        $objSession                 = $objRequest->getSession();
        $strEmpresaCod              = $objSession->get('idEmpresa');
        $strPrefijoEmpresa          = $objSession->get('prefijoEmpresa');
        $intIdServicio              = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0; 
        $boolTieneInternetValido    = false;
        $strStatus                  = "ERROR";
        $strMensaje                 = "";

        try
        {
            if($intIdServicio)
            {
                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                if(is_object($objServicio))
                {
                    $objPunto = $objServicio->getPuntoId();
                    if(is_object($objPunto))
                    {
                        $intIdPunto = $objPunto->getId();
                        
                        $arrayEstadosInternetOK                 = array();
                        $arrayParamsDetEstadosFlujoPlanif       = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->get(  'INFO_SERVICIO', 
                                                                                    'COMERCIAL', 
                                                                                    'ACTIVACION_SERVICIO', 
                                                                                    '', 
                                                                                    'ESTADOS_INTERNET_FLUJO_PREPLANIFICACION_PLANIFICACION', 
                                                                                    '', 
                                                                                    'NO', 
                                                                                    '', 
                                                                                    '', 
                                                                                    $strEmpresaCod);

                        if( !empty($arrayParamsDetEstadosFlujoPlanif) )
                        {
                            foreach( $arrayParamsDetEstadosFlujoPlanif as $arrayParamDetFlujoPlanif )
                            {
                                $arrayEstadosInternetOK[] = $arrayParamDetFlujoPlanif['valor2'];
                            }
                        }
                        else
                        {
                            $arrayEstadosInternetOK[] = "Activo";
                        }


                        $arrayNombreTecnicoParametrizable = array();
                        $arrayClasificacionParametrizable = array();
                        $arrayParametrizacionInicial      = array('strNombreParametroCab' => 'INFO_SERVICIO',
                                                                  'strModulo'             => 'COMERCIAL',
                                                                  'strProceso'            => 'ACTIVACION_SERVICIO');

                        if( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "MD" )
                        {
                            $arrayNombreTecnicoParametrizable              = $arrayParametrizacionInicial;
                            $arrayNombreTecnicoParametrizable['strValor1'] = 'NOMBRE_TECNICO';
                        }
                        elseif( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "TN" )
                        {
                            $arrayClasificacionParametrizable              = $arrayParametrizacionInicial;
                            $arrayClasificacionParametrizable['strValor1'] = 'CLASIFICACION';
                        }
                        else
                        {
                            throw new \Exception("No existe flujo definido para ésta empresa");
                        }

                        $arrayPametrosServicios = array(
                                                        'estadosServicios'                 => $arrayEstadosInternetOK,
                                                        'productoInternetPorLogin'         => 'S',
                                                        'estadoActivo'                     => 'Activo',
                                                        'empresaCod'                       => $strEmpresaCod,
                                                        'intIdPuntoCliente'                => $intIdPunto,
                                                        'arrayNombreTecnicoParametrizable' => $arrayNombreTecnicoParametrizable,
                                                        'arrayClasificacionParametrizable' => $arrayClasificacionParametrizable);


                        $arrayServiciosInternet = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->getServiciosByCriterios($arrayPametrosServicios);

                        $intTotalServInternet   = $arrayServiciosInternet['total'];
                        $arrayRegServInternet   = $arrayServiciosInternet['registros'];

                        if($intTotalServInternet > 0 && !empty($arrayRegServInternet))
                        {
                            $boolTieneInternetValido = true;
                        }
                        $strStatus = "OK";
                    }
                    else
                    {
                        throw new \Exception("No se ha encontrado el punto");
                    }
                }
                else
                {
                    throw new \Exception("No se ha encontrado el servicio");
                }
            }
            else
            {
                throw new \Exception("No se ha enviado el id del punto");
            }
        }
        catch (\Exception $e) 
        {
            $strMensaje = $e->getMessage();
        }

        $strJson = json_encode(array(
                                        "strStatus"                 => $strStatus,
                                        "boolTieneInternetValido"   => $boolTieneInternetValido,
                                        "strMensaje"                => $strMensaje
                              ));
        $objResponse->setContent($strJson);
        return $objResponse;
    }
    
    /**
     * Documentación para la función 'getServiciosCamarasDisponiblesProdsAdicionalesAction'
     * Función utilizada para obtener todos los servicios de cámaras disponibles a las que se les agregará algún producto adicional
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 07-06-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 17-07-2017 Se agrega parámetro strSoloDataPrincipalCam = 'SI' para que consulte únicamente la información principal de las 
     *                         cámaras
     * @return JsonResponse $objResponse
     **/
    public function getServiciosCamarasDisponiblesProdsAdicionalesAction()
    {
        $objResponse    = new JsonResponse();
        $objRequest     = $this->getRequest();
        $emComercial    = $this->getDoctrine()->getManager("telconet");
        
        $intIdServicio  = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0;
        $strJsonData    = "";
        try
        {
            if($intIdServicio)
            {
                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                if(is_object($objServicio))
                {
                    $objPunto = $objServicio->getPuntoId();
                    if(is_object($objPunto))
                    {
                        $strJsonData   = $emComercial->getRepository('schemaBundle:InfoElemento')
                                                     ->getJSONCamarasPortal(array(
                                                                                    "idPunto"                   => $objPunto->getId(),
                                                                                    "estadoServ"                => "Activo",
                                                                                    "strSoloDataPrincipalCam"   => "SI"
                                                                           ));
                    }
                    else
                    {
                        throw new \Exception("No se ha encontrado el punto");
                    }
                }
                else
                {
                    throw new \Exception("No se ha encontrado el servicio");
                }
            }
            else
            {
                throw new \Exception("No se ha enviado el id del servicio");
            }
        } 
        catch (\Exception $e) 
        {
            error_log($e->getMessage());
            $strJsonData = json_encode(array('intTotal' => 0, 'arrayResultado' => array()));
        }
        $objResponse->setContent($strJsonData);
        return $objResponse;
    }
    
    
    /**
     * Documentación para la función 'guardarServiciosProdsAdicionalesNetlifeCamAction'
     * Función utilizada para guardar un producto adicional para el portal netlifecam
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 07-06-2017
     * 
     * @return JsonResponse $objResponse
     **/
    public function guardarServiciosProdsAdicionalesNetlifeCamAction()
    {
        $objResponse                    = new JsonResponse();
        $objRequest                     = $this->getRequest();
        
        $intIdAccion                    = $objRequest->get('intIdAccion') ? $objRequest->get('intIdAccion') : 0;
        $intIdServicio                  = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0;
        $intIdProducto                  = $objRequest->get('intIdProducto') ? $objRequest->get('intIdProducto') : 0;
        $intIdServCamaraProdAdic        = $objRequest->get('intIdServCamaraProdAdic') ? $objRequest->get('intIdServCamaraProdAdic') : 0;
        $strAliasProducto               = $objRequest->get('strAliasProducto') ? $objRequest->get('strAliasProducto') : "";
        $intCantidad                    = $objRequest->get('intCantidad') ? $objRequest->get('intCantidad') : 0; 
        
        
        $objSession                     = $objRequest->getSession();
        $strIpClient                    = $objRequest->getClientIp();
        $strUsrCreacion                 = $objSession->get('user');
        $servicePortalNetlifecam        = $this->get('tecnico.PortalNetlifeCamService');
        $arrayRespuestaCompraProdAdic   = $servicePortalNetlifecam->comprarProdAdic(array(  "aliasProd"         => $strAliasProducto,
                                                                                            "idServ"            => $intIdServicio,
                                                                                            "orig"              => "TELCOS",
                                                                                            "idProd"            => $intIdProducto,
                                                                                            "idServCam"         => $intIdServCamaraProdAdic,
                                                                                            "strUsrCreacion"    => $strUsrCreacion,
                                                                                            "strIpCreacion"     => $strIpClient,
                                                                                            "intIdAccion"       => $intIdAccion,
                                                                                            "cant"              => $intCantidad
        ));
        
        
        $objResponse->setData($arrayRespuestaCompraProdAdic);
        return $objResponse;
    }
    
    /**
     * 
     * Función que permite reenviar la información del código de verificación para acceder al portal netlifecam a los respectivos correos del cliente
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 13-06-2017
     */
    public function reenviarCodTmpPortalNetlifeCamAction()
    {
        $objResponse                = new JsonResponse();
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();
        $strIpClient                = $objRequest->getClientIp();
        $strUsrCreacion             = $objSession->get("user");
        $serviceUtil                = $this->get('schema.Util');
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $strStatus                  = "ERROR";
        $strMsj                     = "";
        $intIdPersonaEmpresaRol     = $objRequest->get('intIdPersonaEmpresaRol') ? $objRequest->get('intIdPersonaEmpresaRol') : 0;
        
        try
        {
            $objPersonaEmpresaRol   = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);
            if(is_object($objPersonaEmpresaRol))
            {
                $objPersona = $objPersonaEmpresaRol->getPersonaId();
                if(is_object($objPersona))
                {
                    $strNombreCliente           = sprintf("%s",$objPersona);
                    $arrayParamsCaractCodTmp    = array('descripcionCaracteristica' => 'CODIGO_TMP_PORTAL',
                                                        'estado'                    => "Activo");

                    $objCaractCodTmp            = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                              ->findOneBy($arrayParamsCaractCodTmp);

                    if(is_object($objCaractCodTmp))
                    {
                        $objPerCaractCodTmp = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                          ->findOneBy(array(
                                                                              "caracteristicaId"    => $objCaractCodTmp,
                                                                              "personaEmpresaRolId" => $objPersonaEmpresaRol,
                                                                              "estado"              => "Activo"
                                                                          ));

                        if(is_object($objPerCaractCodTmp))
                        {
                            $strCodTmpAccesoPortal      = $objPerCaractCodTmp->getValor();
                            $servicePortalNetlifecam    = $this->get('tecnico.PortalNetlifeCamService');
                            $arrayParamsTienePortal     = array(
                                                                    "intIdPersonaEmpresaRol"    => $intIdPersonaEmpresaRol,
                                                                    "strUsrCreacion"            => $strUsrCreacion,
                                                                    "strIpClient"               => $strIpClient
                                                               );
                            $arrayRespuestaTienePortal  = $servicePortalNetlifecam->tienePortalActivoNetlifeCamStoragePortal($arrayParamsTienePortal);

                            if(isset($arrayRespuestaTienePortal["strStatus"]) && !empty($arrayRespuestaTienePortal["strStatus"])
                                && $arrayRespuestaTienePortal["strStatus"]=="OK")
                            {
                                $strCorreoUserPortal    = $arrayRespuestaTienePortal["strCorreoUsuario"];
                                $boolTienePortalActivo  = $arrayRespuestaTienePortal["boolTienePortalActivo"];
                                $strTienePortalActivo   = $boolTienePortalActivo ? "SI" : "NO";

                                $arrayParametrosEnvioMail   = array(
                                                                        "strUsrCreacion"                => $strUsrCreacion,
                                                                        "strIpClient"                   => $strIpClient,
                                                                        "intIdPersonaEmpresaRol"        => $intIdPersonaEmpresaRol,
                                                                        "strAsunto"                     => "Bienvenido a NetlifeCam. "
                                                                                                           ."Tu servicio se ha activado. "
                                                                                                           ."Sigue las instrucciones de ingreso.",
                                                                        "strCodPlantilla"               => 'ACTIVAR_NTLFCAM',
                                                                        "arrayDataMail"                 => array(
                                                                                                                    "strNombreCliente"      =>
                                                                                                                    $strNombreCliente,
                                                                                                                    "strUserPortal"         => 
                                                                                                                    $strCorreoUserPortal,
                                                                                                                    "strTienePortalActivo"  => 
                                                                                                                    $strTienePortalActivo,
                                                                                                                    "strCodigoTmp"          => 
                                                                                                                    $strCodTmpAccesoPortal,
                                                                                                           )
                                                              );
                                $arrayRespuestaEnvio        = $servicePortalNetlifecam->enviarInformacionCorreoNetlifeCam($arrayParametrosEnvioMail);

                                if(isset($arrayRespuestaEnvio["strStatus"]) && !empty($arrayRespuestaEnvio["strStatus"]) 
                                    && $arrayRespuestaEnvio["strStatus"] == "OK")
                                {
                                    $strStatus = "OK";
                                }
                                else
                                {
                                    $strMsj     = "Problemas al reenviar información al cliente. Por favor notificar a Sistemas!";
                                }
                            }
                            else
                            {
                                $strMsj     = "Problemas al reenviar información al cliente. Por favor notificar a Sistemas!";
                            }
                        }
                        else
                        {
                            $strMsj = "El cliente no posee código temporal de verificación válido para el portal";
                        }
                    }
                    else
                    {
                        throw new \Exception("No se ha encontrado la característica asociada al código temporal");
                    }
                }
                else
                {
                    throw new \Exception("No se ha encontrado el objeto persona del cliente");
                }
            }
            else
            {
                throw new \Exception("No se ha encontrado el objeto del cliente");
            }
                
        }
        catch(\Exception $e)
        {
            $strMsj     = "Problemas al reenviar información al cliente. Por favor notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->reenviarCodTmpPortalNetlifeCamAction',
                                      $e->getMessage(),
                                      $strUsrCreacion,
                                      $strIpClient);
        }
        
        $arrayRespuestaReenvio = array( "strStatus" => $strStatus,
                                        "strMsj"    => $strMsj
                                 );
        $objResponse->setData($arrayRespuestaReenvio);
        return $objResponse;
    }
    
    /**
     * @Secure(roles="ROLE_151-311")
     * 
     * Función que cambia el estado del servicio a In-Corte
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * 
     * @version 1.0 04-07-2017
     */
    public function cortarServiciosPortalNetlifeCamAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emSeguridad            = $this->getDoctrine()->getManager("telconet_seguridad");
        $intIdServicio          = $objRequest->get('intIdServicio');
        $intIdAccion            = $objRequest->get('intIdAccion');
        $strUsrCreacion         = $objSession->get('user');
        $strClientIp            = $objRequest->getClientIp();
        $serviceUtil            = $this->get('schema.Util');
        $strStatus              = "";
        $strMsj                 = "";
        $emComercial->getConnection()->beginTransaction();
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objAccion   = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if(is_object($objServicio) && is_object($objAccion))
            {
                $strNombreProducto      = ( $objServicio->getProductoId() ? $objServicio->getProductoId()->getDescripcionProducto() : "");
                $strNombrePlan          = ( $objServicio->getPlanId() ? $objServicio->getPlanId()->getNombrePlan() : "");
                $strNombreProductoPlan  =  $strNombreProducto . $strNombrePlan;
                
                $objServicio->setEstado("In-Corte");
                $emComercial->persist($objServicio);
                $emComercial->flush();

                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strNombreProductoPlan." : Se cortó el servicio");
                $objServicioHistorial->setEstado("In-Corte");
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strClientIp);
                $objServicioHistorial->setAccion($objAccion->getNombreAccion());
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
                $emComercial->commit();
                $strStatus  = "OK";
                $strMsj     = "Se ha cortado el servicio de manera correcta";
            }
            else
            {
                throw new \Exception("No se ha encontrado el objeto servicio o el objeto accion");
            }
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMsj     = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->rollback();
                $emComercial->close();
            }
            
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->cortarServicioPortalNetlifeCamAction',
                                      $e->getMessage(),
                                      $strUsrCreacion,
                                      $strClientIp);
        }

        $arrayRespuesta = array("strStatus" => $strStatus,
                                "strMsj"    => $strMsj      );
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }
    
    
    /**
     * @Secure(roles="ROLE_151-311")
     * 
     * Función que cambia el estado del servicio a Activo
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * 
     * @version 1.0 04-07-2017
     */
    public function reconectarServiciosPortalNetlifeCamAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emSeguridad            = $this->getDoctrine()->getManager("telconet_seguridad");
        $intIdServicio          = $objRequest->get('intIdServicio');
        $intIdAccion            = $objRequest->get('intIdAccion');
        $strUsrCreacion         = $objSession->get('user');
        $strClientIp            = $objRequest->getClientIp();
        $serviceUtil            = $this->get('schema.Util');
        $strStatus              = "";
        $strMsj                 = "";
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objAccion   = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if(is_object($objServicio) && is_object($objAccion))
            {
                $strNombreProducto      = ( $objServicio->getProductoId() ? $objServicio->getProductoId()->getDescripcionProducto() : "");
                $strNombrePlan          = ( $objServicio->getPlanId() ? $objServicio->getPlanId()->getNombrePlan() : "");
                $strNombreProductoPlan  =  $strNombreProducto . $strNombrePlan;
                
                $objServicio->setEstado("Activo");
                $emComercial->persist($objServicio);
                $emComercial->flush();

                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strNombreProductoPlan." : Se reactivó el servicio");
                $objServicioHistorial->setEstado("Activo");
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strClientIp);
                $objServicioHistorial->setAccion($objAccion->getNombreAccion());
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
                $emComercial->commit();
                $strStatus  = "OK";
                $strMsj     = "Se ha reactivado el servicio de manera correcta";
            }
            else
            {
                throw new \Exception("No se ha encontrado el objeto servicio o el objeto accion");
            }
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMsj     = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->rollback();
                $emComercial->close();
            }
            
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->reconectarServiciosPortalNetlifeCamAction',
                                      $e->getMessage(),
                                      $strUsrCreacion,
                                      $strClientIp);
        }

        $arrayRespuesta = array("strStatus" => $strStatus,
                                "strMsj"    => $strMsj      );
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * 
     * Metodo encargado de devolver informacion referente al grupo de solucion de Hosting, la info es relacionada a:
     *  - Maquinas Virtuales
     *  - Informacion de Vcenter, cluster y datastore
     *  - Sistemas Operativos
     *  - Recursos disponibles de storage , memoria y procesamiento
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 21-11-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 08-03-2018 - Se realiza cambio para que para datos de recursos GENERALES, se obtengan los valores de los recursos 
     *                           contratados de otro metodo
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.2 - 09-04-2019   Se agrega validación para que obtengan los valores de los recursos TIPO LICENCIAMIENTO SERVICE
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.3 02-05-2019 - Se agrega validación con $strEsCombo para verificar si el método es llamado desde un combo  
     *                            para que devuelva ła información de factibilidad asignada a cada máquina virtual.
     *                          - Se agrega validación con parámetro $strInfoCompleta para enviar información más detallada de la
     *                            licencia
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.4 12-07-2020   Manteniendo la lógica anterior se adapta el código a las nuevas estructura de soluciones DC.
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetInformacionGeneralHostingAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $intIdServicio          = $objRequest->get('idServicio');
        $strTipo                = $objRequest->get('tipoInformacion');
        $strCiudad              = $objRequest->get('ciudad')?$objRequest->get('ciudad'):'';
        $strDato                = $objRequest->get('query')?$objRequest->get('query'):'';
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComecial             = $this->get('doctrine')->getManager('telconet');
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');
        $arrayRespuesta         = array();
        $arrayDetalleRecursos   = array();
        $objServicio            = $emComecial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
        $strEsCombo             = $objRequest->get('esCombo');
        $strInfoCompleta        = $objRequest->get('esInicial');
        $intContadorLic         = 0;
        $arrayParametros                  = array();
        $arrayParametros['intIdServicio'] = intval($intIdServicio);
        $serviceRestClient         = $this->get('schema.RestClient');
        if($strTipo == 'GENERAL')
        {
            //Obtencion de recursos de configuracion de MVs
            $arrayRespuesta = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                ->getArrayInformacionGeneralHosting($arrayParametros);
            
            //Obtencion de pool de recursos contratados
            $arrayParametros['strTipoRecurso'] = 'DISCO';
            $arrayRecursos = $emComecial->getRepository("schemaBundle:InfoServicio")->getArrayRecursosPoolPorTipo($arrayParametros);
            
            if(!empty($arrayRecursos))
            {
                $arrayRespuesta[0]['storage'] = $arrayRecursos['totalRecurso'];
            }
            
            //Obtener el array de detalles de recursos contratados     
            $arrayParametros['strTipoRecurso']          = 'DISCO';
            $arrayDetalleRecursos['arrayDetalleDisco']  = $emComecial->getRepository("schemaBundle:InfoServicio")
                                                                     ->getArrayCaracteristicasPorTipoYServicio($arrayParametros);
            
            //Obtencion de pool de recursos contratados
            $arrayParametros['strTipoRecurso'] = 'TIPO LICENCIAMIENTO SERVICE';
            $arrayRecursos = $emComecial->getRepository("schemaBundle:InfoServicio")->getArrayRecursosPoolPorTipo($arrayParametros);
            
            if(!empty($arrayRecursos))
            {
                $arrayRespuesta[0]['TIPO LICENCIAMIENTO SERVICE'] = $arrayRecursos['totalRecurso'];
            }
            
            //Obtener el array de detalles de recursos contratados     
            $arrayParametros['strTipoRecurso']              = 'TIPO LICENCIAMIENTO SERVICE';
            $arrayDetalleRecursos['arrayDetalleLicencia']   = $emComecial->getRepository("schemaBundle:InfoServicio")
                                                                     ->getArrayCaracteristicasPorTipoYServicio($arrayParametros);
            
            $arrayParametros['strTipoRecurso'] = 'MEMORIA RAM';
            $arrayRecursos = $emComecial->getRepository("schemaBundle:InfoServicio")->getArrayRecursosPoolPorTipo($arrayParametros);
            
            if(!empty($arrayRecursos))
            {
                $arrayRespuesta[0]['memoria'] = $arrayRecursos['totalRecurso'];
            }
            
            $arrayParametros['strTipoRecurso']            = 'MEMORIA RAM';
            $arrayDetalleRecursos['arrayDetalleMemoria']  = $emComecial->getRepository("schemaBundle:InfoServicio")
                                                                       ->getArrayCaracteristicasPorTipoYServicio($arrayParametros);
            
            $arrayParametros['strTipoRecurso'] = 'PROCESADOR';
            $arrayRecursos = $emComecial->getRepository("schemaBundle:InfoServicio")->getArrayRecursosPoolPorTipo($arrayParametros);
            
            if(!empty($arrayRecursos))
            {
                $arrayRespuesta[0]['procesador'] = $arrayRecursos['totalRecurso'];
            }
            
            $arrayParametros['strTipoRecurso']               = 'PROCESADOR';
            $arrayDetalleRecursos['arrayDetalleProcesador']  = $emComecial->getRepository("schemaBundle:InfoServicio")
                                                                          ->getArrayCaracteristicasPorTipoYServicio($arrayParametros);
            
            $arrayRespuesta[0]['arrayDetalleRecursos'] = $arrayDetalleRecursos;
        }
        else if($strTipo == 'MAQUINAS-VIRTUALES')        
        {
            //Informacion basica
            $arrayRespuestaMv = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                ->getArrayMaquinasVirtuales($arrayParametros);
            
            $intCont = 0;
            foreach($arrayRespuestaMv as $array)
            {                
                $intIdElemento  =  $array['idElemento'];

                $arrayRecursos = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                ->getArrayDetalleMV(array('elementoId'    =>  $intIdElemento));

                //Preguntamos por $strEsCombo= 'S' para responder con información de factibilidad.
                //$strEsCombo= 'S' cuando se la llama desde factibilidad hosting.
                if ($strEsCombo === 'S')
                {   
                    $arrayRespuesta[$intCont] =$array;
                    $arrayRespuesta[$intCont]['arrayDetalleDisco']      = $arrayRecursos[0]['arrayDetalleDisco'];
                    $arrayRespuesta[$intCont]['arrayDetalleMemoria']    = $arrayRecursos[0]['arrayDetalleMemoria'];
                    $arrayRespuesta[$intCont]['arrayDetalleProcesador'] = $arrayRecursos[0]['arrayDetalleProcesador'];
                    $arrayRespuesta[$intCont]['arrayDetalleLicencia']   = $arrayRecursos[0]['arrayDetalleLicencia'];
                }
                else
                {
                    $arrayRespuesta[$intCont] = $arrayRecursos[0];
                    $arrayRespuesta[$intCont]['arrayInfoGeneral'] =$array;
                }
                $intCont ++;
            }            
        }
        else if($strTipo == 'SISTEMA-OPERATIVO')
        {
             //Obtener el array de detalles de recursos contratados     
            $arrayParametros['strTipoRecurso']              = 'TIPO LICENCIAMIENTO SERVICE';
            $arrayDetalleRecursos = $emComecial->getRepository("schemaBundle:InfoServicio")
                                               ->getArrayCaracteristicasPorTipoYServicio($arrayParametros);
            foreach($arrayDetalleRecursos as $arrayLicencia)
            {
                if(empty($strInfoCompleta))
                {
                    $intContadorLic ++;
                     $arrayRespuesta[] = array('idServicio'     => $arrayLicencia['idRecurso'],
                                                'idRecurso'     => $arrayLicencia['idRecurso'],
                                                'nombreRecurso' =>  '<b>'.$intContadorLic.'</b> '.$arrayLicencia['nombreRecurso'],
                                                'descripcion'   => $arrayLicencia['nombreRecurso'],
                                                'valor'         => $arrayLicencia['valor']);
                }
            }

            if(!empty($strInfoCompleta))
            {
                $arrayIdServicio[] = $arrayParametros['intIdServicio'];
                $arrayRespuesta    = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                        ->getArrayLicenciaSolucion($arrayIdServicio);
            }
        } 
        else//DATASTORE-ALQUILER
        {
            $arrayParametros              = array();
            $arrayParametros['strCanton'] = strtoupper($strCiudad);
            $arrayParametros['strNombre'] = $strDato;
            $arrayDs = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->getArrayDatastoreServidoresAlquiler($arrayParametros);
            
            foreach($arrayDs as $objElemento)
            {
                $arrayRespuesta[] = array('idElemento'    =>   $objElemento->getId(),
                                          'nombreElemento'=>   $objElemento->getNombreElemento());
            }
        }
        
        
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    
    /*
     * Metodo encargado de traer el nombre de la solucion que agrupa servicios en caso de existir, caso contrario devuelve vacío
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.0 08-05-2019 
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetInformacionSolucionAction()
    {
        $objJsonResponse        = new JsonResponse();
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");

                $arrayParametro = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PROD_DISCO','COMERCIAL','','PROD_DISCO',
                                                       '','','','','',''); 
                foreach($arrayParametro as $array)
                {
                    $arrayRespuesta[] = array('idElemento'     => $array['valor1'],
                                              'nombreElemento' => $array['valor1']);
                }
                $arrayParametro = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PROD_MEMORIA RAM','COMERCIAL','','PROD_MEMORIA RAM',
                                                       '','','','','','');
                foreach($arrayParametro as $array)
                {
                    $arrayRespuesta[] = array('idElemento'     => $array['valor1'],
                                              'nombreElemento' => $array['valor1']);
                }
                $arrayParametro = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PROD_PROCESADOR','COMERCIAL','','PROD_PROCESADOR',
                                                       '','','','','','');
                foreach($arrayParametro as $array)
                {
                    $arrayRespuesta[] = array('idElemento'     => $array['valor1'],
                                              'nombreElemento' => $array['valor1']);
                }
                $arrayParametro = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PROD_TIPO LICENCIAMIENTO SERVICE','COMERCIAL','','PROD_TIPO LICENCIAMIENTO SERVICE',
                                                       '','','','','','');
                foreach($arrayParametro as $array)
                {
                    $arrayRespuesta[] = array('idElemento'     => $array['valor1'],
                                              'nombreElemento' => $array['valor1']);
                }
        
            
                $objJsonResponse->setData($arrayRespuesta);
                return $objJsonResponse;
    }
    
    /*
     * Función que crea tarea al vendedor de un punto y agrega información de la solución en caso de existir
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.0 08-05-2019 
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxCrearTareaAComercialAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $intIdServicio          = $objRequest->get('idServicio');
        $strObservacion         = $objRequest->get('observacion');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $objSession             = $objRequest->getSession();
        $objSoporteService      = $this->get('soporte.SoporteService');
        $servicioGeneral        = $this->get('tecnico.InfoServicioTecnico');
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $serviceSysCloud        = $this->get('soporte.SysCloudService');
        $arrayRespuesta         = array();
        $strNombreParametro     = 'TAREA A COMERCIAL';
        $arrayParametrosSolucion                  = array();
                
        if(!empty($intIdServicio))
        {
            $objServicio            = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
            if(is_object($objServicio))
            {
                $objPunto           = $emComercial->getRepository("schemaBundle:InfoPunto")->find($objServicio->getPuntoId());
                $arrayParamTarea    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('TAREA SOLICITUD DE RECURSOS DC',
                                                     'SOPORTE',
                                                     '',
                                                     $strNombreParametro,
                                                     '','','','','',
                                                     $objSession->get('idEmpresa'),
                                                     null
                                                     ); 
                $arrayPersonaEmpresaRol =    $serviceSysCloud->getInfoDatosPersona
                                            (
                                                array ('strRol'                     => 'Empleado',
                                                       'strPrefijo'                 => $objSession->get('prefijoEmpresa'),
                                                       'strLogin'                   => $objPunto->getUsrVendedor(),
                                                        'strEstadoPersonaEmpresaRol'=> 'Activo'
                                                       )
                                            );
                $arrayParametrosSolucion['objServicio']   = $objServicio;
                $arrayParametrosSolucion['strCodEmpresa'] = $objSession->get('idEmpresa');
                $strSolucion                              = $servicioGeneral->getNombreGrupoSolucionServicios($arrayParametrosSolucion);
        
                if(!empty($arrayPersonaEmpresaRol))
                {
                    $arrayParametrosTarea                              = array();
                    $arrayParametrosTarea['intIdPersonaEmpresaRol']    = $arrayPersonaEmpresaRol['result'][0]['idPersonaEmpresaRol'];
                    $arrayParametrosTarea['intIdEmpresa']              = $objSession->get('idEmpresa');
                    $arrayParametrosTarea['strPrefijoEmpresa']         = $objSession->get('prefijoEmpresa');
                    $arrayParametrosTarea['strNombreTarea']            = $arrayParamTarea['valor2'];
                    $arrayParametrosTarea['strNombreProceso']          = $arrayParamTarea['valor1'];
                    $arrayParametrosTarea['strUserCreacion']           = $objSession->get('user');
                    $arrayParametrosTarea['strIpCreacion']             = $objRequest->getClientIp();
                    $arrayParametrosTarea['intFormaContacto']          = 5;
                    $arrayParametrosTarea['strMotivoTarea']            = $strSolucion.'<br>'.$strObservacion;
                    $arrayParametrosTarea['intPuntoId']                = $objPunto->getId();
                    $arrayParametrosTarea['strObservacionTarea']       = $strSolucion.'<br>'.$strObservacion;
                    $arrayParametrosTarea['boolAsignarTarea']          = true;
                    $arrayParametrosTarea['strTipoTarea']              = 'T';
                    $arrayParametrosTarea['strUsuarioAsigna']          = $objSession->get('user');
                    $arrayParametrosTarea['strTipoAsignacion']         = 'empleado';

                    $arrayRespuesta=$objSoporteService->crearTareaCasoSoporte($arrayParametrosTarea);
                }
            }
        }        
        $objJsonResponse->setData($arrayRespuesta);     
        return $objJsonResponse;
           
    }
    
    /**
     * 
     * Metodo encargado de guardar las nuevas maquinas vrituales requeridas por el usuario
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 22-11-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 01-06-2018 - Se registra los valores asignados por tipo de recurso ( redistribucion de los mismos )
     * 
     * @author José Alava <jialava@telconet.ec>
     * @version 1.2 05-06-2019 - Se cambia lógica de creación de MVS a un Service
     *
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.3 22-07-2020 - Se modifica el método para no enviar el request al service de crear maquinas virtuales.
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGuardarMaquinasVirtualesAction()
    {
        $objJsonResponse  = new JsonResponse();
        $objRequest       = $this->get('request');
        $objSession       = $objRequest->getSession();
        $serviceElemento  = $this->get('tecnico.InfoElemento');

        //LLamada al service que crea maquinas virtuales.
        $arrayParametros                   = array();
        $arrayParametros['strUsrCreacion'] = $objSession->get('user');
        $arrayParametros['intIdEmpresa']   = $objSession->get('idEmpresa');
        $arrayParametros['strIpCreacion']  = $objRequest->getClientIp();
        $arrayParametros['strJson']        = $objRequest->get('data');
        $arrayParametros['intIdServicio']  = $objRequest->get('idServicio');
        $arrayRespuesta = $serviceElemento->guardarMaquinasVirtuales($arrayParametros);

        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    /**
     * 
     * Metodo encargado de actualizar o eliminar una maquina virtual segun el tip de accion enviado por el usuario
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 22-11-2017
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.1 17-05-2019   Se agrega validación para eliminar las características de un servicio relacionadas a la MV
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.2 12-07-2020   Manteniendo la lógica anterior se adapta el código a las nuevas estructura de soluciones DC.
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxActualizarMaquinaVirtualAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $strTipoAccion          = $objRequest->get('tipoAccion');
        $intIdElemento          = $objRequest->get('idElemento');
        $intIdServicio          = $objRequest->get('idServicio');
        $strData                = $objRequest->get('data');
        $strDataAnterior        = $objRequest->get('dataAnterior');
        $strDataEliminados      = $objRequest->get('dataEliminados');
        $serviceUtil            = $this->get('schema.Util');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');
        $serviceElemento        = $this->get('tecnico.InfoElemento');
        $boolContinua           = false;
        $strStatus              = 'OK';
        $strNombreAnterior      = '';
        $boolExisteActualizacion= false;
        
        $emInfraestructura->getConnection()->beginTransaction();
        $emComercial->getConnection()->beginTransaction();
        
        try
        {
            $objElemento = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->find($intIdElemento);            
            
            if(is_object($objElemento))
            {
                $strNombreAnterior = $objElemento->getNombreElemento();
                
                if($strTipoAccion == 'editar')
                {
                    $objJson            = json_decode($strData);
                    $objJsonAnterior    = json_decode($strDataAnterior);
                    $objDataEliminados  = json_decode($strDataEliminados);
                    $strObservacion  = 'Se actualizó la siguiente Máquina Virtual (<b>'.$objJson->nombre.'</b>) <br><table id="table-resumen">';
                    
                    if($objJson->nombre != $objJsonAnterior->nombre)
                    {
                        $boolExisteActualizacion = true;
                        $objElemento->setNombreElemento($objJson->nombre);
                        $emInfraestructura->persist($objElemento);
                        $emInfraestructura->flush();
                        
                        $strObservacion .= '<tr><td><b>Nombre Anterior:</b></td>'
                                             . '<td class="td-info-resumen">&nbsp;'.$objJsonAnterior->nombre.'</td></tr>'
                                             . '<tr><td><b>Nombre Actual:</b></td>'
                                             . '<td class="info-actual td-info-resumen">&nbsp;'.$objJson->nombre.'</td></tr>';
                    }

                    if($objJson->so != $objJsonAnterior->so)
                    {
                        $objDetalleElemento = $emInfraestructura->getRepository("schemaBundle:InfoDetalleElemento")
                                                            ->findOneBy(array('elementoId'    =>  $intIdElemento,
                                                                              'estado'        =>  'Activo',
                                                                              'detalleNombre' =>  'SISTEMA_OPERATIVO'));
                        if(is_object($objDetalleElemento))
                        {
                            $boolExisteActualizacion = true;
                            $objDetalleElemento->setDetalleValor($objJson->so);
                            $emInfraestructura->persist($objDetalleElemento);
                            $emInfraestructura->flush();
                            
                            $objServicioSOAnterior = $emComercial->getRepository("schemaBundle:InfoServicio")->find($objJsonAnterior->so);
                            $objServicioSONuevo    = $emComercial->getRepository("schemaBundle:InfoServicio")->find($objJson->so);
                            
                            $strSOAnterior         = 'N/A';
                            $strSONuevo            = 'N/A';
                            
                            if(is_object($objServicioSOAnterior))
                            {
                                $objTipoLicencia = $serviceTecnico->getServicioProductoCaracteristica($objServicioSOAnterior,
                                                                                                      'TIPO LICENCIAMIENTO SERVICE',
                                                                                                      $objServicioSOAnterior->getProductoId());
                                if(is_object($objTipoLicencia))
                                {
                                    $strSOAnterior = $objTipoLicencia->getValor();
                                }
                            }
                            
                            if(is_object($objServicioSONuevo))
                            {
                                $objTipoLicencia = $serviceTecnico->getServicioProductoCaracteristica($objServicioSONuevo,
                                                                                                      'TIPO LICENCIAMIENTO SERVICE',
                                                                                                      $objServicioSONuevo->getProductoId());
                                if(is_object($objTipoLicencia))
                                {
                                    $strSONuevo = $objTipoLicencia->getValor();
                                }
                            }
                            
                                                        
                            $strObservacion .= '<tr><td><b>S.O. Anterior:</b></td>'
                                                 . '<td class="td-info-resumen">&nbsp;'.$strSOAnterior.'</td></tr>'
                                                 . '<tr><td><b>S.O. Actual:</b></td>'
                                                 . '<td class="info-actual td-info-resumen">&nbsp;'.$strSONuevo.'</td></tr>';
                        }
                    }
                    
                    if($objJson->carpeta != $objJsonAnterior->carpeta)
                    {
                        $objDetalleElemento = $emInfraestructura->getRepository("schemaBundle:InfoDetalleElemento")
                                                            ->findOneBy(array('elementoId'    =>  $intIdElemento,
                                                                              'estado'        =>  'Activo',
                                                                              'detalleNombre' =>  'CARPETA'));
                        if(is_object($objDetalleElemento))
                        {
                            $boolExisteActualizacion = true;
                            $objDetalleElemento->setDetalleValor($objJson->carpeta);
                            $emInfraestructura->persist($objDetalleElemento);
                            $emInfraestructura->flush();
                            
                            $strObservacion .= '<tr><td><b>Carpeta Anterior:</b></td>'
                                                 . '<td class="td-info-resumen">&nbsp;'.$objJsonAnterior->carpeta.'</td></tr>'
                                                 . '<tr><td><b>Carpeta Actual:</b></td>'
                                                 . '<td class="info-actual td-info-resumen">&nbsp;'.$objJson->carpeta.'</td></tr>';
                        }
                    }
                    if(count($objDataEliminados) > 0)
                    {
                        foreach($objDataEliminados as $idRecurso)
                            {
                                //Característica de las licencias
                                $objServicioRecursoDet = $emComercial->getRepository("schemaBundle:InfoServicioRecursoDet")
                                                                     ->findOneBy(array('elementoId'          =>  $intIdElemento,
                                                                                       'servicioRecursoCabId'  =>  $idRecurso,
                                                                                       'estado'              => 'Activo'
                                                                                ));

                                if(is_object($objServicioRecursoDet))
                                {
                                    $objServicioRecursoDet->setEstado('Eliminado');
                                    $emComercial->persist($objServicioRecursoDet);
                                    $emComercial->flush();
                                }

                            }
                    }
                    if($objJson->tarjeta != $objJsonAnterior->tarjeta)
                    {
                        $objDetalleElemento = $emInfraestructura->getRepository("schemaBundle:InfoDetalleElemento")
                                                                ->findOneBy(array('elementoId'    =>  $intIdElemento,
                                                                                  'estado'        =>  'Activo',
                                                                                  'detalleNombre' =>  'TARJETA_RED'));
                        if(is_object($objDetalleElemento))
                        {
                            $boolExisteActualizacion = true;
                            $objDetalleElemento->setDetalleValor($objJson->tarjeta);
                            $emInfraestructura->persist($objDetalleElemento);
                            $emInfraestructura->flush();
                            
                            $strObservacion .= '<tr><td><b>Tarjeta Anterior:</b></td>'
                                                 . '<td class="td-info-resumen">&nbsp;'.$objJsonAnterior->tarjeta.'</td><tr>'
                                                 . '<tr><td><b>Tarjeta Actual:</b></td>'
                                                 . '<td class="info-actual td-info-resumen">&nbsp;'.$objJson->tarjeta.'</td></tr>';
                        }
                    }
                    
                    //Validar si cambiaron los recursos asignados a la maquina virtual
                    if(!empty($objJson->recursos))
                    {
                        //Obtener los recursos existentes para comparar cambios posibles realizados
                        $objRecursosExistentes   = $objJsonAnterior->arrayRecursos;
                        //Recursos editados/seleccionados por el usuario en la edicion
                        $arrayRecursosEditados   = json_decode($objJson->recursos);
                        
                        if(count($arrayRecursosEditados) > 0)
                        {
                            //Verificar registros nuevos
                            foreach($arrayRecursosEditados as $objJsonRecursosEditados)
                            {
                                switch($objJsonRecursosEditados->tipo)
                                {
                                    case 'DISCO':
                                        $arrayRecursos = $objRecursosExistentes->arrayDetalleDisco;
                                        break;

                                    case 'PROCESADOR':
                                        $arrayRecursos = $objRecursosExistentes->arrayDetalleProcesador;
                                        break;
                                    
                                    case 'SISTEMA_OPERATIVO':
                                        $arrayRecursos = $objRecursosExistentes->arrayDetalleLicencia;
                                        break;

                                    default:
                                        $arrayRecursos = $objRecursosExistentes->arrayDetalleMemoria;
                                        break;
                                }

                                //Recurso Nuevo
                                if($objJsonRecursosEditados->idDetalle == 0)
                                {
                                    $intValidador = 0;//Nuevo registro
                                }
                                else
                                {
                                    $intValidador = $serviceElemento->getValidadorRecursoExistenteMaquinaVirtual($arrayRecursos,
                                                                                                                 $objJsonRecursosEditados
                                                                                                                );
                                }

                                //Si el registro es el mismo pero tuvo cambios
                                if($intValidador != 2)
                                {
                                    $boolExisteActualizacion = true;

                                    //cambia de recurso
                                    if($intValidador == 1)
                                    {
                                        //Si no es nuevo se elimina el recurso cambiado para mantener la trazabilidad
                                        $objServicioRecursoDet = $emComercial->getRepository("schemaBundle:InfoServicioRecursoDet")
                                                                                ->findOneById($objJsonRecursosEditados->idDetalle);
                                        if(is_object($objServicioRecursoDet))
                                        {
                                            $objServicioRecursoDet->setEstado('Eliminado');
                                            $emComercial          ->persist($objServicioRecursoDet);
                                            $emComercial          ->flush();
                                        }

                                        $strObservacion .= '<tr><td><b>'.$objJsonRecursosEditados->tipo.' Anterior</b></td>'
                                                        . '<td class="td-info-resumen">&nbsp;'.
                                                          $arrayRecursos->usado.'</td><tr>'
                                                        . '<tr><td><b>'.$objJsonRecursosEditados->tipo.' Actual:</b></td>'
                                                        . '<td class="info-actual td-info-resumen">&nbsp;'.
                                                          $objJsonRecursosEditados->asignar.'</td></tr>';
                                    }
                                    else//es recurso nuevo ( 0 )
                                    {
                                        $strObservacion .= '<tr><td><b> Se agregó '.$objJsonRecursosEditados->tipo.' Nuevo</b></td>'
                                                            . '<td class="td-info-resumen">&nbsp;'.
                                                              $arrayRecursos->usado.'</td><tr>'
                                                            ;
                                    }

                                    $objServicioRecursoCab = $emComercial->getRepository("schemaBundle:InfoServicioRecursoCab")
                                                                         ->findOneById($objJsonRecursosEditados->idRecurso);
                                    $objInfoServicioRecursoDet = new InfoServicioRecursoDet();
                                    $objInfoServicioRecursoDet->setElementoId($intIdElemento);
                                    $objInfoServicioRecursoDet->setCantidad($objJsonRecursosEditados->asignar);
                                    $objInfoServicioRecursoDet->setServicioRecursoCabId($objServicioRecursoCab);
                                    $objInfoServicioRecursoDet->setEstado("Activo");
                                    $objInfoServicioRecursoDet->setUsrCreacion($objSession->get('user'));
                                    $objInfoServicioRecursoDet->setIpCreacion($objRequest->getClientIp());
                                    $objInfoServicioRecursoDet->setFecCreacion(new \DateTime('now'));
                                    $emComercial->persist($objInfoServicioRecursoDet);
                                    $emComercial->flush();                              
                                }
                            }

                            //Verificar eliminación de recursos realizados en la edicion
                            $strObservacionEliminacion                        = '';
                            $arrayParametrosEliminacion                       = array();
                            $arrayParametrosEliminacion['arrayEditado']       = $arrayRecursosEditados;
                            $arrayParametrosEliminacion['arrayExistente']     = $objRecursosExistentes->arrayDetalleDisco;
                            $arrayParametrosEliminacion['strTipo']            = 'DISCO';
                            $strObservacionEliminacion .= $serviceElemento->validarEliminacionRecursosMaquinaVirtual($arrayParametrosEliminacion);
                            $arrayParametrosEliminacion['arrayExistente']     = $objRecursosExistentes->arrayDetalleMemoria;
                            $arrayParametrosEliminacion['strTipo']            = 'MEMORIA RAM';
                            $strObservacionEliminacion .= $serviceElemento->validarEliminacionRecursosMaquinaVirtual($arrayParametrosEliminacion);
                            $arrayParametrosEliminacion['arrayExistente']     = $objRecursosExistentes->arrayDetalleProcesador;
                            $arrayParametrosEliminacion['strTipo']            = 'PROCESADOR';
                            $strObservacionEliminacion .= $serviceElemento->validarEliminacionRecursosMaquinaVirtual($arrayParametrosEliminacion);
                            $arrayParametrosEliminacion['arrayExistente']     = $objRecursosExistentes->arrayDetalleLicencia;
                            $arrayParametrosEliminacion['strTipo']            = 'SISTEMA_OPERATIVO';
                            $strObservacionEliminacion .= $serviceElemento->validarEliminacionRecursosMaquinaVirtual($arrayParametrosEliminacion);

                            if(!empty($strObservacionEliminacion))
                            {
                                $strObservacion         .= $strObservacionEliminacion;
                                $boolExisteActualizacion = true;
                            }
                        }
                    }
                    
                    if($boolExisteActualizacion)
                    {
                        $strMensajeRespuesta = 'Máquina Virtual fue actualizada correctamente';
                        $strObservacion     .= '</table>';
                        $boolContinua        = true;
                    }
                    else
                    {
                        $strMensajeRespuesta = 'No existieron cambios sobre la máquina virtual : '.$strNombreAnterior;
                        $strObservacion      = '';
                    }
                }
                else//eliminar
                {
                    $arrayEliminarMV                   =  array();
                    $arrayEliminarMV['habilitaCommit'] =  true;
                    $arrayEliminarMV['estado']         =  "Eliminado";
                    $arrayEliminarMV['usrUltMod']      =  $objSession->get('user');
                    $arrayEliminarMV['ipUltMod']       =  $objRequest->getClientIp();
                    $arrayEliminarMV['elementoId']     =  intval($intIdElemento);
                    $arrayEliminarMV['nombreElemento'] =  $objElemento->getNombreElemento();
                    
                    $arrayRespuestaMV = $emInfraestructura->getRepository("schemaBundle:InfoServicioRecursoDet")
                                                          ->eliminarMV($arrayEliminarMV);
                    if ($arrayRespuestaMV['status']=='ERROR')
                    {
                        throw new \Exception($arrayRespuestaMV['mensaje']);
                    }
                    
                    $boolContinua        = true;
                    $strObservacion      = 'Se eliminó la máquina virtual : <b>'.$strNombreAnterior.'</b>';
                    $strMensajeRespuesta = 'Máquina Virtual fue eliminada correctamente';
                }
            }
            else
            {
                $strMensajeRespuesta = 'No se puedo encontrar el elemento Máquina Virtual, por favor notificar a Sistemas';
                $strStatus           = 'ERROR';
            }
            
            if($boolContinua)
            {
                $objServicio           = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setObservacion($strObservacion);
                    $objServicioHistorial->setEstado($objServicio->getEstado());
                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                    $objServicioHistorial->setAccion("");
                    $emComercial->persist($objServicioHistorial);
                    $emComercial->flush();
                    
                    $emComercial->commit();

                $emInfraestructura->commit();
            }
        } 
        catch (\Exception $ex) 
        {
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
            
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            
            $emInfraestructura->getConnection()->close();
            $emComercial->getConnection()->close();
            
            $strMensajeRespuesta = "Error al Actualizar/Eliminar la Máquina Virtual, notificar a Sistemas";
            
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.ajaxActualizarMaquinaVirtualAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objRequest->getClientIp()
                                     );
            $strStatus = 'ERROR';
        }
        
        $objJsonResponse->setData(array('strStatus' => $strStatus, 'strMensaje' => $strMensajeRespuesta));
        return $objJsonResponse;
    }        
    
    /**
     * Funcion que cambia el estado a Cancel al servicio Netlifecam ó Storage dependiendo del nombre técnico
     * 
     * @author Creado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 04-07-2017
     * @since 1.0
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 09-08-2017 -  En la tabla INFO_DETALLE_HISTORIAL se registra el id_persona_empresa_rol del responsable de la tarea
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 14-09-2017 - Se realizan ajustes para definir que el estado inicial de una tarea sea 'Asignada'
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 21-12-2017 - En la tabla INFO_DETALLE_ASIGNACION se registra el campo tipo asignado 'EMPLEADO'
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 01-03-2018 Se registra tracking del elemento
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.5 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     */
    public function cancelarServicioNetlifeCamStorageAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $intIdDepartamento      = $objSession->get('idDepartamento');
        $intIdServicio          = $objRequest->get('idServicio');
        $intIdAccion            = $objRequest->get('idAccion');
        $strNombreTecnico       = $objRequest->get('nombreTecnico');
        $intIdPersonaEmpRol     = $objSession->get('idPersonaEmpresaRol');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emSeguridad            = $this->get('doctrine')->getManager('telconet_seguridad');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $emSoporte              = $this->get('doctrine')->getManager('telconet_soporte');
        $serviceUtil            = $this->get('schema.Util');
        $intEmpresa             = $objSession->get('idEmpresa');
        $serviceSoporte         = $this->get('soporte.SoporteService');
        $serviceInfoElemento    = $this->get('tecnico.InfoElemento');
        $arrayParametrosHist    = array();
        $arrayParametrosAuditoria = array();

        $arrayParametrosHist["strCodEmpresa"]           = $objSession->get('idEmpresa');
        $arrayParametrosHist["strUsrCreacion"]          = $objSession->get('user');
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strIpCreacion"]           = $objRequest->getClientIp();   
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;

        $booleanTieneProStorage = false;
        $booleanEstaRelacionado = false;
        $strMensajeRespuesta    = "";
        $strAfectadoNombre      = "";
        $intPuntoId             = "";
        $strPuntoLogin          = "";
        $intIdCriterioAfectado  = 1;
        
        $emGeneral->getConnection()->beginTransaction();
        $emSoporte->getConnection()->beginTransaction();
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $arrayProdStorage = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                            ->findBy(array("nombreTecnico" => "24 HRS GR EXTRA","empresaCod" => $intEmpresa));
            
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            $objProductoServicio = $objServicio->getProductoId();
            $objPlanServicio     = $objServicio->getPlanId();
            //servicio
            $objServicio->setEstado("Cancel");
            $emComercial->persist($objServicio);
            $emComercial->flush();
            //historial del servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            if (is_object($objProductoServicio))
            {
                $objServicioHistorial->setObservacion($objProductoServicio->getDescripcionProducto().": Se cancelo el servicio");
            }
            else
            {
                $objServicioHistorial->setObservacion($objPlanServicio->getNombrePlan().": Se cancelo el servicio");
            }
            $objServicioHistorial->setEstado("Cancel");
            $objServicioHistorial->setUsrCreacion($objSession->get('user'));
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
            $objServicioHistorial->setAccion ($objAccion->getNombreAccion());
            $emComercial->persist($objServicioHistorial);
            $emComercial->flush();
            
            if ($strNombreTecnico == "CAMARA IP")
            {
                $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                  ->findOneBy(array( "servicioId" => $objServicio->getId()));
                if (!is_object($objServicioTecnico))
                {
                    throw new \Exception("No se encontro información técnica del servicio");
                }

                $objElementoNetlifecam = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                          ->find($objServicioTecnico->getElementoClienteId());
                if (!is_object($objElementoNetlifecam))
                {
                    throw new \Exception("No se encontro información del equipo asignado al servicio");
                }
                
                /*
                 * Bloque que busca los detalle del elemento Caja y les actualiza el estado a 'Activo'
                 */
                $arrayInfoDetallesElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                               ->findByElementoId($objElementoNetlifecam->getId());
                foreach($arrayInfoDetallesElemento as $objInfoDetalleElemento)
                {
                    $objInfoDetalleElemento->setEstado('Eliminado');
                    $emInfraestructura->persist($objInfoDetalleElemento);
                    $emInfraestructura->flush();
                }

                //se eliminan elementos del servicio
                $objElementoNetlifecam->setEstado("Eliminado");
                $emInfraestructura->persist($objElementoNetlifecam);
                $emInfraestructura->flush();

                //SE REGISTRA EL TRACKING DEL ELEMENTO
                $arrayParametrosAuditoria["strNumeroSerie"]  = $objServicioTecnico->getSerieFisica();
                $arrayParametrosAuditoria["strEstadoTelcos"] = 'Eliminado';
                $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
                $arrayParametrosAuditoria["strEstadoActivo"] = 'Cancelado';
                $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
                $arrayParametrosAuditoria["strCodEmpresa"]   = $objSession->get('idEmpresa');
                $arrayParametrosAuditoria["strTransaccion"]  = 'Cancelacion Servicio';
                $arrayParametrosAuditoria["intOficinaId"]    = 0;

                //Se consulta el login del cliente
                if(is_object($objServicioTecnico->getServicioId()))
                {
                    $objInfoPunto =  $emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                                       ->find($objServicioTecnico->getServicioId()->getPuntoId()->getId());
                    if(is_object($objInfoPunto))
                    {
                        $arrayParametrosAuditoria["strLogin"] = $objInfoPunto->getLogin();
                    }
                }

                $arrayParametrosAuditoria["strUsrCreacion"] = $objSession->get('user');

                 $serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
                ////

                //historial del elemento
                $objHistorialElemento = new InfoHistorialElemento();
                $objHistorialElemento->setElementoId($objElementoNetlifecam);
                $objHistorialElemento->setObservacion("Se elimino el elemento por cancelacion de Servicio");
                $objHistorialElemento->setEstadoElemento("Eliminado");
                $objHistorialElemento->setUsrCreacion($objSession->get('user'));
                $objHistorialElemento->setFeCreacion(new \DateTime('now'));
                $objHistorialElemento->setIpCreacion($objRequest->getClientIp());
                $emInfraestructura->persist($objHistorialElemento);
                $emInfraestructura->flush();

                //se agrega codigo para generación de solicitud de retiro de equipo y tarea en cancelaciones de servicios Netlifecam
                //crear solicitud para retiro de equipo (ont y wifi)
                $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO", 
                                                                  "estado"               => "Activo"));
                $objDetalleSolicitud = new InfoDetalleSolicitud();
                $objDetalleSolicitud->setServicioId($objServicio);
                $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                $objDetalleSolicitud->setEstado("AsignadoTarea");
                $objDetalleSolicitud->setUsrCreacion($objSession->get('user'));
                $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                $objDetalleSolicitud->setObservacion("SOLICITA RETIRO DE EQUIPO POR CANCELACION DEL SERVICIO");
                $emComercial->persist($objDetalleSolicitud);
                $emComercial->flush();
                $objAdmiCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                     ->findOneBy(array('descripcionCaracteristica' => 'ELEMENTO CLIENTE',
                                                                       'estado'                    => 'Activo'));
                if (!is_object($objAdmiCaracteristica))
                {
                    throw new \Exception("No se encontro información acerca de caracteristica ELEMENTO CLIENTE");
                }

                //valor del ont
                $objDetalleSolCaract= new InfoDetalleSolCaract();
                $objDetalleSolCaract->setCaracteristicaId($objAdmiCaracteristica);
                $objDetalleSolCaract->setDetalleSolicitudId($objDetalleSolicitud);
                $objDetalleSolCaract->setValor($objElementoNetlifecam->getId());
                $objDetalleSolCaract->setEstado("AsignadoTarea");
                $objDetalleSolCaract->setUsrCreacion($objSession->get('user'));
                $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                $emComercial->persist($objDetalleSolCaract);
                $emComercial->flush();

                //obtener tarea
                $objProceso   = $emSoporte->getRepository('schemaBundle:AdmiProceso')
                                          ->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");
                if (!is_object($objProceso))
                {
                    throw new \Exception("No se encontro información acerca del proceso SOLICITAR RETIRO EQUIPO");
                }
                $arrayTareas  = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                          ->findTareasActivasByProceso($objProceso->getId());
                $objTarea     = $arrayTareas[0];

                //grabar nuevo info_detalle para la solicitud de retiro de equipo
                $objDetalle = new InfoDetalle();
                $objDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
                $objDetalle->setTareaId($objTarea);
                $objDetalle->setLongitud($objServicio->getPuntoId()->getLongitud());
                $objDetalle->setLatitud($objServicio->getPuntoId()->getLatitud());
                $objDetalle->setPesoPresupuestado(0);
                $objDetalle->setValorPresupuestado(0);
                $objDetalle->setIpCreacion($objRequest->getClientIp());
                $objDetalle->setFeCreacion(new \DateTime('now'));
                $objDetalle->setUsrCreacion($objSession->get('user'));
                $objDetalle->setFeSolicitada(new \DateTime('now'));
                $emSoporte->persist($objDetalle);
                $emSoporte->flush();           

                //obtenemos el persona empresa rol del usuario
                $objPersonaEmpresaRolUsr = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                       ->find($intIdPersonaEmpRol);

                if (!is_object($objPersonaEmpresaRolUsr))
                {
                    throw new \Exception("No se encontro información acerca del rol del cliente en sesion");
                }

                //buscamos datos del dept, persona
                $objDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($objPersonaEmpresaRolUsr->getDepartamentoId());

                if (!is_object($objDepartamento))
                {
                    throw new \Exception("No se encontro información acerca del departamento del usuario en sesión");
                }

                $objPersona = $objPersonaEmpresaRolUsr->getPersonaId();

                if (!is_object($objPersona))
                {
                    throw new \Exception("No se encontro información acerca de la persona en sesión");
                }

                //grabamos soporte.info_detalle_asignacion
                $objDetalleAsignacion = new InfoDetalleAsignacion();
                $objDetalleAsignacion->setDetalleId($objDetalle);
                $objDetalleAsignacion->setAsignadoId($objDepartamento->getId());
                $objDetalleAsignacion->setAsignadoNombre($objDepartamento->getNombreDepartamento());
                $objDetalleAsignacion->setRefAsignadoId($objPersona->getId());

                if($objPersona->getRazonSocial()=="")
                {
                    $strNombreAsignado = $objPersona->getNombres()." ".$objPersona->getApellidos();
                }
                else
                {
                    $strNombreAsignado = $objPersona->getRazonSocial();
                }
                $objDetalleAsignacion->setRefAsignadoNombre($strNombreAsignado);
                $objDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRolUsr->getId());
                $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
                $objDetalleAsignacion->setUsrCreacion($objSession->get('user'));
                $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                $objDetalleAsignacion->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objDetalleAsignacion);
                $emSoporte->flush();
                                
                //Se ingresa el historial de la tarea
                if(is_object($objDetalle))
                {
                    $arrayParametrosHist["intDetalleId"] = $objDetalle->getId();            
                }

                $arrayParametrosHist["strObservacion"]  = "Tarea Asignada";                
                $arrayParametrosHist["strEstadoActual"] = "Asignada";
                $arrayParametrosHist["strAccion"]       = "Asignada";

                $serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);                  

                $objPunto = $objServicio->getPuntoId();
                if (!is_object($objPunto))
                {
                    throw new \Exception("No se encontro información acerca del punto del servicio");
                }

                $strAfectadoNombre = $objPunto->getNombrePunto();
                $intPuntoId        = $objPunto->getId();
                $strPuntoLogin     = $objPunto->getLogin();

                // se graba en la DB_SOPORTE.INFO_CRITERIO_AFECTADO
                $objCriterio = new InfoCriterioAfectado();
                $objCriterio->setId($intIdCriterioAfectado);
                $objCriterio->setDetalleId($objDetalle);
                $objCriterio->setCriterio("Clientes");
                $objCriterio->setOpcion("Cliente: " . $strAfectadoNombre . " | OPCION: Punto Cliente");
                $objCriterio->setFeCreacion(new \DateTime('now'));
                $objCriterio->setUsrCreacion($objSession->get('user'));
                $objCriterio->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objCriterio);
                $emSoporte->flush();

                // se graba en la DB_SOPORTE.INFO_PARTE_AFECTADA
                $objAfectado = new InfoParteAfectada();
                $objAfectado->setTipoAfectado("Cliente");
                $objAfectado->setDetalleId($objDetalle->getId());
                $objAfectado->setCriterioAfectadoId($objCriterio->getId());
                $objAfectado->setAfectadoId($intPuntoId);
                $objAfectado->setFeIniIncidencia(new \DateTime('now'));
                $objAfectado->setAfectadoNombre($strPuntoLogin);
                $objAfectado->setAfectadoDescripcion($strAfectadoNombre);
                $objAfectado->setFeCreacion(new \DateTime('now'));
                $objAfectado->setUsrCreacion($objSession->get('user'));
                $objAfectado->setIpCreacion($objRequest->getClientIp());
                $emSoporte->persist($objAfectado);
                $emSoporte->flush();

                //crear historial para la solicitud
                $objHistorialSolicitud = new InfoDetalleSolHist();
                $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
                $objHistorialSolicitud->setEstado("AsignadoTarea");
                $objHistorialSolicitud->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE EQUIPO POR CANCELACION DEL SERIVICIO");
                $objHistorialSolicitud->setUsrCreacion($objSession->get('user'));
                $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
                $objHistorialSolicitud->setIpCreacion($objRequest->getClientIp());
                $emComercial->persist($objHistorialSolicitud);
                $emComercial->flush();
                
                //Se cancelan los servicios adicionales de tipo storage relacionados al servicio Cámara a cancelar
                $arrayServiciosPunto = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(array( "puntoId" => $objPunto->getId()));
                foreach($arrayServiciosPunto as $objServicioPunto)
                {
                    if($objServicioPunto->getId() != $objServicio->getId())
                    {
                        if($objServicioPunto->getEstado() == "Activo" || $objServicioPunto->getEstado() == "In-Corte" 
                            || $objServicioPunto->getEstado() == "In-Temp")
                        {
                            $objAdmiProductoServicioPunto = $objServicioPunto->getProductoId();
                            if (is_object($objAdmiProductoServicioPunto))
                            {
                                $booleanTieneProStorage = false;
                                $booleanEstaRelacionado = false;
                                foreach($arrayProdStorage as $objProductoStorage)
                                {
                                    if($objAdmiProductoServicioPunto->getId() == $objProductoStorage->getId())
                                    {
                                        $booleanTieneProStorage = true;
                                    }
                                    if ($booleanTieneProStorage)
                                    {
                                        $objCaracteristicaRefId = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                              ->findOneBy(array( "descripcionCaracteristica" => "REF_SERVICIO_ID"));
                                        if(is_object($objCaracteristicaRefId))
                                        {
                                            $objProdCaracteristicaRefId = $emComercial
                                                                          ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                          ->findOneBy(array("productoId"       => $objProductoStorage->getId(), 
                                                                                            "caracteristicaId" => $objCaracteristicaRefId->getId()
                                                                                           )
                                                                                     );
                                            if(is_object($objProdCaracteristicaRefId))
                                            {
                                                $objServProdCaract = $emComercial
                                                                     ->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                     ->findOneBy(array("servicioId"                => $objServicioPunto->getId(), 
                                                                                       "productoCaracterisiticaId" => $objProdCaracteristicaRefId
                                                                                                                      ->getId(),
                                                                                       "estado"                    => "Activo"));
                                                if (is_object($objServProdCaract))
                                                {
                                                    if ((int)$objServProdCaract->getValor() == $objServicio->getId())
                                                    {
                                                        $booleanEstaRelacionado = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                }
                                //solo se cancelan los storage que esten relacionados a la Cámara
                                if ($booleanTieneProStorage && $booleanEstaRelacionado)
                                {
                                    $objServicioPunto->setEstado("Cancel");
                                    $emComercial->persist($objServicioPunto);
                                    $emComercial->flush();

                                    //historial del servicio
                                    $objServicioHistorial = new InfoServicioHistorial();
                                    $objServicioHistorial->setServicioId($objServicioPunto);
                                    $objServicioHistorial->setObservacion("Se cancelo el Servicio");
                                    $objServicioHistorial->setEstado("Cancel");
                                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                                    $objServicioHistorial->setAccion($objAccion->getNombreAccion());
                                    $emComercial->persist($objServicioHistorial);
                                    $emComercial->flush();

                                    //eliminar las caracteristicas del servicio
                                    $arrayServProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                        ->findBy(array("servicioId" => $objServicioPunto->getId(), 
                                                                                       "estado"     => "Activo"));
                                    foreach($arrayServProdCaract as $objServProdCaract)
                                    {
                                        $objServProdCaract->setEstado("Eliminado");
                                        $emComercial->persist($objServProdCaract);
                                        $emComercial->flush();
                                    }
                                }
                            }
                        }
                    }
                }
                
            }
            
            $emGeneral->getConnection()->commit();
            $emSoporte->getConnection()->commit();
            $emComercial->getConnection()->commit();
            $emInfraestructura->getConnection()->commit();
            $strMensajeRespuesta = "OK";

            //Proceso que graba tarea en INFO_TAREA
            if(is_object($objDetalle))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $objDetalle->getId();
                $arrayParametrosInfoTarea['strUsrCreacion'] = $objSession->get('user');
                $objServiceSoporte                          = $this->get('soporte.SoporteService');
                $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
            }
        }
        catch (\Exception $ex)
        {
            if ($emGeneral->getConnection()->isTransactionActive())
            {
                $emGeneral->getConnection()->rollback();
            }
            if ($emSoporte->getConnection()->isTransactionActive())
            {
                $emSoporte->getConnection()->rollback();
            }
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }
            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
            
            $emGeneral->getConnection()->close();
            $emSoporte->getConnection()->close();
            $emComercial->getConnection()->close();
            $emInfraestructura->getConnection()->close();
            
            $strMensajeRespuesta = "ERROR";
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.cancelarServicioNetlifeCamAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objRequest->getClientIp()
                                     );
        }
        
        $objJsonResponse->setData(array('strStatus' => $strMensajeRespuesta));
        return $objJsonResponse;
    }
    
    /**
     * Metodo encargado de devolver la informacion de recursos y datos tecnicos de los servicios que seran cancelados por migracion al momento
     * de realizar activacion de servicio que ha heredado recursos del mencionado
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 31-01-2018
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetValoresServicioHeredadoAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $intIdServicioHeredado  = $objRequest->get('idServicioHeredado');
        $intIdServicio          = $objRequest->get('idServicio');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        $arrayParametros                          = array();
        $arrayParametros['intIdServicioAnterior'] = $intIdServicioHeredado;
        $arrayParametros['intIdServicioActual']   = $intIdServicio;
        $arrayRespuesta = $emComercial->getRepository("schemaBundle:InfoServicioTecnico")->getArrayInformacionServicioHeredado($arrayParametros);
        
        //Obtener informacion adicional del CPE del cliente heredado dado que será la misma del actual
        $arrayResultadoInterface = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                     ->getMacCpePorServicioInterface($intIdServicioHeredado,false);
        
        $arrayRespuesta[0]['nombreCpe']    = '';
        $arrayRespuesta[0]['macCpe']       = '';
        $arrayRespuesta[0]['interfaceCpe'] = '';
        
        if(!empty($arrayResultadoInterface))
        {
            $objCpe = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($arrayResultadoInterface['elementoId']);
            $strNombre = '';
            
            if(is_object($objCpe))
            {
                $strNombre = $objCpe->getNombreElemento();
            }
            
            $arrayRespuesta[0]['nombreCpe']    = $strNombre;
            $arrayRespuesta[0]['macCpe']       = $arrayResultadoInterface['mac'];
            $arrayRespuesta[0]['interfaceCpe'] = $arrayResultadoInterface['nombreInterface'];
        } 
               
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    
    /**
     * Método encargado de devolver la información de recursos y datos técnicos de los servicios de interconexión con Telefónica.
     *
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.0 - 13-09-2019
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetValoresServicioFWAAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $intIdServicio          = $objRequest->get('idServicio');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $arrayDataFWA           = array();
        $arrayResponse          = array();
        $serviceRecursoDeRed    = $this->get('planificacion.RecursosDeRed');
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');
        try
        {
            $objServicio            = $emComercial->getRepository("schemaBundle:InfoServicio")
                                                  ->find($intIdServicio);
            $strRegionServicio      = "";
            if(is_object($objServicio->getPuntoId()))
            {
                $intIdOficinaServicio   = is_object($objServicio->getPuntoId()->getPuntoCoberturaId()) ? 
                                                    $objServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId() : 0;
                $objOficinaServicio     = $emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                                                            ->find($intIdOficinaServicio);
                if(is_object($objOficinaServicio))
                {
                    $objCantonServicio = $emComercial->getRepository("schemaBundle:AdmiCanton")
                                                           ->find($objOficinaServicio->getCantonId());
                    if(is_object($objCantonServicio))
                    {
                        $strRegionServicio = $objCantonServicio->getRegion();
                    }
                }
            }

            $arrayParametroAsignaIp = array('objServicio'           => $objServicio,
                                            'strUsrCreacion'        => $objSession->get('user'),
                                            'strIpCreacion'         => $objRequest->getClientIp(),
                                            'strNombreParametro'    => 'IP_LOOPBACK_FWA',
                                            'strValor1'             => $strRegionServicio);
            $arrayIpLoopBack        = $serviceRecursoDeRed->asignarIpFWA($arrayParametroAsignaIp);
            if(isset($arrayIpLoopBack) && $arrayIpLoopBack['status'] == 'OK')
            {
                $arrayDataFWA['ipLoopBack'] = $arrayIpLoopBack['data']['strIpLoopBack'];
            }
            else
            {
                throw new \Exception($arrayIpLoopBack['data']['strMensaje']);
            }
            $objServProdCaractConcen      = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'ENLACE_DATOS',
                                                                                                $objServicio->getProductoId());
            $objServicioConcentrador      = $emComercial->getRepository("schemaBundle:InfoServicio")
                                                        ->findOneById($objServProdCaractConcen->getValor());
            $arrayDataFWA['concentrador'] = $objServicioConcentrador->getLoginAux();
            if(!is_object($objServProdCaractConcen))
            {
                throw new \Exception('No se puede obtener la caracteristica ENLACE_DATOS');
            }

            //Consultar si tiene un concentrador virtual de INTERCONEXION

            $arrayParamConcentraInter= $emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                 ->getOne('CONCENTRADOR INTERCONEXION FWA',
                                                          'COMERCIAL',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          '');
            if( isset($arrayParamConcentraInter['valor1']) && !empty($arrayParamConcentraInter['valor1']) )
            {
                $strNombreTecnico = $arrayParamConcentraInter['valor1'];
            }
            $objProductoConcinter    = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array("nombreTecnico"   =>  $strNombreTecnico,
                                                                     "estado"          =>  "Activo",
                                                                     "esConcentrador"  =>  "SI",
                                                                     "empresaCod"      =>  $objSession->get('idEmpresa')));

            $objServProdCaractConcenFWA      = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                  'CONCENTRADOR_FWA',
                                                                                                  $objProductoConcinter);
            if(!is_object($objServProdCaractConcenFWA))
            {
                throw new \Exception('No se puede obtener la caracteristica CONCENTRADOR_FWA');
            }

            $objServicioConcentradorFWA      = $emComercial->getRepository("schemaBundle:InfoServicio")
                                                           ->findOneById($objServProdCaractConcenFWA->getValor());
            $arrayDataFWA['concentradorFWA'] = $objServicioConcentradorFWA->getLoginAux();

            $arrayResponse = array( "strStatus"  => "OK" ,
                                    "arrayData"  => $arrayDataFWA,
                                    "strMensaje" => "Información recuperada existosamente");
        }
        catch (\Exception $ex)
        {
            $arrayResponse = array( "strStatus"  => "ERROR" ,
                                    "arrayData"  => $arrayDataFWA,
                                    "strMensaje" => $ex->getMessage());
        }

        $objJsonResponse->setData($arrayResponse);
        return $objJsonResponse;
    }

    /**
     * 
     * Metodo para activar las lineas telefonicas de netvoice
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 - 31-01-2018
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 22-11-2018 Se aumenta el id de la solicitud de planificación para que pueda ser finalizada.
     * 
     * @return JsonResponse
    */
    public function gestionarLineasTelefonicasAction()
    {
        $objRespuesta       = new JsonResponse();
        
        $objRequest         = $this->get('request');
        $objSession         = $objRequest->getSession();
        $strIpClient        = $objRequest->getClientIp();
        $strUser            = $objSession->get('user');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');      
        $strOpcion          = $objRequest->get('opcion');
 
        $serviceTelefonia   = $this->get('tecnico.InfoTelefonia');
        
        $arrayPeticiones['intIdServicio']       = $objRequest->get('idServicio');
        $arrayPeticiones['idNumero']            = $objRequest->get('idNumero');
        $arrayPeticiones['strUser']             = $strUser;
        $arrayPeticiones['strIpClient']         = $strIpClient;
        $arrayPeticiones['strPrefijoEmpresa']   = $strPrefijoEmpresa;
        $arrayPeticiones['intCodEmpresa']       = $objSession->get('idEmpresa');
        
        if($strOpcion == 'ACTIVAR')
        {
            $arrayPeticiones['strSerie']            = $objRequest->get('serie');
            $arrayPeticiones['strMac']              = $objRequest->get('mac');
            $arrayPeticiones['strModelo']           = $objRequest->get('modelo');
            $arrayPeticiones['strObservacion']      = $objRequest->get('observacion');

            $arrayRespuesta       = $serviceTelefonia->activarLineasTelefonicas($arrayPeticiones);        
        }
        else if($strOpcion == 'INFO_TECNICA')
        {
            $arrayRespuesta['mensaje'] =  json_encode($serviceTelefonia->infoTecnicaTelefonia($arrayPeticiones));
        }
        else if($strOpcion == 'CORTAR')
        {
            $arrayRespuesta =  $serviceTelefonia->cortarLinea($arrayPeticiones);
        }
        else if($strOpcion == 'RECONECTAR')
        {
            $arrayRespuesta =  $serviceTelefonia->reconectarLinea($arrayPeticiones);
        }
        else if($strOpcion == 'DETALLE_LLAMADA')
        {
            $arrayPeticiones['strCorreo']       = $objRequest->get('correo');
            $arrayPeticiones['fechaInicio']     = $objRequest->get('fechaInicio');
            $arrayPeticiones['fechaFin']        = $objRequest->get('fechaFin');
            
            $arrayRespuesta =  $serviceTelefonia->envioDetalleLlamada($arrayPeticiones);
        }
        else if($strOpcion == 'CANCELAR_LINEAS')
        {
            $arrayRespuesta =  $serviceTelefonia->cancelarLineas($arrayPeticiones);
        }
        else if($strOpcion == 'CANCELAR_LINEA')
        {
            $arrayRespuesta =  $serviceTelefonia->cancelarLinea($arrayPeticiones);
        }
        else if($strOpcion == 'CAMBIAR_ELEMENTO')
        {
            
            $arrayPeticiones = array('intIdDepartamento'    => $objSession->get('intIdDepartamento'),
                        'idEmpresa'             => $objSession->get('idEmpresa'),
                        'prefijoEmpresa'        => $objSession->get('prefijoEmpresa'),
                        'idServicio'            => $objRequest->get('idServicio'),
                        'idSolicitud'           => $objRequest->get('idSolicitud'),
                        'idElemento'            => $objRequest->get('idElemento'),
                        'modeloCpe'             => $objRequest->get('modeloCpe'),
                        'ipCpe'                 => $objRequest->get('ipCpe'),
                        'nombreCpe'             => $objRequest->get('nombreCpe'),
                        'macCpe'                => $objRequest->get('macCpe'),
                        'serieCpe'              => $objRequest->get('serieCpe'),
                        'descripcionCpe'        => $objRequest->get('descripcionCpe'),
                        'tipoElementoCpe'       => $objRequest->get('tipoElementoCpe'),
                        'usrCreacion'           => $objSession->get('user'),
                        'ipCreacion'            => $objRequest->getClientIp()                        
                    );
                    
            $arrayRespuesta =  $serviceTelefonia->cambioElementoTelefonia($arrayPeticiones);
        }  
        else if($strOpcion == 'EDITAR_LINEA')
        {
            $arrayPeticiones['strCanales']      = $objRequest->get('canales');
            $arrayPeticiones['idSpcCanales']    = $objRequest->get('idNumeroCanales');            
            
            $arrayRespuesta =  $serviceTelefonia->editarLinea($arrayPeticiones);
        }
        else if($strOpcion == 'CONSULTAR_NUMERO')
        {
            $arrayPeticiones['strBusqueda']    = $objRequest->get('numeroBusqueda');
            $arrayPeticiones['strFiltro']    = $objRequest->get('filtro');
            
            $arrayRespuesta['mensaje'] =  $serviceTelefonia->consultarNumero($arrayPeticiones);

        }
        else if($strOpcion == 'CAMBIAR_NUMERO')
        {
            $arrayPeticiones['strNuevoNumero']    = $objRequest->get('numeroNuevo');
            
            $arrayRespuesta =  $serviceTelefonia->cambiarNumero($arrayPeticiones);

        }        
        else
        {
            $arrayRespuesta['mensaje'] = 'No se ha enviado opcion';
        } 
        
        return $objRespuesta->setContent($arrayRespuesta['mensaje']);
        
    }
    
    /**
     * 
     * Metodo encargado para realizar la activación de Servicios que heredan información de Factibilidad, UM y equipo final
     * del cliente
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 31-01-2018
     * 
     * @return JsonResponse
     */
    public function ajaxActivarServicioPorFactibilidadHeredadaAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        
        $arrayParametros                          = array();
        $arrayParametros['intIdServicioNuevo']    = $objRequest->get('idServicioNuevo');
        $arrayParametros['intIdServicioAnterior'] = $objRequest->get('idServicioAnterior');
        
        //Datos Anteriores
        $arrayParametros['intVlanAnterior']         = $objRequest->get('vlanAnterior');
        $arrayParametros['strVrfAnterior']          = $objRequest->get('vrfAnterior');
        $arrayParametros['strProtocoloAnterior']    = $objRequest->get('protocoloAnterior');
        $arrayParametros['intAsPrivadoAnterior']    = $objRequest->get('asPrivadoAnterior');
        $arrayParametros['srtIpAnterior']           = $objRequest->get('ipAnterior');
        $arrayParametros['strSubredAnterior']       = $objRequest->get('subredAnterior');
        $arrayParametros['strLoginAuxAnterior']     = $objRequest->get('loginAuxAnterior');
        $arrayParametros['intCapacidadUnoAnterior'] = $objRequest->get('capacidadUnoAnterior');
        $arrayParametros['intCapacidadDosAnterior'] = $objRequest->get('capacidadDosAnterior');
        $arrayParametros['strNombreCpeAnterior']    = $objRequest->get('cpeAnterior');
        $arrayParametros['strInterfazCpeAnterior']  = $objRequest->get('interfazCpeAnterior');
        
        //Datos Nuevos
        $arrayParametros['intVlanNueva']            = $objRequest->get('vlanNueva');
        $arrayParametros['strVrfNueva']             = $objRequest->get('vrfNueva');
        $arrayParametros['strProtocoloNueva']       = $objRequest->get('protocoloNueva');
        $arrayParametros['intAsPrivadoNueva']       = $objRequest->get('asPrivadoNueva');
        $arrayParametros['srtIpNueva']              = $objRequest->get('ipNueva');
        $arrayParametros['strSubredNueva']          = $objRequest->get('subredNueva');
        $arrayParametros['strLoginAuxNueva']        = $objRequest->get('loginAuxNueva');
        $arrayParametros['intCapacidadUnoNueva']    = $objRequest->get('capacidadUnoNueva');
        $arrayParametros['intCapacidadDosNueva']    = $objRequest->get('capacidadDosNueva');
        $arrayParametros['strGwNueva']              = $objRequest->get('gwNueva');
        $arrayParametros['strMascaraNueva']         = $objRequest->get('mascaraSubredNueva');
        $arrayParametros['strRdId']                 = $objRequest->get('rdId');
        $arrayParametros['strDefaultGw']            = $objRequest->get('defaultGw');
        $arrayParametros['strElementoPadre']        = $objRequest->get('elementoPadre');
        $arrayParametros['strAnillo']               = $objRequest->get('anillo');
        $arrayParametros['strProtocolo']            = $objRequest->get('protocolo');
        $arrayParametros['strMacCpe']               = $objRequest->get('macCpe');
        
        //Datos generaes
        $arrayParametros['strUsrCreacion']          = $objSession->get('user');
        $arrayParametros['strIpCreacion']           = $objRequest->getClientIp();
        
        $serviceActivacion      = $this->get('tecnico.InfoActivarPuerto');
        $arrayRespuesta         = $serviceActivacion->activarServicioPorFactibilidadHeredada($arrayParametros);
        
        $objServicio            = $emComercial->getRepository('schemaBundle:InfoServicio')
                                              ->find($objRequest->get('idServicioNuevo'));
        
        if (is_object($objServicio) && $arrayRespuesta['status'] == 'OK')
        {                        
            //SE CONFIRMA AUTOMATICAMENTE LOS SERVICIOS
            $arrayPeticiones = array(
                                    'idEmpresa'                     => $objSession->get('idEmpresa'),
                                    'prefijoEmpresa'                => $objSession->get('prefijoEmpresa'),
                                    'idServicio'                    => $objServicio->getId(),
                                    'idProducto'                    => $objServicio->getProductoId()->getId(),
                                    'observacionActivarServicio'    => "Se confirmo el servicio",
                                    'idAccion'                      => "847",//accion quemada en javascript
                                    'usrCreacion'                   => $objSession->get('user'),
                                    'ipCreacion'                    => $objRequest->getClientIp()
                                    );

           /* @var $confirmar InfoConfirmarServicio */
           $serviceConfirmarServicio = $this->get('tecnico.InfoConfirmarServicio');
           $arrayRespuestaService    = $serviceConfirmarServicio->confirmarServicio($arrayPeticiones);
           //*----------------------------------------------------------------------*/
           $arrayRespuesta['mensaje'] = $arrayRespuestaService[0]['mensaje'];
           $arrayRespuesta['status']  = $arrayRespuestaService[0]['status'];
           
           if($arrayRespuestaService[0]['status']=='OK')
           {
               $arrayRespuesta['mensaje']  = 'El Servicio se activó correctamente';
           }
        }
        
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    
    /**
     * @Secure(roles="ROLE_414-5957")
     * 
     * ajaxReenviarCredencialesTgAction
     * 
     * Función que realiza el reenvío de las credenciales de acceso al portal de monitoreo Telcograph
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 31-07-2018
     * @since 1.0
     */
    public function ajaxReenviarCredencialesTgAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $strRucTg               = $objRequest->get('strRucTg');
        $strIpServicio          = $objRequest->get('strIpServicio');
        $strUsrCreacion         = $objSession->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $serviceUtil            = $this->get('schema.Util');
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strStatus              = "";
        $strMensaje             = "";
        try
        {
            $arrayParametros              = array();
            $arrayParametros['strRuc']    = $strRucTg;
            $arrayParametros['strIpHost'] = $strIpServicio;
            $arrayParametros['strUsrCreacion'] = $strUsrCreacion;
            $arrayParametros['strIpCreacion']  = $strIpCliente;
            $arrayRespuestaReenvio = $serviceServicioTecnico->reenviarCredencialesTg($arrayParametros);
            $strStatus  = $arrayRespuestaReenvio['strStatus'];
            $strMensaje = $arrayRespuestaReenvio['strMensaje'];
        }
        catch(\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->reenviarCredencialesTelcographAction',
                                      $objEx->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCliente);
        }

        $arrayRespuesta = array("strStatus"  => $strStatus,
                                "strMensaje" => $strMensaje);
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }
    
    /**
     * @Secure(roles="ROLE_414-5977")
     * 
     * ajaxReintentarCreacionTgAction
     * 
     * Función que realiza el reintento de la creación del monitoreo Telcograph
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 31-07-2018
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 01-10-2018  Se agrega parámetro tipo proceso para que en la opción reintento solo se envíe ese servicio
     * @since 1.0
     */
    public function ajaxReintentarCreacionTgAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $intIdServicio          = $objRequest->get('intIdServicio');
        $strUsrCreacion         = $objSession->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $serviceUtil            = $this->get('schema.Util');
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $strStatus              = "";
        $strMensaje             = "";
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio))
            {
                //Generar creación de nuevo host para monitoreo de equipos en app TelcoGraph
                $arrayParametrosTelcoGraph                    = array();
                $arrayParametrosTelcoGraph['objInfoServicio'] = $objServicio;
                $arrayParametrosTelcoGraph['strUsrCreacion']  = $strUsrCreacion;
                $arrayParametrosTelcoGraph['strIpCreacion']   = $strIpCliente;
                $arrayParametrosTelcoGraph['strOpcion']       = "reintento";
                $arrayParametrosTelcoGraph['strProceso']      = "crear";
                $arrayRespuestaReintento = $serviceServicioTecnico->procesaHostTelcoGraph($arrayParametrosTelcoGraph);
                $strStatus  = $arrayRespuestaReintento['strStatus'];
                $strMensaje = $arrayRespuestaReintento['strMensaje'];
            }
            else
            {
                $strStatus  = "ERROR";
                $strMensaje = "Existieron problemas al buscar la información del servicio necesaria para ejecutar el proceso. ".
                              "Por favor Notificar a Sistemas!";
            }
        }
        catch(\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxReintentarCreacionTgAction',
                                      $objEx->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCliente);
        }

        $arrayRespuesta = array("strStatus"  => $strStatus,
                                "strMensaje" => $strMensaje);
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_414-7117")
     *
     * Función encargada de crear el monitoreo de telcograf para clientes que no cumplan con
     * los $1k de facturación mensual.
     *
     * @author Germán valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 29-01-2020
     */
    public function ajaxCrearMonitoreoTelografAction()
    {
        $objResponse              = new JsonResponse();
        $objRequest               = $this->getRequest();
        $objSession               = $objRequest->getSession();
        $intIdServicio            = $objRequest->get('intIdServicio');
        $strValidarFacturacion    = $objRequest->get('strValidarFacturacion');
        $strUsrCreacion           = $objSession->get('user');
        $strIpCreacion            = $objRequest->getClientIp();
        $serviceUtil              = $this->get('schema.Util');
        $emComercial              = $this->get('doctrine')->getManager('telconet');
        $serviceServicioTecnico   = $this->get('tecnico.InfoServicioTecnico');
        $arrayProductosPermitidos = array("INTERNET", "L3MPLS", "INTMPLS", "INTERNET SDWAN", "L3MPLS SDWAN");

        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

            if (!is_object($objServicio))
            {
                throw new \Exception('Error : Error al obtener la información del servicio.');
            }

            if (!is_object($objServicio->getProductoId()))
            {
                throw new \Exception('Error : Error al obtener la información del producto.');
            }

            if (!in_array($objServicio->getProductoId()->getNombreTecnico(),$arrayProductosPermitidos))
            {
                throw new \Exception('Error : Producto no permitido para la creación del monitoreo de telcograf.');
            }

            //Generar creación de nuevo host para monitoreo de equipos en app TelcoGraph
            $arrayParametrosTelcoGraph['objInfoServicio']       = $objServicio;
            $arrayParametrosTelcoGraph['strUsrCreacion']        = $strUsrCreacion;
            $arrayParametrosTelcoGraph['strIpCreacion']         = $strIpCreacion;
            $arrayParametrosTelcoGraph['strValidarFacturacion'] = $strValidarFacturacion;
            $arrayParametrosTelcoGraph['strProceso']            = "crear";
            $arrayRespuesta = $serviceServicioTecnico->procesaHostTelcoGraph($arrayParametrosTelcoGraph);
        }
        catch (\Exception $objException)
        {
            $strMessage = "Error al crear el monitoreo de telcograf.<br/>Si el problema persiste comunique a Sistemas..!!";

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode("Error : ", $objException->getMessage())[1];
            }

            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxCrearMonitoreoTelograf',
                                       $objException->getMessage(),
                                       $strUsrCreacion,
                                       $strIpCreacion);

           $arrayRespuesta = array ('strStatus'  => 'ERROR',
                                    'strMensaje' => $strMessage);
        }

        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_414-5997")
     *
     * ajaxInformacionTg
     *
     * Función que obtiene la información técnica del monitoreo de Telcograf de un cliente.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 16-12-2019
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 18-02-2021 - Se agrega la organización del portal.
     */
    public function ajaxInformacionTgAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $strUsrCreacion         = $objRequest->getSession()->get('user');
        $strCodEmpresa          = $objRequest->getSession()->get('idEmpresa');
        $strIpCliente           = $objRequest->getClientIp();
        $intIdPersonaEmpresaRol = $objRequest->get('idPersonaEmpresaRol');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $objServiceUtil         = $this->get('schema.Util');

        try
        {
            $arrayStrCaracteristica = array('URL_TELCOGRAPH','USUARIO_PORTAL','IP_SERVIDOR_ZABBIX','ORGANIZACION_TELCOGRAPH');
            $arrayDatos = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                    ->getDatosCaractClienteTg(array ('intIdPersonaEmpresaRol'  => $intIdPersonaEmpresaRol,
                                                     'arrayStrCaracteristica'  => $arrayStrCaracteristica,
                                                     'strCodEmpresa'           => $strCodEmpresa,
                                                     'strEstadoCliente'        => 'Activo',
                                                     'strEstadoCaracteristica' => 'Activo',
                                                     'strUsuario'              => $strUsrCreacion,
                                                     'strIp'                   => $strIpCliente,
                                                     'objUtilService'          => $objServiceUtil));

            if (empty($arrayDatos['result']))
            {
                throw new \Exception('Error : Sin datos para mostrar.<br/>'.
                                     'Si el problema persiste comunique a Sistemas..!!');
            }

            $arrayRespuesta['status'] = true;
            $arrayCaracteristicas = array_map(function($arrayResult)
            {
                return $arrayResult['caracteristica'];
            },$arrayDatos['result']);

            $intPosicion = array_search('URL_TELCOGRAPH',$arrayCaracteristicas);
            if ($intPosicion || $intPosicion === 0)
            {
                $arrayRespuesta['urlPortal'] = $arrayDatos['result'][$intPosicion]['valor'];
            }

            $intPosicion = array_search('USUARIO_PORTAL',$arrayCaracteristicas);
            if ($intPosicion || $intPosicion === 0)
            {
                $arrayRespuesta['usrPortal'] = $arrayDatos['result'][$intPosicion]['valor'];
            }

            $intPosicion = array_search('IP_SERVIDOR_ZABBIX',$arrayCaracteristicas);
            if ($intPosicion || $intPosicion === 0)
            {
                $arrayRespuesta['ipServidorZabbix'] = $arrayDatos['result'][$intPosicion]['valor'];
            }

            $intPosicion = array_search('ORGANIZACION_TELCOGRAPH',$arrayCaracteristicas);
            if ($intPosicion || $intPosicion === 0)
            {
                $arrayRespuesta['organizacion'] = $arrayDatos['result'][$intPosicion]['valor'];
            }
        }
        catch (\Exception $objException)
        {
            $strMessage = "Error al obtener los datos. Si el problema persiste comunique a Sistemas..!!";

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode("Error : ", $objException->getMessage())[1];
            }

            $objServiceUtil->insertError('Telcos+',
                                         'InfoServicioController->ajaxInformacionTgAction',
                                          $objException->getMessage(),
                                          $strUsrCreacion,
                                          $strIpCliente);

           $arrayRespuesta = array ('status'  => false,
                                    'message' => $strMessage);
        }

        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_414-5997")
     *
     * Función que obtiene el contacto actual de Telcograf por cliente.
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 29-06-2020
     * 
     */
    public function ajaxContactoActualTgAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $strUsrCreacion         = $objRequest->getSession()->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $intIdPersonaEmpresaRol = $objRequest->get('idPersonaEmpresaRol');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $serviceUtil            = $this->get('schema.Util');
        $strCodEmpresa          = $objRequest->getSession()->get('idEmpresa');
        $arrayRespuesta         = array();

        try
        {
            $arrayParametrosCaractPortalActivo = array('descripcionCaracteristica' => 'USUARIO_PORTAL',
                                                       'estado'                    => "Activo");

            $objCaractPortalActivo = $emComercial
                                            ->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy($arrayParametrosCaractPortalActivo);

            if (is_object($objCaractPortalActivo))
            {
                $intIdCaractPortalActivo = $objCaractPortalActivo->getId();
                $objCarPortalActivo      = $emComercial
                                                ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                ->findCaracteristicaPorCriterios(
                                                                                    array("caracteristicaId"  => $intIdCaractPortalActivo,
                                                                                    "personaEmpresaRolId"     => $intIdPersonaEmpresaRol,
                                                                                    "empresaCod"              => $strCodEmpresa,
                                                                                    "estado"                  => "Activo")
                                                                                );

                $arrayRespuesta = array('contacto' => $objCarPortalActivo->getValor());
            }

        }
        catch(\Exception $objException)
        {
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxContactoActualTgAction',
                                       $objException->getMessage(),
                                       $strUsrCreacion,
                                       $strIpCliente);

            $arrayRespuesta = array('contacto' => "");
        }

        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_414-5997")
     *
     * Función que obtiene los contactos de un punto.
     *
     * @author Germán valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 31-07-2018
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.1 29-06-2020 - Se agrega un indicador el cual marca a los correos
     *                           que ya estan asociados a otros clientes.
     * @since 1.0
     * 
     */
    public function ajaxGetTipoContactoPuntoAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $strUsrCreacion         = $objRequest->getSession()->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $intIdPersonaEmpresaRol = $objRequest->get('idPersonaEmpresaRol');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $serviceUtil            = $this->get('schema.Util');
        $strCodEmpresa          = $objRequest->getSession()->get('idEmpresa');
        $arrayResultado         = array();

        try
        {
            //'arrayStrRolContacto' => array('Contacto Tecnico'),
            $arrayRespuesta = $emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                    ->getContactosPunto(array('intIdPersonaEmpresaRol' => $intIdPersonaEmpresaRol,
                                              'arrayStrEstadoPunto'    => array('Activo','In-Corte'),
                                              'arrayStrFormaContacto'  => array('CORREO ELECTRONICO'),
                                              'arrayStrRolContacto'    => '',
                                              'strEstadoFormaContacto' => 'Activo',
                                              'strEstadoPuntoContacto' => 'Activo',
                                              'objUtilService'         => $serviceUtil,
                                              'strUsuario'             => $strUsrCreacion,
                                              'strIp'                  => $strIpCliente
                                             ));

            $arrayParametrosCaractPortalActivo = array('descripcionCaracteristica' => 'USUARIO_PORTAL',
                                                       'estado'                    => "Activo");

            $objCaractPortalActivo = $emComercial
                                            ->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy($arrayParametrosCaractPortalActivo);

            if (is_object($objCaractPortalActivo))
            {
                $intIdCaractPortalActivo = $objCaractPortalActivo->getId();
                foreach($arrayRespuesta['result'] as $objRespuesta)
                {
                    $objCarPortalActivo = $emComercial
                                                ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                ->findCaracteristicaPorCriterios(
                                                                                    array("caracteristicaId"  => $intIdCaractPortalActivo,
                                                                                    "valor"                   => strtoupper($objRespuesta['contacto']),
                                                                                    "empresaCod"              => $strCodEmpresa,
                                                                                    "estado"                  => "Activo")
                                                                                );

                    if(isset($objCarPortalActivo) && !empty($objCarPortalActivo))
                    {
                        $objRespuesta['usado'] = "Si";
                    }
                    else
                    {
                        $objRespuesta['usado'] = "No";
                    }
                    array_push($arrayResultado,$objRespuesta);
                }
            }
            $arrayRespuesta['result'] = $arrayResultado;

        }
        catch(\Exception $objException)
        {
            $strMensaje = "Ha ocurrido un error. Si el problema persiste por favor notificar a Sistemas..!!";

            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxGetTipoContactoPunto',
                                       $objException->getMessage(),
                                       $strUsrCreacion,
                                       $strIpCliente);

            $arrayRespuesta = array("status"     => false,
                                    "strMensaje" => $strMensaje);
        }

        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_414-5997")
     * 
     * ajaxCambiarPassTgAction
     * 
     * Función que realiza la actualización de las password de acceso al portal de monitoreo Telcograph
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 31-07-2018
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 13-12-2019 - Se agrega el parámetro de destinatarios seleccionados por el usuario,
     *                           y si el proceso de cambio de contraseña es exitoso, se inserta un registro
     *                           en el historial del servicio, indicando la notificación enviada a los contactos
     *                           seleccionados por el usuario.
     */
    public function ajaxCambiarPassTgAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $intIdPersonaRol        = $objRequest->get('intIdPersonaRol');
        $strRucTg               = $objRequest->get('strRucTg');
        $strIpServicio          = $objRequest->get('strIpServicio');
        $strUsrCreacion         = $objSession->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $serviceUtil            = $this->get('schema.Util');
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strDestinatarios       = $objRequest->get('destinatarios');
        $arrayDestinatarios     = explode(',',$strDestinatarios);
        $intIdServicio          = $objRequest->get('idServicio');
        $emComercial            = $this->get('doctrine')->getManager('telconet');

        try
        {
            $arrayParametros                     = array();
            $arrayParametros['intIdPersonaRol']  = $intIdPersonaRol;
            $arrayParametros['strIpHost']        = $strIpServicio;
            $arrayParametros['strRuc']           = $strRucTg;
            $arrayParametros['strUsrCreacion']   = $strUsrCreacion;
            $arrayParametros['strIpCreacion']    = $strIpCliente;
            $arrayParametros['arrayDestinatarios'] = $arrayDestinatarios;
            $arrayRespuestaCambioPass            = $serviceServicioTecnico->cambiarPasswordTg($arrayParametros);
            $strStatus                           = $arrayRespuestaCambioPass['strStatus'];
            $strMensaje                          = $arrayRespuestaCambioPass['strMensaje'];

            $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

            if ($strStatus === 'OK' && is_object($objInfoServicio))
            {
                $emComercial->getConnection()->beginTransaction();

                try
                {
                    $strObservacion = "La Notificación de cambio de contraseña del monitoreo de telcograf, se ".
                                      "envío a los siguientes destinatarios: <b>".$strDestinatarios."<b/>";

                    $objInfoServicioHistorial = new InfoServicioHistorial();
                    $objInfoServicioHistorial->setServicioId($objInfoServicio);
                    $objInfoServicioHistorial->setAccion('monitoreoTelcograf');
                    $objInfoServicioHistorial->setObservacion($strObservacion);
                    $objInfoServicioHistorial->setEstado($objInfoServicio->getEstado());
                    $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);
                    $objInfoServicioHistorial->setIpCreacion($strIpCliente);
                    $emComercial->persist($objInfoServicioHistorial);
                    $emComercial->flush();
                    $emComercial->getConnection()->commit();
                    $emComercial->getConnection()->close();
                }
                catch(\Exception $objException)
                {
                    if($emComercial->getConnection()->isTransactionActive())
                    {
                        $emComercial->getConnection()->rollback();
                        $emComercial->getConnection()->close();
                    }

                    $serviceUtil->insertError('Telcos+',
                                              'InfoServicioController->reenviarCredencialesTelcographAction->guardarHistorial',
                                               $objException->getMessage(),
                                               $strUsrCreacion,
                                               $strIpCliente);
                }
            }
        }
        catch(\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->reenviarCredencialesTelcographAction',
                                      $objEx->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCliente);
        }

        $arrayRespuesta = array("strStatus"  => $strStatus,
                                "strMensaje" => $strMensaje);
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_414-5997")
     * 
     * ajaxCambiarUserTgAction
     * 
     * Función que realiza la actualización de las password de acceso al portal de monitoreo Telcograph
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 29-06-2020
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 18-02-2021 - Se actualiza los parámetros de administración al momento de llamar el proceso de crearClienteLdap.
     */
    public function ajaxCambiarUserTgAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $intIdPersonaRol        = $objRequest->get('intIdPersonaRol');
        $strEmailActual         = strtoupper($objRequest->get('emailActual'));
        $strUsrCreacion         = $objSession->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $serviceUtil            = $this->get('schema.Util');
        $strDestinatarios       = $objRequest->get('destinatarios');
        $arrayDestinatarios     = explode(',',$strDestinatarios);
        $strCorreoNuevo         = strtoupper($arrayDestinatarios[0]);
        $intIdServicio          = $objRequest->get('idServicio');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $serviceTelcoGraph      = $this->get('tecnico.TelcoGraph');
        $strCodEmpresa          = $objRequest->getSession()->get('idEmpresa');
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');

        try
        {
            $arrayParametrosCaractOrganizacion = array('descripcionCaracteristica' => "ORGANIZACION_TELCOGRAPH",
                                                        'estado'                    => "Activo");
            $objCaractOrganizacion = $emComercial
                                            ->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy($arrayParametrosCaractOrganizacion);
            if (!is_object($objCaractOrganizacion))
            {
                throw new \Exception("No existe información de caracteristica ORGANIZACION TELCOGRAPH");
            }

            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
            $objCarOrganizacion = $emComercial
                                    ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                    ->findCaracteristicaPorCriterios
                                        (array("caracteristicaId"    => $objCaractOrganizacion->getId(),
                                                "personaEmpresaRolId" => $intIdPersonaRol,
                                                "empresaCod"          => $strCodEmpresa,
                                                "estado"              => "Activo")
            );
            if (is_object($objCarOrganizacion))
            {

                $arrayParametrosValidaUsuaLdap = array(
                                                        "strCorreo"      => $strEmailActual,
                                                        "strIpClient"    => $strIpCliente,
                                                        "strUsrCreacion" => $strUsrCreacion);

                $arrayValidaUseGrupoLdap = $serviceTelcoGraph->validarUsuarioLdap($arrayParametrosValidaUsuaLdap);

                if ($arrayValidaUseGrupoLdap["strStatus"] !== "OK")
                {
                    throw new \Exception("Msj: " . $arrayValidaUseGrupoLdap["strMsj"] . " Excepcion: " .
                    $arrayValidaUseGrupoLdap["strMsjEx"]);
                }

                $arrayParamValidaUsuaGrupoLdap = array("strGrupoLdap"   => $objCarOrganizacion->getValor(),
                                                        "strUid"         => $strEmailActual,
                                                        "strIpClient"    => $strIpCliente,
                                                        "strUsrCreacion" => $strUsrCreacion);

                $arrayValidaUseGrupoLdap = $serviceTelcoGraph->validaUsuarioAGrupoLdap($arrayParamValidaUsuaGrupoLdap);

                if ($arrayValidaUseGrupoLdap["strStatus"] !== "OK")
                {
                    throw new \Exception("Msj: " . $arrayValidaUseGrupoLdap["strMsj"] . " Excepcion: " .
                    $arrayValidaUseGrupoLdap["strMsjEx"]);
                }

                $arrayParametrosCaractPass = array('descripcionCaracteristica' => "PASSWORD_PORTAL",
                                                    'estado'                    => "Activo");
                $objCaractPassActivo = $emComercial
                                                ->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy($arrayParametrosCaractPass);
                if (!is_object($objCaractPassActivo))
                {
                    throw new \Exception("No existe información de caracteristica ORGANIZACION TELCOGRAPH");
                }

                $arrayCorreoCaracteristica = array( 
                    'estado'              => "Activo",
                    'personaEmpresaRolId' => $intIdPersonaRol,
                    'caracteristicaId'    => $objCaractPassActivo->getId()
                );

                $objPersonaEmpresaRolCarac = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                        ->findOneBy( $arrayCorreoCaracteristica );

                if (!is_object($objPersonaEmpresaRolCarac))
                {
                    throw new \Exception("No existe información de la CONTRASEÑA ACTUAL DEL CLIENTE");
                }
            
                $objInfoServicio = $emComercial
                                        ->getRepository('schemaBundle:InfoServicio')
                                        ->find($intIdServicio);

                $arrayObtenerInfoRequest = array();
                $arrayObtenerInfoRequest['objInfoServicio'] = $objInfoServicio;
                $arrayObtenerInfoRequest['strUsrCreacion']  = $strUsrCreacion;
                $arrayObtenerInfoRequest['strIpCreacion']   = $strIpCliente;
                $arrayObtenerInfoRequest['strProceso']      = "crear";
                $arrayObtieneInfoResponse = $serviceTecnico->obtieneInformacionTelcoGraph($arrayObtenerInfoRequest);

                $arrayParametrosCreaLdap = array(
                    "intIdPersonaEmpresaRol" => $intIdPersonaRol,
                    "strNombre"              => $arrayObtieneInfoResponse["strNombreRazonSocial"],
                    "strApellido"            => $arrayObtieneInfoResponse["strNombreRazonSocial"],
                    "strMail"                => $strCorreoNuevo,
                    "strIpClient"            => $strIpCliente,
                    "strUsrCreacion"         => $strUsrCreacion,
                    "strPass"                => $objPersonaEmpresaRolCarac->getValor()
                );

                $arrayRespuestaCreaLdap = $serviceTelcoGraph->crearClienteLdap($arrayParametrosCreaLdap);
                if ($arrayRespuestaCreaLdap["strStatus"] == "OK")
                {

                    $arrayParametrosCaractPortal = array('descripcionCaracteristica' => "USUARIO_PORTAL",
                                                            'estado'                    => "Activo");
                    $objCaractPortalActivo = $emComercial
                                                    ->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy($arrayParametrosCaractPortal);
                    if (!is_object($objCaractPortalActivo))
                    {
                        throw new \Exception("No existe información de caracteristica ORGANIZACION TELCOGRAPH");
                    }

                    $arrayCorreoCaracteristica = array( 
                        'estado'              => "Activo",
                        'personaEmpresaRolId' => $intIdPersonaRol,
                        'caracteristicaId'    => $objCaractPortalActivo->getId()
                    );

                    $objPersonaEmpresaRolCarac = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                            ->findOneBy( $arrayCorreoCaracteristica );

                    if( $objPersonaEmpresaRolCarac )
                    {
                        $objPersonaEmpresaRolCarac->setValor($strCorreoNuevo);
                        $objPersonaEmpresaRolCarac->setFeUltMod(new \DateTime('now'));
                        $objPersonaEmpresaRolCarac->setUsrUltMod($strUsrCreacion);
                        $emComercial->persist($objPersonaEmpresaRolCarac);
                        $emComercial->flush();
                    }

                    /* Se procede a registrar el usuario en LDAP en el nuevo grupo Creados */
                    $arrayParametrosCreaLdap = array(
                                                        "strIpClient"  => $strIpCliente,
                                                        "strGrupoLdap" => $objCarOrganizacion->getValor(),
                                                        "strUid"       => $strCorreoNuevo,
                                                        "strUser"      => $strUsrCreacion
                                                    );
                    $arrayRespuestaCrearGrupoLdap = $serviceTelcoGraph->agregarUsuarioAGrupoLdap($arrayParametrosCreaLdap);
                    
                    if ($arrayRespuestaCrearGrupoLdap["strStatus"] !== "OK")
                    {
                        throw new \Exception("Msj: " . $arrayRespuestaCrearGrupoLdap["strMsj"] . " Excepcion: " .
                            $arrayRespuestaCrearGrupoLdap["strMsjEx"]);
                    }
                    else
                    {
                        $arrayParametrosEliminaGrupoLdap = array("strGrupoLdap"   => $objCarOrganizacion->getValor(),
                                                                "strUid"         => $strEmailActual,
                                                                "strIpClient"    => $strIpCliente,
                                                                "strUsrCreacion" => $strUsrCreacion);

                        $arrayRemoverUseGrupoLdap = $serviceTelcoGraph->removerUsuarioAGrupoLdap($arrayParametrosEliminaGrupoLdap);

                        if ($arrayRemoverUseGrupoLdap["strStatus"] !== "OK")
                        {
                            throw new \Exception("Msj: " . $arrayRemoverUseGrupoLdap["strMsj"] . " Excepcion: " .
                            $arrayRemoverUseGrupoLdap["strMsjEx"]);
                        }
                        else
                        {
                            $arrayParametrosEliminar =  array("strCorreo"      => $strEmailActual,
                                                            "strIpClient"    => $strIpCliente,
                                                            "strUsrCreacion" => $strUsrCreacion);

                            $arrayRespuestaElimnarLdap = $serviceTelcoGraph->eliminarUsuarioLdap($arrayParametrosEliminar);
                            if ($arrayRespuestaElimnarLdap["strStatus"] !== "OK")
                            {
                                throw new \Exception("Msj: " . $arrayRespuestaElimnarLdap["strMsj"] . " Excepcion: " .
                                $arrayRespuestaElimnarLdap["strMsjEx"]);
                            }
                            else
                            {
                                $strStatus  = "OK";
                                $strMensaje = "Se realizó el cambio de usuario correctamente.";
                            }
                        }
                    }
                }
                else
                {
                    throw new \Exception("Msj: " . $arrayRespuestaCreaLdap["strMsj"] . " Excepcion: " .
                    $arrayRespuestaCreaLdap["strMsjEx"]);
                }

            }
        }
        catch(\Exception $objEx)
        {
            $strStatus         = "ERROR";
            $arrayMensajeError = preg_split('/Msj: /',$objEx->getMessage());

            if(count($arrayMensajeError) > 1)
            {
                $strExcepcionError = $arrayMensajeError[1];
                $arrayExecptError  = preg_split('/ Excepcion: /',$strExcepcionError);
                if(count($arrayExecptError) > 1)
                {
                    $strMensajeErrorM  = $arrayExecptError[0];
                }
                else
                {
                    $strMensajeErrorM  = $strExcepcionError;
                }
            }
            else
            {
                $strMensajeErrorM  = $objEx->getMessage();
            }
            $strMensaje        = $strMensajeErrorM.". Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxCambiarUserTgAction',
                                      $objEx->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCliente);
        }

        $arrayRespuesta = array("strStatus"  => $strStatus,
                                "strMensaje" => $strMensaje);
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_414-7917")
     * 
     * ajaxRestablecerDatosLdapTgAction
     * 
     * Función que restablece los datos del LDAP para el monitoreo de telcograf.
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 18-02-2021
     */
    public function ajaxRestablecerDatosLdapTgAction()
    {
        $objResponse       = new JsonResponse();
        $objRequest        = $this->getRequest();
        $strUsuario        = $objRequest->getSession()->get('user');
        $strCodEmpresa     = $objRequest->getSession()->get('idEmpresa');
        $strIpUsuario      = $objRequest->getClientIp();
        $intIdPersonaRol   = $objRequest->get('intIdPersonaRol');
        $serviceUtil       = $this->get('schema.Util');
        $serviceTelcoGraph = $this->get('tecnico.TelcoGraph');
        $emComercial       = $this->get('doctrine')->getManager('telconet');
        $emGeneral         = $this->get('doctrine')->getManager('telconet_general');

        try
        {
            //Verificamos la existencia del cliente.
            $objInfoPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaRol);
            if (!is_object($objInfoPersonaEmpresaRol))
            {
                throw new \Exception("No se tiene información de la persona empresa rol. Por favor notificar al departamento de Sistemas.");
            }

            $objInfoPersona = $objInfoPersonaEmpresaRol->getPersonaId();
            if (!is_object($objInfoPersona))
            {
                throw new \Exception("No se tiene información del cliente. Por favor notificar al departamento de Sistemas.");
            }

            //Validamos las características principales.
            $strCaracteristica     = 'ORGANIZACION_TELCOGRAPH';
            $objCaractOrganizacion = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array('descripcionCaracteristica' => $strCaracteristica,
                                      'estado'                    => "Activo"));

            if (!is_object($objCaractOrganizacion))
            {
                throw new \Exception("No existe la característica $strCaracteristica, o se encuentra Inactivo.");
            }

            $objOrganizacion = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                    ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractOrganizacion->getId(),
                                                           "personaEmpresaRolId" => $intIdPersonaRol,
                                                           "empresaCod"          => $strCodEmpresa,
                                                           "estado"              => "Activo"));

            if (!is_object($objOrganizacion))
            {
                throw new \Exception("El cliente no tiene registrada la característica $strCaracteristica.");
            }

            $strCaracteristica      = 'USUARIO_PORTAL';
            $objCaractUsuarioPortal = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array('descripcionCaracteristica' => $strCaracteristica,
                                      'estado'                    => "Activo"));

            if (!is_object($objCaractUsuarioPortal))
            {
                throw new \Exception("No existe la característica $strCaracteristica, o se encuentra Inactivo.");
            }

            $objUsuarioPortal = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                    ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractUsuarioPortal->getId(),
                                                           "personaEmpresaRolId" => $intIdPersonaRol,
                                                           "empresaCod"          => $strCodEmpresa,
                                                           "estado"              => "Activo"));

            if (!is_object($objUsuarioPortal))
            {
                throw new \Exception("El cliente no tiene registrada la característica $strCaracteristica.");
            }

            $strCaracteristica       = 'PASSWORD_PORTAL';
            $objCaractPasswordPortal = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array('descripcionCaracteristica' => $strCaracteristica,
                                      'estado'                    => "Activo"));

            if (!is_object($objCaractPasswordPortal))
            {
                throw new \Exception("No existe la característica $strCaracteristica, o se encuentra Inactivo.");
            }

            $objPasswordPortal = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                    ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractPasswordPortal->getId(),
                                                           "personaEmpresaRolId" => $intIdPersonaRol,
                                                           "empresaCod"          => $strCodEmpresa,
                                                           "estado"              => "Activo"));

            if (!is_object($objPasswordPortal))
            {
                throw new \Exception("El cliente no tiene registrada la característica $strCaracteristica.");
            }

            //Se valida que el cliente exista en el LDAP, caso contrario se procede a crearlo.
            $strUsuarioPortal   = $objUsuarioPortal->getValor();
            $arrayRespuestaLdap = $serviceTelcoGraph->validarUsuarioLdap(array("strCorreo"      => $strUsuarioPortal,
                                                                               "strUsrCreacion" => $strUsuario,
                                                                               "strIpClient"    => $strIpUsuario));
            if ($arrayRespuestaLdap["strStatus"] === "ERROR" &&
                $arrayRespuestaLdap["strMsj"]    === "Usuario Incorrecto o Inexistente, ingrese nuevamente")
            {
                $strRazonSocial = $objInfoPersona->getRazonSocial();
                $strNombres     = $objInfoPersona->getNombres();
                $strApellidos   = $objInfoPersona->getApellidos();

                //Registramos el usuario en el LDAP.
                $arrayRespuestaLdap = $serviceTelcoGraph->crearClienteLdap(
                        array("strNombre"      => empty($strRazonSocial) ? $strNombres   : $strRazonSocial,
                              "strApellido"    => empty($strRazonSocial) ? $strApellidos : $strRazonSocial,
                              "strMail"        => $strUsuarioPortal,
                              "strPass"        => $objPasswordPortal->getValor(),
                              "strUsrCreacion" => $strUsuario,
                              "strIpClient"    => $strIpUsuario));

                if ($arrayRespuestaLdap["strStatus"] !== "OK")
                {
                    throw new \Exception("Msj: "       .$arrayRespuestaLdap["strMsj"].", ".
                                         "Excepcion: " .$arrayRespuestaLdap["strMsjEx"]);
                }
            }
            else
            {
                if ($arrayRespuestaLdap["strStatus"] == "ERROR")
                {
                    throw new \Exception("Msj: "      .$arrayRespuestaLdap["strMsj"].", ".
                                         "Excepcion: ".$arrayRespuestaLdap["strMsjEx"]);
                }
            }

            //Obtenemos la ruta del ldap clientes.
            $arrayParametrosTelcograph = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('TELCOGRAPH','TECNICO','','RUTA_LDAP_CLIENTES','','','','','',$strCodEmpresa);

            if (empty($arrayParametrosTelcograph))
            {
                throw new \Exception('No existe los datos de la ruta del LDAP clientes.');
            }

            //Se elimina el grupo del ldap para volver a crearlo con el usuario.
            $strOrganizacion = $objOrganizacion->getValor();
            $serviceTelcoGraph->eliminarGrupoLdap(array("strGrupoLdap"   => $strOrganizacion,
                                                        "strUsrCreacion" => $strUsuario,
                                                        "strIpClient"    => $strIpUsuario));

            //Creación de la organización con el usuario.
            $strRutaLdapCliente         = $arrayParametrosTelcograph['valor1'];
            $strRutaLdapGrupoCliente    = $arrayParametrosTelcograph['valor2'];
            $arrayNivelesParametrizados = explode(",", $strRutaLdapGrupoCliente);

            $arrayUser[] = array ("cn"               => $strOrganizacion,
                                  "objectclass"      => array ("groupOfNames", "top"),
                                  "businessCategory" => "1",
                                  "description"      => "Grupo Telcograph para cliente",
                                  "o"                => "appTelcoGraph",
                                  "ou"               => "appTelcoGraph",
                                  "owner"            => $strRutaLdapCliente,
                                  "member"           => "uid=".$strUsuarioPortal.",".$strRutaLdapCliente);

            foreach ($arrayNivelesParametrizados as $strNivel)
            {
                $arrayNivel[] = array ("ou"          => $strNivel,
                                       "objectclass" => array ("top", "organizationalUnit"),);
            }

            //Se procede crear el grupo y asociarlo con el usuario creado.
            $arrayRespuestaLdap = $serviceTelcoGraph->crearGrupoLdap(array("arrayUser"      => $arrayUser,
                                                                           "arrayNivel"     => $arrayNivel,
                                                                           "strUsrCreacion" => $strUsuario,
                                                                           "strIpClient"    => $strIpUsuario));
            if ($arrayRespuestaLdap["strStatus"] !== "OK")
            {
                throw new \Exception("Msj: "       .$arrayRespuestaLdap["strMsj"].", ".
                                     "Excepcion: " .$arrayRespuestaLdap["strMsjEx"]);
            }

            $arrayRespuesta = array("strStatus"  => 'OK',
                                    "strMensaje" => 'Proceso Ejecutado.');
        }
        catch (\Exception $objException)
        {
            $strMensaje = $objException->getMessage();
            $serviceUtil->insertError('InfoServicioController',
                                      'ajaxCrearDatosLdapTgAction',
                                       $objException->getMessage(),
                                       $strUsuario,
                                       $strIpUsuario);

            $arrayRespuesta = array("strStatus"  => 'ERROR',
                                    "strMensaje" => $strMensaje);
        }
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * @Secure(roles="ROLE_428-6457")
     * 
     * ajaxActualizarCorreoSuscripcionMcAfeeAction
     * 
     * Función que realiza la actualización del correo de una suscripción McAfee activa
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 04-06-2019
     * @since 1.0
     */
    public function ajaxActualizarCorreoSuscripcionMcAfeeAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $intIdServicio          = $objRequest->get('intIdServicio');
        $intProductoId          = $objRequest->get('intProductoId');
        $strCorreoMcAfee        = $objRequest->get('strCorreoMcAfee');
        $strUsrCreacion         = $objSession->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $serviceUtil            = $this->get('schema.Util');
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strStatus              = "";
        $strMensaje             = "";
        try
        {
            $arrayParametros                     = array();
            $arrayParametros['intIdServicio']    = $intIdServicio;
            $arrayParametros['intProductoId']    = $intProductoId;
            $arrayParametros['strCorreoMcAfee']  = $strCorreoMcAfee;
            $arrayParametros['strUsrCreacion']   = $strUsrCreacion;
            $arrayParametros['strIpCreacion']    = $strIpCliente;
            $arrayRespuestaCambioCorreo          = $serviceServicioTecnico->cambiarCorreoSuscripcionMcAfee($arrayParametros);
            $strStatus                           = $arrayRespuestaCambioCorreo['strStatus'];
            $strMensaje                          = $arrayRespuestaCambioCorreo['strMensaje'];
        }
        catch(\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxActualizarCorreoSuscripcionMcAfeeAction',
                                      $objEx->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCliente);
        }

        $arrayRespuesta = array("strStatus"  => $strStatus,
                                "strMensaje" => $strMensaje);
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }
    
    /**
     * ajaxGetElementosNetHomeAction
     * 
     * Función para obtener información del detalle de productos a registrar en Telcos pertenecientes a producto NETHOME
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 20-09-2018
     * @since 1.0
     * 
     * @return JsonResponse
     */
    public function ajaxGetElementosNetHomeAction()
    {
	$objRespuesta  = new JsonResponse();
        $objPeticion   = $this->get('request');   
        $objSession    = $objPeticion->getSession();
        $intIdServicio = $objPeticion->get('idServicio');
        $serviceUtil   = $this->get('schema.Util');
        $emComercial   = $this->getDoctrine()->getManager("telconet");
        try
        {
            $arrayParametrosNetHome = array("intIdServicio" => $intIdServicio,
                                            "strProceso"    => "activar");
            $arrayElementosNh = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->getDetalleElementosNethome($arrayParametrosNetHome);
            $strJsonData      = json_encode($arrayElementosNh);
            $strResultado     = '{"total":'.count($arrayElementosNh).',"encontrados":' . $strJsonData . '}';
        }
        catch (Exception $objEx)
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.ajaxGetElementosNetHomeAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
            $strResultado     = '{"total":0,"encontrados":""}';
        }
        $objRespuesta->setContent($strResultado);
        return $objRespuesta;
    }
    
    /**
     * ajaxGetElementosNetFiberAction
     * 
     * Función para obtener información del detalle de productos a registrar en Telcos pertenecientes a producto NETFIBER
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 03-10-2018
     * @since 1.0
     * 
     * @return JsonResponse
     */
    public function ajaxGetElementosNetFiberAction()
    {
	$objRespuesta   = new JsonResponse();
        $objPeticion    = $this->get('request');   
        $objSession     = $objPeticion->getSession();
        $intIdServicio  = $objPeticion->get('idServicio');
        $serviceUtil    = $this->get('schema.Util');
        $emComercial    = $this->getDoctrine()->getManager("telconet");
        $serviceTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strResultado   = '{"total": 0 ,"encontrados": ""}';
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                       ->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            //Se obtiene la caracteristica de cantidad de transceiver
            $objServProdCaractCantTrans = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                             'CANTIDAD_TRANSCEIVER',
                                                                                             $objServicio->getProductoId());
            if(is_object($objServProdCaractCantTrans))
            {
                $intCantidadTransceiver = (int)$objServProdCaractCantTrans->getValor();
                $arrayElementosNetFiber = array();
                for($intI = 0 ; $intI<$intCantidadTransceiver ; $intI++)
                {
                    $arrayElementoNetFiber['tipoElemento']        = "TRANSCEIVER";
                    $arrayElementoNetFiber['serieElemento']       = "";
                    $arrayElementoNetFiber['modeloElemento']      = "";
                    $arrayElementoNetFiber['descripcionElemento'] = "";
                    $arrayElementosNetFiber[] = $arrayElementoNetFiber;
                }
                $strJsonData  = json_encode($arrayElementosNetFiber);
                $strResultado = '{"total":'.count($arrayElementosNetFiber).',"encontrados":' . $strJsonData . '}';
            }
        }
        catch (Exception $objEx)
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.ajaxGetElementosNetFiberAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
            $strResultado = '{"total":0,"encontrados":""}';
        }
        $objRespuesta->setContent($strResultado);
        return $objRespuesta;
    }
    
    /**
     * 
     * Metodo encaragdo de realizar la activacion de servicios L2MPLS
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-05-2018
     * 
     * @return JsonResponse
     */
    public function ajaxActivarServicioL2mplsAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->get('request');
        $objSession             = $objRequest->getSession();
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        
        $objServicio            = $emComercial->getRepository('schemaBundle:InfoServicio')
                                              ->find($objRequest->get('idServicio'));
        
        $arrayParametros                      = array();
        $arrayParametros['objServicio']       = $objServicio;
        $arrayParametros['strUsrCreacion']    = $objSession->get('user');
        $arrayParametros['strElemento']       = $objRequest->get('elementoNombre');
        $arrayParametros['strSubred']         = $objRequest->get('subred');
        $arrayParametros['strMascara']        = $objRequest->get('mascara');
        $arrayParametros['strGateway']        = $objRequest->get('gateway');
        $arrayParametros['strIpServicio']     = $objRequest->get('ipServicio');
        $arrayParametros['strTipoEnlace']     = $objRequest->get('tipoEnlace');
        $arrayParametros['intVirtualConnect'] = $objRequest->get('virtualConnect');
        $arrayParametros['strIpCreacion']     = $objRequest->getClientIp();
        $arrayParametros['intIdSolicitud']    = $objRequest->get('solicitud');
        $arrayParametros['intIdEmpresa']      = $objSession->get('idEmpresa');
        
        $serviceActivacion      = $this->get('tecnico.InfoActivarPuerto');
        $arrayRespuesta         = $serviceActivacion->activarServicioConcentradorL2mpls($arrayParametros);
        
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    
    
    /**
     * reintentarActivacionMcAfeeEnPlanAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Función que sirve para realizar el reintento de la activación de un servicio McAfee dentro del plan
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 19-12-2018
     * 
     * @return  Object $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function reintentarActivacionMcAfeeEnPlanAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $strUsrCreacion         = $objSession->get('user');
        $strCodEmpresa          = $objSession->get('idEmpresa');
        $intIdServicio          = $objRequest->get('idServicio');
        $strIpCreacion          = $objRequest->getClientIp();
        $serviceActivarPuerto   = $this->get('tecnico.InfoActivarPuerto');
        $serviceUtil            = $this->get('schema.Util');
        try
        {
            $arrayParametros        = array("intIdServicio"     => $intIdServicio,
                                            "strTipoProceso"    => "INDIVIDUAL",
                                            "strOpcion"         => "REINTENTO",
                                            "strCodEmpresa"     => $strCodEmpresa,
                                            "strUsrCreacion"    => $strUsrCreacion,
                                            "strClientIp"       => $strIpCreacion);
            $arrayReintentoMcAfee   = $serviceActivarPuerto->activarProductosAdicionalesEnPlan($arrayParametros);
            $strStatus              = $arrayReintentoMcAfee["status"];
            $strMensaje             = $arrayReintentoMcAfee["mensaje"];
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al reintentar la activación, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.reintentarActivacionMcAfeeEnPlanAction', 
                                      $e->getMessage(), 
                                      $objSession->get('user'), 
                                      $strIpCreacion
                                     );
        }
        $objResponse->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objResponse;
    }

    /**
     * reintentarProcesoPromoBwAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Función que sirve para realizar el reintento de la ejecución del proceso de validación de promoción de BW, se 
     * utiliza el mismo perfil de reintento de McAfee según lo indicado por RDA, debido que, IPCC usuará ambas opciones
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 13-09-2019
     * 
     * @return  Object $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function reintentarProcesoPromoBwAction()
    {
        $objResponse        = new JsonResponse();
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $strUsrCreacion     = $objSession->get('user');
        $strCodEmpresa      = $objSession->get('idEmpresa');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
        $intIdServicio      = $objRequest->get('idServicio');
        $strIpCreacion      = $objRequest->getClientIp();
        $servicePromociones = $this->get('tecnico.Promociones');
        $serviceGeneral     = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil        = $this->get('schema.Util');
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        try
        {
            $objProductoInternet = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                               ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO", 
                                                                 "estado"              => "Activo",
                                                                 "empresaCod"          => $strCodEmpresa));
            if(!is_object($objProductoInternet))
            {
                throw new \Exception("No se logró recuperar información del producto internet.");
            }
            
             //OBTIENE INFORMACIÓN DEL SERVICIO
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                       ->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se logró recuperar información del servicio a procesar.");
            }
                
            $objSpcProcesoPromo = $serviceGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                     'PROCESO-PROMO',
                                                                                     $objProductoInternet);
            
            if(!is_object($objSpcProcesoPromo))
            {
                throw new \Exception("No se logró recuperar información del proceso promocional.");
            }
            
            $objSpcValorPromo = $serviceGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                   'VALOR-PROMO',
                                                                                   $objProductoInternet);
             
            if(!is_object($objSpcValorPromo))
            {
                throw new \Exception("No se logró recuperar información del valor del proceso promocional.");
            }
             
            $arrayParametrosInfoBw = array();
            $arrayParametrosInfoBw['intIdServicio']     = $objServicio->getId();
            $arrayParametrosInfoBw['intIdEmpresa']      = $strCodEmpresa;
            $arrayParametrosInfoBw['strTipoProceso']    = $objSpcProcesoPromo->getValor();
            $arrayParametrosInfoBw['strValor']          = $objSpcValorPromo->getValor();
            $arrayParametrosInfoBw['strUsrCreacion']    = $strUsrCreacion;
            $arrayParametrosInfoBw['strIpCreacion']     = $strIpCreacion;
            $arrayParametrosInfoBw['strPrefijoEmpresa'] = $strPrefijoEmpresa;
            $arrayRespuesta = $servicePromociones->configurarPromocionesBW($arrayParametrosInfoBw);
            $strStatus  = $arrayRespuesta["strStatus"];
            $strMensaje = $arrayRespuesta["strMensaje"];
        }
        catch(\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al reintentar el proceso de validación de promoción, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.reintentarProcesoPromoBwAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $strIpCreacion
                                     );
        }
        $objResponse->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objResponse;
    }
    
    /**
     * confirmarServicioExtenderDualBandAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Función que confirma el servicio Extender Dual Band
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 10-10-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 20-06-2019  Se agregó parámetro "strTipoServicio" para soportar nuevas operaciones de equipo Extender
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 24-09-2020 Se agrega programación para activar el servicio de Internet automáticamente cuando se agrega el Extender Dual Band
     *                         en el servicio W+AP
     * 
     * @return  Object $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function confirmarServicioExtenderDualBandAction()
    {
        $objRespuesta                   = new JsonResponse();
        $emComercial                    = $this->get('doctrine')->getManager('telconet');
        $emSeguridad                    = $this->get('doctrine')->getManager('telconet_seguridad');
        $objPeticion                    = $this->get('request');
        $objSession                     = $objPeticion->getSession();
        $strUsrCreacion                 = $objSession->get('user');
        $strEmpresaCod                  = $objSession->get('idEmpresa');
        $strPrefijoEmpresa              = $objSession->get('prefijoEmpresa');
        $objEmpleadoSesion              = $objSession->get('empleado');
        $intIdServicio                  = $objPeticion->get('idServicio');
        $intIdAccion                    = $objPeticion->get('idAccion');
        $strObsActivarServicio          = $objPeticion->get('strObservacionServicio');
        $strIpCreacion                  = $objPeticion->getClientIp();
        $strSerieExtenderDualBand       = $objPeticion->get('strSerieExtenderDualBand');
        $strModeloExtenderDualBand      = $objPeticion->get('strModeloExtenderDualBand');
        $strMacExtenderDualBand         = $objPeticion->get('strMacExtenderDualBand');
        $intIdServicioInternet          = $objPeticion->get('intIdServicioInternet');
        $intIdSolicitudServicio         = $objPeticion->get('intIdSolicitudServicio');
        $strTipoServicio                = $objPeticion->get('strTipoServicio');
        $serviceUtil                    = $this->get('schema.Util');
        $serviceConfirmarServicio       = $this->get('tecnico.InfoConfirmarServicio');
        $arrayPeticiones                = array();
        $strMostrarMensaje              = "NO";
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontró información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontró información técnica del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontró información de la acción");
            }
            
            $arrayPeticiones['objServicio']                     = $objServicio;
            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
            $arrayPeticiones['objAccion']                       = $objAccion;
            $arrayPeticiones['strEmpresaCod']                   = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
            $arrayPeticiones['strSerieExtenderDualBand']        = $strSerieExtenderDualBand;
            $arrayPeticiones['strModeloExtenderDualBand']       = $strModeloExtenderDualBand;
            $arrayPeticiones['strMacExtenderDualBand']          = $strMacExtenderDualBand;
            $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
            $arrayPeticiones['strTipoServicio']                 = $strTipoServicio;
            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
            $arrayPeticiones['strObservacion']                  = $strObsActivarServicio;
            $arrayPeticiones['strPrefijoEmpresa']               = $strPrefijoEmpresa;
            $arrayPeticiones['objEmpleadoSesion']               = $objEmpleadoSesion;
            
            $arrayConfirmarServicio = $serviceConfirmarServicio->confirmarServicioExtenderDualBand($arrayPeticiones);
            $strStatus              = $arrayConfirmarServicio["status"];
            $strMensaje             = $arrayConfirmarServicio["mensaje"];
            $strMostrarMensaje      = $arrayConfirmarServicio["mostrarMensaje"];
            $objServicioInternet    = $arrayConfirmarServicio["objServicioInternet"];
            if ($strStatus !== "OK")
            {
                throw new \Exception($strMensaje);
            }
            if(is_object($objServicioInternet) && $objServicioInternet->getEstado() === "EnVerificacion"
                && is_object($objServicio) && is_object($objServicio->getProductoId()) 
                && $objServicio->getProductoId()->getNombreTecnico() === "WDB_Y_EDB")
            {
                $serviceGrabarHistorial     = $this->get('tecnico.InfoGrabarHistorial');
                $strStatusGrabarHistorial   = $serviceGrabarHistorial->grabarHistorial(
                                                                        array(  'idEmpresa'             => $strEmpresaCod,
                                                                                'prefijoEmpresa'        => $strPrefijoEmpresa,
                                                                                'idServicio'            => $objServicioInternet->getId(),
                                                                                'usrCreacion'           => $strUsrCreacion,
                                                                                'ipCreacion'            => $strIpCreacion,
                                                                                'idAccion'              => "847",
                                                                                'empleadoSesion'        => $objEmpleadoSesion,
                                                                                'esISB'                 => "NO"));
                if($strStatusGrabarHistorial !== "OK")
                {
                    $strMostrarMensaje  = "SI";
                    $strMensaje         .= "No se ha podido activar el servicio de Internet: ".$strStatusGrabarHistorial;
                }
            }
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al confirmar el servicio, favor notificar a sistemas.';
            if($strMostrarMensaje === "SI")
            {
                $strMensaje = $e->getMessage();
            }
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.confirmarServicioExtenderDualBandAction', 
                                      $e->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objRespuesta;
    }
    
    /**
     * confirmarServicioNetfiberAction
     * 
     * @Secure(roles="ROLE_151-847")
     * 
     * Función que cambia de estado a Activo al servicio Netfiber
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 02-10-2018
     * 
     * @return  Object $objRespuesta   Objeto JsonResponse donde se almacena el resultado de la ejecución del proceso
     */
    public function confirmarServicioNetfiberAction()
    {
        $objRespuesta                   = new JsonResponse();
        $emComercial                    = $this->get('doctrine')->getManager('telconet');
        $emSeguridad                    = $this->get('doctrine')->getManager('telconet_seguridad');
        $objPeticion                    = $this->get('request');
        $objSession                     = $objPeticion->getSession();
        $strUsrCreacion                 = $objSession->get('user');
        $strEmpresaCod                  = $objSession->get('idEmpresa');
        $strPrefijoEmpresa              = $objSession->get('prefijoEmpresa');
        $objEmpleadoSesion              = $objSession->get('empleado');
        $intIdServicio                  = $objPeticion->get('idServicio');
        $intIdAccion                    = $objPeticion->get('idAccion');
        $strObsActivarServicio          = $objPeticion->get('strObservacionServicio');
        $strIpCreacion                  = $objPeticion->getClientIp();
        $strSerieNetfiber               = $objPeticion->get('strSerieNetfiber');
        $intIdServicioInternet          = $objPeticion->get('intIdServicioInternet');
        $intIdSolicitudServicio         = $objPeticion->get('intIdSolicitudServicio');
        $strDatosElementos              = $objPeticion->get('jsonDatosElementos');
        $serviceUtil                    = $this->get('schema.Util');
        $serviceConfirmarServicio       = $this->get('tecnico.InfoConfirmarServicio');
        $arrayPeticiones                = array();
        $strMensajeRespuesta            = "ERROR";

        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No se encontro información técnica del servicio");
            }
            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
            if (!is_object($objAccion))
            {
                throw new \Exception("No se encontro información de la acción");
            }
            $objProducto = $objServicio->getProductoId();
            if (!is_object($objProducto))
            {
                throw new \Exception("El servicio no es un producto adicional");
            }
            $arrayPeticiones['ojbServicio']                     = $objServicio;
            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
            $arrayPeticiones['objProducto']                     = $objProducto;
            $arrayPeticiones['objAccion']                       = $objAccion;
            $arrayPeticiones['strEmpresaCod']                   = $strEmpresaCod;
            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
            $arrayPeticiones['strSerieNetfiber']                = $strSerieNetfiber;
            $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
            $arrayPeticiones['strJsonDatosElementos']           = $strDatosElementos;
                    
            $strStatus = $serviceConfirmarServicio->confirmarServicioNetfiber($arrayPeticiones);
            
            if ($strStatus == "OK")
            {
                $strMensajeRespuesta = $strStatus;
                $arrayParametrosMail =   array(
                                               "servicio"                      => $objServicio,
                                               "prefijoEmpresa"                => $strPrefijoEmpresa,
                                               "empleadoSesion"                => $objEmpleadoSesion,
                                               "observacionActivarServicio"    => $strObsActivarServicio,
                                               "idEmpresa"                     => $strEmpresaCod,
                                               "user"                          => $strUsrCreacion,
                                               "ipClient"                      => $strIpCreacion
                                              );
                
                $serviceConfirmarServicio->envioMailConfirmarServicio($arrayParametrosMail);
            }
            else
            {
                throw new \Exception("Se presentaron errores al confirmar la activación del servicio Netfiber");
            }            
        }
        catch(\Exception $ex)
        {
            $strMensajeRespuesta = 'Se presentaron errores al confirmar el servicio, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.confirmarServicioNetfiberAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        $objRespuesta->setData(array('strStatus' => $strMensajeRespuesta));
        return $objRespuesta;
    }
    

    /**
     * Función que obtiene los equipos a facturar por cancelación anticipada
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 - 28-08-2018
     *
     * Se agrega envío de  punto en sesión en array de parámetros.
     * @author Madeline Haz <mhaz@telconet.ec>
     * @version 1.1 - 03-07-2019
     *     
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetEquiposFacturarAction()
    {
        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objRequest             = $this->get('request');
        $intIdServicio          = $objRequest->get('idServicio');
        $strDescripcionProducto = $objRequest->get('descripcionProducto');
        $objSession             = $objRequest->getSession();
        $intEmpresaId           = $objSession->get('idEmpresa'); 
        $arrayPtoSession        = $objSession->get('ptoCliente');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $serviceSolicitudes     = $this->get('comercial.Solicitudes');

        $arrayParametros                           = array();
        $arrayParametros['intServicioId']          = $intIdServicio;          
        $arrayParametros['strEmpresaCod']          = $intEmpresaId;
        $arrayParametros['serviceSolicitud']       = $serviceSolicitudes;  
        $arrayParametros['intPtoSessionId']        = $arrayPtoSession['id'];
        $arrayParametros['descripcionProducto']    = $strDescripcionProducto; 
        $arrayParametros['strParametro']           = 'RETIRO_EQUIPOS_SOPORTE';
        $arrayParametros['strProceso']             = 'FACTURACION_RETIRO_EQUIPOS';
        $arrayParametros['strModulo']              = 'FINANCIERO';
        
        $objJson   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                 ->getJsonEquiposFacturar($arrayParametros); 
        $objResponse->setContent($objJson);
        
        return $objResponse;
    } 
    
    

    /**
     * Función que obtiene los valores a facturar por cancelación voluntaria.
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 - 28-08-2018
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetValoresFacturarAction()
    {
        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objRequest                           = $this->get('request');
        $intIdServicio                        = $objRequest->get('idServicio');
        $strDescripcionProducto               = $objRequest->get('descripcionProducto');
        $objSession                           = $objRequest->getSession();
        $strEmpresaCod                        = $objSession->get('idEmpresa');
        $arrayPtoSession                      = $objSession->get('ptoCliente');
       
        $emComercial                          = $this->get('doctrine')->getManager('telconet');
        $emFinanciero                         = $this->get('doctrine')->getManager("telconet_financiero");                                  
        $arrayParametros                      = array();
        $arrayParametros['intIdServicio']     = $intIdServicio;
        $arrayParametros['strEmpresaCod']     = $strEmpresaCod;
        $arrayParametros['intPtoSessionId']   = $arrayPtoSession['id'];
        $arrayParametros['descripProducto']   = $strDescripcionProducto;        
        $arrayParametros['emFinanciero']      = $emFinanciero;  
        $arrayParametros['strParametro']      = 'RETIRO_EQUIPOS_SOPORTE';
        $arrayParametros['strDescripcion']    = 'FACTURACION_RETIRO_EQUIPOS';
        $arrayParametros['strModulo']         = 'FINANCIERO';
        
        $objJson   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                 ->getJsonValoresFacturar($arrayParametros); 
        $objResponse->setContent($objJson);
        
        return $objResponse;
    }

   /**
     * Función que ejecuta facturación y cancelación de servicios por cancelación voluntaria.
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 - 10-09-2018
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxEjecutarCancelacionVoluntariaAction()
    {
        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');       
        $objJson     = json_encode('OK');
        $objResponse->setContent($objJson);
        return $objResponse;
    }
    
    
    /**
     * Función que sirve para ejecutar el cambio a un equipo Wifi Dual Band
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 26-12-2018
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 13-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO' y 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 20-09-2020 - Se modifica validación de modelo de Wifi Dual Band, tomando en cuenta el nuevo parámetro para dicha validación
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 12-10-2020 Se obtiene el valor de la variable strModeloWifiDualBand y se envía el correcto valor4 para verificar los 
     *                         modelos de Wifi Dual Band
     *
     */
    public function cambioEquiposDualBandAction()
    {
        $objRespuesta       = new JsonResponse();
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura  = $this->get('doctrine')->getManager("telconet_infraestructura");
        $emGeneral          = $this->get('doctrine')->getManager('telconet_general');
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $strCodEmpresa      = $objSession->get('idEmpresa');
        $strPrefijoEmpresa  = $objSession->get('prefijoEmpresa');
        $strIpCreacion      = $objRequest->getClientIp();
        $strUsrCreacion     = $objSession->get('user');
        $serviceUtil        = $this->get('schema.Util');
        try
        {
            $intIdServicio  = $objRequest->get('intIdServicio');
            $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                 ->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha podido obtener el servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if(!is_object($objServicioTecnico))
            {
                throw new \Exception("No se ha podido obtener el servicio técnico");
            }
            
            $intIdElementoOlt   = $objServicioTecnico->getElementoId();
            if(!isset($intIdElementoOlt) || empty($intIdElementoOlt))
            {
                throw new \Exception("No se pudo obtener el olt asociado al servicio de Internet contratado");
            }
            $objElementoOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoOlt);
            if(!is_object($objElementoOlt))
            {
                throw new \Exception("No se ha podido obtener el olt del servicio de Internet contratado");
            }
            
            $intIdElementoCliente   = $objServicioTecnico->getElementoClienteId();
            if(!isset($intIdElementoCliente) || empty($intIdElementoCliente))
            {
                throw new \Exception("No se pudo obtener el equipo del cliente del servicio de Internet contratado");
            }
            $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoCliente);
            if(!is_object($objElementoCliente))
            {
                throw new \Exception("No se ha podido obtener el elemento del cliente");
            }
            
            $objModeloElementoOlt               = $objElementoOlt->getModeloElementoId();
            $arrayVerificaModeloWifiDualBand    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        'MODELOS_EQUIPOS',
                                                                        $objModeloElementoOlt->getMarcaElementoId()->getNombreMarcaElemento(),
                                                                        $objModeloElementoOlt->getNombreModeloElemento(),
                                                                        'WIFI DUAL BAND',
                                                                        $objRequest->get('strModeloWifiDualBand'),
                                                                        $strCodEmpresa);
            if(!isset($arrayVerificaModeloWifiDualBand) || empty($arrayVerificaModeloWifiDualBand))
            {
                throw new \Exception("Modelo ".$objRequest->get('strModeloWifiDualBand')." no permitido");
            }
            
            $strNombreTipoWifiDualBand = $objElementoCliente->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
            
            $arrayPeticiones[] = array( 'intIdDepartamento'      => $objSession->get('intIdDepartamento'),
                                        'idEmpresa'              => $strCodEmpresa,
                                        'prefijoEmpresa'         => $strPrefijoEmpresa,
                                        'idServicio'             => $intIdServicio,
                                        'idElemento'             => $objElementoCliente->getId(),
                                        'modeloCpe'              => $objRequest->get('strModeloWifiDualBand'),
                                        'ipCpe'                  => "",
                                        'idResponsable'          => "",
                                        'tipoResponsable'        => "",
                                        'nombreCpe'              => "",
                                        'macCpe'                 => $objRequest->get('strMacWifiDualBand'),
                                        'macCpeBck'              => "",
                                        'serieCpe'               => $objRequest->get('strSerieWifiDualBand'),
                                        'descripcionCpe'         => "",
                                        'tipoElementoCpe'        => $strNombreTipoWifiDualBand, 
                                        'strEsAgregarEquipoMasivo' => $objRequest->get('strEsAgregarEquipoMasivo')?
                                                                      $objRequest->get('strEsAgregarEquipoMasivo'):"NO",
                                        'nombreInterface'        => "",
                                        'nombreInterfaceBck'     => "",
                                        'interfacesConectadas'   => "",
                                        'intIdElementoWifi'      => "",
                                        'strModeloWifi'          => "",
                                        'strMacWifi'             => "",
                                        'strSerieWifi'           => "",
                                        'strDescripcionWifi'     => "",
                                        'strNombreWifi'          => "",
                                        'strTieneMigracionHw'    => "NO",
                                        'strEquipoCpeHw'         => "",
                                        'strEquipoWifiAdicional' => "",
                                        'strAgregarWifi'         => "",
                                        'strEsSmartWifi'         => "NO",
                                        'strEsApWifi'            => "NO",
                                        'usrCreacion'            => $strUsrCreacion,
                                        'esPseudoPe'             => 'N',
                                        'ipCreacion'             => $strIpCreacion,
                                        'serNaf'                 => $this->container->getParameter('database_host_naf'),
                                        'ptoNaf'                 => $this->container->getParameter('database_port_naf'),
                                        'sidNaf'                 => $this->container->getParameter('database_name_naf'),
                                        'usrNaf'                 => $this->container->getParameter('user_naf'),
                                        'pswNaf'                 => $this->container->getParameter('passwd_naf'),
                                        'host'                   => $this->container->getParameter('host'),
                                        'strEsExtenderDualBand'  => "NO",
                                        'cambioEquiposDualBand'  => "SI"
                                  );
            /* @var $serviceCambioElemento InfoCambioElementoService */
            $serviceCambioElemento          = $this->get('tecnico.InfoCambioElemento');
            $arrayRespuestaCambioElemento   = $serviceCambioElemento->cambioElemento($arrayPeticiones);
            $strStatus                      = $arrayRespuestaCambioElemento[0]['status'];
            $strMensaje                     = $arrayRespuestaCambioElemento[0]['mensaje'];
        } 
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al realizar el cambio a Wifi Dual Band, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.cambioEquiposDualBandAction', 
                                      $e->getMessage(), 
                                      $strUsrCreacion, 
                                      $strIpCreacion
                                     );
        }
        $objRespuesta->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objRespuesta;
    }
    
    /**
     * Función que sirve para ejecutar el cambio de un ont desde el grid técnico
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 15-04-2021
     * 
     */
    public function cambioEquipoOntPorSolAgregarEquipoAction()
    {
        $objRespuesta                       = new JsonResponse();
        $emComercial                        = $this->get('doctrine')->getManager('telconet');
        $emInfraestructura                  = $this->get('doctrine')->getManager("telconet_infraestructura");
        $emGeneral                          = $this->get('doctrine')->getManager('telconet_general');
        $objRequest                         = $this->getRequest();
        $objSession                         = $objRequest->getSession();
        $strCodEmpresa                      = $objSession->get('idEmpresa');
        $strPrefijoEmpresa                  = $objSession->get('prefijoEmpresa');
        $strIpCreacion                      = $objRequest->getClientIp();
        $strUsrCreacion                     = $objSession->get('user');
        $serviceUtil                        = $this->get('schema.Util');
        $strTipoOntNuevoPorSolAgregarEquipo = $objRequest->get('strTipoOntNuevoPorSolAgregarEquipo');
        $strModeloOnt                       = $objRequest->get('strModeloOnt');
        $strMacOnt                          = $objRequest->get('strMacOnt');
        $strSerieOnt                        = $objRequest->get('strSerieOnt');
        $intIdServicio                      = $objRequest->get('intIdServicio');
        try
        {
            if(!isset($strTipoOntNuevoPorSolAgregarEquipo) && !empty($strTipoOntNuevoPorSolAgregarEquipo))
            {
                throw new \Exception("No se ha enviado correctamente el tipo de ont al que se desea cambiar");
            }
            
            $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                 ->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha podido obtener el servicio");
            }
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if(!is_object($objServicioTecnico))
            {
                throw new \Exception("No se ha podido obtener el servicio técnico");
            }
            
            $intIdElementoOlt   = $objServicioTecnico->getElementoId();
            if(!isset($intIdElementoOlt) || empty($intIdElementoOlt))
            {
                throw new \Exception("No se pudo obtener el olt asociado al servicio de Internet contratado");
            }
            $objElementoOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoOlt);
            if(!is_object($objElementoOlt))
            {
                throw new \Exception("No se ha podido obtener el olt del servicio de Internet contratado");
            }
            
            $intIdElementoCliente   = $objServicioTecnico->getElementoClienteId();
            if(!isset($intIdElementoCliente) || empty($intIdElementoCliente))
            {
                throw new \Exception("No se pudo obtener el equipo del cliente del servicio de Internet contratado");
            }
            $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoCliente);
            if(!is_object($objElementoCliente))
            {
                throw new \Exception("No se ha podido obtener el elemento del cliente");
            }
            
            $objModeloElementoOlt               = $objElementoOlt->getModeloElementoId();
            $arrayVerificaModeloWifiDualBand    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        'MODELOS_EQUIPOS',
                                                                        $objModeloElementoOlt->getMarcaElementoId()->getNombreMarcaElemento(),
                                                                        $objModeloElementoOlt->getNombreModeloElemento(),
                                                                        $strTipoOntNuevoPorSolAgregarEquipo,
                                                                        $strModeloOnt,
                                                                        $strCodEmpresa);
            if(!isset($arrayVerificaModeloWifiDualBand) || empty($arrayVerificaModeloWifiDualBand))
            {
                throw new \Exception("Modelo ".$strModeloOnt." no permitido");
            }
            
            $strNombreTipoElementoOnt   = $objElementoCliente->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
            
            $arrayPeticiones[] = array( 'intIdDepartamento'                 => $objSession->get('intIdDepartamento'),
                                        'idEmpresa'                         => $strCodEmpresa,
                                        'prefijoEmpresa'                    => $strPrefijoEmpresa,
                                        'idServicio'                        => $intIdServicio,
                                        'idElemento'                        => $objElementoCliente->getId(),
                                        'modeloCpe'                         => $strModeloOnt,
                                        'macCpe'                            => $strMacOnt,
                                        'serieCpe'                          => $strSerieOnt,
                                        'tipoElementoCpe'                   => $strNombreTipoElementoOnt,
                                        'strTieneMigracionHw'               => "NO",
                                        'strEsSmartWifi'                    => "NO",
                                        'strEsApWifi'                       => "NO",
                                        'usrCreacion'                       => $strUsrCreacion,
                                        'esPseudoPe'                        => 'N',
                                        'ipCreacion'                        => $strIpCreacion,
                                        'serNaf'                            => $this->container->getParameter('database_host_naf'),
                                        'ptoNaf'                            => $this->container->getParameter('database_port_naf'),
                                        'sidNaf'                            => $this->container->getParameter('database_name_naf'),
                                        'usrNaf'                            => $this->container->getParameter('user_naf'),
                                        'pswNaf'                            => $this->container->getParameter('passwd_naf'),
                                        'host'                              => $this->container->getParameter('host'),
                                        'strEsExtenderDualBand'             => "NO",
                                        'strEsCambioOntPorSolAgregarEquipo' => "SI"
                                  );
            /* @var $serviceCambioElemento InfoCambioElementoService */
            $serviceCambioElemento          = $this->get('tecnico.InfoCambioElemento');
            $arrayRespuestaCambioElemento   = $serviceCambioElemento->cambioElemento($arrayPeticiones);
            $strStatus                      = $arrayRespuestaCambioElemento[0]['status'];
            $strMensaje                     = $arrayRespuestaCambioElemento[0]['mensaje'];
        } 
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al realizar el cambio de ont, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.cambioEquipoOntPorSolAgregarEquipoAction', 
                                      $e->getMessage(), 
                                      $strUsrCreacion, 
                                      $strIpCreacion
                                     );
        }
        $objRespuesta->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objRespuesta;
    }
    

    /**
     * trasladarExtenderDualBandAction
     * 
     * Función que sirve para ejecutar el traslado del equipo Extender Dual Band
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 20-02-2019
     * 
     */
    public function trasladarExtenderDualBandAction()
    {
        $objRespuesta       = new JsonResponse();
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $strEmpresaCod      = $objSession->get('idEmpresa');
        $strIpCreacion      = $objRequest->getClientIp();
        $strUsrCreacion     = $objSession->get('user');
        $serviceUtil        = $this->get('schema.Util');
        $strMostrarMensaje  = "NO";
        try
        {
            $intIdServicio    = $objRequest->get('intIdServicio');
            $intIdServicioRef = $objRequest->get('intIdServicioRef');
            $strSerieElemento = $objRequest->get('strSerieElemento');
            $strMacElemento   = $objRequest->get('strMacElemento');
            
            $arrayPeticiones = array( 'intIdServicio'         => $intIdServicio,
                                      'intIdServicioInternet' => $intIdServicioRef,
                                      'strSerieElemento'      => $strSerieElemento,
                                      'strMacElemento'        => $strMacElemento,                
                                      'strUsrCreacion'        => $strUsrCreacion,
                                      'strIpCreacion'         => $strIpCreacion,
                                      'strEmpresaCod'         => $strEmpresaCod
                                    );
            /* @var $serviceCambioElemento InfoActivarPuerto */
            $serviceActivarPuerto      = $this->get('tecnico.InfoActivarPuerto');
            $arrayRespuestaTrasladoEDB = $serviceActivarPuerto->trasladarExtenderDualBand($arrayPeticiones);
            $strStatus         = $arrayRespuestaTrasladoEDB['strStatus'];
            $strMensaje        = $arrayRespuestaTrasladoEDB['strMensaje'];
            $strMostrarMensaje = $arrayRespuestaTrasladoEDB['strMostrarMensaje'];
            if ($strStatus !== "OK")
            {
                throw new \Exception($strMensaje);
            }            
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al realizar el traslado del Extender Dual Band, favor notificar a sistemas.';
            
            if($strMostrarMensaje === "SI")
            {
                $strMensaje = $e->getMessage();
            }
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.trasladarExtenderDualBandAction', 
                                      $e->getMessage(), 
                                      $strUsrCreacion, 
                                      $strIpCreacion
                                     );
        }
        $objRespuesta->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objRespuesta;
    }
    
    /**
     * sincronizarExtenderDualBandAction
     * 
     * Función que sirve para ejecutar el traslado del equipo Extender Dual Band
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 20-02-2019
     * 
     */
    public function sincronizarExtenderDualBandAction()
    {
        $objRespuesta       = new JsonResponse();
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $strEmpresaCod      = $objSession->get('idEmpresa');
        $strIpCreacion      = $objRequest->getClientIp();
        $strUsrCreacion     = $objSession->get('user');
        $serviceUtil        = $this->get('schema.Util');
        $strMostrarMensaje  = "NO";
        try
        {
            $intIdServicio    = $objRequest->get('intIdServicio');
            $intIdServicioRef = $objRequest->get('intIdServicioRef');
            $strSerieElemento = $objRequest->get('strSerieElemento');
            $strMacElemento   = $objRequest->get('strMacElemento');
            
            $arrayPeticiones = array( 'intIdServicio'         => $intIdServicio,
                                      'intIdServicioInternet' => $intIdServicioRef,
                                      'strSerieElemento'      => $strSerieElemento,
                                      'strMacElemento'        => $strMacElemento,                
                                      'strUsrCreacion'        => $strUsrCreacion,
                                      'strIpCreacion'         => $strIpCreacion,
                                      'strEmpresaCod'         => $strEmpresaCod
                                    );
            /* @var $serviceActivarPuerto InfoActivarPuerto */
            $serviceActivarPuerto      = $this->get('tecnico.InfoActivarPuerto');
            $arrayRespuestaSincronizarEDB = $serviceActivarPuerto->sincronizarExtenderDualBand($arrayPeticiones);
            $strStatus         = $arrayRespuestaSincronizarEDB['strStatus'];
            $strMensaje        = $arrayRespuestaSincronizarEDB['strMensaje'];
            $strMostrarMensaje = $arrayRespuestaSincronizarEDB['strMostrarMensaje'];
            if ($strStatus !== "OK")
            {
                throw new \Exception($strMensaje);
            }            
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al realizar el traslado del Extender Dual Band, favor notificar a sistemas.';
            
            if($strMostrarMensaje === "SI")
            {
                $strMensaje = $e->getMessage();
            }
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.sincronizarExtenderDualBandAction', 
                                      $e->getMessage(), 
                                      $strUsrCreacion, 
                                      $strIpCreacion
                                     );
        }
        $objRespuesta->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objRespuesta;
    }

    /**
     * Función que obtiene los parametros de facturación detallada a visualizarse en pantalla de cancelación voluntaria.
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 - 28-08-2018
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetParamFactDetalladaAction()
    {
        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objRequest             = $this->get('request');
        $intIdServicio          = $objRequest->get('idServicio');
        $objSession             = $objRequest->getSession();
        $strEmpresaCod          = $objSession->get('idEmpresa');        
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emFinanciero           = $this->get('doctrine')->getManager("telconet_financiero");
        
        $arrayParametros                           = array();
        $arrayParametros['strNombreParametroCab']  = 'FACTURACION SOLICITUD DETALLADA';
        $arrayParametros['strEstado']              = 'Activo';
        $arrayParametros['strUsrCreacion']         = 'telcos_cancel_volun';
        $arrayParametros['intIdServicio']          = $intIdServicio;        
        $arrayParametros['strEmpresaCod']          = $strEmpresaCod;        
        $arrayParametros['emFinanciero']           = $emFinanciero;
        
        $objJson   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                 ->getJsonParamFacturaracionDetallada($arrayParametros); 
        $objResponse->setContent($objJson);
        
        return $objResponse;
    }    
    
    /**
     * Función que obtiene los Productos Adicionales para la Cancelacion Voluntaria
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 - 28-08-2022
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetProdAdicionalesCVAction()
    {
     
        $objRequest                                = $this->getRequest();
        $arrayParametros                           = array();
        $arrayParametros['strNombreParametroCab']  = 'PRODUCTOS_ADICIONALES_CV';
        $arrayParametros['strEstado']              = 'Activo';
        $arrayParametros['strPresentaInterfaz']    = 'S';
        $arrayParametros['intIdEmpresa']           = $objRequest->getSession()->get('idEmpresa');
        
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $arrayProdAdicionalesCV = $serviceServicioTecnico->getProdAdicionalesCV($arrayParametros);

        $objResponse = new Response(json_encode(array('prodAdicionalesCV' => $arrayProdAdicionalesCV)));
        $objResponse->headers->set('Content-type', 'text/json');
        return $objResponse;
         
    }    
    
    /**
     * Función que obtiene los planes y productos asociados al cliente para la Cancelacion Voluntaria
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 - 28-08-2022
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetPlanProductosClienteCVAction()
    {  
        $objRequest                                = $this->getRequest();   
        $emFinanciero                              = $this->get('doctrine')->getManager("telconet_financiero");       
        $objSession                                = $objRequest->getSession();
        $arrayPtoSession                           = $objSession->get('ptoCliente');
        $arrayParametros                           = array();
        $arrayMergeProductosFecha                  = array();
        $arrayParametros['intIdPunto']             = $arrayPtoSession['id'];
        $arrayParametros['intIdServicio']          = $objRequest->get('idServicio');
        $arrayParametros['strDescripcionProducto'] = $objRequest->get('descripcionProducto'); 
        $arrayParametros['arrayEstados']           = array('Activo','In-Corte'); 
        $strDescProductoCliente                    = "";
                
        $serviceServicioTecnico      = $this->get('tecnico.InfoServicioTecnico');
        $arrayPlanProductosClienteCV = $serviceServicioTecnico->getPlanProductosClienteCV($arrayParametros);
        
        
        foreach($arrayPlanProductosClienteCV as $objPlanProductosClienteCV)
        {
            
            if(strtoupper($objPlanProductosClienteCV['nombreProducto'])==='NETLIFECAM'||
               strtoupper($objPlanProductosClienteCV['nombreProducto'])==='EXTENDER_DUAL_BAND'||
               strtoupper($objPlanProductosClienteCV['nombreProducto'])==='ECDF' ||
               strtoupper($objPlanProductosClienteCV['descripcionProducto'])==='INTERNET DEDICADO' )
            {
                $strDescProductoCliente = strtoupper($objPlanProductosClienteCV['nombreProducto']);
            }
            else
            {
                $strDescProductoCliente = strtoupper($objPlanProductosClienteCV['descripcionProducto']);
            }
            
            
            $arrayParamFecha                      = array();
            $arrayParamFecha['intIdServicio']     = $objPlanProductosClienteCV['idServicio'];
            $arrayParamFecha['intPtoSessionId']   = $arrayPtoSession['id'];
            $arrayParamFecha['descripProducto']   = $strDescProductoCliente;    
            $arrayParamFecha['emFinanciero']      = $emFinanciero; 
                        
            $arrayFechaActivacionProdCV = $serviceServicioTecnico->getFechaActivacionProdCV($arrayParamFecha);
                                               
                                    
             $arrayMerge = array('idServicio'      => $objPlanProductosClienteCV['idServicio'],
                                 'idProducto'      => $objPlanProductosClienteCV['idProducto'],
                                 'nombreProducto'  => $strDescProductoCliente,
                                 'fechaActivacion' => $arrayFechaActivacionProdCV['fechaActivacion'],
                               );
             
             array_push($arrayMergeProductosFecha,$arrayMerge);
             
        }
       
        $objResponse = new Response(json_encode(array('planProductosClienteCV' => $arrayMergeProductosFecha)));
        $objResponse->headers->set('Content-type', 'text/json');
        return $objResponse;
         
    }    
    
    
    /**
     * Función que valida la permanencia minima del producto que tiene una promocion aplicada.
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 - 5-09-2022
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */    
    public function ajaxGetVigenciaPromocionAction()
    {
     
        $objRequest                          = $this->getRequest();
        $emComercial                         = $this->get('doctrine')->getManager('telconet');
        $arrayParamVigencia                  = array();
        $arrayParamVigencia['intIdServicio'] = $objRequest->get('idServicio');
        $arrayParamVigencia['strCodEmpresa'] = $objRequest->getSession()->get('idEmpresa');
        $strMinFechaMapeo                    = null;
        $strFacturaValoresCV                 = 'N';
        
        $strValidaPromoVigente = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                             ->getValidaPromoVigente($arrayParamVigencia);                   
        
        $arrayPromoAplicada    = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                             ->getPromoVigenteServicio($arrayParamVigencia);
        
        if( $strValidaPromoVigente == 'S' && count($arrayPromoAplicada) > 0 )
        {
            $arrayParamMapeo['intIdGrupoPromo'] = $arrayPromoAplicada[0]['idGrupoPromocion'];
            $arrayParamMapeo['intIdTipoPromo']  = $arrayPromoAplicada[0]['idTipoPromocion'];
            $arrayParamMapeo['intIdPunto']      = $arrayPromoAplicada[0]['idPunto'];
                                    
            $arrayMapeoPromo  = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                            ->getFechaMapPromoServicio($arrayParamMapeo);  
            
            $strMinFechaMapeo = $arrayMapeoPromo['fechaMapeoPromo'];  
            
            $objDateFechaActual      = new \DateTime('now');
            $objDateFechaPrimerMapeo = new \DateTime($strMinFechaMapeo);
            $intDiferenciaDias       = $objDateFechaActual->diff($objDateFechaPrimerMapeo);
            $intDiferenciaMeses      = $intDiferenciaDias->m;

            $arrayParamMapeo['strDescripcionCaract'] = 'PROM_PERM_MIN_CV';
            $arrayParamMapeo['intIdGrupoPromo']      = $arrayPromoAplicada[0]['idGrupoPromocion'];
            
            $arrayPermMinimaPromoCV = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                  ->getPermanenciaMinimaPromoCV($arrayParamMapeo);          
            $intPermMinimaPromoCV   = $arrayPermMinimaPromoCV['permMinimaPromoCV'];
         
            if($intDiferenciaMeses < $intPermMinimaPromoCV)
            {
                $strFacturaValoresCV = 'S';
            }    
        }

        $objResponse = new Response(json_encode(array('strFacturaValoresCV' => $strFacturaValoresCV)));
        $objResponse->headers->set('Content-type', 'text/json');
        
        return $objResponse;
         
    }    
    
    
    /**
     * Función que genera el acta de Entrega para ser llenada desde Telcos en instalaciones Telconet.
     * 
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.1 09-07-2019
     * 
     * 
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.2 08-08-2019
     * Agregando equipo instalado en productos Small Business y Telcohome  
     * 
     */
    public function actaAction($intIdServicio)
    {
        $arrayRequest  = $this->get('request');
        $arraySession  = $arrayRequest->getSession();
        $entityEm      = $this->getDoctrine()->getManager("telconet");
        $strCodEmpresa = $arraySession->get('idEmpresa');
        $objPeticion   = $this->get('request');
        $objSession    = $objPeticion->getSession();
        $serviceUtil   = $this->get('schema.Util');
        $arrayEquipos  = new JsonResponse();
        
        try
        {
            if (null == $intServicio = $entityEm->find('schemaBundle:InfoServicio', $intIdServicio)) 
            {
                throw new NotFoundHttpException('No existe el Servicio que se quiere mostrar');
            }

            $entitySoporte                           = $this->get('soporte.SoporteService');
            $arrayParametrosPreguntas                = array();
            $arrayParametrosPreguntas['objServicio'] = $intServicio;
            $arrayAdmiParametroDetActa               = $entityEm->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne('CODIGO_ACTA_ENTREGA_INSTALACION_POR_EMPRESA',
                                                                   'TECNICO',
                                                                   '',
                                                                   '',
                                                                   'CODIGO_ACTA_ENTREGA',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   $strCodEmpresa
                                                                   );

            if (isset($arrayAdmiParametroDetActa['valor2']) && !empty($arrayAdmiParametroDetActa['valor2']))
            {
                $arrayParametrosPreguntas['strCodigoPlantilla'] = $arrayAdmiParametroDetActa['valor2'];
            }
            else
            {
                throw new \Exception("No existe codigo de plantilla");
            }

            $arrayActa      = $entitySoporte->obtenerPreguntasEncuesta($arrayParametrosPreguntas);
            $arrayInfoActa  = array_merge($arrayActa, array('mensaje'=>null));
                        
            /*Equipos Acta*/
            $arrayTecnicaData     = $this->get('tecnico.DataTecnica');
            $arrayPeticiones = array(   'idServicio'    => $intIdServicio,
                                        'idEmpresa'     => '10',
                                        'prefijoEmpresa'=> 'TN');
            
            $arrayDataTecnica = $arrayTecnicaData->getDataTecnica($arrayPeticiones);
            $arrayTransceiver = array();
            $arrayRoseta      = array();
            $arrayCpe         = array();
            $arrayRadCliente  = array();
            // Obtengo el Transceiver
            if(isset($arrayDataTecnica['elementoTransceiver']) && is_object($arrayDataTecnica['elementoTransceiver']))
            {
                $arrayTransceiver = array(
                                            'modelo'    => $arrayDataTecnica['elementoTransceiver']->getModeloElementoId()
                                                                                                   ->getNombreModeloElemento(),
                                            'marca'     => $arrayDataTecnica['elementoTransceiver']->getModeloElementoId()
                                                                                                   ->getMarcaElementoId()
                                                                                                   ->getNombreMarcaElemento(),
                                            'serie'     => $arrayDataTecnica['elementoTransceiver']->getSerieFisica(),
                                            'mac'       => "",
                                            'tipo'      => $arrayDataTecnica['elementoTransceiver']->getModeloElementoId()
                                                                                                   ->getTipoElementoId()
                                                                                                   ->getNombreTipoElemento()
                                         );
                $arrayInfoTecnica[] = $arrayTransceiver;
            }

            // Obtengo la Roseta si el tipo medio es Fibra Optica
            if(isset($arrayDataTecnica['elementoRoseta']) && is_object($arrayDataTecnica['elementoRoseta']) &&
                $arrayDataTecnica['tipoMedio']->getCodigoTipoMedio() == 'FO')
            {
                $arrayRoseta = array(
                                        'modelo'    => $arrayDataTecnica['elementoRoseta']->getModeloElementoId()->getNombreModeloElemento(),
                                        'marca'     => $arrayDataTecnica['elementoRoseta']->getModeloElementoId()
                                                                                          ->getMarcaElementoId()
                                                                                          ->getNombreMarcaElemento(),
                                        'serie'     => $arrayDataTecnica['elementoRoseta']->getSerieFisica(),
                                        'mac'       => "",
                                        'tipo'      => $arrayDataTecnica['elementoRoseta']->getModeloElementoId()
                                                                                          ->getTipoElementoId()
                                                                                          ->getNombreTipoElemento()
                                    );
                $arrayInfoTecnica[] = $arrayRoseta;
            }

            // Obtengo la radio del cliente
            if(isset($arrayDataTecnica['elementoRoseta']) && is_object($arrayDataTecnica['elementoRoseta']) &&
                $arrayDataTecnica['tipoMedio']->getCodigoTipoMedio() == 'RAD')
            {
                $arrayRadCliente = array(
                                            'modelo'    => $arrayDataTecnica['elementoRoseta']->getModeloElementoId()->getNombreModeloElemento(),
                                            'marca'     => $arrayDataTecnica['elementoRoseta']->getModeloElementoId()
                                                                                              ->getMarcaElementoId()
                                                                                              ->getNombreMarcaElemento(),
                                            'serie'     => $arrayDataTecnica['elementoRoseta']->getSerieFisica(),
                                            'mac'       => $arrayDataTecnica['macRadio'],
                                            'tipo'      => $arrayDataTecnica['elementoRoseta']->getModeloElementoId()
                                                                                              ->getTipoElementoId()->getNombreTipoElemento()
                                       );
                $arrayInfoTecnica[] = $arrayRadCliente;
            }

            // Obtengo el CPE
            if(isset($arrayDataTecnica['elementoCpe']) && is_object($arrayDataTecnica['elementoCpe']))
            {
                $arrayCpe = array(
                                    'modelo'    => $arrayDataTecnica['elementoCpe']->getModeloElementoId()->getNombreModeloElemento(),
                                    'marca'     => $arrayDataTecnica['elementoCpe']->getModeloElementoId()
                                                                                   ->getMarcaElementoId()
                                                                                   ->getNombreMarcaElemento(),
                                    'serie'     => $arrayDataTecnica['elementoCpe']->getSerieFisica(),
                                    'mac'       => $arrayDataTecnica['macCpe'],
                                    'tipo'      => $arrayDataTecnica['elementoCpe']->getModeloElementoId()
                                                                                   ->getTipoElementoId()->getNombreTipoElemento()
                               );
                $arrayInfoTecnica[] = $arrayCpe;
            }
            
            if(isset($arrayDataTecnica['arrayElementoSmall']) && is_object($arrayDataTecnica['arrayElementoSmall']))
            {
                $arrayWifi = array(
                                    'modelo'    => $arrayDataTecnica['arrayElementoSmall']->getModeloElementoId()
                                                                                          ->getNombreModeloElemento(),
                                    'marca'     => $arrayDataTecnica['arrayElementoSmall']->getModeloElementoId()
                                                                                          ->getMarcaElementoId()
                                                                                          ->getNombreMarcaElemento(),
                                    'serie'     => $arrayDataTecnica['arrayElementoSmall']->getSerieFisica(),
                                    'mac'       => $arrayDataTecnica['arrayElementoSmall'],
                                    'tipo'      => $arrayDataTecnica['arrayElementoSmall']->getModeloElementoId()
                                                                                          ->getTipoElementoId()
                                                                                          ->getNombreTipoElemento()
                               );
                $arrayInfoTecnica[] = $arrayWifi;
            }
            
            /*Equipos Acta*/

            $arrayEquiposTecnicos['equiposEntregado'] = $arrayInfoTecnica;
            $arrayEquipos  = array_merge($arrayInfoActa, $arrayEquiposTecnicos);
            
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.actaAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
        }
        return $this->render('tecnicoBundle:InfoServicio:acta.html.twig', $arrayEquipos);
    }
    
    /**
     * @Secure(roles="ROLE_415-7598")
     * 
     * cambiarCorreoEnServicioActivoAction
     * 
     * Función que realiza la actualización del correo de una suscripción I. PROTEGIDO MULTI PAID con tecnología Kaspersky
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 05-08-2019
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.1 22-10-2020 - Se cambio el perfil del Rol 
     */
    public function cambiarCorreoEnServicioActivoAction()
    {
        $objJsonResponse            = new JsonResponse();
        $objRequest                 = $this->getRequest();
        $objSession                 = $objRequest->getSession();
        $intIdServicio              = $objRequest->get('intIdServicio');
        $intProductoId              = $objRequest->get('intProductoId');
        $strCorreoSuscripcion       = $objRequest->get('strCorreoSuscripcion');
        $strCodEmpresa              = $objSession->get('idEmpresa');
        $strUsrCreacion             = $objSession->get('user');
        $strIpCreacion              = $objRequest->getClientIp();
        $serviceUtil                = $this->get('schema.Util');
        $serviceLicenciasKaspersky  = $this->get('tecnico.LicenciasKaspersky');
        try
        {
            $arrayParametros            = array("intIdServicio"         => $intIdServicio,
                                                "intProductoId"         => $intProductoId,
                                                "strCorreoSuscripcion"  => $strCorreoSuscripcion,
                                                "strUsrCreacion"        => $strUsrCreacion,
                                                "strIpCreacion"         => $strIpCreacion,
                                                "strCodEmpresa"         => $strCodEmpresa);
            $arrayRespuestaCambioCorreo = $serviceLicenciasKaspersky->cambiarCorreoEnServicioActivo($arrayParametros);
            $strStatus                  = $arrayRespuestaCambioCorreo['status'];
            $strMensaje                 = $arrayRespuestaCambioCorreo['mensaje'];
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->cambiarCorreoEnServicioActivoAction',
                                      $e->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCreacion);
        }
        $arrayRespuesta = array("status"  => $strStatus,
                                "mensaje" => $strMensaje);
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }

    /**
     * @Secure(roles="ROLE_428-6457")
     * 
     * ActualizacionCorreoAction
     * 
     * Función que realiza la actualización del correo de una suscripción I. PROTEGIDO MULTI PAID con tecnología Kaspersky
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.0 22-10-2020
     */
    public function actualizacionCorreoAction()
    {
        $objJsonResponse            = new JsonResponse();
        $objRequest                 = $this->getRequest();
        $objSession                 = $objRequest->getSession();
        $intIdServicio              = $objRequest->get('intIdServicio');
        $intProductoId              = $objRequest->get('intProductoId');
        $strCorreoSuscripcionNuevo  = $objRequest->get('strCorreoSuscripcionNuevo');
        $strCodEmpresa              = $objSession->get('idEmpresa');
        $strUsrCreacion             = $objSession->get('user');
        $strIpCreacion              = $objRequest->getClientIp();
        $serviceUtil                = $this->get('schema.Util');
        $serviceLicenciasKaspersky  = $this->get('tecnico.LicenciasKaspersky');
        try
        {
            $arrayParametros        = array("intIdServicio"             => $intIdServicio,
                                            "intProductoId"             => $intProductoId,
                                            "strCorreoSuscripcionNuevo" => $strCorreoSuscripcionNuevo,
                                            "strUsrCreacion"            => $strUsrCreacion,
                                            "strIpCreacion"             => $strIpCreacion,
                                            "strCodEmpresa"             => $strCodEmpresa);

            $arrayRespuestaCambioCorreo = $serviceLicenciasKaspersky->actualizacionCorreo($arrayParametros);
            $strStatus                  = $arrayRespuestaCambioCorreo['status'];
            $strMensaje                 = $arrayRespuestaCambioCorreo['mensaje'];
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->actualizacionCorreoAction',
                                      $e->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCreacion);
        }
        $arrayRespuesta = array("status"  => $strStatus,
                                "mensaje" => $strMensaje);
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }
    
    
    /**
     * @Secure(roles="ROLE_151-847")
     * 
     * reintentarActivacionServicioAction
     * 
     * Función que sirve para realizar el reintento de la activación de un servicio I. PROTEGIDO MULTI PAID con tecnología Kaspersky
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 13-08-2019
     * 
     */
    public function reintentarActivacionServicioAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $strUsrCreacion         = $objSession->get('user');
        $strCodEmpresa          = $objSession->get('idEmpresa');
        $intIdServicio          = $objRequest->get('idServicio');
        $strIpCreacion          = $objRequest->getClientIp();
        $serviceActivarPuerto   = $this->get('tecnico.InfoActivarPuerto');
        $serviceUtil            = $this->get('schema.Util');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        try
        {
            $arrayParametros        = array("intIdServicio"     => $intIdServicio,
                                            "strTipoProceso"    => "INDIVIDUAL",
                                            "strOpcion"         => "REINTENTO",
                                            "strCodEmpresa"     => $strCodEmpresa,
                                            "strUsrCreacion"    => $strUsrCreacion,
                                            "strClientIp"       => $strIpCreacion);
            
            $objServicio            = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio))
            {
                if(is_object($objServicio->getPlanId()))
                {
                    $arrayRespuestaReintento = $serviceActivarPuerto->activarProductosAdicionalesEnPlan($arrayParametros);
                }
                else
                {
                    $serviceLicenciasKaspersky          = $this->get('tecnico.LicenciasKaspersky');
                    $arrayParametros["strTipoServicio"] = "PRODUCTO";
                    $arrayRespuestaReintento            = $serviceLicenciasKaspersky->reintentarActivacion($arrayParametros);
                }
            }
            else
            {
                throw new NotFoundHttpException('No existe el servicio enviado para la activación por reintento');
            }

            $strStatus  = $arrayRespuestaReintento["status"];
            $strMensaje = $arrayRespuestaReintento["mensaje"];
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = 'Se presentaron errores al reintentar la activación, favor notificar a sistemas.';
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.reintentarActivacionServicioAction', 
                                      $e->getMessage(), 
                                      $objSession->get('user'), 
                                      $strIpCreacion
                                     );
        }
        $objJsonResponse->setData(array('status' => $strStatus, 'mensaje' => $strMensaje));
        return $objJsonResponse;
    }
    
    /**
     * Función que guarda el acta llenada desde telcos y
     * genera el archivo pdf.
     * 
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.1 09-07-2019
     * 
     */
    public function guardarActaAction($intIdServicio)
    {
        $arrayRequest       = $this->get('request');
        $arraySession       = $arrayRequest->getSession();
        $strPrefijoEmpresa  = $arraySession->get('prefijoEmpresa');
        $intIdEmpresa       = $arraySession->get('idEmpresa');
        $strUsrCreacion     = $arraySession->get('user');
        $strIpCreacion      = $arrayRequest->getClientIp();
        $strFeCreacion      = new \DateTime('now');
        $strFirma           = $arrayRequest->request->get('firma');
        $strPreguntaResp    = $arrayRequest->request->get('preguntaRespuesta');
        $strServerRoot      = $this->container->getParameter('ruta_creacion_acta');
        
        $emComercial        = $this->getDoctrine()->getManager("telconet");
        
        if(null == $intServicio = $emComercial->find('schemaBundle:InfoServicio', $intIdServicio))
        {
            throw new NotFoundHttpException('No existe el Servicio que se quiere mostrar');
        }
        
        $arrayFinder = new Finder();
        $arrayFinder->files()->in(__DIR__);

        foreach($arrayFinder as $file)
        {
            if(strpos($file->getRealpath(), "Default") !== false)
            {
                $strPathSrc = explode("/Controller/DefaultController.php", $file->getRealpath())[0];
                $strPathSrc = explode("\Controller\DefaultController.php", $strPathSrc)[0];
            }
        }
        
        $arrayAdmiParametroEncuesta = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->getOne('CODIGO_ACTA_ENTREGA_INSTALACION_POR_EMPRESA',
                                                           'TECNICO',
                                                           '',
                                                           '',
                                                           'CODIGO_ACTA_ENTREGA',
                                                           '',
                                                           '',
                                                           '',
                                                           '',
                                                           $intIdEmpresa
                                                          );
        
        if (isset($arrayAdmiParametroEncuesta['valor2']) && !empty($arrayAdmiParametroEncuesta['valor2']))
        {
            $strCodigoPlantilla = $arrayAdmiParametroEncuesta['valor2'];
        }
        
        $arrayPeticion   = $this->get('request');
        $arrayStart      = $arrayPeticion->query->get('start');
        $arrayLimit      = $arrayPeticion->query->get('limit');
        
        $arrayParametros = array(
                                    'idEmpresa'         => $intIdEmpresa,
                                    'prefijoEmpresa'    => $strPrefijoEmpresa,
                                    'idServicio'        => $intIdServicio,
                                    'firmaCoordenadas'  => $strFirma,
                                    'firmaTelcos'       => "telcos/web/public/images/firma_telcos.jpg",
                                    'idDetalle'         => "",
                                    'firmaClienteCoord' => "",
                                    'firmaCliente64'    => "",
                                    'firmaEmpleadoCoord'=> "",
                                    'firmaEmpleado64'   => "",
                                    'start'             => $arrayStart,
                                    'limit'             => $arrayLimit,  
                                    'preguntaRespuesta' => $strPreguntaResp,
                                    'strCodigoPlantilla'=> $strCodigoPlantilla,
                                    'serverRoot'        => $strServerRoot,
                                    'usrCreacion'       => $strUsrCreacion,
                                    'ipCreacion'        => $strIpCreacion,
                                    'feCreacion'        => $strFeCreacion,
                                    'pathSource'        => $strPathSrc
                                );
        
        $entityEncuestaService = $this->get('tecnico.ActaEntrega');
        $arrayRespuesta        = $entityEncuestaService->grabarActaEntrega($arrayParametros);
                                   
        $intServicio                               = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $entitySoporte                             = $this->get('soporte.SoporteService');
        $arrayParametrosPreguntas                  = array();
        $arrayParametrosPreguntas['objServicio']   = $intServicio;

        $arrayAdmiParametroDetActa = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('CODIGO_ACTA_ENTREGA_INSTALACION_POR_EMPRESA',
                                                          'TECNICO',
                                                          '',
                                                          '',
                                                          'CODIGO_ACTA_ENTREGA',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          $intIdEmpresa
                                                         );
        if (isset($arrayAdmiParametroDetActa['valor2']) && !empty($arrayAdmiParametroDetActa['valor2']))
        {
            $arrayParametrosPreguntas['strCodigoPlantilla'] = $arrayAdmiParametroDetActa['valor2'];
        }
        else
        {
            throw new \Exception("No existe codigo de plantilla");
        }
           
        $arrayResponse          = $entitySoporte->obtenerPreguntasEncuesta($arrayParametrosPreguntas);
        $arrayActaRespuestas    = array_merge($arrayRespuesta, $arrayResponse);
        $arrayInfoActaEquipos   = array_merge($arrayActaRespuestas, array('equiposEntregado'=>null));
 
        return $this->render('tecnicoBundle:InfoServicio:acta.html.twig', $arrayInfoActaEquipos);
    }
    
    /**
     * @Secure(roles="ROLE_428-6897")
     * 
     * ajaxReenvioCorreoAction
     * 
     * Función que reenvía al correo 
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 09-10-2019
     * @since 1.0
     */
    public function ajaxReenvioCorreoAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $objSession             = $objRequest->getSession();
        $intIdEmpresa           = $objSession->get('idEmpresa');
        $intIdServicio          = $objRequest->get('intIdServicio');
        $intProductoId          = $objRequest->get('intProductoId');
        $strUsrCreacion         = $objSession->get('user');
        $strIpCliente           = $objRequest->getClientIp();
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $strTipoTransaccion     = "Reenvio";
        $strStatus              = "";
        $strMensaje             = "";
        try
        {
            $arrayParametroDetAntivirus = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne( 'ANTIVIRUS_PLANES_Y_PRODS_MD',
                                                                    '',
                                                                    '', 
                                                                    '', 
                                                                    'NUEVO',
                                                                    '',
                                                                    '', 
                                                                    '',
                                                                    '',
                                                                    $intIdEmpresa);
            
            if(!isset($arrayParametroDetAntivirus["valor5"]) || empty($arrayParametroDetAntivirus["valor5"]))
            {
                throw new \Exception("No se ha podido obtener la clave para gestionar las licencias");
            }
            
            if(!isset($arrayParametroDetAntivirus["valor4"]) || empty($arrayParametroDetAntivirus["valor4"]))
            {
                throw new \Exception("No se ha podido obtener el código del producto para gestionar las licencias");
            }
            
            $strPassword        = $arrayParametroDetAntivirus["valor5"];
            $strCodigoProducto  = $arrayParametroDetAntivirus["valor4"];
            
            $objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontro información del servicio");
            }
            
            $objProductoIPMP    = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intProductoId);
            if (!is_object($objProductoIPMP))
            {
                throw new \Exception("No existe información del producto del servicio a procesar.");
            }
            
            $arrayParamsProcesaEnvioWs  = array(
                                                "strPassword"           => $strPassword,
                                                "strTipoTransaccion"    => $strTipoTransaccion,
                                                "objServicio"           => $objServicio,
                                                "objProductoIPMP"       => $objProductoIPMP,
                                                "strCodigoProducto"     => $strCodigoProducto,
                                                "strUsrCreacion"        => $strUsrCreacion,
                                                "strIpCreacion"         => $strIpCliente);
            $serviceLicenciasKasperskyWs        = $this->get('tecnico.LicenciasKasperskyWs');
            $arrayRespuestaWs                   = $serviceLicenciasKasperskyWs->procesaEnvioWsLicencias($arrayParamsProcesaEnvioWs);
            
            $strStatus                  = "OK";
            $strMensaje                 = "";
        }
        catch(\Exception $objEx)
        {
            $strStatus          = "ERROR";
            $strMensaje         = $objEx->getMessage();
            $arrayRespuestaWs   = array();
            
            $this->serviceUtil->insertError('Telcos+', 
                                            'LicenciasKaspersky->ajaxReenvioCorreoAction', 
                                            $objEx->getMessage(), 
                                            $strUsrCreacion, 
                                            $strIpCliente
                                           );
        }

        $arrayRespuesta = array("strStatus"         => $strStatus,
                                "strMensaje"        => $strMensaje,
                                "arrayRespuestaWs"  => $arrayRespuestaWs);
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }
    
    /*
     * Función que sirve para Obtener Fibra, Materiales y equipos de un técnico
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0 03/09/2019
     * 
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 21/10/2019
     * Se agrega el nombre y apellido del técnico.
     * 
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 12/11/2019
     * Se agrega entidad al array $arrayParametros.
     * 
     * 
     * @return array $arrayResultado
     */
    public function getFibraMaterialesTecnicoAction()
    {
        
        $emGeneral                  = $this->getDoctrine()->getManager("telconet_general");
        $emSoporte                  = $this->get('doctrine')->getManager('telconet_soporte');
        $objPeticion                = $this->get('request');
        $arrayParametros            = json_decode($objPeticion->get('data'),true);    
        $intIdEmpresa               = $arrayParametros['idEmpresa'];
        $strUtilizado               = $arrayParametros['strUtilizado'];
        $strTipoCustodio            = $arrayParametros['strTipoCustodio'];
        $strLogin                   = $arrayParametros['strloginTecnico'];        
        $strFibra                   = 'Fibra';
        $strMateriales              = 'Materiales';
        $strEquipos                 = 'Equipos';
        $serviceUtil                = $this->get('schema.Util'); 
        $objRequest                 = $this->getRequest();
        $objSession                 = $objRequest->getSession();
        $arrayRequest               = $this->get('request');
        $strIpCreacion              = $arrayRequest->getClientIp();
        $objRespuesta               = new Response();
        $intIdEmpresaRol            = '';
        $intIdOficina               = '';
        $intIdDepartamento          = '';
        $strNombresTecnico          = '';
        $strApellidoTecnico         = '';
        
        $objRespuesta->headers->set('Content-Type', 'text/json');
    
        try 
        {
        
            $arrayInfoTecnico['login']      = $strLogin;
            $arrayTecnicoInfo               = $emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                        ->getInfoPersonaRolPorLoginTecnico($arrayInfoTecnico);

            if(isset($arrayTecnicoInfo))
            {
                $intIdEmpresaRol                            = $arrayTecnicoInfo['idPersonaRol'];
                $intIdOficina                               = $arrayTecnicoInfo['idOficina'];
                $intIdDepartamento                          = $arrayTecnicoInfo['idPersonaRol'];
                $strNombresTecnico                          = $arrayTecnicoInfo['nombres'];
                $strApellidoTecnico                         = $arrayTecnicoInfo['apellidos'];
                
                $arrayParametros['login']                   = $strLogin;
                $arrayParametros['intIdPersonaEmpresaRol']  = $intIdEmpresaRol;
                $arrayParametros['strTipoCustodio']         = $strTipoCustodio;
                $arrayParametros['idEmpresa']               = $intIdEmpresa;
                $arrayParametros['strUtilizado']            = $strUtilizado;
                $arrayParametros['emGeneral']               = $emGeneral;

                $arrayAdmiParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne(   'LIMITE_ERROR_FIBRA', 
                                                                                '', 
                                                                                '', 
                                                                                '', 
                                                                                '', 
                                                                                '', 
                                                                                '', 
                                                                                '', 
                                                                                '', 
                                                                                '');

                $strValorLimiteFibra                = $arrayAdmiParametroDet["valor1"];
                
                $arrayParametros['tipoArticulo']    = $strFibra;
                $arrayMaterialesFibraNaf            = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                                ->obtenerCaracteristicasFibraPorUsuarioNaf($arrayParametros);

                $arrayParametros['tipoArticulo']    = $strMateriales;
                $arrayMaterialesMatNaf              = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                                ->obtenerCaracteristicasMaterialesPorUsuarioNaf($arrayParametros);

                $arrayParametros['tipoArticulo']    = $strEquipos;
                $arrayMaterialesEquiposNaf          = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                                ->obtenerCaracteristicasMaterialesPorUsuarioNaf($arrayParametros);            

                $arrayRespuesta                     = array(
                                                        'materialesFibraNaf'            => $arrayMaterialesFibraNaf,
                                                        'materialesMaterialesNaf'       => $arrayMaterialesMatNaf,
                                                        'materialesEquiposNaf'          => $arrayMaterialesEquiposNaf,
                                                        'cantidadLimiteFibra'           => $strValorLimiteFibra,
                                                        'idOficina'                     => $intIdOficina,
                                                        'idPersonaRol'                  => $intIdDepartamento,
                                                        'nombresTecnico'                => $strNombresTecnico." ".$strApellidoTecnico
                                                    );

                $strStatus      = "OK";
                $strMensaje     = "Consulta Exitosa.";
            }
            else
            {
                $strStatus      = "OK";
                $strMensaje     = "Login no tecnico";
            }
             
        }
        catch(\Exception $ex)
        {
            $strStatus      = "ERROR";
            $strMensaje     = "Se presentaron errores al obtener fibra y material, favor notificar a soporte sistemas.";
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.getFibraMaterialesTecnicoAction', 
                                      $ex->getMessage(), 
                                      $objSession->get('user'), 
                                      $strIpCreacion
                                     );
        }
        $arrayResultado['status']    = $strStatus;
        $arrayResultado['mensaje']   = $strMensaje;
        $arrayResultado['data']      = $arrayRespuesta;
        
        $objRespuesta->setContent(json_encode($arrayResultado));
        return $objRespuesta;
    }
	
	/**
	 * Documentación para la función 'getInfoNetlifeCamAction'
	 * Función utilizada para obtener la información del usuario y rol si es que existiera, además se
	 * obtiene los datos necesarios para la creación del usuario, rol y cámara en el portal 3dEYE.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 11-11-2019
	 *
	 * @return JsonResponse $objResponse
	 **/
	public function getInfoNetlifeCamAction()
	{
		$objResponse             = new JsonResponse();
		$objRequest              = $this->getRequest();
		$emComercial             = $this->getDoctrine()->getManager("telconet");
		$emInfraestructura       = $this->getDoctrine()->getManager("telconet_infraestructura");
		$servicePortalNetlifecam = $this->get('tecnico.PortalNetlifeCam3dEYEService');
		$serviceUtil             = $this->get('schema.Util');
		
		$intIdServicio  = $objRequest->get('idServicio') ? $objRequest->get('idServicio') : 0;
		$objSession     = $objRequest->getSession();
		$strCodEmpresa  = $objSession->get('idEmpresa');
		$objCliente     = $objSession->get('cliente');
		$strIpClient    = $objRequest->getClientIp();
		$strUsrCreacion = $objSession->get('user');
		
		$strStatus       = "ERROR";
		$strMensaje      = "";
		$boolUserExiste  = false;
		$boolRolExiste   = false;
		$arrayUser3dEYE  = "";
		$arrayRol3dEYE   = "";
		$arrayNuevoUser  = "";
		$arrayNuevoRol   = "";
		$strNombreCamara = "";
		$intIdPunto      = 0;
		$intIdPersona    = 0;
		
		try
		{
			if($intIdServicio)
			{
				$objServicio = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
				if(is_object($objServicio))
				{
					$objPunto = $objServicio->getPuntoId();
					if(is_object($objPunto))
					{
						$strLoginPunto = $objPunto->getLogin();
						$intIdPunto    = $objPunto->getId();
						$intIdPersona  = $objCliente["id"];
						$objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')
						                           ->findOneBy(array('nombreTecnico' => 'CAMARA IP',
						                                             'empresaCod'    => $strCodEmpresa,
						                                             'estado'        => 'Activo',));
						if(is_object($objProducto))
						{
							$objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
							                                      ->findOneByServicioId($intIdServicio);
							if(is_object($objInfoServicioTecnico))
							{
								// Busco si el cliente tiene la característica USER 3DEYE
								$arrayParamsPuntoUser3dEye = array(
										'entityPunto'                  => $objPunto,
										'strDescripcionCaracteristica' => 'USER 3DEYE',
										'strEstado'                    => 'Activo',
								);
								
								$arrayInfoCaractUser = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
								                                   ->getPuntoCaracteristica($arrayParamsPuntoUser3dEye);
								$objInfoCaractUser   = $arrayInfoCaractUser[0];
								
								// Busco si el cliente tiene la característica ROL 3DEYE
								$arrayParamsPuntoRol3dEye = array(
										'entityPunto'                  => $objPunto,
										'strDescripcionCaracteristica' => 'ROL 3DEYE',
										'strEstado'                    => 'Activo',
								);
								
								$arrayInfoCaractRol = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
								                                  ->getPuntoCaracteristica($arrayParamsPuntoRol3dEye);
								$objInfoCaractRol   = $arrayInfoCaractRol[0];
								
								// Verifico si existe el user en 3dEYE
								$strUser3DEYE = $objInfoCaractUser ? $objInfoCaractUser->getValor() : "";
								if(!is_null($strUser3DEYE) && !empty($strUser3DEYE))
								{
									$arrayDatosCliente = $servicePortalNetlifecam->getDatosClienteById($strUser3DEYE);
									if($arrayDatosCliente['strStatus'] == "OK")
									{
										if($arrayDatosCliente["arrayData"])
										{
											$boolUserExiste = true;
											$arrayUser3dEYE = $arrayDatosCliente["arrayData"];
										}
									}
									else
									{
										throw new Exception("Ha ocurrido un problema. Por favor notifique a Sistemas!");
									}
								}
								
								if(!$boolUserExiste)
								{
									// Obtengo los datos para el cliente nuevo
									if($objCliente["razon_social"] || !$objCliente["razon_social"] == "")
									{
										$arrayNuevoUser["firstName"] = $objCliente["razon_social"];
										$arrayNuevoUser["lastName"] = "PYMES";
									}
									else
									{
										$arrayNuevoUser["firstName"] = $objCliente["nombres"];
										$arrayNuevoUser["lastName"]  = $objCliente["apellidos"];
									}
									// Generar clave segura
									$intLongitudPass            = "6";
									$strPassNuevoCliente        = $servicePortalNetlifecam->generarClaveAleatoria(
											array("intLongitudClave" => $intLongitudPass));
									$arrayNuevoUser["password"] = $strPassNuevoCliente;
								}
								
								// Verifico si existe el rol en 3dEYE
								$strRol3DEYE = $objInfoCaractRol ? $objInfoCaractRol->getValor() : "";
								if(!is_null($strRol3DEYE) && !empty($strRol3DEYE))
								{
									$arrayDatosRol = $servicePortalNetlifecam->getDatosRolById($strRol3DEYE);
									if($arrayDatosRol['strStatus'] == "OK")
									{
										if($arrayDatosRol["arrayData"])
										{
											$boolRolExiste = true;
											$arrayRol3dEYE = $arrayDatosRol["arrayData"];
										}
									}
									else
									{
										throw new Exception("Ha ocurrido un problema. Por favor notifique a Sistemas!");
									}
								}
								
								if(!$boolRolExiste)
								{
									// Obtengo los datos para el rol nuevo
									$arrayNuevoRol["name"]        = $strLoginPunto;
									$arrayNuevoRol["description"] = "Contenedor de cámaras del login ".$strLoginPunto;
									$arrayNuevoRol["type"]        = "Guard";
								}
								
								$arrayParamsBusqServPlanNetlifeCamSP = array(
										"nombreTecnicoProducto"    => "CAMARA IP",
										"login"                    => $strLoginPunto,
										"estadosServicios"         => array("Activo"),
										"productoInternetPorLogin" => "S",
										"estadoActivo"             => "Activo",
										"empresaCod"               => $strCodEmpresa,
								);
								
								$arrayRespuestaServPlanNetlifeCamSP = $emComercial->getRepository('schemaBundle:InfoServicio')
								                                                  ->getServiciosByCriterios($arrayParamsBusqServPlanNetlifeCamSP);
								$intTotalServPlanNetlifeCamSP       = $arrayRespuestaServPlanNetlifeCamSP["total"];
								$intCantidadCamaras                 = $intTotalServPlanNetlifeCamSP + 1;
								
								$boolSinNombreCam = true;
								while($boolSinNombreCam)
								{
									$strNombreCamGeneral = "CAM_".$intCantidadCamaras;
									$strNombreCamara     = $strLoginPunto."_".$strNombreCamGeneral;
									$objElementoCamNueva = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
									                                         ->findOneBy(array(
											                                                     "nombreElemento" => $strNombreCamara,
											                                                     "estado"         => "Activo",));
									
									if(is_object($objElementoCamNueva))
									{
										$intCantidadCamaras++;
									}
									else
									{
										// Verifico si existe la cámara registrada en el portal 3dEYE
										$arrayRespDatosCamara = $servicePortalNetlifecam->validateCamaraByName($strNombreCamara);
										if($arrayRespDatosCamara['strStatus'] == "OK")
										{
											$arrayDatosCamara = $arrayRespDatosCamara["arrayData"];
											if($arrayDatosCamara)
											{
												// Existe ya una cámara con ese nombre, se procede a cambiar el nombre
												$intCantidadCamaras++;
											}
											else
											{
												$boolSinNombreCam = false;
											}
										}
										else
										{
											throw new Exception("Ha ocurrido un problema. Por favor notifique a Sistemas!");
										}
									}
								}
								$strStatus = "OK";
							}
							else
							{
								throw new Exception("No se ha podido encontrar el servicio técnico del servicio");
							}
						}
						else
						{
							throw new Exception("No se ha podido encontrar el producto asociado al servicio");
						}
					}
					else
					{
						throw new Exception("No se ha podido encontrar el punto del servicio");
					}
				}
				else
				{
					throw new Exception("No se ha podido encontrar el servicio");
				}
			}
			else
			{
				throw new Exception("No existe el parámetro del servicio");
			}
			
			$objResponse->setData(array(
					                      "strStatus"       => $strStatus,
					                      "strMensaje"      => $strMensaje,
					                      "boolUserExiste"  => $boolUserExiste,
					                      "arrayUser3dEYE"  => $arrayUser3dEYE,
					                      "arrayNuevoUser"  => $arrayNuevoUser,
					                      "boolRolExiste"   => $boolRolExiste,
					                      "arrayRol3dEYE"   => $arrayRol3dEYE,
					                      "arrayNuevoRol"   => $arrayNuevoRol,
					                      "strNombreCamara" => $strNombreCamara,
					                      "intIdPunto"      => $intIdPunto,
					                      "intIdPersona"    => $intIdPersona,
			                      ));
		}
		catch(Exception $e)
		{
			$objResponse->setData(array(
					                      "strStatus"  => $strStatus,
					                      "strMensaje" => $e->getMessage(),
			                      ));
			
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->getInfoNetlifeCamAction',
			                          $e->getMessage(),
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		
		return $objResponse;
	}
	
	/**
	 * Documentación para la función 'guardarConfirmaNetlifeCamAction'
	 * Función utilizada activar el servicio netlifecam en el portal 3dEYE.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 11-11-2019
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.1 20-12-2019 - Se cambia la lógica de activación a un service.
	 *
	 * @return JsonResponse $objResponse
	 **/
	public function guardarConfirmaNetlifeCamAction()
	{
		$objResponse             = new JsonResponse();
		$objRequest              = $this->getRequest();
		$emComercial             = $this->getDoctrine()
		                                ->getManager("telconet");
		$servicePortalNetlifecam = $this->get('tecnico.PortalNetlifeCam3dEYEService');
		$serviceUtil             = $this->get('schema.Util');
		
		$intIdAccion             = $objRequest->get('intIdAccion') ? $objRequest->get('intIdAccion') : 0;
		$intIdServicio           = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0;
		$intIdPersonaEmpresaRol  = $objRequest->get('intIdPersonaEmpresaRol') ? $objRequest->get('intIdPersonaEmpresaRol') : 0;
		$strSerieCam             = $objRequest->get('strSerieCam') ? $objRequest->get('strSerieCam') : "";
		$intIdModeloCam          = $objRequest->get('intIdModeloCam') ? $objRequest->get('intIdModeloCam') : 0;
		$strMACCam               = $objRequest->get('strMACCam') ? $objRequest->get('strMACCam') : "";
		$strTipoActivacionCamara = $objRequest->get('strTipoActivacionCamara') ? $objRequest->get('strTipoActivacionCamara') : "";
		$arrayDataCreateCamara   = json_decode($objRequest->get('arrayDataCreateCamara'), true);
		$arrayDataCreateUser     = json_decode($objRequest->get('arrayDataCreateUser'), true);
		$arrayDataCreateRol      = json_decode($objRequest->get('arrayDataCreateRol'), true);
		
		$objSession     = $objRequest->getSession();
		$strIpClient    = $objRequest->getClientIp();
		$strUsrCreacion = $objSession->get('user');
		
		$strStatus = "ERROR";
		try
		{
			if($intIdPersonaEmpresaRol)
			{
				$objPersonaEmpresaRolCliente = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
				                                           ->find($intIdPersonaEmpresaRol);
				if(is_object($objPersonaEmpresaRolCliente))
				{
					$objPersonaCliente = $objPersonaEmpresaRolCliente->getPersonaId();
					if(is_object($objPersonaCliente))
					{
						if($intIdServicio)
						{
							$objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')
							                                  ->find($intIdServicio);
							$arrayParamsActivar = array("objServicio"             => $objServicio,
							                            "intIdAccion"             => $intIdAccion,
							                            "intIdModeloCam"          => $intIdModeloCam,
							                            "strTipoActivacionCamara" => $strTipoActivacionCamara,
							                            "arrayDataCreateCamara"   => $arrayDataCreateCamara,
							                            "arrayDataCreateRol"      => $arrayDataCreateRol,
							                            "arrayDataCreateUser"     => $arrayDataCreateUser,
							                            "strMACCam"               => $strMACCam,
							                            "strSerieCam"             => $strSerieCam,
							                            "strUsrCreacion"          => $strUsrCreacion,
							                            "strIpClient"             => $strIpClient);
							$arrayRespActivar   = $servicePortalNetlifecam->activarServicioNetCam($arrayParamsActivar);
							if($arrayRespActivar["strStatus"] == "OK")
							{
								$strStatus  = "OK";
								$strMensaje = $arrayRespActivar["strMensaje"];
							}
							else
							{
								throw new Exception($arrayRespActivar["strMensaje"]);
							}
						}
						else
						{
							throw new Exception("No se pudo obtener el id del servicio");
						}
					}
					else
					{
						throw new Exception("No se ha encontrado la información del cliente");
					}
				}
				else
				{
					throw new Exception("No se ha encontrado al cliente");
				}
			}
			else
			{
				throw new Exception("No se ha enviado el parámetro del cliente");
			}
		}
		catch(Exception $e)
		{
			$strMensaje = $e->getMessage();
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->guardarConfirmaNetlifeCamAction',
			                          $strMensaje,
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		catch(DBALException $ex)
		{
			$strMensaje = "Ha ocurrido un problema. Por favor notifique a Sistemas!";
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->guardarConfirmaNetlifeCamAction',
			                          $strMensaje,
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		
		$objResponse->setData(array("strStatus"  => $strStatus,
		                            "strMensaje" => $strMensaje,));
		
		return $objResponse;
	}
	
	/**
	 * Documentación para la función 'getFormasContactoClienteNetlifeCamAction'
	 * Función utilizada para obtener todos los contactos del cliente, tanto contactos de cliente y de punto.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 11-11-2019
	 *
	 * @return JsonResponse $objResponse
	 **/
	public function getFormasContactoClienteNetlifeCamAction()
	{
		$objResponse = new JsonResponse();
		$objRequest  = $this->getRequest();
		$emComercial = $this->getDoctrine()->getManager("telconet");
		
		$intIdPersona = $objRequest->get('intIdPersona') ? $objRequest->get('intIdPersona') : 0;
		$intIdPunto   = $objRequest->get('intIdPunto') ? $objRequest->get('intIdPunto') : 0;
		
		$arrayParamRequestContactos = array(
				"intIdPersona"      => $intIdPersona,
				"intIdPunto"        => $intIdPunto,
				"strCodigoContacto" => "MAIL",
		);
		$strJsonData                = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
		                                          ->getJSONContactosClienteyPuntoPorCodigoContacto($arrayParamRequestContactos);
		$objResponse->setContent($strJsonData);
		
		return $objResponse;
	}
	
	/**
	 * Documentación para la función 'cortarServiciosNetlifeCamAction'
	 * Función utilizada para cortar el servicio netlifecam en el portal 3dEYE.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 02-12-2019
	 *
	 * @return JsonResponse $objResponse
	 **/
	public function cortarServiciosNetlifeCamAction()
	{
		$objResponse = new JsonResponse();
		$objRequest  = $this->getRequest();
		$emComercial = $this->getDoctrine()
		                    ->getManager("telconet");
		$emSeguridad = $this->getDoctrine()
		                    ->getManager("telconet_seguridad");
		
		$intIdServicio           = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0;
		$intIdAccion             = $objRequest->get('intIdAccion') ? $objRequest->get('intIdAccion') : 0;
		$objServicio             = $emComercial->getRepository('schemaBundle:InfoServicio')
		                                       ->find($intIdServicio);
		$objAccion               = $emSeguridad->getRepository('schemaBundle:SistAccion')
		                                       ->find($intIdAccion);
		$servicePortalNetlifecam = $this->get('tecnico.PortalNetlifeCam3dEYEService');
		
		$objSession     = $objRequest->getSession();
		$strIpClient    = $objRequest->getClientIp();
		$strUsrCreacion = $objSession->get('user');
		$serviceUtil    = $this->get('schema.Util');
		
		$strStatus  = "ERROR";
		$strMensaje = "";
		
		try
		{
			if(is_object($objServicio) && is_object($objAccion))
			{
				$arrayRespCortarServicio = $servicePortalNetlifecam->cortarServicioNetCam($intIdServicio, $intIdAccion);
				
				if($arrayRespCortarServicio["strStatus"] == "ERROR")
				{
					throw new Exception($arrayRespCortarServicio["strMessage"]);
				}
				
				$strStatus  = "OK";
				$strMensaje = "Se ha cortado el servicio de manera correcta";
			}
			else
			{
				throw new Exception("No se ha encontrado el objeto servicio o el objeto acción");
			}
		}
		catch(Exception $e)
		{
			$strMensaje = $e->getMessage();
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->cortarServiciosNetlifeCamAction',
			                          $strMensaje,
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		catch(DBALException $ex)
		{
			$strMensaje = "Ha ocurrido un problema. Por favor notifique a Sistemas!";
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->cortarServiciosNetlifeCamAction',
			                          $ex->getMessage(),
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		
		$objResponse->setData(array("strStatus"  => $strStatus,
		                            "strMensaje" => $strMensaje,));
		
		return $objResponse;
	}
	
	/**
	 * Documentación para la función 'reconectarServiciosNetlifeCamAction'
	 * Función utilizada para reconectar el servicio netlifecam en el portal 3dEYE.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 02-12-2019
	 *
	 * @return JsonResponse $objResponse
	 **/
	public function reconectarServiciosNetlifeCamAction()
	{
		$objResponse = new JsonResponse();
		$objRequest  = $this->getRequest();
		$emComercial = $this->getDoctrine()
		                    ->getManager("telconet");
		$emSeguridad = $this->getDoctrine()
		                    ->getManager("telconet_seguridad");
		
		$intIdServicio           = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0;
		$intIdAccion             = $objRequest->get('intIdAccion') ? $objRequest->get('intIdAccion') : 0;
		$objServicio             = $emComercial->getRepository('schemaBundle:InfoServicio')
		                                       ->find($intIdServicio);
		$objAccion               = $emSeguridad->getRepository('schemaBundle:SistAccion')
		                                       ->find($intIdAccion);
		$servicePortalNetlifecam = $this->get('tecnico.PortalNetlifeCam3dEYEService');
		
		$objSession     = $objRequest->getSession();
		$strIpClient    = $objRequest->getClientIp();
		$strUsrCreacion = $objSession->get('user');
		$serviceUtil    = $this->get('schema.Util');
		
		$strStatus     = "ERROR";
		$strMensaje    = "";
		
		try
		{
			if(is_object($objServicio) && is_object($objAccion))
			{
				$arrayRespReconectarServicio = $servicePortalNetlifecam->reconectarServicioNetCam($intIdServicio, $intIdAccion);
				
				if($arrayRespReconectarServicio["strStatus"] == "ERROR")
				{
					throw new Exception($arrayRespReconectarServicio["strMessage"]);
				}
				
				$strStatus  = "OK";
				$strMensaje = "Se ha reactivado el servicio de manera correcta";
			}
			else
			{
				throw new Exception("No se ha encontrado el objeto servicio o el objeto acción");
			}
		}
		catch(Exception $e)
		{
			$strMensaje = $e->getMessage();
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->reconectarServiciosNetlifeCamAction',
			                          $strMensaje,
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		catch(DBALException $ex)
		{
			$strMensaje = "Ha ocurrido un problema. Por favor notifique a Sistemas!";
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->reconectarServiciosNetlifeCamAction',
			                          $strMensaje,
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		
		$objResponse->setData(array("strStatus"  => $strStatus,
		                            "strMensaje" => $strMensaje,));
		
		return $objResponse;
	}
	
	/**
	 * Documentación para la función 'cancelarServiciosNetlifeCamAction'
	 * Función utilizada para cancelar el servicio netlifecam en el portal 3dEYE.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 02-12-2019
	 *
	 * @return JsonResponse $objResponse
	 **/
	public function cancelarServiciosNetlifeCamAction()
	{
		$objResponse = new JsonResponse();
		$objRequest  = $this->getRequest();
		$emComercial = $this->getDoctrine()
		                    ->getManager("telconet");
		$emSeguridad = $this->getDoctrine()
		                    ->getManager("telconet_seguridad");
		
		$intIdServicio           = $objRequest->get('intIdServicio') ? $objRequest->get('intIdServicio') : 0;
		$intIdAccion             = $objRequest->get('intIdAccion') ? $objRequest->get('intIdAccion') : 0;
		$objServicio             = $emComercial->getRepository('schemaBundle:InfoServicio')
		                                       ->find($intIdServicio);
		$objAccion               = $emSeguridad->getRepository('schemaBundle:SistAccion')
		                                       ->find($intIdAccion);
		$servicePortalNetlifecam = $this->get('tecnico.PortalNetlifeCam3dEYEService');
		
		$objSession     = $objRequest->getSession();
		$strIpClient    = $objRequest->getClientIp();
		$strUsrCreacion = $objSession->get('user');
		$serviceUtil    = $this->get('schema.Util');
		
		$strStatus     = "ERROR";
		$strMensaje    = "";
		
		try
		{
			if(is_object($objServicio) && is_object($objAccion))
			{
				$arrayRespCancelarServicio = $servicePortalNetlifecam->cancelarServicioNetCam($intIdServicio, $intIdAccion);
				
				if($arrayRespCancelarServicio["strStatus"] == "ERROR")
				{
					throw new Exception($arrayRespCancelarServicio["strMessage"]);
				}
				
				$strStatus  = "OK";
				$strMensaje = "Se ha cancelado el servicio de manera correcta";
			}
			else
			{
				throw new Exception("No se ha encontrado el objeto servicio o el objeto acción");
			}
		}
		catch(Exception $e)
		{
			$strMensaje = $e->getMessage();
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->cancelarServiciosNetlifeCamAction',
			                          $strMensaje,
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		catch(DBALException $ex)
		{
			$strMensaje = "Ha ocurrido un problema. Por favor notifique a Sistemas!";
			$serviceUtil->insertError('Telcos+',
			                          'InfoServicioController->cancelarServiciosNetlifeCamAction',
			                          $strMensaje,
			                          $strUsrCreacion,
			                          $strIpClient);
		}
		
		$objResponse->setData(array("strStatus"  => $strStatus,
		                            "strMensaje" => $strMensaje,));
		
		return $objResponse;
	}

        /**
         * Documentación para el método 'getAjaxCaracteristicasProductoPorServicioAction'.
         *
         * Metodo para obtener el listado de los valores de las características del producto por el servicio
         *
         * @author Felix Caicedo <facaicedo@telconet.ec>
         * @version 1.0 05-03-2020
         *
         * @return Response $objResponse - Lista de las características del producto
         */
        public function getAjaxCaracteristicasProductoPorServicioAction()
        {
            $objRequest    = $this->getRequest();
            $objSesion     = $objRequest->getSession();
            $strIpClient   = $objRequest->getClientIp();
            $strUsrSesion  = $objSesion->get('user');
            $serviceUtil   = $this->get('schema.Util');
            $intIdServicio = $objRequest->get('intIdServicio');
            $emComercial   = $this->getDoctrine()->getManager("telconet");
            $emGeneral     = $this->getDoctrine()->getManager("telconet_general");
            try
            {
                //obtengo el objeto del servicio
                $objInfoServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                //verifico que exista el servicio
                if( !is_object($objInfoServicio) )
                {
                    throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
                }
                //seteo la variable para el id del producto
                $intIdProducto      = null;
                //obtengo el objeto del plan
                $objPlan = $objInfoServicio->getPlanId();
                if( is_object($objPlan) )
                {
                    $objPlanDet     = $emComercial->getRepository('schemaBundle:InfoPlanDet')->findOneByPlanId($objPlan->getId());
                    if( is_object($objPlanDet) )
                    {
                        $intIdProducto = $objPlanDet->getProductoId();
                    }
                }
                //verifico si esta vacío la variable del id del producto
                if( empty($intIdProducto) )
                {
                    $objProducto    = $objInfoServicio->getProductoId();
                    if( is_object($objProducto) )
                    {
                        $intIdProducto = $objProducto->getId();
                    }
                }
                //verifico si esta vacío la variable del id del producto
                if( empty($intIdProducto) )
                {
                    throw new \Exception("No se encontró el id del producto, por favor notificar a Sistemas.");
                }
                //obtengo el parámetro cabecera de las características
                $objParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneByNombreParametro('NOMBRES_CARACTERISTICAS_PRODUCTO_GRID_TECNICO');
                //verifico que exista el parámetro cabecera de las características
                if( !is_object($objParametroCab) )
                {
                    throw new \Exception("No se encontraron las características del producto, por favor notificar a Sistemas.");
                }
                //obtengo los detalles de cabecera de las características
                $arrayParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy(array('parametroId' => $objParametroCab->getId(),
                                                                   'valor1'      => $intIdProducto,
                                                                   'estado'      => 'Activo'));
                //arreglo de los id de las caracteristicas
                $arrayIdCaracteristicas  = array();
                foreach($arrayParametroDet as $objParametroDet)
                {
                    $arrayIdCaracteristicas[] = $objParametroDet->getValor2();
                    
                }
                //arreglo de los resultados de las caracteristicas
                $arrayResultado  = array();
                //verifico si el arreglo contiene caracteristicas
                if( isset($arrayIdCaracteristicas) && !empty($arrayIdCaracteristicas) )
                {
                    //arreglo de los parametros para el enviar el metodo
                    $arrayParametros = array(
                        'intIdServicio'          => $intIdServicio,
                        'arrayIdCaracteristicas' => $arrayIdCaracteristicas
                    );
                    $arrayResultadosCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->getCaracteristicasProductoPorServicio($arrayParametros);
                    if( $arrayResultadosCaract['status'] == 'OK' )
                    {
                        $arrayResultado = $arrayResultadosCaract['result'];
                    }
                }
                //se formula el json de respuesta
                $strJsonResultado   = '{"total":"' . count($arrayResultado) . '","registros":' . json_encode($arrayResultado) . '}';
            }
            catch (\Exception $e)
            {
                $strJsonResultado   = '{"total":"0", "registros":[], "error":[' . $e->getMessage() . ']}';
                $serviceUtil->insertError('Telcos+',
                                          'InfoServicioController.getAjaxCaracteristicasProductoPorServicioAction',
                                          $e->getMessage(),
                                          $strUsrSesion,
                                          $strIpClient
                                         );
            }
            $objResponse = new Response();
            $objResponse->headers->set('Content-type', 'text/json');
            $objResponse->setContent($strJsonResultado);
            return $objResponse;
        }

        /**
         * Documentación para el método 'getAjaxTiposServiciosAction'.
         *
         * Metodo para obtener el listado de los tipos de servicios para el grid técnico
         *
         * @author Felix Caicedo <facaicedo@telconet.ec>
         * @version 1.0 06-03-2020
         *
         * @return Response $objResponse - Lista de los tipos de servicios
         */
        public function getAjaxTiposServiciosAction()
        {
            $objRequest    = $this->getRequest();
            $objSesion     = $objRequest->getSession();
            $strIpClient   = $objRequest->getClientIp();
            $strUsrSesion  = $objSesion->get('user');
            $serviceUtil   = $this->get('schema.Util');
            $emGeneral     = $this->getDoctrine()->getManager("telconet_general");
            try
            {
                //obtengo el parámetro cabecera de los tipos de servicios
                $objParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneByNombreParametro('TIPOS_SERVICIOS_GRID_TECNICO');
                //verifico que exista el parámetro cabecera de los tipos de servicios
                if( !is_object($objParametroCab) )
                {
                    throw new \Exception("No se encontraron los tipos de servicios, por favor notificar a Sistemas.");
                }
                //obtengo los detalles de cabecera de los tipos de servicios
                $arrayParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy(array('parametroId' => $objParametroCab->getId(),
                                                                   'estado'      => 'Activo'));
                //arreglo de los resultados de los tipos de servicios
                $arrayResultado  = array();
                foreach($arrayParametroDet as $objParametroDet)
                {
                    $arrayResultado[] = array(
                        'idTipo'          => $objParametroDet->getValor1(),
                        'descripcionTipo' => $objParametroDet->getValor2()
                    );
                }
                //se formula el json de respuesta
                $strJsonResultado   = '{"total":"' . count($arrayResultado) . '","encontrados":' . json_encode($arrayResultado) . '}';
            }
            catch (\Exception $e)
            {
                $strJsonResultado   = '{"total":"0", "encontrados":[], "error":[' . $e->getMessage() . ']}';
                $serviceUtil->insertError('Telcos+',
                                          'InfoServicioController.getAjaxTiposServiciosAction',
                                          $e->getMessage(),
                                          $strUsrSesion,
                                          $strIpClient
                                         );
            }
            $objResponse = new Response();
            $objResponse->headers->set('Content-type', 'text/json');
            $objResponse->setContent($strJsonResultado);
            return $objResponse;
        }

        /**
         * Documentación para el método 'getAjaxEstadosServiciosAction'.
         *
         * Metodo para obtener el listado de los estados de servicios para el grid técnico
         *
         * @author Felix Caicedo <facaicedo@telconet.ec>
         * @version 1.0 06-03-2020
         *
         * @return Response $objResponse - Lista de los estados de servicios
         */
        public function getAjaxEstadosServiciosAction()
        {
            $objRequest    = $this->getRequest();
            $objSesion     = $objRequest->getSession();
            $strIpClient   = $objRequest->getClientIp();
            $strUsrSesion  = $objSesion->get('user');
            $serviceUtil   = $this->get('schema.Util');
            $emGeneral     = $this->getDoctrine()->getManager("telconet_general");
            try
            {
                //obtengo el parámetro cabecera de los estados de servicios
                $objParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneByNombreParametro('ESTADOS_SERVICIOS_GRID_TECNICO');
                //verifico que exista el parámetro cabecera de los estados de servicios
                if( !is_object($objParametroCab) )
                {
                    throw new \Exception("No se encontraron los estados de servicios, por favor notificar a Sistemas.");
                }
                //obtengo los detalles de cabecera de los estados de servicios
                $arrayParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy(array('parametroId' => $objParametroCab->getId(),
                                                                   'estado'      => 'Activo'));
                //arreglo de los resultados de los estados de servicios
                $arrayResultado  = array();
                foreach($arrayParametroDet as $objParametroDet)
                {
                    $arrayResultado[] = array(
                        'idEstado'          => $objParametroDet->getValor1(),
                        'descripcionEstado' => $objParametroDet->getValor2()
                    );
                }
                //se formula el json de respuesta
                $strJsonResultado   = '{"total":"' . count($arrayResultado) . '","encontrados":' . json_encode($arrayResultado) . '}';
            }
            catch (\Exception $e)
            {
                $strJsonResultado   = '{"total":"0", "encontrados":[], "error":[' . $e->getMessage() . ']}';
                $serviceUtil->insertError('Telcos+',
                                          'InfoServicioController.getAjaxEstadosServiciosAction',
                                          $e->getMessage(),
                                          $strUsrSesion,
                                          $strIpClient
                                         );
            }
            $objResponse = new Response();
            $objResponse->headers->set('Content-type', 'text/json');
            $objResponse->setContent($strJsonResultado);
            return $objResponse;
        }

        /**
         * Documentación para el método 'getValoresListaAction'.
         *
         * Metodo para obtener el listado de valores para los comboBox del Formulario de Soporte Paramount y Noggin
         *
         * @author Richard Cabrera <rcabrera@telconet.ec>
         * @version 1.0 06-12-2020
         *
         * @return Response $objResponse - Lista de las categorias de un formulario de soporte: Paramount/Noggin
         */
        public function getValoresListaAction()
        {
            $objRequest     = $this->getRequest();
            $objSesion      = $objRequest->getSession();
            $strIpClient    = $objRequest->getClientIp();
            $strDescripcion = $objRequest->get("descripcion");
            $strUsrSesion   = $objSesion->get('user');
            $serviceUtil    = $this->get('schema.Util');
            $emGeneral      = $this->getDoctrine()->getManager("telconet_general");
            try
            {
                //obtengo el parámetro cabecera de los estados de servicios
                $objParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                ->findOneByNombreParametro('PROYECTO INTEGRACION PARAMOUNT');

                //verifico que exista el parámetro cabecera
                if( !is_object($objParametroCab) )
                {
                    throw new \Exception("No se encontraron los estados de servicios, por favor notificar a Sistemas.");
                }
                //obtengo los detalles de cabecera de los estados de servicios
                $arrayParametroDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                               ->findBy(array('parametroId' => $objParametroCab->getId(),
                                                              'descripcion' => $strDescripcion,
                                                              'estado'      => 'Activo'));

                //arreglo de los resultados de los estados de servicios
                $arrayResultado = array();

                foreach($arrayParametroDet as $objParametroDet)
                {
                    $arrayResultado[] = array('idValor'       => $objParametroDet->getValor2(),
                                              'nombreValor'   => $objParametroDet->getValor2()
                    );
                }
                //se formula el json de respuesta
                $strJsonResultado = '{"total":"' . count($arrayResultado) . '","encontrados":' . json_encode($arrayResultado) . '}';
            }
            catch (\Exception $e)
            {
                $strJsonResultado   = '{"total":"0", "encontrados":[], "error":[' . $e->getMessage() . ']}';

                $serviceUtil->insertError('Telcos+',
                                          'InfoServicioController.getValoresListaAction',
                                          $e->getMessage(),
                                          $strUsrSesion,
                                          $strIpClient);
            }
            $objResponse = new Response();
            $objResponse->headers->set('Content-type', 'text/json');
            $objResponse->setContent($strJsonResultado);
            return $objResponse;
        }
        /**
         * Documentación para el método 'getUsuarioServicioAction'.
         *
         * Metodo para obtener el usuario del servicio ECDF
         *
         * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
         * @version 1.0 10-09-2021
         *
         * @return Response $objResponse - nombre de usuario del servicio ECDF
         */
        public function getUsuarioServicioAction()
        {
            $objRequest     = $this->getRequest();
            $objSesion      = $objRequest->getSession();
            $strIpClient    = $objRequest->getClientIp();
            $strDescripcion = $objRequest->get("descripcion");
            $strIdServicio  = $objRequest->get("idServicio");
            $strUsrSesion   = $objSesion->get('user');
            $serviceUtil    = $this->get('schema.Util');
            $emComercial    = $this->getDoctrine()->getManager("telconet");
            try
            {
                //valido si el id servicio es correcto
                $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')->findOneById($strIdServicio);

                if(is_object($objServicio))
                {
                    $arrayParamsGetUsuarioXIdServicio      = array(
                                                                        "intIdServicio"                 => $objServicio->getId(),
                                                                        "strDescripcionCaract"          => $strDescripcion,
                                                                        "strEstadoSpcEstaParametrizado" => "SI");
                    //se busca el Spc
                    $arrayRespuestaGetUsuarioXIdServicio   = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                    ->obtieneInfoSpcProductosTv($arrayParamsGetUsuarioXIdServicio);
                    if($arrayRespuestaGetUsuarioXIdServicio['status'] !== "OK")
                    {
                        throw new \Exception ("No se pudo obtener la contrasenia del servicio");
                    }
                    //asigna resultado
                    $arrayRegistrosGetUsuarioXIdServicio = $arrayRespuestaGetUsuarioXIdServicio["arrayRegistros"];
                    $intIdSpcUsuario  = $arrayRegistrosGetUsuarioXIdServicio[0]["strValorSpc"];
                    $arrayResultado[] = array('usuarioServicio'   => $intIdSpcUsuario );
                }
                else
                {
                    throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
                }
                //se formula el json de respuesta
                $strJsonResultado = '{"total":"' . count($arrayResultado) . '","encontrados":' . json_encode($arrayResultado) . '}';
            }
            catch (\Exception $e)
            {
                $strJsonResultado   = '{"total":"0", "encontrados":[], "error":[' . $e->getMessage() . ']}';

                $serviceUtil->insertError('Telcos+',
                                          'InfoServicioController.getUsuarioServicioAction',
                                          $e->getMessage(),
                                          $strUsrSesion,
                                          $strIpClient);
            }
            $objResponse = new Response();
            $objResponse->headers->set('Content-type', 'text/json');
            $objResponse->setContent($strJsonResultado);
            return $objResponse;
        }

        /**
         * Documentación para el método 'getValoresParametrosAction'.
         *
         * Metodo para obtener el listado de valores para las solicitudes o formularios que se crean para los productos de streaming
         * de TV o cualquier otro servicio, indicando la descripcion de la caracteristica y el nombre tecnico del producto utilizado.
         *
         * @author Daniel Reyes <djreyes@telconet.ec>
         * @version 1.0 07-10-2021
         *
         * @return Response $objResponse - Listacon los valores obtenidos de los parametros
         */
        public function getValoresProductosAction()
        {
            $objRequest     = $this->getRequest();
            $objSesion      = $objRequest->getSession();
            $strDescripcion = $objRequest->get("descripcion");
            $strProducto    = $objRequest->get("producto");
            $strUsrSesion   = $objSesion->get('user');
            $strIpSesion    = $objRequest->getClientIp();
            $strCodEmpresa  = $objSesion->get('idEmpresa');
            $serviceUtil    = $this->get('schema.Util');
            $emGeneral      = $this->getDoctrine()->getManager("telconet_general");
            try
            {
                $strNombreParametro = "LISTADO_VALORES_PRODUCTOS_TV";
                $strModulo = "TECNICO";
                $strProceso = "PRODUCTOS_TV";
                // Obtenemos los valores parametrizados
                $arrayParamValores = array();
                $arrayParamValores  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                        ->get($strNombreParametro,//nombre parametro cab
                                            $strModulo, //modulo cab
                                            $strProceso,//proceso cab
                                            $strDescripcion, //descripcion det
                                            $strProducto,//valor1
                                            '','','','',
                                            $strCodEmpresa); //empresa

                foreach($arrayParamValores as $objParametroDet)
                {
                    $arrayResultado[] = array('idValor'     => $objParametroDet['valor3'],
                                              'nombreValor' => $objParametroDet['valor3']);
                }
                // Se formula el json de respuesta
                $strJsonResultado = '{"total":"' . count($arrayResultado) . '","valores":' . json_encode($arrayResultado) . '}';
            }
            catch (\Exception $e)
            {
                $strJsonResultado   = '{"total":"0", "valores":[], "error":[' . $e->getMessage() . ']}';

                $serviceUtil->insertError('Telcos+',
                                          'InfoServicioController.getValoresListaAction',
                                          $e->getMessage(),
                                          $strUsrSesion,
                                          $strIpSesion);
            }
            $objResponse = new Response();
            $objResponse->headers->set('Content-type', 'text/json');
            $objResponse->setContent($strJsonResultado);
            return $objResponse;
        }

        /**
         * @Secure(roles="ROLE_151-7257")
         *
         * Documentación para el método 'ajaxReversarSolicitudCambioUMAction'.
         *
         * Método para reversar la solicitud de cambio de UM
         *
         * @author Felix Caicedo <facaicedo@telconet.ec>
         * @version 1.0 18-03-2020
         *
         * @return Response $objResponse
         */
        public function ajaxReversarSolicitudCambioUMAction()
        {
            $objResponse         = new Response();
            $objRequest          = $this->get('request');
            $objSession          = $this->get('session');
            $serviceCambioPuerto = $this->get('tecnico.InfoCambiarPuerto');
            $arrayParametros     = array(
                                    'intIdServicio'     => $objRequest->get('intIdServicio'),
                                    'strObservacion'    => $objRequest->get('strObservacion'),
                                    'strUsrCreacion'    => $objSession->get('user'),
                                    'strIpCreacion'     => $objRequest->getClientIp()
                                  );
            $objRespuesta        = $serviceCambioPuerto->reversarSolicitudCambioUM($arrayParametros);
            return $objResponse->setContent($objRespuesta);
        }

        /**
         * @Secure(roles="ROLE_151-7277")
         *
         * Documentación para el método 'ajaxReversarSolicitudMigracionAnilloAction'.
         *
         * Método para reversar la solicitud de migración de anillo o vlan
         *
         * @author Felix Caicedo <facaicedo@telconet.ec>
         * @version 1.0 23-03-2020
         *
         * @return Response $objResponse
         */
        public function ajaxReversarSolicitudMigracionAnilloAction()
        {
            $objResponse         = new Response();
            $objRequest          = $this->get('request');
            $objSession          = $this->get('session');
            $serviceCambioPuerto = $this->get('tecnico.InfoCambiarPuerto');
            $arrayParametros     = array(
                                    'intIdServicio'     => $objRequest->get('intIdServicio'),
                                    'strObservacion'    => $objRequest->get('strObservacion'),
                                    'strUsrCreacion'    => $objSession->get('user'),
                                    'strIpCreacion'     => $objRequest->getClientIp()
                                  );
            $objRespuesta        = $serviceCambioPuerto->reversarSolicitudMigracionAnillo($arrayParametros);
            return $objResponse->setContent($objRespuesta);
        }
        
    /**
     * Función ajaxGetSaldoPorVencerNDIAction, función encargada de obtener el saldo pendiente de NDI por generarse.
     * 
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 1.0 - 22-06-2020
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function ajaxGetSaldoPorVencerNDIAction()
    {
        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objRequest             = $this->get('request');
        $intIdServicio          = $objRequest->get('idServicio');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emFinanciero           = $this->get('doctrine')->getManager("telconet_financiero");

        $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

        if (!is_object($objServicio))
        {
            throw new \Exception("No se encontro información del servicio");
        }
        
        $objPunto                       = $objServicio->getPuntoId();
        $arrayParametros                = array();
        $arrayParametros['intPuntoId']  = $objPunto->getId();
        
        $intSaldoNDI                    = $emFinanciero->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                       ->getSaldoPorVencerNDI($arrayParametros);
        $arrayNDI                       = array();
        $arrayNDI['totalNDI']           = $intSaldoNDI;
        $objResponse->setContent(json_encode($arrayNDI));

        return $objResponse;
    }

   /**
     * Documentación para el método 'ajaxGetEquipoSdwanAction'.
     *
     * Método utilizado para generar el Json de las series de los equipos activos a asociar el servicio de seguridad.
     *
     * @param int idServicio id del servicio a consultar los protocolos de enrutamiento
     *
     * @return JsonResponse [{ 
     *                      'serie' : 'serie del equipo'
     *                      'servicio'  : 'id servicio del equipo a asociar'
     *                      }]
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 23-07-2020
    */
    public function ajaxGetEquipoSdwanAction()
    {
        $objResponse             = new JsonResponse();
        $objRequest              = $this->get('request');
        $arrayServiciosSdwan     = array();
        $intServicioId           = $objRequest->get('idServicio');
        $intEmpresaId            = $objRequest->get('idEmpresa');
        $emComercial             = $this->get('doctrine')->getManager();
        $serviceCancelar         = $this->get('tecnico.InfoCancelarServicio');
        $objServicio             = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
        
        $objProductoInterSdwan    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet SDWAN',
                                                                                            'empresaCod'          => $intEmpresaId));
                    
        $objProductoDatoSdwan    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'L3MPLS SDWAN',
                                                                                            'empresaCod'          => $intEmpresaId));
        
        $objInternetMpls         = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet MPLS',
                                                                                            'empresaCod'          => $intEmpresaId));
        if((is_object($objProductoInterSdwan) && !empty($objProductoInterSdwan)) || 
            (is_object($objProductoDatoSdwan) && !empty($objProductoDatoSdwan)) || 
           (is_object($objInternetMpls) && !empty($objInternetMpls)))
        {
            if(is_object($objProductoInterSdwan) && !empty($objProductoInterSdwan))
            {
                $arrayServicioInternetSdwan = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                    array('puntoId' => $objServicio->getPuntoId(),
                                                                                          'productoId' => $objProductoInterSdwan->getId(),
                                                                                          'estado' => 'Activo'));
                if(is_array($arrayServicioInternetSdwan) && !empty($arrayServicioInternetSdwan))
                {
                    foreach($arrayServicioInternetSdwan as $objInternet)
                    {
                      array_push($arrayServiciosSdwan,$objInternet);
                    }
                }
                
            }

            if(is_object($objProductoDatoSdwan) && !empty($objProductoDatoSdwan))
            {
                $arrayServicioDatosSdwan = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                     array('puntoId' => $objServicio->getPuntoId(),
                                                                                           'productoId' => $objProductoDatoSdwan->getId(),
                                                                                           'estado' => 'Activo'));
                if(is_array($arrayServicioDatosSdwan) && !empty($arrayServicioDatosSdwan))
                {
                    foreach($arrayServicioDatosSdwan as $objDatos)
                    {
                      array_push($arrayServiciosSdwan,$objDatos);  
                    }
                }
                
            }
            if(is_object($objInternetMpls) && !empty($objInternetMpls))
            {
                $arrayServicioMpls = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                array('puntoId' => $objServicio->getPuntoId(),
                                                                                      'productoId' => $objInternetMpls->getId(),
                                                                                      'estado' => 'Activo'));
                if(is_array($arrayServicioMpls) && !empty($arrayServicioMpls))
                {
                   $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
                   foreach($arrayServicioMpls as $objMpls)
                   {
                        $objServProdCaractSDWAN   = $serviceServicioTecnico->getServicioProductoCaracteristica($objMpls,
                                                                                                 'SDWAN',
                                                                                                 $objMpls->getProductoId()
                                                                                                 ); 
                        if(is_object($objServProdCaractSDWAN) && !empty($objServProdCaractSDWAN))
                        {
                            array_push($arrayServiciosSdwan,$objMpls);  
                        }
                    }
                }
            }
            if((is_array($arrayServiciosSdwan) && !empty($arrayServiciosSdwan)))
            {
                foreach($arrayServiciosSdwan as $objServicio)
                {
                    $objSerTec   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                   ->findOneBy(array(
                                                                   'servicioId' => $objServicio->getId()));
                    
                    if(is_object($objSerTec) && !empty($objSerTec))
                    {
                        $objElementoCpe = $serviceCancelar->getElementoCpeServicioTn($objSerTec);
                        $strSerieEquipo = $arrayResultado[0]['serie'];
                        if(!($objElementoCpe->getSerieFisica()==$strSerieEquipo))
                        {
                            $arrayResultado[] = array(
                            'serie'          => $objElementoCpe->getSerieFisica(),
                            'servicioSdwan'  => $objServicio->getId());
                        }
                    }
                }
            }
            
        }
        
        $objResultado = json_encode($arrayResultado);
        
        $objResponse->setContent($objResultado);

        return $objResponse;
    }

    
     /**
     * Documentación para el método 'ajaxGuardarEnlaceSdwanSeguridadAction'.
     *
     * Método utilizado para registrar las caracteristicas del servicio de seguridad.
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 23-07-2020
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 12-01-2021 - Se ingresa la solicitud de RPA licenciamiento para los equipos que requieran licencia.
     * 
     * @return Response $objResponse
    */
    public function ajaxGuardarEnlaceSdwanSeguridadAction()
    {
        ini_set('max_execution_time', 9000000);
        
        $strMensaje          = "Error";
        $objRequest          = $this->get('request');      
        $objSession          = $objRequest->getSession();
        $emComercial         = $this->get('doctrine')->getManager();        
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        $intIdServicio       = $objRequest->get('idServicio');
        $intServicioSdwan    = $objRequest->get('serie');
        $strFechaCad         = $objRequest->get('fechaCad');    
        $serviceTecnico      = $this->get('tecnico.InfoServicioTecnico');
        $emGeneral           = $this->get('doctrine')->getManager('telconet_general');
        $serviceCancelar     = $this->get('tecnico.InfoCancelarServicio');        
        $serviceUtil         = $this->get('schema.Util');

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        try
        {                        
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio) && !empty($objServicio))
            {
                $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId());
            }
            
            $objSerTec   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array(
                                                            'servicioId' => $intServicioSdwan));

            if(is_object($objSerTec) && !empty($objSerTec))
            {
                $objElementoCpe = $serviceCancelar->getElementoCpeServicioTn($objSerTec);
                
                if(is_object($objElementoCpe) && !empty($objElementoCpe))
                {
                    $strFecha = new \DateTime($strFechaCad);
                    $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                            $objProducto,
                                                                            'SERIE_EQUIPO_SDWAN',
                                                                            $objElementoCpe->getSerieFisica(),
                                                                            $objSession->get('user')
                                                                            );
                    
                    $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                            $objProducto,
                                                                            'ID_SERVICIO_SDWAN',
                                                                            $intServicioSdwan,
                                                                            $objSession->get('user')
                                                                            );
                    
                    $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                            $objProducto,
                                                                            'FECHA_EXPIRACION_SEGURIDAD',
                                                                            date_format($strFecha, "d/m/Y"),
                                                                            $objSession->get('user')
                                                                            );
                    
                    $objServicio->setEstado('Activo');
                    $emComercial->persist($objServicio);
                    $emComercial->flush();
                    
                    //historial del servicio
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setObservacion("Se confirma servicio con el cliente.");
                    $objServicioHistorial->setEstado("Activo");
                    $objServicioHistorial->setAccion("confirmarServicio");
                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                    $emComercial->persist($objServicioHistorial);
                    $emComercial->flush();
                
                    $strMensaje = "Servicio Activado Correctamente.";

                    //generar la solicitud de licenciamiento
                    //obtener el id de la marca del elemento
                    $intIdMarcaElemento     = $objElementoCpe->getModeloElementoId()->getMarcaElementoId()->getId();
                    //seteo el arreglo de los id de las marcas
                    $arrayIdMarcasLicencia  = array();
                    //obtengo las marcas de los elementos para licenciamiento
                    $arrayParamDetMarcas    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get('RPA_MARCA_ELEMENTOS_LICENCIA',
                                                            'TECNICO',
                                                            '',
                                                            '',
                                                            $objProducto->getId(),
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '10');
                    if(is_array($arrayParamDetMarcas) && !empty($arrayParamDetMarcas))
                    {
                        foreach($arrayParamDetMarcas as $arrayDetParametro)
                        {
                            $arrayIdMarcasLicencia[] = $arrayDetParametro['valor2'];
                        }
                    }
                    //verifico si la marca requiere licenciamiento
                    if(in_array($intIdMarcaElemento, $arrayIdMarcasLicencia))
                    {
                        //obtengo el tipo de solicitud de rpa licencia
                        $objTipoSolicitudRpa  = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                        ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RPA LICENCIA",
                                                                                          "estado"               => "Activo"));
                        if(is_object($objTipoSolicitudRpa))
                        {
                            //obtengo el servicio del elemento
                            $objServicioSdwan = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioSdwan);
                            //verifico el objeto del servicio
                            if(is_object($objServicioSdwan))
                            {
                                //ingreso la solicitud
                                $objDetalleSolicitudRpa = new InfoDetalleSolicitud();
                                $objDetalleSolicitudRpa->setServicioId($objServicioSdwan);
                                $objDetalleSolicitudRpa->setTipoSolicitudId($objTipoSolicitudRpa);
                                $objDetalleSolicitudRpa->setEstado("Pendiente");
                                $objDetalleSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                $objDetalleSolicitudRpa->setUsrCreacion($objSession->get('user'));
                                $objDetalleSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                $emComercial->persist($objDetalleSolicitudRpa);
                                $emComercial->flush();
                                //crear historial para la solicitud
                                if(is_object($objDetalleSolicitudRpa))
                                {
                                    $objHistorialSolicitudRpa = new InfoDetalleSolHist();
                                    $objHistorialSolicitudRpa->setDetalleSolicitudId($objDetalleSolicitudRpa);
                                    $objHistorialSolicitudRpa->setEstado("Pendiente");
                                    $objHistorialSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                    $objHistorialSolicitudRpa->setUsrCreacion($objSession->get('user'));
                                    $objHistorialSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                    $objHistorialSolicitudRpa->setIpCreacion($objRequest->getClientIp());
                                    $emComercial->persist($objHistorialSolicitudRpa);
                                    $emComercial->flush();
                                    //historial del servicio
                                    $objServicioHistorial = new InfoServicioHistorial();
                                    $objServicioHistorial->setServicioId($objServicio);
                                    $objServicioHistorial->setObservacion("Se generó la solicitud de licenciamiento para el login auxiliar: "
                                                                           .$objServicioSdwan->getLoginAux());
                                    $objServicioHistorial->setEstado("Activo");
                                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                                    $emComercial->persist($objServicioHistorial);
                                    $emComercial->flush();
                                }
                            }
                        }
                    }

                    //se guardan los cambios
                    $emComercial->commit();
                }
            }
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al Guardar el Servicio de Seguridad";
            
            $serviceUtil->insertError('TELCOS', 
                                      'ajaxGuardarEnlaceSdwanSeguridadAction', 
                                      $e->getMessage(), 
                                      $objRequest->getSession()->get('user'), 
                                      $objRequest->getClientIp()
                                     );
            
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
        
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
                $emInfraestructura->close();
            }
        }
        
        return new Response($strMensaje);
    }
    
    
    /**
     * getModelosEquiposPorTecnologiaAction
     * 
     * Función que obtiene los modelos de equipos parametrizados por tecnología
     * 
     * @return Response $objResponse   json Retorna un json de los modelos de Cpe Ont
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 22-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 15-04-2021 Se agrega validación para obtener los modelos de extenders en caso de que el Internet tenga conectado un equipo V5
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 03-01-2022 Se modifica la obtención de extenders por ont y tecnología de olt y así permitir los extenders para ZTE
     * 
     */
    public function getModelosEquiposPorTecnologiaAction()
    {
        $objJsonResponse        = new JsonResponse();
        $objRequest             = $this->getRequest();
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura      = $this->getDoctrine()->getManager("telconet_infraestructura");
        $objSession             = $objRequest->getSession();
        $strCodEmpresa          = $objSession->get('idEmpresa');
        $strModelosEquipos      = ($objRequest->get('strModelosEquipos')) ? $objRequest->get('strModelosEquipos') : 'MODELOS_EQUIPOS';
        $intIdServicio          = $objRequest->get('intIdServicio');
        $strTipoEquipos         = ($objRequest->get('strTipoEquipos')) ? $objRequest->get('strTipoEquipos') : '';
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $intTotal               = 0;
        $arrayStoreModelos      = array();
        $boolContinuaBusqueda   = true;
        try
        {
            if(!isset($intIdServicio) || empty($intIdServicio))
            {
                throw new \Exception("No se ha enviado el id del servicio");
            }
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha podido obtener el objeto del servicio");
            }
            
            $arrayRespuestaServInternetValido   = $serviceServicioTecnico->obtieneServicioInternetValido(array( "intIdPunto"    => 
                                                                                                                $objServicio->getPuntoId()->getId(),
                                                                                                                "strCodEmpresa" => $strCodEmpresa));
            $strStatusServicioInternet          = $arrayRespuestaServInternetValido["status"];
            $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];
            if($strStatusServicioInternet === "OK" && is_object($objServicioInternet))
            {
                $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                  ->findOneByServicioId($objServicioInternet->getId());
                if(is_object($objServicioTecnico))
                {
                    $intIdElementoOlt   = $objServicioTecnico->getElementoId();
                    if(isset($intIdElementoOlt) && !empty($intIdElementoOlt))
                    {
                        $objElementoOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoOlt);
                        if(is_object($objElementoOlt))
                        {
                            $strMarcaOlt    = $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                            $strModeloOlt   = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
                            
                            if($strTipoEquipos === "EXTENDER DUAL BAND")
                            {
                                $intIdElementoCliente   = $objServicioTecnico->getElementoClienteId();
                                if(!isset($intIdElementoCliente) || empty($intIdElementoCliente))
                                {
                                    throw new \Exception("No se pudo obtener el equipo del cliente del servicio de Internet contratado");
                                }
                                $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoCliente);
                                if(!is_object($objElementoCliente))
                                {
                                    throw new \Exception("No se ha podido obtener el elemento del cliente");
                                }
                                $strNombreModeloElementoOnt         = $objElementoCliente->getModeloElementoId()->getNombreModeloElemento();
                                $arrayModelosEquiposParametrosMd    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->get(  'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        'MODELOS_EXTENDERS_POR_ONT',
                                                                                        $strMarcaOlt,
                                                                                        '',
                                                                                        $strNombreModeloElementoOnt,
                                                                                        '',
                                                                                        $strCodEmpresa);
                                if(is_array($arrayModelosEquiposParametrosMd) && count($arrayModelosEquiposParametrosMd) > 0)
                                {
                                    $boolContinuaBusqueda = false;
                                    $intTotal = count($arrayModelosEquiposParametrosMd);
                                    foreach($arrayModelosEquiposParametrosMd as $arrayParametro)
                                    {   
                                        $arrayStoreModelos[] = array('strNombreModelo'  => $arrayParametro['valor5']);
                                    }
                                }
                            }
                            
                            if($boolContinuaBusqueda)
                            {
                                $arrayModelosEquiposParametrosMd    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->get(  'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        $strModelosEquipos,
                                                                                        $strMarcaOlt,
                                                                                        $strModeloOlt,
                                                                                        $strTipoEquipos,
                                                                                        '',
                                                                                        $strCodEmpresa);
                                if(is_array($arrayModelosEquiposParametrosMd) && count($arrayModelosEquiposParametrosMd) > 0)
                                {
                                    $intTotal = count($arrayModelosEquiposParametrosMd);
                                    foreach($arrayModelosEquiposParametrosMd as $arrayParametro)
                                    {   
                                        $arrayStoreModelos[] = array('strNombreModelo'  => $arrayParametro['valor5']);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            error_log("Error al cargar los modelos de los equipos ".$e->getMessage());
            $intTotal           = 0;
            $arrayStoreModelos  = array();
        }
        
        $arrayResultado = array("intTotal"          => $intTotal,
                                "arrayRegistros"    => $arrayStoreModelos);
        $objJsonResponse->setData($arrayResultado);
        return $objJsonResponse;
    }
            

   
    /**
     * 
     * Documentación para el método 'confirmarServicioPlanAction'.
     *
     * Método utilizado cambiar el estado a activo a los planes especificados que se encuentren dentro den un Plan.
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 17-09-2020
     * 
     */
    public function confirmarServicioPlanAction()
    {
        $objResponse                = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $emComercial                = $this->get('doctrine')->getManager('telconet');
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();
        $objPeticion                = $this->get('request');
        $intServicioId              = $objPeticion->get('idServicio');
        $intProductoId              = $objPeticion->get('idProducto');
        $strIpCreacion              = $objRequest->getClientIp();
        $strUser                    = $objSession->get('user');
        $emComercial->getConnection()->beginTransaction();
        try
        {
            $objAdmiTipoSolicitudPla = $emComercial->getRepository("schemaBundle:AdmiTipoSolicitud")
                                              ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD PLANIFICACION',
                                                                'estado'               => 'Activo'));
                    
            if(is_object($objAdmiTipoSolicitudPla) && !empty($objAdmiTipoSolicitudPla))
            {
                $arrayParametrosPla = array ('Servicio'      => $intServicioId,
                                            'TipoSolicitud' => $objAdmiTipoSolicitudPla->getId(),
                                            'Producto'      => $intProductoId);
                $arrayDetalleSolicitudPla = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                                    ->getEstadoSolicitudAdicional($arrayParametrosPla);
                if(is_array($arrayDetalleSolicitudPla) && !empty($arrayDetalleSolicitudPla))
                {
                    $objDetalleSol = $arrayDetalleSolicitudPla[0];
                    $objDetalleSol->setEstado('Activo');
                    $emComercial->persist($objDetalleSol);
                    $emComercial->flush();

                    $objDetalleSolHist = $emComercial->getRepository("schemaBundle:InfoDetalleSolHist")
                                                                         ->findOneBy(array('detalleSolicitudId' => $objDetalleSol->getId()));
                    if(is_object($objDetalleSolHist) && !empty($objDetalleSolHist))
                    {
                        $entityDetalleSolHist = new InfoDetalleSolHist();
                        $entityDetalleSolHist->setDetalleSolicitudId($objDetalleSol);
                        $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                        $entityDetalleSolHist->setUsrCreacion($strUser);
                        $entityDetalleSolHist->setEstado('Activo');
                        $emComercial->persist($entityDetalleSolHist);
                        $emComercial->flush();
                    }

                    $objDetalleSolCaract = $emComercial->getRepository("schemaBundle:InfoDetalleSolCaract")
                                                                         ->findOneBy(array('detalleSolicitudId' => $objDetalleSol->getId(),
                                                                                            'valor'             => $intProductoId,
                                                                                            'estado'            => 'PrePlanificada'));
                    if(is_object($objDetalleSolCaract) && !empty($objDetalleSolCaract))
                    {
                        $objDetalleSolCaract->setEstado('Activo');
                        $emComercial->persist($objDetalleSolCaract);
                        $emComercial->flush();
                    }
                }
                else
                {
                    $objServicio = $emComercial->getRepository("schemaBundle:InfoServicio")
                                                                                    ->findOneBy(array('id'           => $intServicioId,
                                                                                                      'productoId'  => $intProductoId,
                                                                                                       'estado'      => 'Asignada'));
                    if(is_object($objServicio) && !empty($objServicio))
                    {
                        $objServicio->setEstado('Activo');
                        $emComercial->persist($objServicio);
                        $emComercial->flush();
                        
                        $objServicioHist = new InfoServicioHistorial();
                        $objServicioHist->setServicioId($objServicio);
                        $objServicioHist->setObservacion('Se Confirmo el Servicio');
                        $objServicioHist->setIpCreacion($strIpCreacion);
                        $objServicioHist->setUsrCreacion($strUser);
                        $objServicioHist->setFeCreacion(new \DateTime('now'));
                        $objServicioHist->setAccion('confirmarServicio');
                        $objServicioHist->setEstado('Activo');
                        $emComercial->persist($objServicioHist);
                        $emComercial->flush();
                    }
                    
                    
                }
                $emComercial->commit();
                $arrayResultado = array('srtResultado'  => 'OK');      
                $objJson = json_encode($arrayResultado);  
                $objResponse->setContent($objJson);   
            }
           
        }
        catch(\Exception $ex)
        {
           $strMensaje = "Error: " . $e->getMessage();
            $this->serviceUtil->insertError('TELCOS+',
                                            'InfoOrdenTrabajo.generarOtServiciosAdicional',
                                            $strMensaje,
                                            'Telcos+',
                                            '127.0.0.1');
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
            $arrayResultado = array('srtResultado'  => 'Error');      
            $objJson = json_encode($arrayResultado);  
            $objResponse->setContent($objJson);   
        }
        
        return $objResponse;
    }

    /**
     * Documentación para el método 'getProductosPorPlanAction'.
     * Método utilizado para verificar si el nuevo plan tiene producto de cableado
     *
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.0 02-03-2021
     * 
     */
    public function productoPorPlanAction()
    {
        ini_set('max_execution_time', 900000);
        $objJsonResponse = new JsonResponse();
        $objRequest      = $this->getRequest();
        $objSession      = $objRequest->getSession();
        $intPlanId       = $objRequest->get('planId');
        $serviceServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strStatus       = "";
        $strMensaje      = "";

        $arrayProductoEnPlan = $serviceServicioTecnico->obtieneProductoEnPlan(
                                            array("intIdPlan" => $intPlanId,
                                                  "strDescripcionProducto" => "CABLEADO ETHERNET"));
        $strProductoEnPlan = $arrayProductoEnPlan["strProductoEnPlan"];
        if($strProductoEnPlan === "SI")
        {
            $strStatus  = "OK";
            $strMensaje = "Posee productos adicionales";
        }
        else
        {
            $strStatus  = "ERROR";
            $strMensaje = "No posee productos adicionales";
        }
        $arrayRespuesta = array("status"  => $strStatus,
                                "mensaje" => $strMensaje);
        $objJsonResponse->setData($arrayRespuesta);
        return $objJsonResponse;
    }

    /**
     * Documentación para el método 'ajaxGetTipoRedPorProductoAction'.
     *
     * Metodo para obtener el listado de tipos de red por producto
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 21-07-2021
     *
     * @return Response $objResponse - Lista de tipos de red
     */
    public function ajaxGetTipoRedPorProductoAction()
    {
        $objRequest    = $this->getRequest();
        $objSesion     = $objRequest->getSession();
        $strIpClient   = $objRequest->getClientIp();
        $intIdEmpresa  = $objSesion->get('idEmpresa');
        $strUsrSesion  = $objSesion->get('user');
        $serviceUtil   = $this->get('schema.Util');
        $emComercial   = $this->getDoctrine()->getManager("telconet");
        $emGeneral     = $this->getDoctrine()->getManager("telconet_general");
        $intIdProducto = $objRequest->get('intIdProducto');

        try
        {
            //obtener producto
            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
            if(!is_object($objProducto))
            {
                throw new \Exception("No se ha podido obtener el producto, por favor notificar a Sistemas.");
            }

            //verificar si permite GPON_MPLS
            $arrayValidaProductoGpon    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('NUEVA_RED_GPON_TN',
                                                        'COMERCIAL',
                                                        '',
                                                        '',
                                                        $objProducto->getId(),
                                                        '',
                                                        '',
                                                        'S',
                                                        'RELACION_PRODUCTO_CARACTERISTICA',
                                                        $intIdEmpresa);
            //verificar si no permite MPLS
            $arrayValidaProductoMPLS    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('NUEVA_RED_GPON_TN',
                                                        'COMERCIAL',
                                                        '',
                                                        '',
                                                        $objProducto->getId(),
                                                        '',
                                                        '',
                                                        'S',
                                                        'PRODUCTO_NO_PERMITIDO_MPLS',
                                                        $intIdEmpresa);
            //obtengo los tipos de red
            $arrayResultado         = array();
            $arrayTipoRedDetalles   = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get('PROD_TIPO_RED',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    $intIdEmpresa);
            //arreglo de los resultados de los estados de servicios
            foreach($arrayTipoRedDetalles as $arrayItemDet)
            {
                if( ( $arrayItemDet['valor4'] == "DEFAULT" && ( empty($arrayValidaProductoMPLS)
                      || $arrayValidaProductoMPLS['valor3'] != $arrayItemDet['valor1'] ) )
                    || ( isset($arrayValidaProductoGpon) && !empty($arrayValidaProductoGpon)
                        && $arrayValidaProductoGpon['valor3'] == $arrayItemDet['valor1'] ) )
                {
                    $arrayResultado[] = array(
                        'id'   => $arrayItemDet['valor1'],
                        'name' => $arrayItemDet['valor2']
                    );
                }
            }
            //se formula el json de respuesta
            $strJsonResultado   = '{"total":"' . count($arrayResultado) . '","encontrados":' . json_encode($arrayResultado) . '}';
        }
        catch (\Exception $e)
        {
            $strJsonResultado   = '{"total":"0", "encontrados":[], "error":"'. $e->getMessage().'"]}';
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController.ajaxGetTipoRedPorServicioAction',
                                      $e->getMessage(),
                                      $strUsrSesion,
                                      $strIpClient
                                     );
        }
        $objResponse = new Response();
        $objResponse->headers->set('Content-type', 'text/json');
        $objResponse->setContent($strJsonResultado);
        return $objResponse;
    }
    
    /**
     * Documentación para el método 'ajaxGetEquipoCpeAction'.
     *
     * Método utilizado para generar el Json de las series de los equipos activos a asociar el servicio de seguridad.
     *
     * @param int idServicio id del servicio a consultar los protocolos de enrutamiento
     *
     * @return JsonResponse [{ 
     *                      'serie'       : 'serie del equipo'
     *                      'servicio'    : 'id servicio del equipo a asociar'
     *                      'numLicencia' : 'numero de licencia ingresado'
     *                      }]
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 16-07-2021
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 10-08-2021 Visualizar solo servicios tradicionales principales
    */
    public function ajaxGetEquipoCpeAction()
    {
        $objResponse             = new JsonResponse();
        $objRequest              = $this->get('request');
        $arrayServiciosMpls      = array();
        $intServicioId           = $objRequest->get('idServicio');
        $intEmpresaId            = $objRequest->get('idEmpresa');
        $emComercial             = $this->get('doctrine')->getManager();
        $emInfraestructura       = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emGeneral               = $this->get('doctrine')->getManager('telconet_general');
        $serviceTecnico          = $this->get('tecnico.InfoServicioTecnico');
        $objServicio             = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
        
        $intIdServicio           = $objServicio->getId();
        $intIdProducto           = $objServicio->getProductoId()->getId();
        
        $objProductoDatoMpls            = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'L3MPLS',
                                                                                            'empresaCod'          => $intEmpresaId));
        
        $objInternetMpls                = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet MPLS',
                                                                                            'empresaCod'          => $intEmpresaId));
        
        $objProductoInternetDedicado    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet Dedicado',
                                                                                            'nombreTecnico'       => 'INTERNET',
                                                                                            'empresaCod'          => $intEmpresaId));
        if((is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls)) || 
           (is_object($objInternetMpls) && !empty($objInternetMpls)) ||
           (is_object($objProductoInternetDedicado) && !empty($objProductoInternetDedicado)))
        {
            if(is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls))
            {
                $arrayServicioDatosMpls = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                     array('puntoId'    => $objServicio->getPuntoId(),
                                                                                           'productoId' => $objProductoDatoMpls->getId(),
                                                                                           'estado'     => 'Activo'));
                if(is_array($arrayServicioDatosMpls) && !empty($arrayServicioDatosMpls))
                {
                    foreach($arrayServicioDatosMpls as $objDatos)
                    {
                      array_push($arrayServiciosMpls,$objDatos);  
                    }
                }
                
            }
            if(is_object($objInternetMpls) && !empty($objInternetMpls))
            {
                $arrayServicioMpls = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                array('puntoId'    => $objServicio->getPuntoId(),
                                                                                      'productoId' => $objInternetMpls->getId(),
                                                                                      'estado'     => 'Activo'));
                
                if(is_array($arrayServicioMpls) && !empty($arrayServicioMpls))
                {
                    foreach($arrayServicioMpls as $objMpls)
                    {
                      array_push($arrayServiciosMpls,$objMpls);  
                    }
                }
            }
            if(is_object($objProductoInternetDedicado) && !empty($objProductoInternetDedicado))
            {
                $arrayServicioMpls = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                array('puntoId'    => $objServicio->getPuntoId(),
                                                                                      'productoId' => $objProductoInternetDedicado->getId(),
                                                                                      'estado'     => 'Activo'));
                
                if(is_array($arrayServicioMpls) && !empty($arrayServicioMpls))
                {
                    foreach($arrayServicioMpls as $objMpls)
                    {
                      array_push($arrayServiciosMpls,$objMpls);  
                    }
                }
            }
            $boolValidaCpe = true;

            if((is_array($arrayServiciosMpls) && !empty($arrayServiciosMpls)))
            {
                foreach($arrayServiciosMpls as $objServicio)
                {
                    //Consultamos si el servicio es backup
                    $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneBy(array( "servicioId" => $objServicio->getId()));
                    if (is_object($objServicioTecnico) && !empty($objServicioTecnico))
                    {
                        $strTipoEnlace = $objServicioTecnico->getTipoEnlace();
                    }
                    
                    if ($strTipoEnlace !== 'BACKUP')
                    {
                        $objElementoCpe = $serviceTecnico->getElementoCpeSerieTn($objServicio);
                        if (is_object($objElementoCpe) && !empty($objElementoCpe))
                        {
                            //Consulto si el cpe es Fortigate
                            $strModeloCpe        = $objElementoCpe->getModeloElementoId()->getId();
                            $objModeloElemento   = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($strModeloCpe);
                            if (is_object($objModeloElemento) && !empty($objModeloElemento))
                            {
                                $strMarcaCpe = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                            }
                            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
                            if (is_object($objProducto) && !empty($objProducto))
                            {
                                $strDescripcionProducto = $objProducto->getDescripcionProducto();
                            }
                            $arrayParamsNombreTecnico  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->getOne('NOMBRE_TECNICO_PRODUCTOS',
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     $strDescripcionProducto,
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     $intEmpresaId);
                            if(isset($arrayParamsNombreTecnico) && !empty($arrayParamsNombreTecnico))
                            {
                                $strCpe = $arrayParamsNombreTecnico["valor3"];
                            }

                            if ($strCpe == $strMarcaCpe)
                            {
                                $strSerieEquipo = $arrayResultado[0]['serie'];
                                if(!($objElementoCpe->getSerieFisica()==$strSerieEquipo))
                                {
                                    $arrayResultado[] = array(
                                    'serie'          => $objElementoCpe->getSerieFisica(),
                                    'servicioSdwan'  => $objServicio->getId());
                                }
                            }
                            else
                            {
                                $boolValidaCpe = false;
                            }
                        }
                    }
                }
            }
            
        }
        
        if (!$boolValidaCpe)
        {
            $arrayResultado = array(
                                'status'   => 'ERROR',
                                'mensaje'  => 'Para activar SECURE CPE, los servicios tradicionales deben tener equipos CPE FORTIGATE');
            $objResponse->setData($arrayResultado);
        }
        else
        {
            $objResultado = json_encode($arrayResultado);
            $objResponse->setContent($objResultado);
        }
        
        return $objResponse;
    }

    
    /**
     * Documentación para el método 'ajaxGuardarEnlaceCpeSeguridadAction'.
     *
     * Método utilizado para registrar las caracteristicas del servicio de seguridad.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 19-07-2021
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 27-08-2021
     * 
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 1.2 19-01-2023 Se implemento una validacion de estado activo al 
     *                         obtener el elemento por la serie fisica.
     * 
     * @return Response $objResponse
    */
    public function ajaxGuardarEnlaceCpeSeguridadAction()
    {
        ini_set('max_execution_time', 9000000);
        
        $objRequest                 = $this->get('request');      
        $objSession                 = $objRequest->getSession();
        $emComercial                = $this->get('doctrine')->getManager();        
        $emInfraestructura          = $this->get('doctrine')->getManager('telconet_infraestructura');
        $emGeneral                  = $this->get('doctrine')->getManager('telconet_general');
        
        $intIdServicio              = $objRequest->get('idServicio');//idServicioTradicional
        $intServicioCpe             = $objRequest->get('idServicioTradicional');
        $strSerieEquipo             = $objRequest->get('serie');
        $strFortiAnalyzer           = $objRequest->get('fortianalyzer');
        $strFortiAnalyzer2          = $objRequest->get('fortianalyzer2');
        $strFortiManager            = $objRequest->get('fortimanager');
        $strSysLog                  = $objRequest->get('syslog');
        $strCodEmpresa              = $objRequest->getSession()->get('idEmpresa');
        $serviceTecnico             = $this->get('tecnico.InfoServicioTecnico');
        $serviceCancelar            = $this->get('tecnico.InfoCancelarServicio');
        $serviceNetworking          = $this->get('tecnico.NetworkingScripts');
        $serviceUtil                = $this->get('schema.Util');
        
        $booleanFortiAnalyzer       = json_decode($strFortiAnalyzer); 
        $booleanFortiAnalyzer2      = json_decode($strFortiAnalyzer2);
        $booleanFortiManager        = json_decode($strFortiManager);
        $booleanSysLog              = json_decode($strSysLog);

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        
        $strFecha = '';
        
        try
        {                        
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio) && !empty($objServicio))
            {
                $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId());
            }
            
            $objServicioTradicional = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioCpe);
            if(is_object($objServicioTradicional) && !empty($objServicioTradicional))
            {
                $objProductoTradicional = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicioTradicional->getProductoId());
            }
            
            $objSerTec   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array(
                                                            'servicioId' => $intServicioCpe));
            
            //Parametros para consumir webservices de Seguridad Lógica
            $strLoginPunto         = $objServicioTradicional->getPuntoId()->getLogin();
            $strEsPadreFacturacion = $objServicioTradicional->getPuntoFacturacionId()->getLogin();
            $intIdTipoNegocio      = $objServicioTradicional->getPuntoId()->getTipoNegocioId()->getId();
            $objTipoNegocio        = $emComercial->getRepository('schemaBundle:AdmiTipoNegocio')->findOneById($intIdTipoNegocio);
            if (is_object($objTipoNegocio))
            {
                $strNombreTipoNegocio = $objTipoNegocio->getNombreTipoNegocio();
            }
            
            //Consultamos la serie del servicio tradicional para obtener el elemento
            $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                 ->findOneBy(array( "serieFisica" => $strSerieEquipo,
                                                                    "estado" => 'Activo'));
            if (is_object($objInfoElemento))
            {
                $intIdElemento = $objInfoElemento->getId();
            }
            
            $objDetalleElemento = $emInfraestructura->getRepository("schemaBundle:InfoDetalleElemento")
                                                            ->findOneBy(array('elementoId'    =>  $intIdElemento,
                                                                              'estado'        =>  'Activo',
                                                                              'detalleNombre' =>  'PROPIEDAD'));
            if(is_object($objDetalleElemento))
            {
                $strPropiedad = $objDetalleElemento->getDetalleValor(); 
                if (!in_array(strtoupper($strPropiedad),array('CLIENTE','DATACENTER')))
                {
                  $strPropiedad = 'TELCONET';
                }
            }
            
            //Parametros que van a ser enviados al middleware de seguridad lógica para retornar la fecha de expiración
            $objInfoIp = $emInfraestructura->getRepository("schemaBundle:InfoIp")->findOneBy(array('servicioId' => $intServicioCpe,
                                                                                                   'estado'     => 'Activo'));
            if(is_object($objInfoIp))
            {
                $strIp     = $objInfoIp->getIp();
                $objSubred = $emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objInfoIp->getSubredId());
                    
                if(is_object($objSubred))
                {
                    $strSubred = $objSubred->getSubred();
                }
            }
            
            // Buscamos en InfoContratoDatoAdicional para verificar que sea cliente VIP
            $boolEsVip          = false;
            $intIdPunto         = $objServicioTradicional->getPuntoId()->getId(); 
            $objPuntoCliente    = $emComercial->getRepository('schemaBundle:InfoPunto')->getPuntoParaSession($intIdPunto);
            $intIdPer           = $objPuntoCliente["id_persona_empresa_rol"];
            $arrayParams        = array('ID_PER'  => $intIdPer, 
                                        'EMPRESA' => $strCodEmpresa, 
                                        'ESTADO'  => 'Activo');
            
            //Consulto el nombre del ingeniero Vip
            $arrayIngenieroVipRequest                    = array();
            $arrayIngenieroVipRequest['intIdPersonaRol'] = $intIdPer;
            $arrayIngenieroVipResponse                   = $emComercial
                                                             ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                             ->getArrayNombreVipPorPersonaRol($arrayIngenieroVipRequest);
            if ($arrayIngenieroVipResponse && isset($arrayIngenieroVipResponse['idPersona']))
            {
                $intIdIngenieroVip = $arrayIngenieroVipResponse['idPersona'];
                $objInfoPersona         = $emComercial->getRepository('schemaBundle:InfoPersona')->find($intIdIngenieroVip);
                if (is_object($objInfoPersona))
                {
                    $strNombreIngenieroVip = $objInfoPersona->getNombres().' '.$objInfoPersona->getApellidos();
                }
            }
            
            $entityContratoDato = $emComercial->getRepository('schemaBundle:InfoContratoDatoAdicional')
                                              ->getResultadoDatoAdicionalContrato($arrayParams);
            $strEsVip           = $entityContratoDato && $entityContratoDato->getEsVip() ? 'S' : 'N';
            
            if ($strEsVip == 'S')
            {
                $boolEsVip          = true;
            }
            
            //Consultamos la region
            $objInfoPunto = $emComercial->getRepository('schemaBundle:InfoPunto')->find($intIdPunto);
            
            $objAdmiJurisdiccion  = $objInfoPunto->getPuntoCoberturaId();
            if (!is_object($objAdmiJurisdiccion))
            {
                throw new \Exception("No existe información de la jurisdiccion del punto");
            }
            
            $objAdmiSector = $objInfoPunto->getSectorId();
            if (!is_object($objAdmiSector))
            {
                throw new \Exception("No existe información del sector");
            }
            
            $objAdmiParroquia = $objAdmiSector->getParroquiaId();
            if (!is_object($objAdmiParroquia))
            {
                throw new \Exception("No existe información de la parroquia");
            }
            
            $objAdmiCanton = $objAdmiParroquia->getCantonId();
            if (!is_object($objAdmiCanton))
            {
                throw new \Exception("No existe información del canton");
            }
            $strRegion = $objAdmiCanton->getRegion().' - '.$objAdmiCanton->getJurisdiccion();
            
            $arrayDatosWs = array(
                                                'ipEquipo'              => $strIp,
                                                'serieEquipo'           => $strSerieEquipo,
                                                'subnet'                => $strSubred,
                                                'loginPunto'            => $strLoginPunto,
                                                'loginPadreFacuracion'  => $strEsPadreFacturacion,
                                                'region'                => $strRegion,
                                                'propietarioEquipo'     => $strPropiedad,
                                                'categoriaCliente'      => $strNombreTipoNegocio,
                                                'esVip'                 => $boolEsVip,
                                                'ingenieroVip'          => $strNombreIngenieroVip,
                                                'esServiciogestionados' => true,
                                                'esFortianalyzer'       => $booleanFortiAnalyzer,
                                                'esFortianalyzer2'      => $booleanFortiAnalyzer2,
                                                'esFortimanager'        => $booleanFortiManager,
                                                'esSyslog'              => $booleanSysLog,
                                                'opcion'                => 'new'
                                            );
            //Llamada al web service de secure cpe
            $strJsonDatosWs   = json_encode($arrayDatosWs);
            $arrayRespuestaWs = $serviceNetworking->callSecureCpeWebService($strJsonDatosWs);
            $strStatus        = $arrayRespuestaWs['status'];
            $strMensaje       = $arrayRespuestaWs['mensaje'];
            $arrayData        = $arrayRespuestaWs['data'];
                        
            if ($strStatus !== "OK")
            {
                $serviceUtil->insertError('TELCOS', 
                                          'ajaxGuardarEnlaceCpeSeguridadAction', 
                                          $strMensaje, 
                                          $objRequest->getSession()->get('user'), 
                                          $objRequest->getClientIp()
                                         );
            
                if($emComercial->getConnection()->isTransactionActive())
                {
                    $emComercial->getConnection()->rollback();
                }

                if($emInfraestructura->getConnection()->isTransactionActive())
                {
                    $emInfraestructura->getConnection()->rollback();
                }
                
                //historial del webservice
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strMensaje);
                $objServicioHistorial->setEstado("Activo");
                $objServicioHistorial->setAccion("resultadoComunicacion");
                $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
                
                $emComercial->getConnection()->commit();
                                
                return new Response($strMensaje);
            }    

            if ($arrayData['status'] !== "OK")
            {
                $strMensaje = $arrayData['message'];
                $serviceUtil->insertError('TELCOS', 
                                          'ajaxGuardarEnlaceCpeSeguridadAction', 
                                          $strMensaje, 
                                          $objRequest->getSession()->get('user'), 
                                          $objRequest->getClientIp()
                                         );
            
                if($emComercial->getConnection()->isTransactionActive())
                {
                    $emComercial->getConnection()->rollback();
                }

                if($emInfraestructura->getConnection()->isTransactionActive())
                {
                    $emInfraestructura->getConnection()->rollback();
                }
                
                //historial del webservice
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strMensaje);
                $objServicioHistorial->setEstado("Activo");
                $objServicioHistorial->setAccion("resultadoWebService");
                $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
                
                $emComercial->getConnection()->commit();
                                
                return new Response($strMensaje);
            }
            
            $strFecha = $arrayData['fechaExpira'];
            
            if (is_null($strFecha) || $strFecha == '')
            {
                $strFechaObservacion = 'Licencia de equipo no está activada.';
            }
            else
            {
                $strFechaObservacion = $strFecha;
            }

            if(is_object($objSerTec) && !empty($objSerTec))
            {
                $objElementoCpe = $serviceCancelar->getElementoCpeServicioTn($objSerTec);
                
                if(is_object($objElementoCpe) && !empty($objElementoCpe))
                {
                    $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                            $objProducto,
                                                                            'SERIE_EQUIPO_SECURE_CPE',
                                                                            $objElementoCpe->getSerieFisica(),
                                                                            $objSession->get('user')
                                                                            );
                    
                    $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                            $objProducto,
                                                                            'ID_SERVICIO_SECURE_CPE',
                                                                            $intServicioCpe,
                                                                            $objSession->get('user')
                                                                            );
                    
                    $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                            $objProducto,
                                                                            'FECHA_EXPIRACION_SEGURIDAD_CPE',
                                                                            $strFecha,
                                                                            $objSession->get('user')
                                                                            );
                    
                    $objServicio->setEstado('Activo');
                    $emComercial->persist($objServicio);
                    $emComercial->flush();
                    
                    //historial del servicio confirmación
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setObservacion("Se confirma servicio con el cliente.");
                    $objServicioHistorial->setEstado("Activo");
                    $objServicioHistorial->setAccion("confirmarServicio");
                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                    $emComercial->persist($objServicioHistorial);
                    $emComercial->flush();
                
                    //historial del servicio 
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setObservacion("Fecha de Caducidad: ".
                                                          $strFechaObservacion);
                    $objServicioHistorial->setEstado("Activo");
                    $objServicioHistorial->setUsrCreacion($objSession->get('user'));
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                    $emComercial->persist($objServicioHistorial);
                    $emComercial->flush();
                    
                    $strMensaje = "Servicio Activado Correctamente.";
                    
                    //Generacion de Login Auxiliar al Servicio            
                    $serviceTecnico->generarLoginAuxiliar($intIdServicio);

                    //se guardan los cambios
                    $emComercial->getConnection()->commit();
                }
            }
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al generar activación. Notificar a Sistemas.";
            
            $serviceUtil->insertError('TELCOS', 
                                      'ajaxGuardarEnlaceCpeSeguridadAction', 
                                      $e->getMessage(), 
                                      $objRequest->getSession()->get('user'), 
                                      $objRequest->getClientIp()
                                     );
            
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
        
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
                $emInfraestructura->close();
            }
        }
        
        return new Response($strMensaje);
    }
    
    /**
     * Documentación para el método 'ajaxGuardarEnlaceCpeEditarAction'.
     *
     * Método utilizado para registrar el numero de licencia y fecha de caducidad que fue editada.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 21-07-2021
     *
     * @return Response $objResponse
    */
    public function ajaxGuardarEnlaceCpeEditarAction()
    {
        ini_set('max_execution_time', 9000000);
        
        $strMensaje          = "Error";
        $objRequest          = $this->get('request');      
        $emComercial         = $this->get('doctrine')->getManager();        
        $emInfraestructura   = $this->get('doctrine')->getManager('telconet_infraestructura');
        
        $intIdServicio       = $objRequest->get('idServicio');
        $strFechaCad         = $objRequest->get('fechaCad');
        $strNumLicencia      = $objRequest->get('numLicencia');
        $serviceTecnico      = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil         = $this->get('schema.Util');

        $emComercial->getConnection()->beginTransaction();
                
        try
        {                        
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio) && !empty($objServicio))
            {
                $objServProdCaractLicencia   =    $serviceTecnico
                                                        ->getServicioProductoCaracteristica($objServicio,
                                                                                            'NUM LICENCIAS',
                                                                                            $objServicio->getProductoId());
                if(is_object($objServProdCaractLicencia) && !empty($objServProdCaractLicencia))
                {
                        $serviceTecnico->setValorServicioProductoCaracteristica($objServProdCaractLicencia, $strNumLicencia);
                }

                $objServProdCaractFecha   =    $serviceTecnico
                                                            ->getServicioProductoCaracteristica($objServicio,
                                                                                                'FECHA_EXPIRACION_SEGURIDAD_CPE',
                                                                                                $objServicio->getProductoId());
                if(is_object($objServProdCaractFecha) && !empty($objServProdCaractFecha))
                {
                    $strFecha = new \DateTime($strFechaCad);    
                    $serviceTecnico->setValorServicioProductoCaracteristica($objServProdCaractFecha, date_format($strFecha, "d/m/Y"));
                }
                
                //historial del servicio
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion("Se generó la modificación con licencia: ".$strNumLicencia
                                                       .' y fecha de caducidad: '.date_format($strFecha, "d/m/Y"));
                $objServicioHistorial->setEstado("Activo");
                $objServicioHistorial->setUsrCreacion($objRequest->getSession()->get('user'));
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($objRequest->getClientIp());
                $emComercial->persist($objServicioHistorial);
                $emComercial->flush();
                
                $emComercial->getConnection()->commit();
                $strMensaje = "Servicio Actualizado Correctamente.";
            }
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al actualizar número de licencia y fecha de caducidad";
            
            $serviceUtil->insertError('TELCOS', 
                                      'ajaxGuardarEnlaceCpeEditarAction', 
                                      $e->getMessage(), 
                                      $objRequest->getSession()->get('user'), 
                                      $objRequest->getClientIp()
                                     );
            
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
        
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
                $emInfraestructura->close();
            }
        }
        
        return new Response($strMensaje);
    }
    
    /**
     * Método encargado de obtener los equipos asignado a un técnico.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 04-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 29-09-2022 - Se agrega parámetro para obtener los elementos por varios tipos de elementos.
     *
     */
    public function ajaxObtenerEquiposAsignadosAction()
    {
        $objResponse     = new JsonResponse();
        $objRequest      = $this->getRequest();
        $strUsuario      = $objRequest->getSession()->get('user');
        $strIpUsuario    = $objRequest->getClientIp();
        $strIdEmpresa    = $objRequest->getSession()->get('idEmpresa');
        $intIdPersona    = $objRequest->get('intIdPersona');
        $strNumeroSerie  = $objRequest->get('strNumeroSerie');
        $strModelo       = $objRequest->get('strModelo');
        $strDescripcion  = $objRequest->get('strDescripcion');
        $strTipoElemento = $objRequest->get('strTipoElemento');
        $arrayTiposElementos = $objRequest->get('strTiposElementos') ?
                               json_decode($objRequest->get('strTiposElementos'),true) : array();
        $serviceUtil     = $this->get('schema.Util');
        $emNaf           = $this->get('doctrine')->getManager('telconet_naf');

        try
        {
           $arrayRespuesta = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                   ->obtenerEquiposAsignados(array('serviceUtil'     => $serviceUtil,
                                                   'strUsuario'      => $strUsuario,
                                                   'strIpUsuario'    => $strIpUsuario,
                                                   'strIdEmpresa'    => $strIdEmpresa,
                                                   'intIdPersona'    => $intIdPersona,
                                                   'strNumeroSerie'  => $strNumeroSerie,
                                                   'strModelo'       => $strModelo,
                                                   'strTipoElemento' => $strTipoElemento,
                                                   'arrayTiposElementos' => $arrayTiposElementos,
                                                   'strDescripcion'  => $strDescripcion));
        }
        catch (\Exception $objException)
        {
            $serviceUtil->insertError('InfoServicioController',
                                      'ajaxObtenerEquiposAsignadosAction',
                                       $objException->getMessage(),
                                       $strUsuario,
                                       $strIpUsuario);

            $arrayRespuesta = array("status"  => false,"mensaje" => "Error al obtener los datos.");
        }
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * Método encargado de obtener los elemento adicionales 
     * agregar al cliente o al nodo asignado a un técnico.
     *
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.0 10-1-2023
     *
     *
     */
    public function ajaxGetElementosAdicionalesClienteNodoAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $strUsuario             = $objRequest->getSession()->get('user');
        $strIpUsuario           = $objRequest->getClientIp();
        $strIdEmpresa           = $objRequest->getSession()->get('idEmpresa');
        $intIdPersona           = $objRequest->get('intIdPersona');
        $strNumeroSerie         = $objRequest->get('strNumeroSerie');
        $strModelo              = $objRequest->get('strModelo');
        $strDescripcion         = $objRequest->get('strDescripcion');
        $strFechaDesde          = $objRequest->get('strFechaDesde') ? $objRequest->get('strFechaDesde') : "";
        $strFechaHasta          = $objRequest->get('strFechaHasta') ? $objRequest->get('strFechaHasta') : "";
        $intPerteneceElemento   = $objRequest->get('intPerteneceElemento');
        $serviceUtil            = $this->get('schema.Util');
        $emNaf                  = $this->get('doctrine')->getManager('telconet_naf');

        try
        {
           $arrayRespuesta = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
             ->getElementosAdicionalesClienteNodo(array('serviceUtil'           => $serviceUtil,
                                                        'strUsuario'            => $strUsuario,
                                                        'strIpUsuario'          => $strIpUsuario,
                                                        'strIdEmpresa'          => $strIdEmpresa,
                                                        'intIdPersona'          => $intIdPersona,
                                                        'strNumeroSerie'        => $strNumeroSerie,
                                                        'strModelo'             => $strModelo,
                                                        'strFechaDesde'         => $strFechaDesde,
                                                        'strFechaHasta'         => $strFechaHasta,
                                                        'boolPerteneceElemento' => $intPerteneceElemento === "1" ? true : false,
                                                        'strDescripcion'        => $strDescripcion));
        }
        catch (\Exception $objException)
        {
            $serviceUtil->insertError('InfoServicioController',
                                      'ajaxgetElementosAdicionalesClienteNodoAction',
                                       $objException->getMessage(),
                                       $strUsuario,
                                       $strIpUsuario);

            $arrayRespuesta = array("status"  => false,"mensaje" => "Error al obtener los datos.");
        }
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

    /**
     * Funcion que permite activar el sevicio adicional en konibit
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.0 03-08-2021
     * 
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 1.1 26-08-2022 Se agrega consumo a MS por productos Konibit.
     * 
     * @author Luis Farro <jcandelario@telconet.ec>
     * @version 3.31 23-02-2023 - Se modifica el envio de productos. Se envia un solo array con todos los productos Konibit.
     * 
     * @return Object $objRespuesta Objeto JsonResponse donde se almacena el resultado de la ejecución
     */
    public function confirmarServicioKonibitAction()
    {
        $objRequest       = $this->getRequest();
        $objSesion        = $objRequest->getSession();
        $strIpCreacion    = $objRequest->getClientIp();
        $strUsrCreacion   = $objSesion->get('user');
        $strLoginOrigen   = "";
        $intIdPuntoOrigen = "";
        $strValorOrigen   = "N";
        $strValorAccion   = "";
        $strTraslado      = 'feOrigServicioTrasladado';
        $strCrs           = 'feOrigenCambioRazonSocial';
        $intContKonibit   = 0;
        $intIdServicio    = $objRequest->get('idServicio');
        $intCodEmpresa    = $objSesion->get('idEmpresa');
        $emComercial      = $this->getDoctrine()->getManager("telconet");
        $serviceConfirmar = $this->get('tecnico.InfoConfirmarServicio');
        $emGeneral        = $this->get('doctrine')->getManager('telconet_general');
        $serviceTokenCas  = $this->get('seguridad.TokenCas');
        /* @var $serviceInfoPunto \telconet\comercialBundle\Service\ConsumoKonibitService */
        $serviceKonibit   = $this->get('comercial.ConsumoKonibit');
        $serviceTecnico   = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil      = $this->get('schema.Util');
        $objRespuesta     = new Response();

        $entityServicio   = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $entityPunto      = $emComercial->getRepository('schemaBundle:InfoPunto')->find($entityServicio->getPuntoId());
        
        $intPuntoId       = $entityPunto->getId();
        $arrayServicios   = $emComercial->getRepository('schemaBundle:InfoServicio')->findby(
                                                        array('puntoId' => $entityPunto->getId(),
                                                        'estado' => 'Activo')
                                                    );
        
        //ALMACENA PRODUCTOS KONIBIT
        $arrayListProdKon      = array(); 
        $arrayListProdKon      = [];

        //ALMACENA EL LOGIN ORIGEN
        $strLoginOrigenKon     = '';

        //ALMACENA EL COMPANY CODE ORIGEN
        $intCompCodeKon        = 0;

        
        //ALMACENA LOS ID DE SERVICIOS KONIBIT
        $arrayIdServicios        = array();
        $arrayIdServicios        = [];

        foreach($arrayServicios as $objServicio)
        {
            array_push($arrayIdServicios, $objServicio->getId());
        }        

        try
        {
            foreach ($arrayServicios as $objServicio)
            {
                $objRespuesta->headers->set('Content-type', 'text/json');
                
                $intIdServicio = $objServicio->getId();

                error_log( "Servicio: ".$intIdServicio );

            $objServicio                = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                      ->find($intIdServicio);
            
            
            $objInfoServFeOrigenCRS     = $emComercial->getRepository('schemaBundle:InfoServicioHistorial')
                                                      ->findOneBy(array('servicioId' => $intIdServicio,
                                                                        'accion'     => $strCrs));
            
            $objInfoServFeOrigenTrasl   = $emComercial->getRepository('schemaBundle:InfoServicioHistorial')
                                                      ->findOneBy(array('servicioId' => $intIdServicio,
                                                                        'accion'     => $strTraslado));
                                                                        
            //INI VALIDACIONES KONIBIT
            if (is_object($objInfoServFeOrigenCRS) || is_object($objInfoServFeOrigenTrasl))
            {
                $strTelefono           = "";
                $strCorreo             = "";
                $arrayListadoServicios = array();
                $arrayTokenCas         = array();
                $arrayEnvioKonibit     = array();
                $arrayContratoProd     = array();
                $arrayKonibit          = array();
                $intIdProdKon          = 0;
                $strAccion             = "";
                if (is_object($objInfoServFeOrigenTrasl))
                {
                    $strValorAccion         = $strTraslado;
                    $strAccion              = ( isset($arrayParametroKnb["valor2"]) 
                                                && !empty($arrayParametroKnb["valor2"]) )? $arrayParametroKnb["valor2"] : "traslado";
                    $arrayCaracTraslado     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                          ->findOneBy(array("descripcionCaracteristica" => "TRASLADO", 
                                                                            "estado"                    => "Activo"));
                    $objProductoInternet    = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                          ->findOneBy(array("esPreferencia" => "SI",
                                                                            "nombreTecnico" => "INTERNET",
                                                                            "empresaCod"    => $intCodEmpresa,
                                                                            "estado"        => "Activo"));
                    $objCarTras             = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                          ->findOneBy(array("productoId"       => $objProductoInternet->getId(), 
                                                                            "caracteristicaId" => $arrayCaracTraslado->getId()));
                    $objTrasladoServicio    = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                          ->findOneBy(array("servicioId"                => $objServicio->getId(), 
                                                                            "productoCaracterisiticaId" => $objCarTras->getId()));

                    if(is_object($objTrasladoServicio))
                    {
                        $intIdServicioOrigen    = $objTrasladoServicio->getValor();
                        $objServicioOrigen      = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->find($intIdServicioOrigen);
                        if (!is_object($objServicioOrigen))
                        {
                            throw new \Exception("Error al obtener el servicio origen por Traslado.");
                        }
                    }
                    else
                    {
                        throw new \Exception("Error al obtener la característica traslado en el servicio.");
                    }
                        
                }
                else
                {
                    $strValorAccion         = $strCrs;
                    $strAccion              = ( isset($arrayParametroKnb["valor3"]) 
                                                && !empty($arrayParametroKnb["valor3"]) )? $arrayParametroKnb["valor3"] : "crs";
                
                    $entityAdmiCarac        = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                          ->findOneBy(array('descripcionCaracteristica' => 'PUNTO CAMBIO RAZON SOCIAL', 
                                                                            'estado'                    => 'Activo'));
                    $entityInfoPuntoCarac   = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
                                                          ->findOneBy(array('puntoId'          => $objServicio->getPuntoId()->getId(), 
                                                                            'caracteristicaId' => $entityAdmiCarac));
                    if (is_object($entityInfoPuntoCarac))
                    {
                        $intIdPuntoOrigen   = $entityInfoPuntoCarac->getValor();
                        $objPuntoOrigen     = $emComercial->getRepository('schemaBundle:InfoPunto')
                                                          ->find($intIdPuntoOrigen);
                        if (!is_object($objPuntoOrigen))
                        {
                            throw new \Exception("Error al obtener el punto origen por CRS");
                        }
                        else
                        {
                            if (is_object($objServicio->getProductoId()))
                            {
                                $objServicioOrigen  =  $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                   ->findServiciosPorPuntos(array('strTipo'     => "PRODUCTO",
                                                                                                  'intPunto'    => $objPuntoOrigen->getId(),
                                                                                                  'intProducto' => $objServicio->getProductoId()));
                                if (!is_object($objServicioOrigen))
                                {
                                    throw new \Exception("Error al obtener el servicio origen por CRS");
                                }
                            }
                            else
                            {
                                $objServicioOrigen      =  $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                       ->findServiciosPorPuntos(array('strTipo'   => "PLAN",
                                                                                                      'intPunto'  => $objPuntoOrigen->getId()));
                            
                                if (!is_object($objServicioOrigen))
                                {
                                    throw new \Exception("Error al obtener el servicio origen por CRS");
                                }
                            }
                        }
                    }
                    else
                    {
                        $intPersonaEmpresaRolId = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId();
                        $objPersonaEmpresaRol   = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                              ->find($intPersonaEmpresaRolId);
                        
                        if (!is_object($objPersonaEmpresaRol))
                        {
                            throw new \Exception("Error al obtener el Cliente origen por CRS");
                        }
                        
                        $objPuntos              = $emComercial->getRepository('schemaBundle:InfoPunto')
                                                              ->findBy(array( "personaEmpresaRolId" => $objPersonaEmpresaRol->getId()));
                
                        foreach($objPuntos as $objPunto)
                        {
                            $strExsite = stristr($objServicio->getPuntoId()->getLogin(), $objPunto->getLogin());
                            if(!empty($strExsite)) 
                            {
                                $objPuntoOrigen = $objPunto;
                            }
                        }
                        if (!is_object($objPuntoOrigen))
                        {
                            throw new \Exception("Error al obtener el punto origen por CRS");
                        }
                        else
                        {
                            if (is_object($objServicio->getProductoId()))
                            {
                                $objServicioOrigen  =  $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                   ->findServiciosPorPuntos(array('strTipo'     => "PRODUCTO",
                                                                                                  'intPunto'    => $objPuntoOrigen->getId(),
                                                                                                  'intProducto' => $objServicio->getProductoId()));
                                if (!is_object($objServicioOrigen))
                                {
                                    throw new \Exception("Error al obtener el servicio origen por CRS");
                                }
                            }
                            else
                            {
                                $objServicioOrigen      =  $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                       ->findServiciosPorPuntos(array('strTipo'   => "PLAN",
                                                                                                      'intPunto'  => $objPuntoOrigen->getId()));
                            
                                if (!is_object($objServicioOrigen))
                                {
                                    throw new \Exception("Error al obtener el servicio origen por CRS");
                                }
                            }
                        }
                        
                    }
                    
                }
                $arrayParametroKnb     = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->getOne('INVOCACION_KONIBIT_ACTUALIZACION', 
                                                            'TECNICO', 
                                                            'DEBITOS',
                                                            'WS_KONIBIT', 
                                                            '', 
                                                            '', 
                                                            '', 
                                                            '', 
                                                            '', 
                                                            $intCodEmpresa);
                
                $arrayListadoServicios  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                          'Lista de productos adicionales automaticos',
                                                          '','','','','',$intCodEmpresa);
                
                
                
                $arrayServProdCarKon    = $emComercial->getRepository('schemaBundle:InfoPunto')
                                                      ->getServProdCartKonibit(array ('intIdPunto'           =>  $objServicio->getPuntoId()->getId(),
                                                                                      'strEstadoProdCaract'  =>  'Activo',
                                                                                      'strDescripcionCaract' =>  'ACTIVO KONIBIT',
                                                                                      'strValor'             =>  'SI',
                                                                                      'strAccion'            =>  $strValorAccion,
                                                                                      'strUsuario'           =>  $strUsrCreacion,
                                                                                      'strIp'                =>  $strIpCreacion,
                                                                                      'objUtilService'       =>  $serviceUtil));
                if (!empty($arrayServProdCarKon['result']) && count($arrayServProdCarKon['result']) > 0)
                {
                    $strValorOrigen = "S";
                }
                else
                {
                    if (is_object($objServicio->getProductoId()))
                    {
                        $arrayServiciosPunto = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                           ->findServiciosByPuntoAndEstado($objServicio->getPuntoId()->getId(),null,null);
                        if (!empty($arrayServiciosPunto))
                        {
                            foreach($arrayServiciosPunto['registros'] as $objServicioPunto)
                            {
                                $objServicioAux     = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                  ->find($objServicioPunto->getId());
                                if (is_object($objServicioAux->getPlanId()) && $strValorOrigen == 'N')
                                {
                                    $objInfoServFeOrigenCRS     = $emComercial->getRepository('schemaBundle:InfoServicioHistorial')
                                                                              ->findOneBy(array('servicioId' => $objServicioAux->getId(),
                                                                                                'accion'     => $strCrs));

                                    $objInfoServFeOrigenTrasl   = $emComercial->getRepository('schemaBundle:InfoServicioHistorial')
                                                                              ->findOneBy(array('servicioId' => $objServicioAux->getId(),
                                                                                                'accion'     => $strTraslado));
                                    if (is_object($objInfoServFeOrigenCRS) || is_object($objInfoServFeOrigenTrasl))
                                    {
                                        $objPlanDetAux = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                                     ->findBy(array('planId' => $objServicioAux->getPlanId(),
                                                                                    'estado' => "Activo"));
                                        if(($objPlanDetAux))
                                        {
                                            foreach($objPlanDetAux as $idxPlanDetAux)
                                            {
                                                $objProductoAux = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                              ->find($idxPlanDetAux->getProductoId());

                                                if(is_object($objProductoAux) && $strValorOrigen == 'N')
                                                {
                                                    $intIdProdKonAux = $objProductoAux->getId();
                                                    foreach($arrayListadoServicios as $objListadoAux)
                                                    {
                                                        // Si encuentra un producto konibit procede pasar la caracteristica
                                                        if ($intIdProdKonAux == $objListadoAux['valor1'] && $objListadoAux['valor3'] == "SI")
                                                        {
                                                            $objProdCarKonAux   = $serviceTecnico->getServicioProductoCaracteristica($objServicioAux,
                                                                                                                                     'ACTIVO KONIBIT',
                                                                                                                                     $objProductoAux);
                                                            if (is_object($objProdCarKonAux) && $objProdCarKonAux->getValor() == "SI")
                                                            {
                                                                $strValorOrigen = "S";
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        $objPlanDetAux = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                     ->findBy(array('planId' => $objServicio->getPlanId(),
                                                                    'estado' => "Activo"));
                        if(($objPlanDetAux))
                        {
                            foreach($objPlanDetAux as $idxPlanDetAux)
                            {
                                $objProductoAux = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                              ->find($idxPlanDetAux->getProductoId());

                                if(is_object($objProductoAux))
                                {
                                    $intIdProdKonAux = $objProductoAux->getId();
                                    foreach($arrayListadoServicios as $objListadoAux)
                                    {
                                        // Si encuentra un producto konibit procede pasar la caracteristica
                                        if ($intIdProdKonAux == $objListadoAux['valor1'] && $objListadoAux['valor3'] == "SI")
                                        {   
                                            $objProdCaractKonibitAux   = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                                            'ACTIVO KONIBIT',
                                                                                                                            $objProductoAux);
                                            if (is_object($objProdCaractKonibitAux) && $objProdCaractKonibitAux->getValor() == "SI") 
                                            {
                                                $strValorOrigen = "S";
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                if($strValorOrigen == 'S')
                {
                    $strLoginOrigen   = $objServicio->getPuntoId()->getLogin();
                    $intIdPuntoOrigen = $objServicio->getPuntoId()->getId();
                    
                    //ALMACENA EL LOGIN ORIGEN
                    $strLoginOrigenKon     = $objServicioOrigen->getPuntoId()->getLogin();

                    //ALMACENA EL COMPANY CODE ORIGEN
                    $intCompCodeKon        = $objServicioOrigen->getPuntoId()->getId();
                }
                else
                {
                    $strLoginOrigen   = $objServicioOrigen->getPuntoId()->getLogin();
                    $intIdPuntoOrigen = $objServicioOrigen->getPuntoId()->getId();
                    
                    //ALMACENA EL LOGIN ORIGEN
                    $strLoginOrigenKon     = $objServicioOrigen->getPuntoId()->getLogin();

                    //ALMACENA EL COMPANY CODE ORIGEN
                    $intCompCodeKon        = $objServicioOrigen->getPuntoId()->getId();
                }
                
                if (is_object($objServicio->getProductoId()))
                {

                    foreach($arrayListadoServicios as $objListado)
                    {
                        // Si encuentra un producto konibit procede pasar la caracteristica
                        if ($objServicio->getProductoId()->getId() == $objListado['valor1'] && $objListado['valor3'] == "SI")
                        {
                            //DATA
                            $arrayTokenCas                             = $serviceTokenCas->generarTokenCas();
                            $arrayParamEmial                           = array();                 
                            $arrayParamEmial['strEstado']              = "Activo";
                            $arrayParamEmial['strDescFormaContacto']   = array("Correo Electronico");
                            $arrayParamEmial['intIdPersonaEmpresaRol'] = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId();
                            $arrayCorreoCli                            = $emComercial->getRepository('schemaBundle:InfoPersonaContacto')
                                                                                     ->getEmailCliente($arrayParamEmial);

                            foreach ($arrayCorreoCli as $arrayCorreo) 
                            {
                                $strCorreo = $arrayCorreo['strFormaContacto'];
                                break;
                            }
                            $arrayParamTelf                           = array();                 
                            $arrayParamTelf['strEstado']              = "Activo";
                            $arrayParamTelf['strDescFormaContacto']   = array("Telefono Movil",
                                                                              "Telefono Movil Claro",
                                                                              "Telefono Movil CNT",
                                                                              "Telefono Movil Digicel",
                                                                              "Telefono Movil Movistar",
                                                                              "Telefono Movil Referencia IPCC",
                                                                              "Telefono Movil Tuenti");
                            $arrayParamTelf['intIdPersonaEmpresaRol'] = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId();
                            $arrayContactosTelf                       = $emComercial->getRepository('schemaBundle:InfoPersonaContacto')
                                                                                    ->getEmailCliente($arrayParamTelf);
                            foreach ($arrayContactosTelf as $arrayContactoT) 
                            {
                                $strTelefono = $arrayContactoT['strFormaContacto'];
                                break;
                            }
                            //PRODUCTOS
                            $objProductos               = array('orderID'      => $objServicioOrigen->getId(),
                                                                'productSKU'   => $objServicio->getProductoId()->getCodigoProducto(),
                                                                'productName'  => $objServicio->getProductoId()->getDescripcionProducto(),
                                                                'quantity'     => '1',
                                                                'included'     => false,
                                                                'productoId'   => $objServicio->getProductoId()->getId(),
                                                                'migrateTo'    => $objServicio->getId(),
                                                                'status'       => 'active'
                                                               );

                            $arrayContratoProd[]        = $objProductos;
                            // AGREGO MIS PRODUCTOS A MI ARREGLO
                            array_push($arrayListProdKon, $objProductos);
                            //DATA
                            $objDataProductos           = array('companyName'   => $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()  
                                                                                                             ->getRazonSocial() ?  
                                                                                   $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()  
                                                                                                             ->getRazonSocial() :
                                                                                   $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()
                                                                                                             ->getNombres().
                                                                                   ' '.$objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                                 ->getPersonaId()
                                                                                                                 ->getApellidos(),
                                                                'companyCode'   => $objServicio->getPuntoId()->getId(),
                                                                'companyID'     => $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()
                                                                                                             ->getIdentificacionCliente(),
                                                                'contactName'   => $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()  
                                                                                                             ->getRazonSocial() ?  
                                                                                   $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()  
                                                                                                             ->getRazonSocial() :
                                                                                   $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()
                                                                                                             ->getNombres().
                                                                                   ' '.$objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                                                 ->getPersonaId()
                                                                                                                 ->getApellidos(),
                                                                'email'         => $strCorreo,
                                                                'phone'         => $strTelefono,
                                                                'login'         => $objServicio->getPuntoId()->getLogin(),
                                                                'plan'          => $objServicio->getProductoId()->getDescripcionProducto(),
                                                                'address'       => $objServicio->getPuntoId()->getDireccion(),
                                                                'city'          => $objServicio->getPuntoId()->getPuntoCoberturaId()
                                                                                                             ->getNombreJurisdiccion(),
                                                                'sector'        => $objServicio->getPuntoId()->getSectorId()->getNombreSector(),
                                                                'status'        => 'active',
                                                                'products'      => $arrayContratoProd
                                                               );
                            //DATA
                            $arrayData                  = array('action'        => ( isset($arrayParametroKnb["valor5"]) && 
                                                                                     !empty($arrayParametroKnb["valor5"]) )
                                                                                     ? $arrayParametroKnb["valor5"] : "",
                                                                'partnerID'     => (isset($arrayParametroKnb["valor7"]) &&
                                                                                    !empty($arrayParametroKnb["valor7"]) )
                                                                                    ? $arrayParametroKnb["valor7"] : "001",
                                                                'companyCode'   => $intCompCodeKon,
                                                                'companyID'     => $objServicioOrigen->getPuntoId()
                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                     ->getPersonaId()
                                                                                                     ->getIdentificacionCliente(),
                                                                'contactName'   => $objServicioOrigen->getPuntoId()
                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                     ->getPersonaId()  
                                                                                                     ->getRazonSocial() ?  
                                                                                   $objServicioOrigen->getPuntoId()
                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                     ->getPersonaId()  
                                                                                                     ->getRazonSocial() :
                                                                                   $objServicioOrigen->getPuntoId()
                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                     ->getPersonaId()
                                                                                                     ->getNombres().
                                                                                   ' '.$objServicioOrigen->getPuntoId()
                                                                                                         ->getPersonaEmpresaRolId()
                                                                                                         ->getPersonaId()
                                                                                                         ->getApellidos(),
                                                                'login'         => $strLoginOrigenKon,
                                                                'data'          => $objDataProductos,
                                                                'requestNumber' => '1',
                                                                'timestamp'     => ''
                                                                );

                            $arrayKonibit               = array('identifier'    => $objServicio->getId(),
                                                                'type'          => ( isset($arrayParametroKnb["valor4"]) && 
                                                                                     !empty($arrayParametroKnb["valor4"]) )
                                                                                     ? $arrayParametroKnb["valor4"] : "",
                                                                'retryRequered' => true,
                                                                'process'       => ( isset($arrayParametroKnb["valor6"]) && 
                                                                                     !empty($arrayParametroKnb["valor6"]) )
                                                                                     ? $arrayParametroKnb["valor6"] : "",
                                                                'origin'        => $strAccion,
                                                                'user'          => $strUsrCreacion,
                                                                'uri'           => ( isset($arrayParametroKnb["valor1"]) && 
                                                                                     !empty($arrayParametroKnb["valor1"]) )
                                                                                     ? $arrayParametroKnb["valor1"] : "",
                                                                'executionIp'   => $strIpCreacion,
                                                                'data'          => $arrayData
                                                                );


                            $arrayEnvioKonibit          = array('strToken'         => $arrayTokenCas['strToken'],
                                                                'strUser'          => $strUsrCreacion,
                                                                'strIp'            => $strIpCreacion,
                                                                'arrayPropiedades' => $arrayKonibit);
                                                                
                        }
                    }
                }
                else
                {
                    $arrayParamEmial                           = array();                 
                    $arrayParamEmial['strEstado']              = "Activo";
                    $arrayParamEmial['strDescFormaContacto']   = array("Correo Electronico");
                    $arrayParamEmial['intIdPersonaEmpresaRol'] = $objServicio->getPuntoId()->getPersonaEmpresaRolId()
                                                                                           ->getId();
                    $arrayCorreoCli                            = $emComercial->getRepository('schemaBundle:InfoPersonaContacto')
                                                                             ->getEmailCliente($arrayParamEmial);

                    foreach ($arrayCorreoCli as $arrayCorreo) 
                    {
                        $strCorreo = $arrayCorreo['strFormaContacto'];
                        break;
                    }
                    $arrayParamTelf                           = array();                 
                    $arrayParamTelf['strEstado']              = "Activo";
                    $arrayParamTelf['strDescFormaContacto']   = array("Telefono Movil",
                                                                      "Telefono Movil Claro",
                                                                      "Telefono Movil CNT",
                                                                      "Telefono Movil Digicel",
                                                                      "Telefono Movil Movistar",
                                                                      "Telefono Movil Referencia IPCC",
                                                                      "Telefono Movil Tuenti");
                    $arrayParamTelf['intIdPersonaEmpresaRol'] = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId();
                    $arrayContactosTelf                       = $emComercial->getRepository('schemaBundle:InfoPersonaContacto')
                                                                            ->getEmailCliente($arrayParamTelf);
                    foreach ($arrayContactosTelf as $arrayContactoT) 
                    {
                        $strTelefono = $arrayContactoT['strFormaContacto'];
                        break;
                    }
                    $objPlanDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                              ->findBy(array('planId' => $objServicio->getPlanId(),
                                                             'estado' => "Activo"));
                    if(($objPlanDet))
                    {
                        foreach($objPlanDet as $idxPlanDet)
                        {
                            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                       ->find($idxPlanDet->getProductoId());

                            if(is_object($objProducto))
                            {
                                $intIdProdKon = $idxPlanDet->getProductoId();
                                foreach($arrayListadoServicios as $objListado)
                                {
                                    // Si encuentra un producto konibit procede pasar la caracteristica
                                    if ($intIdProdKon == $objListado['valor1'] && $objListado['valor3'] == "SI")
                                    {   
                                        $objProdCaractKonibit   = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                                     'ACTIVO KONIBIT',
                                                                                                                     $objProducto);
                                        if (is_object($objProdCaractKonibit) && $objProdCaractKonibit->getValor() != "SI") 
                                        {
                                            if($strValorOrigen == 'N')
                                            {
                                                $intContKonibit = $intContKonibit + 1;
                                                if ($intContKonibit > 1)
                                                {
                                                    $strLoginOrigen   = $objServicio->getPuntoId()->getLogin();
                                                    $intIdPuntoOrigen = $objServicio->getPuntoId()->getId();
                                                }
                                            }
                                            //DATA
                                            $arrayContratoProd          = array();
                                            $arrayTokenCas              = $serviceTokenCas->generarTokenCas();
                                            //PRODUCTOS
                                            $objProductos               = array('orderID'      => $objServicioOrigen->getId(),
                                                                                'productSKU'   => $objProducto->getCodigoProducto(),
                                                                                'productName'  => $objProducto->getDescripcionProducto(),
                                                                                'quantity'     => '1',
                                                                                'included'     => true,
                                                                                'productoId'   => $intIdProdKon,
                                                                                'migrateTo'    => $objServicio->getId(),
                                                                                'status'       => 'active'
                                                                               );

                                            $arrayContratoProd[]        = $objProductos;
                                            // AGREGO MIS PRODUCTOS A MI ARREGLO
                                            array_push($arrayListProdKon, $objProductos);
                                            //DATA
                                            $objDataProductos           = array('companyName'   => $objServicio->getPuntoId()
                                                                                                               ->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()  
                                                                                                               ->getRazonSocial() ?  
                                                                                                   $objServicio->getPuntoId()
                                                                                                               ->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()  
                                                                                                               ->getRazonSocial() :
                                                                                                   $objServicio->getPuntoId()
                                                                                                               ->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()
                                                                                                               ->getNombres().
                                                                                                   ' '.$objServicio->getPuntoId()
                                                                                                                   ->getPersonaEmpresaRolId()
                                                                                                                   ->getPersonaId()
                                                                                                                   ->getApellidos(),
                                                                                'companyCode'   => $objServicio->getPuntoId()->getId(),
                                                                                'companyID'     => $objServicio->getPuntoId()
                                                                                                               ->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()
                                                                                                               ->getIdentificacionCliente(),
                                                                                'contactName'   => $objServicio->getPuntoId()
                                                                                                               ->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()  
                                                                                                               ->getRazonSocial() ?  
                                                                                                   $objServicio->getPuntoId()
                                                                                                               ->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()  
                                                                                                               ->getRazonSocial() :
                                                                                                   $objServicio->getPuntoId()
                                                                                                               ->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()
                                                                                                               ->getNombres().
                                                                                                   ' '.$objServicio->getPuntoId()
                                                                                                                   ->getPersonaEmpresaRolId()
                                                                                                                   ->getPersonaId()
                                                                                                                   ->getApellidos(),
                                                                                'email'         => $strCorreo,
                                                                                'phone'         => $strTelefono,
                                                                                'login'         => $objServicio->getPuntoId()->getLogin(),
                                                                                'plan'          => $objServicio->getPlanId()->getNombrePlan(),
                                                                                'address'       => $objServicio->getPuntoId()->getDireccion(),
                                                                                'city'          => $objServicio->getPuntoId()
                                                                                                               ->getPuntoCoberturaId()
                                                                                                               ->getNombreJurisdiccion(),
                                                                                'sector'        => $objServicio->getPuntoId()->getSectorId()
                                                                                                                             ->getNombreSector(),
                                                                                'status'        => 'active',
                                                                                'products'      => $arrayContratoProd
                                                                               );
                                            //DATA
                                            $arrayData                  = array('action'        => ( isset($arrayParametroKnb["valor5"]) && 
                                                                                                     !empty($arrayParametroKnb["valor5"]) )
                                                                                                     ? $arrayParametroKnb["valor5"] : "",
                                                                                'partnerID'     => (isset($arrayParametroKnb["valor7"]) &&
                                                                                                    !empty($arrayParametroKnb["valor7"]) )
                                                                                                    ? $arrayParametroKnb["valor7"] : "001",
                                                                                'companyCode'   => $intCompCodeKon,
                                                                                'companyID'     => $objServicioOrigen->getPuntoId()
                                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                                     ->getPersonaId()
                                                                                                                     ->getIdentificacionCliente(),
                                                                                'contactName'   => $objServicioOrigen->getPuntoId()
                                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                                     ->getPersonaId()  
                                                                                                                     ->getRazonSocial() ?  
                                                                                                   $objServicioOrigen->getPuntoId()
                                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                                     ->getPersonaId()  
                                                                                                                     ->getRazonSocial() :
                                                                                                   $objServicioOrigen->getPuntoId()
                                                                                                                     ->getPersonaEmpresaRolId()
                                                                                                                     ->getPersonaId()
                                                                                                                     ->getNombres().
                                                                                                   ' '.$objServicioOrigen->getPuntoId()
                                                                                                                         ->getPersonaEmpresaRolId()
                                                                                                                         ->getPersonaId()
                                                                                                                         ->getApellidos(),
                                                                                'login'         => $strLoginOrigenKon,
                                                                                'data'          => $objDataProductos,
                                                                                'requestNumber' => '1',
                                                                                'timestamp'     => ''
                                                                                );

                                            $arrayKonibit               = array('identifier'    => $objServicio->getId(),
                                                                                'type'          => ( isset($arrayParametroKnb["valor4"]) && 
                                                                                                     !empty($arrayParametroKnb["valor4"]) )
                                                                                                     ? $arrayParametroKnb["valor4"] : "",
                                                                                'retryRequered' => true,
                                                                                'process'       => ( isset($arrayParametroKnb["valor6"]) && 
                                                                                                     !empty($arrayParametroKnb["valor6"]) )
                                                                                                     ? $arrayParametroKnb["valor6"] : "",
                                                                                'origin'        => $strAccion,
                                                                                'user'          => $strUsrCreacion,
                                                                                'uri'           => ( isset($arrayParametroKnb["valor1"]) && 
                                                                                                     !empty($arrayParametroKnb["valor1"]) )
                                                                                                     ? $arrayParametroKnb["valor1"] : "",
                                                                                'executionIp'   => $strIpCreacion,
                                                                                'data'          => $arrayData
                                                                                );


                                            $arrayEnvioKonibit          = array('strToken'         => $arrayTokenCas['strToken'],
                                                                                'strUser'          => $strUsrCreacion,
                                                                                'strIp'            => $strIpCreacion,
                                                                                'arrayPropiedades' => $arrayKonibit);
                                                                                
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
                // Envio a Konibit
                    $arrayEnvTemp = array();
                    $arrayEnvTemp = $arrayEnvioKonibit;
                    $arrayEnvTemp['arrayPropiedades']['data']['data']['products'] = $arrayListProdKon;
                    $arrayEnvKonibit = array();
                    array_push( $arrayEnvKonibit,$arrayEnvTemp );
                    

                    foreach($arrayEnvKonibit as $envkon)
                    {
                        $arrayResultado = $serviceKonibit->envioAKonibit($envkon);
                    }
            }
            else
            {
                if (is_object($objServicio->getPlanId()))
                {
                   // Activamos los servicios incluidos
                    $arrayDatosParametros = array(
                        "objServicio"     => $objServicio,
                        "intCodEmpresa"   => $intCodEmpresa,
                        "strIpCreacion"   => $strIpCreacion,
                        "strUserCreacion" => $strUsrCreacion
                    );
                    $arrayResultado = $serviceConfirmar->activarProdKonitIncluidos($arrayDatosParametros);
                }
                else
                {
                    $arrayResultado = array('strResultado'  => "Error",
                                            'strMensaje'    => "Solo aplica para productos que provienen de un traslado o CRS.");
                }

            }
            }
        }
        catch(\Exception $ex)
        {
            error_log("error principal: " . $ex->getMessage());
            $arrayResultado = array('strResultado'  => "Error",
                                    'strMensaje'    => $ex->getMessage());
        }

        $objJson = json_encode($arrayResultado);
        $objRespuesta->setContent($objJson);
        return $objRespuesta;
    }

    /* 
     * Documentación para el método 'ajaxMigrarSecureNgFirewall'.
     *
     * Método utilizado para realizar la migración del equipo de Secure NG Firewall al servicio tradicional.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 02-08-2021
     *
     * @return Response $objResponse
    */
    public function ajaxMigrarSecureNgFirewallAction()
    {
        ini_set('max_execution_time', 9000000);
        
        $strMensaje             = "Error";
        $objRequest             = $this->get('request');      
        $emComercial            = $this->get('doctrine')->getManager();        
        $emInfraestructura      = $this->get('doctrine')->getManager('telconet_infraestructura');
                
        $intIdServicio          = $objRequest->get('idServicio');
        $intServicioTradicional = $objRequest->get('idServicioTradicional');
        $strSerie               = $objRequest->get('serie');
        $strMac                 = $objRequest->get('mac');
        $serviceUtil            = $this->get('schema.Util');
        
        $strCodEmpresa          = $objRequest->getSession()->get('idEmpresa');
        $strPrefijoEmpresa      = $objRequest->getSession()->get('prefijoEmpresa');
        $strIpCreacion          = $objRequest->getClientIp();
        $strUsrCreacion         = $objRequest->getSession()->get('user');
        $objEmpleadoSesion      = $objRequest->getSession()->get('empleado');
        $intIdOficina           = $objRequest->getSession()->get('idOficina');
        
        $intIdAccion = 313;
        $intIdMotivo = 465;

        $emComercial->getConnection()->beginTransaction();
                
        try
        {                        
            //Consultamos la serie del servicio tradicional para obtener el elemento
            $objInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                 ->findOneBy(array( "serieFisica" => $strSerie,
                                                                    "estado"      => 'Activo'));
            if (is_object($objInfoElemento))
            {
                $intIdElemento = $objInfoElemento->getId();
            }
            
            //Llamar a procedimiento donde consulta equipo del servicio security NG Firewall
            $arrayParametrosServicio["intIdServicio"] = $intIdServicio;
            $arrayInformacionCpe = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                               ->getArrayInformacionCpe($arrayParametrosServicio);
                
            if(isset($arrayInformacionCpe) && !empty($arrayInformacionCpe))
            {
                $strNombreInterfaceElemento        = $arrayInformacionCpe[0]['nombreInterfaceElemento'];
                $strMacInterfaceElemento           = $arrayInformacionCpe[0]['macInterfaceElemento'];
                $strNombreElementoNuevo            = $arrayInformacionCpe[0]['nombreElementoNuevo'];
                $strDescripcionElementoNuevo       = $arrayInformacionCpe[0]['descripcionElementoNuevo'];
                $strNombreModeloElementoNuevo      = $arrayInformacionCpe[0]['nombreModeloElementoNuevo'];
                $strTipoElementoNuevo              = $arrayInformacionCpe[0]['tipoElementoNuevo'];
                $strIpElementoNuevo                = $arrayInformacionCpe[0]['ipElementoNuevo'];
                $strSerieFisica                    = $arrayInformacionCpe[0]['serieFisica'];
            }
            else
            {
                $strMensajeError = 'Por favor regularizar el equipo del servicio NG Firewall.';
                throw new \Exception("Por favor regularizar el equipo del servicio NG Firewall.");
            }
            
            //Obtenemos responsable para la asignación de la tarea
            $strRegionServicio  = "";
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio) && empty($objServicio))
            {
                throw new \Exception("No se ha podido encontrar el servicio tradicional");
            }
            if(is_object($objServicio->getPuntoId()))
            {
                $intIdOficinaServicio   = is_object($objServicio->getPuntoId()->getPuntoCoberturaId()) ? 
                                          $objServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId() : 0;
                $objOficinaServicio     = $emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                                                      ->find($intIdOficinaServicio);
                if(is_object($objOficinaServicio))
                {
                    $objCantonServicio = $emComercial->getRepository("schemaBundle:AdmiCanton")
                                              ->find($objOficinaServicio->getCantonId());
                    if(is_object($objCantonServicio))
                    {
                        $strRegionServicio = $objCantonServicio->getRegion();
                    }
                }
            }
            //Obtengo el rol del jefe del departamento.
            $arrayDescripcionRol   = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('ASIGNAR_TAREA_JEFES',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strRegionServicio,
                                                                        'IPCCL2',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '');
            if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"]))
            {
                $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] : 
                                                         $strDescripcionRol;
            }
            $arrayParametrosResponsable = array(
                                                    'idEmpresa'                     => $strCodEmpresa,
                                                    'estado'                        => 'Activo',
                                                    'strDescripcionRol'             => $strDescripcionRol,
                                                    'strDescripcionTipoRol'         => 'Empleado',
                                                    'strNombreDepartamento'         => 'IPCCL2',
                                                    'strRegionEmpleado'             => $strRegionServicio,
                                                    'esJefe'                        => 'S',
                                                    'strDescripcionFormaContacto'   => 'Correo Electronico'
                                                );
            $arrayRespuestaResponsables = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                      ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
            $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
            if(empty($arrayResultadoResponsables[0]))
            {
                throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
            }
            else
            {
                $arrayJefeResponsable = $arrayResultadoResponsables[0];
            }
            
            $arrayPeticiones[] = array( 'intIdDepartamento'  => $arrayJefeResponsable['idDepartamento'],
                                    'idEmpresa'              => $strCodEmpresa,
                                    'prefijoEmpresa'         => $strPrefijoEmpresa,
                                    'idServicio'             => $intServicioTradicional,
                                    'idElemento'             => $intIdElemento,
                                    'modeloCpe'              => $strNombreModeloElementoNuevo,
                                    'ipCpe'                  => $strIpElementoNuevo,
                                    'idResponsable'          => $arrayJefeResponsable['idPersona'],
                                    'tipoResponsable'        => "E",
                                    'nombreCpe'              => $strNombreElementoNuevo,
                                    'macCpe'                 => $strMac,
                                    'macCpeBck'              => "",
                                    'strRegistraEquipo'      => "N",
                                    'serieCpe'               => $strSerieFisica,
                                    'descripcionCpe'         => $strDescripcionElementoNuevo,
                                    'tipoElementoCpe'        => $strTipoElementoNuevo,
                                    'strEsCambioEquiSoporteMasivo'  => "NO",
                                    'nombreInterface'        => $strNombreInterfaceElemento,
                                    'nombreInterfaceBck'     => "",
                                    'interfacesConectadas'   => "1",
                                    'intIdElementoWifi'      => "",
                                    'strModeloWifi'          => "",
                                    'strMacWifi'             => "",
                                    'strSerieWifi'           => "",
                                    'strDescripcionWifi'     => "",
                                    'strNombreWifi'          => "",
                                    'strTieneMigracionHw'    => "",
                                    'strEquipoCpeHw'         => "",
                                    'strEquipoWifiAdicional' => "",
                                    'strAgregarWifi'         => "",
                                    'strEsSmartWifi'         => "NO",
                                    'strEsApWifi'            => "NO",
                                    'usrCreacion'            => $strUsrCreacion,
                                    'esPseudoPe'             => 'N',
                                    'ipCreacion'             => $strIpCreacion,
                                    'serNaf'                 => $this->container->getParameter('database_host_naf'),
                                    'ptoNaf'                 => $this->container->getParameter('database_port_naf'),
                                    'sidNaf'                 => $this->container->getParameter('database_name_naf'),
                                    'usrNaf'                 => $this->container->getParameter('user_naf'),
                                    'pswNaf'                 => $this->container->getParameter('passwd_naf'),
                                    'host'                   => $this->container->getParameter('host'),
                                    'strEsExtenderDualBand'  => "NO",
                                    'strEsWifiDualBand'      => "",
                                    'intIdServicioInternet'  => "",
                                    'objEmpleadoSesion'      => $objEmpleadoSesion,
                                    'cambioEquiposDualBand'  => "NO",
                                    'strEsCambioPorSoporte'  => "NO",
                                    'esMigracionNgFirewall'  => "SI",
                                    'idPersonaEmpresaRol'    => $arrayJefeResponsable['idPersonaEmpresaRol']
                                  );
        
            /* @var $serviceCambioElemento InfoCambioElementoService */
            $serviceCambioElemento = $this->get('tecnico.InfoCambioElemento');

            $arrayRespuesta = $serviceCambioElemento->cambioElemento($arrayPeticiones);

            if($arrayRespuesta[0]['status']!="OK")
            {
                $strResult = $arrayRespuesta[0]['status'];
                $strMensaje = $arrayRespuesta[0]['mensaje'];
            }
            else
            {
                $serviceCancelacion = $this->get('tecnico.InfoCancelarServicio');
            
                $arrayCancelacion['idServicio']            = $intIdServicio;
                $arrayCancelacion['idEmpresa']             = $strCodEmpresa;
                $arrayCancelacion['idOficina']             = $intIdOficina;
                $arrayCancelacion['idAccion']              = $intIdAccion;
                $arrayCancelacion['idMotivo']              = $intIdMotivo;
                $arrayCancelacion['usrCreacion']           = $strUsrCreacion;
                $arrayCancelacion['clientIp']              = $strIpCreacion;
                $arrayCancelacion['strPrefijoEmpresa']     = $strPrefijoEmpresa;
                $arrayCancelacion['esMigracionNgFirewall'] = "SI";

                $arrayRespuesta = $serviceCancelacion->cancelarServiciosOtros($arrayCancelacion);
                $strStatus      = $arrayRespuesta['status'];
                $strMensaje     = 'Migración de Equipo Exitosa';

                if ($strStatus == "OK")
                {
                    $strResult = "OK";
                }
            }
        }
        catch (\Exception $e) 
        {
            $strMensaje = "Error al realizar la migración del equipo CPE. ".$strMensajeError;
            
            $serviceUtil->insertError('TELCOS', 
                                      'ajaxMigrarSecureNgFirewallAction', 
                                      $e->getMessage(), 
                                      $objRequest->getSession()->get('user'), 
                                      $objRequest->getClientIp()
                                     );
            
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
        
            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
                $emInfraestructura->close();
            }
        }
        
        return new Response($strMensaje);
    }
    
    /**
     * Documentación para el método 'ajaxGetMigrarEquipoCpeAction'.
     *
     * Método utilizado para generar el Json de las series de los equipos activos para la migración
     *
     * @param int idServicio id del servicio a consultar los protocolos de enrutamiento
     *
     * @return JsonResponse [{ 
     *                      'serie'       : 'serie del equipo'
     *                      'servicio'    : 'id servicio del equipo a asociar'
     *                      }]
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 16-08-2021
    */
    public function ajaxGetMigrarEquipoCpeAction()
    {
        $objResponse             = new JsonResponse();
        $objRequest              = $this->get('request');
        $arrayServiciosMpls      = array();
        $intServicioId           = $objRequest->get('idServicio');
        $intEmpresaId            = $objRequest->get('idEmpresa');
        $emComercial             = $this->get('doctrine')->getManager();
        $emInfraestructura       = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emGeneral               = $this->get('doctrine')->getManager('telconet_general');
        $serviceTecnico          = $this->get('tecnico.InfoServicioTecnico');
        $objServicio             = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
        $serviceServicio         = $this->get('comercial.InfoServicio');
        
        $intIdProducto           = $objServicio->getProductoId()->getId();
        
        $objProductoDatoMpls            = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'L3MPLS',
                                                                                            'empresaCod'          => $intEmpresaId));
        
        $objInternetMpls                = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet MPLS',
                                                                                            'empresaCod'          => $intEmpresaId));
        
        $objProductoInternetDedicado    = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet Dedicado',
                                                                                            'nombreTecnico'       => 'INTERNET',
                                                                                            'empresaCod'          => $intEmpresaId));
        if((is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls)) || 
           (is_object($objInternetMpls) && !empty($objInternetMpls)) ||
           (is_object($objProductoInternetDedicado) && !empty($objProductoInternetDedicado)))
        {
            if(is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls))
            {
                $arrayServicioDatosMpls = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                     array('puntoId'    => $objServicio->getPuntoId(),
                                                                                           'productoId' => $objProductoDatoMpls->getId(),
                                                                                           'estado'     => 'Activo'));
                if(is_array($arrayServicioDatosMpls) && !empty($arrayServicioDatosMpls))
                {
                    foreach($arrayServicioDatosMpls as $objDatos)
                    {
                      array_push($arrayServiciosMpls,$objDatos);  
                    }
                }
                
            }
            if(is_object($objInternetMpls) && !empty($objInternetMpls))
            {
                $arrayServicioMpls = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                array('puntoId'    => $objServicio->getPuntoId(),
                                                                                      'productoId' => $objInternetMpls->getId(),
                                                                                      'estado'     => 'Activo'));
                
                if(is_array($arrayServicioMpls) && !empty($arrayServicioMpls))
                {
                    foreach($arrayServicioMpls as $objMpls)
                    {
                      array_push($arrayServiciosMpls,$objMpls);  
                    }
                }
            }
            if(is_object($objProductoInternetDedicado) && !empty($objProductoInternetDedicado))
            {
                $arrayServicioMpls = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(
                                                                                array('puntoId'    => $objServicio->getPuntoId(),
                                                                                      'productoId' => $objProductoInternetDedicado->getId(),
                                                                                      'estado'     => 'Activo'));
                
                if(is_array($arrayServicioMpls) && !empty($arrayServicioMpls))
                {
                    foreach($arrayServicioMpls as $objMpls)
                    {
                      array_push($arrayServiciosMpls,$objMpls);  
                    }
                }
            }
            $boolValidaCpe = false;

            if((is_array($arrayServiciosMpls) && !empty($arrayServiciosMpls)))
            {
                foreach($arrayServiciosMpls as $objServicio)
                {
                    //Consultamos si el servicio es backup
                    $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneBy(array( "servicioId" => $objServicio->getId()));
                    if (is_object($objServicioTecnico) && !empty($objServicioTecnico))
                    {
                        $strTipoEnlace = $objServicioTecnico->getTipoEnlace();
                    }
                    
                    if ($strTipoEnlace !== 'BACKUP')
                    {
                        $objElementoCpe = $serviceTecnico->getElementoCpeSerieTn($objServicio);
                        if (is_object($objElementoCpe) && !empty($objElementoCpe))
                        {
                            //Consulto si el cpe es Fortigate
                            $strModeloCpe        = $objElementoCpe->getModeloElementoId()->getId();
                            $objModeloElemento   = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($strModeloCpe);
                            if (is_object($objModeloElemento) && !empty($objModeloElemento))
                            {
                                $strMarcaCpe = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                            }
                            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
                            if (is_object($objProducto) && !empty($objProducto))
                            {
                                $strDescripcionProducto = $objProducto->getDescripcionProducto();
                            }
                            //Consultamos si la marca se encuentra dentro de los parámetros para visualizar check de migración
                            $arrayMarcasPermitidas  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('MARCAS_PERMITIDAS_MIGRACION',
                                                                              '',
                                                                              '',
                                                                              '',
                                                                              $strDescripcionProducto,
                                                                              '',
                                                                              '',
                                                                              '',
                                                                              '',
                                                                              $intEmpresaId);

                            if(isset($arrayMarcasPermitidas) && !empty($arrayMarcasPermitidas))
                            {
                                foreach( $arrayMarcasPermitidas as $arrayParametroDet )
                                {
                                    if ($arrayParametroDet['valor2'] == $strMarcaCpe)
                                    {
                                        $strSerieEquipo = $arrayResultado[0]['serie'];
                                        if(!($objElementoCpe->getSerieFisica()==$strSerieEquipo))
                                        {
                                            $arrayResultado[] = array(
                                            'serie'          => $objElementoCpe->getSerieFisica(),
                                            'servicioSdwan'  => $objServicio->getId());
                                            $boolValidaCpe = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        if (!$boolValidaCpe)
        {
            $arrayResultado = array(
                                'status'   => 'ERROR',
                                'mensaje'  => 'Para realizar la migración del equipo Cpe del SECURITY NG FIREWALL debe tener servicios '
                                            . 'tradicionales Internet/Datos L3MPLS con equipos CISCO o HP');
            $objResponse->setData($arrayResultado);
        }
        else
        {
            $objResultado = json_encode($arrayResultado);
            $objResponse->setContent($objResultado);
        }
        
        return $objResponse;
    }
    
    /**
     * Documentación para el método 'ajaxOpcionesCpeAction'.
     *
     * Método utilizado para generar el Json de las series de las opciones de combos fortianalyzer, fortianalyzer2, fortimanager, syslog.
     *
     * @param int idServicio id del servicio a consultar los protocolos de enrutamiento
     *
     * @return JsonResponse [{ 
     *                      'serie'       : 'serie del equipo'
     *                      'servicio'    : 'id servicio del equipo a asociar'
     *                      'numLicencia' : 'numero de licencia ingresado'
     *                      }]
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 26-08-2021
    */
    public function ajaxOpcionesCpeAction()
    {
        $objResponse             = new JsonResponse();
        $objRequest              = $this->get('request');
        $intEmpresaId            = $objRequest->get('idEmpresa');
        $emGeneral               = $this->get('doctrine')->getManager('telconet_general');
                
        $arrayOpcionesCombos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get(
                                                              'COMBO_SECURE_CPE', 
                                                              '', 
                                                              '', 
                                                              '', 
                                                              'SECURITY SECURE CPE', 
                                                              '',
                                                              '', 
                                                              '',
                                                              '',
                                                              $intEmpresaId
                                                             );
                                
        if(isset($arrayOpcionesCombos) && !empty($arrayOpcionesCombos))        
        {
            foreach($arrayOpcionesCombos as $objOpcionesCombos)
            {
                $arrayResultado[] = array(
                                'opcion'          => $objOpcionesCombos['valor2'],
                                'boolOpcion'      => $objOpcionesCombos['valor3']);
            }
        }    
        
        $objResultado = json_encode($arrayResultado);
        $objResponse->setContent($objResultado);
        return $objResponse;
    }
    
    /**
     * Funcion que sirve para cargar los servicios tradicionales que tienen el equipo cpe seleccionado
     * de un cliente
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 27-09-2021
     */
    public function verTradicionalAction()
    {
        $objRespuesta      = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objPeticion       = $this->get('request');
        $intIdServicio     = $objPeticion->get('servicioTrad');
        $emComercial       = $this->get('doctrine')->getManager();
        $emInfraestructura = $this->getDoctrine()->getManager("telconet_infraestructura");
        $objServicio       = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $intTotal          = 0;
        
        $objJson           = null;
        $strData           = null; 
        
        if(is_object($objServicio))
        {
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if (is_object($objServicioTecnico) && !empty($objServicioTecnico))
            {
                $strInterfaceElementoId = $objServicioTecnico->getInterfaceElementoClienteId();
            }
            $arrayServicioTecnicoCliente = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                              ->findBy(array( "interfaceElementoClienteId" => $strInterfaceElementoId));
            if (is_array($arrayServicioTecnicoCliente) && !empty($arrayServicioTecnicoCliente))
            {
                foreach($arrayServicioTecnicoCliente as $objServicioInterfaceElemento)
                {
                    $arrayParametros                  = array();
                    $arrayParametros['intIdServicio'] = $objServicioInterfaceElemento->getServicioId()->getId();
                    $objInterfaceElemento             = $emInfraestructura->getRepository("schemaBundle:InfoEnlace")
                                                                           ->getServiciosPorInterfaceElementoTrad($arrayParametros);
                    
                    if(is_array($objInterfaceElemento))
                    {
                        $objServicioTrad    = $emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['intIdServicio']);
                        if(is_object($objServicioTrad))
                        {
                            $strLoginAuxiliar       = $objServicioTrad->getLoginAux();
                            $strDescripcionProducto = $objServicioTrad->getProductoId()->getDescripcionProducto();
                        }
                        $arrayEncontrados[] = array( 'loginAuxiliar'    => $strLoginAuxiliar,
                                                     'productoAsociado' => $strDescripcionProducto,
                                                     'mac'              => $objInterfaceElemento[0]['mac'],
                                                     'puerto'           => $objInterfaceElemento[0]['nombre']
                                      );
                    }
                }
                $intTotal = count($arrayEncontrados);
                $strData  = json_encode($arrayEncontrados);
            }
        }
        $objJson = '{"total":"' . $intTotal . '","encontrados":' . $strData . '}';
        $objRespuesta->setContent($objJson);
        return $objRespuesta;
    }

     /**
     * Funcion que sirve para cargar listado de opciones de caracteristica Administracion Web
     * de producto NG FIREWALL
     *
     * @author Joel Muñoz <jrmunoz@telconet.ec>
     * @version 1.0 19-09-2022
     */
    public function ajaxGetAdminParametersAction()
    {
        ini_set('max_execution_time', 3000000);
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objPeticion               = $this->get('request');
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");

        $arrayParametros = array(
            'strNombreParametroCab' => $objPeticion->get('nombreParametro'),
            'estado'=> 'Activo'
        );

        try
        {
            $arrayReponse = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getArrayDetalleParametros($arrayParametros);





            $objJson =  (is_array($arrayReponse) && isset($arrayReponse['encontrados']))
                        ? ($arrayReponse['encontrados'][0]['valor1']): array();

            $objRespuesta->setContent($objJson);
        }
        catch(\Exception $ex)
        {
            error_log($ex->getMessage());
        }



        return $objRespuesta;
    }

   /**
     * Funcion que sirve para cargar listado de opciones de producto NG FIREWALL
     *
     * @author Joel Muñoz <jrmunoz@telconet.ec>
     * @version 1.0 19-09-2022
     */
    public function ajaxGetListOpcionesNGFirewallAction()
    {
        ini_set('max_execution_time', 3000000);
        $arrayRespuesta             = array();
        $objPeticion               = $this->get('request');
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");

        $arrayParametros = array(
            'strNombreParametroCab' => $objPeticion->get('nombreParametro'),
            'estado'=> 'Activo'
        );

        try
        {
            $arrayRespuesta = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getArrayDetalleParametros($arrayParametros);


        }
        catch(\Exception $ex)
        {
            $arrayRespuesta = array();
            error_log($ex->getMessage());
        }


        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objJson = json_encode($arrayRespuesta);
        $objResponse->setContent($objJson);
        return $objResponse;
    }

       /**
     * Funcion que sirve para actualizar data ténica de producto NG FIREWALL
     *
     * @author Joel Muñoz <jrmunoz@telconet.ec>
     * @version 1.0 19-09-2022
     *
     * @author Joel Muñoz <jrmunoz@telconet.ec>
     * @version 1.1 04-10-2022 | Se agrega funcionalidad para guardar en el historial de servicio
     */
    public function ajaxUpdateDataTecnicaNGFAction()
    {
        try
        {
            $objRespuesta =  array();


            // INICIALIZACION DE VARIABLES
            $objRequest         = $this->getRequest();
            $objSession         = $objRequest->getSession();
            $strUsrCreacion     = $objSession->get('user');
            $objPeticion        = $this->get('request');
            $emGeneral          = $this->getDoctrine()->getManager("telconet_general");
            $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
            $emComercial        = $this->get('doctrine')->getManager('telconet');
            $strIpCreacion      = $objRequest->getClientIp();
            $strObservacion     = '';
            $objHistorialNGF = new InfoServicioHistorial();

            // PARAMETROS HTTP
            $strNGFNubePublica             = $objPeticion->get('strNGFNubePublica')?:false;
            $strNGFIpFqns                  = $objPeticion->get('strNGFIpFqns')?:false;
            $strNGFlicencia                = $objPeticion->get('strNGFlicencia')?:false;
            $strNGFPuertoAdministracionWeb = $objPeticion->get('strNGFPuertoAdministracionWeb')?:false;



            $objServicio  = $emComercial->getRepository('schemaBundle:InfoServicio')->find($objPeticion->get('idServicio')?:'');



            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                        'estado' => 'Activo',
                                                        'descripcionProducto' => 'SECURITY NG FIREWALL',
                                                        'empresaCod' => '10',
            ));




            // ACTUZALIZACION CARACTERISTICA IP/DNS
            if($strNGFIpFqns)
            {

                $arrayParams =  array();
                $arrayParams['objServicio']                = $objServicio;
                $arrayParams['objProducto']                = $objProducto;
                $arrayParams['strDescripcionCaract']       = 'IP/FQDN NG FIREWALL';
                $arrayParams['strEstadoNuevo']             = 'Eliminado';
                $arrayParams['strUsrUltMod']               = $strUsrCreacion;

                $objResponseServiceTecnico = $serviceTecnico->actualizarServicioProdCaracts($arrayParams);
                $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                $objProducto,
                'IP/FQDN NG FIREWALL',
                $strNGFIpFqns,
                $strUsrCreacion);

                $strObservacion .= "<b>Ip/FQDN: </b>{$strNGFIpFqns}</br>";
            }

            // ACTUZALIZACION CARACTERISTICA PUERTO ADMINISTRACIÓN WEB
            if($strNGFPuertoAdministracionWeb)
            {
                $arrayParams =  array();
                $arrayParams['objServicio']                = $objServicio;
                $arrayParams['objProducto']                = $objProducto;
                $arrayParams['strDescripcionCaract']       = 'PUERTO ADMINISTRACION WEB NG FIREWALL';
                $arrayParams['strEstadoNuevo']             = 'Eliminado';
                $arrayParams['strUsrUltMod']               = $strUsrCreacion;

                $objResponseServiceTecnico = $serviceTecnico->actualizarServicioProdCaracts($arrayParams);
                $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                $objProducto,
                'PUERTO ADMINISTRACION WEB NG FIREWALL',
                $strNGFPuertoAdministracionWeb,
                $strUsrCreacion);

                $strObservacion .= "<b>Puerto Administraci&#243;n Web: </b>{$strNGFPuertoAdministracionWeb}</br>";

            }

            // ACTUZALIZACION CARACTERISTICA LICENCIA
            if($strNGFlicencia)
            {
                $arrayParams =  array();
                $arrayParams['objServicio']                = $objServicio;
                $arrayParams['objProducto']                = $objProducto;
                $arrayParams['strDescripcionCaract']       = 'SERIAL LICENCIA NG FIREWALL';
                $arrayParams['strEstadoNuevo']             = 'Eliminado';
                $arrayParams['strUsrUltMod']               = $strUsrCreacion;

                $objResponseServiceTecnico = $serviceTecnico->actualizarServicioProdCaracts($arrayParams);
                $serviceTecnico->ingresarServicioProductoCaracteristica($objServicio,
                $objProducto,
                'SERIAL LICENCIA NG FIREWALL',
                $strNGFlicencia,
                $strUsrCreacion);

                $strObservacion .= "<b>Serial Licencia: </b>{$strNGFlicencia}</br>";

            }

            if(strlen($strObservacion) > 0)
            {
                $strObservacion = 'Se realiz&#243; la actualizaci&#243;n de la siguiente
                data t&#233;cnica</br>' . $strObservacion;

                $objHistorialNGF->setServicioId($objServicio);
                $objHistorialNGF->setEstado("Activo");
                $objHistorialNGF->setObservacion($strObservacion);
                $objHistorialNGF->setUsrCreacion($strUsrCreacion);
                $objHistorialNGF->setFeCreacion(new \DateTime('now'));
                $objHistorialNGF->setIpCreacion($strIpCreacion);
                $emComercial->persist($objHistorialNGF);
                $emComercial->flush();
            }

            $arrayResultado = json_encode(array('strResultado'  => "OK",
                                        'strMensaje'    => 'Data técnica actualizada correctamente'));
    }


    catch(\Exception $ex)
    {
            error_log("ERROR | FUNCION: ajaxUpdateDataTecnicaNGFAction | MODULO: TECNICO | MSGERROR:  " . $ex->getMessage());
            $arrayResultado = json_encode(array('strResultado'  => "Error",
                                'strMensaje'    => $ex->getMessage()));
    }


        $objResponse = new Response();
        $objResponse->headers->set('Content-Type', 'text/json');
        $objJson = $arrayResultado;
        $objResponse->setContent($objJson);
        return $objResponse;
    }
    /*
     * Metodo que devuelve las resoluciones configuradas para camaras safecity
     *
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.0 20/09/2022 Se devuelve el formato perteneciente al modelo de la camara
     * @return Object con la resolucion en ambos formatos (ej: 720p | 1208x720) y el tipo de camara
     */
    public function ajaxGetResolucionAlternaCamaraAction()
    {
        $objRespuesta = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest      = $this->get('request');
        $strModeloCamara = $objRequest->query->get('modeloElemento');
        $emGeneral       = $this->get('doctrine')->getManager('telconet_general');

        $objModeloCamara = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                       ->findOneBy(array(
                                        'descripcion' => 'MODELOS_CAMARAS',
                                        'valor1'      =>$strModeloCamara,
                                        'estado'      => 'Activo'));
        if(isset($objModeloCamara))
        {
            $strResolucion = $objModeloCamara->getValor3();
            $objResolucion = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                        ->findOneBy(array(
                                        'valor1'      =>$strResolucion,
                                        'estado'      => 'Activo'));
            $arrayRespuesta = array('resolucionCam' => $objResolucion->getValor2().'x'.$objResolucion->getValor3(),
                                    'tipoCamara'    => $objModeloCamara->getValor2(),
                                    'resolucion'    => $objResolucion->getValor1());

            $objRespuesta->setContent(json_encode($arrayRespuesta));

            return $objRespuesta;
        }

        return  $objRespuesta->setContent(json_encode([]));
    }

    public function setCorreoResumenCompraAction()
    {
        $objRespuesta      = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest = $this->get('request');
        $objSession  = $objRequest->getSession();
        $objPeticion = $this->get('request');
        $intIdServicio = $objPeticion->get('idServicio');
       $serviceTokenCas = $this->get('seguridad.TokenCas');
        $arrayTokenCas = $serviceTokenCas->generarTokenCas();
        if(empty($arrayTokenCas['strToken']))
        {
            throw new \Exception($arrayTokenCas['strMensaje']);
        }
        $arrayParametrosCorreo   = array();
        $arrayParametrosCorreo['token'] = $arrayTokenCas['strToken'];
        $arrayParametrosCorreo['idServicio'] = $intIdServicio;
        $arrayParametrosCorreo['usuIngreso'] =  $objSession->get('user');
        $arrayParametrosCorreo['ipCreacion'] = $objPeticion->getClientIp();
        $objComandoEjecucion = $this->get('tecnico.InfoServicioTecnico');
        $objSalida = $objComandoEjecucion
                   ->envioCorreoResumenCompra($arrayParametrosCorreo);
        $objResultado = json_decode($objSalida['result'],true);
        $strResponse='Correo Resumen Compra   Enviado';
        $arrayData=$objResultado['data'];
        $arrayData2 = array();
        $arrayData2=$arrayData['correoEnviados'];
        if($arrayData2 === null)
        {
            $strResponse='Correo Resumen Compra no Enviado';
        }else
        {
            $strResponse='Correo Resumen Compra Enviado';
        }
        $objRespuesta->setContent($strResponse);
        return $objRespuesta;
    }

    
    /**
     * @author Jose Cruz <jfcruzc@telconet.ec>
     * @version 1.0 - se agrega una validacion para reenviar el adendum cambio de plan si existiese un cambio de plan
     */
    public function setCambioPlanAction()
    {
        $emComercial       = $this->getDoctrine()->getManager("telconet");
        $objRespuesta      = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest = $this->get('request');
        $objSession  = $objRequest->getSession();
        $objPeticion = $this->get('request');
        $intIdServicio = $objPeticion->get('idServicio');
       $serviceTokenCas = $this->get('seguridad.TokenCas');
        $arrayTokenCas = $serviceTokenCas->generarTokenCas();
        if(empty($arrayTokenCas['strToken']))
        {
            throw new \Exception($arrayTokenCas['strMensaje']);
        }
        $arrayHistorialCambioPlan = $emComercial->getRepository('schemaBundle:InfoServicioHistorial')
        ->findListaHistorialPorObservacion(array('intServicioId' => $intIdServicio,
                                        'strObservacion' => 'Se cambio de plan'));

        

        $arrayParametrosCorreo   = array();
        $arrayParametrosCorreo['token'] = $arrayTokenCas['strToken'];
        $arrayParametrosCorreo['idServicio'] = $intIdServicio;
        $arrayParametrosCorreo['usuIngreso'] =  $objSession->get('user');
        $arrayParametrosCorreo['ipCreacion'] = $objPeticion->getClientIp();
        $arrayParametrosCorreo['reenvio'] = "true";
        if (!is_null($arrayHistorialCambioPlan) && count($arrayHistorialCambioPlan)>0) 
        {
            $intIndicePerfecto = 0;

            for ($intCont=0; $intCont < count($arrayHistorialCambioPlan); $intCont++) 
            { 
                if (!is_null($arrayHistorialCambioPlan[$intCont+1]) 
                && $arrayHistorialCambioPlan[$intCont+1]->getId() <= $arrayHistorialCambioPlan[$intCont]->getId()) 
                {
                    $intIndicePerfecto = $intCont;
                }
            }

            $objUltimoRegistro = $arrayHistorialCambioPlan[$intIndicePerfecto];
            $strPrePlan = $objUltimoRegistro->getObservacion();

            $arrayPrePlanAnterior = explode("precio anterior:<b>",$strPrePlan);
            if (!is_null($arrayPrePlanAnterior) && count($arrayPrePlanAnterior) >1) 
            {
                $arrayPrePlanAnterior = explode("</b>,<br>precio nuevo:<b>",$arrayPrePlanAnterior[1]);
                if (!is_null($arrayPrePlanAnterior) && count($arrayPrePlanAnterior) >1) 
                {
                    $arrayParametrosCorreo["planViejoValor"] = $arrayPrePlanAnterior[0];
                }
            }
            $arrayPrePlanAnterior = explode("plan anterior:<b>",$strPrePlan);
            if (!is_null($arrayPrePlanAnterior) && count($arrayPrePlanAnterior) >1) 
            {
                $arrayPrePlanAnterior = explode("</b>,<br>plan nuevo:<b>",$arrayPrePlanAnterior[1]);
                if (!is_null($arrayPrePlanAnterior) && count($arrayPrePlanAnterior) >1) 
                {
                    $arrayParametrosCorreo["planViejo"] = $arrayPrePlanAnterior[0];
                }
            }
        }
        $objComandoEjecucion = $this->get('tecnico.InfoServicioTecnico');
        $objSalida = $objComandoEjecucion
                   ->envioCorreoCambioVelocidad($arrayParametrosCorreo);
        

        $objResultado = json_decode($objSalida['result'],true);
        $strResponse='Correo Cambio de plan   Enviado';
        $arrayData=$objResultado['data'];
        $arrayData2 = array();
        $arrayData2=$arrayData['correoEnviados'];
        if($arrayData2 === null)
        {
            $strResponse='Correo Cambio de plan no Enviado';
        }else
        {
            $strResponse='Correo Cambio de plan Enviado';
        }
        $objRespuesta->setContent($strResponse);
        return $objRespuesta;
    }

    /*
     * Documentación para el método 'getElementosSegVehiculoAction'.
     *
     * Metodo utilizado para obtener los elementos de los productos SEG VEHICULO.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 29-09-2022
     * 
     * @author Axel Auza <aauza@telconet.ec>
     * @version 1.1 07-06-2023 - Se agrega validación para obtener los elementos por clientes en el producto SEG_VEHICULO
     * 
     */
    public function getElementosSegVehiculoAction()
    {
        $objRespuesta       = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objPeticion        = $this->get('request');
        $objSession         = $objPeticion->getSession();
        $serviceUtil        = $this->get('schema.Util');
        $emComercial        = $this->get('doctrine')->getManager('telconet');
        $emGeneral          = $this->get('doctrine')->getManager('telconet_general');
        $intIdEmpresa       = $objSession->get('idEmpresa');
        $intIdServicio      = $objPeticion->get('idServicio');
        try
        {
            //obtener servicio
            $objServicio    = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->findOneById($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }
            //obtener los elementos del cliente
            $arrayDataResultado = array();
            $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PARAMETROS_SEG_VEHICULOS',
                                                'TECNICO',
                                                '',
                                                'ELEMENTOS_PRODUCTO',
                                                $objServicio->getProductoId()->getId(),
                                                '',
                                                '',
                                                '',
                                                '',
                                                $intIdEmpresa,
                                                'valor5',
                                                '',
                                                '',
                                                '',
                                                $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
            if(!isset($arrayParElementos) || empty($arrayParElementos))
            {
                $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('PARAMETROS_SEG_VEHICULOS',
                                                                  'TECNICO',
                                                                  '',
                                                                  'ELEMENTOS_PRODUCTO',
                                                                  $objServicio->getProductoId()->getId(),
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $intIdEmpresa,
                                                                  'valor5',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  'GENERAL');
            }
            foreach($arrayParElementos as $arrayItemParEle)
            {
                $strKeyArray = $arrayItemParEle['valor7'];
                $arrayDataResultado[$strKeyArray][] = array(
                    "key"   => $arrayItemParEle['valor6'],
                    "title" => ucwords(strtolower($arrayItemParEle['valor3'])),
                    "mac" => $arrayItemParEle['valor4'] == "S",
                    "tipos" => explode(";",$arrayItemParEle['valor2'])
                );
            }
            //setear json
            $objJson = json_encode(["status"=>"OK","mensaje"=>"OK","encontrados"=>$arrayDataResultado]);
        }
        catch(\Exception $e)
        {
            $strError = "No se pudo obtener los elementos del producto.";
            $objJson  = json_encode(["status"=>"ERROR","mensaje"=>$strError,"encontrados"=>[]]);
            $serviceUtil->insertError('TELCOS',
                                      'InfoServicioController.getElementosSegVehiculo',
                                      $e->getMessage(),
                                      $objPeticion->getSession()->get('user'),
                                      $objPeticion->getClientIp()
                                    );
        }
        $objRespuesta->setContent($objJson);
        return $objRespuesta;
    }


    /**
     * @Secure(roles="ROLE_414-5977")
     * 
     * ajaxConfirmarTareaAction
     * 
     * Función que realiza el cambio de estado a AsignadoTarea
     * 
     * @author Josué Valencia <ajvalencia@telconet.ec>
     * @version 1.0 21-11-2022
     * @since 1.0
     * 
     */
    public function ajaxConfirmarTareaAction()
    {
        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $strIpUserSession       = $objRequest->getClientIp();
        $objSession             = $objRequest->getSession();
        $intIdServicio          = $objRequest->get('intIdServicio');
        $strUsrCreacion         = $objSession->get('user');
        
        $strTimeActual         = new \DateTime('now');
        $serviceUtil            = $this->get('schema.Util');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $strStatus              = "";
        $strMensaje             = "";
        try
        {
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $arrayInfoDetalleSol= $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                        ->findByParameters(array('servicioId' =>  $intIdServicio));
            if(is_object($objServicio) && count($arrayInfoDetalleSol)>0)
            {   
                $arrayParElementos= $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('ESTADO_CLEAR_CHANNEL',
                                                        'COMERCIAL',
                                                        '',
                                                        'ESTADO_CLEAR_CHANNEL',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        10);

                foreach($arrayInfoDetalleSol as $objInfoDet)
                {
                    $intIdInfoDetalleSol = $objInfoDet['id'];
                    $objInfoDetalleSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                    ->find($intIdInfoDetalleSol);

                    if(count($arrayParElementos)>0)
                    {
                        
                        $objServicio->setEstado($arrayParElementos["valor3"]);
                        $emComercial->persist($objServicio);

                        //agregar historial del servicio
                        $objInfoHistorial = new InfoServicioHistorial();
                        $objInfoHistorial->setServicioId($objServicio);
                        $objInfoHistorial->setEstado($arrayParElementos["valor3"]);
                        $objInfoHistorial->setUsrCreacion($strUsrCreacion);
                        $objInfoHistorial->setFeCreacion($strTimeActual);
                        $objInfoHistorial->setIpCreacion($strIpUserSession);
                        $objInfoHistorial->setObservacion('Cambio de Estado a AsignadoTarea');
                        $emComercial->persist($objInfoHistorial);

                        $objInfoDetalleSolicitud->setEstado($arrayParElementos["valor3"]);
                        $emComercial->persist($objInfoDetalleSolicitud);

                        //Crear un Info Detalle Solicitud Historial AsignadoTarea
                        $objInfoDetalleSolHist = new InfoDetalleSolHist();
                        $objInfoDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                        $objInfoDetalleSolHist->setEstado($arrayParElementos["valor3"]);
                        $objInfoDetalleSolHist->setFeCreacion($strTimeActual);
                        $objInfoDetalleSolHist->setUsrCreacion($strUsrCreacion);
                        $objInfoDetalleSolHist->setIpCreacion($strIpUserSession);
                        $objInfoDetalleSolHist->setObservacion("Cambio de Estado a AsignadoTarea");
                        $emComercial->persist($objInfoDetalleSolHist);


                        $emComercial->flush();
                        $strStatus  = "OK";
                        $strMensaje = "Se actualizo correctamente el estado";
                    }else
                    {
                        $strStatus  = "ERROR";
                        $strMensaje = "Existieron problemas al buscar el nuevo estado para asignar. ".
                                    "Por favor Notificar a Sistemas!";
                    }
                }
                                                                 
        
                
            }  
            else
            {
                $strStatus  = "ERROR";
                $strMensaje = "Existieron problemas al buscar la información del servicio necesaria para ejecutar el proceso. ".
                              "Por favor Notificar a Sistemas!";
            }
        }
        catch(\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error. Por favor Notificar a Sistemas!";
            $serviceUtil->insertError('Telcos+',
                                      'InfoServicioController->ajaxReintentarCreacionTgAction',
                                      $objEx->getMessage(),
                                      $strUsrCreacion,
                                      $strIpCliente);
        }

        $arrayRespuesta = array("strStatus"  => $strStatus,
                                "strMensaje" => $strMensaje);
        
        $objResponse->setData($arrayRespuesta);
        return $objResponse;
    }

   /**
     * Funcion para comprobar la existencia de una subred para la confirmacion de Clear Channel
     * 
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.0
     */
    public function buscarCSubredAction()
    {
        $objRespuesta               = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $objPeticion                     = $this->get('request');
        $strSubred                    = strtoupper($objPeticion->get('subred'));
        $strTipo                      = $objPeticion->get('tipo');
        $strUso                       = $objPeticion->get('uso');
        $intIdServicio                = $objPeticion->get('idServicio');
        $serviceUtil                  = $this->get('schema.Util');
        $strCadenaRespuesta      = "";
        try
        {
            /**
             * VALIDAMOS QUE LA SUBRED INGRESADA EXISTA EN LA TABLA SUBRED, SEA DE TIPO LAN, DE USO CLEAR CHANNEL
             * Y DE ELEMENTO ID IGUAL AL QUE ENVIAMOS DESDE LA VISTA
             */
             /* @var $objBuscarNaf \telconet\tecnicoBundle\Service\InfoServicioTecnico */
        
           $objBuscarNaf  = $this->get('tecnico.InfoServicioTecnico');
           //consultamos la subred en la tabla infosubred
           //Se obtiene la informacion tecnica anterior 
           $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
           $intElementoId=$objInfoServicioTecnico->getelementoId();
           if($intElementoId==null)
           {
           
                $objDatos=$emInfraestructura->getRepository('schemaBundle:InfoSubred')->findOneBy([
                    'subred'=>$strSubred,
                    'tipo'=>$strTipo,
                    'uso'=>$strUso,
                    'estado'=>'Activo'
                ]);
                if($objDatos!=null)
                {
                    $strStatus         = "OK";
                    $strMensaje        = $objDatos->getId();
                }
                else
                {
                    $strStatus         = "ERROR";
                    $strMensaje        = 'No existe Elemento Clear Channel con: <br>'
                    . 'Subred:<b>' . $strSubred . ' </b><br>'
                    . 'No podrá continuar con el proceso, Favor Revisar! <br>';
                }
             
            
            
           }
           else
           {
            $arrayParametrosNuevo  = array ( 
                'idElemento'   => $intElementoId, 
                'tipo'         => $strTipo, 
                'uso'          => $strUso, 
                'subred'      => $strSubred, 
                );
            $arrayRespuesta = $objBuscarNaf->buscarSubredEnInfoSubred($arrayParametrosNuevo);
            $strStatus         = $arrayRespuesta[0]['status'];
            $strMensaje        = $arrayRespuesta[0]['mensaje'];
           }
         
          
          
            $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
           
          

        }
        catch (Exception $objEx) 
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.buscarCSubredAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
            $strStatus             = "ERROR";
            $strMensaje            = "Ocurrio un error al buscar la subred, favor notifique a sistemas.";
            $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
            return $objRespuesta->setContent($strCadenaRespuesta);
        }
        
  
  
        return $objRespuesta->setContent($strCadenaRespuesta);
    }


    /**
     * Funcion para obtener la interface por parte del numero de serie del equipo
     * 
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.0
     */
    public function buscarInterfaceporserieAction()
    {
        $objRespuesta               = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objRequest         = $this->getRequest();
        $objSession         = $objRequest->getSession();
        $strEmpresaCod      = $objSession->get('idEmpresa');
        $emInfraestructura            = $this->getDoctrine()->getManager("telconet_infraestructura");
        $objPeticion                     = $this->get('request');
        $strSerie                     = strtoupper($objPeticion->get('serieCpe'));
        $strCadenaRespuesta      = "";
        $arrayPeEncontrados = array();
        try 
        {
            /* @var $objBuscarNaf \telconet\tecnicoBundle\Service\InfoServicioTecnico */
            $objBuscarNaf  = $this->get('tecnico.InfoServicioTecnico');
            //consultamos la subred en la tabla infosubred
            $arrayRespuesta = $objBuscarNaf->obtenerInterfaceporserie($strSerie,$strEmpresaCod);
            $strStatus=$arrayRespuesta[0]['status'];
            if($strStatus =='OK')
            {
                $strMensaje=$arrayRespuesta[0]['mensaje'];
                foreach ( $strMensaje as $value) 
                {
                    array_push($arrayPeEncontrados , array('id'    => $value['idTipoInterface'],
                    'valor' => $value['nombreTipoInterface']));
                }
            }
            else
            {
                $strStatus             = "ERROR";
                $strMensaje            = "Esta serie no contiene Interfaces";
                $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
                return $objRespuesta->setContent($strCadenaRespuesta);
            }
        } catch (Exception $objEx) 
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.buscarInterfaceporserieAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                      );
            $strStatus             = "ERROR";
            $strMensaje            = "Ocurrio un error al consultar las interface, favor notifique a sistemas.";
            $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
            return $objRespuesta->setContent($strCadenaRespuesta);
        }
        $objJson            = json_encode($arrayPeEncontrados);
        $objJsonResultado          = '{"encontrados":'.$objJson.'}';
        
        $objRespuesta->setContent($objJsonResultado);
        return $objRespuesta;
    }
    /**
     * Funcion para comprobar la existencia de los login ingresados
     * 
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.0 27-12-2022
     */
    public function buscarLoginMonitoreoAction()
    {
        $objRespuesta               = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $objPeticion                     = $this->get('request');
        $strLoginMonitoreo                    = strtolower($objPeticion->get('loginMonitoreo'));
        $intIdServicio                = $objPeticion->get('idServicio');
        $serviceUtil                  = $this->get('schema.Util');
        $strCadenaRespuesta      = "";
        try
        {
            /**
             * VALIDAMOS QUE EL LOGIN DE MONITOREO EXISTA EN LA TABLA INFO PUNTO EN EL CAMPO LOGIN
             */
            
           //consultamos la subred en la tabla infosubred
           //Se obtiene la informacion tecnica anterior 
           $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoPunto')
                            ->findOneBy(["login" => $strLoginMonitoreo,"estado"=>"Activo"]);
           if(is_object($objInfoServicioTecnico))
           {
            $strStatus         = "OK";
            $strMensaje        = "OK,".$objInfoServicioTecnico->getLogin();
            $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
           }
           else
           {
            $strStatus         = "ERROR";
            $strMensaje        = "Error el login proporcionado no se encuentra registrado o no esta activo";
            $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
           }
          
          
            
           
          

        }
        catch (Exception $objEx) 
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.buscarLoginMonitoreoAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $objPeticion->getClientIp()
                                     );
            $strStatus             = "ERROR";
            $strMensaje            = "Ocurrio un error al buscar los login, favor notifique a sistemas.";
            $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
            return $objRespuesta->setContent($strCadenaRespuesta);
        }
        
  
  
        return $objRespuesta->setContent($strCadenaRespuesta);
    }


    /**
     * Funcion para obtener la serie del equipo asociada al servicio que se envia y obtener 
     * los datos de ese equipo validando si es equipo de cliente o de telconet
     * 
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.0 03-01-2023
     */
    public function buscarSerieEquipoAction()
    {
      

        $objResponse            = new JsonResponse();
        $objRequest             = $this->getRequest();
        $strIpUserSession       = $objRequest->getClientIp();
        $objSession             = $objRequest->getSession();
        $intIdServicio          = $objRequest->get('idServicio');
        $strModelo                 = $objRequest->get('modelo');
        $strBandera                = $objRequest->get('bandera');
        $strUsrCreacion         = $objSession->get('user');
        $intProductoId              = $objRequest->get('idProducto');
        $strTimeActual         = new \DateTime('now');
        $serviceUtil            = $this->get('schema.Util');
        $emComercial            = $this->get('doctrine')->getManager('telconet');
        $emGeneral              = $this->get('doctrine')->getManager('telconet_general');
        $serviceTecnico      = $this->get('tecnico.InfoServicioTecnico');
        $emInfraestructura            = $this->getDoctrine()->getManager("telconet_infraestructura");
        $strStatus              = "";
        $strMensaje             = "";
        $objBuscarNaf  = $this->get('tecnico.InfoServicioTecnico');
        try
        {
           
       
            /** verificar si el equipo es de telconet o del cliente*/

        $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                ->findOneBy(['id'=>$intIdServicio,
                                            'productoId'=>$intProductoId
                                            ]);
    $emComercial2            = $this->get('doctrine')->getManager('telconet');
    $objProducto=$emComercial2->getRepository('schemaBundle:AdmiProducto')->findOneBy(['id'=>$intProductoId]);

    $objServicioProductoCarac= $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio, 
    "ES_BACKUP", 
    $objProducto);
    if($objServicioProductoCarac!=null)
    {
        $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
        ->findOneByServicioId($objServicioProductoCarac->getValor());
        $boolBanderaIngreso=false;

        if($boolBanderaIngreso)
        {

            $objInfoServicio2 = $emComercial->getRepository('schemaBundle:InfoServicio')->findOneBy(['id'=>$objServicioProductoCarac->getValor()
            ]);
            $objServicioProductoCarac= $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio2, 
                                                                                                 "SERIE_EQUIPO", 
                                                                                                 $objProducto);
            $objServicioProductoCaracInterface= $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio2, 
                                                                                                 "INTERFACE_EQUIPO", 
                                                                                                 $objProducto);
            $strInterface=$emInfraestructura->getRepository('schemaBundle:AdmiTipoInterface')
                            ->findOneBy(['id'=>$objServicioProductoCaracInterface->getValor()]);
           
            if(is_object($objServicioProductoCarac))
            {
             $arrayRespuesta = $objBuscarNaf->buscarElementoEnNaf($objServicioProductoCarac->getValor(),"",$strModelo, $strBandera);
             $strStatus         = "OK";
             $strMensaje        = $objServicioProductoCarac->getValor().",".$strInterface
                                    ->getNombreTipoInterface().",".$arrayRespuesta[0]['mensaje'];
             $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
            }
            else
            {
             $strStatus         = "ERROR";
             $strMensaje        = "Error al consultar la serie de equipo";
             $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
            }
        }
        else
        {
            $objInfoServicio3 = $emComercial->getRepository('schemaBundle:InfoServicio')->findOneBy(['id'=>$objServicioProductoCarac->getValor()
        ]);
            $objServicioProductoCaracSerie= $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio3, 
                                                                                                 "SERIE_EQUIPO", 
                                                                                                 $objProducto);
            $objServicioProductoCaracInterface= $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio3, 
                                                                                                  "INTERFACE_EQUIPO", 
                                                                                                   $objProducto);
             $objServicioProductoCaracModelo= $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio3, 
                                                                                                 "MODELO_EQUIPO", 
                                                                                                 $objProducto);

             $objServicioProductoCaracDescripcion = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio3, 
                                                                                                 "DESCRIPCION_EQUIPO", 
                                                                                                 $objProducto);
               $objServicioProductoCaracPropiedad= $serviceTecnico
               ->getServicioProductoCaracteristica($objInfoServicio3, 
                "PROPIETARIO DEL EQUIPO", 
                $objProducto);                                                                                    
           
              $objServicioProductoCaracMac = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio3, 
                                                                                         "MAC",  $objProducto);
               $strInterface="";    
                if($objServicioProductoCaracInterface!=null)
                   {
                       if(is_numeric($objServicioProductoCaracInterface->getValor()))
                       {
                        $strInterface=$emInfraestructura->getRepository('schemaBundle:AdmiTipoInterface')
                        ->findOneBy(['id'=>$objServicioProductoCaracInterface->getValor()]);
                       }
                       else
                       {
                        $strInterface=$objServicioProductoCaracInterface->getValor();
                       }
                   }                                                                             
                                                                                            
               
            
                if(is_object($objServicioProductoCarac))
                    {
                    $strStatus         = "OK";
                    $strMensaje        = 
                    $objServicioProductoCaracSerie->getValor()
                    .",".$strInterface.",".
                    $objServicioProductoCaracDescripcion->getValor()
                    .",".$objServicioProductoCaracMac->getValor()
                    .",".$objServicioProductoCaracModelo->getValor()
                    .",".$objServicioProductoCaracPropiedad->getValor()
                    .",".$objServicioProductoCarac->getValor();
                    $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
                    }
                else
                    {
                    $strStatus         = "ERROR";
                    $strMensaje        = "Error al consultar la serie de equipo";
                    $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
                    }
        }


    }
  else
  {
    $strStatus         = "ERROR";
    $strMensaje        = "No se encuentra el registro de datos necesario  para el backup";
    $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
  }      

        }
        catch (Exception $objEx) 
        {
            $serviceUtil->insertError('Telcos+', 
                                      'InfoServicioController.buscarSerieEquipoAction', 
                                      $objEx->getMessage(), 
                                      $objSession->get('user'), 
                                      $peticion->getClientIp()
                                     );
            $strStatus             = "ERROR";
            $strMensaje            = "Ocurrio un error al buscar la serie, favor notifique a sistemas.";
            $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
            return $objResponse->setContent($strCadenaRespuesta);
        }
        
  
  
        return $objResponse->setContent($strCadenaRespuesta);
    }
    /**
     *
     * Documentación para el método 'ajaxGetHorasSoporteAction'.
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.1 01-09-2022 Se recibe valores del js para enviarlos como un array al llamado del Procedimiento
     *                         El repository ConsultaPaqueteHorasSoporte contiene el llamado al P_CONSULTAR_TODO_INFO_PAQUETE 
     *                         que realiza la consulta de todo un paquete de horas de soporte para presentar en el grid tecnico.
    */
    public function ajaxGetHorasSoporteAction()
    {   
        $objRequest                 = $this->get('request');
        $emSoporte                  = $this->get('doctrine')->getManager('telconet_soporte');
        $emComercial                = $this->get('doctrine')->getManager('telconet');
        $emGeneral                  = $this->get('doctrine')->getManager('telconet_general');
        $intIdEmpresa               = 10;
        $strStatus                  = 'ERROR';
        $strMensaje                 = '';
       try
        {
            $objParametroDetValProd =   $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne("VALIDA_PRODUCTO_PAQUETE_HORAS_SOPORTE", //nombre parametro cab
                            "SOPORTE", "", 
                            "VALORES QUE AYUDAN A IDENTIFICAR QUE PRODUCTO ES PARA LA MUESTRA DE OPCIONES EN LA VISTA", //descripcion det
                            "", "", "", "", "", $intIdEmpresa
                        );
            $strValorProductoPaqHoras             = $objParametroDetValProd['valor1'];
            $strValorProductoPaqHorasRec          = $objParametroDetValProd['valor2'];

            $intServicioPaqueteId   = $objRequest->get('servicio_paquete_id')?  $objRequest->get('servicio_paquete_id'):'';
            $objProducto            = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                  ->findOneBy(array("descripcionProducto" => $strValorProductoPaqHoras));

            $objServicio            = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->findOneBy(array("id"    => $intServicioPaqueteId)); //2526052
            
            // Para saber si es replica o no.
            $objServicioReplica     = $emComercial->getRepository('schemaBundle:InfoServicioHistorial')
                                                    ->findOneBy(array("servicioId" => $intServicioPaqueteId,
                                                                      "accion"     => "replicaPaqueteHoras"));
                                                                      
            if((is_object($objProducto)) )
            {
                $intIdProducto     = $objProducto->getId();
                $intIdPunto        = $objServicio->getPuntoId()->getId();
                $strLoginPunto     = $objServicio->getPuntoId()->getLogin();

                $objPrimerServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->findOneBy(array("puntoId"    => $intIdPunto,
                                                            "productoId"      => $intIdProducto
                                                        ), array("feCreacion"   => 'ASC'));
                $intPrimerServicioId        = $objPrimerServicio->getId();

                if($objServicioReplica)
                {
                    $objInfoPaqSopServ  = $emSoporte->getRepository('schemaBundle:InfoPaqueteSoporteServ')
                                                        ->soporteServPorLogin(array("loginPuntoSoporte"  => $strLoginPunto)); 

                    $intPaqueteSoporteCabId   = $objInfoPaqSopServ[0]['paqueteSoporteCabId'];
                    $strLoginPuntoSoporte     = $objInfoPaqSopServ[0]['loginPuntoSoporte'];

                    $objInfoPaqueteSoporteCab = $emSoporte->getRepository('schemaBundle:InfoPaqueteSoporteCab')
                                                    ->soporteCabPorCabId(array("idPaqueteSoporteCab"    => $intPaqueteSoporteCabId));
                    $intPrimerServicioId   = $objInfoPaqueteSoporteCab[0]['servicioId'];
                }

                    $strUuIdPaquete             = $objRequest->get('uuid_paquete')?  $objRequest->get('uuid_paquete'):'';
                    $intPersonaEmpresaRolId     = $objRequest->get('persona_empresa_rol_id')?  $objRequest->get('persona_empresa_rol_id'):'';
                    
                    //Armando el array para enviar al PR
                    $arrayRequestDatos          = [ array(
                                                        'uuid_paquete'            => $strUuIdPaquete,
                                                        'persona_empresa_rol_id'  => intval($intPersonaEmpresaRolId),
                                                        'servicio_paquete_id'     => intval($intPrimerServicioId)
                                                        )
                                                ];
                                
                    $objGestionPaquete = $emSoporte->getRepository('schemaBundle:GestionPaqueteSoporte')
                                                ->ConsultaPaqueteHorasSoporte($arrayRequestDatos);
            }    
                
            
        }      
        catch(\Exception $e)
        {
            $strMensaje   = "Error al consultar paquetes de horas de soporte.";
            $strStatus    = "500";  

            $this->serviceUtil->insertError('Telcos+',
                                            'InfoServicioControler.ajaxGetHorasSoporteAction',
                                            'Error InfoServicioControler.ajaxGetHorasSoporteAction:'.$e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion); 
            $arrayDatosSoporteExtraer[] = array(
                                                'mensaje'       =>  $strMensaje,
                                                'status'        =>  $strStatus
                                                );                              
        }
        
        return $objGestionPaquete;
    }

     /**
     *
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.1 01-11-2022  Documentación para el método 'ajaxGetServiciosSoporteAction'.
     *                          Realiza la consulta por medio del repository a los servicios/productos 
     *                          asociados a un paquete de soporte, enviandole servicio_id, punto_id, persona_empresa_rol_id
     * 
    */   
    public function ajaxGetServiciosSoporteAction()
    {
        $arrayRespuesta        = new Response();
        $arrayPeticion         = $this->get('request');
        $emComercial           = $this->get('doctrine')->getManager('telconet');
        $strUuIdPaquete        = $arrayPeticion->get('uuid_paquete')?$arrayPeticion->get('uuid_paquete'):'';
        $intEmpresaRolId       = $arrayPeticion->get('persona_empresa_rol_id')?$arrayPeticion->get('persona_empresa_rol_id'):'';
        $intServicioId         = $arrayPeticion->get('servicio_id')?$arrayPeticion->get('servicio_id'):'';
        try
        {
            $emSoporte         = $this->get('doctrine')->getManager('telconet_soporte');
            $objServicio            = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                  ->findOneBy(array("id"    => $intServicioId));
            $intIdPunto        = $objServicio->getPuntoId()->getId();
            $arrayTmpParametros = array('uuid_paquete' => $strUuIdPaquete
                            , 'persona_empresa_rol_id' => $intEmpresaRolId
                            , 'id_punto'            => $intIdPunto             );

            $objResult    = $emSoporte->getRepository('schemaBundle:InfoPaqueteSoporteServ')
                                        ->ajaxGetServiciosSoporte( $arrayTmpParametros );
        }
        catch(\Exception $e)
        {
                error_log("ERROR | FUNCION: ajaxGetServiciosSoporteAction | MODULO: TECNICO | MSGERROR:  " . $e->getMessage());
                $arrayRespuesta = json_encode(array('strResultado'  => "Error",
                                    'strMensaje'    => $e->getMessage()));
        }
        $arrayRespuesta->setContent(json_encode($objResult));
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para validar que una serie ingresada concuerde con el tipo de elemento y que exista
     * en Telcos y NAF.
     *
     * @author Geovanny Cudco <acudco@telconet.ec>
     * @version 1.0 16-03-2023
     *
     * @return Response $objRespuesta
     */
    public function validaNafTelcosAction()
    {
        $objRespuesta               = new JsonResponse();              
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();               
        $arrayParametros            = $objRequest->request->get('telconet_schemabundle_infoelementoracktype');
        $strTipoElemento            = $objRequest->get('tipo');
        $strSerieElemento           = strtoupper($objRequest->get('serieCpe'));
        $strEstado                  = strtoupper($objRequest->get('estado'));
        $serviceUtil                = $this->get('schema.Util');       
        $serviceInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        
        $arrayParametros['strTipoElemento']        = $strTipoElemento;
        $arrayParametros['strSerieElemento']       = $strSerieElemento;
        $arrayParametros['strEstado']              = $strEstado;
        
        $arrayRespuesta = $serviceInfoServicioTecnico->validarNafTelcos($arrayParametros);        

        if(!$arrayRespuesta)
        {
            $strStatus     = 'Error';
            $strMensaje    = 'Error inesperado del sistema';            
        }
        else
        {
            $strStatus         = $arrayRespuesta[0]['status'];
            $strMensaje        = $arrayRespuesta[0]['mensaje'];
        }
                    
        $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
        return $objRespuesta->setContent($strCadenaRespuesta);
    }

    /**
     * Funcion que permite generar automaticamente el nombre de un elemento a ingresar en el nodo.
     *
     * @author Geovanny Cudco <acudco@telconet.ec>
     * @version 1.0 17-03-2023
     *
     * @return Response $objRespuesta
     */
    public function generarNombreAutomaticoAction()
    {
        $objRespuesta               = new JsonResponse();              
        $objRequest                 = $this->get('request');
        $objSession                 = $objRequest->getSession();               
        $arrayParametros            = $objRequest->request->get('telconet_schemabundle_infoelementoracktype');
        $serviceUtil                = $this->get('schema.Util');       
        $serviceInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strTipoElemento            = $objRequest->get('strTipoElemento');        
        $intIdNodoContenedor        = $objRequest->get('intIdNodoContenedor');
        $strClaseElemento           = $objRequest->get('strClase');
        $strContenedor              = $objRequest->get('strContenedor');        
        $emComercial                = $this->get('doctrine')->getManager('telconet');
            
        $arrayParametros['strTipoElemento']=$strTipoElemento;
        $arrayParametros['intIdNodoContenedor']=$intIdNodoContenedor;
        $arrayParametros['strClaseElemento']=$strClaseElemento;        
        $arrayParametros['strContenedor']=$strContenedor;

        $arrayRespuesta = $serviceInfoServicioTecnico->generarNombreAutomatico($arrayParametros);        

        if(!$arrayRespuesta)
        {
            $strStatus     = 'Error';
            $strMensaje    = 'Error inesperado del sistema';            
        }
        else
        {
            $strStatus         = $arrayRespuesta[0]['status'];
            $strMensaje        = $arrayRespuesta[0]['mensaje'];
        }

        $strCadenaRespuesta = $strStatus.'|'.$strMensaje;
        return $objRespuesta->setContent($strCadenaRespuesta);
    }

    /**
     * Documentacion para el metodo 'getElementosSafeEntryAction'.
     *
     * Metodo utilizado para obtener los elementos de los productos SAFE ENTRY
     *
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.0 09-12-2022 - Version inicial
     */
    public function getElementosSafeEntryAction()
    {
        $objRespuesta  = new Response();
        $objRespuesta->headers->set('Content-Type', 'text/json');
        $objPeticion   = $this->get('request');
        $objSession    = $objPeticion->getSession();
        $serviceUtil   = $this->get('schema.Util');
        $emComercial   = $this->get('doctrine')->getManager('telconet');
        $emGeneral     = $this->get('doctrine')->getManager('telconet_general');
        $intIdEmpresa  = $objSession->get('idEmpresa');
        $intIdServicio = $objPeticion->get('idServicio');
        try
        {
            //obtener servicio
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                          ->findOneById($intIdServicio);
            if(!isset($objServicio))
            {
                throw new \Exception('No se encontró el servicio, por favor notificar a Sistemas.');
            }
            $arrayElementosSafe = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('CONFIG ELEMENTOS SAFE ENTRY',
                                                    'TECNICO',
                                                    '',
                                                    'ELEMENTOS_SAFE_ENTRY',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    $intIdEmpresa,
                                                    'valor7');
            //Se formatean los datos para la respuesta
            $arrayDataResultado = array();

            foreach($arrayElementosSafe as $arrayElementos)
            {
                $strElementoGrupo = $arrayElementos['valor4'];
                $arrayDataResultado[$strElementoGrupo][] = array(
                    'title' => ucwords(strtolower($arrayElementos['valor2'])),
                    'tipos' => json_decode($arrayElementos['valor3']),
                    'key'   => $arrayElementos['valor5'],
                    'mac'   => $arrayElementos['valor6'] == 'S'
                );
            }
            //setear json
            $objJson = json_encode(['status' => 'OK', 'mensaje' => 'OK', 'encontrados'=>$arrayDataResultado]);
        }
        catch(\Exception $e)
        {
            $strError = 'No se pudo obtener los elementos del producto SAFE ENTRY. Por favor notifique a Sistemas';
            $objJson  = json_encode(['status' => 'ERROR', 'mensaje' => $strError, 'encontrados' => []]);
            $serviceUtil->insertError('TELCOS',
                                      'InfoServicioController.getElementosSafeEntryAction',
                                      $e->getMessage(),
                                      $objPeticion->getSession()->get('user'),
                                      $objPeticion->getClientIp()
                                    );
        }
        $objRespuesta->setContent($objJson);
        return $objRespuesta;
    }
}
