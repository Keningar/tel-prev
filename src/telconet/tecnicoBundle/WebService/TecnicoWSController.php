<?php

namespace telconet\tecnicoBundle\WebService;

use telconet\schemaBundle\DependencyInjection\BaseWSController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Finder\Finder;
use telconet\schemaBundle\Entity\InfoDetalleElemento;
use telconet\schemaBundle\Entity\InfoHistorialElemento;
use telconet\schemaBundle\Entity\InfoServicioHistorial;
use telconet\schemaBundle\Entity\InfoPersonaEmpresaRolCarac;
use telconet\soporteBundle\Service\SoporteService;
use telconet\schemaBundle\Entity\InfoDetalleSolHist;
use telconet\schemaBundle\Entity\InfoDetalleSolicitud;

use telconet\schemaBundle\Entity\AdmiCuadrillaHistorial;
use telconet\schemaBundle\Entity\InfoElementoInstalacion;
use telconet\schemaBundle\Entity\InfoServicioProdCaract;
use telconet\schemaBundle\Entity\InfoTareaSeguimiento;



/**
 * Clase que contiene las funciones necesarias para el funcionamiento del
 * Mobil Tecnico.
 *
 * @author Francisco Adum <fadum@telconet.ec>
 * @version 1.0 2-06-2015
 *
 */
class TecnicoWSController extends BaseWSController
{
    /**
     * Funcion que sirve para procesar las opciones que vienen desde el mobil
     *
     * @author John Vera <javera@telconet.ec>
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 31/03/2015
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 30/09/2016      Se agrega proceso que es utilizado para recuperar información de clientes
     *                              mediante los parametros de información enviados en la peticion del ws
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.2 10/11/2016      Se publican nuevos metodos : getRegistrosEmpleado y putRegistroEmpleado
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 18/01/2017      Se agregan nuevas funciones para el procesamiento de retiros de equipos desde app movil
     * @since 1.2
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 25/05/2018 - Switcheamos la generación de token, si es operativo o es tecnico.
     * @since 1.3
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.5 24/07/2018 -    Se agrega proceso que se usa para finalizar la solicitud y todas las tareas asociadas a dicha solicitud.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 19/04/2018 - Se agrega nueva opción para confirmar servicios telcograph
     * @since 1.5
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.7 07/08/2018 -    Se agrega proceso que obtiene y guarda las características, tipo de transacción, empresa, login, usuario
     * del NAF de custiodo para el control de la fibra óptica.
     * @since 1.6
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.8 25/09/2018 -    Se agrega proceso que cambia el estado a la georutareferencial de la minimanga en el punto.
     * @since 1.7
        *
        * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.9 05/12/2018 -    Se agrega nueva opción getActivosCustodio
     * @since 1.8
     *
     * @author John Vera <javera@telconet.ec>
     * @version 2.0 18/12/2018 se aumenta la activación de línea telefónica de netvoice para megadatos
     * @since 1.9
     *
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 2.1 13/06/2019 Se agrega nueva opción getCategoriasFinTarea
     * @since 2.0
     *
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 2.2 19/06/2019 se aumenta nuevos atributos en la respuesta de la opción informacionCliente,
     *                          se agrega nueva opción 'cambioDePlan', para realizar el upgrade de plan
     *                          (cambio de velocidad) de un cliente.
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 2.3 19/02/2019 - Se adiciona el método putIngresarIncidencia,
     *                             putNotificarClienteEcucert y getDatosProcesadosPorTicket,
     *                             encargado de guardar, notificar y darle seguimiento al procesamiento
     *                             de las incidencias enviadas por parte de ECUCERT.
     * @since 2.2
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.4 18/07/2019 Se agrega nueva opción 'putActualizarVlan', la cual va servir para el proyecto de segmentación de vlans que se va
     *                         realizar para Nedetel.
     * @since 2.3
     *
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 2.5 28/10/2019 Se agregan nuevas opciones 'getCategoriasFotosPorComparar',
     * 'putComparaValidaImagen', 'getFotosPorTareaUsuarioAntesDespues', el cual valida una imagen con la ideal.
     * @since 2.4
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 2.6 06/03/2020
     *
     * Se agrega lógica para obtener los códigos y mensajes de error del Token Security y retornar al Móvil
     *
     * @author Néstor Naula López <nnaulal@telconet.ec>
     * @version 2.7 03/05/2020 - Se agrega la opción 'getDatosTicketECUCERT' para obtener los datos
     *                           del ticket de ECUCERT en telcos.
     * @since 2.6
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 2.8 02-06-2020 - Se modifica código para crear nueva estructura de archivos.
     * @since 2.7
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.9 07/04/2020 - Se agrega el op: consultarFactibilidadXServicio para consultar la factibilidad desde el CRM.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 3.0 20/06/2020 Se agrega nueva opcion 'actualizarCoordenadasFactibilidadCliente',
     * el cual cambia las coordenadas del cliente y le da una nueva factibilidad.
     * @since 2.9
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 3.1 15/07/2020 Se agrega nueva opcion 'putVerificarGuardarSerieElemento',
     * para validar equipos en instalaciones TN.
     * @since 3.0
     *
     * @author Marlon Plúas <mpluas@telconet.ec>
     * @version 3.2 24/08/2020 Se agrega nueva opcion 'contratoVehiculo',
     * para generar un contrato de tipo VEHICULO.
     * @since 3.1
     *
     * @author kevin ortiz <kcortiz@telconet.ec>
     * @version 3.3 15/10/2020 Se agrega nueva opcion 'consultaSuscriber',
     * para consulta de suscriber id de servicios de kaspersky.
     * @since 3.2
     *
     * @author kevin ortiz <kcortiz@telconet.ec>
     * @version 3.4 22/10/2020 Se agrega nueva opcion 'activarsubscriber',
     * para activar el suscriber id de servicios de kaspersky.
     * @since 3.3
     *
     * @param $request
     *
     * @author Carlos Caguana <ccaguana@telconet.ec>
     * @version 3.3 09/11/2020 Se agrega la validación de tareas
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.5 03-05-2021 - Se agregan activarZeroTouch y putPruebasConectividad para flujo ZeroTouch.
     * 
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 3.6 17-08-2021 - Se agrega op informacionClienteAcs que retornará información  que será usada en la nueva plataforma unificada ACS.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.7 27-05-2021 - Se agrega la nueva proceso 'getEquiposAsignados' para obtener los equipos asignados a un técnico.
     *                         - Se agrega el nuevo proceso 'retirarElementoPerteneceNodo' para realizar el retiro de un elemento
     *                           que pertenece a un nodo.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 3.8 15/07/2020 Se agrega nueva opcion 'getDispositivosClienteNodo',
     * para obtener equipos del cliente en el nodo.
     * @since 3.7
     *
     * @author Antonio Ayala <ppin@telconet.ec>
     * @version 3.9 31-08-2021 - Se agrega opción actualizaFechaExpiracionSecureCpe para actualizar fecha de expiración.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.10 15-11-2021 - Se agrega la nueva proceso 'getEquiposAsignados' para obtener los equipos asignados a un técnico.
     *                         - Se agrega el nuevo proceso 'retirarElementoPerteneceNodo' para realizar el retiro de un elemento
     *                           que pertenece a un nodo.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.0 18-11-2021 - Se agrega opción putValidarElementoServicioGpon para validar modelo del elemento
     *                           y obtener puertos del ont o switch poe para activar el servicio.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.1 05-01-2022 - Se agrega opción getElementoClientePorServicioGpon para obtener la información de los elementos
     *                           para una migración a switch poe o cambio equipo para servicios GPON_MPLS.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.2 30-06-2022 - Se agrega opción procesarActivarTelcographTn para creación del monitoreo del Telcograph
     *                           para los clientes.
     *
     * @author Javier Hidalgo <jihidalgo@telconet.ec>
     * @version 4.3 26-07-2022 - Se agrega opción callJarReactivacion para envio de servicios TTCO en corte y reactivarlos.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.4 18-10-2022 - Se agrega opción getEquiposPorProducto para obtener los tipos de elementos
     *                           y los elementos asignado al tecnico por producto.
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 4.3 26-07-2022 - Se agrega opción consultarPotenciaActivacion para consultar potencia antes de activar servicios Fttx y MD.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.5 04-11-2022 - Se modifica la opción putCambioEquipoTNGpon a putCambioEquipoTN, para los cambio de equipos TN.
     *
     */
    public function procesarAction(Request $request)
    {
        $arrayData      = json_decode($request->getContent(),true);
        $response       = null;
        $token          = "";
        $objResponse    = new Response();
        $strOp          = $arrayData['op'];
        $emGeneral      = $this->getDoctrine()->getManager('telconet_general');
        $serviceUtil    = $this->get('schema.Util');


        //Carpeta segun el application que venga en el web service
        $strFolderApplication = "";

        //obtener nombre del source para saber que viene de TMO
        $strNameSourceTMO      = "";
        $arrayNameSourceTMO    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
        ->getOne('PARAMETROS_GENERALES_MOVIL',
                 '',
                 '',
                 '',
                 'NOMBRE_SOURCE_MOVIL',
                 '',
                 '',
                 ''
                 );

        if(is_array($arrayNameSourceTMO))
        {
            $strNameSourceTMO = !empty($arrayNameSourceTMO['valor2']) ? $arrayNameSourceTMO['valor2'] : "ec.telconet.mobile.telcos.operaciones";
        }

        $arrayParametrosDetNFS  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('BANDERA_NFS',
                                                    '',
                                                    '',
                                                    '',
                                                    'S',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    '');
        if(isset($arrayParametrosDetNFS) && $arrayParametrosDetNFS['valor1'] === 'S')
        {
            $arrayData['bandNfs'] = true;
        }

        if($arrayData['source'])
        {
            $strFolderApplication = $serviceUtil->getValueByStructure(array('strStructure'  => 'PARAMETROS_ESTRUCTURA_RUTAS_TELCOS',
                                                                            'strKey'        => $arrayData['source']['name']));

            if($arrayData['source']['name'] == $strNameSourceTMO)
            {
                $arrayParametroToken = array('token'        => $arrayData['token'],
                                             'source'       => $arrayData['source'],
                                             'user'         => $arrayData['user']);

                $arrayReturnToken   = $this->validateGenerateTokenMobile($arrayParametroToken);

                
                if($arrayReturnToken['status'] != 200)
                {
                    return new Response(json_encode(array(
                                                            'status'    => $arrayReturnToken['status'],
                                                            'mensaje'   => $arrayReturnToken['mensaje']
                                                        )
                                                    )
                                        );
                }
                 
                
                $token = $arrayReturnToken['token'];
            }
            else
            {
                $token = $this->validateGenerateToken($arrayData['token'], $arrayData['source'], $arrayData['user']);
                                
                if(!$token)
                {
                    return new Response(json_encode(array(
                            'status' => 403,
                            'mensaje' => "token invalido"
                            )
                        )
                    );
                }                
                
            }
        }

        if($strOp)
        {

            $boolEstadoTareaActual=false;
            $strIdDetalle=$arrayData['data']['idDetalle'];
            $serviceUtils  = $this->get('schema.Util');

         ///Se verifica que llegue el parametro para proceder a validar el estado de la tarea
            if(isset($strIdDetalle))
            {
              $arrayRespuesta=$serviceUtils->estadoTarea($arrayData);
              $boolEstadoTareaActual =  $arrayRespuesta['estadoTarea'];
              $response['valor']= $arrayRespuesta['valorTarea'];
              $response['estado']= $arrayRespuesta['estadoTarea'];

            }


            if($boolEstadoTareaActual)
            {
            $response['mensaje']= "La tarea se encuentra ".$arrayRespuesta['valorTarea'].
            ",por favor verificarlo con su coordinador o jefe departamental";
            $response['status']= 400;
            }else
            {
            switch($strOp)
            {
                /********OPCIONES DE GET*************/
                case 'getServiciosPorActivador':
                    $response = $this->getServiciosPorActivador($arrayData);
                    break;
                case 'getEquiposAsignados':
                    $response = $this->getEquiposAsignados($arrayData);
                    break;
                case 'getElementosAdicionalesClienteNodo':
                    $response = $this->getElementosAdicionalesClienteNodo($arrayData);
                    break;
                case 'retirarElementoPerteneceNodo':
                    $response = $this->retirarElementoPerteneceNodo($arrayData);
                    break;
                case 'getHistorialServicio':
                    $response = $this->getHistorialServicio($arrayData);
                    break;
                case 'verificarElementoCliente':
                    $response = $this->verificarElementoCliente($arrayData);
                    break;
                case 'getInterfacesDisponiblesPorElemento':
                    $response = $this->getInterfacesDisponiblesPorElemento($arrayData);
                    break;
                case 'getElementosPorCoordenadas':
                    $response = $this->getElementosPorCoordenadas($arrayData);
                    break;
                case 'getCatalogosActivacion':
                    $response = $this->getCatalogosActivacion($arrayData);
                    break;
                case 'getCatalogoIncidenciasElementos':
                    $response = $this->getCatalogoIncidenciasElementos($arrayData);
                    break;
                case 'getEncuestaServicio':
                    $response = $this->getEncuestaServicio($arrayData);
                    break;
                case 'mostrarSubscriberOlt':
                    $response = $this->mostrarSuscribersOltTellion($arrayData);
                    break;
                case 'mostrarTablaMacsConectadas':
                    $response = $this->mostrarTablaMacsConectadasTellion($arrayData);
                    break;
                case 'getParametrosIniciales':
                    $response = $this->getParametrosIniciales($arrayData);
                    break;
                case 'getDatosActaDeRecepcion':
                    $response = $this->getDatosActaDeRecepcion($arrayData);
                    break;
                case 'getCatalogoActaEntrega':
                    $response = $this->getCatalogoActaEntrega($arrayData);
                    break;
                case 'getDataTecnica':
                    $response = $this->getDataTecnica($arrayData);
                    break;
                case 'getIpsDataTecnica':
                    $response = $this->getIpsDataTecnica($arrayData);
                    break;
                case 'getConfiguracionDataTecnica':
                    $response = $this->getConfiguracionDataTecnica($arrayData);
                    break;
                case 'getElementoConectorDisponible':
                    $response = $this->getElementoConectorDisponible($arrayData);
                    break;
                case 'getIpsRecursosRed':
                    $response = $this->getIpsRecursosRed($arrayData);
                    break;
                case 'getMaterialesInstalacion':
                    $response = $this->getMaterialesInstalacion($arrayData);
                    break;
                case 'getRutaGeorreferencialFibra':
                    $response = $this->getRutaGeorreferencialFibra($arrayData);
                    break;
                case 'informacionCliente':
                    $response = $this->getInformacionCliente($arrayData);
                    break;
                case 'informacionClienteAcs':
                    $response = $this->getInformacionClienteAcs($arrayData);
                    break;
                case 'loginesPorOlt':
                    $response = $this->getLoginesPorOlt($arrayData);
                    break;
                case 'getRegistrosEmpleado':
                    $response = $this->getRegistrosEmpleado($arrayData);
                    break;
                case 'getRetirosPorEmpleado':
                    $response = $this->getRetirosPorEmpleado($arrayData);
                    break;
                case 'getValidaCpeNaf':
                    $response = $this->getValidaCpeNaf($arrayData);
                    break;
                case 'consultaSuscriber':
                        $response = $this->consultaSuscriber($arrayData);
                    break;
                case 'finalizaRetiroEquipo':
                    if(empty($strFolderApplication))
                    {
                        $strFolderApplication = $serviceUtil->getValueByStructure(array('strStructure'  => 'PARAMETROS_ESTRUCTURA_RUTAS_TELCOS',
                                                                                        'strKey'        => $strNameSourceTMO));
                    }
                    $arrayData['strFolderApplication'] = $strFolderApplication;
                    $response = $this->finalizaRetiroEquipo($arrayData);
                    break;
                case 'getMaterialesNaf':
                    $response = $this->getMaterialesNaf($arrayData);
                    break;
                case 'getCoordenadasCajaPorServicio':
                    $response = $this->getCoordenadasCajaPorServicio($arrayData);
                    break;
				case 'getActivosCustodio':
                    $response = $this->getActivosCustodio($arrayData);
                    break;
                case 'getCategoriasFinTarea':
                    $response = $this->getCategoriasFinTarea($arrayData);
                    break;
                case 'cambioDePlan':
                    $response = $this->cambioDePlan($arrayData);
                    break;
                case 'getDatosProcesadosPorTicket':
                    $response = $this->getDatosProcesadosPorTicket($arrayData);
                    break;
                case 'getCalidadInstalacion':
                    $response = $this->getCalidadInstalacion($arrayData);
                    break;
                case 'getEtiquetasFotos':
                    $response = $this->getEtiquetasFotos($arrayData);
                    break;
                case 'getCuadrillasFiscalizadas':
                    $response = $this->getCuadrillasFiscalizadas($arrayData);
                    break;
                case 'getFactibilidadXServicio':
                    $response = $this->consultarFactibilidadXServicio($arrayData);
                    break;
                case 'getDocumentosCuadrillasFiscalizadas':
                    $response = $this->getDocumentosCuadrillasFiscalizadas($arrayData);
                    break;
                case 'getCategoriasFotosPorComparar':
                    $response = $this->getCategoriasFotosPorComparar($arrayData);
                    break;
                case 'getInfoFotoValidada':
                    $response = $this->getInfoFotoValidada($arrayData);
                    break;
                case 'getFotosPorTareaUsuarioAntesDespues':
                    $response = $this->getFotosPorTareaUsuarioAntesDespues($arrayData);
                    break;
                case 'getPotenciaDataTecnica':
                    $response = $this->getPotenciaDataTecnica($arrayData);
                    break;
                case 'getDatosTicketECUCERT':
                    $response = $this->getDatosTicketECUCERT($arrayData);
                    break;
                case 'getDispositivosClienteNodo':
                    $response = $this->getDispositivosClienteNodo($arrayData);
                    break;
                case 'getIpsControladoras':
                    $response = $this->getIpsControladoras($arrayData);
                    break;
                /********OPCIONES DE PUT*************/
                case 'putActualizarVlan':
                    $response = $this->putActualizarVlan($arrayData);
                    break;
                case 'putRegistroCuadrillaHistorial':
                    $response = $this->putRegistroCuadrillaHistorial($arrayData);
                    break;
                case 'putActivarServicio':
                    $response = $this->putActivarServicio($arrayData);
                    break;
                case 'putGrabarParametrosIniciales':
                    $response = $this->putGrabarParametrosIniciales($arrayData);
                    break;
                case 'putActaDeEntrega':
                    if(empty($strFolderApplication))
                    {
                        $strFolderApplication = $serviceUtil->getValueByStructure(array('strStructure'  => 'PARAMETROS_ESTRUCTURA_RUTAS_TELCOS',
                                                                                        'strKey'        => $strNameSourceTMO));
                    }
                    $arrayData['strFolderApplication'] = $strFolderApplication;
                    $response = $this->putActaEntrega($arrayData);
                    break;
                case 'putEncuestaServicio':
                    if(empty($strFolderApplication))
                    {
                        $strFolderApplication = $serviceUtil->getValueByStructure(array('strStructure'  => 'PARAMETROS_ESTRUCTURA_RUTAS_TELCOS',
                                                                                        'strKey'        => $strNameSourceTMO));
                    }
                    $arrayData['strFolderApplication'] = $strFolderApplication;
                    $response = $this->putEncuestaServicio($arrayData);
                    break;
                case 'putConfirmarServicio':
                    $response = $this->putConfirmarServicio($arrayData);
                    break;
                case 'putIncidenciasElemento':
                    $response = $this->putIncidenciasElemento($arrayData);
                    break;
                case 'putActivarProductoServicio':
                    $response = $this->putActivarProductoServicio($arrayData);
                    break;
                case 'putMigrarServicio':
                    $response = $this->putMigrarServicio($arrayData);
                    break;
                case 'putRecursosDeRed':
                    $response = $this->putRecursosDeRed($arrayData);
                    break;
                case 'putMaterialesInstalacion':
                    $response = $this->putMaterialesInstalacion($arrayData, json_decode($request->getContent()));
                    break;
                case 'putRutaGeorreferencialFibra':
                    $response = $this->putRutaGeorreferencialFibra($arrayData);
                    break;
                case 'finalizarAsignacionIpv4Publico':
                    $response = $this->finalizarAsignacionIpv4Publico($arrayData);
                    break;
                case 'cortarServicioOtrosMcAfee':
                    $response = $this->cortarServicioOtrosMcAfee($arrayData);
                    break;
                case 'reactivarServicioOtrosMcAfee':
                    $response = $this->reactivarServicioOtrosMcAfee($arrayData);
                    break;
                case 'cancelarServicioOtrosMcAfee':
                    $response = $this->cancelarServicioOtrosMcAfee($arrayData);
                    break;
                case 'putIncidenciaMonitoreo':
                    $response = $this->putIncidenciaMonitoreo($arrayData);
                    break;
                case 'putRegistroEmpleado':
                    $response = $this->putRegistroEmpleado($arrayData);
                    break;
                case 'getServicioPorId':
                    $response = $this->getServicioPorId($arrayData);
                    break;
                case 'getElementosPorPunto':
                    $response = $this->getElementosPorPunto($arrayData);
                    break;
                case 'cancelarYActivarServiciosTN':
                    $response = $this->cancelarYActivarServiciosTN($arrayData);
                    break;
                case 'putActaEPP':
                    if(empty($strFolderApplication))
                    {
                        $strFolderApplication = $serviceUtil->getValueByStructure(array('strStructure'  => 'PARAMETROS_ESTRUCTURA_RUTAS_TELCOS',
                                                                                        'strKey'        => $strNameSourceTMO));
                    }
                    $arrayData['strFolderApplication']  = $strFolderApplication;
                    $response = $this->putActaEPP($arrayData);
                    break;
                case 'putFinalizarSolicitudTareasPorServicioTraslado':
                    $response = $this->putFinalizarSolicitudTareasPorServicioTraslado($arrayData);
                    break;
                case 'putTareaDepartamentoConDocAdjunto':
                    if(empty($strFolderApplication))
                    {
                        $strFolderApplication = $serviceUtil->getValueByStructure(array('strStructure'  => 'PARAMETROS_ESTRUCTURA_RUTAS_TELCOS',
                                                                                        'strKey'        => $strNameSourceTMO));
                    }
                    $arrayData['strFolderApplication'] = $strFolderApplication;
                    $response = $this->putTareaDepartamentoDocadjunto($arrayData);
                    break;
                case 'putIngresoMaterialNaf':
                    $response = $this->putIngresoMaterialNaf($arrayData);
                    break;
                case 'confirmarMonitoreoTelcographTn':
                    $response = $this->confirmarMonitoreoTelcographTn($arrayData);
                    break;
                case 'procesarConfirmarTelcographTn':
                    $response = $this->procesarConfirmarTelcographTn($arrayData);
                    break;
                case 'putEstadoRutaGeoreferencialMinimanga':
                    $response = $this->putEstadoRutaGeoreferencialMinimanga($arrayData);
                    break;
                case 'activarMcAfeeEnPlan':
                    $response = $this->activarMcAfeeEnPlan($arrayData);
                    break;
                case 'activarNetvoiceMd':
                    $response = $this->activarNetvoiceMd($arrayData);
                    break;
                case 'putIngresarIncidencia':
                    $response = $this->putIngresarIncidencia($arrayData);
                    break;
                case 'putNotificarClienteEcucert':
                    $response = $this->putNotificarClienteEcucert($arrayData);
                    break;
                case 'getParametrosOperaciones':
                    $response = $this->getParametrosOperaciones($arrayData);
                    break;
                case 'getPermisoKml':
                    $response = $this->getPermisosKml($arrayData);
                    break;
                case 'getParametrosGeneralesMovil':
                    $response = $this->getParametrosGeneralesMovil($arrayData);
                    break;
                case 'putComparaValidaImagen':
                    if(empty($strFolderApplication))
                    {
                        $strFolderApplication = $serviceUtil->getValueByStructure(array('strStructure'  => 'PARAMETROS_ESTRUCTURA_RUTAS_TELCOS',
                                                                                        'strKey'        => $strNameSourceTMO));
                    }
                    $arrayData['strFolderApplication'] = $strFolderApplication;
                    $response = $this->putComparaValidaImagen($arrayData);
                    break;
                case 'putReenviarTicketEcucert':
                    $response = $this->putReenviarTicketEcucert($arrayData);
                    break;
                case 'putCerrarCasoTareaEcucert':
                    $response = $this->putCerrarCasoTareaEcucert($arrayData);
                    break;
                case 'actualizarCoordenadasFactibilidadCliente':
                    $response = $this->actualizarCoordenadasFactibilidadCliente($arrayData);
                    break;
                case 'getValidarEnlaces':
                    $response = $this->getValidarEnlaces($arrayData);
                    break;
                case 'putVerificarGuardarSerieElemento':
                    $response = $this->putVerificarGuardarSerieElemento($arrayData);
                    break;
                case 'contratoVehiculo':
                    $response = $this->contratoVehiculo($arrayData);
                    break;
                case 'putActivacionTn':
                    $response = $this->putActivacionTn($arrayData);
                    break;
                 case 'activarsubscriber':
                    $response = $this->activarsubscriber($arrayData);
                    break;
                case 'getTieneIpAdicional':
                    $response = $this->getTieneIpAdicional($arrayData);
                    break;
                case 'getElementoCliente':
                    $response = $this->getElementoCliente($arrayData);
                    break;
                case 'putActivacionProductoMd':
                    $response = $this->putActivacionProductoMd($arrayData);
                    break;
                case 'getInfoProductoAdicionalMd':
                    $response = $this->getInfoProductoAdicionalMd($arrayData);
                    break;
                case 'putActivacionMd':
                    $response = $this->putActivacionMd($arrayData);
                    break;
                case 'getValidaElementosOrigenTraslados':
                    $response = $this->getValidaElementosOrigenTraslados($arrayData);
                    break;
                case 'activarZeroTouch':
                    $response = $this->activarZeroTouch($arrayData);
                    break;
                case 'putPruebasConectividad':
                    $response = $this->putPruebasConectividad($arrayData);
                    break;
                case 'actualizaFechaExpiracionSecureCpe':
                    $response = $this->actualizaFechaExpiracionSecureCpe($arrayData);
                    break;
                case 'actualizarFechaExpiracionBase':
                    $response = $this->actualizarFechaExpiracionBase($arrayData);
                    break;
                case 'putValidarElementoServicioGpon':
                    $response = $this->putValidarElementoServicioGpon($arrayData);
                    break;
                case 'getElementoClientePorServicioGpon':
                    $response = $this->getElementoClientePorServicioGpon($arrayData);
                    break;
                case 'putCambioEquipoTN':
                    $response = $this->putCambioEquipoTN($arrayData);
                    break;
                case 'procesarActivarTelcographTn':
                    $response = $this->procesarActivarTelcographTn($arrayData);
                    break;
                case 'callJarReactivacion':
                    $response = $this->callJarReactivacion($arrayData);
                    break;
                case 'callJarCorteMasivo':
                    $response = $this->callJarCorteMasivo($arrayData);
                    break;      
                case 'getEquiposPorProducto':
                    $response = $this->getEquiposPorProducto($arrayData);
                    break;
                case 'consultarPotenciaActivacion':
                    $response = $this->verificaPotenciaMDFttx($arrayData);
                    break;
                case 'getVerificaDiferenteIpOlt':
                    $response = $this->getVerificaDiferenteIpOlt($arrayData);
                    break;
                case 'putActivacionPotenciaTraslado':
                    $response = $this->putActivacionPotenciaTraslado($arrayData);
                    break;
                case 'getCapacidadDataTecnica':
                    $response = $this->getCapacidadDataTecnica($arrayData);
                    break;
                case 'reversarMigracionPorOlt':
                    $response = $this->reversarMigracionPorOlt($arrayData);
                    break;
                case 'getReubicacionSolicitud':
                    $response = $this->getReubicacionSolicitud($arrayData);
                    break;
                case 'getReubicacionServicioSuspendido':
                    $response = $this->getReubicacionServicioSuspendido($arrayData);
                    break;
                case 'getReubicacionPlanSuspensionTemporal':
                    $response = $this->getReubicacionPlanSuspensionTemporal($arrayData);
                    break;
                case 'getReubicacionPrecioEquipo':
                    $response = $this->getReubicacionPrecioEquipo($arrayData);
                    break;
                default:
                    $response['status']  = $this->status['METODO'];
                    $response['mensaje'] = $this->mensaje['METODO'];
            }
            }
        }
        if(isset($response))
        {
            $response['token'] = $token;
            $objResponse = new Response();
            $objResponse->headers->set('Content-Type', 'text/json');
            $objResponse->setContent(json_encode($response));
        }
        return $objResponse;
    }

    /********************************************************************************************
     * METODOS GET TECNICO MOBIL
     ********************************************************************************************/

    /**getIpsControladoras
     * obtiene las ip controladoras asociada al servicio wifi gpon safe city
     * por el modelo y marca del elemento cpe cliente pe 
     *
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.0 18-11-2022
     */

    private function getIpsControladoras($arrayParametros)
    {   
        try
        {     
            $objTecnicoService = $this->get('tecnico.InfoServicioTecnico');
            $arrayData      = $arrayParametros['data'];
            $arrayIps       = $objTecnicoService->ipsControladoras($arrayData);
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $arrayResultado['status']    = $this->status['NULL'];
                $arrayResultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']   = $mensaje;
            }
            else
            {
                $arrayResultado['status']    = $this->status['ERROR'];
                $arrayResultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $arrayResultado;
        }

        $arrayResultado['data']    = $arrayIps['data'];
        $arrayResultado['status']  = $arrayIps['status'];
        $arrayResultado['mensaje'] = $arrayIps['mensaje'];
        return $arrayResultado;

    }

    /**
     * Función encargada de retornar si el cliente tiene o no un Solicitud de Reubicacion
     * en proceso.
     *
     * @author Emmanuel Martillo Siavichay <emartillo@telconet.ec>
     * @version 1.0 23/05/2023
     *
     * @param type $arrayData
     * @return type $arrayRespuesta
     */
    public function getReubicacionSolicitud($arrayData)
    {
        $arrayReubiSol = array();
        $arrayDataResponse = array();
        $serviceReubi= $this->get('tecnico.ReubicacionNetlife');
        try
        {
            $arrayReubiSol       = $serviceReubi->solicitudReubicacion($arrayData);
        }
        catch (\Exception $ex)
        {
            if($ex->getMessage() == "NULL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }
            elseif($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }
            else
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }

        }

        $arrayRespuesta['code']    = $arrayReubiSol['code'];
        $arrayRespuesta['status']  = $arrayReubiSol['status'];
        $arrayRespuesta['mensaje'] = $arrayReubiSol['mensaje'];
        $arrayRespuesta['data']    = $arrayReubiSol['data'];
        return $arrayRespuesta;

    }

    /**
     * Función encargada de retornar si el servicio se encuentra en estado Suspendido(In-Corte).
     *
     * @author Emmanuel Martillo Siavichay <emartillo@telconet.ec>
     * @version 1.0 24/05/2023
     *
     * @param type $arrayData
     * @return type $arrayRespuesta
     */
    public function getReubicacionServicioSuspendido($arrayData)
    {
        $arrayReubiSol = array();
        $arrayDataResponse = array();
        $serviceReubi= $this->get('tecnico.ReubicacionNetlife');
        try
        {
            $arrayReubiSol       = $serviceReubi->servicioSuspendidoReubicacion($arrayData);
        }
        catch (\Exception $ex)
        {
            if($ex->getMessage() == "NULL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];

            }
            elseif($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }
            else
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }
        }

        $arrayRespuesta['code']    = $arrayReubiSol['code'];
        $arrayRespuesta['status']  = $arrayReubiSol['status'];
        $arrayRespuesta['mensaje'] = $arrayReubiSol['mensaje'];
        $arrayRespuesta['data']    = $arrayReubiSol['data'];
        return $arrayRespuesta;
    }

    /**
     * Función encargada de retornar si el cliente tiene contratado un plan de suspension temporal
     * o no.
     *
     * @author Emmanuel Martillo Siavichay <emartillo@telconet.ec>
     * @version 1.0 25/05/2023
     *
     * @param type $arrayData
     * @return type $arrayRespuesta
     */
    public function getReubicacionPlanSuspensionTemporal($arrayData)
    {
        $arrayReubiSol = array();
        $arrayDataResponse = array();
        $serviceReubi= $this->get('tecnico.ReubicacionNetlife');
        try
        {
            $arrayReubiSol       = $serviceReubi->suspensionTemporalReubicacion($arrayData);
        }
        catch (\Exception $ex)
        {
            if($ex->getMessage() == "NULL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];

            }
            elseif($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }
            else
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }

        }

        $arrayRespuesta['code']    = $arrayReubiSol['code'];
        $arrayRespuesta['status']  = $arrayReubiSol['status'];
        $arrayRespuesta['mensaje'] = $arrayReubiSol['mensaje'];
        $arrayRespuesta['data']    = $arrayReubiSol['data'];
        return $arrayRespuesta;

    }

    /**
     * Función encargada de retornar el precio por reubicacion.
     *
     * @author Emmanuel Martillo Siavichay <emartillo@telconet.ec>
     * @version 1.0 29/05/2023
     *
     * @param type $arrayData
     * @return type $arrayRespuesta
     */
    public function getReubicacionPrecioEquipo($arrayData)
    {
        $arrayReubiSol = array();
        $arrayDataResponse = array();
        $serviceReubi= $this->get('tecnico.ReubicacionNetlife');
        try
        {
            $arrayReubiSol       = $serviceReubi->precioReubicacion($arrayData);
        }
        catch (\Exception $ex)
        {
            if($ex->getMessage() == "NULL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }
            elseif($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }
            else
            {
                $arrayRespuesta['code']     = $arrayReubiSol['code'];
                $arrayRespuesta['status']   = $arrayReubiSol['status'];
                $arrayRespuesta['mensaje']  = $arrayReubiSol['mensaje'];
                $arrayRespuesta['data']     = $arrayReubiSol['data'];
            }

        }

        $arrayRespuesta['code']    = $arrayReubiSol['code'];
        $arrayRespuesta['status']  = $arrayReubiSol['status'];
        $arrayRespuesta['mensaje'] = $arrayReubiSol['mensaje'];
        $arrayRespuesta['data']    = $arrayReubiSol['data'];
        return $arrayRespuesta;

    }

    /**getElementosPorPunto
     * obtiene los elementos que se encuentran en el punto
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 23-02-2017
     */

    private function getElementosPorPunto($arrayData)
    {
        $mensaje = "";
        try
        {

            $codEmpresa     = $arrayData['data']['codEmpresa'];
            $intPunto       = $arrayData['data']['idPunto'];
            $emComercial    = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura      = $this->getDoctrine()->getManager("telconet_infraestructura");


            $objProducto  = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                        ->findOneBy(array("nombreTecnico" => "INTERNET", "empresaCod" => $codEmpresa, "estado" => "Activo"));
            $objMacOnt   = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array("descripcionCaracteristica" => "MAC ONT", "estado" => "Activo"));

            $objMacWifi  = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array("descripcionCaracteristica" => "MAC WIFI", "estado" => "Activo"));

            if(is_object($objProducto) && is_object($objMacOnt) )
            {
                $objProdCaractMo  = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"      => $objProducto->getId(),
                                                                  "caracteristicaId"=> $objMacOnt->getId()));
            }

            if(is_object($objProducto) && is_object($objMacWifi) )
            {
                $objProdCaractWi  = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"      => $objProducto->getId(),
                                                                  "caracteristicaId"=> $objMacWifi->getId()));
            }

            $objServicios = $emComercial->getRepository('schemaBundle:InfoServicio')->findBy(array('puntoId' => $intPunto));

            foreach($objServicios as $objServicio)
            {

                if($objServicio->getPlanId())
                {

                    $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneBy(array('servicioId' => $objServicio->getId()));

                    if(is_object($objServicioTecnico))
                    {

                        $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                ->find($objServicioTecnico->getElementoClienteId());

                        if(is_object($objElementoCliente))
                        {

                            //busco los datos del elemento
                            $strSerie = $objElementoCliente->getSerieFisica();

                            $objServCaractPrincipal = $emInfraestructura->getRepository('schemaBundle:InfoServicioProdCaract')
                                                      ->findOneBy(array("productoCaracterisiticaId" => $objProdCaractMo->getId(),
                                                                                       "servicioId" => $objServicio->getId()));

                            if(is_object($objServCaractPrincipal))
                            {
                                $strMac = $objServCaractPrincipal->getValor();
                            }


                            $arrayElementos[] = array(  'idElemento'    => $objElementoCliente->getId(),
                                                        'modelo'        => $objElementoCliente->getModeloElementoId()->getNombreModeloElemento(),
                                                        'serie'         => $strSerie,
                                                        'mac'           => $strMac,
                                                        'idServicio'    => $objServicio->getId(),
                                                        'estadoServicio'=> $objServicio->getEstado());

                            //guardo la data en un array
                            $objEnlace = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                         ->findOneBy(array('interfaceElementoIniId' => $objServicioTecnico->getInterfaceElementoClienteId()));

                            //si tenemos la interface buscamos el elemento
                            if(is_object($objEnlace))
                            {
                                $objInterface = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                  ->find($objEnlace->getInterfaceElementoFinId());

                                if(is_object($objInterface))
                                {
                                    $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                     ->find($objInterface->getElementoId());

                                    if(is_object($objElemento))
                                    {
                                        //busco los datos del elemento
                                        $strSerie = $objElemento->getSerieFisica();

                                        $objServCaractPrincipal = $emInfraestructura->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                  ->findOneBy(array("productoCaracterisiticaId" => $objProdCaractWi->getId(),
                                                                                                   "servicioId"=> $objServicio->getId()));
                                        if(is_object($objServCaractPrincipal))
                                        {
                                            $strMac = $objServCaractPrincipal->getValor();
                                        }

                                        $arrayElementos[] = array('idElemento'     => $objElemento->getId(),
                                                                  'modelo'         => $objElemento->getModeloElementoId()->getNombreModeloElemento(),
                                                                  'serie'          => $strSerie,
                                                                  'mac'            => $strMac,
                                                                  'idServicio'     => $objServicio->getId(),
                                                                  'estadoServicio' => $objServicio->getEstado());

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['elementosRetiro']   = $arrayElementos;
        $resultado['status']            = $this->status['OK'];
        $resultado['mensaje']           = $this->mensaje['OK'];
        return $resultado;
    }


    /**
     * Funcion que sirve para finalizar los procesos masivos de asignacion de ipv4 publica.
     *
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.0 26-09-2017
     */
    private function finalizarAsignacionIpv4Publico($arrayData)
    {
        $emComercial        = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");
        $arrayDatos         = $arrayData['data']['datos'];

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();

        try
        {
            $intIdProcesoCab = 0;
            foreach($arrayDatos as $datos)
            {
                $intIdServicio      = $datos['idServicio'];
                $intIdProcesoDet    = $datos['idProcesoDet'];

                $objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                $objProcesoDet      = $emInfraestructura->getRepository('schemaBundle:InfoProcesoMasivoDet')->find($intIdProcesoDet);

                if(is_object($objProcesoDet))
                {
                    $intIdProcesoCab    = $objProcesoDet->getProcesoMasivoCabId()->getId();

                    //grabar el historial del servicio
                    $servicioHistorial = new InfoServicioHistorial();
                    $servicioHistorial->setServicioId($objServicio);
                    $servicioHistorial->setObservacion("Finalizó el proceso de asignación de Ipv4 Pública");
                    $servicioHistorial->setEstado($objServicio->getEstado());
                    $servicioHistorial->setUsrCreacion("rda-middleware");
                    $servicioHistorial->setFeCreacion(new \DateTime('now'));
                    $servicioHistorial->setIpCreacion("172.24.8.15");
                    $emComercial->persist($servicioHistorial);
                    $emComercial->flush();

                    $objProcesoDet->setEstado("Finalizado");
                    $objProcesoDet->setFeUltMod(new \DateTime('now'));
                    $objProcesoDet->setUsrUltMod("rda-middleware");
                    $emInfraestructura->persist($objProcesoDet);
                    $emInfraestructura->flush();
                }
            }

            $arrayProcesoDet = $emInfraestructura->getRepository('schemaBundle:InfoProcesoMasivoDet')
                                                 ->findBy(array('procesoMasivoCabId' => $intIdProcesoCab, 'estado' => 'Pendiente'));
            if(count($arrayProcesoDet) == 0)
            {
                $objProcesoCab  = $emInfraestructura->getRepository('schemaBundle:InfoProcesoMasivoCab')->find($intIdProcesoCab);
                $objProcesoCab->setEstado("Finalizado");
                $objProcesoCab->setFeUltMod(new \DateTime('now'));
                $objProcesoCab->setUsrUltMod("rda-middleware");
                $emInfraestructura->persist($objProcesoCab);
                $emInfraestructura->flush();
            }
        }
        catch(\Exception $e)
        {
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }

            if($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
            $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'Ocurrio un error: \n ' . $e->getMessage());
            return $arrayRespuesta;
        }

        //*DECLARACION DE COMMITS*/
        if($emComercial->getConnection()->isTransactionActive())
        {
            $emComercial->getConnection()->commit();
        }

        if($emInfraestructura->getConnection()->isTransactionActive())
        {
            $emInfraestructura->getConnection()->commit();
        }

        $arrayRespuesta = array('status' => 'OK', 'mensaje' => 'Se Finalizaron los procesos');

        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para obtener los servicios que tiene
     * asignado un Operativo
     *
     * @param array $data
     * @return array $resultado
     *@author John Vera <javera@telconet.ec>
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 31/03/2015
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 14-11-2016 - Se obtiene la observación con la información del Ingeniero IPCCL2 y se la agrega a la descripción del punto.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.2 18-11-2016 - Se agrega el id detalle de una tarea a la respuesta que retorna el webservice.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.3 20/12/2016 - Se obtiene la información del backbone anterior cuando se realice la migraciuon de tecnología
     *                           Tellion -> Huawei
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 17-11-2017 Se agrega el campo que retorna el número de la tarea de la consulta.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.5 22/05/2017 - Se agrega el campo tieneMaterial para determinar si anteriormente se ingresaron los materiales de una instalación
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.6 22/09/2017 - Se agrega a la respuesta la fecha en la que se debe ejecutar la tarea.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.7 03/10/2017 - Seteamos los valores iniciales para el ingreso de metraje en las instalaciones.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.8 25/05/2018 - Se valida si viene por la app de operativo se obtiene todas las instalaciones asignadas al tecnico,
     *                           si el origen es la app movil tecnico se mostrara las instalaciones del dia actual.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.9 03/03/2021 - Se valida $servicioTecnicoAnterior->getElementoContenedorId()
     *                           por inconveniente al no tener getElementoContenedorId
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 09-04-2021 - Se agrega nuevo objeto zeroTouchInfo para cada servicio retornado, el cual contiene la información de las
     *                       características ZeroTouch del servicio.
     *
     */
    private function getServiciosPorActivador($data)
    {
        $puntoServiciosArray         = array();
        $resultado                   = array();
        $i                           = 0;
        $puntoVigente                = 0;
        $nombreProducto              = "";
        $nombrePlan                  = "";
        $tieneActa                   = "";
        $tieneEncuesta               = "";
        $solicitudMigracion          = "";
        $idServicio                  = 0;
        $mismosRecursos              = "SI";
        $mismosRecursosIp            = "SI";
        $diferenteTecnologia         = "NO";
        $nombreSplitterAnterior      = "";
        $nombreCajaAnterior          = "";
        $interfaceSplitterAnterior   = "";
        $interfaceOltAnterior        = "";
        $nombreOltAnterior           = "";
        $oltAnterior                 = "";
        $ipAnterior                  = "";
        $strTieneMateriales          = "";
        $arrayDatosBackboneAnterior  = null;
        $arrayDatosBackboneMigracion = null;
        $arrayAdmiParametroDet       = null;
        $arrayParametroMetraje       = null;
        $boolMovilTecnico            = false;
        $arrayDatoSector             = null;

        try
        {
            $codEmpresa             = $data['data']['codEmpresa'];
            $idServicio             = $data['data']['idServicio'];
            $user                   = $data['user'];
            $emComercial            = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura      = $this->getDoctrine()->getManager("telconet_infraestructura");
            $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
            $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');
            if($data['source'])
            {
                $boolMovilTecnico = true;
            }

            $arrayAdmiParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne(   'CANTIDAD_FIBRA_INSTALACION',
                                                            'TECNICO',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $codEmpresa);
            if(count($arrayAdmiParametroDet) > 0)
            {
                $arrayParametroMetraje['cantidadMax']      = intval($arrayAdmiParametroDet['valor1']);
                $arrayParametroMetraje['puntosRequerido']  = $arrayAdmiParametroDet['valor2'];
                $arrayParametroMetraje['alertaExcedente']  = $arrayAdmiParametroDet['valor3'];
                $arrayParametroMetraje['maximoDigitos']    = intval($arrayAdmiParametroDet['valor4']);
            }
            $producto  = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                     ->findOneBy(array("nombreTecnico" => "INTERNET", "empresaCod" => $codEmpresa, "estado" => "Activo"));
            $servicios = $emComercial->getRepository('schemaBundle:InfoDetalleAsignacion')->getServiciosPorActivador($user,
                                                                                                                     $idServicio,
                                                                                                                     $boolMovilTecnico);
                                                                                                                     $puntoServiciosArray[] = $a ;
            if($servicios[0]["idParroquia"])
            {
                $objParroquia   = $emComercial->getRepository('schemaBundle:AdmiParroquia')->findOneById($servicios[0]["idParroquia"]);
                $objCanton      = $emComercial->getRepository('schemaBundle:AdmiCanton')->findOneById($objParroquia->getCantonId());
                $objProvincia   = $emComercial->getRepository('schemaBundle:AdmiProvincia')->findOneById($objCanton->getProvinciaId());

                $arrayDatoSector = array('nombreparroquia' => $objParroquia->getNombreParroquia(),
                                         'nombreCanton' =>$objCanton->getNombreCanton(),
                                        'nombreProvincia' =>$objProvincia->getNombreProvincia());
            }
            foreach($servicios as $key=>$servicio)
            {
                $strObservacionDetalle = "";
                if(isset($servicio["observacionDetalle"]) && !empty($servicio["observacionDetalle"]))
                {
                    $strObservacionAnterior = $servicio["observacionDetalle"];
                    $strObservacionDetalle  = str_replace("<b>","",$strObservacionAnterior);
                    $strObservacionDetalle  = str_replace("</b><br>"," ",$strObservacionDetalle);
                    $strObservacionDetalle  = " (" . str_replace("<br/>",", ",$strObservacionDetalle). ")";

                }
                if($servicio['datosCliente'])
                {
                    $datosCliente   = explode(";", $servicio['datosCliente']);
                    $login          = $datosCliente[0];
                    $nombres        = $datosCliente[1];
                }

                //servicio tiene encuesta
                if($servicio['tieneEncuesta'] == "TRUE")
                {
                    $tieneEncuesta = "S";
                }
                else
                {
                    $tieneEncuesta = "N";
                }

                //servicio tiene acta de entrega de equipos
                if($servicio['tieneActa'] == "TRUE")
                {
                    $tieneActa = "S";
                }
                else
                {
                    $tieneActa = "N";
                }

                //servicio tiene ruta georreferenciada
                if (isset($servicio['tieneRuta']))
                {
                    $tieneRuta = "S";
                }
                else
                {
                    $tieneRuta = "N";
                }

                //servicio tiene materiales ingresados
                if($servicio['tieneMaterial'] > 0)
                {
                    $strTieneMateriales = "S";
                }
                else
                {
                    $strTieneMateriales = "N";
                }

                if($servicio['nombrePlan'])
                {
                    $plan       = explode(";", $servicio['nombrePlan']);
                    $nombrePlan = $plan[0];
                    $idEmpresa  = $plan[1];
                }
                elseif($servicio['nombreProducto'])
                {
                    $producto       = explode(";", $servicio['nombreProducto']);
                    $nombreProducto = $producto[0];
                    $idEmpresa      = $producto[1];
                }

                if($servicio['idProductoTecnico'])
                {
                    $idProducto = $servicio['idProductoTecnico'];
                }
                else
                {
                    $idProducto = $servicio['idProducto'];
                }

                //obtener objeto servicio para buscar la caracteristica de traslado
                $objServicio = $emComercial->find('schemaBundle:InfoServicio', $servicio['idServicio']);

                //traslado
                $traslado = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "TRASLADO", $producto);
                if($traslado)
                {
                    $olt                        = $emInfraestructura->find('schemaBundle:InfoElemento', $servicio['idElemento']);
                    $servicioAnteriorId         = $traslado->getValor();
                    $servicioTecnicoAnterior    = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneBy(array("servicioId" => $servicioAnteriorId));
                    $oltAnterior                = $emInfraestructura->find('schemaBundle:InfoElemento', $servicioTecnicoAnterior->getElementoId());

                    //si los elementos olts son diferentes
                    if($oltAnterior->getId() != $olt->getId())
                    {
                        $mismosRecursosIp   = "NO";
                        $mismosRecursos     = "NO";
                        if($oltAnterior->getModeloElementoId()->getMarcaElementoId() != $olt->getModeloElementoId()->getMarcaElementoId())
                        {
                            $diferenteTecnologia = "SI";
                        }
                        else
                        {
                            $diferenteTecnologia = "NO";
                        }
                    }
                    else
                    {
                        if($servicio['idInterfaceElemento'] != $servicioTecnicoAnterior->getInterfaceElementoId())
                        {
                            $mismosRecursos = "NO";
                        }
                    }

                    //BACKBONE ANTERIOR--------------------------------------------------------------------------------------------------
                    //OLT ANTERIOR
                    if($oltAnterior)
                    {
                        $nombreOltAnterior = $oltAnterior->getNombreElemento();
                    }
                    //IP OLT ANTERIOR
                    $ipAnterior                 = $emComercial->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("elementoId" => $oltAnterior->getId()));
                    //INTERFACE OLT ANTERIOR
                    $interfaceOltAnterior       = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento',
                                                                           $servicioTecnicoAnterior->getInterfaceElementoId());
                    //SPLITTER ANTERIOR
                    $splitterAnterior           = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                           $servicioTecnicoAnterior->getElementoConectorId());
                    if($splitterAnterior)
                    {
                        $nombreSplitterAnterior = $splitterAnterior->getNombreElemento();
                    }

                    //INTERFACE SPLITTER ANTERIOR
                    $interfaceSplitterAnterior  = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento',
                                                                           $servicioTecnicoAnterior->getInterfaceElementoConectorId());

                    //CAJA ANTERIOR
                    if(is_object($servicioTecnicoAnterior) && !is_null($servicioTecnicoAnterior->getElementoContenedorId()))
                    {
                        $cajaAnterior               = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                            $servicioTecnicoAnterior->getElementoContenedorId());
                        if($cajaAnterior)
                        {
                            $nombreCajaAnterior = $cajaAnterior->getNombreElemento();
                        }
                    }

                    $arrayDatosBackboneAnterior = array (
                                'mismosRecursos'                    => $mismosRecursos,
                                'mismosRecursosIp'                  => $mismosRecursosIp,
                                'diferenteTecnologia'               => $diferenteTecnologia,
                                'nombreElementoContenedor'          => ($cajaAnterior) ? $nombreCajaAnterior : "NA",
                                'idElementoContenedor'              => ($cajaAnterior) ? $cajaAnterior->getId() : "NA",
                                'nombreElemento'                    => ($oltAnterior) ? $nombreOltAnterior : "NA",
                                'idElemento'                        => ($oltAnterior) ? $oltAnterior->getId() : "NA",
                                'nombreInterfaceElemento'           => ($interfaceOltAnterior) ?
                                                                            $interfaceOltAnterior->getNombreInterfaceElemento() : "NA",
                                'idInterfaceElemento'               => ($interfaceOltAnterior) ? $interfaceOltAnterior->getId() : "NA",
                                'nombreElementoConector'            => ($splitterAnterior) ? $nombreSplitterAnterior : "NA",
                                'idElementoConector'                => ($splitterAnterior) ? $splitterAnterior->getId() : "NA",
                                'nombreInterfaceElementoConector'   => ($interfaceSplitterAnterior) ?
                                                                            $interfaceSplitterAnterior->getNombreInterfaceElemento() : "NA",
                                'idInterfaceElementoConector'       => ($interfaceSplitterAnterior) ?  $interfaceSplitterAnterior->getId() : "NA",
                                'nombreModeloElemento'              => ($oltAnterior) ?
                                                                            $oltAnterior->getModeloElementoId()->getNombreModeloElemento() : "NA",
                                'ipElemento'                        => ($ipAnterior) ? $ipAnterior->getIp() : "NA");
                }//if($traslado)


                // =========================================================================================================================
                // >>> BEGIN MIGRACION
                // =========================================================================================================================
                if($servicio['idSolicitudMigracion'])
                {
                    $entityServicioTecnico  = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneByServicioId($servicio['idServicio']);

                    if($servicio['estadoSolicitudMigracion'] == 'AsignadoTarea')
                    {
                        // Se obtiene el elemento L2 Huawei Basado en el elemento L2 Actual
                        $elementoHuaweiL2  = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                               ->findOneBy(array('refElementoId'=>$entityServicioTecnico->getElementoConectorId()));

                        if($elementoHuaweiL2)
                        {

                            $arrayHuaweiOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                ->getElementoPadre($elementoHuaweiL2->getId(), 'ELEMENTO', 'OLT');
                            if ($arrayHuaweiOlt)
                            {
                                $entityElementoOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                       ->find($arrayHuaweiOlt[0]['IDELEMENTO']);

                                // se obtiene OLT > INTERFACE
                                $entityElementoInterface     =  $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                  ->findOneById($arrayHuaweiOlt[0]['IDINTERFACEELEMENTO']);

                                $ipOlt                       =  $emComercial->getRepository('schemaBundle:InfoIp')
                                                                            ->findOneBy(array("elementoId" => $entityElementoOlt->getId()));

                                //CAJA MIGRACION
                                $cajaMigracion = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                          $entityServicioTecnico->getElementoContenedorId());

                                $arrayDatosBackboneMigracion = array (
                                    'mismosRecursos'                  => 'NO',
                                    'mismosRecursosIp'                => 'NO',
                                    'diferenteTecnologia'             => 'SI',

                                    'idElementoContenedor'            => ($cajaMigracion) ? $cajaMigracion->getId() : "NA",
                                    'nombreElementoContenedor'        => ($cajaMigracion) ? $cajaMigracion->getNombreElemento() : "NA",

                                    // OLT
                                    'idElemento'                      => ($entityElementoOlt) ? $entityElementoOlt->getId() : "NA",
                                    'nombreElemento'                  => ($entityElementoOlt) ? $entityElementoOlt->getNombreElemento() : "NA",
                                    // OLT - INTERFACE
                                    'idInterfaceElemento'             => ($entityElementoInterface) ? $entityElementoInterface->getId() : "NA",
                                    'nombreInterfaceElemento'         => ($entityElementoInterface) ?
                                                                          $entityElementoInterface->getNombreInterfaceElemento() : "NA",

                                    // SPLITTER
                                    'idElementoConector'              => ($elementoHuaweiL2) ? $elementoHuaweiL2->getId() : "NA",
                                    'nombreElementoConector'          => ($elementoHuaweiL2) ? $elementoHuaweiL2->getNombreElemento() : "NA",
                                    // SPLITTER > INTERFACE
                                    'idInterfaceElementoConector'     => 0,
                                    'nombreInterfaceElementoConector' => "NA",

                                    'nombreModeloElemento'            => ($entityElementoOlt) ?
                                                                          $entityElementoOlt->getModeloElementoId()->getNombreModeloElemento() : "NA",
                                    'ipElemento'                      => ($ipOlt) ? $ipOlt->getIp() : "NA");
                            }
                        }
                    }
                    else if($servicio['estadoSolicitudMigracion'] == 'Asignada')
                    {
                        // Se obtiene el elemento L2 Huawei Basado en el elemento L2 Actual
                        $elementoHuaweiL2  = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                      $entityServicioTecnico->getElementoConectorId());
                        $intRefElementoId  = $elementoHuaweiL2->getRefElementoId();
                        if(!empty($intRefElementoId))
                        {
                            // Se obtiene el elemento L2 Huawei Basado en el elemento L2 Actual
                            $elementoTellionL2  = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                           $elementoHuaweiL2->getRefElementoId());

                            if(is_object($elementoTellionL2))
                            {
                                $objServicioProdCarac   = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                             "INTERFACE ELEMENTO TELLION",
                                                                                                             $producto);
                                $objInterfaceTellionOlt = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento',
                                                                                   $objServicioProdCarac->getValor());
                                $objElementoTellionOlt  = $objInterfaceTellionOlt->getElementoId();

                                if (is_object($objElementoTellionOlt))
                                {

                                    $ipOlt                       =  $emComercial->getRepository('schemaBundle:InfoIp')
                                                                                ->findOneBy(array("elementoId" => $objElementoTellionOlt->getId()));

                                    //CAJA MIGRACION
                                    $cajaMigracion = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                              $entityServicioTecnico->getElementoContenedorId());

                                    $arrayDatosBackboneAnterior = array (
                                        'mismosRecursos'                    => 'NO',
                                        'mismosRecursosIp'                  => 'NO',
                                        'diferenteTecnologia'               => 'SI',

                                        'idElementoContenedor'              => ($cajaMigracion) ? $cajaMigracion->getId() : "NA",
                                        'nombreElementoContenedor'          => ($cajaMigracion) ? $cajaMigracion->getNombreElemento() : "NA",

                                        // OLT
                                        'idElemento'                        => ($objElementoTellionOlt) ? $objElementoTellionOlt->getId() : "NA",
                                        'nombreElemento'                    => ($objElementoTellionOlt) ?
                                                                                $objElementoTellionOlt->getNombreElemento() : "NA",
                                        // OLT - INTERFACE
                                        'idInterfaceElemento'               => ($objInterfaceTellionOlt) ? $objInterfaceTellionOlt->getId() : "NA",
                                        'nombreInterfaceElemento'           => ($objInterfaceTellionOlt) ?
                                                                                $objInterfaceTellionOlt->getNombreInterfaceElemento() : "NA",

                                        // SPLITTER
                                        'idElementoConector'                => ($elementoHuaweiL2) ? $elementoHuaweiL2->getId() : "NA",
                                        'nombreElementoConector'            => ($elementoHuaweiL2) ? $elementoHuaweiL2->getNombreElemento() : "NA",
                                        // SPLITTER > INTERFACE
                                        'idInterfaceElementoConector'       => 0,
                                        'nombreInterfaceElementoConector'   => "NA",

                                        'nombreModeloElemento'              => ($objElementoTellionOlt) ?
                                                                                $objElementoTellionOlt->getModeloElementoId()
                                                                                                      ->getNombreModeloElemento() : "NA",
                                        'ipElemento'                        => ($ipOlt) ? $ipOlt->getIp() : "NA");
                                }
                            }
                        }
                    }
                }
                // =========================================================================================================================
                // >>> END MIGRACION
                // =========================================================================================================================

                if($idEmpresa == $codEmpresa && $servicio['ultimaMilla'] = 'Fibra Optica')
                {
                    $puntoActual = $servicio['idPunto'];
                    if($puntoActual == $puntoVigente)
                    {
                        if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)
                        {
                            //guardo en el mismo arreglo de puntos
                            $datosBackboneArray = array('nombreElementoContenedor'          => $servicio['caja'],
                                                        'idElementoContenedor'              => $servicio['idCaja'],
                                                        'latitudElementoContenedor'         => $servicio['latitudCaja'],
                                                        'longitudElementoContenedor'        => $servicio['longitudCaja'],
                                                        'nombreElemento'                    => $servicio['nombreOlt'],
                                                        'idElemento'                        => $servicio['idElemento'],
                                                        'nombreInterfaceElemento'           => $servicio['interfaceOlt'],
                                                        'idInterfaceElemento'               => $servicio['idInterfaceElemento'],
                                                        'nombreElementoConector'            => $servicio['splitter'],
                                                        'idElementoConector'                => $servicio['idSplitter'],
                                                        'nombreInterfaceElementoConector'   => $servicio['interfaceSplitter'],
                                                        'idInterfaceElementoConector'       => $servicio['idInterfaceSplitter'],
                                                        'ipElemento'                        => $servicio['ipElemento'],
                                                        'nombreModeloElemento'              => $servicio['modeloElemento'],
                                                        'datosBackboneTraslado'             => $arrayDatosBackboneAnterior,
                                                        'datosBackboneMigracion'            => $arrayDatosBackboneMigracion);

                            $servicioArray[] = array(   'idServicio'            => $servicio['idServicio'],
                                                        'estado'                => $servicio['estadoServicio'],
                                                        'tipoServicio'          => $servicio['tipoOrden'],
                                                        'plan'                  => $nombrePlan,
                                                        'idPlan'                => $servicio['idPlan'],
                                                        'producto'              => $nombreProducto,
                                                        'idProducto'            => $idProducto,
                                                        'perfil'                => $servicio['perfil'],
                                                        'ultimaMilla'           => $servicio['ultimaMilla'],
                                                        'datosBackbone'         => $datosBackboneArray,
                                                        'encuesta'              => $tieneEncuesta,
                                                        'actaEntrega'           => $tieneActa,
                                                        'rutaGeorreferencial'   => $tieneRuta,
                                                        'idMigracion'           => $servicio['idSolicitudMigracion'],
                                                        'estadoSolMigracion'    => $servicio['estadoSolicitudMigracion'],
                                                        'estadoSolPlanifica'    => $servicio['estadoSolicitudPlanificacion'],
                                                        'materiales'            => $strTieneMateriales);

                            $puntoServiciosArray[$i - 1] = array(   'idPunto'           => $servicio['idPunto'],
                                                                    'feSolicitada'      => $servicio['feSolicitada'],
                                                                    'metraje'           => $arrayParametroMetraje,
                                                                    'login'             => $login,
                                                                    'cliente'           => $nombres,
                                                                    'idDetalle'         => $servicio['idDetalle'],
                                                                    'idComunicacion'    => $servicio['idComunicacion'],
                                                                    'direccion'         => $servicio['direccion'],
                                                                    'descripcion'       => $servicio['descripcionPunto'].$strObservacionDetalle,
                                                                    'latitud'           => $servicio['latitud'],
                                                                    'longitud'          => $servicio['longitud'],
                                                                    'servicios'         => $servicioArray);
                        }//if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)
                    }//if($puntoActual == $puntoVigente)
                    else
                    {
                        if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)
                        {
                            //creo un nuevo arreglo de puntos
                            $servicioArray = array();
                            $datosBackboneArray = array('nombreElementoContenedor'          => $servicio['caja'],
                                                        'idElementoContenedor'              => $servicio['idCaja'],
                                                        'latitudElementoContenedor'         => $servicio['latitudCaja'],
                                                        'longitudElementoContenedor'        => $servicio['longitudCaja'],
                                                        'nombreElemento'                    => $servicio['nombreOlt'],
                                                        'idElemento'                        => $servicio['idElemento'],
                                                        'nombreInterfaceElemento'           => $servicio['interfaceOlt'],
                                                        'idInterfaceElemento'               => $servicio['idInterfaceElemento'],
                                                        'nombreElementoConector'            => $servicio['splitter'],
                                                        'idElementoConector'                => $servicio['idSplitter'],
                                                        'nombreInterfaceElementoConector'   => $servicio['interfaceSplitter'],
                                                        'idInterfaceElementoConector'       => $servicio['idInterfaceSplitter'],
                                                        'ipElemento'                        => $servicio['ipElemento'],
                                                        'nombreModeloElemento'              => $servicio['modeloElemento'],
                                                        'datosBackboneTraslado'             => $arrayDatosBackboneAnterior,
                                                        'datosBackboneMigracion'            => $arrayDatosBackboneMigracion,
                                                        'arrayDataSector'                   => $arrayDatoSector);

                            $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
                            /*Obtenemos el parametro desde la base.*/
                            $arrayAdmiParametro  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                ->getOne('PRODUCTOS_ZERO_TOUCH',
                                    'TECNICO',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '10');

                            /*Validamos que haya llegado el parametro mediante un ternario.*/
                            $arrayProductosZeroTouch = !empty($arrayAdmiParametro) ? json_decode($arrayAdmiParametro['valor1'], true) : null;

                            /*TODO: Validar los productos ZeroTouch mediante parámetro en base.*/
                            if (is_array($arrayProductosZeroTouch) && in_array($idProducto, $arrayProductosZeroTouch))
                            {
                                $datosBackboneArray['zeroTouchInfo'] = $serviceTecnico->getZeroTouchDataMovil(
                                    array(
                                        'intIdServicio'=>$servicio['idServicio']
                                    ));
                            }


                            $servicioArray[] = array(   'idServicio'            => $servicio['idServicio'],
                                                        'estado'                => $servicio['estadoServicio'],
                                                        'tipoServicio'          => $servicio['tipoOrden'],
                                                        'plan'                  => $nombrePlan,
                                                        'idPlan'                => $servicio['idPlan'],
                                                        'producto'              => $nombreProducto,
                                                        'idProducto'            => $idProducto,
                                                        'perfil'                => $servicio['perfil'],
                                                        'ultimaMilla'           => $servicio['ultimaMilla'],
                                                        'datosBackbone'         => $datosBackboneArray,
                                                        'encuesta'              => $tieneEncuesta,
                                                        'actaEntrega'           => $tieneActa,
                                                        'rutaGeorreferencial'   => $tieneRuta,
                                                        'idMigracion'           => $servicio['idSolicitudMigracion'],
                                                        'estadoSolMigracion'    => $servicio['estadoSolicitudMigracion'],
                                                        'estadoSolPlanifica'    => $servicio['estadoSolicitudPlanificacion'],
                                                        'materiales'            => $strTieneMateriales);

                            $puntoServiciosArray[$i] = array(   'idPunto'           => $servicio['idPunto'],
                                                                'feSolicitada'      => $servicio['feSolicitada'],
                                                                'metraje'           => $arrayParametroMetraje,
                                                                'login'             => $login,
                                                                'cliente'           => $nombres,
                                                                'idDetalle'         => $servicio['idDetalle'],
                                                                'idComunicacion'    => $servicio['idComunicacion'],
                                                                'direccion'         => $servicio['direccion'],
                                                                'descripcion'       => $servicio['descripcionPunto'].$strObservacionDetalle,
                                                                'latitud'           => $servicio['latitud'],
                                                                'longitud'          => $servicio['longitud'],
                                                                'servicios'         => $servicioArray);
                        }//if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)
                        $puntoVigente = $servicio['idPunto'];
                        $i++;
                    }//else

                    $nombrePlan = "";
                    $nombreProducto = "";
                }//if($idEmpresa == $codEmpresa && $servicio['ultimaMilla'] = 'Fibra Optica')
            }
            if(!$puntoServiciosArray)
            {
                $resultado['status']  = $this->status['NULL'];
                $resultado['mensaje'] = $this->mensaje['NULL'];
                return $resultado;
            }

            $arrayParametro['intIdElemento'] = $datosBackboneArray['idElementoConector'];
            $arrayParametro['strNombreInterfaceElemento']  = $datosBackboneArray['nombreInterfaceElementoConector'];
            $arrayParametro['intCodigoEmpresa'] = $codEmpresa ;

            $arrayParametrosEnviar = array('intIdElemento'              => $datosBackboneArray['idElementoConector'],
                                           'strNombreInterfaceElemento' => $datosBackboneArray['nombreInterfaceElementoConector']
                                          );

            $arrayHiloMpls = $emComercial->getRepository('schemaBundle:InfoDetalleAsignacion')->getHiloPrincipalPorElementoId($arrayParametrosEnviar);

            if(isset($arrayHiloMpls) && $arrayHiloMpls!=null)
            {
            $puntoServiciosArray[0]['servicios'][0]['datosBackbone']['hiloMpls'] = $arrayHiloMpls[0]['colorHilo'];
            }

            $puntoServiciosArray[0]['servicios'][0]['datosBackbone']['ubicacionElemento'] = "";

            $objDetalleElemento = $emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                    ->findOneBy(array( "elementoId"     => $datosBackboneArray['idElementoContenedor'],
                                       "detalleNombre"  => "UBICADO EN",
                                       "estado"         => "Activo"));
            if(is_object($objDetalleElemento))
            {
                $puntoServiciosArray[0]['servicios'][0]['datosBackbone']['ubicacionElemento'] = $objDetalleElemento->getDetalleValor();
            }

        }
        catch(Exception $e)
        {
            $resultado['status']  = $this->status['ERROR'];
            $resultado['mensaje'] = $this->mensaje['NULL'];
        }


        $resultado['puntos']  = array_values($puntoServiciosArray);
        $resultado['status']  = $this->status['OK'];
        $resultado['mensaje'] = $this->mensaje['OK'];
        return $resultado;
    }

    /*
     * Funcione que obtiene la informacion de un servicio por id
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 20-02-2017
     *
     */
    private function getServicioPorId($data)
    {
        $puntoServiciosArray         = array();
        $resultado                   = array();
        $i                           = 0;
        $puntoVigente                = 0;
        $nombreProducto              = "";
        $nombrePlan                  = "";
        $tieneActa                   = "";
        $tieneEncuesta               = "";
        $solicitudMigracion          = "";
        $idServicio                  = 0;
        $mismosRecursos              = "SI";
        $mismosRecursosIp            = "SI";
        $diferenteTecnologia         = "NO";
        $nombreSplitterAnterior      = "";
        $nombreCajaAnterior          = "";
        $interfaceSplitterAnterior   = "";
        $interfaceOltAnterior        = "";
        $nombreOltAnterior           = "";
        $oltAnterior                 = "";
        $ipAnterior                  = "";
        $strTieneMateriales          = "";
        $arrayDatosBackboneAnterior  = null;
        $arrayDatosBackboneMigracion = null;
        $arrayAdmiParametroDet       = null;
        $arrayParametroMetraje       = null;

        try
        {
            $codEmpresa             = $data['data']['codEmpresa'];
            $idServicio             = $data['data']['idServicio'];
            $user                   = $data['user'];
            $emComercial            = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura      = $this->getDoctrine()->getManager("telconet_infraestructura");
            $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
            $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');

            $arrayAdmiParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne(   'CANTIDAD_FIBRA_INSTALACION',
                                                            'TECNICO',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $codEmpresa);
            if(count($arrayAdmiParametroDet) > 0)
            {
                $arrayParametroMetraje['cantidadMax']      = intval($arrayAdmiParametroDet['valor1']);
                $arrayParametroMetraje['puntosRequerido']  = $arrayAdmiParametroDet['valor2'];
                $arrayParametroMetraje['alertaExcedente']  = $arrayAdmiParametroDet['valor3'];
                $arrayParametroMetraje['maximoDigitos']    = intval($arrayAdmiParametroDet['valor4']);
            }
            $producto  = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                     ->findOneBy(array("nombreTecnico" => "INTERNET", "empresaCod" => $codEmpresa, "estado" => "Activo"));

            $arrayParametro['strUser']      = $user;
            $arrayParametro['intServicio']  = $idServicio;

            $servicios = $emComercial->getRepository('schemaBundle:InfoDetalleAsignacion')->getArrayDatosServicios($arrayParametro);

            foreach($servicios as $servicio)
            {
                $strObservacionDetalle = "";
                if(isset($servicio["observacionDetalle"]) && !empty($servicio["observacionDetalle"]))
                {
                    $strObservacionAnterior = $servicio["observacionDetalle"];
                    $strObservacionDetalle  = str_replace("<b>","",$strObservacionAnterior);
                    $strObservacionDetalle  = str_replace("</b><br>"," ",$strObservacionDetalle);
                    $strObservacionDetalle  = " (" . str_replace("<br/>",", ",$strObservacionDetalle). ")";

                }
                if($servicio['datosCliente'])
                {
                    $datosCliente   = explode(";", $servicio['datosCliente']);
                    $login          = $datosCliente[0];
                    $nombres        = $datosCliente[1];
                }

                //servicio tiene encuesta
                if($servicio['tieneEncuesta'] == "TRUE")
                {
                    $tieneEncuesta = "S";
                }
                else
                {
                    $tieneEncuesta = "N";
                }

                //servicio tiene acta de entrega de equipos
                if($servicio['tieneActa'] == "TRUE")
                {
                    $tieneActa = "S";
                }
                else
                {
                    $tieneActa = "N";
                }

                //servicio tiene ruta georreferenciada
                if (isset($servicio['tieneRuta']))
                {
                    $tieneRuta = "S";
                }
                else
                {
                    $tieneRuta = "N";
                }

                //servicio tiene materiales ingresados
                if($servicio['tieneMaterial'] > 0)
                {
                    $strTieneMateriales = "S";
                }
                else
                {
                    $strTieneMateriales = "N";
                }

                if($servicio['nombrePlan'])
                {
                    $plan       = explode(";", $servicio['nombrePlan']);
                    $nombrePlan = $plan[0];
                    $idEmpresa  = $plan[1];
                }
                elseif($servicio['nombreProducto'])
                {
                    $producto       = explode(";", $servicio['nombreProducto']);
                    $nombreProducto = $producto[0];
                    $idEmpresa      = $producto[1];
                }

                if($servicio['idProductoTecnico'])
                {
                    $idProducto = $servicio['idProductoTecnico'];
                }
                else
                {
                    $idProducto = $servicio['idProducto'];
                }

                //obtener objeto servicio para buscar la caracteristica de traslado
                $objServicio = $emComercial->find('schemaBundle:InfoServicio', $servicio['idServicio']);

                //traslado
                $traslado = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "TRASLADO", $producto);
                if($traslado)
                {
                    $olt                        = $emInfraestructura->find('schemaBundle:InfoElemento', $servicio['idElemento']);
                    $servicioAnteriorId         = $traslado->getValor();
                    $servicioTecnicoAnterior    = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneBy(array("servicioId" => $servicioAnteriorId));
                    $oltAnterior                = $emInfraestructura->find('schemaBundle:InfoElemento', $servicioTecnicoAnterior->getElementoId());

                    //si los elementos olts son diferentes
                    if($oltAnterior->getId() != $olt->getId())
                    {
                        $mismosRecursosIp   = "NO";
                        $mismosRecursos     = "NO";
                        if($oltAnterior->getModeloElementoId()->getMarcaElementoId() != $olt->getModeloElementoId()->getMarcaElementoId())
                        {
                            $diferenteTecnologia = "SI";
                        }
                        else
                        {
                            $diferenteTecnologia = "NO";
                        }
                    }
                    else
                    {
                        if($servicio['idInterfaceElemento'] != $servicioTecnicoAnterior->getInterfaceElementoId())
                        {
                            $mismosRecursos = "NO";
                        }
                    }

                    //BACKBONE ANTERIOR--------------------------------------------------------------------------------------------------
                    //OLT ANTERIOR
                    if($oltAnterior)
                    {
                        $nombreOltAnterior = $oltAnterior->getNombreElemento();
                    }
                    //IP OLT ANTERIOR
                    $ipAnterior                 = $emComercial->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("elementoId" => $oltAnterior->getId()));
                    //INTERFACE OLT ANTERIOR
                    $interfaceOltAnterior       = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento',
                                                                           $servicioTecnicoAnterior->getInterfaceElementoId());
                    //SPLITTER ANTERIOR
                    $splitterAnterior           = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                           $servicioTecnicoAnterior->getElementoConectorId());
                    if($splitterAnterior)
                    {
                        $nombreSplitterAnterior = $splitterAnterior->getNombreElemento();
                    }

                    //INTERFACE SPLITTER ANTERIOR
                    $interfaceSplitterAnterior  = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento',
                                                                           $servicioTecnicoAnterior->getInterfaceElementoConectorId());

                    //CAJA ANTERIOR
                    $cajaAnterior               = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                           $servicioTecnicoAnterior->getElementoContenedorId());
                    if($cajaAnterior)
                    {
                        $nombreCajaAnterior = $cajaAnterior->getNombreElemento();
                    }

                    $arrayDatosBackboneAnterior = array (
                                'mismosRecursos'                    => $mismosRecursos,
                                'mismosRecursosIp'                  => $mismosRecursosIp,
                                'diferenteTecnologia'               => $diferenteTecnologia,
                                'nombreElementoContenedor'          => ($cajaAnterior) ? $nombreCajaAnterior : "NA",
                                'idElementoContenedor'              => ($cajaAnterior) ? $cajaAnterior->getId() : "NA",
                                'nombreElemento'                    => ($oltAnterior) ? $nombreOltAnterior : "NA",
                                'idElemento'                        => ($oltAnterior) ? $oltAnterior->getId() : "NA",
                                'nombreInterfaceElemento'           => ($interfaceOltAnterior) ?
                                                                            $interfaceOltAnterior->getNombreInterfaceElemento() : "NA",
                                'idInterfaceElemento'               => ($interfaceOltAnterior) ? $interfaceOltAnterior->getId() : "NA",
                                'nombreElementoConector'            => ($splitterAnterior) ? $nombreSplitterAnterior : "NA",
                                'idElementoConector'                => ($splitterAnterior) ? $splitterAnterior->getId() : "NA",
                                'nombreInterfaceElementoConector'   => ($interfaceSplitterAnterior) ?
                                                                            $interfaceSplitterAnterior->getNombreInterfaceElemento() : "NA",
                                'idInterfaceElementoConector'       => ($interfaceSplitterAnterior) ?  $interfaceSplitterAnterior->getId() : "NA",
                                'nombreModeloElemento'              => ($oltAnterior) ?
                                                                            $oltAnterior->getModeloElementoId()->getNombreModeloElemento() : "NA",
                                'ipElemento'                        => ($ipAnterior) ? $ipAnterior->getIp() : "NA");
                }//if($traslado)


                // =========================================================================================================================
                // >>> BEGIN MIGRACION
                // =========================================================================================================================
                if($servicio['idSolicitudMigracion'])
                {
                    $entityServicioTecnico  = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneByServicioId($servicio['idServicio']);

                    if($servicio['estadoSolicitudMigracion'] == 'AsignadoTarea')
                    {
                        // Se obtiene el elemento L2 Huawei Basado en el elemento L2 Actual
                        $elementoHuaweiL2  = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                               ->findOneBy(array('refElementoId'=>$entityServicioTecnico->getElementoConectorId()));

                        if($elementoHuaweiL2)
                        {

                            $arrayHuaweiOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                ->getElementoPadre($elementoHuaweiL2->getId(), 'ELEMENTO', 'OLT');
                            if ($arrayHuaweiOlt)
                            {
                                $entityElementoOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                       ->find($arrayHuaweiOlt[0]['IDELEMENTO']);

                                // se obtiene OLT > INTERFACE
                                $entityElementoInterface     =  $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                  ->findOneById($arrayHuaweiOlt[0]['IDINTERFACEELEMENTO']);

                                $ipOlt                       =  $emComercial->getRepository('schemaBundle:InfoIp')
                                                                            ->findOneBy(array("elementoId" => $entityElementoOlt->getId()));

                                //CAJA MIGRACION
                                $cajaMigracion = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                          $entityServicioTecnico->getElementoContenedorId());

                                $arrayDatosBackboneMigracion = array (
                                    'mismosRecursos'                  => 'NO',
                                    'mismosRecursosIp'                => 'NO',
                                    'diferenteTecnologia'             => 'SI',

                                    'idElementoContenedor'            => ($cajaMigracion) ? $cajaMigracion->getId() : "NA",
                                    'nombreElementoContenedor'        => ($cajaMigracion) ? $cajaMigracion->getNombreElemento() : "NA",

                                    // OLT
                                    'idElemento'                      => ($entityElementoOlt) ? $entityElementoOlt->getId() : "NA",
                                    'nombreElemento'                  => ($entityElementoOlt) ? $entityElementoOlt->getNombreElemento() : "NA",
                                    // OLT - INTERFACE
                                    'idInterfaceElemento'             => ($entityElementoInterface) ? $entityElementoInterface->getId() : "NA",
                                    'nombreInterfaceElemento'         => ($entityElementoInterface) ?
                                                                          $entityElementoInterface->getNombreInterfaceElemento() : "NA",

                                    // SPLITTER
                                    'idElementoConector'              => ($elementoHuaweiL2) ? $elementoHuaweiL2->getId() : "NA",
                                    'nombreElementoConector'          => ($elementoHuaweiL2) ? $elementoHuaweiL2->getNombreElemento() : "NA",
                                    // SPLITTER > INTERFACE
                                    'idInterfaceElementoConector'     => 0,
                                    'nombreInterfaceElementoConector' => "NA",

                                    'nombreModeloElemento'            => ($entityElementoOlt) ?
                                                                          $entityElementoOlt->getModeloElementoId()->getNombreModeloElemento() : "NA",
                                    'ipElemento'                      => ($ipOlt) ? $ipOlt->getIp() : "NA");
                            }
                        }
                    }
                    else if($servicio['estadoSolicitudMigracion'] == 'Asignada')
                    {
                        // Se obtiene el elemento L2 Huawei Basado en el elemento L2 Actual
                        $elementoHuaweiL2  = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                      $entityServicioTecnico->getElementoConectorId());
                        $intRefElementoId  = $elementoHuaweiL2->getRefElementoId();
                        if(!empty($intRefElementoId))
                        {
                            // Se obtiene el elemento L2 Huawei Basado en el elemento L2 Actual
                            $elementoTellionL2  = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                           $elementoHuaweiL2->getRefElementoId());

                            if(is_object($elementoTellionL2))
                            {
                                $objServicioProdCarac   = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                             "INTERFACE ELEMENTO TELLION",
                                                                                                             $producto);
                                $objInterfaceTellionOlt = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento',
                                                                                   $objServicioProdCarac->getValor());
                                $objElementoTellionOlt  = $objInterfaceTellionOlt->getElementoId();

                                if (is_object($objElementoTellionOlt))
                                {

                                    $ipOlt                       =  $emComercial->getRepository('schemaBundle:InfoIp')
                                                                                ->findOneBy(array("elementoId" => $objElementoTellionOlt->getId()));

                                    //CAJA MIGRACION
                                    $cajaMigracion = $emInfraestructura->find('schemaBundle:InfoElemento',
                                                                              $entityServicioTecnico->getElementoContenedorId());

                                    $arrayDatosBackboneAnterior = array (
                                        'mismosRecursos'                    => 'NO',
                                        'mismosRecursosIp'                  => 'NO',
                                        'diferenteTecnologia'               => 'SI',

                                        'idElementoContenedor'              => ($cajaMigracion) ? $cajaMigracion->getId() : "NA",
                                        'nombreElementoContenedor'          => ($cajaMigracion) ? $cajaMigracion->getNombreElemento() : "NA",

                                        // OLT
                                        'idElemento'                        => ($objElementoTellionOlt) ? $objElementoTellionOlt->getId() : "NA",
                                        'nombreElemento'                    => ($objElementoTellionOlt) ?
                                                                                $objElementoTellionOlt->getNombreElemento() : "NA",
                                        // OLT - INTERFACE
                                        'idInterfaceElemento'               => ($objInterfaceTellionOlt) ? $objInterfaceTellionOlt->getId() : "NA",
                                        'nombreInterfaceElemento'           => ($objInterfaceTellionOlt) ?
                                                                                $objInterfaceTellionOlt->getNombreInterfaceElemento() : "NA",

                                        // SPLITTER
                                        'idElementoConector'                => ($elementoHuaweiL2) ? $elementoHuaweiL2->getId() : "NA",
                                        'nombreElementoConector'            => ($elementoHuaweiL2) ? $elementoHuaweiL2->getNombreElemento() : "NA",
                                        // SPLITTER > INTERFACE
                                        'idInterfaceElementoConector'       => 0,
                                        'nombreInterfaceElementoConector'   => "NA",

                                        'nombreModeloElemento'              => ($objElementoTellionOlt) ?
                                                                                $objElementoTellionOlt->getModeloElementoId()
                                                                                                      ->getNombreModeloElemento() : "NA",
                                        'ipElemento'                        => ($ipOlt) ? $ipOlt->getIp() : "NA");
                                }
                            }
                        }
                    }
                }
                // =========================================================================================================================
                // >>> END MIGRACION
                // =========================================================================================================================

                if($idEmpresa == $codEmpresa && $servicio['ultimaMilla'] = 'Fibra Optica')
                {
                    $puntoActual = $servicio['idPunto'];
                    if($puntoActual == $puntoVigente)
                    {
                        if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)
                        {
                            //guardo en el mismo arreglo de puntos
                            $datosBackboneArray = array('nombreElementoContenedor'          => $servicio['caja'],
                                                        'idElementoContenedor'              => $servicio['idCaja'],
                                                        'latitudElementoContenedor'         => $servicio['latitudCaja'],
                                                        'longitudElementoContenedor'        => $servicio['longitudCaja'],
                                                        'nombreElemento'                    => $servicio['nombreOlt'],
                                                        'idElemento'                        => $servicio['idElemento'],
                                                        'nombreInterfaceElemento'           => $servicio['interfaceOlt'],
                                                        'idInterfaceElemento'               => $servicio['idInterfaceElemento'],
                                                        'nombreElementoConector'            => $servicio['splitter'],
                                                        'idElementoConector'                => $servicio['idSplitter'],
                                                        'nombreInterfaceElementoConector'   => $servicio['interfaceSplitter'],
                                                        'idInterfaceElementoConector'       => $servicio['idInterfaceSplitter'],
                                                        'ipElemento'                        => $servicio['ipElemento'],
                                                        'nombreModeloElemento'              => $servicio['modeloElemento'],
                                                        'datosBackboneTraslado'             => $arrayDatosBackboneAnterior,
                                                        'datosBackboneMigracion'            => $arrayDatosBackboneMigracion);

                            $servicioArray[] = array(   'idServicio'            => $servicio['idServicio'],
                                                        'estado'                => $servicio['estadoServicio'],
                                                        'tipoServicio'          => $servicio['tipoOrden'],
                                                        'plan'                  => $nombrePlan,
                                                        'idPlan'                => $servicio['idPlan'],
                                                        'producto'              => $nombreProducto,
                                                        'idProducto'            => $idProducto,
                                                        'perfil'                => $servicio['perfil'],
                                                        'ultimaMilla'           => $servicio['ultimaMilla'],
                                                        'datosBackbone'         => $datosBackboneArray,
                                                        'encuesta'              => $tieneEncuesta,
                                                        'actaEntrega'           => $tieneActa,
                                                        'rutaGeorreferencial'   => $tieneRuta,
                                                        'idMigracion'           => $servicio['idSolicitudMigracion'],
                                                        'estadoSolMigracion'    => $servicio['estadoSolicitudMigracion'],
                                                        'estadoSolPlanifica'    => $servicio['estadoSolicitudPlanificacion'],
                                                        'materiales'            => $strTieneMateriales);

                            $puntoServiciosArray[$i - 1] = array(   'idPunto'           => $servicio['idPunto'],
                                                                    'feSolicitada'      => $servicio['feSolicitada'],
                                                                    'metraje'           => $arrayParametroMetraje,
                                                                    'login'             => $login,
                                                                    'cliente'           => $nombres,
                                                                    'idDetalle'         => $servicio['idDetalle'],
                                                                    'idComunicacion'    => $servicio['idComunicacion'],
                                                                    'direccion'         => $servicio['direccion'],
                                                                    'descripcion'       => $servicio['descripcionPunto'].$strObservacionDetalle,
                                                                    'latitud'           => $servicio['latitud'],
                                                                    'longitud'          => $servicio['longitud'],
                                                                    'servicios'         => $servicioArray);
                        }//if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)
                    }//if($puntoActual == $puntoVigente)
                    else
                    {
                        if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)
                        {
                            //creo un nuevo arreglo de puntos
                            $servicioArray = array();
                            $datosBackboneArray = array('nombreElementoContenedor'          => $servicio['caja'],
                                                        'idElementoContenedor'              => $servicio['idCaja'],
                                                        'latitudElementoContenedor'         => $servicio['latitudCaja'],
                                                        'longitudElementoContenedor'        => $servicio['longitudCaja'],
                                                        'nombreElemento'                    => $servicio['nombreOlt'],
                                                        'idElemento'                        => $servicio['idElemento'],
                                                        'nombreInterfaceElemento'           => $servicio['interfaceOlt'],
                                                        'idInterfaceElemento'               => $servicio['idInterfaceElemento'],
                                                        'nombreElementoConector'            => $servicio['splitter'],
                                                        'idElementoConector'                => $servicio['idSplitter'],
                                                        'nombreInterfaceElementoConector'   => $servicio['interfaceSplitter'],
                                                        'idInterfaceElementoConector'       => $servicio['idInterfaceSplitter'],
                                                        'ipElemento'                        => $servicio['ipElemento'],
                                                        'nombreModeloElemento'              => $servicio['modeloElemento'],
                                                        'datosBackboneTraslado'             => $arrayDatosBackboneAnterior,
                                                        'datosBackboneMigracion'            => $arrayDatosBackboneMigracion);

                            $servicioArray[] = array(   'idServicio'            => $servicio['idServicio'],
                                                        'estado'                => $servicio['estadoServicio'],
                                                        'tipoServicio'          => $servicio['tipoOrden'],
                                                        'plan'                  => $nombrePlan,
                                                        'idPlan'                => $servicio['idPlan'],
                                                        'producto'              => $nombreProducto,
                                                        'idProducto'            => $idProducto,
                                                        'perfil'                => $servicio['perfil'],
                                                        'ultimaMilla'           => $servicio['ultimaMilla'],
                                                        'datosBackbone'         => $datosBackboneArray,
                                                        'encuesta'              => $tieneEncuesta,
                                                        'actaEntrega'           => $tieneActa,
                                                        'rutaGeorreferencial'   => $tieneRuta,
                                                        'idMigracion'           => $servicio['idSolicitudMigracion'],
                                                        'estadoSolMigracion'    => $servicio['estadoSolicitudMigracion'],
                                                        'estadoSolPlanifica'    => $servicio['estadoSolicitudPlanificacion'],
                                                        'materiales'            => $strTieneMateriales);

                            $puntoServiciosArray[$i] = array(   'idPunto'           => $servicio['idPunto'],
                                                                'feSolicitada'      => $servicio['feSolicitada'],
                                                                'metraje'           => $arrayParametroMetraje,
                                                                'login'             => $login,
                                                                'cliente'           => $nombres,
                                                                'idDetalle'         => $servicio['idDetalle'],
                                                                'idComunicacion'    => $servicio['idComunicacion'],
                                                                'direccion'         => $servicio['direccion'],
                                                                'descripcion'       => $servicio['descripcionPunto'].$strObservacionDetalle,
                                                                'latitud'           => $servicio['latitud'],
                                                                'longitud'          => $servicio['longitud'],
                                                                'servicios'         => $servicioArray);
                        }//if(($servicio['idPlan']==null || $servicio['idProductoTecnico']!=null) || $servicio['idProducto']!=null)

                        $puntoVigente = $servicio['idPunto'];
                        $i++;
                    }//else

                    $nombrePlan = "";
                    $nombreProducto = "";
                }//if($idEmpresa == $codEmpresa && $servicio['ultimaMilla'] = 'Fibra Optica')
            }
            if(!$puntoServiciosArray)
            {
                $resultado['status']  = $this->status['NULL'];
                $resultado['mensaje'] = $this->mensaje['NULL'];
                return $resultado;
            }
        }
        catch(Exception $e)
        {
            $resultado['status']  = $this->status['ERROR'];
            $resultado['mensaje'] = $this->mensaje['NULL'];
        }

        $resultado['puntos']  = array_values($puntoServiciosArray);
        $resultado['status']  = $this->status['OK'];
        $resultado['mensaje'] = $this->mensaje['OK'];
        return $resultado;
    }


    /**
     * Funcion que sirve para obtener los retiros de equipos que tiene
     * asignado un Empleado
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 27/12/2016
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 24/11/2017 - Antes de listar los retiros de equipos consulto el estado de la tarea no hubiere sido
     *                           finalizado.
     *
     * @param Array $arrayData [
     *                           - data  Filtros empleados para consultar de información
     *                                   [
     *                                      - codEmpresa      Empresa a la que pertenece el cliente consultado
     *                                      - loginAsignado   Login de empleado del cual se recuperaran solicitudes
     *                                                        de retiros de equipos
     *                                   ]
     * @return Array $arrayRespuesta
     * [
     *  - status      Estado de la transaccion ejecutada
     *  - mensaje     Mensaje de la transaccion ejecutada
     *  - data        [    - idDetalleSolicitud       Identificador de solicitud de retiro de equipos
     *                     - idServicio               Identificador de servicio a procesar
     *                     - fechaActivacionServicio  Fecha de Activacion de servicio
     *                     - buscaCpeNaf              Bandera que indica si un servicio debe ser consultado en el naf
     *                                                para el procesamiento de la solicitud
     *                     - idPunto                  Identificador del punto del servicio a procesar
     *                     - cliente                  Nombre del cliente del cual se procesara la solicitud de retiro
     *                                                de equipo
     *                     - esRecontratacion         Cadena de caracteres que indica si un servicio es recontratacion
     *                     - tercerizadora            Cadena de caracteres que indica el nombre de tercerizadora segun el
     *                                                servicio procesado
     *                     - login                    Cadena de caracteres que indica el login del servicio a procesar
     *                     - tipoOrden                Cadena de caracteres que indica el tipo de orden del servicio a procesar
     *                     - producto                 Cadena de caracteres que indica el nombre de producto o plan del
     *                                                servicio a procesar
     *                     - coordenadas              Cadena de caracteres que indica la coordenada del servicio a procesar
     *                     - direccion                Cadena de caracteres que indica la direccion del login a procesar
     *                     - ciudad                   Cadena de caracteres que indica la ciudad del login a procesar
     *                     - nombreSector             Cadena de caracteres que indica el nombre del sector del login a procesar
     *                     - idDetalleSolHistorial    Identificador de historial de servicio
     *                     - feIniPlan                Cadena de caracteres que indican la fecha de inicio de planificacion
     *                     - feFinPlan                Cadena de caracteres que indican la fecha de fin de planificacion
     *                     - latitud                  Cadena de caracteres que indica la latitud del login a procesar
     *                     - longitud                 Cadena de caracteres que indica la longitud del login a procesar
     *                     - elementosPorSolicitud    [  - idSolCaract      Identificador de caracteristica de solicitud
     *                                                   - tipoElemento     Cadena de caracteres que indica el tipo de elemento a retirar
     *                                                   - nombreElemento   Cadena de caracteres que indica el nombre del elemento a retirar
     *                                                   - idElemento       Identificador del elemento a retirar
     *                                                ]
     *                   ]
     * ]
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 25/02/2018 - Se filtra por el id servicio .
     *
     */
    private function getRetirosPorEmpleado($arrayData)
    {
        $strFechaComparacionBusquedaNaf = "";
        $emGeneral                      = $this->getDoctrine()->getManager("telconet_general");
        $arrayResultado                 = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getResultadoDetallesParametro('FECHA_COMPARACION_NAF_RETIRO',"","");

        $arrayAdmiParametrosDet         = $arrayResultado['registros'];
        $arrayEquiposARetirar           = array();
        if( $arrayAdmiParametrosDet )
        {
            foreach( $arrayAdmiParametrosDet as $arrayParametroDet )
            {
                $strFechaComparacionBusquedaNaf = $arrayParametroDet["valor1"];
            }
        }

        $arrayParametros = array( 'strCodEmpresa'                  => $arrayData['data']['codEmpresa'],
                                  'idServicio'                     => $arrayData['data']['idServicio'],
                                  'codEmpresa'                     => $arrayData['data']['codEmpresa'],
                                  'strLoginAsignado'               => $arrayData['data']['loginAsignado'],
                                  'strFechaComparacionBusquedaNaf' => $strFechaComparacionBusquedaNaf
                                );

        //ejecución de service para recuperar información de cliente
        $serviceRetiroEquipo        = $this->get('planificacion.RetiroEquipo');
        $arrayResultadoObtenerInfo  = $serviceRetiroEquipo->generarSolicitudesRetirarEquipoWs($arrayParametros);
        //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
        foreach($arrayResultadoObtenerInfo['arrayData'] as $arrayEquiposRetirar)
        {
            $serviceSoporte    = $this->get('soporte.SoporteService');
            $arrayEstadoTarea  = $serviceSoporte->obtenerEstadoTarea($arrayEquiposRetirar['idComunicacion']);
            if(!empty($arrayEstadoTarea['estado']) && $arrayEstadoTarea['estado'] != "Cerrada")
            {
                    $arrayEquiposARetirar[] = $arrayEquiposRetirar;
            }
        }
        $arrayRespuesta['data']    = $arrayEquiposARetirar;
        $arrayRespuesta['status']  = $arrayResultadoObtenerInfo['strStatus'];
        $arrayRespuesta['mensaje'] = $arrayResultadoObtenerInfo['strMensaje'];
        return $arrayRespuesta;
    }

    /**
     * Función que actualiza la vlan para un conjunto de servicios enviados como parámetro
     *
     * @author: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 18-07-2019
     *
     * @param array $arrayData
     *
     * @return array $arrayResultado
     */
    private function putActualizarVlan($arrayData)
    {
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emGeneral                  = $this->getDoctrine()->getManager("telconet_general");
        $serviceUtil                = $this->get('schema.Util');
        $serviceServicioTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $strMensaje                 = "";
        $intVlanAnterior            = "";
        $intVlan                    = "";
        $intRefVlanNueva            = "";
        $intElementoId              = "";
        $arrayServicios             = array();
        $arrayParametrosWs          = array();
        $intContador                = 0;
        $strObsHistorial            = "";
        $intIdPe                    = 0;
        $objAnillo                  = null;
        $strAnillo                  = "";
        $strUser                    = $arrayData['user'];
        $strIpCreacion              = $arrayData['source']['originID'];
        $serviceTecnico             = $this->get('tecnico.InfoServicioTecnico');

        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();

        try
        {
            $arrayServicios = $arrayData['data']['servicios'];
            $intVlan        = $arrayData['data']['vlan'];

            if(!empty($arrayServicios) && !empty($intVlan))
            {
                if(!is_numeric($intVlan))
                {
                    $arrayResultado['status']  = "OK";
                    $arrayResultado['mensaje'] = "El valor de la vlan tiene que ser numerico";

                    return $arrayResultado;
                }

                if(count($arrayServicios) > 0)
                {
                    //Obtener rango de vlans
                    $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('PARAMETROS PROYECTO SEGMENTACION VLAN',
                                                                 'INFRAESTRUCTURA',
                                                                 'ASIGNAR RECURSOS DE RED',
                                                                 'RANGO_VLANS',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '');

                    if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]) &&
                        isset($arrayValoresParametros["valor2"]) && !empty($arrayValoresParametros["valor2"]))
                    {
                        $strMsgValidacion = "El valor de la vlan tiene que estar dentro del rango ".$arrayValoresParametros["valor1"].""
                                          . " - ".$arrayValoresParametros["valor2"];

                        if($intVlan < $arrayValoresParametros["valor1"] || $intVlan > $arrayValoresParametros["valor2"])
                        {
                            $arrayResultado['status']  = "OK";
                            $arrayResultado['mensaje'] = $strMsgValidacion;

                            return $arrayResultado;
                        }
                    }

                    foreach($arrayServicios as $arrayIdxServicio)
                    {
                        if($arrayIdxServicio)
                        {
                            $intIdServicio = $arrayIdxServicio;

                            //Obtener el producto
                            $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);


                            //Obtener el servicio_tecnico
                            $objInfoServicioTecnico = $emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                                                        ->findOneBy(array("servicioId" => $intIdServicio));

                            //Se obtiene el switch
                            if(is_object($objInfoServicioTecnico))
                            {
                                $intElementoId = $objInfoServicioTecnico->getElementoId();

                                $arrayParametrosWs["intIdElemento"] = $intElementoId;
                                $arrayParametrosWs["intIdServicio"] = $intIdServicio;

                                //Se obtiene el PE
                                $objElementoPe = $serviceTecnico->getPeBySwitch($arrayParametrosWs);

                                if(is_object($objElementoPe))
                                {
                                    $intIdPe = $objElementoPe->getId();

                                    //Se consulta el valor referencial de la vlan nueva
                                    $objInfoDetalleElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                ->findOneBy(array("detalleDescripcion" => "VLAN PE",
                                                                                                  "detalleNombre"      => "VLAN",
                                                                                                  "detalleValor"       => $intVlan,
                                                                                                  "elementoId"         => $intIdPe));
                                    if(is_object($objInfoDetalleElemento))
                                    {
                                        $intRefVlanNueva = $objInfoDetalleElemento->getId();

                                        //Se cambia a estado reservada la vlan
                                        $objInfoDetalleElemento->setEstado("Reservada");
                                        $emInfraestructura->persist($objInfoDetalleElemento);
                                        $emInfraestructura->flush();
                                    }
                                }

                                //Se consulta el anillo
                                $objAnillo  = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                ->findOneBy(array("elementoId"    => $intElementoId,
                                                                                  "detalleNombre" => "ANILLO",
                                                                                  "estado"        => "Activo"));
                                if(is_object($objAnillo))
                                {
                                    $strAnillo = $objAnillo->getDetalleValor();
                                }
                            }

                            if(is_object($objInfoServicio) && $strAnillo == "0" &&
                              ($objInfoServicio->getEstado() === "Activo" || $objInfoServicio->getEstado() === "In-Corte"))
                            {
                                $objAdmiProducto   = $objInfoServicio->getProductoId();

                                if(is_object($objAdmiProducto))
                                {
                                    $objServProdCaract = $serviceServicioTecnico->getServicioProductoCaracteristica($objInfoServicio,
                                                                                                                    "VLAN",
                                                                                                                    $objAdmiProducto);
                                }

                                if($objAdmiProducto->getNombreTecnico() == "L3MPLS" || $objAdmiProducto->getNombreTecnico() == "CONCINTER" ||
                                    $objAdmiProducto->getNombreTecnico() == "DATOSDC")
                                {
                                    if(is_object($objServProdCaract))
                                    {
                                        $objPerEmpRolCarVlan = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                           ->find($objServProdCaract->getValor());

                                        if($objPerEmpRolCarVlan)
                                        {
                                            //Se consulta el valor de la vlan anterior
                                            $objInfoDetalleElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                        ->find($objPerEmpRolCarVlan->getValor());

                                            if(is_object($objInfoDetalleElemento))
                                            {
                                                $intVlanAnterior = $objInfoDetalleElemento->getDetalleValor();

                                                $strObsHistorial = "<b>Se realiza actualización de vlan por migración masiva:</b><br>"
                                                                 . "VLAN Anterior: ".$intVlanAnterior."<br>"
                                                                 . "VLAN Nueva: ".$intVlan;

                                                if(!empty($intRefVlanNueva))
                                                {
                                                    //Se valida que la nueva vlan ya este asociada al cliente
                                                    $objPersonaEmpNuevaVlan = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                          ->findOneBy(array(
                                                                                                      "valor"               => $intRefVlanNueva,
                                                                                                      "personaEmpresaRolId" => $objPerEmpRolCarVlan
                                                                                                                          ->getPersonaEmpresaRolId(),
                                                                                                      "estado"              => "Activo"));
                                                    //Si el registro existe se obtiene el id
                                                    if(is_object($objPersonaEmpNuevaVlan))
                                                    {
                                                        $intRefEmpRolCaracVlanNueva = $objPersonaEmpNuevaVlan->getId();
                                                    }
                                                    //caso contrario se crea la relación de la vlan y el cliente
                                                    else
                                                    {
                                                        //Se genera una nueva info_persona_empresa_rol_carac
                                                        $objInfoPersonaEmpresaRolCarac = new InfoPersonaEmpresaRolCarac();
                                                        $objInfoPersonaEmpresaRolCarac->setPersonaEmpresaRolId($objPerEmpRolCarVlan
                                                                                      ->getPersonaEmpresaRolId());
                                                        $objInfoPersonaEmpresaRolCarac->setCaracteristicaId($objPerEmpRolCarVlan
                                                                                                            ->getCaracteristicaId());
                                                        $objInfoPersonaEmpresaRolCarac->setValor($intRefVlanNueva);
                                                        $objInfoPersonaEmpresaRolCarac->setFeCreacion(new \DateTime('now'));
                                                        $objInfoPersonaEmpresaRolCarac->setUsrCreacion($strUser);
                                                        $objInfoPersonaEmpresaRolCarac->setIpCreacion($strIpCreacion);
                                                        $objInfoPersonaEmpresaRolCarac->setEstado("Activo");
                                                        $emComercial->persist($objInfoPersonaEmpresaRolCarac);
                                                        $emComercial->flush();

                                                        $intRefEmpRolCaracVlanNueva = $objInfoPersonaEmpresaRolCarac->getId();
                                                    }

                                                    if(!empty($intRefEmpRolCaracVlanNueva))
                                                    {
                                                        //Se actualiza el valor de la vlan
                                                        $objServProdCaract->setValor($intRefEmpRolCaracVlanNueva);
                                                        $emComercial->persist($objServProdCaract);
                                                        $emComercial->flush();

                                                        //Se registra historial del servicio
                                                        $objServicioHistorial = new InfoServicioHistorial();
                                                        $objServicioHistorial->setServicioId($objInfoServicio);
                                                        $objServicioHistorial->setIpCreacion($strIpCreacion);
                                                        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                                        $objServicioHistorial->setUsrCreacion($strUser);
                                                        $objServicioHistorial->setEstado($objInfoServicio->getEstado());
                                                        $objServicioHistorial->setObservacion($strObsHistorial);
                                                        $emComercial->persist($objServicioHistorial);
                                                        $emComercial->flush();

                                                        $intContador = $intContador + 1;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if(is_object($objServProdCaract))
                                    {
                                        //Se consulta el valor de la vlan anterior
                                        $objInfoDetalleElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                    ->find($objServProdCaract->getValor());

                                        if(is_object($objInfoDetalleElemento))
                                        {
                                            $intVlanAnterior = $objInfoDetalleElemento->getDetalleValor();

                                            $strObsHistorial = "<b>Se realiza actualización de vlan por migración masiva:</b><br>"
                                                             . "VLAN Anterior: ".$intVlanAnterior."<br>"
                                                             . "VLAN Nueva: ".$intVlan;

                                            if(!empty($intRefVlanNueva))
                                            {
                                                //Se actualiza el valor de la vlan
                                                $objServProdCaract->setValor($intRefVlanNueva);
                                                $emComercial->persist($objServProdCaract);
                                                $emComercial->flush();

                                                //Se registra historial del servicio
                                                $objServicioHistorial = new InfoServicioHistorial();
                                                $objServicioHistorial->setServicioId($objInfoServicio);
                                                $objServicioHistorial->setIpCreacion($strIpCreacion);
                                                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                                                $objServicioHistorial->setUsrCreacion($strUser);
                                                $objServicioHistorial->setEstado($objInfoServicio->getEstado());
                                                $objServicioHistorial->setObservacion($strObsHistorial);
                                                $emComercial->persist($objServicioHistorial);
                                                $emComercial->flush();

                                                $intContador = $intContador + 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    $strMensaje = $intContador . " servicios actualizados";
                }
                else
                {
                    $strMensaje = "0 servicios actualizados";
                }
            }
            else
            {
                $strMensaje = "parametros incompletos!!";
            }

            if($intContador > 0)
            {
                $emComercial->getConnection()->commit();
                $emInfraestructura->getConnection()->commit();
            }

            $arrayResultado['status']  = "OK";
            $arrayResultado['mensaje'] = $strMensaje;
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError('Telcos+',
                                      'TecnicoWSController.putActualizarVlan',
                                      $ex->getMessage(),
                                      $strUser,
                                      $strIpCreacion);

            $arrayResultado['data']    = null;
            $arrayResultado['status']  = "ERROR";
            $arrayResultado['mensaje'] = "Se presento un error, favor notificar a Sistemas";

            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
            }

            if ($emInfraestructura->getConnection()->isTransactionActive())
            {
                $emInfraestructura->getConnection()->rollback();
            }
        }

        $emComercial->getConnection()->close();
        $emInfraestructura->getConnection()->close();

        return $arrayResultado;
    }

    /**
     * Funcion que sirve para validar la información del elemento a retirar mediante una solicitud
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 28/12/2016
     *
     * @param Array $arrayData [
     *                           - data  Filtros empleados para consultar de información
     *                                   [
     *                                      - prefijoEmpresa      Cadena de caracteres que indica el prefijo de la empresa
     *                                      - idEmpresa           Cadena de caracteres que indica el id de la empresa
     *                                      - idServicio          Identificador de servicio
     *                                      - modeloCpe           Cadena de caracteres que indica el modelo de cpe
     *                                      - estadoCpe           Cadena de caracteres que indica el estado de cpe
     *                                      - bandera             Cadena de caracteres que indica bandera usada en proceso de consulta de información
     *                                      - serieCpe            Cadena de caracteres que indica la serie del cpe
     *                                      - idElementoCpe       Identificador de elemento cpe
     *                                   ]
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *  - status      Cadena de caracteres que indica el estado de la transaccion ejecutada
     *  - mensaje     Cadena de caracteres que indica el mensaje de la transaccion ejecutada
     *  - data        [ - macCpe            Cadena de caracteres que indica la mac del elemento consultado
     *                  - modoCpe           Cadena de caracteres que indica el modo del elemento consultado
     *                  - nombreCpe         Cadena de caracteres que indica el nombre del elemento consultado
     *                  - descripcionCpe    Cadena de caracteres que indica la descripcion del elemento consultado
     *                ]
     * ]
     */
    private function getValidaCpeNaf($arrayData)
    {
        $arrayParametros = array( 'strPrefijoEmpresa' => $arrayData['data']['prefijoEmpresa'],
                                  'intIdEmpresa'      => $arrayData['data']['idEmpresa'],
                                  'intIdServicio'     => $arrayData['data']['idServicio'],
                                  'strModeloCpe'      => $arrayData['data']['modeloCpe'],
                                  'strEstadoCpe'      => $arrayData['data']['estadoCpe'],
                                  'strBandera'        => $arrayData['data']['bandera'],
                                  'strSerieCpe'       => $arrayData['data']['serieCpe'],
                                  'intIdElementoCpe'  => $arrayData['data']['idElementoCpe'],
                                );

        //ejecución de service para recuperar información de cliente
        $serviceRetiroEquipo        = $this->get('planificacion.RetiroEquipo');
        $arrayResultadoObtenerInfo  = $serviceRetiroEquipo->buscarCpeNaf($arrayParametros);
        $arrayDescripcion = explode(',', $arrayResultadoObtenerInfo['strDescripcionCpe']);

        //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
        $arrayResultadoObtenerInfo['arrayData']['macCpe']         = $arrayResultadoObtenerInfo['strMacCpe'];
        $arrayResultadoObtenerInfo['arrayData']['modoCpe']        = $arrayResultadoObtenerInfo['strModoCpe'];
        $arrayResultadoObtenerInfo['arrayData']['nombreCpe']      = $arrayResultadoObtenerInfo['strNombreCpe'];
        $arrayResultadoObtenerInfo['arrayData']['modeloCpe']      = $arrayDescripcion[2];
        $arrayResultadoObtenerInfo['arrayData']['descripcionCpe'] = $arrayResultadoObtenerInfo['strDescripcionCpe'];
        $arrayRespuesta['data']    = $arrayResultadoObtenerInfo['arrayData'];
        $arrayRespuesta['status']  = $arrayResultadoObtenerInfo['strStatus'];
        $arrayRespuesta['mensaje'] = $arrayResultadoObtenerInfo['strMensaje'];
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para validar la información del elemento a retirar mediante una solicitud
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 28/12/2016
     *
     * @param Array $arrayData [
     *                           - data  Filtros empleados para consultar de información
     *                                   [
     *                                     - codEmpresa       Cadena de caracteres que indica la empresa a procesar
     *                                     - prefijoEmpresa   Cadena de caracteres que indica el prefijo de la empresa
     *                                     - idSolicitud      Identificador de solicitud de retiro de equipo
     *                                     - firmaCliente64   Cadena de caracteres que indica la firma codificada del cliente
     *                                     - firmaEmpleado64  Cadena de caracteres que indica la firma codificada del empleado
     *                                     - datosElementos   Cadena de caracteres que indica los elementos a retirar
     *                                     - usrCreacion      Cadena de caracteres que indica el usuario que ejecuta el retiro
     *                                     - ipCreacion       Cadena de caracteres que indica la ip desde donde se ejecuta el retiro
     *                                     - nombreEmpleado   Cadena de caracteres que indica nombre del empleado que gestiona retiro
     *                                     - cedulaEmpleado   Cadena de caracteres que indica cedula del empleado que gestiona retiro
     *                                     - nombreCliente    Cadena de caracteres que indica nombre del cliente que gestiona retiro
     *                                     - cedulaCliente    Cadena de caracteres que indica cedula del cliente que gestiona retiro
     *                                     - observaciones    Cadena de caracteres que indica observaciones del cliente que gestiona retiro
     *                                     - buscarCpeNaf     Cadena de caracteres que indica si se debe realizar busqueda de equipos en NAF
     *                                     - idResponsable    Identificador de responsable de retiro de equipo
     *                                   ]
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *  - status      Cadena de caracteres que indica el estado de la transaccion ejecutada
     *  - mensaje     Cadena de caracteres que indica el mensaje de la transaccion ejecutada
     * ]
     *
     * @author Modificado: Sofia Fernandez <sfernandez@telconet.ec>
     * @version 1.1 16-11-2017 - Se agrega validacion por origen de la ejecucion M (Mobile, generacion de acta de retiro ),
     *                           N (NAF, finalizacion de retiro de equipos).
     *
     * @author Modificado: Jhon Vera <javera@telconet.ec>
     * @version 1.2 25-05-2018 - Finalizar retiro de equipo.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.3 02-06-2020 - Se modifica código para crear nueva estructura de archivos.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 12-11-2020 - Almacenar el pdf en el NFS remoto.
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.5 16-06-2021 - Se agrega lógica para dar de baja los equipos en el 
     * nodo cuando el servicio este cancelado.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.6 21-02-2022 - Se realiza la carga y descarga de activo para lo servicios GPON MPLS.
     *
     */
    private function finalizaRetiroEquipo($arrayData)
    {

        $strIdEmpresa       = $arrayData['data']['codEmpresa'];
        $intIdCliente       = $arrayData['data']['idPersonaCliente'];
        $arrayEquiposNodo   = $arrayData['data']['equiposNodo'];
        $arrayEquiposCliente= $arrayData['data']['datosElementos']['elementos'];
        $strUsuario         = $arrayData['user'];
        $strIpUsuario       = '127.0.0.1';
        $intIdServicio      = $arrayData['data']['idServicio'];
        $intIdEmpleado      = $arrayData['data']['idPersonaEmpleado']; 
        $emComercial        = $this->getDoctrine()->getManager("telconet");
        $serviceUtil        = $this->get('schema.Util');
        $emFinan            = $this->getDoctrine()->getManager("telconet_financiero");
        $emNaf              = $this->getDoctrine()->getManager("telconet_naf");
        $emGeneral          = $this->getDoctrine()->getManager('telconet_general');
        $serviceElemento    = $this->get('tecnico.InfoElemento');
        $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
        $strCodigoPostal    = '593';
        $strOrigenAccion    = 'tareas';

        try
        {

            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $serviceUtil        = $this->get('schema.Util');
            $emFinan            = $this->getDoctrine()->getManager("telconet_financiero");
            $strCodigoPostal    = '593';
            $strOrigenAccion    = 'tareas';
            $emNaf->getConnection()->beginTransaction();
            
            //obtener los datos y departamento de la persona por empresa
            $arrayDatos = $emComercial->getRepository('schemaBundle:InfoPersona')
                                      ->getPersonaDepartamentoPorUserEmpresa($arrayData['data']['usrCreacion'],
                                                                             $arrayData['data']['codEmpresa']);

            //ejecución de service para recuperar información de cliente
            $serviceRetiroEquipo = $this->get('planificacion.RetiroEquipo');

            if(isset($arrayData['bandNfs']) && $arrayData['bandNfs'])
            {
                $strAplicacion = $arrayData['strFolderApplication'];
            }
            else
            {
                $arrayParametrosFilePath = array(
                                                    'strCodigoPostal'       => $strCodigoPostal,
                                                    'strPrefijoEmpresa'     => $arrayData['data']['prefijoEmpresa'],
                                                    'strFolderApplication'  => $arrayData['strFolderApplication'],
                                                    'strController'         => 'Tecnico',
                                                    'strOrigenAccion'       => $strOrigenAccion,
                                                    'strExt'                => ''
                                                );

                $strRutaFisicaCompleta = $serviceUtil->createNewFilePath($arrayParametrosFilePath);
            }


            if ($arrayData['data']['origen']=='M')
            {
                $arrayParametros = array('strCodEmpresa'            => $arrayData['data']['codEmpresa'],
                                         'strPrefijoEmpresa'        => $arrayData['data']['prefijoEmpresa'],
                                         'intIdSolicitud'           => $arrayData['data']['idSolicitud'],
                                         'strFirmaCliente64'        => $arrayData['data']['firmaCliente64'],
                                         'strFirmaEmpleado64'       => $arrayData['data']['firmaEmpleado64'],
                                         'arrayDatosElementos'      => $arrayData['data']['datosElementos'],
                                         'strUsrCreacion'           => $arrayData['data']['usrCreacion'],
                                         'strIpCreacion'            => $arrayData['data']['ipCreacion'],
                                         'strFeCreacion'            => new \DateTime('now'),
                                         'strObservaciones'         => $arrayData['data']['observaciones'],
                                         'strNombreEmpleado'        => $arrayDatos['NOMBRES'].' '.$arrayDatos['APELLIDOS'],
                                         'strCedulaEmpleado'        => $arrayDatos['IDENTIFICACION_CLIENTE'],
                                         'strNombreCliente'         => $arrayData['data']['nombreCliente'],
                                         'strCedulaCliente'         => $arrayData['data']['cedulaCliente'],
                                         'intIdDetalle'             => $arrayData['data']['intIdDetalle'],
                                         'strRutaFisicaCompleta'    => $strRutaFisicaCompleta,
                                         'strAplicacion'            => $strAplicacion,
                                         'bandNfs'                  => $arrayData['bandNfs'],
                                         'strOrigenAccion'          => $strOrigenAccion
                                        );

                $arrayResultadoProcesarActa = $serviceRetiroEquipo->grabarActaRetiroEquipo($arrayParametros);

                if($arrayResultadoProcesarActa['strStatus'] == "OK")
                {
                    $objInfoServicio  = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

                    //verificar si es gpon mpls
                    if(is_object($objInfoServicio) && is_object($objInfoServicio->getProductoId()))
                    {
                        $objCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio,
                                                                                               'TIPO_RED',
                                                                                               $objInfoServicio->getProductoId());
                        if(is_object($objCaractTipoRed))
                        {
                            $arrayParVerTipoRedPun = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        'VERIFICAR TIPO RED',
                                                                        'VERIFICAR_GPON',
                                                                        $objCaractTipoRed->getValor(),
                                                                        '',
                                                                        '',
                                                                        '');
                            if(isset($arrayParVerTipoRedPun) && !empty($arrayParVerTipoRedPun))
                            {
                                //Carga y descarga de equipos en cliente
                                for($intIndex = 0; $intIndex < count($arrayEquiposCliente); $intIndex++)
                                {
                                    $strTipoElementoActual          = $arrayEquiposCliente[$intIndex]['tipoElemento'];
                                    $strSerieElementoActual         = $arrayEquiposCliente[$intIndex]['serieElemento'];
                                    $strModeloElementoloActual      = $arrayEquiposCliente[$intIndex]['modeloElemento'];

                                    //Descarga Cliente y Carga Empleado, equipos del cliente en el nodo.
                                    $arrayActivosCliente = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                    ->obtenerEquiposAsignados(array('strIdEmpresa'    =>  $strIdEmpresa,
                                                                    'intIdPersona'    =>  $intIdCliente,
                                                                    'strEstadoEquipo' => 'IN',
                                                                    'strNumeroSerie'  =>  $strSerieElementoActual,
                                                                    'strModelo'       =>  $strModeloElementoloActual,
                                                                    'strTipoElemento' =>  $strTipoElementoActual));

                                    if ($arrayActivosCliente['status'])
                                    {
                                        $arrayActivoCliente  = $arrayActivosCliente['result'][0];
                                        $intIdControl        = $arrayActivoCliente['idControl'];
                                        $arrayEquipos        = array();
                                        $arrayEquipos[]      = array('strNumeroSerie'  => $strSerieElementoActual,
                                                                    'intIdControl'    => $intIdControl,
                                                                    'intCantidadEnt'  => 1,
                                                                    'intCantidadRec'  => 1,
                                                                    'strTipoArticulo' => 'Equipos');

                                        $arrayCargaDescarga = array();
                                        $arrayCargaDescarga['strUsuario']               =  $strUsuario;
                                        $arrayCargaDescarga['strIpUsuario']             =  $strIpUsuario;
                                        $arrayCargaDescarga['strTipoRecibe']            = 'Empleado';
                                        $arrayCargaDescarga['intIdServicio']            =  $intIdServicio;
                                        $arrayCargaDescarga['intIdEmpleado']            =  $intIdEmpleado;
                                        $arrayCargaDescarga['intIdEmpresa']             =  $strIdEmpresa;
                                        $arrayCargaDescarga['strTipoTransaccion']       = 'Retiro';
                                        $arrayCargaDescarga['strTipoActividad']         = 'Retiro';
                                        $arrayCargaDescarga['strObservacion']           = 'Retiro por cancelación';
                                        $arrayCargaDescarga['arrayEquipos']             =  $arrayEquipos;
                                        $arrayCargaDescarga['strEstadoSolicitud']       = 'Asignada';
                                        $arrayCargaDescarga['strDescripcionSolicitud']  = 'SOLICITUD RETIRO EQUIPO';
                                        $arrayCargaDescarga['boolRegistrarTraking']     = true;

                                        $serviceElemento->cargaDescargaActivos($arrayCargaDescarga);
                                    }
                                }
                            }
                        }
                    }

                    if(is_object($objInfoServicio) && ($objInfoServicio->getEstado() == 'Cancelado' || $objInfoServicio->getEstado() == 'Cancel'))
                    {
                        //Carga y descarga de equipos en nodo
                        for($intIndex = 0; $intIndex < count($arrayEquiposNodo); $intIndex++)
                        {
                            $strTipoElementoActual          = $arrayEquiposNodo[$intIndex]['strTipoElemento'];
                            $strSerieElementoActual         = $arrayEquiposNodo[$intIndex]['strSerie'];
                            $strModeloElementoloActual      = $arrayEquiposNodo[$intIndex]['strModelo'];
    
                            //Descarga Cliente y Carga Empleado, equipos del cliente en el nodo.
                            $arrayActivosCliente = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                            ->obtenerEquiposAsignados(array('strIdEmpresa'    =>  $strIdEmpresa,
                                                            'intIdPersona'    =>  $intIdCliente,
                                                            'strEstadoEquipo' => 'IN',
                                                            'strNumeroSerie'  =>  $strSerieElementoActual,
                                                            'strModelo'       =>  $strModeloElementoloActual,
                                                            'strTipoElemento' =>  $strTipoElementoActual));
    
                            if ($arrayActivosCliente['status'])
                            {
                                $arrayActivoCliente  = $arrayActivosCliente['result'][0];
                                $intIdControl        = $arrayActivoCliente['idControl'];
                                $arrayEquipos        = array();
                                $arrayEquipos[]      = array('strNumeroSerie'  => $strSerieElementoActual,
                                                            'intIdControl'    => $intIdControl,
                                                            'intCantidadEnt'  => 1,
                                                            'intCantidadRec'  => 1,
                                                            'strTipoArticulo' => 'Equipos');
    
                                $arrayCargaDescarga = array();
                                $arrayCargaDescarga['strUsuario']               =  $strUsuario;
                                $arrayCargaDescarga['strIpUsuario']             =  $strIpUsuario;
                                $arrayCargaDescarga['strTipoRecibe']            = 'Empleado';
                                $arrayCargaDescarga['intIdServicio']            =  $intIdServicio;
                                $arrayCargaDescarga['intIdEmpleado']            =  $intIdEmpleado;
                                $arrayCargaDescarga['intIdEmpresa']             =  $strIdEmpresa;
                                $arrayCargaDescarga['strTipoTransaccion']       = 'Retiro';
                                $arrayCargaDescarga['strTipoActividad']         = 'Retiro';
                                $arrayCargaDescarga['strObservacion']           = 'Retiro por cancelación';
                                $arrayCargaDescarga['arrayEquipos']             =  $arrayEquipos;
                                $arrayCargaDescarga['strEstadoSolicitud']       = 'Asignada';
                                $arrayCargaDescarga['strDescripcionSolicitud']  = 'SOLICITUD RETIRO EQUIPO';
                                $arrayCargaDescarga['boolRegistrarTraking']     = true;
                                
                                $serviceElemento->cargaDescargaActivos($arrayCargaDescarga);
                            }
                        }

                        //Carga y descarga de equipos en cliente
                        for($intIndex = 0; $intIndex < count($arrayEquiposCliente); $intIndex++)
                        {
                            $strTipoElementoActual          = $arrayEquiposCliente[$intIndex]['tipoElemento'];
                            $strSerieElementoActual         = $arrayEquiposCliente[$intIndex]['serieElemento'];
                            $strModeloElementoloActual      = $arrayEquiposCliente[$intIndex]['modeloElemento'];
    
                            //Descarga Cliente y Carga Empleado, equipos del cliente en el nodo.
                            $arrayActivosCliente = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                            ->obtenerEquiposAsignados(array('strIdEmpresa'    =>  $strIdEmpresa,
                                                            'intIdPersona'    =>  $intIdCliente,
                                                            'strEstadoEquipo' => 'IN',
                                                            'strNumeroSerie'  =>  $strSerieElementoActual,
                                                            'strModelo'       =>  $strModeloElementoloActual,
                                                            'strTipoElemento' =>  $strTipoElementoActual));
    
                            if ($arrayActivosCliente['status'])
                            {
                                $arrayActivoCliente  = $arrayActivosCliente['result'][0];
                                $intIdControl        = $arrayActivoCliente['idControl'];
                                $arrayEquipos        = array();
                                $arrayEquipos[]      = array('strNumeroSerie'  => $strSerieElementoActual,
                                                            'intIdControl'    => $intIdControl,
                                                            'intCantidadEnt'  => 1,
                                                            'intCantidadRec'  => 1,
                                                            'strTipoArticulo' => 'Equipos');
    
                                $arrayCargaDescarga = array();
                                $arrayCargaDescarga['strUsuario']               =  $strUsuario;
                                $arrayCargaDescarga['strIpUsuario']             =  $strIpUsuario;
                                $arrayCargaDescarga['strTipoRecibe']            = 'Empleado';
                                $arrayCargaDescarga['intIdServicio']            =  $intIdServicio;
                                $arrayCargaDescarga['intIdEmpleado']            =  $intIdEmpleado;
                                $arrayCargaDescarga['intIdEmpresa']             =  $strIdEmpresa;
                                $arrayCargaDescarga['strTipoTransaccion']       = 'Retiro';
                                $arrayCargaDescarga['strTipoActividad']         = 'Retiro';
                                $arrayCargaDescarga['strObservacion']           = 'Retiro por cancelación';
                                $arrayCargaDescarga['arrayEquipos']             =  $arrayEquipos;
                                $arrayCargaDescarga['strEstadoSolicitud']       = 'Asignada';
                                $arrayCargaDescarga['strDescripcionSolicitud']  = 'SOLICITUD RETIRO EQUIPO';
                                $arrayCargaDescarga['boolRegistrarTraking']     = true;
                                
                                $serviceElemento->cargaDescargaActivos($arrayCargaDescarga);
                            }
                        }
                    }

                    $arrayRespuesta['mensaje'] = "Acta generada correctamente.";
                }
                else
                {
                    $arrayRespuesta['mensaje']  = $arrayResultadoProcesarActa['strMensaje'];
                }
                $arrayRespuesta['status']   = $arrayResultadoProcesarActa['strStatus'];
            }
            else
            {

                $arrayParametros = array( 'strIpCreacion'        => $arrayData['data']['ipCreacion'],
                                          'strCodEmpresa'        => $arrayData['data']['codEmpresa'],
                                          'intIdSolicitud'       => $arrayData['data']['idSolicitud'],
                                          'strBuscarCpeNaf'      => $arrayData['data']['buscarCpeNaf'],
                                          'intIdResponsable'     => $arrayDatos['ID_PERSONA'],
                                          'arrayDatosElementos'  => $arrayData['data']['datosElementos'],
                                          'strPrefijoEmpresa'    => $arrayData['data']['prefijoEmpresa'],
                                          'strUsuarioCreacion'   => $arrayData['data']['usrCreacion']
                                        );
                $arrayResultadoProcesarRetiro = $serviceRetiroEquipo->finalizarRetiroEquipo($arrayParametros);
                $arrayRespuesta['status']     = $arrayResultadoProcesarRetiro['strStatus'];
                $arrayRespuesta['mensaje']    = $arrayResultadoProcesarRetiro['strMensaje'];
            }

            if ($emNaf->getConnection()->isTransactionActive())
            {
                $emNaf->getConnection()->commit();
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos Mobile',
                                       'TecnicoWSController.finalizaRetiroEquipo',
                                       $ex->getMessage(),
                                       $arrayData['data']['usrCreacion'],
                                       "127.0.0.1"
                                     );
            if ($emNaf->getConnection()->isTransactionActive())
            {
                $emNaf->getConnection()->rollback();
                $emNaf->getConnection()->close();
            }

            $serviceUtil->insertLog(array(
                'enterpriseCode'      => "10",
                'logType'             => 1,
                'logOrigin'           => 'TELCOS',
                'application'         => 'TELCOS',
                'appClass'            => 'TecnicoWSController',
                'appMethod'           => 'finalizaRetiroEquipo',
                'descriptionError'    => $ex->getMessage(),
                'status'              => 'Fallido',
                'inParameters'        => json_encode($arrayData),
                'creationUser'        => $arrayData['user']));

            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al procesar la transacción, favor notificar a sistemas.";
        }

        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para obtener el historial del servicio
     *
     * @author John Vera <javera@telconet.ec>
     * @author Francisco <fadum@telconet.ec>
     * @version 1.1 10-06-2015
     * @since 1.0 31/03/2015
     * @param array $data
     * @return array $resultado
     */
    private function getHistorialServicio($data)
    {
        $resultado  = array();

        try
        {
            $codEmpresa = $data['data']['codEmpresa'];
            $idServicio = $data['data']['idServicio'];
            $user       = $data['user'];
            $start      = $this->get('request')->query->get('start');
            $limit      = $this->get('request')->query->get('limit');
            $emComercial= $this->getDoctrine()->getManager("telconet");
            $emGeneral  = $this->getDoctrine()->getManager("telconet_general");

            $arrHistorial = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                        ->getHistorialServicio($idServicio,$start,$limit,'DESC');

            if(count($arrHistorial['registros'])==0)
            {
                $resultado['status']  = $this->status['NULL'];
                $resultado['mensaje'] = $this->mensaje['NULL'];

                return $resultado;
            }

            $historiales = $arrHistorial['registros'];

            foreach($historiales as $entity)
            {
                $usrCreacion    = $entity->getUsrCreacion();
                $feCreacion     = $entity->getFeCreacion();
                $fechaCreacion  = strval(date_format($feCreacion, "d/m/Y G:i"));
                $ipCreacion     = $entity->getIpCreacion();
                $estado         = $entity->getEstado();
                $motivoId       = $entity->getMotivoId();
                $observacion    = $entity->getObservacion();
                $accion         = $entity->getAccion();

                if($motivoId!=null)
                {
                    $motivo         = $emGeneral->find('schemaBundle:AdmiMotivo', $motivoId);
                    $nombreMotivo   = $motivo->getNombreMotivo();
                }
                else
                {
                    $nombreMotivo = "NA";
                }

                $arrEncontrados[] = array(  'usrCreacion'   => $usrCreacion,
                                            'feCreacion'    => $fechaCreacion,
                                            'ipCreacion'    => $ipCreacion,
                                            'estado'        => $estado,
                                            'nombreMotivo'  => $nombreMotivo,
                                            'observacion'   => $observacion,
                                            'accion'        => $accion
                                          );
            }//foreach($historiales as $entity)
        }
        catch(Exception $e)
        {
            $resultado['status']  = $this->status['ERROR'];
            $resultado['mensaje'] = $this->mensaje['ERROR'];
            return $resultado;
        }

        $resultado['historiales'] = $arrEncontrados;
        $resultado['status']      = $this->status['OK'];
        $resultado['mensaje']     = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener las interfaces de un Elemento
     *
     * @author John Vera <javera@telconet.ec>
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 14/05/2015
     * @param array $data
     * @return array $resultado
     */
    private function getInterfacesDisponiblesPorElemento($data)
    {
        $arr_encontrados    = array();
        $resultado          = array();

        try
        {

            $idElemento                 = $data['data']['idElemento'];
            $idInterfaceElemento        = $data['data']['idInterfaceElemento'];
            $estadoInterfaceElemento    = $data['data']['estadoInterfaceElemento'];
            $em                         = $this->getDoctrine()->getManager();

            //obtener puertos libres del elemento
            $dataInterface = $em->getRepository('schemaBundle:InfoInterfaceElemento')->getInterfaces($idElemento, $estadoInterfaceElemento, '', '');

            //obtener puerto del elemento utilizado, para cargar por default en el combo
            if($idInterfaceElemento != 0)
            {
                $interfaceElemento = $em->getRepository('schemaBundle:InfoInterfaceElemento')->find($idInterfaceElemento);
                $arr_encontrados[] = array('idInterface'        => $interfaceElemento->getId(),
                                           'nombreInterface'    => $interfaceElemento->getNombreInterfaceElemento() );
            }

            //verificar si existen puertos libres
            if($dataInterface)
            {
                foreach($dataInterface as $entity)
                {
                    $arr_encontrados[] = array('idInterface'        => $entity->getId(),
                                               'nombreInterface'    => $entity->getNombreInterfaceElemento() );
                }
            }
        }
        catch(\Exception $e)
        {
            $resultado['status']  = $this->status['ERROR'];
            $resultado['mensaje'] = $this->mensaje['ERROR'];
            return $resultado;
        }

        $resultado['interfacesElemento'] = $arr_encontrados;
        $resultado['status']             = $this->status['OK'];
        $resultado['mensaje']            = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para verificar si existe un serial de un elemento (ont/wifi)
     * en el naf
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 2-06-2015
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 07-02-2018 Se aumento para que devuelva el modelo del elemento
     *
     * @author Jesús <jbozada@telconet.ec>
     * @version 1.2 24-07-2018 Se agrega programación para considerar nuevo modelo de OLT ZTE
     * @since 1.1
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 11-05-2020 Se unifica las validaciones por marca y no por modelo de olt
     *
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.4 03-03-2021 Se valida modelo compatible para activación de producto Extender Db
     * en caso de tenerlo agregado.
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.5 05-05-2021 Se valida modelo de ONT compatible para activación de producto 
     * Extender Dual Band y Wifi Dual Band.
     * 
     * @param array $data
     * @return array $resultado
     */
    private function verificarElementoCliente($data)
    {
        $descripcion            = "";
        $mac                    = "";
        $mensaje                = null;
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emGeneral              = $this->getDoctrine()->getManager('telconet_general');
        $boolModeloCompatible   = false; 
        
        try
        {
            $serieElementoCliente       = $data['data']['serieElementoCliente'];
            $modeloElementoCliente      = $data['data']['modeloElementoCliente'];
            $modeloElemento             = $data['data']['nombreModeloElemento'];
            $strNombreTecnicoProducto   = $data['data']['nombreTecnicoProducto']; 
            
            $strMarcaOlt            = "";
            if(isset($modeloElemento) && !empty($modeloElemento))
            {
                $emComercial            = $this->getDoctrine()->getManager();
                $objModeloElementoOlt   = $emComercial->getRepository('schemaBundle:AdmiModeloElemento')
                                                      ->findOneBy(array("nombreModeloElemento"  => $modeloElemento,
                                                                        "estado"                => "Activo"));
                if(is_object($objModeloElementoOlt))
                {
                    $objMarcaOlt    = $objModeloElementoOlt->getMarcaElementoId();
                    if(is_object($objMarcaOlt))
                    {
                        $strMarcaOlt    = $objMarcaOlt->getNombreMarcaElemento();
                    }

                }
            }

            $serviceTecnico = $this->get('tecnico.InfoServicioTecnico');

            if($strMarcaOlt == "TELLION")
            {
                $respuestaArray = $serviceTecnico->buscarElementoEnNaf($serieElementoCliente,$modeloElementoCliente, "PI", "ActivarServicio");

                 if($respuestaArray[0]['status']=="OK")
                {
                    $descripcion    = $respuestaArray[0]['mensaje'];
                    $respuesta      = $respuestaArray[0]['mensaje'];
                    $arrResultado   = explode(",",$respuesta);

                    if(count($arrResultado)>1)
                    {
                        $mac        = $arrResultado[1];
                        $modelo     = $arrResultado[2];
                    }
                    else
                    {
                        throw new \Exception("NULL");
                    }
                }
                else
                {
                    $mensaje = $respuestaArray[0]['mensaje'];
                    throw new \Exception("ERROR_PARCIAL");
                }
            }
            else if($strMarcaOlt == "HUAWEI" || $strMarcaOlt == "ZTE")
            {
                $respuestaArray = $serviceTecnico->buscarElementoEnNaf($serieElementoCliente,$modeloElementoCliente, "PI", "ActivarServicio");

                if($respuestaArray[0]['status']=="OK")
                {
                    $respuesta      = $respuestaArray[0]['mensaje'];
                    $arrResultado   = explode(",",$respuesta);

                    if(count($arrResultado)>1)
                    {
                        $descripcion    = $arrResultado[0];
                        $mac            = $arrResultado[1];
                        $modelo         = $arrResultado[2];
                    }
                    else
                    {
                        throw new \Exception("NULL");
                    }
                }
                else
                {
                    $mensaje = $respuestaArray[0]['mensaje'];
                    throw new \Exception("ERROR_PARCIAL");
                }
            }   
            
            if(isset($strNombreTecnicoProducto) && !empty($strNombreTecnicoProducto))
            {
                $objParametroCab = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                ->findOneBy( array( 'nombreParametro' => 'MODELOS_EQUIPOS_VALIDAR_MOVIL',
                                    'estado'      => 'Activo' ) );

                $intIdParametroCab = 0;

                if($objParametroCab)
                {
                    $intIdParametroCab = $objParametroCab->getId();
                }

                $arrayDetFiltro = array(
                                    'parametroId'   => $intIdParametroCab,
                                    'valor3'        => 'CPE ONT',
                                    'valor4'        => $strNombreTecnicoProducto, 
                                    'estado'        => 'Activo'     
                                );

                $arrayModelosOnt = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->findBy($arrayDetFiltro);

                foreach($arrayModelosOnt as $objModelosOnt)
                {
                    if($modelo == $objModelosOnt->getValor2())
                    {
                        $boolModeloCompatible = true;
                        break;
                    }
                    $arrayModelosOntPermitidos[] = $objModelosOnt->getValor2(); 
                }

                if(!$boolModeloCompatible)
                {
                    $mensaje = "La serie ingresada no es compatible para la activación, "
                            . "favor ingresar uno de los siguientes modelos: <b> ".implode(', ', $arrayModelosOntPermitidos)." </b>";
                    throw new \Exception("ERROR_PARCIAL");
                }
            }

            $respuesta = array('descripcion' => $descripcion,'mac' => $mac, 'modelo' => $modelo);

        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']   = $this->status['NULL'];
                $resultado['mensaje']  = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']   = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']  = $mensaje;
            }
            else
            {
                $resultado['status']   = $this->status['ERROR'];
                $resultado['mensaje']  = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['elemento'] = $respuesta;
        $resultado['status']   = $this->status['OK'];
        $resultado['mensaje']  = $this->mensaje['OK'];
        return $resultado;
    }

    /**
    * Funcion que sirve para mostrar los suscriptores de un olt
    *
    * @author Francisco Adum <fadum@telconet.ec>
    * @version 1.0 3-06-2015
    * @param array $data
     * @return array $resultado
    */
    private function mostrarSuscribersOltTellion($data)
    {
        $datos              = "";
        $mensaje            = "";

        try
        {
            $idElemento         = $data['data']['idElemento'];
            $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");
            $elemento           = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($idElemento);

            //*OBTENER SCRIPT--------------------------------------------------------*/
            $scriptArray = $serviceTecnico->obtenerArregloScript("mostrarSubscribersOlt",$elemento->getModeloElementoId());
            $idDocumento = $scriptArray[0]->idDocumento;
            $usuario     = $scriptArray[0]->usuario;
            //*----------------------------------------------------------------------*/

            $jsonResultado = $serviceTecnico->ejecutarComandoMdEjecucion($idElemento, $usuario, $datos, $idDocumento);

            if($jsonResultado->status!="OK")
            {
                if($jsonResultado->mensaje === '"java.lang.Exception: No se pudo alcanzar el host..."')
                {
                    $mensaje = "El elemento no es alcanzable desde el Servidor Telcos, favor comunicarse con el Dep. GEPON!";
                    throw new \Exception("ERROR_PARCIAL");
                }
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultadoScript']   = $jsonResultado->mensaje;
        $resultado['status']            = $this->status['OK'];
        $resultado['mensaje']           = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para mostrar las macs conectas en el olt
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 3-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function mostrarTablaMacsConectadasTellion($data)
    {
        $mensaje            = "";

        try
        {
            $idElemento         = $data['data']['idElemento'];
            $idInterfaceElemento= $data['data']['idInterfaceElemento'];
            $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");
            $elemento           = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($idElemento);
            $interfaceElemento  = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($idInterfaceElemento);

            //*OBTENER SCRIPT--------------------------------------------------------*/
            $scriptArray = $serviceTecnico->obtenerArregloScript("obtenerMacPuerto",$elemento->getModeloElementoId());
            $idDocumento = $scriptArray[0]->idDocumento;
            $usuario     = $scriptArray[0]->usuario;
            //*----------------------------------------------------------------------*/

            $datos = $interfaceElemento->getNombreInterfaceElemento();
            $jsonResultado = $serviceTecnico->ejecutarComandoMdEjecucion($idElemento, $usuario, $datos, $idDocumento);

            if($jsonResultado->status!="OK")
            {
                if($jsonResultado->mensaje === '"java.lang.Exception: No se pudo alcanzar el host..."')
                {
                    $mensaje = "El elemento no es alcanzable desde el Servidor Telcos, favor comunicarse con el Dep. GEPON!";
                    throw new \Exception("ERROR_PARCIAL");
                }
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultadoScript']   = $jsonResultado->mensaje;
        $resultado['status']            = $this->status['OK'];
        $resultado['mensaje']           = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener el catalogo para la encuesta de
     * satisfaccion del cliente
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 8-06-2015
     *
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.1 13-06-2017 - Se obtiene el codigo de la plantilla desde la tabla de parametros y se
     *                           envia por parametro a la funcion obtenerPreguntasEncuesta.
     *
     * @author Ronny Morán. <rmoranc@telconet.ec>
     * @version 1.2 11-01-2019 - Se agrega validación para obtener encuesta de Netvoice.
     * 
     * @author Wilmer Vera. <wvera@telconet.ec>
     * @version 1.3 29-09-2021 
     * - Se agrega nomenclatura para hacer uso del PILOTO "-PLT"
     *
     * @param array $data
     * @return array $resultado
     */
    private function getEncuestaServicio($data)
    {
        $mensaje = "";

        try
        {
            $idServicio     = $data['data']['idServicio'];
            $emComercial    = $this->getDoctrine()->getManager("telconet");
            $servicio       = $emComercial->find('schemaBundle:InfoServicio', $idServicio);
            $strDescTarea   = '';
            if(!$servicio)
            {
                $mensaje = "No existe el servicio a consultar";
                throw new \Exception("ERROR_PARCIAL");
            }

            //obtener las preguntas de la encuesta
            $soporte                                 = $this->get('soporte.SoporteService');
            $arrayParametrosPreguntas                = array();
            $arrayParametrosPreguntas['objServicio'] = $servicio;

            //Obtenemos el codigo de la plantilla para poder generar encuesta
            $arrayAdmiParametroDetActa               = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                                   ->getOne('CODIGO_ENCUESTA_INSTALACION_POR_EMPRESA',
                                                                            'SOPORTE',
                                                                            '',
                                                                            '',
                                                                            'CODIGO_ENCUESTA_INSTALACION',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $data['data']['codEmpresa']
                                                                           );
            if (isset($arrayAdmiParametroDetActa['valor2']) && !empty($arrayAdmiParametroDetActa['valor2']))
            {
                $arrayVariables['id_servicio']  = $idServicio;
                $strDescTarea = $emComercial->getRepository('schemaBundle:InfoPersona')
                                            ->obtenerDescripcionTarea($arrayVariables);
                if($strDescTarea == 'NETVOICE')
                {
                    $arrayParametrosPreguntas['strCodigoPlantilla'] = 'ENC-INST-NV';
                }else
                {
                    $arrayParametrosPreguntas['strCodigoPlantilla'] = $arrayAdmiParametroDetActa['valor2'];
                }
            }
            else
            {
                if(!isset($arrayParametrosPreguntas['strCodigoPlantilla']) && empty($arrayParametrosPreguntas['strCodigoPlantilla']))
                {
                    $mensaje = "No existe codigo de plantilla";
                    throw new \Exception("ERROR_PARCIAL");
                }
            }
            $arrEncuesta = $soporte->obtenerPreguntasEncuesta($arrayParametrosPreguntas);
            $preguntas   = $arrEncuesta['preguntas'];

            if(!$preguntas)
            {
                $mensaje = "No existe la encuesta para este servicio!";
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['preguntas'] = $preguntas;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener los parametros iniciales de un servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 8-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function getParametrosIniciales($data)
    {
        $mensaje = "";

        try
        {
            $idServicio         = $data['data']['idServicio'];
            $codEmpresa         = $data['data']['codEmpresa'];
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $servicio           = $emComercial->find('schemaBundle:InfoServicio', $idServicio);
            $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
            $producto           = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                              ->findOneBy(array("nombreTecnico"   => "INTERNET",
                                                                "estado"          => "Activo",
                                                                "empresaCod"      => $codEmpresa));

            $spcPotencia = $serviceTecnico->getServicioProductoCaracteristica($servicio, "POTENCIA", $producto);

            if(!$spcPotencia)
            {
                $mensaje = "No existen los parametros iniciales para este servicio!";
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultadoScript']   = $spcPotencia->getValor();
        $resultado['status']            = $this->status['OK'];
        $resultado['mensaje']           = $this->mensaje['OK'];
        return $resultado;
    }


    /**
     * Función que consume el servicio de MEGADATOS para obtener la
     * potencia de un equipo.
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0, 11-02-2020
     *
     * Se agrega nueva varibale tipo booleana para poder obtener la data necesaria.
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.1, 05-11-2020
     *
     * @param array $arrayDataRequest
     * @return array $resultado
     */
    public function getPotenciaDataTecnica($arrayDataRequest)
    {
        try
        {
            $serviceUtil         = $this->get('schema.Util');
            $serviceTecnico      = $this->get('tecnico.InfoServicioTecnico');
            $emInfraestructura   = $this->getDoctrine()->getManager("telconet_infraestructura");
            $serviceInfoElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento');
            $arrayDataTecnica    = $this->getDataTecnica($arrayDataRequest);
            $boolEvaluarPotencia = $arrayDataRequest['data']['evaluarPotencia'];

            if (!empty($arrayDataTecnica))
            {
                //DATA BACKBONE
                $arrayDataBackbone      = $arrayDataTecnica['servicio']['datosBackbone'];

                if($arrayDataRequest['data']['prefijoEmpresa'] == 'TN')
                {
                    $arrayRetorno  = $serviceInfoElemento->getEquipoClienteTN($arrayDataRequest['data']['idServicio']);

                    foreach($arrayRetorno['registros'] as $equipo)
                    {
                        $arrayDataBackbone['elementosCliente'][] = $equipo;
                    }
                }

                //DATA NIVEL CLIENTE
                $arrayElementosCliente  = $arrayDataBackbone['elementosCliente'];

                //VARIABLES NECESARIAS
                $boolPotencia           = false;
                $objPotenciaDelServicio = "";
                $strSerie               = "";
                $strMac                 = "";

                foreach($arrayElementosCliente as $elemento)
                {
                    if($elemento['tipo']=="CPE ONT" || $elemento['tipo']=="CPE" )
                    {
                        $strSerie       = $elemento['serie'];
                        $strMac         = $elemento['mac'];
                        $boolPotencia   = true;
                        break;
                    }
                }

                if($boolPotencia && $boolEvaluarPotencia)
                {
                    $arrayData  = array(
                        //DATA ONT
                        'serial_ont'        =>     $strSerie,
                        'mac_ont'           =>     $strMac,

                        //DATA OLT
                        'nombre_olt'        =>     $arrayDataBackbone['nombreElemento'],
                        'ip_olt'            =>     $arrayDataBackbone['ipElemento'],
                        'puerto_olt'        =>     $arrayDataBackbone['nombreInterfaceElemento'],
                        'modelo_olt'        =>     $arrayDataBackbone['nombreModeloElemento'],
                        'ont_id'            =>     $arrayDataBackbone['indiceCliente'],
                        'estado_servicio'   =>     'EnVerificacion',
                        'mac_wifi'          =>     'NA' );

                    $arrayDataConsumo = json_encode(array(
                                                        'empresa'              => $arrayDataRequest['data']['prefijoEmpresa'],
                                                        'nombre_cliente'       => $arrayDataRequest['data']['nombreCliente'],
                                                        'login'                => $arrayDataRequest['data']['loginCliente'],
                                                        'identificacion'       => '',
                                                        'opcion'               => 'POTENCIA',
                                                        'ejecutaComando'       => 'SI',
                                                        'usrCreacion'          => $arrayDataRequest['user'],
                                                        'ipCreacion'           => $arrayDataRequest['data']['ipCreacion'],
                                                        'comandoConfiguracion' => 'SI',
                                                        'datos'                => $arrayData
                                                    )
                                                );
                    $objPotenciaDelServicio = $serviceTecnico->getPotenciaEnlace($arrayDataConsumo);
                }

               if( !empty($objPotenciaDelServicio) )
               {

                $arrayDataObtenida['datosBackbone']     = $arrayDataBackbone;
                $arrayDataObtenida['potenciaServicio']  = $objPotenciaDelServicio;
                $arrayResultado['status']               = $this->status['OK'];
                $arrayResultado['data']                 = $arrayDataObtenida;
                $arrayResultado['mensaje']              = $this->mensaje['OK'];

                return $arrayResultado;
               }
               else
               {
                $arrayDataObtenida['datosBackbone']     = $arrayDataBackbone;
                $arrayDataObtenida['potenciaServicio']  = "Sin datos de potencia.";
                $arrayResultado['status']               = $this->status['OK'];
                $arrayResultado['data']                 = $arrayDataObtenida;
                $arrayResultado['mensaje']              = $this->mensaje['OK'];

                }
            }
            return $arrayResultado;
        } catch(\Exception $error)
        {
            if($error->getMessage() == "NULL")
            {
                $arrayResultado['status']    = $this->status['NULL'];
                $arrayResultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($error->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']   = $mensaje;
            }
            else
            {
                $arrayResultado['status']    = $this->status['ERROR'];
                $arrayResultado['mensaje']   = $error->getMessage();
            }

            $serviceUtil->insertError(
                'Telcos+',
                'getPotenciaDataTecnica',
                 $error->getMessage(),$arrayDataRequest['user'],
                 $arrayDataRequest['data']['ipCreacion']);
            return $arrayResultado;
        }


    }


    /**
     * Funcion que sirve para obtener la data tecnica de un servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 9-06-2015
     *
     * Se agrega data técnica.
     * -> Latitud latitud del elemento.
     * -> Longitud longitud del elemento.
     * -> Dirección
     * -> TipoMedio Ya sea Fibra Optica Radio etc.
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.2, 14-02-2020
     *
     * @param array $data
     * @return array $resultado
     */
    private function getDataTecnica($data)
    {
        $idServicio   = $data['data']['idServicio'];
        $codEmpresa   = $data['data']['codEmpresa'];
        $dataTecnica  = $this->get('tecnico.DataTecnica');

        $arrayPeticiones = array(   'idServicio'    => $idServicio,
                                    'idEmpresa'     => $codEmpresa);

        $arrayRespuesta = $dataTecnica->getDataTecnica($arrayPeticiones);

        //SERVICIO
        $nombreTipoMedio    = $arrayRespuesta['tipoMedio'] ? $arrayRespuesta['tipoMedio']->getNombreTipoMedio() : "NA"; //ultima milla
        $perfilCliente      = $arrayRespuesta['perfilCliente'] ? $arrayRespuesta['perfilCliente']->getValor() : "NA";

        //BACKBONE
        //--CAJA
        $nombreElementoConector = $arrayRespuesta['elementoContenedor'] ? $arrayRespuesta['elementoContenedor']->getNombreElemento()  : "NA";

        if(isset($arrayRespuesta['interfaceElemento'])  &&  is_object($arrayRespuesta['interfaceElemento'])
           && $arrayRespuesta['interfaceElemento']->getElementoId()!=null)
        {
             //--OLT
            $elemento               = $arrayRespuesta['interfaceElemento']->getElementoId();
            $nombreElemento         = $elemento->getNombreElemento();
            $nombreModeloElemento   = $elemento->getModeloElementoId()->getNombreModeloElemento();
            $nombreMarcaElemento    = $elemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
            $arrayDataNodo          = $dataTecnica->getDataNodoRelacionElemento($elemento);
            //--PUERTO OLT
            $nombreInterfaceElemento= $arrayRespuesta['interfaceElemento']->getNombreInterfaceElemento();
        }
        else
        {
            $nombreInterfaceElemento="";
            $nombreElemento         = "";
            $nombreModeloElemento   = "";
            $nombreMarcaElemento    = "";
            $arrayDataNodo          = array(
                'tipoElemento'  => 'NODO',
                'direccion'     => "",
                'latitud'       => null,
                'longitud'      => null,
                'nombreElemento'=> ""
                );
        }
        //--PUERTO OLT
        $indiceCliente          = $arrayRespuesta['indiceCliente'] ? $arrayRespuesta['indiceCliente']->getValor() : "NA";

        $ip                     = $arrayRespuesta['ip'] ? $arrayRespuesta['ip']->getIp() : "NA";


        //--SPLITTER
        if($arrayRespuesta['interfaceElementoConector'])
        {
            $elementoConector                 = $arrayRespuesta['interfaceElementoConector']->getElementoId();
            $strNombreElementoContenedor      = $elementoConector->getNombreElemento();
            $nombreInterfaceElementoConector  = $arrayRespuesta['interfaceElementoConector'] ?
                                                     $arrayRespuesta['interfaceElementoConector']->getNombreInterfaceElemento() : "NA";
        }

        //--BUFFER, HILO
        if($arrayRespuesta['bufferHilo'])
        {
            $objBuffer  = $arrayRespuesta['bufferHilo']->getBufferId();
            $objHilo    = $arrayRespuesta['bufferHilo']->getHiloId();

            $numeroBuffer   = $objBuffer ? $objBuffer->getNumeroBuffer() : "NA";
            $colorBuffer    = $objBuffer ? $objBuffer->getColorBuffer() : "NA";
            $buffer         = $numeroBuffer . "," . $colorBuffer;

            $numeroHilo = $objHilo ? $objHilo->getNumeroHilo() : "NA";
            $colorHilo  = $objHilo ? $objHilo->getColorHilo() : "NA";
            $hilo       = $numeroHilo . "," . $colorHilo;

            $claseTipoMedio = $objHilo->getClaseTipoMedioId()->getNombreClaseTipoMedio();
        }
        else
        {
            $buffer         = "NA";
            $hilo           = "NA";
            $claseTipoMedio = "NA";
        }

        //--DATA HUAWEI
        $lineProfileName    = $arrayRespuesta['lineProfileName'] ? $arrayRespuesta['lineProfileName']->getValor() : "NA";
        $gemPort            = $arrayRespuesta['gemPort'] ? $arrayRespuesta['gemPort']->getValor() : "NA";
        $vlan               = $arrayRespuesta['vlan'] ? $arrayRespuesta['vlan']->getValor() : "NA";
        $trafficTable       = $arrayRespuesta['trafficTable'] ? $arrayRespuesta['trafficTable']->getValor() : "NA";
        $spid               = $arrayRespuesta['spid'] ? $arrayRespuesta['spid']->getValor() : "NA";

        //DATA CLIENTE
        $ssid               = $arrayRespuesta['ssid'] ? $arrayRespuesta['ssid']->getValor() : "NA";
        $numeroPc           = $arrayRespuesta['numeroPc'] ? $arrayRespuesta['numeroPc']->getValor() : "NA";
        $passwordSsid       = $arrayRespuesta['passwordSsid'] ? $arrayRespuesta['passwordSsid']->getValor() : "NA";
        $modoOperacion      = $arrayRespuesta['modoOperacion'] ? $arrayRespuesta['modoOperacion']->getValor() : "NA";
        $dataCliente        = array (
                                        'ssid'          => $ssid,
                                        'numeroPc'      => $numeroPc,
                                        'passwordSsid'  => $passwordSsid,
                                        'modoOperacion' => $modoOperacion
                                    );

        //ELEMENTO CLIENTE--ONT
        if($arrayRespuesta['elementoCliente'])
        {
            $elementoCliente        = $arrayRespuesta['elementoCliente'];
            $nombreElementoCliente  = $elementoCliente->getNombreElemento();
            $modeloElementoCliente  = $elementoCliente->getModeloElementoId()->getNombreModeloElemento();
            $marcaElementoCliente   = $elementoCliente->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
            $tipoElementoCliente    = $elementoCliente->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
            $serieElementoCliente   = $elementoCliente->getSerieFisica();
            $macCliente             = $arrayRespuesta['macCliente'] ? $arrayRespuesta['macCliente']->getValor() : "NA";

            $elementosClientes []   = array (
                                                'nombre'    => $nombreElementoCliente,
                                                'modelo'    => $modeloElementoCliente,
                                                'marca'     => $marcaElementoCliente,
                                                'tipo'      => $tipoElementoCliente,
                                                'serie'     => $serieElementoCliente,
                                                'mac'       => $macCliente
                                            );
        }

        //ELEMENTO CLIENTE--WIFI
        if($arrayRespuesta['elementoClienteWifi'])
        {
            $elementoClienteWifi        = $arrayRespuesta['elementoClienteWifi'];
            $nombreElementoClienteWifi  = $elementoClienteWifi->getNombreElemento();
            $modeloElementoClienteWifi  = $elementoClienteWifi->getModeloElementoId()->getNombreModeloElemento();
            $marcaElementoClienteWifi   = $elementoClienteWifi->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
            $tipoElementoClienteWifi    = $elementoClienteWifi->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
            $serieElementoClienteWifi   = $elementoClienteWifi->getSerieFisica();
            $macClienteWifi             = $arrayRespuesta['macClienteWifi'] ? $arrayRespuesta['macClienteWifi']->getValor() : "NA";

            $elementosClientes []       = array (
                                                'nombre'    => $nombreElementoClienteWifi,
                                                'modelo'    => $modeloElementoClienteWifi,
                                                'marca'     => $marcaElementoClienteWifi,
                                                'tipo'      => $tipoElementoClienteWifi,
                                                'serie'     => $serieElementoClienteWifi,
                                                'mac'       => $macClienteWifi
                                            );
        }
        $arrayUbicacionGeoreferencial    = $arrayRespuesta['arrayElementoUbicacion'];

        $backbone           = array (
                                        'nombreElementoContenedor'          => $strNombreElementoContenedor,
                                        'nombreElemento'                    => $nombreElemento,
                                        'nombreModeloElemento'              => $nombreModeloElemento,
                                        'nombreMarcaElemento'               => $nombreMarcaElemento,
                                        'ipElemento'                        => $ip,
                                        'nombreInterfaceElemento'           => $nombreInterfaceElemento,
                                        'indiceCliente'                     => $indiceCliente,
                                        'nombreElementoConector'            => $nombreElementoConector,
                                        'nombreInterfaceElementoConector'   => $nombreInterfaceElementoConector,
                                        'buffer'                            => $buffer,
                                        'hilo'                              => $hilo,
                                        'claseTipoMedio'                    => $claseTipoMedio,
                                        'lineProfile'                       => $lineProfileName,
                                        'servicePortId'                     => $spid,
                                        'gemPort'                           => $gemPort,
                                        'trafficTable'                      => $trafficTable,
                                        'vlan'                              => $vlan,
                                        'latitud'                           => $arrayUbicacionGeoreferencial['latitud'],
                                        'longitud'                          => $arrayUbicacionGeoreferencial['longitud'],
                                        'direccion'                         => $arrayUbicacionGeoreferencial['direccion'],
                                        'tipoMedio'                         => $nombreTipoMedio,
                                        'elementosCliente'                  => $elementosClientes,
                                        'elementoNodo'                      => $arrayDataNodo
                                    );

        $servicio           = array (
                                        'perfil'        => $perfilCliente,
                                        'ultimaMilla'   => $nombreTipoMedio,
                                        'datosBackbone' => $backbone,
                                        'datosCliente'  => $dataCliente
                                    );

        $resultado['servicio']  = $servicio;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener las ips de un servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 15-07-2015
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-02-2018 Se modifica el envío de un array de parámetros por modificación de función generarJsonIpPublicaPorPunto
     *
     * @param array $data
     * @return array $resultado
     */
    private function getIpsDataTecnica($data)
    {
        $mensaje = "Error al tratar de obtener las ips del servicio!";
        try
        {
            $codEmpresa         = $data['data']['codEmpresa'];
            $user               = $data['user'];
            $idServicio         = $data['data']['idServicio'];
            $start              = $this->get('request')->query->get('start');
            $limit              = $this->get('request')->query->get('limit');
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");
            $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');
            $servicio           = $emComercial->find('schemaBundle:InfoServicio', $idServicio);
            $punto              = $servicio->getPuntoId();

            $objJson = $this->getDoctrine()
                            ->getManager("telconet_infraestructura")
                            ->getRepository('schemaBundle:InfoServicioTecnico')
                            ->generarJsonIpPublicaPorPunto(array(   "idPunto"           => $punto->getId(),
                                                                    "empresa"           => $codEmpresa,
                                                                    "start"             => $start,
                                                                    "limit"             => $limit,
                                                                    "em"                => $emComercial,
                                                                    "emI"               => $emInfraestructura,
                                                                    "serviceTecnico"    => $serviceTecnico));
            $resultadJson = json_decode($objJson);

            if($resultadJson->encontrados != 0)
            {
                $resultado['ips']       = $resultadJson->encontrados;
            }
            else
            {
                $mensaje = "No existen datos de Ips para este Servicio!";
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener la configuracion en el olt de un servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 15-07-2015
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 09-05-2016  Se agrega parametro empresa en metodo getConfiguracionDataTecnica por conflictos de producto INTERNET DEDICADO
     *
     * @param array $data
     * @return array $resultado
     */
    private function getConfiguracionDataTecnica($data)
    {
        $mensaje = "Error al tratar de obtener configuracion en el OLT";
        try
        {
            $codEmpresa         = $data['data']['codEmpresa'];
            $user               = $data['user'];
            $idServicio         = $data['data']['idServicio'];
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");
            $serviceTecnico     = $this->get('tecnico.InfoServicioTecnico');

            $servicio        = $emComercial->find('schemaBundle:InfoServicio', $idServicio);
            $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array( "servicioId" =>$servicio->getId()));
            $producto        = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                           ->findOneBy(array( "empresaCod"          => $codEmpresa,
                                                              "estado"              => "Activo",
                                                              "descripcionProducto" => "INTERNET DEDICADO"));

            $servicioProdCaractIndice  = $serviceTecnico->getServicioProductoCaracteristica($servicio, "INDICE CLIENTE", $producto);
            $interfaceElementoBackbone = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                           ->find($servicioTecnico->getInterfaceElementoId());
            $modeloElemento            = $interfaceElementoBackbone->getElementoId()->getModeloElementoId();

            //ejecucion de script por modelo
            if($modeloElemento->getNombreModeloElemento()=="EP-3116")
            {
                $scriptArray    = $serviceTecnico->obtenerArregloScript("obtenerDatosServicio",
                                                                        $interfaceElementoBackbone->getElementoId()->getModeloElementoId());
                $idDocumento    = $scriptArray[0]->idDocumento;
                $datos          = $interfaceElementoBackbone->getNombreInterfaceElemento().",".
                                  $interfaceElementoBackbone->getNombreInterfaceElemento().",".
                                  $servicioProdCaractIndice->getValor();

                $comando = "java -jar ".$this->container->getParameter("path_telcos")."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".
                            $this->container->getParameter('host')."' '".$idDocumento."' 'usuario' 'SSH' '".
                            $servicioTecnico->getElementoId()."' '".$datos."' '".$this->container->getParameter("path_parameters")."'''";
                $salida  = shell_exec($comando);
                $pos     = strpos($salida, "{");
                $jsonObj = substr($salida, $pos);
                $resultadJson = json_decode($jsonObj);
            }
            else if($modeloElemento->getNombreModeloElemento()=="MA5608T")
            {
                list($tarjeta, $puertoPon) = split('/',$interfaceElementoBackbone->getNombreInterfaceElemento());

                $datos = $servicio->getPuntoId()->getLogin().",".$tarjeta.",".$puertoPon.",".$servicioProdCaractIndice->getValor();

                $resultadJson = $serviceTecnico->ejecutarComandoPersonalizadoMdDatos($servicioTecnico->getElementoId(), "sistemas",
                                                                                     $datos, 0, "obtenerConfiguracionCliente");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultadoScript']   = $resultadJson->mensaje;
        $resultado['status']            = $this->status['OK'];
        $resultado['mensaje']           = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener los datos necesarios para
     * que la app mobil pueda cargar el acta de entrega
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 17-06-2015
     *
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.1 13-06-2017 - Se envia el prefijoEmpresa para obtener la información del acta de entrega, se modifica la validación
     *                           para obtener el nombre o la razon social, se envia el modulo para obtener la acta.
     *
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.2
     * @since 12-11-2018
     * Se agrega como respuesta el parámetro strMostrarHoras, intHorasDefecto, strTvFacturable que se obtienen del parámetro HORAS_VISITA_FACTURABLE.
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.3 19-12-2018 - Se adiciona los equipos ExtenderDualBand al acta.
     * @since 1.2
     *
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.4 25-07-2021 - Se adiciona los equipos Netlifecam al acta.
     * @since 1.3
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @since 11-07-2022 - Se agrega validacion para obtener el idServicio cuando se reciba el idPunto en el request.
     *                     Se agrega logica para extraer productos que no tienen data tecnica y mostrar preguntas en TM-Operaciones.
     * @version 1.4
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.5 20/08/2022 - Se mejora logica para elementos que no tengan data tecnica
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.6 21/08/2022 - Se agrega validacion para no repetir elementos en NA.
     * 
     * @param array $data
     * @return array $resultado
     */
    private function getDatosActaDeRecepcion($data)
    {
        $mensaje    = "";
        $start      = $this->get('request')->query->get('start');
        $limit      = 5;
        $emComercial = $this->get('doctrine')->getManager('telconet');
        $emGeneral   = $this->getDoctrine()->getManager('telconet_general');

        try
        {
            $idServicio         = $data['data']['idServicio'];
            $codEmpresa         = $data['data']['codEmpresa'];
            $prefijoEmpresa     = $data['data']['prefijoEmpresa'];

            if(empty($idServicio) && !empty($data['data']['idPunto']))
            {
                $arrayResultado = $emComercial->getRepository('schemaBundle:InfoServicio')
                            ->findServiciosPorEmpresaPorPuntoIdPorEstado($codEmpresa, $data['data']['idPunto'], 'Activo');
                
                $arrayDatos = $arrayResultado['registros'];
                foreach ($arrayDatos as $dato):
                    $idServicio     = $dato->getId();
                endforeach;
            }

            $arrParametros      = array (
                                            'idServicio'     => $idServicio,
                                            'idEmpresa'      => $codEmpresa,
                                            'prefijoEmpresa' => $prefijoEmpresa,
                                            'strModulo'      => 'TECNICO',
                                            'start'          => $start,
                                            'limit'          => $limit
                                        );
            $actaEntregaService = $this->get('tecnico.ActaEntrega');
            $arrResultado       = $actaEntregaService->getActaEntrega($arrParametros);

            //servicio-------------------------------------------------------------------------------------------------------------------
            $servicio   = $arrResultado['servicio'];
            $planCab    = $arrResultado['planCab'];
            $ultimaMilla= $arrResultado['ultimaMilla'];
            $arrayDatTecnica = $arrResultado['dataTecnica'];


            $arrayMillas = (array)$ultimaMilla;
            if($servicio && $arrayDatTecnica[0]['modelo']!='NA' && $arrayDatTecnica[0]['marca']!='NA' 
                            && $arrayDatTecnica[0]['serie']!='NA' && !empty($arrayMillas))
            {
                $tipoOrden = $servicio->getTipoOrden();
            
                $arrayDatosServicio[] = array(   'plan'          => is_object($planCab)?$planCab->getNombrePlan():"",
                                        'tipoOrden'     => $tipoOrden,
                                        'ultimaMilla'   => $ultimaMilla->getNombreTipoMedio(),
                                        'comparticion'  => "2:1"
                                    );
            }
            else
            {
                $tipoOrden = $servicio->getTipoOrden();
                $arrayDatosServicio[] = array(   'plan'          => "",
                                            'tipoOrden'     => $tipoOrden,
                                            'ultimaMilla'   => "",
                                            'comparticion'  => ""
                                        );
            }

            //----------------------------------------------------------------------------------------------------------------------------

            //datos del cliente - punto---------------------------------------------------------------------------------------------------
            $datosCliente = $arrResultado['datosCliente'];

            if(!$datosCliente)
            {
                $mensaje = "No existen Datos para el Acta de Entrega";
                throw new \Exception("ERROR_PARCIAL");
            }

            $identificacionCliente  = $datosCliente['IDENTIFICACION_CLIENTE'];

            if(isset($datosCliente['RAZON_SOCIAL']))
            {
                $nombreCliente = $datosCliente['RAZON_SOCIAL'];
            }
            else
            {
                $nombreCliente = $datosCliente['NOMBRES'];
            }

            $punto = array  (
                                'login'     => $datosCliente['LOGIN'],
                                'cliente'   => $nombreCliente,
                                'direccion' => $datosCliente['DIRECCION'],
                                'latitud'   => $datosCliente['LATITUD'],
                                'longitud'  => $datosCliente['LONGITUD'],
                                'servicios' => $arrayDatosServicio
                            );
            //----------------------------------------------------------------------------------------------------------------------------

            //datos de forma de contacto del punto----------------------------------------------------------------------------------------
            $arrFormaContactosPunto = $arrResultado['formaContactoPunto'];

            if($arrFormaContactosPunto['total'] < 1)
            {
                //datos de forma de contacto del cliente
                $arrFormaContactoCliente = $arrResultado['formaContactoCliente'];

                if($arrFormaContactoCliente['total'] > 0)
                {
                    foreach($arrFormaContactoCliente['registros'] as $formaContactoCliente)
                    {
                        $contactos[] = array(
                                                'formaContacto' => $formaContactoCliente['descripcionFormaContacto'],
                                                'valorContacto' => $formaContactoCliente['valor']
                                            );
                    }
                }
            }
            else
            {
                foreach($arrFormaContactosPunto['registros'] as $formaContactoPunto)
                {
                    $contactos[] = array(
                                            'formaContacto' => $formaContactoPunto['descripcionFormaContacto'],
                                            'valorContacto' => $formaContactoPunto['valor']
                                        );
                }
            }
            //----------------------------------------------------------------------------------------------------------------------------

            //datos del contacto del cliente----------------------------------------------------------------------------------------------
            $contactoCliente = $arrResultado['contactoCliente'];

            if(!$contactoCliente)
            {
                $nombreContacto = "NA";
            }
            else
            {
                $nombreContacto = $contactoCliente['NOMBRE_CONTACTO'];
            }
            //----------------------------------------------------------------------------------------------------------------------------
            if($prefijoEmpresa == 'TN')
            {
                foreach($arrResultado['dataTecnica'] as $objDataTecnica)
                {
                  $elementos[] = $objDataTecnica;
                }
            }
            else
            {
                //cpe-------------------------------------------------------------------------------------------------------------------------
                $elementoCpe = $arrResultado['elementoCpe'];
                if($elementoCpe)
                {
                    $spcMacCpe     = $arrResultado['macCpe'];
                    if($spcMacCpe)
                    {
                        $macCpe = $spcMacCpe->getValor();
                    }
                    else
                    {
                        $macCpe = "";
                    }

                    $serieCpe   = $elementoCpe->getSerieFisica();
                    $modeloCpe  = $elementoCpe->getModeloElementoId()->getNombreModeloElemento();
                    $marcaCpe   = $elementoCpe->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    $tipoCpe    = $elementoCpe->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();

                    $cpe        = array(
                                           'modelo'    => $modeloCpe,
                                           'marca'     => $marcaCpe,
                                           'serie'     => $serieCpe,
                                           'mac'       => $macCpe,
                                           'tipo'      => $tipoCpe
                                        );
                    $elementos[] = $cpe;
                }
                //----------------------------------------------------------------------------------------------------------------------------

                //ont-------------------------------------------------------------------------------------------------------------------------
                $elementoOnt = $arrResultado['elementoOnt'];
                if($elementoOnt)
                {
                    $spcMacOnt  = $arrResultado['macOnt'];
                    if($spcMacOnt)
                    {
                        $macOnt = $spcMacOnt->getValor();
                    }
                    else
                    {
                        $macOnt = "";
                    }

                    $serieOnt   = $elementoOnt->getSerieFisica();
                    $modeloOnt  = $elementoOnt->getModeloElementoId()->getNombreModeloElemento();
                    $marcaOnt   = $elementoOnt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    $tipoOnt    = $elementoOnt->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();

                    $ont        = array(
                                           'modelo'    => $modeloOnt,
                                           'marca'     => $marcaOnt,
                                           'serie'     => $serieOnt,
                                           'mac'       => $macOnt,
                                           'tipo'      => $tipoOnt
                                        );
                    $elementos[] = $ont;
                }
                //----------------------------------------------------------------------------------------------------------------------------

                //wifi------------------------------------------------------------------------------------------------------------------------
                $elementoWifi    = $arrResultado['elementoWifi'];
                if($elementoWifi)
                {
                    $spcMacWifi  = $arrResultado['macWifi'];
                    if($spcMacWifi)
                    {
                        $macWifi = $spcMacWifi->getValor();
                    }
                    else
                    {
                        $macWifi = "";
                    }

                    $serieWifi   = $elementoWifi->getSerieFisica();
                    $modeloWifi  = $elementoWifi->getModeloElementoId()->getNombreModeloElemento();
                    $marcaWifi   = $elementoWifi->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    $tipoWifi    = $elementoWifi->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();

                    $wifi        = array(
                                           'modelo'    => $modeloWifi,
                                           'marca'     => $marcaWifi,
                                           'serie'     => $serieWifi,
                                           'mac'       => $macWifi,
                                           'tipo'      => $tipoWifi
                                        );
                    $elementos[] = $wifi;
                }

                //------------------ Equipos Extenders si existen ---------------
                $arrayElementosExtender = $arrResultado['arrayElementosExtender'];
                if(isset($arrayElementosExtender) && !empty($arrayElementosExtender))
                {
                    foreach($arrayElementosExtender as $objElementosExtender)
                    {
                        $strMacExtender  = $objElementosExtender->getMacElemento();
                        if($strMacExtender)
                        {
                            $strMacExtender = $objElementosExtender->getMacElemento();
                        }
                        else
                        {
                            $strMacExtender = "";
                        }
                        $strSerieExtender   = $objElementosExtender->getSerieFisica();
                        $strModeloExtender  = $objElementosExtender->getModeloElementoId()->getNombreModeloElemento();
                        $strMarcaExtender   = $objElementosExtender->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                        $strTipoExtender    = $objElementosExtender->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();

                        $arrayExtender        = array(
                                            'modelo'    => $strModeloExtender,
                                            'marca'     => $strMarcaExtender,
                                            'serie'     => $strSerieExtender,
                                            'mac'       => $strMacExtender,
                                            'tipo'      => $strTipoExtender
                                        );
                        $elementos[] = $arrayExtender;

                    }
                }
                //----------------------------------------------------------------------------------------------------------------------------
                
                
                //------------------ Equipo elementoMicroSd si existe ---------------
                $arrayElementosMicroSd = $arrResultado['elementoMicroSd'];
                if($arrayElementosMicroSd)
                {
                    $strMacMicroSd      = $arrayElementosMicroSd->getMacElemento() ? $arrayElementosMicroSd->getMacElemento(): "";
                    
                    $strSerieMicroSd    = $arrayElementosMicroSd->getSerieFisica();
                    $strModeloMicroSd   = $arrayElementosMicroSd->getModeloElementoId()->getNombreModeloElemento();
                    $strMarcaMicroSd    = $arrayElementosMicroSd->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    $strTipoMicroSd     = $arrayElementosMicroSd->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();

                    $arrayMicroSd        = array(
                                        'modelo'    => $strModeloMicroSd,
                                        'marca'     => $strMarcaMicroSd,
                                        'serie'     => $strSerieMicroSd,
                                        'mac'       => $strMacMicroSd,
                                        'tipo'      => $strTipoMicroSd
                                    );
                    
                    $elementos[] = $arrayMicroSd;
                }
                //-----------------------------------------------------------------------------------------------------------------------

            }
            //obtener opciones para el acta-----------------------------------------------------------------------------------------------
            $preguntas = $arrResultado['opcionesActaEntrega']['preguntas'];
            //----------------------------------------------------------------------------------------------------------------------------

            //Se obtiene parámetro el label para facturable y si la empresa aplica el número de horas a facturar o no.
            $arrayParametroActaEntrega = $actaEntregaService->getParametroActaEntrega(array("strNombreParametro" => "MOVIL_VISITA_FACTURADA",
                                                                                            "strModulo"          => "TECNICO",
                                                                                            "strEmpresaCod"      => $codEmpresa));

            $resultado = array  (
                                    'documentoIdentidad'    => $identificacionCliente,
                                    'punto'                 => $punto,
                                    'personaContacto'       => $nombreContacto,
                                    'contactos'             => $contactos,
                                    'elementos'             => $elementos,
                                    'preguntas'             => $preguntas,
                                    'observaciones'         => $servicio->getObservacion(),
                                    'mostrarHoras'          => $arrayParametroActaEntrega["strMostrarHoras"],
                                    'tvFacturable'          => $arrayParametroActaEntrega["strTvFacturable"],
                                    'horasDefecto'          => $arrayParametroActaEntrega["intHorasDefecto"]
                                );
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener los terminos y condiciones
     * del acta de entrega
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 17-06-2015
     *
     * @author: Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.1 17-01-2019 Agregando opción para obtener términos y condiciones según el código de la plantilla.
     *
     * @param array $arrayData
     * @return array $resultado
     */
    private function getCatalogoActaEntrega($arrayData)
    {
        $mensaje = "";
        try
        {
            $strCodigo  = $arrayData['data']['srtCodigo'];

            $emComunicacion = $this->getDoctrine()->getManager("telconet_comunicacion");
            $objPlantilla      = $emComunicacion->getRepository('schemaBundle:AdmiPlantilla')
                                                ->findOneBy(array("codigo" => $strCodigo));

            $terminosCondiciones[] = array(
                                            'v' => $objPlantilla->getPlantilla(),
                                            'k' => 'terminosCondicionesActa'
                                          );

            $catalogo = array   (
                                    'terminosCondicionesActa' => $terminosCondiciones
                                );
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['catalogos'] = $catalogo;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;

    }

    /**
     * Funcion que sirve para obtener los elementos conectores disponibles
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 3-08-2015
     * @param array $data
     * @return array $resultado
     */
    private function getElementoConectorDisponible($data)
    {
        $resultado = array();

        try
        {
            $idServicio         = $data['data']['idServicio'];
            $proceso            = $data['data']['proceso'];
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");

            //obtener servicio tecnico
            $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array('servicioId' => $idServicio));


            if($proceso == 'MIGRACION'){
                $elementoConectorDefault = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                             ->findOneBy(array(
                                                                            'refElementoId'=>$servicioTecnico->getElementoConectorId(),
                                                                            'estado'=>'Activo'
                                                                          ));
                $arrayResultado[] = array(
                                            'idElementoConector'    => $elementoConectorDefault->getId(),
                                            'nombreElementoConector'=> $elementoConectorDefault->getNombreElemento()
                                         );
            }
            else if($proceso == 'INSTALACION')
            {
                //setear por default el elemento conector
                $elementoConectorDefault = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                             ->find($servicioTecnico->getElementoConectorId());
                $arrayResultado[] = array(
                                            'idElementoConector'    => $elementoConectorDefault->getId(),
                                            'nombreElementoConector'=> $elementoConectorDefault->getNombreElemento()
                                         );

                $arrayRelacionElemento = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                           ->findBy(array('elementoIdA' => $servicioTecnico->getElementoContenedorId()));

                if(count($arrayRelacionElemento) < 1)
                {
                    throw new \Exception("NULL");
                }

                foreach($arrayRelacionElemento as $relacionElemento)
                {
                    $elementoConector = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($relacionElemento->getElementoIdB());

                    if($elementoConectorDefault->getId() != $elementoConector->getId())
                    {
                         $arrayResultado[] = array(
                                                    'idElementoConector'    => $elementoConector->getId(),
                                                    'nombreElementoConector'=> $elementoConector->getNombreElemento()
                                                  );
                    }
                }
            }
            else
            {
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            $resultado['status']  = $this->status['ERROR'];
            $resultado['mensaje'] = $this->mensaje['ERROR'];
            return $resultado;
        }

        $resultado['elementos'] = $arrayResultado;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener las ips para el servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 3-08-2015
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 02-12-2015 Se agrega validacion de tipo de aprovisionamiento para reserva de Ips
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 25-04-2016 Se corrige validacion de mensaje de error en asignacion de ips en MIGRACIONES
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 04-05-2016 Se agrega parametro en metodo que recupera Ips de pool para asignacion de recursos
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 23-07-2018 Se agrega validación para asignar ip a servicios ZTE
     * @since 1.3
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.5 04-10-2018 Se agrega validación en traslado para que retorne la misma ip, si esta conectado en el mismo equipo.
     * @since 1.4
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.6 22-02-2021 Se agrega el tipo de Ip de la Ip consultada por el servicio.
     * @since 1.5
     * 
     * @param array $data
     * @return array $resultado
     */
    private function getIpsRecursosRed($data)
    {
        $mensaje                  = "";
        $strTipoAprovisionamiento = "";
        try
        {
            $idServicio         = $data['data']['idServicio'];
            $codEmpresa         = $data['data']['codEmpresa'];
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");
            $esPlan             = "no";
            $flagProd           = false;

            //obtener el servicio
            $servicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);

            //obtener servicio tecnico
            $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array('servicioId' => $idServicio));

            //obtener el elemento olt
            $elemento       = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());
            $idElemento     = $elemento->getId();
            $marcaElemento  = $elemento->getModeloElementoId()->getMarcaElementoId();

            /* @var $tecnicoService InfoServicioTecnicoService */
            $tecnicoService = $this->get('tecnico.InfoServicioTecnico');

            /* @var $recursosDeRedService RecursosDeRedService */
            $recursosDeRedService = $this->get('planificacion.RecursosDeRed');

            $producto = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                    ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO",
                                                      "estado"              => "Activo",
                                                      "empresaCod"          => $codEmpresa));

            //verificar si el servicio tiene plan o producto
            if($servicio->getPlanId())
            {
                $esPlan = "si";

                //verificar si el plan tiene ip entre sus productos
                $planDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')->findBy(array("planId"=>$servicio->getPlanId()->getId()));
                $prodIp  = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                       ->findOneBy(array("nombreTecnico"=>"IP", "empresaCod"=>$codEmpresa, "estado"=>"Activo"));
                for($i=0;$i<count($planDet);$i++)
                {
                    if($planDet[$i]->getProductoId() == $prodIp->getId())
                    {
                        $flagProd = true;
                        break;
                    }
                }
            }//if($servicio->getPlanId())

            //CARACTERISTICA TRASLADO
            $traslado = $tecnicoService->getServicioProductoCaracteristica($servicio, "TRASLADO", $producto);

            if($traslado)
            {
                $servicioAnteriorId = $traslado->getValor();
                $servicioTecnicoAnt = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($servicioAnteriorId);
                if($servicioTecnico->getElementoId() == $servicioTecnicoAnt->getElementoId())
                {
                    //copiar la Ip
                    $infoIp = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("servicioId"    => $servicioAnteriorId,
                                                                                                        "estado"        => 'Activo'));
                    if ($infoIp)
                    {
                        //buscar scopes
                        $arrayScopeOlt = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                           ->getScopePorIpFija($infoIp->getIp(), $servicioTecnico->getElementoId());
                        if($arrayScopeOlt)
                        {
                            $scope = $arrayScopeOlt['NOMBRE_SCOPE'];
                        }
                        else
                        {
                            $scope = "";
                        }
                        $arrayResultado              = array();
                        $arrayResultado['ips']       = array();
                        $arrayResultado['error']     = null;
                        $arrayResultado['faltantes'] = 0;
                        $arrayResultado['elemento']  = $servicioTecnico->getElementoId();
                        $arrayIp                     = array();
                        $arrayIp['ip']               = $infoIp->getIp();
                        if ($infoIp->getTipoIp() == 'PRIVADA')
                        {
                            $arrayIp['tipo']  = $infoIp->getTipoIp();
                            $strTipoIp        = $infoIp->getTipoIp();
                        }
                        else
                        {
                            $arrayIp['tipo']  = 'FIJA';
                            $strTipoIp        = 'FIJA';
                        }
                        
                        $arrayIp['scope']            = $scope;
                        $arrayResultado['ips'][]     = $arrayIp;

                        //Retorna la ip si es la misma caja y mismo olt
                        if($flagProd)
                        {
                            $arrayRespuesta = array (
                                            'ip'        => $infoIp->getIp(),
                                            'mascara'   => "",
                                            'gateway'   => "",
                                            'tipo'      => $strTipoIp,
                                            'scope'     => $scope,
                                            'flag'      => $flagProd
                                        );
                        }
                        else
                        {
                             $arrayRespuesta = array (
                                            'ip'        => "",
                                            'mascara'   => "",
                                            'gateway'   => "",
                                            'tipo'      => "",
                                            'scope'     => "",
                                            'flag'      => $flagProd
                                        );
                        }

                        $arrayResultadoData['ipRecurso'] = $arrayRespuesta;
                        $arrayResultadoData['status']    = $this->status['OK'];
                        $arrayResultadoData['mensaje']   = $this->mensaje['OK'];
                        return $arrayResultadoData;

                    }//if ($infoIp)
                }//if($servicioTecnico->getElementoId() == $servicioTecnicoAnt->getElementoId())
            }//if($traslado)

            if($flagProd)
            {
                //se valida marca del elemento,en caso de venir nula se recupera la marca del elemento del servicio de internet
                if ($marcaElemento == null || $marcaElemento == "" || $marcaElemento == 'null')
                {
                    $idElemento = $emComercial->getRepository("schemaBundle:InfoElemento")
                                              ->getElementoParaPerfil($idServicio, $esPlan, $servicio->getPuntoId());
                    if(strpos($idElemento, 'Error') !== false)
                    {
                        $arrayResultado['error'] = $idElemento;
                    }
                    else
                    {
                        $entityElementoOlt = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->find($idElemento);
                        $marcaElemento     = $entityElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    }
                }
                if ($marcaElemento == 'TELLION')
                {
                    $strTipoAprovisionamiento = $recursosDeRedService->geTipoAprovisionamiento($idElemento);
                    if ($strTipoAprovisionamiento == 'POOL')
                    {
                        $arrayResultado = $recursosDeRedService->getIpsDisponiblePoolOlt( $servicio->getCantidad(), $idElemento, $idServicio,
                                                                                          $servicio->getPuntoId()->getId(), $esPlan,
                                                                                          $servicio->getPlanId()->getId(), "SI");
                    }
                    else
                    {
                        $arrayResultado = $recursosDeRedService->getIpsDisponibleScopeOlt( $servicio->getCantidad(), $idElemento, $idServicio,
                                                                                           $servicio->getPuntoId()->getId(), $esPlan,
                                                                                           $servicio->getPlanId()->getId());
                    }
                }
                else if ($marcaElemento == 'HUAWEI' || $marcaElemento == 'ZTE')
                {
                    $arrayResultado = $recursosDeRedService->getIpsDisponibleScopeOlt(  $servicio->getCantidad(), $idElemento, $idServicio,
                                                                                        $servicio->getPuntoId()->getId(), $esPlan,
                                                                                        $servicio->getPlanId()->getId());
                }
                else
                {
                    $arrayResultado = $emInfraestructura->getRepository('schemaBundle:InfoIp')->getIpsReservadasOlt($idServicio);
                    if (isset($arrayResultado['error']))
                    {
                        $strTipoAprovisionamiento = $recursosDeRedService->geTipoAprovisionamiento($servicioTecnico->getElementoId());
                        if (strpos($arrayResultado['error'],'No existen Ips Reservadas para este servicio') !== false &&
                            $strTipoAprovisionamiento == "CNR")
                        {
                            $arrayResultado = $emInfraestructura->getRepository('schemaBundle:InfoIp')->getIpsReservadasOlt($idServicio, "Activo");

                        }
                        else
                        {
                            $arrayResultado = $recursosDeRedService->getIpsDisponibleScopeOlt(  $servicio->getCantidad(),
                                                                                                $idElemento,
                                                                                                $idServicio,
                                                                                                $servicio->getPuntoId()->getId(),
                                                                                                $esPlan,
                                                                                                $servicio->getPlanId()->getId() );
                        }

                    }
                }

                //verificar si el resultado viene con error
                if(isset($arrayResultado['error']))
                {
                    $mensaje = $arrayResultado['error'];
                    throw new \Exception('ERROR_PARCIAL');
                }

                $arrayRespuesta = array (
                                            'ip'        => $arrayResultado['ips'][0]['ip'],
                                            'mascara'   => "",
                                            'gateway'   => "",
                                            'tipo'      => $arrayResultado['ips'][0]['tipo'],
                                            'scope'     => $arrayResultado['ips'][0]['scope'],
                                            'flag'      => $flagProd
                                        );
            }
            else
            {
                $arrayRespuesta = array (
                                            'ip'        => "",
                                            'mascara'   => "",
                                            'gateway'   => "",
                                            'tipo'      => "",
                                            'scope'     => "",
                                            'flag'      => $flagProd
                                        );
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']  = $this->status['ERROR'];
                $resultado['mensaje'] = $this->mensaje['ERROR'];
            }
            return $resultado;
        }

        $resultado['ipRecurso'] = $arrayRespuesta;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener los materiales para la instalacion del servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 20-08-2015
     *
     * @author Modificado: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.1 05-08-2018
     * Se envia un nuevo parámetro idPersonaEmpresaRol para el nuevo proceso de registro de materiales en el NAF de custodio para la fibra óptica.
     * @since 1.0
     *
     * @param array $data
     * @return array $resultado
     */
    private function getMaterialesInstalacion($data)
    {
        $mensaje = "No se pudieron obtener los materiales!";

        try
        {
            $idServicio     = $data['data']['idServicio'];
            $codEmpresa     = $data['data']['codEmpresa'];
            $start          = $this->get('request')->query->get('start');
            $limit          = $this->get('request')->query->get('limit');
            $emComercial    = $this->getDoctrine()->getManager("telconet");
            $emSoporte      = $this->getDoctrine()->getManager("telconet_soporte");
            $emNaf          = $this->getDoctrine()->getManager("telconet_naf");
            $nombreProceso  = "SOLICITAR NUEVO SERVICIO FIBRA";

            $tipoSolicitud      = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                              ->findOneBy(array('descripcionSolicitud'   => 'SOLICITUD PLANIFICACION',
                                                                'estado'                 => 'Activo'));
            $detalleSolicitud   = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                              ->findOneBy(array('tipoSolicitudId' => $tipoSolicitud->getId(),
                                                                'servicioId'      => $idServicio));
            $proceso            = $emSoporte->getRepository('schemaBundle:AdmiProceso')
                                            ->findOneBy(array('nombreProceso' => $nombreProceso,
                                                              'estado' => 'Activo'));
            $stringMateriales   = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                            ->generarJsonIngresarMateriales($emComercial, $emNaf, $start, $limit,
                                                                            $detalleSolicitud->getId(), $proceso->getId(), $codEmpresa);
            $jsonTodo                       = json_decode($stringMateriales);
            $jsonMateriales                 = $jsonTodo->encontrados;

            if(isset($data['data']['idPersonaEmpresaRol'])){
                $arrayRespuestaMaterialesNaf    = $this->getMaterialesNaf($data);
                $arrayMaterialesNaf             = $arrayRespuestaMaterialesNaf['data']['materialesNaf'];
                $intCantidadLimiteFibra         = $arrayRespuestaMaterialesNaf['data']['cantidadLimiteFibra'];
            }

        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        if(isset($data['data']['idPersonaEmpresaRol'])){
            $resultadoMateriales        = array('materiales'            => $jsonMateriales ,
                                                'materialesNaf'         => $arrayMaterialesNaf,
                                                'cantidadLimiteFibra'   => $intCantidadLimiteFibra);
            $resultado['data']          = $resultadoMateriales;
            $resultado['status']        = $this->status['OK'];
            $resultado['mensaje']       = $this->mensaje['OK'];
        }else{
            $resultado['materiales']    = $jsonMateriales;
            $resultado['status']        = $this->status['OK'];
            $resultado['mensaje']       = $this->mensaje['OK'];
        }

        return $resultado;
    }

    /**
     * Funcion que sirve para obtener la ruta georreferencial del punto
     *
     * @author Juan Carlos Lafuente <jlafuente@telconet.ec>
     * @version 1.0 08-10-2015
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.1 12-09-2018 Retornar la ruta georeferencial de la minimanga
     * @since 1.0
     *
     * @param array $data
     * @return array $resultado
     */
    private function getRutaGeorreferencialFibra($data)
    {
        $mensaje = "No se pudo obtener la ruta georreferencial de la fibra!";
        $rutaGeorreferencial="";
        $strRutaGeoreferenciaMiniManga =null;
        try
        {
            $idServicio     = $data['data']['idServicio'];

            $emComercial    = $this->getDoctrine()->getManager("telconet");

            // Se obtiene el servicio
            $entityServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);

            // Se obtiene el punto
            $entityPunto = $entityServicio->getPuntoId();

            $arrayParams            = array('entityPunto'                      => $entityPunto,
                                            'strDescripcionCaracteristica'     => 'Ruta Georreferencial',
                                            'strEstado'                        => 'Activo');

            $arrayParamsMinimanga   = array('entityPunto'                      => $entityPunto,
                                            'strDescripcionCaracteristica'     => 'RUTA GEOREFERENCIAL MINIMANGA',
                                            'strEstado'                        => 'Activo');
            /********************/
            $arrayIPC               = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
                                                  ->getPuntoCaracteristica($arrayParams);

            $arrayResultMinimanga   = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
                                                  ->getPuntoCaracteristica($arrayParamsMinimanga);
            if($arrayIPC)
            {
                $rutaGeorreferencial = json_decode($arrayIPC[0]->getValor());
            } else {
                throw new \Exception("ERROR_PARCIAL");
            }

            if(isset($arrayResultMinimanga) && !empty($arrayResultMinimanga)){
                $strRutaGeoreferenciaMiniManga = json_decode($arrayResultMinimanga[0]->getValor());
            }
            /**********************/
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        if(isset($data['data']['movil']) && !empty($data['data']['movil'])){
            $resultado['data']                  = array("rutaGeorreferencial"           => $rutaGeorreferencial,
                                                        "strRutaGeoreferenciaMiniManga" => $strRutaGeoreferenciaMiniManga) ;
            $resultado['status']                = $this->status['OK'];
            $resultado['mensaje']               = $this->mensaje['OK'];
        }else{
            $resultado['rutaGeorreferencial']   = $rutaGeorreferencial;
            $resultado['status']                = $this->status['OK'];
            $resultado['mensaje']               = $this->mensaje['OK'];
        }

        return $resultado;
    }

    /********************************************************************************************
     * FIN METODOS GET TECNICO MOBIL
     ********************************************************************************************/

    /********************************************************************************************
     * METODOS PUT TECNICO MOBIL
     ********************************************************************************************/

    /**
     * Funcion que sirve para la activacion del servicio:
     * Nuevo, Reubicacion, Traslado
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 3-06-2015
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 27-08-2015
     *
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.2 25-05-2016    Se agrega parametro idOficina para la activacion de servicio MCAFEE
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 21-03-2018  Se genera un numero de tarea en la creacion de la tarea
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 11-05-2018  Se retira bloque de ingreso de auditoria de elementos, debido a que la informacion se esta duplicando
     *
     * @author Modificado: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.5 23-06-2018  Se ingresa una bandera para saber en que estado la instalacion (PROCESANDO,ROLLBACK,REALIZADO) para el movil operaciones
     *
     * @author Modificado: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.6 24-07-2018
     * Se envia un nuevo parámetro origenMovil. El cual es enviado desde el móvil telcos operaciones, para que no finalice la solicitud
     * ni las tareas asociadas a la solicitud cuando active el servicio en un Traslado.
     *
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.7 24-07-2018  Se agrega nuevo modelo de OLT ZTE en validación
     * @since 1.5
     *
     * @author Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.6 1-04-2019 - Se modifica método para finalizar la solicitud en la
     * activación.
     * @since 1.5
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.7 24-1-2020 - Se modifica método para activar productos adicionales meagadatos.
     * activación.
     * @since 1.6 
     * 
     * 
     * @param array $data
     * @return array $resultado
     */
    private function putActivarServicio($data)
    {
        $serviceAuditoria = $this->get('tecnico.InfoElemento');
        ini_set('max_execution_time', 400000);
        $mensajeError           = "";
        $soporteService         = $this->get('soporte.SoporteService');
        $intIdDetalleSolicitud  = $data['data']['detSolicitudId'];

        try
        {
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");

            $servicio           = $emComercial->getRepository('schemaBundle:InfoServicio')->find($data['data']['idServicio']);
            $servicioTecnico    = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($servicio->getId());
            $elementoOlt        = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());

            //inicializar el service
            $activacion = $this->get('tecnico.InfoActivarPuerto');

            //Insert inicio de la activacion para control de la activacion en el movil operaciones
            $arrayEstadoInstalacion = array(
                       'servicioId'  => $data['data']['idServicio'],
                       'user'        => $data['user'],
                       'estado'      => 'PROCESANDO'
                      );

            $soporteService->ingresarEstadoInstalacion($arrayEstadoInstalacion);
            //////////////////////////////////////////////////////////////////

            //obtener los datos y departamento de la persona por empresa
            $datos = $emComercial->getRepository('schemaBundle:InfoPersona')
                                 ->getPersonaDepartamentoPorUserEmpresa($data['user'], $data['data']['codEmpresa']);

            if($servicio->getTipoOrden() == 'N')
            {
                $descripcionWifi = $data['data']['descripcionWifi'];
                $descripcionOnt  = $data['data']['descripcionOnt'];

                if($elementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento() == "HUAWEI" ||
                   $elementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento() == "ZTE")
                {
                    if($descripcionOnt=="" || $descripcionOnt==null)
                    {
                        $mensajeError = "No Existen los datos de los Elementos del Cliente, Favor Revisar!";
                        throw new \Exception("ERROR_PARCIAL");
                    }
                }
                else
                {
                    if($descripcionOnt=="" || $descripcionOnt==null || $descripcionWifi=="" || $descripcionWifi==null)
                    {
                        $mensajeError = "No Existen los datos de los Elementos del Cliente, Favor Revisar!";
                        throw new \Exception("ERROR_PARCIAL");
                    }
                }
            }

            $arrayPeticiones = array(
                                    'idEmpresa'                     => $data['data']['codEmpresa'],
                                    'prefijoEmpresa'                => $data['data']['prefijoEmpresa'],
                                    'idOficina'                     => $data['data']['idOficina'],
                                    'idServicio'                    => $data['data']['idServicio'],
                                    'idProducto'                    => $data['data']['idProducto'],
                                    'perfil'                        => $data['data']['perfil'],
                                    'login'                         => $data['data']['login'],
                                    'interfaceElementoId'           => $data['data']['idInterfaceElemento'],
                                    'interfaceElementoSplitterId'   => $data['data']['nombreInterfaceElementoConector'],
                                    'ultimaMilla'                   => $data['data']['ultimaMilla'],
                                    'plan'                          => $data['data']['idPlan'],
                                    'macWifi'                       => $data['data']['macWifi'],
                                    'serieWifi'                     => $data['data']['serieWifi'],
                                    'modeloWifi'                    => $data['data']['modeloWifi'],
                                    'macOnt'                        => $data['data']['macOnt'],
                                    'serieOnt'                      => $data['data']['serieOnt'],
                                    'modeloOnt'                     => $data['data']['modeloOnt'],
                                    'ssid'                          => $data['data']['ssid'],
                                    'password'                      => $data['data']['password'],
                                    'numeroPc'                      => $data['data']['numeroPc'],
                                    'modoOperacion'                 => $data['data']['modoOperacion'],
                                    'observacion'                   => $data['data']['observacionCliente'],
                                    'usrCreacion'                   => $data['user'],
                                    'ipCreacion'                    => "127.0.0.1",
                                    'serNaf'                        => $this->container->getParameter('database_host_naf'),
                                    'ptoNaf'                        => $this->container->getParameter('database_port_naf'),
                                    'sidNaf'                        => $this->container->getParameter('database_name_naf'),
                                    'usrNaf'                        => $this->container->getParameter('user_naf'),
                                    'pswNaf'                        => $this->container->getParameter('passwd_naf'),
                                    'mac'                           => "",
                                    'ipCpeRadio'                    => "",
                                    'capacidad1'                    => "",
                                    'capacidad2'                    => "",
                                    'idPersonaEmpresaRol'           => $datos['ID_PERSONA_EMPRESA_ROL'],
                                    'origenMovil'                   => $data['data']['origenMovil'],
            );

            //activar el servicio
            $respuestaArray = $activacion->activarCliente($arrayPeticiones);

            //obtener respuesta
            $status         = $respuestaArray[0]['status'];
            $mensaje        = $respuestaArray[0]['mensaje'];

            if($status != "OK")
            {
                //Insert de estado ROLLBACK, cuando existe problemas en la instalación

                $arrayEstadoInstalacion = array(
                       'servicioId'  => $data['data']['idServicio'],
                       'user'        => $data['user'],
                       'estado'      => 'ROLLBACK'
                      );
                $soporteService->ingresarEstadoInstalacion($arrayEstadoInstalacion);
                //////////////////////////////////////////////////////////////////

                if($mensaje == "java.net.ConnectException: Connection timed out")
                {
                    $result = "No Existe Conectividad hacia el Elemento! Favor comunicarse con el departamento de GEPON";
                }
                else if($mensaje === '"java.lang.Exception: No se pudo alcanzar el host..."')
                {
                    $mensaje = "El elemento no es alcanzable desde el Servidor Telcos, favor comunicarse con el Dep. GEPON!";
                }
                else if($mensaje == "NO ID CLIENTE")
                {
                    $result = "Slot no existe, favor revise la Linea Pon donde debe enganchar el cliente!";
                }
                else if($mensaje == "MAX ID CLIENTE")
                {
                    $result = "Limite de clientes por Puerto esta en el maximo, Favor comunicarse con el departamento de GEPON";
                }
                else if($mensaje == "CANTIDAD CERO")
                {
                    $result = "CPEs Agotados, favor revisar!";
                }
                else if($mensaje == "NO EXISTE CPE")
                {
                    $result = "No existe el Elemento Cliente indicado, favor revisar!";
                }
                else if($mensaje == "CPE NO ESTA EN ESTADO")
                {
                    $result = "Elemento Cliente no esta en estado: PENDIENTE INSTALACION/RETIRADO, favor revisar!";
                }
                else if($mensaje == "NO EXISTE TAREA")
                {
                    $result = "No existe el Script para realizar la transaccion!";
                }
                else if($status == "NAF")
                {
                    $result = "No existe el Elemento Cliente indicado, favor revisar!";
                }
                else
                {
                    $result = $mensaje;
                }

                $mensajeError = $result;
                throw new \Exception("ERROR_PARCIAL");
            }
            else
            {
                if($data['data']['prefijoEmpresa'] == "MD")
                {
                    $objTemplating           = $this->container->get('templating');
                    $objMailer               = $this->container->get('mailer');
                    $strMailerSend           = $this->container->getParameter('mailer_send');
                    $entityDetalleSolicitud  = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')->find($intIdDetalleSolicitud);
                    $objInfoServicio         = $entityDetalleSolicitud->getServicioId();
                    $strIpCreacion           = "127.0.0.1";

                    $entityServicioHistorial = new InfoServicioHistorial();
                    $entityServicioHistorial->setServicioId($objInfoServicio);
                    $entityServicioHistorial->setIpCreacion($strIpCreacion);
                    $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $entityServicioHistorial->setUsrCreacion($data['user']);
                    $entityServicioHistorial->setEstado($objInfoServicio->getEstado());
                    $entityServicioHistorial->setObservacion("Se finalizo la Instalación");
                    $emComercial->persist($entityServicioHistorial);
                    $emComercial->flush();

                    $entityDetalleSolicitud->setEstado("Finalizada");
                    $emComercial->persist($entityDetalleSolicitud);
                    $emComercial->flush();

                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                    $objLastDetalleSolhist = $emComercial->getRepository('schemaBundle:InfoDetalleSolHist')
                    ->findOneDetalleSolicitudHistorial($intIdDetalleSolicitud, 'Planificada');

                    $entityDetalleSolHist = new InfoDetalleSolHist();
                    $entityDetalleSolHist->setDetalleSolicitudId($entityDetalleSolicitud);
                    if($objLastDetalleSolhist)
                    {
                        $entityDetalleSolHist->setFeIniPlan($objLastDetalleSolhist->getFeIniPlan());
                        $entityDetalleSolHist->setFeFinPlan($objLastDetalleSolhist->getFeFinPlan());
                        $entityDetalleSolHist->setObservacion($objLastDetalleSolhist->getObservacion());
                    }
                    $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                    $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                    $entityDetalleSolHist->setUsrCreacion($data['user']);
                    $entityDetalleSolHist->setEstado('Finalizada');

                    $emComercial->persist($entityDetalleSolHist);
                    $emComercial->flush();

                    //------- COMUNICACIONES --- NOTIFICACIONES
                    $objMail = $objTemplating->render('planificacionBundle:Coordinar:notificacion.html.twig',
                    array('detalleSolicitud' => $entityDetalleSolicitud,
                    'detalleSolicitudHist' => null,
                    'motivo' => null));

                    $strAsunto = "Solicitud de Instalacion Finalizada #" . $entityDetalleSolicitud->getId();

                    //DESTINATARIOS....
                    $arrayFormasContacto = $emComercial->getRepository('schemaBundle:InfoPersona')
                    ->getContactosByLoginPersonaAndFormaContacto($objInfoServicio->getPuntoId()->getUsrVendedor(),
                    'Correo Electronico');
                    $arrayTo = array();
                    $arrayCc = array();
                    $arrayTo[] = 'notificaciones_telcos@telconet.ec';

                    if($arrayFormasContacto)
                    {
                        foreach($arrayFormasContacto as $formaContacto)
                        {
                            $arrayTo[] = $formaContacto['valor'];
                        }
                    }

                    //ENVIO DE MAIL
                    $objMessage = \Swift_Message::newInstance()
                                ->setSubject($strAsunto)
                                ->setFrom('notificaciones_telcos@telconet.ec')
                                ->setTo($arrayTo)
                                ->setCc($arrayCc)
                                ->setBody($objMail, 'text/html');
                    if($strMailerSend == "true")
                    {
                        $objMailer->send($objMessage);
                    }

                }
                else
                {
                    throw new \Exception("No se finalizo la instalación");
                }

                //Insert inicio de la activacion para control de la activacion en el movil operaciones
                $arrayEstadoInstalacion = array(
                       'servicioId'  => $data['data']['idServicio'],
                       'user'        => $data['user'],
                       'estado'      => 'REALIZADO'
                      );
                $soporteService->ingresarEstadoInstalacion($arrayEstadoInstalacion);
                //////////////////////////////////////////////////////////////////
                $mensaje = "Se Activo el cliente";
            }

        }
        catch(\Exception $e)
        {
            //Insert de estado ROLLBACK, cuando existe problemas en la instalación
            $arrayEstadoInstalacion = array(
                   'servicioId'  => $data['data']['idServicio'],
                   'user'        => $data['user'],
                   'estado'      => 'ROLLBACK'
                  );
            $soporteService->ingresarEstadoInstalacion($arrayEstadoInstalacion);
            //////////////////////////////////////////////////////////////////

            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensajeError;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }


    /**
     * Funcion que sirve para grabar el registro de cuadrillas
     * desde TM OPERACIONES.
     *
     * @author Wilmer Vera G. <wvera@telconet.ec>
     * @version 1.0 21-08-2019
     *
     * Se agrega variable para uso de insertError.
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.1 10-01-2020
     *
     * @param array $arrayData
     * @return array $resultado
     */
    private function putRegistroCuadrillaHistorial($arrayData)
    {
        $strMensaje = "No se pudieron grabar los parámetros iniciales";
        $serviceUtil = $this->get('schema.Util');

        {
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emGeneral          = $this->getDoctrine()->getManager("telconet_general");

            $strDateActual      = new \DateTime('now');
            $strUser            = $arrayData['usuario'];
            $strObservacion     = $arrayData['data']['observacion'];
            $strNombreMotivo    = $arrayData['data']['nombreMotivo'];
            $intCuadrillaId     = $arrayData['data']['idCuadrilla'];

            $emComercial->getConnection()->beginTransaction();

            try
            {
                $objMotivo    = $emGeneral->getRepository('schemaBundle:AdmiMotivo')->findOneBy(
                                array(
                                    'nombreMotivo' =>  $strNombreMotivo,
                                    'estado' => 'Activo'
                                    )
                                );

                $objCuadrilla = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')->findOneById($intCuadrillaId);


                if (!isset($objMotivo) && empty($objMotivo))
                {
                    $arrayRespuesta['status']                 = $this->status['CONSULTA'];
                    $arrayRespuesta['mensaje']                = "No existe motivo con nombre ".$strNombreMotivo;
                    $arrayRespuesta['idHistorialCuadrilla']   = "";
                    return $arrayRespuesta;
                }
                else if(!isset($objCuadrilla) && empty($objCuadrilla))
                {
                    $arrayRespuesta['status']                 = $this->status['CONSULTA'];
                    $arrayRespuesta['mensaje']                = "No existe cuadrilla con id ".$intCuadrillaId;
                    $arrayRespuesta['idHistorialCuadrilla']   = "";
                    return $arrayRespuesta;
                }

                //grabar el historial del cuadrillas
                $objCuadrillaHistorial = new AdmiCuadrillaHistorial();
                $objCuadrillaHistorial->setCuadrillaId($objCuadrilla);
                $objCuadrillaHistorial->setEstado('Activo');
                $objCuadrillaHistorial->setFeCreacion($strDateActual);
                $objCuadrillaHistorial->setUsrCreacion($strUser);
                $objCuadrillaHistorial->setObservacion($strObservacion);
                $objCuadrillaHistorial->setMotivoId($objMotivo->getId());
                $emComercial->persist($objCuadrillaHistorial);
                $emComercial->flush();

            }
            catch(\Exception $ex)
            {
                $serviceUtil->insertError( 'Telcos+',
                'TecnicoWSController->putRegistroCuadrillaHistorial',
                'Error al grabar el registro cuadrilla historial. '.$ex->getMessage(),
                $arrayData['user'],
                "127.0.0.1" );

                if($emComercial->getConnection()->isTransactionActive())
                {
                    $emComercial->getConnection()->rollback();
                }

                if($ex->getMessage() == "NULL")
                {
                    $arrayResultado['status']    = $this->status['NULL'];
                    $arrayResultado['mensaje']   = $this->mensaje['NULL'];
                }
                else if($ex->getMessage() == "ERROR_PARCIAL")
                {
                    $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                    $arrayResultado['mensaje']   = $strMensaje;
                }
                else
                {
                    $arrayResultado['status']    = $this->status['ERROR'];
                    $arrayResultado['mensaje']   = $this->mensaje['ERROR'];
                }

                $arrayRespuesta['idHistorialCuadrilla']   = "";
                return $arrayRespuesta;
            }

            //*DECLARACION DE COMMITS*/
            if($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->commit();
            }

            $arrayRespuesta['status']                 = $this->status['OK'];
            $arrayRespuesta['mensaje']                = "Registro guardado exitosamente";
            $arrayRespuesta['idHistorialCuadrilla']   = $objCuadrillaHistorial->getId();

            return $arrayRespuesta;
        }
    }


    /**
     * Función que sirve para obtener el registro de cuadrillas
     * por medio del usuario y la fecha, esto es usado en el
     * apartado de fiscalización - TM-Operaciones.
     *
     * @author Wilmer Vera G. <wvera@telconet.ec>
     * @version 1.0 16-08-2019
     * @param array $arrayParametros Datos necesiarios en un array
     *                  *userCreacion -> usuario de creación
     *                  *feCreacion   -> fecha actual.
     *
     *  Se optimiza código usado para el consumo de cuadrillas fiscalizadas.
     * @author Wilmer Vera G. <wvera@telconet.ec>
     * @version 1.1 10-10-2019
     *
     *  Se agrega variable para uso de insertError.
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.2 10-01-2020
     *
     * @param array $arrayParametros Datos necesiarios en un array
     *                  *userCreacion -> usuario de creación
     *                  *feCreacion   -> fecha actual.
     * @return array $resultado cuadrillas fiscalizadas
     */
    private function getCuadrillasFiscalizadas($arrayParametros)
    {
        $arrayCuadrillas      = array();
        $emComercial          = $this->getDoctrine()->getManager("telconet");
        $strMensaje           = "No se pudo obtener las cuadrillas fiscalizadas, intentelo nuevamente";
        $serviceUtil          = $this->get('schema.Util');

        try
        {
            $objAdmiCuadrilla = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')->obtenerCuadrillasFiscalizadas($arrayParametros);

            if(count($objAdmiCuadrilla) < 1)
            {
                throw new \Exception("ERROR_PARCIAL");
            }
            foreach($objAdmiCuadrilla as $cuadrilla)
            {
                $arrayCuadrillas[] = array(
                    'idCuadrillaHistorial'  => $cuadrilla['idCuadrillaHistorial'],
                    'nombreCuadrilla'       => $cuadrilla['nombreCuadrilla'],
                    'usuarioCreacion'       => $cuadrilla['usuarioCreacion'],
                    'feCreacion'            => $cuadrilla['feCreacion'],
                    'observacion'           => $cuadrilla['observacion']
                    );
            }

            $strMensaje = "Se grabaron los Parámetros Iniciales!";
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
            'TecnicoWSController->getCuadrillasFiscalizadas',
            'Error al obtener las cuadrillas ya fiscalizadas. '.$ex->getMessage(),
            $arrayParametros['userCreacion'],
            "127.0.0.1" );

            if($ex->getMessage() == "NULL")
            {
                $arrayResultado['status']    = $this->status['NULL'];
                $arrayResultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']   = $strMensaje;
            }
            else
            {
                $arrayResultado['status']    = $this->status['ERROR'];
                $arrayResultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $arrayResultado;
        }

        $arrayResultado['cuadrillasFiscalizadas'] = $arrayCuadrillas;
        $arrayResultado['status']                 = $this->status['OK'];
        $arrayResultado['mensaje']                = $this->mensaje['OK'];
        return $arrayResultado;
    }


    /**
     * getFactibilidadXServicio
     *
     * Función que retorna la factibilidad de una servicio
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 06-04-2020
     *
     * @param array $arrayRequest
     *                          "data"  => array con los parámetros necesarios para la consulta de la factibilidad
     *                                     [
     *                                          codEmpresa       => codigo de la empresa
     *                                          prefijoEmpresa   => prefijo de la empresa
     *                                          longitud         => datos GPS del punto del servicio
     *                                          latitud          => datos GPS del punto del servicio
     *                                          anchoBanda       => ancho de banda del servicio
     *                                          dependeEdificio  => SI/NO
     *                                          tipoRed          => MPLS/GPON
     *                                     ],
     *                          "op"         => string con el nombre de la función que se desea consultar,
     *                          "source"     => {"name","originID","tipoOriginID"},
     *                          "token"      => token,
     *                          "user"       => string del login del usuario en sesión
     *                        ]
     *
     *
     * @return array $resultado datos de factibilidad
     */
    private function consultarFactibilidadXServicio($arrayRequest)
    {
        $arrayResultado         = array();
        $arrayDatosFactibilidad = array();
        $arrayDistanciaRegFacTn = array();
        $emInfraestructura      = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emGeneral              = $this->getDoctrine()->getManager('telconet_general');
        $emComercial            = $this->getDoctrine()->getManager('telconet_general');
        $strCodEmpresa          = $arrayRequest['data']['codEmpresa'];
        $strPrefijoEmpresa      = $arrayRequest['data']['prefijoEmpresa'];
        $strLongitud            = $arrayRequest['data']['longitud'];
        $strLatitud             = $arrayRequest['data']['latitud'];
        $strAnchoBanda          = $arrayRequest['data']['anchoBanda'];
        $strDependeEdificio     = $arrayRequest['data']['dependeEdificio'];
        $strTipoRed             = $arrayRequest['data']['tipoRed'];
        $strExisteFactibilidad  = "NO";
        $boolProductoEspecial   =  null;
        $strTipoInterface       = "Fa";
        $intLimiteCajas         = 0;
        $serviceInfoServicio    = $this->get('comercial.InfoServicio');
        $intContador            = 0;
        $strNombreSwitch        = "";
        $strInterfaceSwitch     = "";

        $strUserCreacion    = $arrayRequest['user'];
        $strIpCreacion      = $arrayRequest['source']['originID'];

        $strMensaje         = "Transacción realizada con exito!";
        $strStatus          = "OK";

        $serviceUtil        = $this->get('schema.Util');

        try
        {
            if($strLongitud === "" || $strLatitud === "" || $strDependeEdificio === "" || $strTipoRed === "" || $strCodEmpresa === ""
               || $strPrefijoEmpresa === "")
            {
                $strStatus  = "ERROR";
                $strMensaje = "Parámetros incompletos";
            }
            else
            {
                if(!is_numeric($strAnchoBanda))
                {
                    $strStatus  = "ERROR";
                    $strMensaje = "El ancho de banda tiene que ser un valor numérico";
                }
                else
                {
                    if(!empty($strAnchoBanda))
                    {
                        //Segun definiciones de GIS si el ancho de banda esta entre 0 y 81920 kbps se debe aprovisionar factibilidad en puertos Fa
                        if ((int)$strAnchoBanda > 0 &&  (int)$strAnchoBanda <= 81920)
                        {
                            $strTipoInterface = 'Fa';
                        }
                        //Segun definiciones de GIS si el ancho de banda es mayor a 81920 kbps se debe aprovisionar factibilidad en puertos Gi
                        else
                        {
                            $strTipoInterface = 'Gi';
                        }
                    }

                    //Se obtiene el valor limite de cajas a retornar
                    $arrayLimiteCajas = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->getOne('PARAMETROS PROYECTO CONSULTA FACTIBILIDAD CRM',
                                                           'INFRAESTRUCTURA',
                                                           'CONSULTAR FACTIBILIDAD',
                                                           'LIMITE_CAJAS_MOSTRAR',
                                                           '',
                                                           '',
                                                           '',
                                                           '',
                                                           '',
                                                           '10');

                    if(isset($arrayLimiteCajas["valor1"]) && !empty($arrayLimiteCajas["valor1"]))
                    {
                        $intLimiteCajas = $arrayLimiteCajas["valor1"];
                    }

                    //Se consulta el objeto de la empresa en base al prefijo
                    $objInfoEmpresa = $emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')->findOneBy(array('prefijo' => $strPrefijoEmpresa,
                                                                                                                    'estado'  => 'Activo'));

                    //Se genera un objeto con datos necesarios para poder evaluar la restricción.
                    $objParametrosRestriccion = array('boolProductoEspecial'  =>  isset($boolProductoEspecial) ? $boolProductoEspecial : null,
                                                      'objInfoEmpresa'        =>  $objInfoEmpresa);

                    $arrayParametros                                 = array ();
                    $arrayParametros['intIdEmpresa']                 = $strCodEmpresa;
                    $arrayParametros['intLatitudPunto']              = $strLatitud;
                    $arrayParametros['intLongitudPunto']             = $strLongitud;
                    $arrayParametros['strTecnologiaFactibilidad']    = "";
                    $arrayParametros['strPrefijoEmpresa']            = $strPrefijoEmpresa;
                    $arrayParametros['strDependeEdificio']           = $strDependeEdificio;
                    $arrayParametros['arrayTecnologiasNoPermitidas'] = "";
                    $arrayParametros['infoServicioService']          = $serviceInfoServicio;
                    $arrayParametros['objParametrosRestriccion']     = $objParametrosRestriccion;

                    //Se consulta las cajas mas cercanas
                    $arrayCajasMasCercanas = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->findCajaMasCercana($arrayParametros);

                    if(count($arrayCajasMasCercanas) > 0)
                    {
                        foreach ($arrayCajasMasCercanas as $clave => $fila)
                        {
                            $arrayDistanciaRegFacTn[$clave] = $fila['distancia'];
                        }

                        //Ordenar los datos con distancia de forma ascendente
                        array_multisort($arrayDistanciaRegFacTn, SORT_ASC, $arrayCajasMasCercanas);

                        foreach ($arrayCajasMasCercanas as &$arrayIdxCaja)
                        {
                            //Validar si tiene hilos disponibles y consultar el nombre nombre del SWITCH
                            $strTieneBufferHilo = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                    ->validarBufferHilo($arrayIdxCaja['idInterfaceElementoConector']);

                            if($strTieneBufferHilo == "S")
                            {
                                $arrayParametros                                = array ();
                                $arrayParametros['interfaceElementoConectorId'] = $arrayIdxCaja['idInterfaceElementoConector'];
                                $arrayParametros['strTipoInterface']            = $strTipoInterface;

                                $arrayRespuestaFactRegistro = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                ->getOdfFactTnByInterfaceOutCassette($arrayParametros);

                                if ($arrayRespuestaFactRegistro['status'] == 'OK')
                                {
                                    $objInterfaceSW = $arrayRespuestaFactRegistro['objInterfaceSw'];

                                    if(is_object($objInterfaceSW))
                                    {
                                        $intContador        = $intContador + 1;
                                        $strNombreSwitch    = $objInterfaceSW->getElementoId()->getNombreElemento();
                                        $strInterfaceSwitch = $objInterfaceSW->getNombreInterfaceElemento();

                                        $arrayDatosFactibilidad[] = array('switch'     =>  $strNombreSwitch,
                                                                          'puerto'     =>  $strInterfaceSwitch,
                                                                          'caja'       => $arrayIdxCaja["nombreCaja"],
                                                                          'distancia'  => $arrayIdxCaja["distancia"],
                                                                          'cassette'   => $arrayIdxCaja["nombreElementoConector"],
                                                                          'inCassette' => $arrayIdxCaja["nombreInterfaceElementoConector"]);

                                        $strExisteFactibilidad = "SI";
                                    }
                                }
                            }

                            if($intContador == $intLimiteCajas)
                            {
                                break;
                            }
                        }
                    }
                }
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError('Telcos+',
                                      'TecnicoWSController->consultarFactibilidadXServicio',
                                      'Error al consultarFactibilidad: '.$ex->getMessage(),
                                      $strUserCreacion,
                                      $strIpCreacion);

            $strExisteFactibilidad = "NO";
            $strStatus             = "ERROR";
            $strMensaje            = "Error presentado en la función: consultarFactibilidadXServicio, favor consultar a Sistemas.";
        }

        $arrayResultado['factibilidad']      = $strExisteFactibilidad;
        $arrayResultado['datosFactibilidad'] = $arrayDatosFactibilidad;
        $arrayResultado['status']            = $strStatus;
        $arrayResultado['mensaje']           = $strMensaje;

        return $arrayResultado;
    }


     /**
     * costo 6000
     *
     * Función que sirve para obtener el detalle de una cuadrilla
     * fiscalizada.
     *
     * @author Wilmer Vera G. <wvera@telconet.ec>
     * @version 1.0 29-08-2019
     * @param array $arrayParametros Datos necesiarios en un array
     *                  *idCuadrillaHistorial -> id del registro en la tabla cuadrillaHistorial .
     *                  *userCreacion -> usuario de creación.
     * @return array $resultado cuadrillas fiscalizadas
     */
    private function getDocumentosCuadrillasFiscalizadas($arrayParametros)
    {
        $arrayCuadrillas      = array();
        $emComercial          = $this->getDoctrine()->getManager("telconet");
        $emGeneral            = $this->getDoctrine()->getManager("telconet_general");
        $strMensaje           = "No se pudo obtener el detalle de la cuadrilla fiscalizada.";
        try
        {
            $arrayObtenerCuadrillas     =  array(
                'idCuadrillaHistorial'  => $arrayParametros['idCuadrillaHistorial'],
                'strUserCreacion'       => $arrayParametros['userCreacion']
                );

            $arrayCuadrillas = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')
                                                           ->obtenerDocumentosCuadrillasFiscalizadas($arrayObtenerCuadrillas, $emGeneral );

            if(count($arrayCuadrillas) < 1)
            {
                throw new \Exception("ERROR_PARCIAL");
            }

            $strMensaje = "Se han obtenido los documentos correspondiente al id : ".$arrayParametros['idCuadrillaHistorial'];
        }
        catch(\Exception $ex)
        {
            $serviceUtil = $this->get('schema.Util');
            $serviceUtil->insertError( 'Telcos+',
            'TecnicoWSController->getDocumentosCuadrillasFiscalizadas',
            'Error al obtener los documentos asociaciados a una cuadrilla fiscalizada
            . '.$ex->getMessage(),
            $arrayData['user'],
            "127.0.0.1" );

            if($ex->getMessage() == "NULL")
            {
                $arrayResultado['status']    = $this->status['NULL'];
                $arrayResultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']   = $strMensaje;
            }
            else
            {
                $arrayResultado['status']    = $this->status['ERROR'];
                $arrayResultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $arrayResultado;
        }

        $arrayResultado['documentosObtenidos']    = $arrayCuadrillas;
        $arrayResultado['status']                 = $this->status['OK'];
        $arrayResultado['mensaje']                = $this->mensaje['OK'];
        return $arrayResultado;
    }




    /**
     * Funcion que sirve para grabar los parametros iniciales en una activacion
     * de servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 4-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function putGrabarParametrosIniciales($data)
    {
        $mensaje = "No se pudieron grabar los parametros iniciales";

        try
        {
            $idServicio     = $data['data']['idServicio'];
            $login          = $data['data']['login'];
            $user           = $data['user'];
            $codEmpresa     = $data['data']['codEmpresa'];
            $prefijoEmpresa = $data['data']['prefijoEmpresa'];

            $arrayPeticiones=array(
                                    'idEmpresa'             => $codEmpresa,
                                    'prefijoEmpresa'        => $prefijoEmpresa,
                                    'idServicio'            => $idServicio,
                                    'capacidad1'            => "",
                                    'capacidad2'            => "",
                                    'login'                 => $login,
                                    'usrCreacion'           => $user,
                                    'ipCreacion'            => "127.0.0.1"
                                    );

            $grabarParametros = $this->get('tecnico.InfoGrabarHistorial');
            $status = $grabarParametros->grabarHistorial($arrayPeticiones);

            if($status != "OK")
            {
                throw new \Exception("ERROR_PARCIAL");
            }

            $mensaje = "Se grabaron los Parámetros Iniciales!";
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para confirmar servicio de una activacion
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 4-06-2015
     *
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 01-12-2020
     * Se confirman productos adicionales megadatos en caso de tener.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 07-08-2021 Se agrega validación para que se permita activar servicios El Canal del Fútbol
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.4 22-11-2021 Se agrega validación incluir activacion de productos GolTV
     *
     * @param array $data
     * @return array $resultado
     */
    private function putConfirmarServicio($data)
    {
        $mensaje = "No se pudo Confirmar el Servicio!";
        $emComercial        = $this->getDoctrine()->getManager("telconet");
        $emGeneral          = $this->getDoctrine()->getManager("telconet_general");
        $serviceFoxPremium  = $this->get('tecnico.FoxPremium');

        try
        {
            $idAccion       = 847;
            $idServicio     = $data['data']['idServicio'];
            $idProducto     = $data['data']['idProducto'];
            $user           = $data['user'];
            $codEmpresa     = $data['data']['codEmpresa'];
            $prefijoEmpresa = $data['data']['prefijoEmpresa'];
            $strOrigen      = $data['data']['origen'];
            $strPuntoId     = $data['data']['puntoId'];
            $strIpCreacion  = "127.0.0.1";

            $arrayPeticiones=array(
                                    'idEmpresa'             => $codEmpresa,
                                    'prefijoEmpresa'        => $prefijoEmpresa,
                                    'idServicio'            => $idServicio,
                                    'idAccion'              => $idAccion,
                                    'idProducto'            => $idProducto,
                                    'usrCreacion'           => $user,
                                    'origen'                => $strOrigen,
                                    'ipCreacion'            => $strIpCreacion
                                    );

            $confirmar = $this->get('tecnico.InfoConfirmarServicio');


            $respuestaArray = $confirmar->confirmarServicio($arrayPeticiones);

            $status = $respuestaArray[0]['status'];

            if($status!="OK")
            {
                throw new \Exception("ERROR_PARCIAL");
            }

            $mensaje = $respuestaArray[0]['mensaje'];




            $arrayObjServicioAd = $emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->findBy(array( "puntoId"         => $strPuntoId,
                                                           "planId"          => null,
                                                           "ordenTrabajoId"  => null,
                                                           "estado"          => "EnVerificacion"));

            if(count($arrayObjServicioAd) > 0)
            {
                foreach($arrayObjServicioAd as $objServicioAd)
                {

                     if(is_object($objServicioAd) &&
                       ($objServicioAd->getProductoId()->getNombreTecnico() === "WDB_Y_EDB"
                           || $objServicioAd->getProductoId()->getCodigoProducto() === "CABL"
                           || $objServicioAd->getProductoId()->getCodigoProducto() === "PA01"
                           || $objServicioAd->getProductoId()->getCodigoProducto() === "NO01"
                           || $objServicioAd->getProductoId()->getNombreTecnico() === "ECDF"
                           || $objServicioAd->getProductoId()->getNombreTecnico() === "GTVPREMIUM"))
                    {
                            $objServicioAd->setEstado("Activo");
                            $emComercial->persist($objServicioAd);
                            $emComercial->flush();

                            $objTipoSolicitudAddEquipo          = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                               ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD AGREGAR EQUIPO',
                                                                                 'estado'               => 'Activo'));

                            $objDetalleSolicitudAgregarEquipo   = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                  ->findOneBy(array('servicioId'        => $objServicioAd->getId(),
                                                                                    'tipoSolicitudId'   => $objTipoSolicitudAddEquipo->getId()));

                            $objAdmiTipoSolicitudPla    = $emComercial->getRepository("schemaBundle:AdmiTipoSolicitud")
                                                          ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD PLANIFICACION',
                                                                            'estado'               => 'Activo'));

                            $objDetalleSolicitudPlanifi   = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                            ->findOneBy(array('servicioId'        => $objServicioAd->getId(),
                                                                              'tipoSolicitudId'   => $objAdmiTipoSolicitudPla->getId()));

                            $arrayNombresTecnicoTvs   = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('PRODUCTOS_TV',//nombre parametro cab
                                                                            'COMERCIAL', //modulo cab
                                                                            'OBTENER_NOMBRE_TECNICO_PROD_TV',//proceso cab
                                                                            'PRODUCTOS_TV', //descripcion det
                                                                            '','','','','',
                                                                            $codEmpresa); //empresa
                            if(is_array($arrayNombresTecnicoTvs) && !empty($arrayNombresTecnicoTvs))
                            {
                                foreach($arrayNombresTecnicoTvs as $arrayParamDetProd)
                                {
                                    $arrayProductosTv[]   =   $arrayParamDetProd['valor1'];
                                }
                            }
                            if( !empty($arrayProductosTv) && in_array($objServicioAd->getProductoId()->getNombreTecnico(), $arrayProductosTv))
                            {
                                //SOLO CUANDO SEA PRODUCTO TV
                                ////Historial del servicio
                                $objInfoServicioHistorialFox = new InfoServicioHistorial();
                                $objInfoServicioHistorialFox->setServicioId($objServicioAd);
                                $objInfoServicioHistorialFox->setObservacion("Otros: Se confirmo el servicio");
                                $objInfoServicioHistorialFox->setEstado("Activo");
                                $objInfoServicioHistorialFox->setUsrCreacion($user);
                                $objInfoServicioHistorialFox->setFeCreacion(new \DateTime('now'));
                                $objInfoServicioHistorialFox->setIpCreacion($strIpCreacion);
                                $objInfoServicioHistorialFox->setAccion('confirmarServicio');
                                $emComercial->persist($objInfoServicioHistorialFox);
                                $emComercial->flush();
                                
                                $serviceFoxPremium->activarServicio(array("strUsrCreacion" => $user,
                                                                                "strClientIp"    => $strIpCreacion,
                                                                                "intIdProducto"  => $objServicioAd->getProductoId()->getId(),
                                                                                "strEmpresaCod"  => $codEmpresa,
                                                                                "intIdServicio"  => $objServicioAd->getId()));

                            }

                            if(is_object($objDetalleSolicitudAgregarEquipo))
                            {
                                $objDetalleSolicitudAgregarEquipo->setEstado("Finalizada");
                                $emComercial->persist($objDetalleSolicitudAgregarEquipo);
                                $emComercial->flush();
                            }
                            else if(is_object($objDetalleSolicitudPlanifi))
                            {
                                $objDetalleSolicitudPlanifi->setEstado("Finalizada");
                                $emComercial->persist($objDetalleSolicitudPlanifi);
                                $emComercial->flush();
                            }

                    }
                }
            }

        }
        catch(\Exception $e)
        {

            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para grabar la encuesta del servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 12-06-2015
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.1 13-06-2017 - Se consulta el codigo de la plantilla de la encuesta por instalacion desde la tabla parametros,
     *                           se obtiene la información del cliente.
     *
     * @author Wilmer Vera G. <wvera@telconet.ec>
     * @version 1.3 25/10/2018 - Se agrega parametro de idDetalle para la realación del documento.
     * @since 1.2
     *
     * @author Ronny Morán  <rmoranc@telconet.ec>
     * @version 1.4 11/01/2019 - Validación para guardar encuesta Netvoice.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.5 02/06/2020 - Se modifica código para crear nueva estructura de archivos.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.6 12/11/2020 - Almacenar el pdf en el servidor NFS.
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.7 30-09-2021 
     * - Se agregan paámetros para la generación de actas con nuevos ISO.
     * - Se agrega validaciones de estos nuevos parámetros.
     *        ['strIntegrantesCuadrilla'] -> Integrante de cuadrilla.
     *        ['strNombreCuadrilla'] -> nombre de la cuadrilla.
     *        ['strJefeCuadrilla'] -> nombre de jefe de cuadrilla.
     *        ['strTelfPersonaSitio'] -> telf. ingresado en el móvil por la persona en sitio.
     *        ['strFechaContrato'] -> fecha del contrato. 
     * 
     * @author Wilmer Vera G.<wvera@telconet.ec>
     * @version 1.7 12-03-2022 Se realiza validación de cuadrilla, en caso de ser nula se realiza la consulta de la cuadrilla por medio del usuario.
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.8 26/12/2021 - Se modifíca método para que se reasigne la tarea en caso que el producto sea
     * SAFECITYDATOS o SAFECITYWIFI.
     * 
     * @author Felix Caicedo <jnazareno@telconet.ec>
     * @version 1.9 16/06/2022 - Se realiza la validación para enviar la persona empresa rol al reasignar la tarea
     *                           para los servicios SafeCity GPON_MPLS
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version  2.0 11-10-2022 - Se realiza la finalizacion de la tarea
     * @param array $arrayData
     * @return array $resultado
     */
    private function putEncuestaServicio($arrayData)
    {
        $mensaje = "";

        try
        {
            $strFirma              = $arrayData['data']['encuestaFirma'];
            $strPreguntaRespuesta  = $arrayData['data']['encuestaResultado'];
            $intIdEmpresa          = $arrayData['data']['codEmpresa'];
            $strPrefijoEmpresa     = $arrayData['data']['prefijoEmpresa'];
            $intIdServicio         = $arrayData['data']['idServicio'];
            $intIdDetalle          = $arrayData['data']['idDetalle'];
            $strJefeCuadrilla      = $arrayData['data']['jefeCuadrilla'];
            $intIdCuadrilla        = $arrayData['data']['idCuadrilla'];
            $strFlujoZeroTouch     = isset($arrayData['data']['flujoZeroTouch']) ?
                                     $arrayData['data']['flujoZeroTouch']:
                                     null;
            $strUsrCreacion        = $arrayData['user'];
            $strTelfPersonaSitio   = $arrayData['data']['telfContactoSitio'];
            $ipCreacion         = "127.0.0.1";
            $feCreacion         = new \DateTime('now');
            $serverRoot         = $_SERVER['DOCUMENT_ROOT'];
            $strCodigoPlantilla = '';
            $serviceUtil        = $this->get('schema.Util');
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emFinan            = $this->getDoctrine()->getManager("telconet_financiero");
            $serviceGeneral     = $this->get('tecnico.InfoServicioTecnico');
            $emGeneral = $this->getDoctrine()->getManager('telconet_general');
            $emSoporte = $this->getDoctrine()->getManager("telconet_soporte");
            $strCodigoPostal    = '593';
            $strOrigenAccion    = 'tareas';
            $strDescTarea       = '';
            $strSafeCityDatos   = "SAFECITYDATOS";
            $strSafeCityWifi    = "SAFECITYWIFI";
            $objServicio        = $emComercial->find('schemaBundle:InfoServicio', $intIdServicio);

            $finder = new Finder();
            $finder->files()->in(__DIR__);

            foreach($finder as $file)
            {
                if(strpos($file->getRealpath(), "TecnicoWS") !== false)
                {
                    $pathSrc = explode("/WebService/TecnicoWSController.php", $file->getRealpath())[0];
                    $pathSrc = explode("\WebService\TecnicoWSController.php", $pathSrc)[0];
                }
            }

            //Obtenemos el codigo de la plantilla para poder generar encuesta
            $arrayAdmiParametroEncuesta = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->getOne('CODIGO_ENCUESTA_INSTALACION_POR_EMPRESA',
                                                               'SOPORTE',
                                                               '',
                                                               '',
                                                               'CODIGO_ENCUESTA_INSTALACION',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               $intIdEmpresa
                                                              );
            if (isset($arrayAdmiParametroEncuesta['valor2']) && !empty($arrayAdmiParametroEncuesta['valor2']))
            {
                $arrayVariables['id_servicio']  = $intIdServicio;
                $strDescTarea = $emComercial->getRepository('schemaBundle:InfoPersona')
                                            ->obtenerDescripcionTarea($arrayVariables);
                if($strDescTarea == 'NETVOICE')
                {
                    $strCodigoPlantilla = 'ENC-INST-NV';
                }else
                {
                    $strCodigoPlantilla = $arrayAdmiParametroEncuesta['valor2'];
                }
            }
            else
            {
                if(!isset($strCodigoPlantilla) || empty($strCodigoPlantilla))
                {
                    $mensaje = "No existe codigo de plantilla";
                    throw new \Exception("ERROR_PARCIAL");
                }
            }

            if(isset($arrayData['bandNfs']) && $arrayData['bandNfs'])
            {
                $strAplicacion = $arrayData['strFolderApplication'];
            }
            else
            {
                $arrayParametrosFilePath = array(
                                                    'strCodigoPostal'       => $strCodigoPostal,
                                                    'strPrefijoEmpresa'     => $strPrefijoEmpresa,
                                                    'strFolderApplication'  => $arrayData['strFolderApplication'],
                                                    'strController'         => 'Tecnico',
                                                    'strOrigenAccion'       => $strOrigenAccion,
                                                    'strExt'                => ''
                                                );
                $strRutaFisicaCompleta = $serviceUtil->createNewFilePath($arrayParametrosFilePath);
            }
            
            //VERIFICAR SI EL IDENTIFICADOR DE CUADRILLA NO ES NULL
            if($intIdCuadrilla == null)
            {
               $objPersona  =  $emComercial->getRepository('schemaBundle:InfoPersona')
                                           ->findOneBy(array('login'=> $strUsrCreacion, 'estado' => 'Activo'));
                if(is_object($objPersona) && !empty($objPersona))
                {
                    $objPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                        ->getCuadrillaPorLoginUsuario(array('personaId' => $objPersona->getId(), 
                                                                                            'estado'    => 'Activo'));
                    if(is_array($objPersonaEmpresaRol) && !empty($objPersonaEmpresaRol))
                    {
                        $intIdCuadrilla = $objPersonaEmpresaRol['cuadrillaId'];  
                    }
                }
            }
            
        //Obtener  nombre de quienes estan en la cuadrilla enviada 
            $arrayCargos                = array();
            $objCargos                  = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->get('CARGOS AREA TECNICA', 
                                                            '', 
                                                            '', 
                                                            '', 
                                                            'Personal Tecnico', 
                                                            '',
                                                            '', 
                                                            ''
                                                            );
            if(is_object($objCargos) )
            {
                foreach($objCargos as $objCargoTecnico)
                {
                    $arrayCargos[] = $objCargoTecnico['descripcion'];

                }
            }

            $arrayParametrosIntegrantesCuadrilla['criterios']['cargoSimilar']   = $arrayCargos;
            $arrayParametrosIntegrantesCuadrilla['intIdCuadrilla']              = $intIdCuadrilla;
            $arrayParametrosIntegrantesCuadrilla['empresa']                     = $intIdEmpresa;

            $arrayTmpPersonasCuadrilla = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                     ->findPersonalByCriterios($arrayParametrosIntegrantesCuadrilla);

            //Obteniendo Fecha de inicio de contrato. 
            $objTmpAdendum = $emComercial->getRepository('schemaBundle:InfoAdendum')
                                         ->findOneBy(array("servicioId" => $idServicio));
            
            $strFecha  = "N/A";
            if($objTmpAdendum != null && $objTmpAdendum->getContratoId() != null)
            {
                $entityContrato = $emComercial->getRepository('schemaBundle:InfoContrato')
                                            ->findOneBy(array("id" => $objTmpAdendum->getContratoId()));

                 $strFecha = $entityContrato->getFeAprobacion()!=null?$entityContrato->getFeAprobacion()->format('d/m/Y H:i:s') : 'N/A';
            }
            else
            {
                $objTmpAdendum = $emComercial->getRepository('schemaBundle:InfoAdendum')
                                            ->findOneBy(array("puntoId" => $strIdPunto,
                                                               "estado"=> 'Activo'));

                if($objTmpAdendum !=null &&  $objTmpAdendum->getContratoId() != null)
                {
                    $entityContrato = $emComercial->getRepository('schemaBundle:InfoContrato')
                                            ->findOneBy(array("id" => $objTmpAdendum->getContratoId()));
                    $strFecha = $entityContrato!=null?$entityContrato->getFeAprobacion()->format('d/m/Y H:i:s') : 'N/A';
                }
                else
                {
                    $strFecha = "N/A";
                }
                
            }

            $objAdmiCuadrilla           = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($intIdCuadrilla);

            $arrayRegistrosPersonasCuadrilla    = $arrayTmpPersonasCuadrilla['registros'];  
            $strIntegrantesCuadrilla = "";
            if( $arrayRegistrosPersonasCuadrilla )
            {
                foreach ($arrayRegistrosPersonasCuadrilla as $arrayDatosIntegrante)
                {
                    $intIdPersonaEmpresaRolIntegrante   = $arrayDatosIntegrante['idPersonaEmpresaRol'];
                    $strNombresApellidosIntegrante  = ucwords(strtolower(trim($arrayDatosIntegrante['nombres']))).' '.
                                                        ucwords(strtolower(trim($arrayDatosIntegrante['apellidos'])));
                    $strIntegrantesCuadrilla = $strIntegrantesCuadrilla.
                    " - ".
                    $strNombresApellidosIntegrante;                                                 
                    
                }
            }

            $arrayParametros = array(
                                    'idEmpresa'              => $intIdEmpresa,
                                    'prefijoEmpresa'         => $strPrefijoEmpresa,
                                    'idServicio'             => $intIdServicio,
                                    'idDetalle'              => $intIdDetalle,
                                    'idCaso'                 => "",
                                    'firmaCoordenadas'       => "",
                                    'firmaBase64'            => $strFirma,
                                    'preguntaRespuesta'      => $strPreguntaRespuesta,
                                    'strCodigoPlantilla'     => $strCodigoPlantilla,
                                    'serverRoot'             => $serverRoot,
                                    'usrCreacion'            => $strUsrCreacion,
                                    'ipCreacion'             => $ipCreacion,
                                    'feCreacion'             => $feCreacion,
                                    'pathSource'             => $pathSrc,
                                    'strRutaFisicaCompleta'  => $strRutaFisicaCompleta,
                                    'strAplicacion'          => $strAplicacion,
                                    'bandNfs'                => $arrayData['bandNfs'],
                                    'strOrigenAccion'        => $strOrigenAccion,
                                    'strIntegrantesCuadrilla'=> $strIntegrantesCuadrilla,
                                    'strNombreCuadrilla'     => $objAdmiCuadrilla->getNombreCuadrilla(),
                                    'strJefeCuadrilla'       => $strJefeCuadrilla,
                                    'strTelfPersonaSitio'    => $strTelfPersonaSitio,
                                    'strFechaContrato'       => $strFecha,
                                );

            $encuestaService  = $this->get('tecnico.Encuesta');
            $arrayResultado   = $encuestaService->grabarEncuesta($arrayParametros);

            if($arrayResultado['status']!="OK")
            {
                $mensaje = $arrayResultado['mensaje'];
                throw new \Exception("ERROR_PARCIAL");
            }

            $mensaje = $arrayResultado['mensaje'];
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        /*Realiza reasignación de tarea parte del flujo ZeroTouch.*/
        if(!is_null($strFlujoZeroTouch) && $strFlujoZeroTouch == 'F')
        {
            /*Obtenemos el servicio tecnico para poder ejecutar las funciones.*/
            $serviceInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
            $objSoporteService = $this->get('soporte.SoporteService');

            /*Generamos los entity managers.*/
            $emGeneral = $this->getDoctrine()->getManager('telconet_general');
            $emComunicacion = $this->getDoctrine()->getManager('telconet_comunicacion');

            /*Se arma arreglo de peticion.*/
            $arrayResponse = $serviceInfoServicioTecnico->reasignarTareaZeroTouch(array(
                'emComercial' => $emComercial,
                'emGeneral' => $emGeneral,
                'emComunicacion' => $emComunicacion,
                'objSoporteService' => $objSoporteService,
                'intIdEmpresa' => $intIdEmpresa,
                'strPrefijoEmpresa' => $strPrefijoEmpresa,
                'strUsrCreacion' => $strUsrCreacion,
                'ipCreacion' => $ipCreacion,
                'intIdServicio' => $intIdServicio,
                'intIdDetalle' => $intIdDetalle
            ));

            $resultado['resultado'] = $mensaje;
            $resultado['status']    = $arrayResponse['status'] == 'OK' ? $this->status['OK'] : $this->status['ERROR_PARCIAL'];
            $resultado['mensaje']   = $arrayResultado['mensaje'] .' '. $arrayResponse['message'];

            return $resultado;

        }

        //Inicio de reasignación de tarea cuando el producto del servicio sea SafeCityDatos o SafeCityWifi
        if(is_object($objServicio) && is_object($objServicio->getProductoId())
           && ($objServicio->getProductoId()->getNombreTecnico() === $strSafeCityDatos 
                || $objServicio->getProductoId()->getNombreTecnico() === $strSafeCityWifi))
        {
            $arrayParametosTareaSafecity = array();
            //obtener la persona empresa rol
            $objPersona = $emComercial->getRepository('schemaBundle:InfoPersona')
                                        ->findOneBy(array('login'=> $arrayData['user'], 'estado' => 'Activo'));
            if(is_object($objPersona) && !empty($intIdCuadrilla))
            {
                $arrayParametosTareaSafecity["intIdPersonaCamara"] = $objPersona->getId();
                $objPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                        ->findOneBy(array("personaId"   => $objPersona->getId(),
                                                                          "cuadrillaId" => $intIdCuadrilla,
                                                                          "estado"      => "Activo"));
                if(is_object($objPersonaEmpresaRol))
                {
                    $arrayParametosTareaSafecity["intIdPerEmpRolCamara"] = $objPersonaEmpresaRol->getId();
                }
            }
            //verificar si esta vacio el id persona empresa rol
            if(!empty($intIdCuadrilla) && !isset($arrayParametosTareaSafecity["intIdPerEmpRolCamara"]))
            {
                $objPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                        ->findOneBy(array("cuadrillaId" => $intIdCuadrilla,
                                                                          "estado"      => "Activo"));
                if(is_object($objPersonaEmpresaRol))
                {
                    $arrayParametosTareaSafecity["intIdPerEmpRolCamara"] = $objPersonaEmpresaRol->getId();
                    $arrayParametosTareaSafecity["intIdPersonaCamara"]   = $objPersonaEmpresaRol->getPersonaId()->getId();
                }
            }
            $arrayParametosTareaSafecity["objServicio"]       = $objServicio;
            $arrayParametosTareaSafecity["strCodEmpresa"]     = $intIdEmpresa;
            $arrayParametosTareaSafecity["strPrefijoEmpresa"] = $strPrefijoEmpresa;
            $arrayParametosTareaSafecity["strUsrCreacion"]    = $strUsrCreacion;
            $arrayParametosTareaSafecity["strIpCreacion"]     = $ipCreacion;
            $arrayParametosTareaSafecity["strFps"]            = $arrayData['data']["fpsCamara"];
            $arrayParametosTareaSafecity["strResolucion"]     = $arrayData['data']["resolucionCamara"];
            $arrayParametosTareaSafecity["strCodec"]          = $arrayData['data']["codecCamara"];

            $arrayResponse = $serviceGeneral->reasignarTareaSafeCityGponTN($arrayParametosTareaSafecity);

            $resultado['resultado'] = $mensaje;
            $resultado['status']    = $arrayResponse['status'] == 'OK' ? $this->status['OK'] : $this->status['ERROR_PARCIAL'];
            $resultado['mensaje']   = $arrayResultado['mensaje'] .' '. $arrayResponse['respuesta'];

            if($arrayResponse['status'] == 'OK' && $objServicio->getProductoId()->getNombreTecnico() === $strSafeCityDatos)
            {
                //Verificamos si se finaliza la tarea
                $objParametroCab = $emGeneral->getRepository("schemaBundle:AdmiParametroCab")
                                                   ->findOneBy(array("nombreParametro" => "PARAMETROS PROYECTO GPON SAFECITY",
                                                                     "estado"          => "Activo"));
                if(is_object($objParametroCab))
                {
                    $objEjecutaTareaAutoDet = $emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                           ->findOneBy(array("parametroId" => $objParametroCab->getId(),
                                                                             "descripcion" => "ANALITICA_TAREA_AUTOMATICA",
                                                                             "estado"      => "Activo"));
                    //obtengo el id detalle de la tarea
                    $objCaractIdDetalle = $serviceGeneral->getServicioProductoCaracteristica($objServicio,
                                                        'ID_DETALLE_TAREA_INSTALACION',$objServicio->getProductoId());
                    if((!is_object($objEjecutaTareaAutoDet) || $objEjecutaTareaAutoDet->getValor1() !== 'S')
                       && is_object($objCaractIdDetalle))
                    {
                        //obtengo el info detalle
                        $objInfoDetalle = $emSoporte->getRepository('schemaBundle:InfoDetalle')->find($objCaractIdDetalle->getValor());
                        if(is_object($objInfoDetalle))
                        {
                            //Se finaliza la tarea automaticamente
                            $arrayParametrosFinTarea = array(
                                'idEmpresa'               => $intIdEmpresa,
                                'prefijoEmpresa'          => $strPrefijoEmpresa,
                                'idDetalle'               => $objInfoDetalle->getId(),
                                'idAsignado'              => null,
                                'observacion'             => 'Se finaliza tarea de forma automatica.',
                                'usrCreacion'             => $strUsrCreacion,
                                'ipCreacion'              => $ipCreacion,
                                'accionTarea'             => 'finalizada'
                            );
                            $serviceSoporte = $this->get('soporte.SoporteService');
                            $serviceSoporte->finalizarTarea($arrayParametrosFinTarea);
                        }
                    }
                }
            }
            return $resultado;

        }
        //Fin de reasignación de tarea cuando el producto del servicio sea SafeCityDatos o SafeCityWifi

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $arrayResultado['mensaje'];
        return $resultado;
    }

    /**
     * Funcion que sirve para grabar el Acta de Entrega, generar el pdf y enviar
     * al cliente.
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 24-06-2015
     *
     * @author Wilmer Vera G. <wvera@telconet.ec>
     * @version 1.1 25/10/2018 - Se agrega parametro de idDetalle para la realación del documento.
     * @since 1.0
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 25/10/2018 - Se agrega parámetro con los equipos ingresados por el técnico para adjuntar al acta.
     * @since 1.1
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.3 02-06-2020 - Se modifica código para crear nueva estructura de archivos.
     * @since 1.2
     *
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.4 02-12-2020 - Se agrega variable $strTipoProducto para validar
     *                           acta de entrega de servicio para producto de cableado Md.
     * @since 1.3
     *
     *
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 12-11-2020 - Se almacena el pdf en el servidor NFS remoto
     * @since 1.3
     *
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 1.5 08/02/2022 - Se agrega lógica para que guarde log en caso de error.
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.6 21/09/2022 - Se corrige guardada de Acta en servidor NFS.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.7 14/10/2022 - Se agrega la llave data al response para la url del reporte fotográfico.
     * 
     * @param array $data
     * @return array $resultado
     */
    private function putActaEntrega($data)
    {
        $mensaje            = "";
        $start              = $this->get('request')->query->get('start');
        $limit              = 5;
        $serviceUtil        = $this->get('schema.Util');
        $emFinan            = $this->getDoctrine()->getManager("telconet_financiero");
        $strCodigoPostal    = '593';
        $strOrigenAccion    = 'tareas';

        try
        {
            $firmaCliente       = $data['data']['actaFirmaCliente'];
            $firmaEmpleado      = $data['data']['actaFirmaEmpleado'];
            $preguntaRespuesta  = $data['data']['actaResultado'];
            $idEmpresa          = $data['data']['codEmpresa'];
            $prefijoEmpresa     = $data['data']['prefijoEmpresa'];
            $idServicio         = $data['data']['idServicio'];
            $idDetalle          = $data['data']['idDetalle'];
            $usrCreacion        = $data['user'];
            $ipCreacion         = "127.0.0.1";
            $feCreacion         = new \DateTime('now');
            $serverRoot         = $_SERVER['DOCUMENT_ROOT'];
            $arrayEquiposIn     = $data['data']['equiposIngresados'];
            $strTipoProducto    = !empty($data['data']['tipo_producto']) ? $data['data']['tipo_producto'] : "";

            $finder = new Finder();
            $finder->files()->in(__DIR__);

            foreach($finder as $file)
            {
                if(strpos($file->getRealpath(), "TecnicoWS") !== false)
                {
                    $pathSrc = explode("/WebService/TecnicoWSController.php", $file->getRealpath())[0];
                    $pathSrc = explode("\WebService\TecnicoWSController.php", $pathSrc)[0];
                }
            }

            if(isset($data['bandNfs']) && $data['bandNfs'])
            {
                $strAplicacion = $data['strFolderApplication'];
            }
            else
            {
                $arrayParametrosFilePath = array(
                                                    'strCodigoPostal'       => $strCodigoPostal,
                                                    'strPrefijoEmpresa'     => $prefijoEmpresa,
                                                    'strFolderApplication'  => $data['strFolderApplication'],
                                                    'strController'         => 'Tecnico',
                                                    'strOrigenAccion'       => $strOrigenAccion,
                                                    'strExt'                => ''
                                                );
                $strRutaFisicaCompleta = $serviceUtil->createNewFilePath($arrayParametrosFilePath);
            }

            $arrayParametros = array(
                                    'idEmpresa'             => $idEmpresa,
                                    'prefijoEmpresa'        => $prefijoEmpresa,
                                    'idServicio'            => $idServicio,
                                    'idDetalle'             => $idDetalle,
                                    'firmaCoordenadas'      => "",
                                    'firmaClienteCoord'     => "",
                                    'firmaEmpleadoCoord'    => "",
                                    'firmaCliente64'        => $firmaCliente,
                                    'firmaEmpleado64'       => $firmaEmpleado,
                                    'preguntaRespuesta'     => $preguntaRespuesta,
                                    'serverRoot'            => $serverRoot,
                                    'usrCreacion'           => $usrCreacion,
                                    'ipCreacion'            => $ipCreacion,
                                    'feCreacion'            => $feCreacion,
                                    'pathSource'            => $pathSrc,
                                    'start'                 => $start,
                                    'limit'                 => $limit,
                                    'equiposIngresados'     => $arrayEquiposIn,
                                    'strRutaFisicaCompleta' => $strRutaFisicaCompleta,
                                    'strTipoProducto'       => $strTipoProducto,
                                    'strAplicacion'         => $strAplicacion,
                                    'bandNfs'               => $data['bandNfs'],
                                    'strOrigenAccion'       => $strOrigenAccion
                                );
            $actaEntregaService = $this->get('tecnico.ActaEntrega');
            $arrResultado       = $actaEntregaService->grabarActaEntrega($arrayParametros);
            if($arrResultado['status']!="OK")
            {
                $mensaje = $arrResultado['mensaje'];
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {

            $strDescriptionError = $e->getMessage();

            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
                $strDescriptionError    = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }
            $resultado['data']['urlReporteFotografico'] = "";

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $idEmpresa,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'TecnicoWSController',
                'appMethod'        => 'putActaEntrega',
                'descriptionError' => $strDescriptionError,
                'status'           => 'Fallido',
                'inParameters'     => json_encode($data),
                'creationUser'     => $usrCreacion));

            return $resultado;
        }

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $arrResultado['mensaje'];
        $resultado['data']      = $arrResultado['data'];
        return $resultado;
    }

    /**
     * Funcion que sirve para activar los servicios adicionales
     * del cliente.
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 7-07-2015
     * @param array $data
     * @return array $resultado
     */
    private function putActivarProductoServicio($data)
    {
        $mensajeError   = "";
        $idAccion       = 847;

        try
        {
            $arrayPeticiones = array(
                                    'idServicio'    => $data['data']['idServicio'],
                                    'idAccion'      => $idAccion,
                                    'usrCreacion'   => $data['user'],
                                    'ipCreacion'    => "127.0.0.1"
            );

            //inicializar el service
            $activacion = $this->get('tecnico.InfoActivarProducto');

            //activar el servicio
            $respuestaArray = $activacion->activarServicio($arrayPeticiones);

            //obtener respuesta
            $status         = $respuestaArray[0]['status'];
            $mensaje        = $respuestaArray[0]['mensaje'];

            if($status != "OK")
            {
                $mensajeError = $mensaje;
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensajeError;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para ejecutar la migracion de
     * plataforma Tellion -> Huawei
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 8-07-2015
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.1 20-12-2016 - Se adiciona el parametro mantieneEquipoWifi en el arreglo $arrayPeticiones para poder
     *                           determinar si mantenemos el equipo WiFi del cliente.
     *
     * @param array $data
     * @return array $resultado
     */
    private function putMigrarServicio($data)
    {
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        $mensajeError = "";
        ini_set('max_execution_time', 400000);
        $emComercial = $this->getDoctrine()->getManager("telconet");

        try
        {
            //obtener los datos y departamento de la persona por empresa
            $datos = $emComercial->getRepository('schemaBundle:InfoPersona')
                                 ->getPersonaDepartamentoPorUserEmpresa($data['user'], $data['data']['codEmpresa']);

            //capacidad 1
            if($data['data']['capacidad1'])
            {
                $capacidad1 = $data['data']['capacidad1'];
            }
            else
            {
                $capacidad1 = "";
            }

            //capacidad 2
            if($data['data']['capacidad2'])
            {
                $capacidad2 = $data['data']['capacidad2'];
            }
            else
            {
                $capacidad2 = "";
            }

            $arrayPeticiones=array(
                                    'idEmpresa'                     => $data['data']['codEmpresa'],
                                    'prefijoEmpresa'                => $data['data']['prefijoEmpresa'],
                                    'idServicio'                    => $data['data']['idServicio'],
                                    'idProducto'                    => $data['data']['idProducto'],
                                    'perfil'                        => $data['data']['perfil'],
                                    'login'                         => $data['data']['login'],
                                    'capacidad1'                    => $capacidad1,
                                    'capacidad2'                    => $capacidad2,
                                    'interfaceElementoId'           => $data['data']['idInterfaceElemento'],
                                    'interfaceElementoSplitterId'   => $data['data']['nombreInterfaceElementoConector'],
                                    'ultimaMilla'                   => $data['data']['ultimaMilla'],
                                    'plan'                          => $data['data']['idPlan'],
                                    'macOnt'                        => $data['data']['macOnt'],
                                    'mantieneEquipoWifi'            => $data['data']['mantieneEquipoWifi'],
                                    'serieOnt'                      => $data['data']['serieOnt'],
                                    'modeloOnt'                     => $data['data']['modeloOnt'],
                                    'usrCreacion'                   => $data['user'],
                                    'ipCreacion'                    => "127.0.0.1",
                                    'idPersonaEmpresaRol'           => $datos['ID_PERSONA_EMPRESA_ROL'],
                                    'solicitudMigracionId'          => $data['data']['idMigracion']
                                    );

            /* @var $migracion MigracionHuaweiService */
            $migracion = $this->get('tecnico.MigracionHuawei');
            //---------------------------------------------------------------------*/

            //COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)-------------------------*/
            $respuestaArray = $migracion->migrarCliente($arrayPeticiones);
            //----------------------------------------------------------------------*/

            //obtener respuesta
            $status         = $respuestaArray[0]['status'];
            $mensaje        = $respuestaArray[0]['mensaje'];

            if($status != "OK")
            {
                if($mensaje == "java.net.ConnectException: Connection timed out")
                {
                    $result = "No Existe Conectividad hacia el Elemento! Favor comunicarse con el departamento de GEPON";
                }
                else if($mensaje === '"java.lang.Exception: No se pudo alcanzar el host..."')
                {
                    $mensaje = "El elemento no es alcanzable desde el Servidor Telcos, favor comunicarse con el Dep. GEPON!";
                }
                else if($mensaje == "NO ID CLIENTE")
                {
                    $result = "Slot no existe, favor revise la Linea Pon donde debe enganchar el cliente!";
                }
                else if($mensaje == "MAX ID CLIENTE")
                {
                    $result = "Limite de clientes por Puerto esta en el maximo, Favor comunicarse con el departamento de GEPON";
                }
                else if($mensaje == "CANTIDAD CERO")
                {
                    $result = "CPEs Agotados, favor revisar!";
                }
                else if($mensaje == "NO EXISTE CPE")
                {
                    $result = "No existe el Elemento Cliente indicado, favor revisar!";
                }
                else if($mensaje == "CPE NO ESTA EN ESTADO")
                {
                    $result = "Elemento Cliente no esta en estado: PENDIENTE INSTALACION/RETIRADO, favor revisar!";
                }
                else if($mensaje == "NO EXISTE TAREA")
                {
                    $result = "No existe el Script para realizar la transaccion!";
                }
                else if($status == "NAF")
                {
                    $result = "No existe el Elemento Cliente indicado, favor revisar!";
                }
                else
                {
                    $result = $mensaje;
                }

                $mensajeError = $result;
                throw new \Exception("ERROR_PARCIAL");
            }
            else
            {
                $mensaje = "Se Activo el cliente";
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensajeError;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
        //----------------------------------------------------------------------*/
    }

    /**
     * Funcion que sirve para grabar los recursos de red asignados al servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 4-08-2015
     * @param array $data
     * @return array $resultado
     */
    private function putRecursosDeRed($data)
    {
        $esPlan             = "no";
        $flagProd           = false;
        $nombreTecnico      = "";
        $mensaje            = "";

        try
        {
            $idServicio         = $data['data']['idServicio'];
            $codEmpresa         = $data['data']['codEmpresa'];
            $proceso            = $data['data']['proceso'];
            $emComercial        = $this->getDoctrine()->getManager("telconet");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");

            //obtener el servicio
            $servicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);

            //obtener servicio tecnico
            $servicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array('servicioId' => $idServicio));

            //obtener el elemento olt
            $elemento       = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());
            $marcaElemento  = $elemento->getModeloElementoId()->getMarcaElementoId();

            //verificar si el servicio tiene plan o producto
            if($servicio->getPlanId())
            {
                $esPlan = "si";

                //verificar si el plan tiene ip entre sus productos
                $planDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')->findBy(array("planId"=>$servicio->getPlanId()->getId()));
                $prodIp  = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                       ->findOneBy(array("nombreTecnico"=>"IP", "empresaCod"=>$codEmpresa, "estado"=>"Activo"));
                if(count($planDet)<2)
                {
                    for($i=0;$i<count($planDet);$i++)
                    {
                        if($planDet[$i]->getProductoId() == $prodIp->getId())
                        {
                            $nombreTecnico  = $prodIp->getNombreTecnico();
                            $flagProd       = true;
                            break;
                        }
                    }
                }
            }//if($servicio->getPlanId())
            else
            {
                $nombreTecnico = strtoupper($servicio->getProductoId()->getNombreTecnico());
            }

            if($proceso == 'MIGRACION')
            {
                //obtener solicitud de planificacion
                $tipoSolicitud      = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                  ->findOneBy(array('descripcionSolicitud' => "SOLICITUD MIGRACION"));
            }
            else if($proceso == 'INSTALACION')
            {
                //obtener solicitud de planificacion
                $tipoSolicitud      = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                  ->findOneBy(array('descripcionSolicitud' => "SOLICITUD PLANIFICACION"));
            }
            else
            {
                throw new \Exception("ERROR_PARCIAL");
            }

            $detalleSolicitud   = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                              ->findOneBy(array('servicioId'        => $idServicio,
                                                                'tipoSolicitudId'   => $tipoSolicitud->getId()));

            //se obtiene el numero de ips reservadas para el servicio
            $registrosIpsReservadas = $emInfraestructura->getRepository('schemaBundle:InfoIp')->getIpsReservadasOlt($idServicio);
            $cantidadIpsReservadas  = count($registrosIpsReservadas['ips']);

            //crear json de ips
            $ipReservada    = $data['data']['ipRecurso']['ip'];
            $mascara        = $data['data']['ipRecurso']['mascara'];
            $gateway        = $data['data']['ipRecurso']['gateway'];
            $scope          = $data['data']['ipRecurso']['scope'];
            $tipoIp         = $data['data']['ipRecurso']['tipo'];
            if($ipReservada){
                $jsonIpsReservadas = '{"total":1,"caracteristicas":[{"ip":"'.$ipReservada.'","mascara":"'.$mascara.'",'
                               . '"gateway":"'.$gateway.'","tipo":"'.$tipoIp.'","scope":"'.$scope.'"}]}';
            }else{
                $jsonIpsReservadas = '';
            }

            /* @var $recursoRedService RecursosDeRedService */
            $recursoRedService = $this->get('planificacion.RecursosDeRed');

            $arrayPeticiones = array(
                                        'id'                    => $detalleSolicitud->getId(),
                                        'producto'              => "",
                                        'nombreTecnico'         => $nombreTecnico,
                                        'elementoId'            => $servicioTecnico->getElementoId(),
                                        'interfaceId'           => $servicioTecnico->getInterfaceElementoId(),
                                        'vci'                   => "",                                          //cobre
                                        'datosIps'              => $jsonIpsReservadas,
                                        'tipoSolicitud'         => $tipoSolicitud->getDescripcionSolicitud(),
                                        'idSplitter'            => $data['data']['idElementoConector'],
                                        'idSplitterHuawei'      => $data['data']['idSplitterMigracion'],         //migracion
                                        'idOlt'                 => $data['data']['idOltMigracion'],              //migracion
                                        'idInterfaceOlt'        => $data['data']['idInterfaceOltMigracion'],     //migracion
                                        'interfaceSplitterId'   => $data['data']['idInterfaceElementoConector'],
                                        'marcaOlt'              => $marcaElemento->getNombreMarcaElemento(),
                                        'idEmpresa'             => $data['data']['codEmpresa'],
                                        'prefijoEmpresa'        => $data['data']['prefijoEmpresa'],
                                        'cantidadRegistrosIps'  => $cantidadIpsReservadas,
                                        'esPlan'                => $esPlan,
                                        'usrCreacion'           => $data['user'],
                                        'ipCreacion'            => "127.0.0.0"
                                    );

            $respuestaArray = $recursoRedService->asignarRecursosRed($arrayPeticiones);
            $status         = $respuestaArray['status'];
            $mensaje        = $respuestaArray['mensaje'];

            if($status != "OK")
            {
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['resultado'] = $mensaje;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
        //----------------------------------------------------------------------*/
    }

    /**
     * Funcion que sirve para grabar los materiales de instalacion de un servicio
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 28-08-2015
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.1 08-08-2018 - Se adiciona el parámetro controlCustodio (lista que pertenencen al control de fibra óptica por usuario en el NAF)
     * en el arreglo $data para poder registrar los materiales en el naf.
     * @since 1.0
     *
     * @author Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.2 28-03-2019 - Se adiciona el parámetro "detSolicitudId", "idDetalle" para realizar
     * cambio de logica al realizar finalizarMateriales.
     * @since 1.1
     *
     * @author Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.3 12-06-2019 -Se cambia respuesta al movil en la Exception.
     * @since 1.2
     *
     * @param array $data
     * @param json $jsonData
     */
    private function putMaterialesInstalacion($data, $jsonData)
    {


        $mensaje = "";
        try
        {
            $jsonMateriales         = $jsonData->data->materiales;
            $codEmpresa             = $data['data']['codEmpresa'];
            $prefijoEmpresa         = $data['data']['prefijoEmpresa'];
            $usrCreacion            = $data['user'];
            $ipCreacion             = "127.0.0.1";
            $emComercial            = $this->getDoctrine()->getManager("telconet");
            $intIdDetalleSolicitud     = $data['data']['detSolicitudId'];
            $intIdDetalle              = $data['data']['idDetalle'];

            //obtener el idDetalleSolicitud que viene en el json
            if(isset($intIdDetalleSolicitud) && !empty($intIdDetalleSolicitud))
            {
                //obtener los datos y departamento de la persona por empresa
                $datos = $emComercial->getRepository('schemaBundle:InfoPersona')
                                     ->getPersonaDepartamentoPorUserEmpresa($data['user'], $data['data']['codEmpresa']);

                /* @var $materialesService MaterialesService */
                $materialesService = $this->get('planificacion.Materiales');

                $arrayParametros = array(
                                            'id_detalle_solicitud'  => $intIdDetalleSolicitud,
                                            'idDetalle'             => $intIdDetalle,
                                            'id_responsable'        => $datos['ID_PERSONA'],
                                            'id_empresa'            => $codEmpresa,
                                            'prefijo_empresa'       => $prefijoEmpresa,
                                            'materiales'            => $jsonMateriales,
                                            'usrCreacion'           => $usrCreacion,
                                            'ipCreacion'            => $ipCreacion
                                        );

                $respuestaArray = $materialesService->finalizarMateriales($arrayParametros);
            }

            if(isset($data['data']['controlCustodio']))
            {
                $arrayRespNaf   = $this->putIngresoMaterialNaf($data);

            }

            if(isset($intIdDetalleSolicitud) && !empty($intIdDetalleSolicitud))
            {
                $status         = $respuestaArray['status'];
                $mensaje        = $respuestaArray['mensaje'];
            }else
            {
                $status         = $arrayRespNaf['status'];
                $mensaje        = $arrayRespNaf['mensaje'];
            }


        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $this->mensaje['Valores nulos'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['status']    = $status;
        $resultado['mensaje']   = $mensaje;
        return $resultado;

    }

    /**
     * Funcion que sirve para grabar la ruta georreferencial del punto.
     *
     * @author Juan Carlos Lafuente <jlafuente@telconet.ec>
     * @version 1.0 08-10-2015
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.1 12-09-2018 Opción de ingreso de la ruta georeferencial para la minimanga en el móvil
     * @since 1.0
     *
     * @param array $data
     * @param json $jsonData
     */
    private function putRutaGeorreferencialFibra($data)
    {
        $status  = "ERROR";
        $mensaje = "No se pudo almacenar la ruta georreferencial de la fibra!";

        $emComercial= $this->getDoctrine()->getManager("telconet");
        try
        {
            $usrCreacion         = $data['user'];
            $idServicio          = $data['data']['idServicio'];
            $rutaGeorreferencial = json_encode($data['data']['rutaGeorreferencial']);

            // Se obtiene el servicio
            $entityServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);

            // Se obtiene el punto
            $entityPunto = $entityServicio->getPuntoId();

            if(isset($data['data']['strMinimanga']) && !empty($data['data']['strMinimanga'])){
               $arrayParams = array('entityPunto'           => $entityPunto,
                                    'strDescripcionCarac'   => 'RUTA GEOREFERENCIAL MINIMANGA',
                                    'strValor'              => $rutaGeorreferencial,
                                    'strUsrCreacion'        => $usrCreacion,
                                    'strIpCreacion'         => '127.0.0.1');
            }else{
                $arrayParams = array('entityPunto'          => $entityPunto,
                                    'strDescripcionCarac'   => 'Ruta Georreferencial',
                                    'strValor'              => $rutaGeorreferencial,
                                    'strUsrCreacion'        => $usrCreacion,
                                    'strIpCreacion'         => '127.0.0.1');
            }
            /* @var $puntoService PuntoService */
            $puntoService = $this->get('comercial.InfoPunto');

            $respuestaArray = $puntoService->ingresarPuntoCaracteristica($arrayParams);

            $status         = $respuestaArray['status'];
            $mensaje        = $respuestaArray['mensaje'];

            if($status != "OK")
            {
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $mensaje;
        return $resultado;

    }

    /**
     * Función que sirve para cambiar el estado la ruta georeferencial de la minimang en el punto.
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 25-09-2018
     *
     * @param array $arrayData
     * @param array $arrayResultado
     */
    private function putEstadoRutaGeoreferencialMinimanga($arrayData)
    {
        $strMensaje = "OK";

        $emComercial= $this->getDoctrine()->getManager("telconet");
        try
        {
            $intIdServicio          = $arrayData['data']['idServicio'];
            $entityServicio         = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $entityPunto            = $entityServicio->getPuntoId();

            $arrayParamsMinimanga   = array('entityPunto'                      => $entityPunto,
                                            'strDescripcionCaracteristica'     => 'RUTA GEOREFERENCIAL MINIMANGA',
                                            'strEstado'                        => 'Activo');

            $arrayMinimanga         = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
                                                  ->getPuntoCaracteristica($arrayParamsMinimanga);

            if(isset($arrayMinimanga) && !empty($arrayMinimanga))
            {
                foreach($arrayMinimanga as $objMinimanga)
                {
                    $objMinimanga->setEstado('Eliminado');
                    $emComercial->persist($objMinimanga);
                    $emComercial->flush();
                }
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $arrayResultado['status']    = $this->status['NULL'];
                $arrayResultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']   = $strMensaje;
            }
            else
            {
                $arrayResultado['status']    = $this->status['ERROR'];
                $arrayResultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $arrayResultado;
        }

        $arrayResultado['status']    = $this->status['OK'];
        $arrayResultado['mensaje']   = $strMensaje;
        return $arrayResultado;

    }

    /********************************************************************************************
     * FIN METODOS PUT TECNICO MOBIL
     ********************************************************************************************/

    /********************************************************************************************
     * METODOS GET TECNICO INCIDENCIAS
     ********************************************************************************************/

    /**
     * Funcion que sirve para obtener los catalogos para el mobil incidencias-elementos
     * tareas, nivel criticidad, tipos de elemento
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 2-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function getCatalogoIncidenciasElementos($data)
    {
        $arrCatalogo        = array();

        try
        {
            $start              = $this->get('request')->query->get('start');
            $codEmpresa         = $data['data']['codEmpresa'];
            $emSoporte          = $this->getDoctrine()->getManager("telconet_soporte");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");

            //obtener procesos por empresa
            $procesos = $emSoporte->getRepository('schemaBundle:AdmiProceso')
                                  ->getRegistros("", "INCIDENCIAS DE ELEMENTOS","Activo",$start,1,$codEmpresa,"SI");
            if(count($procesos)!=1)
            {
                throw new \Exception("NULL");
            }

            //obtener el primer y unico proceso
            $proceso = $procesos[0];

            //obtener las tareas por proceso
            $arrTareas = $this->getCatalogoTareasPorProceso($proceso, $emSoporte);
            //---------------------------------------------------------------------------------------------------------------------------------------

            //obtener los niveles de criticidad
            $arrCriticidad = $this->getCatalogoNivelesCriticidad($emSoporte);
            //---------------------------------------------------------------------------------------------------------------------------------------

            //obtener los tipos de elementos (backbone)
            $arrTiposElemento = $this->getCatalogoTiposElementosBackbone($emInfraestructura);
            //---------------------------------------------------------------------------------------------------------------------------------------

            $arrCatalogo['tareas']      = $arrTareas;
            $arrCatalogo['criticidad']  = $arrCriticidad;
            $arrCatalogo['tipoElemento']= $arrTiposElemento;
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']   = $this->status['NULL'];
                $resultado['mensaje']  = $this->mensaje['NULL'];
            }
            else
            {
                $resultado['status']   = $this->status['ERROR'];
                $resultado['mensaje']  = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['catalogos'] = $arrCatalogo;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener las tareas por proceso
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 2-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function getCatalogoTareasPorProceso($proceso, $emSoporte)
    {
        $tareas = $emSoporte->getRepository('schemaBundle:AdmiTarea')->findBy(array("estado"=>"Activo","procesoId"=>$proceso->getId()));

        if(count($tareas)<1)
        {
            throw new \Exception("NULL");
        }

        foreach($tareas as $tarea)
        {
            $arrTareas[] = array(   'v' => $tarea->getNombreTarea(),
                                    'k' => $tarea->getId());
        }

        return $arrTareas;
    }

    /**
     * Funcion que sirve para obtener los niveles de criticidad
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 2-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function getCatalogoNivelesCriticidad($emSoporte)
    {
        $nivelesCriticidad = $emSoporte->getRepository('schemaBundle:AdmiNivelCriticidad')->findBy(array("estado"=>"Activo"));

        if(count($nivelesCriticidad)<1)
        {
            throw new \Exception("NULL");
        }

        foreach($nivelesCriticidad as $nivelCriticidad)
        {
            $arrCriticidad[] = array(   'v' => $nivelCriticidad->getNombreNivelCriticidad(),
                                        'k' => $nivelCriticidad->getId());
        }

        return $arrCriticidad;
    }

    /**
     * Funcion que sirve para obtener los tipos de elementos que son de backbone
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 2-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function getCatalogoTiposElementosBackbone($emInfraestructura)
    {
        $tiposElemento = $emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')->findBy(array("estado"=>"Activo","esDe"=>"BACKBONE"));

        if(count($tiposElemento)<1)
        {
            throw new \Exception("NULL");
        }

        foreach($tiposElemento as $tipoElemento)
        {
            $arrTiposElemento[] = array(    'v' => $tipoElemento->getNombreTipoElemento(),
                                            'k' => $tipoElemento->getId());
        }

        return $arrTiposElemento;
    }

    /**
     * Funcion que sirve para obtener los catalogos para el mobil tecnico
     * modelos de elemento
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 14/05/2015
     * @param array $data
     * @return array $resultado
     */
    private function getCatalogosActivacion($data)
    {
        $arrModelos     = array();
        $arrCatalogo    = array();
        $resultado      = array();

        try
        {
            $estadoModelo   = $data['data']['estadoModelo'];

            //obtener los modelos cpe
            $arrModelos = $this->getModeloElementoCliente($estadoModelo);
            $arrCatalogo['modeloElementoCliente'] = $arrModelos['modeloElementoCliente'];
        }
        catch(Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']   = $this->status['NULL'];
                $resultado['mensaje']  = $this->mensaje['NULL'];
            }
            else
            {
                $resultado['status']   = $this->status['ERROR'];
                $resultado['mensaje']  = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['catalogos'] = $arrCatalogo;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener los modelos elementos (CPE, CPE ONT, CPE WIFI)
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 14/05/2015
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.1 2016-09-12 - Llamar a la función general que obtiene los Modelos de los Elementos
     *
     * @param array $data
     * @return array $resultado
     */
    private function getModeloElementoCliente($estadoModelo)
    {
        $arr_encontrados = array();
        $resultado       = array();

        $arrayParametros = array(
                                'tipo'   => 'CPE',
                                'forma'  => 'Empieza con',
                                'estado' => $estadoModelo,
                                'start'  => '',
                                'limit'  => ''
                                );

        try
        {
            $dataModelo = $this->getDoctrine()
                               ->getManager("telconet_infraestructura")
                               ->getRepository('schemaBundle:InfoServicioTecnico')
                               ->getModeloElementoPorTipo($arrayParametros);

            $encontrados = $dataModelo['registros'];
            if($encontrados)
            {
                foreach($encontrados as $entity)
                {
                    $arr_encontrados[]=array('v' =>  $entity->getNombreModeloElemento(),
                                             'k' =>  $entity->getId());
                }
            }
            else
            {
                throw new \Exception("NULL");
            }

            $resultado['modeloElementoCliente'] = $arr_encontrados;
        }
        catch(\Exception $ex)
        {
            throw($ex);
        }
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener los elementos por coordenadas (longitud, latitud)
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 4-06-2015
     * @param array $data
     * @return array $resultado
     */
    private function getElementosPorCoordenadas($data)
    {
        $arrEncontrados    = array();
        $mensajeError       = "";

        try
        {
            $idTipoElemento     = $data['data']['idTipoElemento'];
            $longitudMax        = $data['data']['longitudMax'];
            $longitudMin        = $data['data']['longitudMin'];
            $latitudMax         = $data['data']['latitudMax'];
            $latitudMin         = $data['data']['latitudMin'];
            $emInfraestructura  = $this->getDoctrine()->getManager('telconet_infraestructura');

            $arrElementos = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                              ->getElementosPorCoordenadas($idTipoElemento, $longitudMax, $longitudMin, $latitudMax, $latitudMin);

            if(!$arrElementos)
            {
                $mensajeError = "No Existen los datos de los Elementos, Favor Revisar!";
                throw new \Exception("ERROR_PARCIAL");
            }

            foreach($arrElementos as $elementos)
            {
                $arrEncontrados[] = array( 'idElemento'             => $elementos['ID_ELEMENTO'],
                                           'nombreElemento'         => $elementos['NOMBRE_ELEMENTO'],
                                           'nombreModeloElemento'   => $elementos['NOMBRE_MODELO_ELEMENTO'],
                                           'nombreTipoElemento'     => $elementos['NOMBRE_TIPO_ELEMENTO'],
                                           'longitudUbicacion'      => $elementos['LONGITUD_UBICACION'],
                                           'latitudUbicacion'       => $elementos['LATITUD_UBICACION']  );
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensajeError;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['elementos'] = $arrEncontrados;
        $resultado['status']    = $this->status['OK'];
        $resultado['mensaje']   = $this->mensaje['OK'];
        return $resultado;
    }

    /********************************************************************************************
     * FIN METODOS GET TECNICO INCIDENCIAS
     ********************************************************************************************/

    /********************************************************************************************
     * METODOS PUT TECNICO INCIDENCIAS
     ********************************************************************************************/

    /**
     * Funcion que sirve para grabar la incidencia sobre el elemento
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 9-06-2015
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 20-09-2017 - Se procede a enviar el parametro tipoAsignado para poderlo insertar
     *                           en la tabla INFO_DETALLE_ASIGNACION.
     * @param array $data
     * @return array $resultado
     */
    private function putIncidenciasElemento($data)
    {
        $mensaje = "No se pudo crear la tarea para la incidencia!";

        try
        {
            $tareaId            = $data['data']['idTarea'];
            $elementoId         = $data['data']['idElemento'];
            $empresaCod         = $data['data']['codEmpresa'];
            $longitud           = $data['data']['longitud'];
            $latitud            = $data['data']['latitud'];
            $observaciones      = $data['data']['observaciones'];
            $flagTarea          = $data['data']['tarea'];
            $user               = $data['user'];
            $ipCreacion         = "127.0.0.1";
            $feCreacion         = new \DateTime('now');

            $emSoporte          = $this->getDoctrine()->getManager("telconet_soporte");
            $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");

            $elemento           = $emInfraestructura->find('schemaBundle:InfoElemento', $elementoId);
            $tarea              = $emSoporte->find('schemaBundle:AdmiTarea', $tareaId);

            //llamar service soporte
            $soporte  = $this->get('soporte.SoporteService');

            $arrayParametros = array(
                                        'tarea'                 => $tarea,
                                        'elemento'              => $elemento,
                                        'empresaCod'            => $empresaCod,
                                        'longitud'              => $longitud,
                                        'latitud'               => $latitud,
                                        'observaciones'         => $observaciones,
                                        'flagTarea'             => $flagTarea,
                                        'usrCreacion'           => $user,
                                        'ipCreacion'            => $ipCreacion,
                                        'feCreacion'            => $feCreacion,
                                        'tipoAsignado'          => "EMPLEADO"
                                    );

            //crear Tarea y Caso (opcional)
            $arrayResultado = $soporte->crearTareaIncidenciaElemento($arrayParametros);

            if($arrayResultado['status']!="OK")
            {
                $mensaje = $arrayResultado['mensaje'];
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $resultado;
        }

        $resultado['respuestaIncidencia']   = $arrayResultado;
        $resultado['status']                = $this->status['OK'];
        $resultado['mensaje']               = $this->mensaje['OK'];
        return $resultado;
    }

    /**
     * Funcion que sirve para grabar la incidencia sobre el monitoreo de elementos
     *
     * Reference interoperability: MathServer -> Script Bash de Monitoreo TT_Monitoreo
     *
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.0 09-11-2015
     * @param array $data
     * @return array $resultado
     */
    private function putIncidenciaMonitoreo($data)
    {
        $mensaje = "No se pudo crear la tarea para la incidencia!";

        try
        {
            //id de la tarea asociada
            $tareaId            = $data['data']['idTarea'];
            //latitud del punto geografico donde se ejecutó la incidencia
            $latitud            = $data['data']['latitud'];
            //longitud del punto geografico donde se ejecutó la incidencia
            $longitud           = $data['data']['longitud'];
            //observaciones de la incidencia
            $observaciones      = $data['data']['observaciones'];
            //login del usuario al cual esta asignada la incidencia
            $userAsignacion     = $data['data']['userAsignacion'];
            //codigo de la empresa
            $empresaCod         = $data['data']['codEmpresa'];
            //usuario de creación de la incidencia
            $user               = $data['user'];
            $ipCreacion         = "127.0.0.1";
            $feCreacion         = new \DateTime('now');

            $emSoporte          = $this->getDoctrine()->getManager("telconet_soporte");

            $tarea              = $emSoporte->find('schemaBundle:AdmiTarea', $tareaId);

            //llamar service soporte
            $soporte  = $this->get('soporte.SoporteService');

            $arrayParametros = array(
                                        'tarea'                 => $tarea,
                                        'latitud'               => $latitud,
                                        'longitud'              => $longitud,
                                        'observaciones'         => $observaciones,
                                        'userAsignacion'        => $userAsignacion,
                                        //....
                                        'empresaCod'            => $empresaCod,
                                        'usrCreacion'           => $user,
                                        'ipCreacion'            => $ipCreacion,
                                        'feCreacion'            => $feCreacion
                                    );

            // Crear la tarea de incidencia
            $arrayResultado = $soporte->crearTareaIncidenciaMonitoreo($arrayParametros);

            if($arrayResultado['status']!="OK")
            {
                $mensaje = $arrayResultado['mensaje'];
                throw new \Exception("ERROR_PARCIAL");
            }
        }
        catch(\Exception $e)
        {
            if($e->getMessage() == "NULL")
            {
                $resultado['status']    = $this->status['NULL'];
                $resultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($e->getMessage() == "ERROR_PARCIAL")
            {
                $resultado['status']    = $this->status['ERROR_PARCIAL'];
                $resultado['mensaje']   = $mensaje;
            }
            else
            {
                $resultado['status']    = $this->status['ERROR'];
                $resultado['mensaje']   = $e->getMessage();
            }

            return $resultado;
        }
        //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
        $resultado['respuestaIncidencia']   = $arrayResultado;
        $resultado['status']                = $this->status['OK'];
        $resultado['mensaje']               = $this->mensaje['OK'];
        return $resultado;
    }

    /********************************************************************************************
     * FIN METODOS PUT TECNICO INCIDENCIAS
     ********************************************************************************************/

    /**
     * Funcion que sirve para corta servicio McAfee
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 26-10-2015
     * @param array $data
     * @return array $resultado
     */
    private function cortarServicioOtrosMcAfee($data)
    {
        try
        {
            $idServicio = $data['data']['idServicio'];
            $idAccion   = $data['data']['idAccion'];
            $user       = $data['data']['usrCreacion'];
            $ipCreacion = "127.0.0.1";

            //llamar service ActivarPuerto
            $cortarService = $this->get('tecnico.InfoCortarServicio');

            $arrayPeticiones['idServicio']  = $idServicio;
            $arrayPeticiones['idAccion']    = $idAccion;
            $arrayPeticiones['usrCreacion'] = $user;
            $arrayPeticiones['clientIp']    = $ipCreacion;

            $resultado = $cortarService->cortarServiciosOtros($arrayPeticiones);

        }
        catch(\Exception $e)
        {
            $resultado['status']  = "ERROR";
            $resultado['mensaje'] = $e->getMessage();
        }
        return $resultado;
    }

    /**
     * Funcion que sirve para reactivar servicio McAfee
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 26-10-2015
     * @param array $data
     * @return array $resultado
     */
    private function reactivarServicioOtrosMcAfee($data)
    {
        try
        {
            $idServicio = $data['data']['idServicio'];
            $idAccion   = $data['data']['idAccion'];
            $user       = $data['data']['usrCreacion'];
            $ipCreacion = "127.0.0.1";

            //llamar service ActivarPuerto
            $reconectarService = $this->get('tecnico.InfoReconectarServicio');

            $arrayPeticiones['idServicio']  = $idServicio;
            $arrayPeticiones['idAccion']    = $idAccion;
            $arrayPeticiones['usrCreacion'] = $user;
            $arrayPeticiones['clientIp']    = $ipCreacion;

            $resultado = $reconectarService->reactivarServiciosOtros($arrayPeticiones);

        }
        catch(\Exception $e)
        {
            $resultado['status']  = "ERROR";
            $resultado['mensaje'] = $e->getMessage();
        }
        return $resultado;
    }

    /**
     * Funcion que sirve para cancelar servicio McAfee
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 26-10-2015
     * @param array $data
     * @return array $resultado
     */
    private function cancelarServicioOtrosMcAfee($data)
    {
        try
        {
            $idServicio = $data['data']['idServicio'];
            $idAccion   = $data['data']['idAccion'];
            $user       = $data['data']['usrCreacion'];
            $ipCreacion = "127.0.0.1";

            //llamar service ActivarPuerto
            $cancelarService = $this->get('tecnico.InfoCancelarServicio');

            $arrayPeticiones['idServicio']  = $idServicio;
            $arrayPeticiones['idAccion']    = $idAccion;
            $arrayPeticiones['usrCreacion'] = $user;
            $arrayPeticiones['clientIp']    = $ipCreacion;

            $resultado = $cancelarService->cancelarServiciosOtros($arrayPeticiones);

        }
        catch(\Exception $e)
        {
            $resultado['status']  = "ERROR";
            $resultado['mensaje'] = $e->getMessage();
        }
        return $resultado;
    }

    /**
     * Funcion que sirve para obtener información técnica, comercial y de soporte de un servicio
     * empleando el login de un cliente como parametro principal
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 21-09-2016
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 20-10-2016 Se agrega nuevo parametro ID_CASO en retorno de información de casos ya que
     *                         se modifico la respuesta del método InfoServicioTecnicoService->obtieneInformacionClienteWs
     *                         utilizado en la presente función, el método que origina estos cambios es el siguiente
     *                         InfoServicioTecnicoRepository->getInformacionCliente
     *
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.2 07-07-2017  Se agrega nuevo parametro IPV4 en retorno de informacion de data tecnica, para indicar si el cliente
     *                          tiene asignada una ipv4 publica.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 15-10-2018  Se modifica recuperación de correos del cliente y se agrega parámetro nuevo SALDO del punto del cliente
     * @since 1.2
     *
     * @author Héctor Lozano <hlozano@telconet.ec>
     * @version 1.4 06-12-2018 Se modifica recuperación de id_oficina y id_punto del cliente.
     * @since 1.3
     *
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.5 05-06-2019 Se recupera nueva información del cliente.
     * @since 1.4
     *
     * @param Array $arrayData [
     *                           - data  Filtros empleados para consultar de información
     *                                   [
     *                                      - empresaCod      Empresa a la que pertenece el cliente consultado
     *                                      - identificacion  Identificacion del cliente que solicita informacion
     *                                      - login           Login del punto del cliente del cual se solicita información
     *                                      - serieOnt        Serie Ont del equipo CPE que utiliza el cliente consultado
     *                                      - macOnt          Mac Ont del equipo CPE que utiliza el cliente consultado
     *                                   ]
     *
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     *    - data
     *                [ - cliente           Nombres y Apellidos ó Razon social del cliente
     *                  - identificacion    Numero de identificación del cliente
     *                  - id_oficina        Id de la oficina
     *                  - ciclo_facturacion Tipo de cliclo a facturar
     *                  - forma_pago        Forma de pago del cliente
     *                  - fecha_maxima_pago Fecha maxima de pago apartir de la emision de
     *                                      la factura y el cliclo de facturación
     *                  - puntos
     *                   [
     *                     - id_punto   Id del punto del cliente
     *                     - login      Login del punto del cliente
     *                     - cobertura  Cobertura de servicio del punto
     *                     - direccion  Direccion del punto
     *                     - ciudad     Ciudad donde esta ubicado el punto del cliente
     *                     - sector     Sector de ubicacion del punto del cliente
     *                     - longitud   Coordenada de longitud de ubicacion del punto del cliente
     *                     - latitud    Coordenada de latitud de ubicacion del punto del cliente
     *                     - estado     Estado del punto del cliente
     *                     - telefonos  Telefonos registrados como contactos del punto del cliente
     *                     - correos    Correos registrados como contactos del punto del cliente
     *                     - saldo      Saldo del punto del cliente
     *                      - servicios         [
     *                                            - producto      Nombre de producto de un servicio
     *                                            - ultima_milla  Nombre de ultima milla que emplea el servicio
     *                                            - plan          Nombre de plan del servicio
     *                                            - estado        Estado del servicio
     *                                           ]
     *                       - data_tecnica      [
     *                                            - elemento                    Nombre del elemento de backbone del servicio
     *                                            - ip_elemento                 Ip del elemento de backbone del servicio
     *                                            - modelo_elemento             Modelo del elemento de backbone del servicio
     *                                            - marca_elemento              Marca del elemento de backbone del servicio
     *                                            - interface_elemento          Puerto del elemento de backbone
     *                                            - elemento_contenedor         Elemento contendor el elemento conector
     *                                            - elemento_conector           Elemento conector asignado al servicio
     *                                            - interface_elemento_conector Puerto del elemento de backbone
     *                                            - indice_cliente              ID del cliente en las configuraciones del elemento de backbone
     *                                            - line_profile                Line Profile asignado al servicio
     *                                            - service_port                Service Port asignado al servicio
     *                                            - gemport                     Gemport asignado al servicio
     *                                            - traffic_table               Traffic Table asignado al servicio
     *                                            - vlan                        Vlan que controlara el flujo de internet del servicio
     *                                            - line_profile_promo          Line Profile promocional asignado al servicio
     *                                            - gemport_promo               Gemport promocional asignado al servicio
     *                                            - traffic_table_promo         Traffic Table promocional asignado al servicio
     *                                            - serial_ont                  Serie del CPE ONT asignado al servicio
     *                                            - mac_ont                     Mac del CPE ONT asignado al servicio
     *                                            - modelo_ont                  Modelo del CPE ONT asignado al servicio
     *                                            - marca_ont                   Marca del CPE ONT asignado al servicio
     *                                            - tipo_aprovisionamiento      Tipo de aprovisionamiento de IPS del elemento backbone
     *                                            - ipv4                        Caracteristica para indicar si el cliente tiene ipv4 publica
     *                                           ]
     *                        - facturas         [
     *                                            - numero_factura_sri    Número de factura
     *                                            - valor_total           Valor total de la factura
     *                                            - estado_impresion_fact Estado de la factura
     *                                            - fe_emision            Fecha de emisión de la factura
     *                                           ]
     *                        - pagos            [
     *                                            - numero_pago Número de pago
     *                                            - valor_total Valor total del pago
     *                                            - estado_pago Estado del pago
     *                                            - fe_creacion Fecha de creación del pago
     *                                           ]
     *                       - fecha_activacion      Fecha de activación del servicio de internet
     *                       - tipo_negocio       Tipo de negocio
     *                       - ip_fija           [
     *                                            - valor    Ip asignada al un servicio del punto
     *                                            - mac      Mac asignada al servicio de ip del punto
     *                                            - mascara  Mascara asignada a la ip del servicio
     *                                            - scope    Scope del cual la ip fue asignada
     *                                            - pool_ip  Pool de Ips del cual la ip fue asignada
     *                                           ]
     *                       - tareas            [
     *                                            - numero_tarea        Numero de tarea
     *                                            - tarea               Titulo de tarea
     *                                            - estado              Estado de tarea
     *                                            - fecha_creacion      Fecha de creacion de la tarea
     *                                            - fecha_finalizacion  Fecha de finaliacion de la tarea
     *                                           ]
     *                       - casos             [
     *                                            - id_caso        Id de caso
     *                                            - numero_caso    Numero de caso
     *                                           - caso           Titulo del caso
     *                                           - estado         Estado del caso
     *                                            - fecha_creacion Fecha creacion del caso
     *                                           - fecha_cierre   Fecha de cierre del caso
     *                                           ]
     *                          ]
     *                ]
     * ]
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 16-09-2019 Se recupera nueva información promocional del cliente.
     * @since 1.5
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 04-06-2021 Se agrega la obtención del parámetro 'aplicativo' enviada en el request que permitirá seguir el flujocon la consulta
     *                         enfocada en la parte técnica tomando en cuenta que el punto posea un servicio de Internet en estado Activo o In-Corte
     * 
     */
    private function getInformacionCliente($arrayData)
    {
        //inicialización de variables
        $arrayOciCon      = "";
        $arrayParametros  = "";
        $arrayRespuesta   = "";
        $arrayResultadoObtenerInfo = "";

        //variables para conexion a la base de datos mediante conexion OCI
        $arrayOciCon['user_comercial']   = $this->container->getParameter('user_comercial');
        $arrayOciCon['passwd_comercial'] = $this->container->getParameter('passwd_comercial');
        $arrayOciCon['user_financiero']   = $this->container->getParameter('user_financiero');
        $arrayOciCon['passwd_financiero'] = $this->container->getParameter('passwd_financiero');
        $arrayOciCon['dsn']              = $this->container->getParameter('database_dsn');



        //variables para consulta de información decliente
        $arrayParametros['strEmpresaCod']     = $arrayData['data']['empresaCod'];
        $arrayParametros['strIdentificacion'] = $arrayData['data']['identificacion'];
        $arrayParametros['strLogin']          = $arrayData['data']['login'];
        $arrayParametros['strTipoRol']        = $arrayData['data']['tipoRol'];
        $arrayParametros['strSerieOnt']       = $arrayData['data']['serieOnt'];
        $arrayParametros['strMacOnt']         = $arrayData['data']['macOnt'];
        $arrayParametros['strAplicativo']     = $arrayData['data']['aplicativo'];
        $arrayParametros['ociCon']            = $arrayOciCon;

        //ejecución de service para recuperar información de cliente
        $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
        $arrayResultadoObtenerInfo = $serviceServicioTecnico->obtieneInformacionClienteWs($arrayParametros);

        //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
        $arrayRespuesta['data']    = $arrayResultadoObtenerInfo['arrayData'];
        $arrayRespuesta['status']  = $arrayResultadoObtenerInfo['strStatus'];
        $arrayRespuesta['mensaje'] = $arrayResultadoObtenerInfo['strMensaje'];

        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para obtener información técnica para la implementación de la nueva plataforma unificada ACS
     *
     * @param Array $arrayData [
     *                           - data  Filtros empleados para consultar de información
     *                                   [
     *                                      - login           Login del punto del cliente del cual se solicita información
     *                                      - identificacion  Identificacion del cliente que solicita informacion
     *                                      - serial          Serie Ont del equipo CPE que utiliza el cliente consultado
     *                                      - mac             Mac Ont del equipo CPE que utiliza el cliente consultado
     *                                      - tipo_rol        Tipo de Rol del cliente
     *                                   ]
     *
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     *    - arrayData
     *                [ - marca_ont                  Marca del ont del cliente
     *                  - ont_id                     Ont Id configurado en el servicio de internet
     *                  - ip_olt                     Ip del olt donde está configurado el servicio
     *                  - contactos_telefonicos      Contactos telefónico del cliente
     *                  - nombre_jurisdiccion        Nombre de jurisdicción donde se encuentra el cliente
     *                  - id_servicio                Identificador del servicio
     *                  - mac_ont                    Mac del ont configurado
     *                  - serial_ont                 Serie del ont configurado
     *                  - olt                        Nombre del olt donde se encuentra configurado el cliente
     *                  - interface_elemento         Nombre de interface elemento del cual depende el servicio
     *                  - ciudad                     Nombre de ciudad donde se encuentra el cliente
     *                  - login                      Login del punto del cliente
     *                  - line_profile               Line profile, parámetro de configuración de internet
     *                  - identificacion             Número de identificación del cliente
     *                  - nombre_completo            Nombre completo del cliente
     *                  - correo                     Correos del cliente
     *                  - direccion                  Dirección del cliente
     *                  - longitud                   Longitud de la ubicación del cliente
     *                  - latitud                    Latitud de la ubicación del cliente
     *                  - estado_servicio            Estado del servicio de internet
     *                  - tipo_servicio              Tipo de negocio del servicio
     *                  - nombre_plan                Nombre del plan contratado
     *                  - vlan                       Vlan, parámetro de configuración del servicio de internet
     *                ]
     * ]
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 17-08-2021
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 24-10-2021    Se agrega nuevo parámetro empresaCod
     */
    private function getInformacionClienteAcs($arrayData)
    {
        //inicialización de variables
        $arrayOciCon      = "";
        $arrayParametros  = "";
        $arrayRespuesta   = "";
        $arrayResultadoObtenerInfo = "";

        //variables para conexion a la base de datos mediante conexion OCI
        $arrayOciCon['user_comercial']   = $this->container->getParameter('user_comercial');
        $arrayOciCon['passwd_comercial'] = $this->container->getParameter('passwd_comercial');
        $arrayOciCon['dsn']              = $this->container->getParameter('database_dsn');



        //variables para consulta de información decliente
        $arrayParametros['strEmpresaCod']     = $arrayData['data']['empresaCod'];
        $arrayParametros['strLogin']          = $arrayData['data']['login'];
        $arrayParametros['strIdentificacion'] = $arrayData['data']['identificacion'];
        $arrayParametros['strSerieOnt']       = $arrayData['data']['serial'];
        $arrayParametros['strMacOnt']         = $arrayData['data']['mac'];
        $arrayParametros['strTipoRol']        = $arrayData['data']['tipo_rol'];
        $arrayParametros['ociCon']            = $arrayOciCon;

        //ejecución de service para recuperar información de cliente
        $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
        $arrayResultadoObtenerInfo = $serviceServicioTecnico->obtieneInformacionClienteAcs($arrayParametros);

        //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
        $arrayRespuesta['arrayData'] = $arrayResultadoObtenerInfo['arrayData'];
        $arrayRespuesta['status']    = $arrayResultadoObtenerInfo['strStatus'];
        $arrayRespuesta['mensaje']   = $arrayResultadoObtenerInfo['strMensaje'];

        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para obtener logines de clientes que pertenecen al puerto de un olt
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 21-09-2016
     * @since 1.0
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 20-10-2016        Se agrega retorno de ont id del servicio de internet Activo ó In-Corte de un login ya que
     *                                se modifico la respuesta del método InfoServicioTecnicoService->obtieneLoginesPorOltWs
     *                                utilizado en la presente función, el método que origina estos cambios es el siguiente
     *                                InfoServicioTecnicoRepository->getLoginesPorOltWs
     * @since 1.0
     *
     *
     * @param Array $arrayData [
     *                           - data  Filtros para consultar de información
     *                                   [
     *                                      - nombreOlt      Nombre del olt a consultar
     *                                      - puertoOlt      Puerto del olt a consultar
     *                                   ]
     *
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     *    - data
     *                [ - caja         Nombre de caja que contiene el splitter L2 que aprovisiona internet al servicio
     *                  - splitter     Nombre de splitter L2 que aprovisiona internet al cliente
     *                  - logines      Logines que estan asociados a un splitter l2
     *                                 [
     *                                   - login      login que esta usando como recurso de red el olt y puerto consultado
     *                                   - ont_id     identificador de cliente dentro de las configuraciones de un servicio en el olt
     *                                 ]
     *                ]
     * ]
     */
    private function getLoginesPorOlt($arrayData)
    {
        //inicialización de variables
        $arrayOciCon      = "";
        $arrayParametros  = "";
        $arrayRespuesta   = "";
        $arrayResultadoObtenerLogines = "";

        //variables para conexion a la base de datos mediante conexion OCI
        $arrayOciCon['user_comercial']   = $this->container->getParameter('user_comercial');
        $arrayOciCon['passwd_comercial'] = $this->container->getParameter('passwd_comercial');
        $arrayOciCon['dsn']              = $this->container->getParameter('database_dsn');

        //variables para consulta de información decliente
        $arrayParametros['strNombreOlt']     = $arrayData['data']['nombreOlt'];
        $arrayParametros['strPuertoOlt']     = $arrayData['data']['puertoOlt'];
        $arrayParametros['ociCon']           = $arrayOciCon;

        //ejecución de service para recuperar información de cliente
        $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
        $arrayResultadoObtenerLogines = $serviceServicioTecnico->obtieneLoginesPorOltWs($arrayParametros);

        //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
        $arrayRespuesta['data']    = $arrayResultadoObtenerLogines['arrayData'];
        $arrayRespuesta['status']  = $arrayResultadoObtenerLogines['strStatus'];
        $arrayRespuesta['mensaje'] = $arrayResultadoObtenerLogines['strMensaje'];
        return $arrayRespuesta;
    }


    /**
     * Funcion que permite ingresar fechas de registros laborales de un empleado
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 08-11-2016
     *
     * @author Walther Joao Gaibor C.<wgaibor@telconet.ec>
     * @version 1.1 17-04-2017 - Se almacena el imei del dispositivo de donde se
     *                           realiza el registro de marcación.
     *
     * @param Array $arrayData [
     *                           - data  Filtros para consultar de información
     *                                   [
     *                                      - login        login del empleado
     *                                      - idEmpresa    id empresa del empleado
     *                                      - tipoRegistro tipo del registro
     *                                      - imei         imei del dispositivo.
     *                                   ]
     *                         ]
     * @return Array $arrayResultado
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     * ]
     */
    private function putRegistroEmpleado($arrayData)
    {
        $serviceUtil = $this->get('schema.Util');
        try
        {
            $registroEmpleadoService = $this->get('general.InfoRegistroEmpleado');
            //variables para consulta de información
            $arrayPeticiones['strLogin']        = $arrayData['user'];
            $arrayPeticiones['strIdEmpresa']    = $arrayData['data']['codEmpresa'];
            $arrayPeticiones['strTipoRegistro'] = $arrayData['data']['tipoRegistro'];
            $arrayPeticiones['strLatitud']      = $arrayData['data']['latitud'];
            $arrayPeticiones['strLongitud']     = $arrayData['data']['longitud'];
            $arrayPeticiones['strPermiso']      = $arrayData['data']['permiso'];
            $arrayPeticiones['strImei']         = $arrayData['data']['imei'];
            $arrayPeticiones['strClientIp']     = "127.0.0.1";

            $arrayResultado = $registroEmpleadoService->registroEmpleado($arrayPeticiones);

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'Consultar registros de empleado',
                                       'Error al ingresar registro de empleado. '.$ex->getMessage(),
                                       $arrayData['user'],
                                       "127.0.0.1" );
            $arrayResultado['status']  = "ERROR";
            $arrayResultado['mensaje'] = "Se presentaron problemas al ingresar la información, favor notificar a sistemas.";
        }
        return $arrayResultado;
    }

    /**
     * Función que permite consultar las horas de registro de un empleado
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 10-11-2016
     * @since 1.0
     *
     * @param Array $arrayData [
     *                           - data  Filtros para consultar de información
     *                                   [
     *                                      - login      login del empleado
     *                                      - idEmpresa  id empresa del empleado
     *                                   ]
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     *    - data
     *                [ - id           id del registro del empleado
     *                  - feRegistro   fecha del registro
     *                  - feCreacion   fecha de creación del registro
     *                  - usrCreacion  usuario que creo el registro
     *                  - estado       estado del registro
     *                ]
     *    - ultimoRegistro
     *                     [ - tipoRegistro        el ultimo tipo de registro registrado por el usuario
     *                       - fechaUltimoRegistro la fecha del ultimo registro registrado pro el usuario
     *                     ]
     * ]
     */
    private function getRegistrosEmpleado($arrayData)
    {
        $serviceUtil = $this->get('schema.Util');
        try
        {
            //inicialización de variables
            $arrayParametros  = array();
            $arrayRespuesta   = array();
            $arrayResultado   = array();

            //variables para consulta de información
            $arrayParametros['strLogin']          = $arrayData['user'];
            $arrayParametros['strIdEmpresa']      = $arrayData['data']['codEmpresa'];
            $arrayParametros['dateFechaDesde']    = $arrayData['data']['fechaDesde'] ? $arrayData['data']['fechaDesde'] : date('Y/m/d');
            $arrayParametros['dateFechaHasta']    = $arrayData['data']['fechaHasta'] ? $arrayData['data']['fechaHasta'] : date('Y/m/d');
            $arrayParametros['arrayEstado']       = array('Activo');
            $arrayParametros['arrayTipoRegistro'] = $arrayData['tipoRegistro'];
            //ejecución de service para recuperar información
            $serviceRegistroEmpleado = $this->get('general.InfoRegistroEmpleado');
            $arrayResultado          = $serviceRegistroEmpleado->getRegistrosEmpleado($arrayParametros);

            //corresponde al arreglo de respuesta
            $arrayRespuesta['data']           = $arrayResultado['arrayData'];
            $arrayRespuesta['ultimoRegistro'] = $arrayResultado['arrayUltimoRegistro'];
            $arrayRespuesta['status']         = $arrayResultado['strStatus'];
            $arrayRespuesta['mensaje']        = $arrayResultado['strMensaje'];
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'Consultar registros de empleado',
                                       'Error al consultar registros de empleado. '.$ex->getMessage(),
                                       $arrayData['user'],
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que permite consultar las horas de registro de un empleado
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 21-01-2017
     * @since 1.0
     *
     * @param Array $arrayData [
     *                           - data  Filtros para consultar de información
     *                                   [
     *                                      - login      login del empleado
     *                                      - idEmpresa  id empresa del empleado
     *                                   ]
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     *    - data
     *                [ - idEmpresa:                Int:     Codigo de la empresa.
     *                  - prefijoEmpresa:           String:  Prefijo de la empresa.
     *                  - idServicio:               Int:     Id del servicio confirmar el servicio.
     *                  - idAccion:                 Int:     Acción por que se confirma el servicio.
     *                  - idProducto:               Int:     Id del producto a confirmar.
     *                  - observacionActivarServicio tring:  Observación al confirmarse el servicio.
     *                  - usrCreacion               String:  Usuario de creación.
     *                ]
     *    - ultimoRegistro
     *                     [ - status:              int:        Codigo de respuesta de la ejecucion
     *                       - mensaje:             string:     Mensaje de la ejecución del service.
     *                     ]
     * ]
     */
    public function cancelarYActivarServiciosTN($arrayData)
    {
        $serviceUtil    = $this->get('schema.Util');
        $arrayRespuesta = array();
        try
        {
            //inicialización de variables
            $arrayParametros  = array(
                                      'idEmpresa'                   => $arrayData['data']['idEmpresa'],
                                      'prefijoEmpresa'              => $arrayData['data']['prefijoEmpresa'],
                                      'idServicio'                  => $arrayData['data']['idServicio'],
                                      'idAccion'                    => $arrayData['data']['idAccion'],
                                      'idProducto'                  => $arrayData['data']['idProducto'],
                                      'observacionActivarServicio'  => $arrayData['data']['observacionActivarServicio'],
                                      'usrCreacion'                 => $arrayData['data']['usrCreacion'],
                                      'ipCreacion'                  => '127.0.0.1',
                                      'serNaf'                      => $this->container->getParameter('database_host_naf'),
                                      'ptoNaf'                      => $this->container->getParameter('database_port_naf'),
                                      'sidNaf'                      => $this->container->getParameter('database_name_naf'),
                                      'usrNaf'                      => $this->container->getParameter('user_naf'),
                                      'pswNaf'                      => $this->container->getParameter('passwd_naf')
                                     );
            $serviceConfirmar          = $this->get('tecnico.InfoConfirmarServicio');
            $arrayRespConfirmacion     = $serviceConfirmar->confirmarServicio($arrayParametros);
            $arrayRespuesta['status']  = $arrayRespConfirmacion[0]['status'];
            $arrayRespuesta['mensaje'] = $arrayRespConfirmacion[0]['mensaje'];
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->cancelarYActivarServiciosTN()',
                                       'Error al activar el servicio. '.$ex->getMessage(),
                                       $arrayData['user'],
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        }
        return $arrayRespuesta;
    }

    /**
     * confirmarMonitoreoTelcographTn
     *
     * Función que permite confirmar la creación del host del cliente, este metodo debe ser usado cuando el cliente
     * aplique al app telcograph de monitoreo
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 06-04-2018
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 01-10-2018  Se agregan validaciones para solo confirmar servicios de activaciones nuevas
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 17-01-2020  - Se envía el service 'InfoCambiarPlan' por parámetro
     *                            para la creación de la tarea automática.
     *
     * @param Array $arrayData
     *                         [
     *                           - status          Estado del procesamiento del host
     *                           - mensaje         Mensaje de respuesta del procesamiento del host
     *                           - ruc             Ruc del cliente que esta confirmando el monitoreo
     *                           - ipHost          Ip del host creado en Telcograph
     *                           - usrCreacion     Usuario creación a registra en proceso Telcograph
     *                           - ipCreacion      Ip del host creado en Telcograph
     *                           - urlTelcograph   Url de la app web donde fue creado el monitoreo del elemento
     *                           - organizacion    Organización a la cual debe ser asociado el usuario LDAP creado
     *                         ]
     *
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     * ]
     */
    public function confirmarMonitoreoTelcographTn($arrayData)
    {
        $serviceUtil    = $this->get('schema.Util');
        $arrayRespuesta = array();
        $arrayRespuesta['status']  = "ERROR";
        $arrayRespuesta['mensaje'] = "El proceso que solicita confirmación no es el correcto.";
        $serviceInfoCambiarPlan    = $this->get('tecnico.InfoCambiarPlan');

        try
        {
            //inicialización de variables
            $arrayParametros  = array(
                                      'strStatus'        => $arrayData['data']['status'],
                                      'strMensaje'       => $arrayData['data']['mensaje'],
                                      'strRuc'           => $arrayData['data']['ruc'],
                                      'strIpHost'        => $arrayData['data']['ipHost'],
                                      'strUsrCreacion'   => $arrayData['data']['usrCreacion'],
                                      'strIpCreacion'    => $arrayData['data']['ipCreacion'],
                                      'strUrlTelcograph' => $arrayData['data']['urlTelcograf'],
                                      'strOrganizacion'  => $arrayData['data']['organizacion'],
                                      'strZabbixId'      => $arrayData['data']['zbxZabbixId'],
                                      'strServerIp'      => $arrayData['data']['serverIp'],
                                      'serviceInfoCambiarPlan' => $serviceInfoCambiarPlan
                                     );

            if ($arrayData['data']['mensaje'] != "actualizar" && $arrayData['data']['mensaje'] != "cancelar")
            {
                $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
                $arrayRespConfirmacion     = $serviceServicioTecnico->confirmarProcesoHostTg($arrayParametros);
                $arrayRespuesta['status']  = $arrayRespConfirmacion['strStatus'];
                $arrayRespuesta['mensaje'] = $arrayRespConfirmacion['strMensaje'];
            }
            else
            {
                $arrayRespuesta['mensaje'] = $arrayRespuesta['mensaje']." - ".json_encode($arrayData['data']);
                $serviceUtil->insertError( 'Telcos+',
                                           'TecnicoWSController->confirmarMonitoreoTelcographTn()',
                                           $arrayRespuesta['mensaje'],
                                           $arrayData['user'],
                                           "127.0.0.1" );
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->confirmarMonitoreoTelcographTn()',
                                       'Error al confirmar host del servicio. '.$ex->getMessage(),
                                       $arrayData['user'],
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        }
        return $arrayRespuesta;
    }

    /**
     * procesarConfirmarTelcographTn
     *
     * Función que permite confirmar la creación del host del cliente, este metodo debe ser usado cuando el cliente
     * aplique al app telcograph de monitoreo
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 06-04-2018
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 12-11-2018   Se agrega parámetro  Server Ip para poder realizar procesamiento masivo de clientes pendientes de creación
     * @since 1.0
     *
     * @param Array $arrayData
     *                         [
     *                           - loginAux          Login auxiliar del servicio que sera procesado
     *                           - correoTecnico     Correo que sera utilizado para crear usuario en LDAP
     *                           - nombreRazonSocial Nombre de razón social del usuario a procesar
     *                           - ruc               Ruc del cliente que esta confirmando el monitoreo
     *                           - ipHost            Ip del host creado en Telcograph
     *                           - usrCreacion       Usuario creación a registra en proceso Telcograph
     *                           - ipCreacion        Ip del host creado en Telcograph
     *                           - urlTelcograph     Url de la app web donde fue creado el monitoreo del elemento
     *                           - organizacion      Organización a la cual debe ser agregado el usuario ldap telcograf
     *                           - zbxZabbixId       Identificador de Zabbix
     *                           - serverIp          Ip del servidor donde se encuentra alojado el cliente
     *                         ]
     *
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     * ]
     */
    public function procesarConfirmarTelcographTn($arrayData)
    {
        $serviceUtil    = $this->get('schema.Util');
        $arrayRespuesta = array();
        try
        {
            //inicialización de variables
            $arrayParametrosTelcoGraph                         = array();
            $arrayParametrosTelcoGraph['strRuc']               = $arrayData['data']['ruc'];
            $arrayParametrosTelcoGraph['strIpHost']            = $arrayData['data']['ipHost'];
            $arrayParametrosTelcoGraph['strProceso']           = "crearMasivo";
            $arrayParametrosTelcoGraph['strLoginAux']          = $arrayData['data']['loginAux'];
            $arrayParametrosTelcoGraph['strIpCreacion']        = $arrayData['data']['ipCreacion'];
            $arrayParametrosTelcoGraph['strUsrCreacion']       = $arrayData['data']['usrCreacion'];
            $arrayParametrosTelcoGraph['strCorreoTecnico']     = $arrayData['data']['correoTecnico'];
            $arrayParametrosTelcoGraph['strUrlTelcograph']     = $arrayData['data']['urlTelcograph'];
            $arrayParametrosTelcoGraph['strOrganizacion']      = $arrayData['data']['organizacion'];
            $arrayParametrosTelcoGraph['strNombreRazonSocial'] = $arrayData['data']['nombreRazonSocial'];
            $arrayParametrosTelcoGraph['strZabbixId']          = $arrayData['data']['zbxZabbixId'];
            $arrayParametrosTelcoGraph['strServerIp']          = $arrayData['data']['serverIp'];

            if(
               (isset($arrayData['data']['loginAux']) && !empty($arrayData['data']['loginAux'])) &&
               (isset($arrayData['data']['ipCreacion']) && !empty($arrayData['data']['ipCreacion'])) &&
               (isset($arrayData['data']['usrCreacion']) && !empty($arrayData['data']['usrCreacion'])) &&
               (isset($arrayData['data']['correoTecnico']) && !empty($arrayData['data']['correoTecnico'])) &&
               (isset($arrayData['data']['zbxZabbixId']) && !empty($arrayData['data']['zbxZabbixId'])) &&
               (isset($arrayData['data']['urlTelcograph']) && !empty($arrayData['data']['urlTelcograph'])) &&
               (isset($arrayData['data']['serverIp']) && !empty($arrayData['data']['serverIp']))
              )
            {
                $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
                $arrayRespConfirmacion     = $serviceServicioTecnico->procesaHostTelcoGraph($arrayParametrosTelcoGraph);
                $arrayRespuesta['status']  = $arrayRespConfirmacion['strStatus'];
                $arrayRespuesta['mensaje'] = $arrayRespConfirmacion['strMensaje'];
            }
            else
            {
                $arrayRespuesta['status']  = "ERROR";
                $arrayRespuesta['mensaje'] = "Información incompleta.";
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->procesarConfirmarTelcographTn()',
                                       'Error al confirmar host del servicio. '.$ex->getMessage(),
                                       $arrayData['user'],
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        }
        return $arrayRespuesta;
    }

    /**
     * activarMcAfeeEnPlan
     *
     * Función que permite la activación del servicio McAfee incluido en el plan
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 20-12-2018
     *
     * @param Array $arrayData
     *                         [
     *                           - intIdServicio            id del servicio,
     *                           - user                     usuario de creación,
     *                           - strTipoProceso           INDIVIDUAL o MASIVO,
     *                           - strOpcion                ACTIVAR o REINTENTO,
     *                           - strCodEmpresa            id de la empresa
     *                         ]
     *
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transacción ejecutada
     *    - mensaje  Mensaje de la transacción ejecutada
     * ]
     *
     */
    public function activarMcAfeeEnPlan($arrayData)
    {
        $serviceUtil    = $this->get('schema.Util');
        $arrayRespuesta = array();
        try
        {
            //inicialización de variables
            $arrayParametros                            = array();
            $arrayParametros['intIdServicio']           = $arrayData['data']['intIdServicio'];
            $arrayParametros['strUsrCreacion']          = $arrayData['user'];
            $arrayParametros['strClientIp']             = '127.0.0.1';
            $arrayParametros['strTipoProceso']          = $arrayData['data']['strTipoProceso'];
            $arrayParametros['strOpcion']               = $arrayData['data']['strOpcion'];
            $arrayParametros['strCodEmpresa']           = $arrayData['data']['strCodEmpresa'];
            if(
               (isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio'])) &&
               (isset($arrayParametros['strUsrCreacion']) && !empty($arrayParametros['strUsrCreacion'])) &&
               (isset($arrayParametros['strTipoProceso']) && !empty($arrayParametros['strTipoProceso'])) &&
               (isset($arrayParametros['strOpcion']) && !empty($arrayParametros['strOpcion'])) &&
               (isset($arrayParametros['strCodEmpresa']) && !empty($arrayParametros['strCodEmpresa']))
              )
            {
                $serviceInfoActivarPuerto   = $this->get('tecnico.InfoActivarPuerto');
                $arrayRespMcAfee            = $serviceInfoActivarPuerto->activarProductosAdicionalesEnPlan($arrayParametros);
                $arrayRespuesta['status']   = $arrayRespMcAfee['status'];
                $arrayRespuesta['mensaje']  = $arrayRespMcAfee['mensaje'];
            }
            else
            {
                $arrayRespuesta['status']  = "ERROR";
                $arrayRespuesta['mensaje'] = "Información incompleta.";
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->activarMcAfeeEnPlan',
                                       'Error al confirmar host del servicio. '.$ex->getMessage(),
                                       $arrayData['user'],
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que permite consultar las horas de registro de un empleado
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 21-05-2018
     * @since 1.0
     *
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 21-05-2018 Se añadio el id del documento guardado
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.2 02-06-2020 - Se modifica código para crear nueva estructura de archivos.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.3 16-10-2020 - Almacenar los documentos que genere la app TmOperaciones en el NFS.
     *
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.4 12-01-2021 - Se modifica código para retornar formato valido de respuesta en WS.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.3 12-01-2021 - Se modifica código para retornar formato valido de respuesta en WS.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.3 12-01-2021 - Se modifica código para retornar formato valido de respuesta en WS.
     *
     * @param Array $arrayData [
     *                           - data  Filtros para consultar de información
     *                                   [
     *                                      - idTarea                           id tarea.
     *                                      - idDetalle                         detalle de la tarea.
     *                                      - coordinador                       nombre del coordinador
     *                                      - departamento                      nombre del departamento
     *                                      - direccionTrabajoInspeccionado     direccion de la inspeccion del trabajo
     *                                      - vehiculo                          placa del vehiculo
     *                                      - coordenadas                       Coordenadas desde donde se genera la acta
     *                                      - actaPersonalCargo                 Personas a cargo
     *                                      - cumplePorMaterial                 Materiales usados en la acta
     *                                      - fotografiaEvidencia               Listado de fotos de evidencia
     *                                      - firma                             rubrica del tecnico
     *                                      - idEmpresa                         Codigo de empresa.
     *                                   ]
     *                         ]
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     * ]
     */
    public function putActaEPP($arrayData)
    {
        $serviceUtil        = $this->get('schema.Util');
        $arrayRespuesta     = array();
        $emComercial        = $this->getDoctrine()->getManager("telconet");
        $emFinan            = $this->getDoctrine()->getManager("telconet_financiero");
        $strCodigoPostal    = '593';
        $strOrigenAccion    = 'tareas';
        $strClass           = "TecnicoWSController";
        $strAppMethod       = "putActaEPP";

        try
        {
            $strPrefijoEmpresa       = $emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')
                                                       ->getPrefijoByCodigo($arrayData['data']['codEmpresa']);

            $finder = new Finder();
            $finder->files()->in(__DIR__);

            foreach($finder as $file)
            {
                if(strpos($file->getRealpath(), "TecnicoWS") !== false)
                {
                    $pathSrc = explode("/WebService/TecnicoWSController.php", $file->getRealpath())[0];
                    $pathSrc = explode("\WebService\TecnicoWSController.php", $pathSrc)[0];
                }
            }

            if(isset($arrayData['bandNfs']) && $arrayData['bandNfs'])
            {
                $strAplicacion = $arrayData['strFolderApplication'];
            }
            else
            {
                $arrayParametrosFilePath = array(
                                                'strCodigoPostal'       => $strCodigoPostal,
                                                'strPrefijoEmpresa'     => $strPrefijoEmpresa,
                                                'strFolderApplication'  => $arrayData['strFolderApplication'],
                                                'strController'         => 'Tecnico',
                                                'strOrigenAccion'       => $strOrigenAccion,
                                                'strExt'                => ''
                                            );

                $strRutaFisicaCompleta = $serviceUtil->createNewFilePath($arrayParametrosFilePath);
            }


            $arrParametros      = array (
                                            'idComunicacion'                => $arrayData['data']['idTarea'],
                                            'idDetalle'                     => $arrayData['data']['idDetalle'],
                                            'coordinador'                   => $arrayData['data']['coordinador'],
                                            'departamento'                  => $arrayData['data']['departamento'],
                                            'direccionTrabajoInspeccionado' => $arrayData['data']['direccionTrabajoInspeccionado'],
                                            'vehiculo'                      => $arrayData['data']['vehiculo'],
                                            'coordenadas'                   => $arrayData['data']['coordenadas'],
                                            'actaPersonalCargo'             => $arrayData['data']['actaPersonalCargo'],
                                            'cumplePorMaterial'             => $arrayData['data']['cumplePorMaterial'],
                                            'fotografiaEvidencia'           => $arrayData['data']['fotografiaEvidencia'],
                                            'firma'                         => $arrayData['data']['firma'],
                                            'idEmpresa'                     => $arrayData['data']['codEmpresa'],
                                            'ipCreacion'                    => '127.0.0.1',
                                            'usrCreacion'                   => $arrayData['user'],
                                            'serverRoot'                    => $_SERVER['DOCUMENT_ROOT'],
                                            'pathSource'                    => $pathSrc,
                                            'strRutaFisicaCompleta'         => $strRutaFisicaCompleta,
                                            'strAplicacion'                 => $strAplicacion,
                                            'bandNfs'                       => $arrayData['bandNfs'],
                                            'prefijoEmpresa'                => $strPrefijoEmpresa,
                                            'strOrigenAccion'               => $strOrigenAccion
                                        );

            $serviceActaEPP = $this->get('tecnico.ActaEntrega');
            $arrayRespuestaEpp = $serviceActaEPP->grabarActaEpp($arrParametros);

            if($arrayRespuestaEpp['status'] == 'OK')
            {
                $arrayRespuesta['status']       = $this->status['OK'];
                $arrayRespuesta['mensaje']      = $arrayRespuestaEpp['mensaje'];
            }
            else
            {
                $serviceUtil->insertLog(array(
                    'enterpriseCode'      => "10",
                    'logType'             => 1,
                    'logOrigin'           => 'TELCOS',
                    'application'         => 'TELCOS',
                    'appClass'            => $strClass,
                    'appMethod'           => $strAppMethod,
                    'descriptionError'    => $arrayRespuestaEpp['mensaje'],
                    'status'              => 'Fallido',
                    'inParameters'        => json_encode($arrayData),
                    'creationUser'        => $arrayData['user']));

                $arrayRespuesta['status']       = $this->status['ERROR_PARCIAL'];
                $arrayRespuesta['mensaje']      = "Se presentaron problemas al procesar el archivo, favor notificar a sistemas.";
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertLog(array(
                              'enterpriseCode'      => "10",
                              'logType'             => 1,
                              'logOrigin'           => 'TELCOS',
                              'application'         => 'TELCOS',
                              'appClass'            => $strClass,
                              'appMethod'           => $strAppMethod,
                              'descriptionError'    => $ex->getMessage(),
                              'status'              => 'Fallido',
                              'inParameters'        => json_encode($arrayData),
                              'creationUser'        => $arrayData['user']));

            $arrayRespuesta['status']       = $this->status['ERROR_PARCIAL'];
            $arrayRespuesta['mensaje']      = "Se presentaron problemas al procesar el archivo, favor notificar a sistemas.";
        }

        return $arrayRespuesta;
    }

    /**
     * Función que sirve para finalizar una solicitud y las tareas asociadas a dicha solicitud por servicio en un traslado
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 13-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.1 24-07-2018
     *
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 26-11-2020
     * Se agrega tipo solicitud para finalizar tareas de productos Megadatos.
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.3 25-11-2021
     * Se agrega validación (tipo de Orden) para finalizar tareas de traslado.
     *
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.4 25-01-2021
     * Se agrega validación (tipo de Orden) a todas las condiciones
     * para finalizar tareas de traslado.
     * 
     * @author Daniel Reyes Peñafiel <djreyes@telconet.ec>
     * @version 1.5 07-04-2021
     * Se agrega nuevas variables para invocar a las solicitudes de cableado
     * y las validaciones para buscar esas solicitudes
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.6 18-05-2022
     * Se agrega cierre de tarea de solicitud Agregar Equipo al finalizar 
     * la activacion del servicio.
     * 
     *
     * @param array $arrayData
     * @return array $resultado
     */
    public function putFinalizarSolicitudTareasPorServicioTraslado($arrayData){
        //finalizar solicitud planificacion
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura      = $this->getDoctrine()->getManager("telconet_infraestructura");
        $objEmSoporte           = $this->getDoctrine()->getManager("telconet_soporte");
        $objServiceSoporte      = $this->get('soporte.SoporteService');
        $serviceUtil            = $this->get('schema.Util');
        $arrayRespuesta         = array();
        $strNombreSolicitud     = "SOLICITUD PLANIFICACION";
        
        try
        {
            $intIdservicio      = $arrayData['data']['idServicio'];
            $strUsrCreacion     = $arrayData['user'];
            $emComercial->getConnection()->beginTransaction();
            
            if(isset($arrayData['data']['nombreSolicitud']) && !empty($arrayData['data']['nombreSolicitud']))
            {
                $strNombreSolicitud = $arrayData['data']['nombreSolicitud'];
            }
            
            if($strNombreSolicitud == 'SOLICITUD PLANIFICACION')
            {
                $objTipoSolicitudPlanficacion = $emComercial
                                                 ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                 ->findOneBy(array("descripcionSolicitud" => $strNombreSolicitud,
                                                                   "estado"               => "Activo"));
                $objSolicitudPlanficacionAsignada     = $emComercial
                                                        ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array("servicioId"      => $intIdservicio,
                                                                       "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                       "estado"          => "Asignada"));
                $objSolicitudPlanficacionFinalizada   = $emComercial
                                                        ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array("servicioId"      => $intIdservicio,
                                                                       "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                       "estado"          => "Finalizada"));
                $objTipoSolicitudAgregarEquipo      = $emComercial
                                                     ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                     ->findOneBy(array("descripcionSolicitud" => "SOLICITUD AGREGAR EQUIPO",
                                                                       "estado"               => "Activo"));

                $objSolicitudAddEquipoAsignada     = $emComercial
                                                        ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array("servicioId"      => $intIdservicio,
                                                                          "tipoSolicitudId" => $objTipoSolicitudAgregarEquipo->getId(),
                                                                          "estado"          => "Asignada"));
                $objSolicitudAddEquipoFinalizada     = $emComercial
                                                        ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array("servicioId"      => $intIdservicio,
                                                                          "tipoSolicitudId" => $objTipoSolicitudAgregarEquipo->getId(),
                                                                          "estado"          => "Finalizada"));
            }
            else
            {
                $objTipoSolicitudCableadoEthernet       = $emComercial
                                                            ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                            ->findOneBy(array("descripcionSolicitud" => $strNombreSolicitud,
                                                                                "estado"               => "Activo"));
                $objSolicitudCableadoEthernetAsignada   = $emComercial
                                                            ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                            ->findOneBy(array("servicioId"      => $intIdservicio,
                                                                                "tipoSolicitudId" => $objTipoSolicitudCableadoEthernet->getId(),
                                                                                "estado"          => array("Asignada", "AsignadoTarea")));
                $objSolicitudCableadoEthernetFinalizada = $emComercial
                                                            ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                            ->findOneBy(array("servicioId"      => $intIdservicio,
                                                                                "tipoSolicitudId" => $objTipoSolicitudCableadoEthernet->getId(),
                                                                                "estado"          => array("Activo", "Finalizada")));
            }
            
            
        
            $objServicioInt                      = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->findOneById($intIdservicio);
            $booleanCommit = true;
            if ($objSolicitudPlanficacionAsignada)
            {
                $objSolicitudPlanficacionAsignada->setEstado("Finalizada");
                $emComercial->persist($objSolicitudPlanficacionAsignada);
                $emComercial->flush();

                //crear historial para la solicitud
                $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                $objHistorialSolicitudPlani->setDetalleSolicitudId($objSolicitudPlanficacionAsignada);
                $objHistorialSolicitudPlani->setEstado("Finalizada");
                $objHistorialSolicitudPlani->setObservacion("Cliente instalado");
                $objHistorialSolicitudPlani->setUsrCreacion($strUsrCreacion);
                $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                $objHistorialSolicitudPlani->setIpCreacion("127.0.01");
                $emComercial->persist($objHistorialSolicitudPlani);
                $emComercial->flush();

                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudPlanficacionAsignada->getId();

                if(is_object($objServicioInt) && $objServicioInt->getTipoOrden() == "T")
                {
                    $arrayParametros['strProceso']            = 'Traslado';
                }
                else
                {
                    $arrayParametros['strProceso']            = 'Activar';
                }

                $strMensajeResponse                       = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                 ->cerrarTareasPorSolicitud($arrayParametros);
                if($strMensajeResponse == "OK"){
                    $emComercial->flush();
                    $emComercial->commit();
                    if($arrayData['data']['esDiferenteTecnologia'] && $arrayData['data']['tipoServicio']=='TRASLADO')
                    {
                        $strObservacion = 'Tarea finalizada por traslado diferente tecnologia';
                        $arrayTareasResponse = $emInfraestructura->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                    ->buscarTareasPorLogin(array('strLogin'    => $arrayData['data']['login'],
                                                                                            'strEstado'   => '',
                                                                                            'strFechaIni' => '',
                                                                                            'strFechaFin' => '',
                                                                                            'strMostrarAsignado'  => 'S',
                                                                                            'strVerTareasValidas' => 'S'));
                        if(is_array($arrayTareasResponse) && $arrayTareasResponse['status']=='ok')
                        {
                            foreach ($arrayTareasResponse['result'] as $arrayTareasResponseValor):
                                $objDetalleSol  = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                              ->find($arrayTareasResponseValor['detalle_solicitud_id']);
                                if(is_object($objDetalleSol))
                                {
                                    //crear historial para la solicitud
                                    $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                                    $objHistorialSolicitudPlani->setDetalleSolicitudId($objDetalleSol);
                                    $objHistorialSolicitudPlani->setEstado("Finalizada");
                                    $objHistorialSolicitudPlani->setObservacion($strObservacion);
                                    $objHistorialSolicitudPlani->setUsrCreacion($arrayData['user']);
                                    $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                                    $objHistorialSolicitudPlani->setIpCreacion("127.0.0.1");
                                    $emComercial->persist($objHistorialSolicitudPlani);
                                    $emComercial->flush();
                                    //finalizar info tarea
                                    $arrayParametrosFinTarea = array(
                                        'idEmpresa'               => $arrayData['codEmpresa'],
                                        'prefijoEmpresa'          => $arrayData['prefijoEmpresa'],
                                        'idDetalle'               => $arrayTareasResponseValor['id_detalle'],
                                        'idAsignado'              => null,
                                        'observacion'             => 'Se finaliza tarea por traslado diferente tecnologia',
                                        'usrCreacion'             => $arrayData['user'],
                                        'ipCreacion'              => "127.0.0.1",
                                        'accionTarea'             => 'finalizada'
                                    );
                                    $objServiceSoporte->finalizarTarea($arrayParametrosFinTarea);
                                }
                            endforeach;
                        }                       
                    }

                    $booleanCommit = false;
                    $arrayRespuesta['status']       = $this->status['OK'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;

                    $arrayDetallesTarea = $objEmSoporte->getRepository('schemaBundle:InfoDetalle')
                                                       ->findByDetalleSolicitudId($objSolicitudPlanficacionAsignada->getId());
                    foreach ($arrayDetallesTarea as $objDetalleTarea):
                        $arrayParametrosInfoTarea['intDetalleId']   = $objDetalleTarea->getId();
                        $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
                        $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                    endforeach;

                }
                else
                {
                    $arrayRespuesta['status']       = $this->status['ERROR'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;
                }
            }
            else if($objSolicitudPlanficacionFinalizada){
                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudPlanficacionFinalizada->getId();

                if(is_object($objServicioInt) && $objServicioInt->getTipoOrden() == "T")
                {
                    $arrayParametros['strProceso']            = 'Traslado';
                }
                else
                {
                    $arrayParametros['strProceso']            = 'Activar';
                }

                $strMensajeResponse                       = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                 ->cerrarTareasPorSolicitud($arrayParametros);
                if($strMensajeResponse == "OK")
                {
                    if($arrayData['data']['esDiferenteTecnologia'] && $arrayData['data']['tipoServicio']=='TRASLADO')
                    {
                        $strObservacion = 'Tarea finalizada por traslado diferente tecnologia';
                        $arrayTareasResponse = $emInfraestructura->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                    ->buscarTareasPorLogin(array('strLogin'    => $arrayData['data']['login'],
                                                                                            'strEstado'   => '',
                                                                                            'strFechaIni' => '',
                                                                                            'strFechaFin' => '',
                                                                                            'strMostrarAsignado'  => 'S',
                                                                                            'strVerTareasValidas' => 'S'));
                        if(is_array($arrayTareasResponse) && $arrayTareasResponse['status']=='ok')
                        {
                            foreach ($arrayTareasResponse['result'] as $arrayTareasResponseValor):
                                $objDetalleSol  = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                              ->find($arrayTareasResponseValor['detalle_solicitud_id']);
                                if(is_object($objDetalleSol))
                                {
                                    //crear historial para la solicitud
                                    $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                                    $objHistorialSolicitudPlani->setDetalleSolicitudId($objDetalleSol);
                                    $objHistorialSolicitudPlani->setEstado("Finalizada");
                                    $objHistorialSolicitudPlani->setObservacion($strObservacion);
                                    $objHistorialSolicitudPlani->setUsrCreacion($arrayData['user']);
                                    $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                                    $objHistorialSolicitudPlani->setIpCreacion("127.0.0.1");
                                    $emComercial->persist($objHistorialSolicitudPlani);
                                    $emComercial->flush();
                                    //finalizar info tarea
                                    $arrayParametrosFinTarea = array(
                                        'idEmpresa'               => $arrayData['codEmpresa'],
                                        'prefijoEmpresa'          => $arrayData['prefijoEmpresa'],
                                        'idDetalle'               => $arrayTareasResponseValor['id_detalle'],
                                        'idAsignado'              => null,
                                        'observacion'             => 'Se finaliza tarea por traslado diferente tecnologia',
                                        'usrCreacion'             => $arrayData['user'],
                                        'ipCreacion'              => "127.0.0.1",
                                        'accionTarea'             => 'finalizada'
                                    );
                                    $objServiceSoporte->finalizarTarea($arrayParametrosFinTarea);
                                }
                            endforeach;
                        }                       
                    }

                    $arrayRespuesta['status']       = $this->status['OK'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;

                    $arrayDetallesTarea = $objEmSoporte->getRepository('schemaBundle:InfoDetalle')
                                                       ->findByDetalleSolicitudId($objSolicitudPlanficacionFinalizada->getId());
                    foreach ($arrayDetallesTarea as $objDetalleTarea):
                        $arrayParametrosInfoTarea['intDetalleId']   = $objDetalleTarea->getId();
                        $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
                        $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                    endforeach;

                }else{
                    $arrayRespuesta['status']       = $this->status['ERROR'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;
                }
            }
            else if ($objSolicitudAddEquipoAsignada)
            {
                $objSolicitudAddEquipoAsignada->setEstado("Finalizada");
                $emComercial->persist($objSolicitudAddEquipoAsignada);
                $emComercial->flush();

                //crear historial para la solicitud
                $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                $objHistorialSolicitudPlani->setDetalleSolicitudId($objSolicitudAddEquipoAsignada);
                $objHistorialSolicitudPlani->setEstado("Finalizada");
                $objHistorialSolicitudPlani->setObservacion("Cliente instalado");
                $objHistorialSolicitudPlani->setUsrCreacion($strUsrCreacion);
                $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                $objHistorialSolicitudPlani->setIpCreacion("127.0.01");
                $emComercial->persist($objHistorialSolicitudPlani);
                $emComercial->flush();

                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudAddEquipoAsignada->getId();

                if(is_object($objServicioInt) && $objServicioInt->getTipoOrden() == "T")
                {
                    $arrayParametros['strProceso']            = 'Traslado';
                }
                else
                {
                    $arrayParametros['strProceso']            = 'Activar';
                }

                $strMensajeResponse                       = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                 ->cerrarTareasPorSolicitud($arrayParametros);
                if($strMensajeResponse == "OK"){
                    $arrayRespuesta['status']       = $this->status['OK'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;

                    $arrayDetallesTarea = $objEmSoporte->getRepository('schemaBundle:InfoDetalle')
                                                       ->findByDetalleSolicitudId($objSolicitudAddEquipoAsignada->getId());
                    foreach ($arrayDetallesTarea as $objDetalleTarea):
                        $arrayParametrosInfoTarea['intDetalleId']   = $objDetalleTarea->getId();
                        $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
                        $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                    endforeach;

                }else{
                    $arrayRespuesta['status']       = $this->status['ERROR'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;
                }
            }
            else if($objSolicitudAddEquipoFinalizada)
            {
                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudAddEquipoFinalizada->getId();

                if(is_object($objServicioInt) && $objServicioInt->getTipoOrden() == "T")
                {
                    $arrayParametros['strProceso']            = 'Traslado';
                }
                else
                {
                    $arrayParametros['strProceso']            = 'Activar';
                }

                $strMensajeResponse                       = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                 ->cerrarTareasPorSolicitud($arrayParametros);
                if($strMensajeResponse == "OK")
                {
                    $arrayRespuesta['status']       = $this->status['OK'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;

                    $arrayDetallesTarea = $objEmSoporte->getRepository('schemaBundle:InfoDetalle')
                                                       ->findByDetalleSolicitudId($objSolicitudAddEquipoFinalizada->getId());
                    foreach ($arrayDetallesTarea as $objDetalleTarea):
                        $arrayParametrosInfoTarea['intDetalleId']   = $objDetalleTarea->getId();
                        $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
                        $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                    endforeach;

                }
                else
                {
                    $arrayRespuesta['status']       = $this->status['ERROR'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;
                }
            }
            else if($objSolicitudCableadoEthernetAsignada)
            {
                $objSolicitudCableadoEthernetAsignada->setEstado("Finalizada");
                $emComercial->persist($objSolicitudCableadoEthernetAsignada);
                $emComercial->flush();

                //crear historial para la solicitud
                $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                $objHistorialSolicitudPlani->setDetalleSolicitudId($objSolicitudCableadoEthernetAsignada);
                $objHistorialSolicitudPlani->setEstado("Finalizada");
                $objHistorialSolicitudPlani->setObservacion("Cliente instalado");
                $objHistorialSolicitudPlani->setUsrCreacion($strUsrCreacion);
                $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                $objHistorialSolicitudPlani->setIpCreacion("127.0.01");
                $emComercial->persist($objHistorialSolicitudPlani);
                $emComercial->flush();

                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudCableadoEthernetAsignada->getId();
                
                if(is_object($objServicioInt) && $objServicioInt->getTipoOrden() == "T")
                {    
                    $arrayParametros['strProceso']            = 'Traslado';
                }
                else
                {
                    $arrayParametros['strProceso']            = 'Activar';
                }

                $strMensajeResponse                       = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                 ->cerrarTareasPorSolicitud($arrayParametros);
                if($strMensajeResponse == "OK")
                {
                    $arrayRespuesta['status']       = $this->status['OK'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;

                    $arrayDetallesTarea = $objEmSoporte->getRepository('schemaBundle:InfoDetalle')
                                                       ->findByDetalleSolicitudId($objSolicitudCableadoEthernetAsignada->getId());
                    foreach ($arrayDetallesTarea as $objDetalleTarea):
                        $arrayParametrosInfoTarea['intDetalleId']   = $objDetalleTarea->getId();
                        $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
                        $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                    endforeach;

                }
                else
                {
                    $arrayRespuesta['status']       = $this->status['ERROR'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;
                }
            }
            else if($objSolicitudCableadoEthernetFinalizada)
            {
                $objSolicitudCableadoEthernetFinalizada->setEstado("Finalizada");
                $emComercial->persist($objSolicitudCableadoEthernetFinalizada);
                $emComercial->flush();

                //crear historial para la solicitud
                $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                $objHistorialSolicitudPlani->setDetalleSolicitudId($objSolicitudCableadoEthernetFinalizada);
                $objHistorialSolicitudPlani->setEstado("Finalizada");
                $objHistorialSolicitudPlani->setObservacion("Cliente instalado");
                $objHistorialSolicitudPlani->setUsrCreacion($strUsrCreacion);
                $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                $objHistorialSolicitudPlani->setIpCreacion("127.0.01");
                $emComercial->persist($objHistorialSolicitudPlani);
                $emComercial->flush();

                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudCableadoEthernetFinalizada->getId();
                
                if(is_object($objServicioInt) && $objServicioInt->getTipoOrden() == "T")
                {    
                    $arrayParametros['strProceso']            = 'Traslado';
                }
                else
                {
                    $arrayParametros['strProceso']            = 'Activar';
                }

                $strMensajeResponse                       = $emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                 ->cerrarTareasPorSolicitud($arrayParametros);
                if($strMensajeResponse == "OK")
                {
                    $arrayRespuesta['status']       = $this->status['OK'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;

                    $arrayDetallesTarea = $objEmSoporte->getRepository('schemaBundle:InfoDetalle')
                                                       ->findByDetalleSolicitudId($objSolicitudCableadoEthernetFinalizada->getId());
                    foreach ($arrayDetallesTarea as $objDetalleTarea):
                        $arrayParametrosInfoTarea['intDetalleId']   = $objDetalleTarea->getId();
                        $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
                        $objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                    endforeach;

                }
                else
                {
                    $arrayRespuesta['status']       = $this->status['ERROR'];
                    $arrayRespuesta['mensaje']      = $strMensajeResponse;
                }
            }
            else
            {
                $arrayRespuesta['status']       = $this->status['ERROR'];
                $arrayRespuesta['mensaje']      = "Se presentaron problemas al finalizar la solicitud, estado diferente a Asignada";
            }

            if ($strMensajeResponse == "OK" && $booleanCommit)
            {
                $emComercial->flush();
                $emComercial->commit();
            }
        }catch(\Exception $ex){
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->putfinalizarSolicitudTareasPorServicioTraslado()',
                                       'Error al finalizar solicitud y tareas. '.$ex->getMessage(),
                                       $arrayData['user'],
                                       "127.0.0.1" );
            $arrayRespuesta['status']       = $this->status['ERROR'];
            $arrayRespuesta['mensaje']      = "Se presentaron problemas al finalizar solicitud, favor notificar a sistemas.";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene el registro de materiales en el NAF de custodio para la fibra óptica.
     *
     * @author: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0 07-08-2018
     *
     * @author: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.1 04-09-2018 Se envía el parámetro que indica el límite de fibra que puede exceder el técnico
     * @since 1.0
     *
     *
     * @author: Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 29-10-2018 Se agrega filtro por tipoCustodio, login y tipoArticulo
     * @since 1.0
     *
     * @author: Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.3 13-03-2019 Se optimiza método para estandarizar la obtención de materiales en NAF
     * @since 1.2
     *
     *
     * @author: Ronny Morán <rmoranc@telconet.ec>
     * @version 1.4 12-11-2019 Se agrega entidad al array $arrayParametros.
     * @since 1.3
     *
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function getMaterialesNaf($arrayData)
    {
        $emSoporte      = $this->getDoctrine()->getManager("telconet_soporte");
        $emGeneral      = $this->getDoctrine()->getManager("telconet_general");
        $serviceUtil    = $this->get('schema.Util');
        $strMensaje     = "No se pudieron obtener los materiales!";
        try
        {
            $intIdPersonaEmpresaRol = $arrayData['data']['idPersonaEmpresaRol'];
            $strTipoCustodio        = $arrayData['data']['tipoCustodio'];
            $intIdEmpresa           = $arrayData['data']['idEmpresa'];
            $strLogin               = $arrayData['data']['login'];
            $strUtilizado           = $arrayData['data']['strUtilizado'];

            if($strTipoCustodio == "Cliente")
            {

                $arrayParametrosCustodio ['idPersona']   = $intIdPersonaEmpresaRol;
                $arrayParametrosCustodio ['idEmpresa']   = $intIdEmpresa;
                $arrayParametrosCustodio ['descripcion'] = "Cliente";

                $entityPersonaEmpresaRol    =   $emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                            ->getPersonaEmpresaRolPorPersonaPorRol($arrayParametrosCustodio);

                $intIdPersonaEmpresaRol = $entityPersonaEmpresaRol['idPersonaRol'];
            }

            $arrayParametros['intIdPersonaEmpresaRol'] = $intIdPersonaEmpresaRol;
            $arrayParametros['login']                  = $strLogin;
            $arrayParametros['strTipoCustodio']        = $strTipoCustodio;
            $arrayParametros['idEmpresa']              = $intIdEmpresa;
            $arrayParametros['strUtilizado']           = $strUtilizado;
            $arrayParametros['emGeneral']              = $emGeneral;

            $arrayAdmiParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne(   'LIMITE_ERROR_FIBRA',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '');

            $strValorLimiteFibra                = $arrayAdmiParametroDet["valor1"];

            $arrayParametros['tipoArticulo']    = 'Fibra';
            $arrayMaterialesFibraNaf            = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                ->obtenerCaracteristicasFibraPorUsuarioNaf($arrayParametros);
            $arrayMaterialesMatNaf = [];
            $arrayMaterialesEquiposNaf = [];

                $arrayParametros['tipoArticulo']    = 'Materiales';
                $arrayMaterialesMatNaf              = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                    ->obtenerCaracteristicasMaterialesPorUsuarioNaf($arrayParametros);
                $arrayParametros['tipoArticulo']    = 'Equipos';
                $arrayMaterialesEquiposNaf          = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                    ->obtenerCaracteristicasMaterialesPorUsuarioNaf($arrayParametros);

                $arrayParametros['tipoArticulo']    = 'Cable';
                $arrayCableEquiposNaf               = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                    ->obtenerCaracteristicasMaterialesPorUsuarioNaf($arrayParametros);
                //se une a los materiales materiales de tipo cable.
                $arrayMaterialesMatNaf = array_merge($arrayCableEquiposNaf , $arrayMaterialesMatNaf);
            
                $arrayRespuesta         = array(
                                            'materialesFibraNaf'            => $arrayMaterialesFibraNaf,
                                            'materialesMaterialesNaf'       => $arrayMaterialesMatNaf,
                                            'materialesEquiposNaf'          => $arrayMaterialesEquiposNaf,
                                            'cantidadLimiteFibra'           => $strValorLimiteFibra
                                            );

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
                                        'TecnicoWSController.getMaterialesNaf',
                                        $ex->getMessage(),
                                        $arrayData['user'],
                                        "127.0.0.1");

            if($ex->getMessage() == "NULL")
            {
                $arrayResultado['status']    = $this->status['NULL'];
                $arrayResultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']   = $strMensaje;
            }
            else
            {
                $arrayResultado['status']    = $this->status['ERROR'];
                $arrayResultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $arrayResultado;
        }

        if(isset($arrayData['data']['idPersonaEmpresaRol'])){
            $arrayResultado['data']          = $arrayRespuesta;
            $arrayResultado['status']        = $this->status['OK'];
            $arrayResultado['mensaje']       = $this->mensaje['OK'];
        }else{
            $arrayResultado['materiales']    = null;
            $arrayResultado['status']        = $this->status['OK'];
            $arrayResultado['mensaje']       = $this->mensaje['OK'];
        }

        return $arrayResultado;
    }

    /**
     * Función que guarda los registros de materiales en el NAF de custodio para la fibra óptica.
     *
     * @author: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0 07-08-2018
     *
     * @author: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.1 04-09-2018 Se controla la fibra excedida. Creando una tarea automática al coordinador
     *                         o jefe inmediato si se excede del limite de la fibra.
     *
     * @author: Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 19-10-2018 Agregando parametros de Observación y Tipo de artículo
     *
     * @author: Wilmer Vera <wvera@telconet.ec>
     * @version 1.3
     *          14-11-2018 Se realiza logica para poder notificar mediante mensaje via correo
     *          a los coordinadores cada que hay un faltante o excedente de fibra para las tareas de Retiro
     *          de equipo en el aplicativo Telcos-Movil.
     * @since 1.2
     * 
     * @author: Ronny Morán <rmoranc@telconet.ec>
     * @version 1.4 04-06-2021 Se valida el ingreso del progreso de fibra/materiales en caso de registrar fibra/materiales.
     * 
     * @author: Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 1.5 22-10-2021 Se valida que cuando el tipoTransaccion sea "Regularizacion" no ingrese progreso.
     * 
     * @param array $arrayData
     * @return array $arrayResultado
     */
    public function putIngresoMaterialNaf($arrayData)
    {
        $serviceUtil                = $this->get('schema.Util');
        $emSoporte                  = $this->getDoctrine()->getManager("telconet_soporte");
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $entityServiceSoporte       = $this->get('soporte.SoporteService');
        $emGeneral                  = $this->getDoctrine()->getManager("telconet_general");
        $arrayResultado             = [];
        $boolEnviaFibra             = false;
        $boolEnviaMateriales        = false;
        $strAccion                  = "";
        $intIdEmpresaTarea          = $arrayData['data']['tareaEmpresaId'];
        $strRegularizacion          = "Regularizacion"; 
        
        try
        {
            $intidPersonaEntrega                    = $arrayData['data']['custodioEntregaId'];
            $intidPersonaRecibe                     = $arrayData['data']['custodioRecibeId'];
            $strRecibe                              = $arrayData['data']['recibe'];
            $intCantidadExcedida                    = $arrayData['data']['cantidadExcedida'];
            $strObservacion                         = $arrayData['data']['observacion'];
            $strTipoActividad                       = $arrayData['data']['tipoActividad'];
            $strTipoTransaccion                     = $arrayData['data']['tipoTransaccion'];
            $strNoSeRecogioFibra                    = $arrayData['data']['noSeRecogioFibra'];
            $arrayParametros['tipoActividad']       = $strTipoActividad; 
            $strUsrCreacion                         = $arrayData['user'];
            $intServicioId                          = $arrayData['data']['servicioId'];
            $intDetalleId                           = $arrayData['data']['detalleId'];
            $intCasoId                              = !empty($arrayData['data']['casoId']) ? $arrayData['data']['casoId'] : "0";
            $intComunicacionId                      = $arrayData['data']['comunicacionId'];
            $strIpCreacion                          = "127.0.0.1";
            $strOrigenProgreso                      = isset($arrayData['data']['origen']) ? $arrayData['data']['origen'] : "WEB";
            
            if($strRecibe == 'CLIENTE')
            {
                $arrayParametros ['idPersona']   = $intidPersonaRecibe;
                $arrayParametros ['idEmpresa']   = $intIdEmpresaTarea;
                $arrayParametros ['descripcion'] = "Cliente";

                $entityPersonaEmpresaRol    =   $emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                            ->getPersonaEmpresaRolPorPersonaPorRol($arrayParametros);
                $intidPersonaRecibe         =   $entityPersonaEmpresaRol['idPersonaRol'];
            }
            else
            {
                $arrayParametros ['idPersona']   = $intidPersonaEntrega;
                $arrayParametros ['idEmpresa']   = $intIdEmpresaTarea;
                $arrayParametros ['descripcion'] = "Cliente";

                $entityPersonaEmpresaRol    =   $emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                            ->getPersonaEmpresaRolPorPersonaPorRol($arrayParametros);
                $intidPersonaEntrega         =   $entityPersonaEmpresaRol['idPersonaRol'];
            }

            $arrayParametros['strUser']             = $this->container->getParameter('user_naf');
            $arrayParametros['strPass']             = $this->container->getParameter('passwd_naf');
            $arrayParametros['objDb']               = $this->container->getParameter('database_dsn_naf');
            $arrayParametros['intidPersonaEntrega'] = $intidPersonaEntrega;
            $arrayParametros['intidPersonaRecibe']  = $intidPersonaRecibe;
            $arrayParametros['observacion']         = $strObservacion;
            $arrayParametros['tipoActividad']       = $strTipoActividad;
            $arrayParametros['tipoTransaccion']     = $strTipoTransaccion;
            $arrayParametros['arrayControlCusto']   = $arrayData['data']['controlCustodio'];
           
            foreach ($arrayParametros['arrayControlCusto'] as &$objCustodio) 
            {
                if($objCustodio['tipoArticulo'] == "Fibra" || $objCustodio['tipoArticulo'] == "Cable")
                {
                    $boolEnviaFibra = true;
                }
                else if($objCustodio['tipoArticulo'] == "Materiales")
                {
                    $boolEnviaMateriales = true;
                }    
            }
        
            $strCodigoProgresoBuscar = "INGRESO_MATERIALES";
            $arrayValidaProgreso        = array(
                                                'intServicioId'          => $intServicioId,
                                                'intEmpresaCod'          => $intIdEmpresaTarea,
                                                'tipoProgreso'           => $strCodigoProgresoBuscar,
                                                'detalleId'              => $intDetalleId,
                                                'casoId'                 => $intCasoId,                            
                                                'user'                   => $strUsrCreacion
                                                );
            
            $strAccion = "Verificando progreso de materiales";
            $strTieneProgresoMateriales         = $emGeneral->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->validaProgresoTarea($arrayValidaProgreso);
            
            $strCodigoProgresoBuscar = "INGRESO_FIBRA";
            $arrayValidaProgreso['tipoProgreso'] = $strCodigoProgresoBuscar;
            
            $strAccion = "Verificando progreso fibra";
            $strTieneProgresoFibra              = $emGeneral->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->validaProgresoTarea($arrayValidaProgreso);
								
            $strAccion = "Registrando fibra/materiales";
            $arrayRespuesta             = $emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                                    ->putguardarRegistroNaf($arrayParametros);
            
            if(is_array($arrayRespuesta))
            {
                throw new \Exception($arrayRespuesta['message']);
            }
            
            if($boolEnviaFibra && $strTieneProgresoFibra == 'NO' && $strTipoTransaccion != $strRegularizacion)
            {
                error_log("progreso fibra");
                $strAccion = "Ingresando progreso de fibra";
                $arrayProgresoActivacion     = array(
                                                        'strCodEmpresa'         => $intIdEmpresaTarea,
                                                        'intIdTarea'            => $intComunicacionId,
                                                        'intIdDetalle'          => $intDetalleId,
                                                        'strCodigoTipoProgreso' => "INGRESO_FIBRA",
                                                        'intIdServicio'         => $intServicioId,
                                                        'strOrigen'             => $strOrigenProgreso,
                                                        'strUsrCreacion'        => $strUsrCreacion,
                                                        'strIpCreacion'         => $strIpCreacion);

                $arrayRespuestaProg     = $entityServiceSoporte->ingresarProgresoTarea($arrayProgresoActivacion); 
                $strStatus              = $arrayRespuestaProg['status']; 
                $strMensajeProg         = $arrayRespuestaProg['mensaje'];

                if($strStatus != 'OK' && strpos($strMensajeProg, 'Ya existe un registro del progreso de la tarea') === false)
                {
                    throw new \Exception($strMensajeProg);
                }   
            }    
            if($boolEnviaMateriales && $strTieneProgresoMateriales == 'NO')
            {
                error_log("progreso materiales"); 
                $strAccion = "Ingresando progreso de materiales";
                $arrayProgresoActivacion     = array(
                                                        'strCodEmpresa'         => $intIdEmpresaTarea,
                                                        'intIdTarea'            => $intComunicacionId,
                                                        'intIdDetalle'          => $intDetalleId,
                                                        'strCodigoTipoProgreso' => "INGRESO_MATERIALES",
                                                        'intIdServicio'         => $intServicioId,
                                                        'strOrigen'             => $strOrigenProgreso,
                                                        'strUsrCreacion'        => $strUsrCreacion,
                                                        'strIpCreacion'         => $strIpCreacion);

                $arrayRespuestaProg     = $entityServiceSoporte->ingresarProgresoTarea($arrayProgresoActivacion); 
                $strStatus              = $arrayRespuestaProg['status']; 
                $strMensajeProg         = $arrayRespuestaProg['mensaje'];

                if($strStatus != 'OK' && strpos($strMensajeProg, 'Ya existe un registro del progreso de la tarea') === false)
                {
                    throw new \Exception($strMensajeProg);
                }   
            }
            
            if($strTieneProgresoFibra == 'NO')
            {
                if(isset($strNoSeRecogioFibra) 
                    && !empty($strNoSeRecogioFibra)
                    && $strNoSeRecogioFibra == "Si")
                {
                    if($strRecibe == 'CLIENTE')
                        {
                            $intIdPersonaEmpresaRol = $intidPersonaEntrega;
                        }
                        else
                        {
                            $intIdPersonaEmpresaRol = $intidPersonaRecibe;
                        }

                        $strLogin                   = $arrayData['data']['controlCustodio'][0]['login'];
                        $objPuntoCliente            = $emComercial->getRepository('schemaBundle:InfoPunto')->findOneBy(array('login'=> $strLogin));
                        $intIdPunto                 = $objPuntoCliente->getId();

                        $objInfoPersonaEmpresaRol   = $emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);
                        $objAdmiCuadrilla           = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($objInfoPersonaEmpresaRol->getCuadrillaId());

                        $objTarea                   = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                                ->findOneBy(array('nombreTarea'    => "CONTROL DE FIBRA NO RETIRADA"));

                        $arrayParametrosCoordenadas = array(
                                                            'objTarea'      => $objTarea,
                                                            'latitud'       => "0",
                                                            'longitud'      => "0",
                                                            'observaciones' => "Fibra no retirada del cliente con login: ".$strLogin,
                                                            'empresaCod'    => $arrayData['data']["tareaEmpresaId"],
                                                            'ipCreacion'    => "127.0.0.1",
                                                            'usrCreacion'   => $arrayData['user'],
                                                            'intPuntoId'    => $intIdPunto);

                        $serviceSoporte             = $this->get('soporte.SoporteService');
                        $serviceSoporte->crearTareaAlCoordinador($arrayParametrosCoordenadas);
                }

                if(isset($intCantidadExcedida) 
                && !empty($intCantidadExcedida)
                && !empty($arrayParametros['arrayControlCusto']) 
                && $arrayParametros['arrayControlCusto'][0]["tipoActividad"]!="Retiro")
                {
                    if($intCantidadExcedida>5)
                    {
                        if($strRecibe == 'CLIENTE')
                        {
                            $intIdPersonaEmpresaRol = $intidPersonaEntrega;
                        }
                        else
                        {
                            $intIdPersonaEmpresaRol = $intidPersonaRecibe;
                        }

                        $strLogin                   = $arrayData['data']['controlCustodio'][0]['login'];
                        $objPuntoCliente            = $emComercial->getRepository('schemaBundle:InfoPunto')->findOneBy(array('login'=> $strLogin));
                        $intIdPunto                 = $objPuntoCliente->getId();
                        $strArticuloId              = $arrayParametros['arrayControlCusto'][0]['articuloId'];

                        $objInfoPersonaEmpresaRol   = $emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);
                        $objAdmiCuadrilla           = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($objInfoPersonaEmpresaRol->getCuadrillaId());

                        $objTarea                   = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                                ->findOneBy(array('nombreTarea'    => "CONTROL DE FIBRA EXCEDENTE"));

                        $arrayParametrosCoordenadas = array(
                                                            'objTarea'      => $objTarea,
                                                            'latitud'       => "0",
                                                            'longitud'      => "0",
                                                            'observaciones' => "Registro de fibra excede los 5 mts de la cantidad disponible. ".
                                                                               "Codigo de Articulo : ".$strArticuloId.
                                                                               "Cantidad excedida: ".$intCantidadExcedida." mts ".
                                                                               "Cuadrilla: ".$objAdmiCuadrilla->getNombreCuadrilla(),
                                                            'empresaCod'    => $arrayData['data']["tareaEmpresaId"],
                                                            'ipCreacion'    => "127.0.0.1",
                                                            'usrCreacion'   => $arrayData['user'],
                                                            'intPuntoId'    => $intIdPunto);

                        $serviceSoporte             = $this->get('soporte.SoporteService');
                        $serviceSoporte->crearTareaAlCoordinador($arrayParametrosCoordenadas);
                    }
                }
                else if(isset($intCantidadExcedida) 
                    && !empty($intCantidadExcedida)
                    && !empty($arrayParametros['arrayControlCusto']) 
                    && $arrayParametros['arrayControlCusto'][0]['tipoActividad']==='Retiro')
                {
                        $emGeneral      = $this->getDoctrine()->getManager("telconet_general");
                        $arrayAdmiParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETRO_RETIRO_EQUIPO_LIMITE_EXCEDENTE', 
                                                                            '', 
                                                                            '', 
                                                                            '', 
                                                                            '', 
                                                                            '', 
                                                                            '', 
                                                                            '', 
                                                                            '', 
                                                                            '10');

                        $strValorLimiteExcedenteRetiro = $arrayAdmiParametroDet["valor1"];

                        if($intCantidadExcedida>$strValorLimiteExcedenteRetiro)
                        {

                            if($strRecibe === 'CLIENTE')
                            {
                                $intIdPersonaEmpresaRol = $intidPersonaEntrega;
                            }
                            else
                            {
                                $intIdPersonaEmpresaRol = $intidPersonaRecibe;
                            }


                            $strLogin                   = $arrayData['data']['controlCustodio'][0]['login'];
                            $objPuntoCliente            = $emComercial->getRepository('schemaBundle:InfoPunto')
                                                                      ->findOneBy(array('login'=> $strLogin));
                            $intIdPunto                 = $objPuntoCliente->getId();

                            $objInfoPersonaEmpresaRol   = $emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                    ->find($intIdPersonaEmpresaRol);
                            $objAdmiCuadrilla           = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')
                                                                      ->find($objInfoPersonaEmpresaRol->getCuadrillaId());

                            $objTarea                   = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                                    ->findOneBy(array('nombreTarea'    => "CONTROL DE FIBRA EXCEDENTE"));
                            $strObservacion = '';
                            $strArticuloId = $arrayParametros['arrayControlCusto'][0]['articuloId'];
                            if((strpos($strArticuloId, 'FSB-') !== false))
                            {
                                $strObservacion = "La fibra retirada no estaba en el sistema de cutodio por ello se ha generado. ".
                                "Fibra Generada     : ".$strArticuloId.
                                "Cantidad generada  : ".$intCantidadExcedida." mts ".
                                "Cuadrilla          : ".$objAdmiCuadrilla->getNombreCuadrilla();
                            } else
                            {
                                $strObservacion = "La fibra retirada excede los 10 mts de la cantidad ingresada en la instalación anterior. ".
                                "Codigo de Articulo: ".$strArticuloId.
                                "Cantidad excedida: ".$intCantidadExcedida." mts ".
                                "Cuadrilla: ".$objAdmiCuadrilla->getNombreCuadrilla();
                            }
                            $arrayParametrosCoordenadas = array(
                                                                'objTarea'      => $objTarea,
                                                                'latitud'       => "0",
                                                                'longitud'      => "0",
                                                                'observaciones' => $strObservacion,
                                                                'empresaCod'    => $arrayData['data']["tareaEmpresaId"],
                                                                'ipCreacion'    => "127.0.0.1",
                                                                'usrCreacion'   => $arrayData['user'],
                                                                'intPuntoId'    => $intIdPunto);

                            $serviceSoporte             = $this->get('soporte.SoporteService');
                            $serviceSoporte->crearTareaAlCoordinador($arrayParametrosCoordenadas);
                        }
                }

            }                
            
            $arrayResultado['status']   = $this->status['OK'];
            $arrayResultado['mensaje']  = $arrayRespuesta;
            
        }
        catch(\Exception $ex)
        {
            $arrayResultado['status']   = $this->status['ERROR'];
            $arrayResultado['mensaje']  = $ex->getMessage();
            
            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intIdEmpresaTarea,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'appAction'        => $strAccion,
                'descriptionError' => $ex->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $arrayData['user']));      
        }
        return $arrayResultado;
    }


    /**
     * Función que obtiene las categorias de fin de tarea
     * que servirán de filtro en el aplicativo móvil
     *
     * @author: Wilmer Vera <wvera@telconet.ec>
     * @author: Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.0 06-06-2019
     *
     * @author: Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 31-03-2020
     * Se agregan parametros para validar el tipo de origen de la petición
     *
     *
     * @author: Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 06-10-2020
     * Se agrega validación para mostrar los motivos de fin de tarea cuando la petición viene con
     * origen MOVIL
     *
     *
     * @param array $arrayData
     * @return array $arrayResultado
     * 
     * @author: Pedro Velez <psvelez@telconet.ec>
     * @version 1.3 19-07-2021
     * Se agrega informacion que devuelve el web service para obetener el id y detalle de motivo 
     * para cierre de casos Hal
     *   
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function getCategoriasFinTarea($arrayData)
    {
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $emGeneral                  = $this->getDoctrine()->getManager("telconet_general");
        $emGeneral->getConnection()->beginTransaction();
        $serviceUtil                = $this->get('schema.Util');
        $strMsgSoporteSistemas = 'si el tema persiste por favor escalar una tarea a Soporte Sistemas. Asunto : Verificación de Categoría de Tareas.';
        $strParametroOrigenWeb      = "";
        $strParametroOrigenMovil    = "";
        $strParametroAdministrativo = "";

        try
        {

            $objAdmiParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'CATEGORIA_TAREA',
                                'estado'            => 'Activo'
                                )
                        );

            //Parametro de la ruta de las imágenes TM-OPERACIONES
            $objAdmiParametroCabUrlImage    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'RUTA_BASE_IMG_TM_OPERACIONES',
                                'estado'            => 'Activo'
                                )
                        );

            $strResultadoUrlImage = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->findOneBy(array(
                                'parametroId'   => $objAdmiParametroCabUrlImage->getId(),
                                'estado'        => 'Activo'
                                )
                        );

            //Parametro de los idDepartamentos que muestran todas las categorías
            $objAdmiParametroCabDepTn    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'DPT_SIN_FILTRO',
                                'estado'            => 'Activo'
                                )
                        );

            $arrayDeptSinFiltro = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->findBy(array(
                            'parametroId'   => $objAdmiParametroCabDepTn->getId(),
                            'estado'        => 'Activo'
                            )
                    );


            $arrayParametroOrigenWeb = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('ORIGEN_WEB',
                                '',
                                '',
                                '',
                                '',
                                '',
                                '',
                                ''
                            );
            if (is_array($arrayParametroOrigenWeb))
            {
                $strParametroOrigenWeb = !empty($arrayParametroOrigenWeb['valor1']) ? $arrayParametroOrigenWeb['valor1'] : "";
            }

            $arrayParametroOrigenMovil = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('ORIGEN_MOVIL',
                                '',
                                '',
                                '',
                                '',
                                '',
                                '',
                                ''
                            );
            if (is_array($arrayParametroOrigenMovil))
            {
                $strParametroOrigenMovil = !empty($arrayParametroOrigenMovil['valor1']) ? $arrayParametroOrigenMovil['valor1'] : "";
            }


            $arrayParametroAdmin = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('CATEGORIA_NO_MOVIL',
                                '',
                                '',
                                '',
                                '',
                                '',
                                '',
                                ''
                            );
            if (is_array($arrayParametroAdmin))
            {
                $strParametroAdministrativo = !empty($arrayParametroAdmin['valor1']) ? $arrayParametroAdmin['valor1'] : "";
            }


            $arrayParametro = array(
                                    'idParametroCab'            => $objAdmiParametroCab->getId(),
                                    'urlImage'                  => $strResultadoUrlImage,
                                    'idDepartamento'            => $arrayData['data']['idDepartamento'],
                                    'tipoOrigen'                => $arrayData['data']['tipo'],
                                    'arrayDeptSinFiltro'        => $arrayDeptSinFiltro,
                                    'strParametroOrigenWeb'     => $strParametroOrigenWeb,
                                    'strParametroOrigenMovil'   => $strParametroOrigenMovil,
                                    'strParametroAdministrativo'=> $strParametroAdministrativo
                                    );

            $arrayReturn = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->getCategoriasTareas($arrayParametro);

            if($arrayData['data']['tipo'] == $strParametroOrigenMovil)
            {
                for($intI = 0; $intI < count($arrayReturn['respuesta']); $intI++)
                {
                    $strNombreCategoria = $arrayReturn['respuesta'][$intI]['nombreCategoria'];
                    for($intJ = 0; $intJ < count($arrayReturn['respuesta'][$intI]['hijosCategoria']); $intJ++)
                    {
                        $strNombreHijo      = $arrayReturn['respuesta'][$intI]['hijosCategoria'][$intJ]['nombreHijo'];
                        for($intK = 0; $intK < count($arrayReturn['respuesta'][$intI]['hijosCategoria'][$intJ]['listaTareas']); $intK++)
                        {
                            $strNumeroTarea  = $arrayReturn['respuesta'][$intI]['hijosCategoria'][$intJ]['listaTareas'][$intK]['numeroTarea'];

                            $arrayParamMotiv = [
                                                'strNombreCategoria'      => $strNombreCategoria,
                                                'strNombreHijo'           => $strNombreHijo,
                                                'strNumeroTarea'          => $strNumeroTarea
                                                ];

                            $arrayMotivos = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                            ->getMotivosFinTarea($arrayParamMotiv);

                            $arrayMotivosCierre = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                            ->getHipotesisFinCaso($arrayParamMotiv);    

                            $arrayReturn['respuesta'][$intI]['hijosCategoria'][$intJ]['listaTareas'][$intK]['motivos'] = $arrayMotivos['respuesta'];
                            
                            $arrayReturn['respuesta'][$intI]['hijosCategoria'][$intJ]['listaTareas'][$intK]['motivosCierreCaso'] = 
                                                                                                                $arrayMotivosCierre['respuesta'];

                        }
                    }
                }
            }


            if($arrayReturn['status'] == 'OK')
            {
                if(count($arrayReturn['respuesta']) > 0)
                {
                    $arrayResultado['categoriaTareas']  = $arrayReturn['respuesta'];
                    $arrayResultado['status']           = $this->status['OK'];
                    $arrayResultado['mensaje']          = $this->mensaje['OK'];
                }
                else
                {
                    $arrayResultado['categoriaTareas']  = $arrayReturn['respuesta'];
                    $arrayResultado['status']           = 204;
                    $arrayResultado['mensaje']          = 'No existen tareas categorizadas a su departamento, por favor verificar con su jefe inmediato '.$strMsgSoporteSistemas;
                }
            }
            else
            {
                $arrayResultado['data']         = null;
                $arrayResultado['status']       = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']      = 'Problemas al obtener las categorías, ' .$strMsgSoporteSistemas;
            }

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
                                        'TecnicoWSController.getCategoriasFinTarea',
                                        $ex->getMessage(),
                                        $arrayData['user'],
                                        "127.0.0.1");

            $arrayResultado['data']          = null;
            $arrayResultado['status']        = $this->status['ERROR'];
            $arrayResultado['mensaje']       = $ex->getMessage();
        }

        return $arrayResultado;
    }

    /**
     * Función que obtiene las etiquetas de fotos para el aplicativo móvil
     *
     * @author Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.0 01-07-2019
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 26-09-2022 - Se agrega la validación para permitir etiquetas personalizadas
     *                           por nombre técnico del producto de un servicio.
     *
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function getEtiquetasFotos($arrayData)
    {
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $emGeneral->getConnection()->beginTransaction();
        $serviceUtil            = $this->get('schema.Util');
        $strMsgSoporteSistemas  = 'si el tema persiste por favor escalar una tarea a Soporte Sistemas. Asunto : Verificación de Etiquetas de fotos.';
        try
        {

            $objAdmiParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'ETIQUETA_FOTO',
                                'estado'            => 'Activo'
                                )
                        );

            //Parámetros de la ruta de las imágenes TM-OPERACIONES
            $objAdmiParametroCabUrlImage    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'RUTA_BASE_IMG_TM_OPERACIONES',
                                'estado'            => 'Activo'
                                )
                        );

            $strResultadoUrlImage = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->findOneBy(array(
                                'parametroId'   => $objAdmiParametroCabUrlImage->getId(),
                                'estado'        => 'Activo'
                                )
                        );

            //Parametro de los idDepartamentos que muestran todas las etiquetas
            $objAdmiParametroCabDepTn    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'DPT_SIN_FILTRO_FOTO',
                                'estado'            => 'Activo'
                                )
                        );

            $arrayDeptSinFiltro = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->findBy(array(
                            'parametroId'   => $objAdmiParametroCabDepTn->getId(),
                            'estado'        => 'Activo'
                            )
                    );

            $strNombreTecnico  = "";
            $strEstadoServicio = "";
            if(isset($arrayData['data']['idServicio']) && !empty($arrayData['data']['idServicio']))
            {
                //obtener servicio
                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                  ->findOneById($arrayData['data']['idServicio']);
                if(is_object($objServicio) && is_object($objServicio->getProductoId()))
                {
                    $strNombreTecnico  = $objServicio->getProductoId()->getNombreTecnico();
                    $strEstadoServicio = $objServicio->getEstado();
                }
            }

            $arrayParametro = array(
                                    'idParametroCab'        => $objAdmiParametroCab->getId(),
                                    'urlImage'              => $strResultadoUrlImage,
                                    'idDepartamento'        => $arrayData['data']['idDepartamento'],
                                    'arrayDeptSinFiltro'    => $arrayDeptSinFiltro,
                                    'strNombreTecnico'      => $strNombreTecnico,
                                    'strEstadoServicio'     => $strEstadoServicio
                                    );

            $arrayReturn = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->getEtiquetasFotos($arrayParametro);

            if($arrayReturn['status'] == 'OK')
            {
                if(count($arrayReturn['respuesta']) > 0)
                {
                    $arrayResultado['etiquetasFotos']   = $arrayReturn['respuesta'];
                    $arrayResultado['status']           = $this->status['OK'];
                    $arrayResultado['mensaje']          = $this->mensaje['OK'];
                }
                else
                {
                    $arrayResultado['etiquetasFotos']   = $arrayReturn['respuesta'];
                    $arrayResultado['status']           = 204;
                    $arrayResultado['mensaje']          = 'No existen etiquetas de fotos para su departamento,
                                                          por favor verificar con su jefe inmediato '
                                                          .$strMsgSoporteSistemas;
                }
            }
            else
            {
                $arrayResultado['etiquetasFotos']   = null;
                $arrayResultado['status']           = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']          = 'Problemas al obtener las etiquetas, ' .$strMsgSoporteSistemas;
            }

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
                                        'TecnicoWSController.getEtiquetasFotos',
                                        $ex->getMessage(),
                                        $arrayData['user'],
                                        "127.0.0.1");

            $arrayResultado['data']          = null;
            $arrayResultado['status']        = $this->status['ERROR'];
            $arrayResultado['mensaje']       = $ex->getMessage();
        }

        return $arrayResultado;
    }

    /**
     * Método que obtiene todos los parametros generales del Móvil
     *
     * @author Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.0 11-07-2019
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.1 24-01-2022 Se realizan modificaciones para agregar las cuadrillas con estado 'Prestado' y setear variables bind
     * 
     * @param array $arrayData
     * @return array $arrayResultado
     * 
     
     */
    private function getParametrosGeneralesMovil($arrayData)
    {
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $emGeneral->getConnection()->beginTransaction();
        $serviceUtil            = $this->get('schema.Util');
        $strMsgSoporteSistemas  = 'si el tema persiste por favor escalar una tarea a Soporte Sistemas. Asunto : Problemas con parámetros Móvil';
        try
        {

            $objAdmiParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'PARAMETROS_GENERALES_MOVIL',
                                'estado'            => 'Activo'
                                )
                        );

            $arrayParametro = array(
                                    'idParametroCab'        => $objAdmiParametroCab->getId()
                                    );

            $arrayReturn = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->getParametrosGeneralesMovil($arrayParametro);

            if($arrayReturn['status'] == 'OK')
            {
                if(count($arrayReturn['respuesta']) > 0)
                {
                    $arrayData   = array(
                        'idPersonaEmpresaRol'   => "",
                        'login'                 => $arrayData['user'],
                        'strEstadoActivo'       => 'Activo',
                        'strEsSatelite'         => 'S',
                        'strEstadoPrestado'     => 'Prestado'
                        );    
                    $objAdmiCuadrilla = $emComercial->getRepository('schemaBundle:AdmiCuadrilla')->getCuadrillaSatelitePersonEmpresRol($arrayData);
                    if (count($objAdmiCuadrilla['resultado']) > 0)
                    {
                      $arrayReturn['respuesta']['DIAS_BLOQUEO_BOBINA_DESPACHO'] = $arrayReturn['respuesta']['DIAS_BLOQUEO_BOBINA_DESPACHO_SATELITE'];
                    }
                    $arrayResultado['parametrosGenerales']  = $arrayReturn['respuesta'];
                    $arrayResultado['status']               = $this->status['OK'];
                    $arrayResultado['mensaje']              = $this->mensaje['OK'];
                }
                else
                {
                    $arrayResultado['parametrosGenerales']  = $arrayReturn['respuesta'];
                    $arrayResultado['status']               = 204;
                    $arrayResultado['mensaje']              = 'No existen parámetros para el uso del aplicativo '.$strMsgSoporteSistemas;
                }
            }
            else
            {
                $arrayResultado['parametrosGenerales']  = null;
                $arrayResultado['status']               = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']              = 'Problemas al obtener los parámetros, ' .$strMsgSoporteSistemas;
            }

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
                                        'TecnicoWSController.getParametrosGeneralesMovil',
                                        $ex->getMessage(),
                                        $arrayData['user'],
                                        "127.0.0.1");

            $arrayResultado['data']          = null;
            $arrayResultado['status']        = $this->status['ERROR'];
            $arrayResultado['mensaje']       = $ex->getMessage();
        }

        return $arrayResultado;
    }

    /**
     * Función que llama al services y envia los atributos necesarios
     * para poder crear una tarea con un documento adjunto.
     *
     * @author: Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 11-03-2019
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.1 02-06-2020 - Se modifica código para crear nueva estructura de archivos.
     *
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function putTareaDepartamentoDocadjunto($arrayData)
    {
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emSoporte              = $this->getDoctrine()->getManager("telconet_soporte");
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $emGeneral->getConnection()->beginTransaction();
        $strNombreParametro     = "PROCESO_TAREA_SUBJEFEDEPARTAMENTAL_GIS";
        $emFinan                = $this->getDoctrine()->getManager("telconet_financiero");
        $serviceUtil            = $this->get('schema.Util');
        $strCodigoPostal        = '593';
        $strOrigenAccion        = 'tareas';

        $strPrefijoEmpresa = $emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')->getPrefijoByCodigo($arrayData['data']['idEmpresa']);

        if(isset($arrayData['bandNfs']) && $arrayData['bandNfs'])
        {
            $strAplicacion = $arrayData['strFolderApplication'];
        }
        else
        {
            $arrayParametrosFilePath = array(
                                             'strCodigoPostal'       => $strCodigoPostal,
                                             'strPrefijoEmpresa'     => $strPrefijoEmpresa,
                                             'strFolderApplication'  => $arrayData['strFolderApplication'],
                                             'strController'         => 'Tecnico',
                                             'strOrigenAccion'       => $strOrigenAccion,
                                             'strExt'                => $arrayData['data']['extDocAdjunto']
                                            );

            $strRutaFisicaCompleta = $serviceUtil->createNewFilePath($arrayParametrosFilePath);
        }


        $objAdmiParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                            ->findOneBy(array(
                                                                'nombreParametro'   => $strNombreParametro,
                                                                'estado'            => 'Activo'
                                                                )
                                                        );

        $objAdmiParametroDet    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->findOneBy(array(
                                                                'parametroId'   => $objAdmiParametroCab->getId()
                                                                )
                                                        );
        try
        {
            $strLatitud            = $arrayData['data']['latitud'];
            $strLongitud           = $arrayData['data']['longitud'];
            $strValorParametro     = $arrayData['data']['valorParametro'];
            $strLoginCliente       = $arrayData['data']['loginCliente'];
            $strUsuario            = $arrayData['data']['usuario'];

            //Necesarios para la busqueda de para quien sera la tarea.
            $intIdDepartamento     = $arrayData['data']['idDepartamento'];
            $intDescripcionRol     = $arrayData['data']['rolDepartamental'];
            $intIdEmpresa          = $arrayData['data']['idEmpresa'];
            $strJurisdiccion       = $arrayData['data']['jurisdiccion'];
            $intFormaContacto      = $arrayData['data']['formaContacto'];
            $strNombreCliente      = $arrayData['data']['nombreCliente'];
            $objDocAdjunto         = $arrayData['data']['docAdjunto'];
            $strExtensionDoc       = $arrayData['data']['extDocAdjunto'];

            $strObservacion        = $arrayData['data']['observacion'];

            if($strValorParametro == 'VALOR2')
            {
                $strValorParametro = $objAdmiParametroDet->getValor2();
            }
            else
            {
                $strValorParametro = $objAdmiParametroDet->getValor3();
            }

            $objTarea           = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                        ->findOneBy(array('nombreTarea' => $strValorParametro));
            //Obtenemos el Id del punto del cliente por medio de su login.
            $objPuntoCliente    = $emComercial->getRepository('schemaBundle:InfoPunto')->findOneBy(array('login'=> $strLoginCliente));
            $intIdPunto         = $objPuntoCliente->getId();

            $arrayParametrosTarea = array(
                'objTarea'              => $objTarea,
                'latitud'               => $strLatitud,
                'longitud'              => $strLongitud,
                'observaciones'         => $strObservacion,
                'empresaCod'            => $intIdEmpresa,
                'ipCreacion'            => "127.0.0.1",
                'usrCreacion'           => $strUsuario,
                'intPuntoId'            => $intIdPunto,
                'idDepartamento'        => $intIdDepartamento,
                'rolDepartamental'      => $intDescripcionRol,
                'idEmpresa'             => $intIdEmpresa,
                'jurisdiccion'          => $strJurisdiccion,
                'formaContacto'         => $intFormaContacto,
                'loginCliente'          => $strLoginCliente,
                'nombreCliente'         => $strNombreCliente,
                'docAdjunto'            => $objDocAdjunto,
                'extDocAdjunto'         => $strExtensionDoc,
                'strRutaFisicaCompleta' => $strRutaFisicaCompleta,
                'strAplicacion'         => $strAplicacion,
                'bandNfs'               => $arrayData['bandNfs'],
                'prefijoEmpresa'        => $strPrefijoEmpresa,
                'strOrigenAccion'       => $strOrigenAccion
            );

            $serviceSoporte   = $this->get('soporte.SoporteService');
            $objRespuesta     = $serviceSoporte->crearTareaPorJurisdiccion($arrayParametrosTarea);

            if(isset($objRespuesta) && !empty($objRespuesta) && $objRespuesta['status']==="OK" &&  $objRespuesta['idDetalle'] != null)
            {
                $arrayResultado['data']     = array('idDetalle' => $objRespuesta['idDetalle'],
                                                    'idTarea'   => $objRespuesta['idTarea']);
                $arrayResultado['status']   = $this->status['OK'];
                $arrayResultado['mensaje']  = $this->mensaje['OK'];
            }
            else
            {
                $arrayResultado['data']     = null;
                $arrayResultado['status']   = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']  = $this->mensaje['CONSULTA'];
            }

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
            'TecnicoWSController.putTareaDepartamentoDocadjunto',
            $ex->getMessage(),
            $arrayData['user'],
            "127.0.0.1");

            $arrayResultado['data']         = null;
            $arrayResultado['status']       = $this->status['ERROR'];
            $arrayResultado['mensaje']      = $ex->getMessage();
        }

        return $arrayResultado;
    }

     /**
     * Función que obtiene las coordenadas de la caja donde se conecta el cliente
     * filtrada por el servicio.
     *
     * @author: Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 16-11-2018
     *
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function getCoordenadasCajaPorServicio($arrayData)
    {
        $emInfraestructura  = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial        = $this->getDoctrine()->getManager("telconet");

        $serviceUtil        = $this->get('schema.Util');
        try
        {
            $intIdServicio  = $arrayData['data']['idServicio'];
            $intIdEmpresa   = $arrayData['data']['idEmpresa'];

            $arrayParametros= array(
                'intIdServicio'=>$intIdServicio,
                'intIdEmpresa' =>$intIdEmpresa
            );

            $arrayResultadoParcial       = $emInfraestructura
                                            ->getRepository('schemaBundle:InfoServicioTecnico')
                                            ->getCoordenadasCajaPorServicio($arrayParametros);

            $arrayResultadoCajaAnterior  = $emComercial
                                            ->getRepository('schemaBundle:InfoServicioTecnico')
                                            ->getCoordenadasCajaAnteriorPorServicio($arrayParametros);

            if(isset($arrayResultadoParcial) && !empty($arrayResultadoParcial))
            {
                $arrayResultado['data']         = array(
                                                        'coordenadasCajaActual'     => $arrayResultadoParcial,
                                                        'coordenadasCajaAnterior'   => $arrayResultadoCajaAnterior
                                                    );
                $arrayResultado['status']       = $this->status['OK'];
                $arrayResultado['mensaje']      = $this->mensaje['OK'];
            }
            else
            {
                $arrayResultado['data']         = null;
                $arrayResultado['status']       = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']      = $this->mensaje['ERROR_PARCIAL'];
            }

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
                                        'TecnicoWSController.getCoordenadasCajaPorServicio',
                                        $ex->getMessage(),
                                        $arrayData['user'],
                                        "127.0.0.1");

            $arrayResultado['data']          = null;
            $arrayResultado['status']        = $this->status['ERROR'];
            $arrayResultado['mensaje']       = $ex->getMessage();
        }

        return $arrayResultado;
    }

   /**
     * Función que obtiene el registro de activos de custodio
     *
     * @author: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 05-12-2018
	 *
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function getActivosCustodio($arrayData)
    {
		$serviceUtil            = $this->get('schema.Util');
		$objInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $strMensaje             = "No se pudieron obtener los materiales!";
		$arrayResultado         = [];
		$arrayRespuesta         = [];
        try
        {
			$arrayRespuesta = $objInfoServicioTecnico->getActivosCustodio($arrayData['data']);
		}
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
                                        'TecnicoWSController.getActivosCustodio',
                                        $ex->getMessage(),
                                        $arrayData['user'],
                                        "127.0.0.1");

            if($ex->getMessage() == "NULL")
            {
                $arrayResultado['status']    = $this->status['NULL'];
                $arrayResultado['mensaje']   = $this->mensaje['NULL'];
            }
            else if($ex->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']    = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']   = $strMensaje;
            }
            else
            {
                $arrayResultado['status']    = $this->status['ERROR'];
                $arrayResultado['mensaje']   = $this->mensaje['ERROR'];
            }

            return $arrayResultado;
        }

		$arrayResultado['data']          = $arrayRespuesta;
		$arrayResultado['status']        = $this->status['OK'];
		$arrayResultado['mensaje']       = $this->mensaje['OK'];

        return $arrayResultado;
    }

    /**
     * Función que notifica las incidencias enviadas por ECUCERT
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 19/02/2019
     *
     * @param array $arrayData [
     *  user        - Usuario que solicita información del ticket
     *  ipCreación  - Ip del usuario
     *  noTicket    - Número de Ticket
     * ]
     *
     * @return array $arrayResponse[
     *  status         - Estado del procesamiento
     *  mensaje        - Mensaje que indica si se proceso correctamente o falta algún parámetro
     *  resultado      - Resultado de la consulta indicando el porcentaje de procesamiento
     * ]
     */

    public function getDatosProcesadosPorTicket($arrayData)
    {
        $emSoporte              = $this->getDoctrine()->getManager("telconet_soporte");
        $objServiceUtil         = $this->get('schema.Util');
        $strUsrCreacion         = $arrayData['user'];
        $strIpCreacion          = $arrayData['ipCreacion'];

        $strNumeroTicket        = $arrayData['data']['noTicket'];

        if(!isset($strNumeroTicket) || empty($strNumeroTicket))
        {
            return array (  'status'          => "204",
                            'strMensaje'      => "Falta Número de Ticket");
        }
        $arrayParametros        = array ('noTicket' => $strNumeroTicket);

        try
        {
            $arrayRespuesta     = $emSoporte->getRepository('schemaBundle:InfoIncidenciaCab')
                                            ->getRegistrosDatosPorTicket($arrayParametros);

            $arrayResponse      = array (  'status'         => "200",
                                           'mensaje'        => 'Ok',
                                           'resultado'      => $arrayRespuesta);

        }
        catch(\Exception $e)
        {
            $strRespuesta = " Error al procesar ticket .Favor Notificar a Sistemas";
            $objServiceUtil->insertError('Telcos+',
                                            'TecnicoWS.getDatosProcesadosPorTicket',
                                             'Error TecnicoWS.getDatosProcesadosPorTicket:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);
            $arrayResponse = array('mensaje' => $strRespuesta);
        }

        return $arrayResponse;
    }

    /**
     * Funcion que sirve para el consumo de un servicio MD el cual nos aportará información
     * necesaria de futuras posibles instalaciones de equipos AP para nuevos clientes. 
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 28/03/2022
     */

    public function getCalidadInstalacion($arrayData)
    {
        try
        {
            $objSoporteService = $this->get('soporte.SoporteService');
            $objServiceUtil    = $this->get('schema.Util');
            $strUsrCreacion    = $arrayData['user'];
            $strIpCreacion     = $arrayData['ipCreacion'];

            $arrayRespuesta     = $objSoporteService->getCalidadInstalacion($arrayData);
        }
        catch(\Exception $e)
        {
            $objServiceUtil->insertError('Telcos+',
                                            'TecnicoWS.getCalidadInstalacion',
                                             'Error TecnicoWS.getCalidadInstalacion:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);
        }

        return $arrayRespuesta;
    }

    /**
     * Función que obtiene los datos del ticket de ECUCERT en telcos
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 03/05/2020
     *
     * @param array $arrayData [
     *  user        - Usuario que solicita información del ticket
     *  ipCreación  - Ip del usuario
     *  noTicket    - Número de Ticket
     * ]
     *
     * @return array $arrayResponse[
     *  status         - Estado del proceso
     *  mensaje        - Mensaje que indica si se proceso correctamente o falta algún parámetro
     *  resultado      - Resultado de la consulta indicando los datos de ECUCERT
     * ]
     */
    public function getDatosTicketECUCERT($arrayData)
    {
        $emSoporte              = $this->getDoctrine()->getManager("telconet_soporte");
        $objServiceUtil         = $this->get('schema.Util');
        $strUsrCreacion         = $arrayData['user'];
        $strIpCreacion          = $arrayData['ipCreacion'];

        $strNumeroTicket        = $arrayData['data']['noTicket'];

        if(!isset($strNumeroTicket) || empty($strNumeroTicket))
        {
            return array (  'status'          => "204",
                            'strMensaje'      => "Falta Número de Ticket");
        }
        $arrayParametros        = array ('strNoTicket' => $strNumeroTicket);

        try
        {
            $arrayIncidencias   = $emSoporte->getRepository('schemaBundle:InfoIncidenciaCab')
                                            ->getTodosLosRegistrosPorEmpresa($arrayParametros);

            foreach($arrayIncidencias as $incidencias)
            {
                $arrayRespuesta[] = array(  'idRegistro'             => $incidencias['idDetalleIncidencia'],
                                            'noTicket'               => $incidencias['noTicket'],
                                            'nombreEmpresa'          => $incidencias['nombreEmpresa'],
                                            'jurisdiccion'           => $incidencias['jurisdiccion'],
                                            'tipoEvento'             => $incidencias['tipoEvento'],
                                            'ipAddress'              => $incidencias['ipAddress'],
                                            'ipwan'                  => $incidencias['ipwan'],
                                            'ipDestino'              => $incidencias['ipDestino'],
                                            'puerto'                 => $incidencias['puerto'],
                                            'tipoUsuario'            => $incidencias['tipoUsuario'],
                                            'loginCliente'           => $incidencias['loginCliente'],
                                            'loginAdicional'         => $incidencias['loginAdicional'],
                                            'categoria'              => $incidencias['categoria'],
                                            'subCategoria'           => $incidencias['subCategoria'],
                                            'subEstado'              => $incidencias['subEstado'],
                                            'numeroCaso'             => $incidencias['numeroCaso'],
                                            'numeroTarea'            => $incidencias['idComunicacion'],
                                            'nombretarea'            => $incidencias['nombretarea'],
                                            'estadoCaso'             => $incidencias['estadoCaso'],
                                            'estadoTarea'            => $incidencias['estadoTarea'],
                                            'estadoIp'               => $incidencias['estadoIncidencia'],
                                            'estadoGestion'          => $incidencias['estadoIncEcucert'],
                                            'prioridad'              => $incidencias['prioridad'],
                                            'feTicket'               => $incidencias['feIncidencia'],
                                            'feIncidencia'           => $incidencias['fechaIpReportada'],
                                            'estadoNotificacion'     => $incidencias['estadoNotificacion'] );
            }

            $arrayResponse      = array (  'status'         => "200",
                                           'mensaje'        => 'Ok',
                                           'resultado'      => $arrayRespuesta);

        }
        catch(\Exception $e)
        {
            $strRespuesta = " Error al procesar ticket .Favor Notificar a Sistemas";
            $objServiceUtil->insertError('Telcos+',
                                            'TecnicoWS.getDatosTicketECUCERT',
                                             'Error TecnicoWS.getDatosTicketECUCERT:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);
            $arrayResponse = array('mensaje' => $strRespuesta);
        }

        return $arrayResponse;
    }


    /**
     * Función que notifica las incidencias enviadas por ECUCERT
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 19/02/2019
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.1 11/08/2019 - Se agrega a la plantilla el nombre del cliente y la fecha de la incidencia
     * @since 1.0
     *
     * @param array $arrayData [
     *  user                        - Usuario que solicita la notificación
     *  ipCreación                  - Ip del usuario
     *  codPlantilla                - Código de la plantilla
     *  idCaso                      - Id del caso
     *  idPersonaEmpresaRol         - Id Persona empresa rol de la persona a notificar
     *  estado                      - Estado de la persona
     *  intIdPunto                  - Id del punto de la persona
     *  strDescFormContact          - Forma de contacto (Correo Electronico)
     *  strContacto                 - Tipo de contacto (Contacto Tecnico)
     *  strEstadoNotificacionIn     - Estado de la notificación (No Notificado)
     *  strEstadoNotificacionEn     - Estado de la notificación (Notificado)
     *  asunto                      - Asunto del correo
     *  idEmpresa                   - Id empresa
     *  strLoginAfectado            - Login del cliente
     *  intIncidenciaDetId          - Id del detalle de la incidencia
     *  ip                          - Ip de la incidencia
     *  puerto                      - puerto de incidencia
     *  ipDestino                   - Ip de destino de la incidencia
     *  ticket                      - Número del ticket de la incidencia
     * ]
     *
     * @return array $arrayResponse[
     *  mensaje                     - Mensaje que indica si se envió o no el correo
     * ]
     */
    public function putNotificarClienteEcucert($arrayData)
    {
        $emSoporte                  = $this->getDoctrine()->getManager("telconet_soporte");
        $objSoporteService          = $this->get('soporte.SoporteService');
        $objServiceUtil             = $this->get('schema.Util');
        $strUsrCreacion             = $arrayData['user'];
        $strIpCreacion              = $arrayData['ipCreacion'];
        $strTipoCaso                = "";
        try
        {
            $strCodPlantilla      = $arrayData['data']['codPlantilla'];
            $objInfoCaso          = $emSoporte->getRepository('schemaBundle:InfoCaso')->findOneById($arrayData['data']['idCaso']);
            if(isset($objInfoCaso) && !empty($objInfoCaso))
            {
                $strTipoCaso = $objInfoCaso->getTipoCasoId()->getNombreTipoCaso();
            }
            $arrayParametrosEnvio =   array('idPersonaEmpresaRol'         => $arrayData['data']['idPersonaEmpresaRol'],
                                            'estado'                      => $arrayData['data']['estado'],
                                            'intIdPunto'                  => $arrayData['data']['intIdPunto'],
                                            'strDescFormContact'          => $arrayData['data']['strDescFormContact'],
                                            'strContacto'                 => $arrayData['data']['strContacto'],
                                            'strEstadoNotificacionIn'     => $arrayData['data']['strEstadoNotificacionIn'],
                                            'strEstadoNotificacionEn'     => $arrayData['data']['strEstadoNotificacionEn'],
                                            'asunto'                      => $arrayData['data']['asunto'],
                                            'codPlantilla'                => $strCodPlantilla,
                                            'idCaso'                      => $arrayData['data']['idCaso'],
                                            'empresa'                     => $arrayData['data']['idEmpresa'],
                                            'idEmpresa'                   => $arrayData['data']['idEmpresa'],
                                            'strLoginAfectado'            => $arrayData['data']['strLoginAfectado'],
                                            'tipoCaso'                    => $strTipoCaso,
                                            'caso'                        => $objInfoCaso,
                                            'strUsrCreacion'              => $arrayData['user'],
                                            'strIpCreacion'               => $arrayData['ipCreacion'],
                                            'intIncidenciaDetId'          => $arrayData['data']['intIncidenciaDetId'],
                                            'login'                       => $arrayData['data']['strLoginAfectado'],
                                            'ip'                          => $arrayData['data']['ip'],
                                            'puerto'                      => $arrayData['data']['puerto'],
                                            'ipDestino'                   => $arrayData['data']['ipDestino'],
                                            'ticket'                      => $arrayData['data']['ticket'],
                                            'nombreCliente'               => $arrayData['data']['nombreCliente'],
                                            'timestamp'                   => $arrayData['data']['feIncidencia']
                                        );
            if(!empty($strCodPlantilla))
            {
                $arrayRespuestaNotif    = $objSoporteService->enviarPlantillaECUCERT($arrayParametrosEnvio);
                $strMensajeNotificacion = $arrayRespuestaNotif['strMensaje'];
                $strStatus              = $arrayRespuestaNotif['strStatus'];

                if(isset($strStatus) && !empty($strStatus) && $strStatus === '200')
                {
                    $arrayParametrosGest    = array('intIncidenciaDetId' => $arrayData['data']['intIncidenciaDetId'],
                                                'strEstado'          => 'Analisis',
                                                'strUsrMod'          => $strUsrCreacion,
                                                'strIpMod'           => $strIpCreacion);

                    $objSoporteService->modificarEstadoGestIncEcucert($arrayParametrosGest);
                }
            }
            else
            {
                $strMensajeNotificacion = "No se encontró la plantilla";
            }
            $arrayRespuestaTotal = array('mensaje' => $strMensajeNotificacion);
        }
        catch(\Exception $e)
        {
            $strRespuesta = " Error al notificar al cliente .Favor Notificar a Sistemas";
            $objServiceUtil->insertError('Telcos+',
                                            'TecnicoWS.putNotificarClienteEcucert',
                                             'Error TecnicoWS.putNotificarClienteEcucert:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);
            $arrayRespuestaTotal = array('mensaje' => $strRespuesta);
        }

        return $arrayRespuestaTotal;
    }


    /**
     * Función que guarda las incidencias enviadas por ECUCERT
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 19/02/2019
     *
     * @param array $arrayData [
     *   user           - Usuario que solicita guardar la incidencia
     *   originID       - Ip que solicita guardar la incidencia
     *   count          - Número de registros de la incidencia
     *   noTicket       - Número del ticket de la incidencia
     *   feTicket       - Fecha del ticket de la incidencia
     *   categoria      - Categoria de la incidencia
     *   subCategoria   - SubCategoria de la incidencia
     *   prioridad      - Prioridad de la incidencia
     *   subject        - Asunto del correo de ECUCERT
     *   tipoEvento     - Tipo de evento de la incidencia
     * ]
     *
     * @return array $arrayResultado[
     *   mensaje'       => Mensaje general del proceso
     *   respuesta'     => Mensaje del detalle de lo que paso en el proceso
     *   status'        => Estado de procesamiento
     *   usrCreacion'   => Usuario que solicita el procesamiento
     *   feCreacion'    => Fecha de creación del proceso
     * ]
     *
     */
    public function putIngresarIncidencia($arrayData)
    {
        $objSoporteService          = $this->get('soporte.SoporteService');
        $emSoporte                  = $this->getDoctrine()->getManager("telconet_soporte");
        $emGeneral                  = $this->getDoctrine()->getManager("telconet_general");
        $objServiceUtil             = $this->get('schema.Util');
        $strUsrCreacion             = $arrayData['user'];
        $strIpCreacion              = $arrayData['source']['originID'];
        $strNumeroRegis             = $arrayData['data']['count'];
        $strNoTicket                = $arrayData['data']['noTicket'];
        $strFeIncidencia            = $arrayData['data']['feTicket'];
        $strCategoria               = $arrayData['data']['categoria'];
        $strSubCategoria            = $arrayData['data']['subCategoria'];
        $strPrioridad               = $arrayData['data']['prioridad'];
        $strSubject                 = $arrayData['data']['subject'];
        $strTipoEvento              = $arrayData['data']['tipoEvento'];
        $strFechaActual             = date('d/m/Y h:m:s');
        $strWSEstado                = "";
        $arrayRespuestaTotal        = array();

        $strEstado                  = "Activo";
        $strDescripcionEstadoInc    = "ACTIVAR WEBSERVICES GUARDAR INCIDENCIA";
        $arrayParamEcucert          = array(
                                        'nombreParametro' => "PARAMETROS_ECUCERT",
                                        'estado'          => $strEstado
                                    );

        $entityParametroCab         = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneByNombreParametro($arrayParamEcucert);

        $intIdParametrosECU = 0;
        if( isset($entityParametroCab) && !empty($entityParametroCab) )
        {
            $intIdParametrosECU = $entityParametroCab->getId();
        }

        $arrayParametrosDet  = array(
                                    'estado'      => $strEstado,
                                    'parametroId' => $intIdParametrosECU,
                                    'descripcion' => $strDescripcionEstadoInc
                                );

        $objParametroDetWSEstado = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findOneBy($arrayParametrosDet);

        if( isset($objParametroDetWSEstado) && !empty($objParametroDetWSEstado) )
        {
            $strWSEstado      = $objParametroDetWSEstado->getValor1() ? $objParametroDetWSEstado->getValor1() : '';
        }

        if(!isset($strWSEstado) || empty($strWSEstado) || $strWSEstado!='SI')
        {
            $arrayRespuestaTotal =  array ( 'status'          => "ERROR",
                                            'strMensaje'      => "WS Inactivo");
        }

        if(!isset($strNoTicket) || empty($strNoTicket))
        {
            $arrayRespuestaTotal =  array (  'status'          => "ERROR",
                                             'strMensaje'      => "Falta No Ticket");
        }

        if(!isset($strFeIncidencia) || empty($strFeIncidencia))
        {
            $arrayRespuestaTotal =  array ( 'status'          => "ERROR",
                                            'strMensaje'      => "Falta Fecha de Ticket");
        }

        if(!isset($strCategoria) || empty($strCategoria))
        {
            $arrayRespuestaTotal =  array (  'status'          => "ERROR",
                                             'strMensaje'      => "Falta Categoria");
        }

        if(!isset($strSubCategoria))
        {
            $arrayRespuestaTotal = array (  'status'          => "ERROR",
                                            'strMensaje'      => "Falta SubCategoria");
        }

        if(!isset($strPrioridad)  || empty($strPrioridad))
        {
            $arrayRespuestaTotal = array (  'status'          => "ERROR",
                                            'strMensaje'      => "Falta Prioridad");
        }

        if(!isset($strSubject)  || empty($strSubject))
        {
            $arrayRespuestaTotal = array (  'status'          => "ERROR",
                                            'strMensaje'      => "Falta Subject");
        }

        if(!isset($strTipoEvento) || empty($strTipoEvento))
        {
            $arrayRespuestaTotal = array (  'status'          => "ERROR",
                                            'strMensaje'      => "Falta Tipo de Evento");
        }

        if(!isset($strNumeroRegis) || empty($strNumeroRegis))
        {
            $arrayRespuestaTotal = array (  'status'          => "ERROR",
                                            'strMensaje'      => "Falta el número de registros");
        }

        if(!empty($arrayRespuestaTotal))
        {
            return $arrayRespuestaTotal;
        }

        try
        {
            $arrayParametros        = array('arrayJsonEcucert'  => $arrayData,
                                            'strUsrCreacion'    => $strUsrCreacion,
                                            'strNumeroRegis'    => $strNumeroRegis,
                                            'strIpCreacion'     => $strIpCreacion);

            $objIncidenciaTicket    = $emSoporte->getRepository('schemaBundle:InfoIncidenciaCab')
                                                ->findOneByNoTicket($strNoTicket);

            if(!empty($objIncidenciaTicket))
            {
                $arrayRespuestaTotal= array('mensaje'       => "PROCESO FALLIDO",
                                            'respuesta'     => "EL TICKET YA ESTA INGRESADO",
                                            'status'        => "205",
                                            'usrCreacion'   => $strUsrCreacion,
                                            'feCreacion'    => $strFechaActual);
            }
            else
            {
                $arrayRespuesta     = $objSoporteService->guardarJsonIncidenciaEcucert($arrayParametros);
                $arrayRespuestaTotal= array('mensaje'        => $arrayRespuesta['strMensaje'],
                                            'respuesta'      => $arrayRespuesta['strRespuesta'],
                                            'status'         => $arrayRespuesta['strStatus'],
                                            'usrCreacion'    => $strUsrCreacion,
                                            'feCreacion'     => $strFechaActual);
            }

        }
        catch(\Exception $e)
        {
            $strRespuesta = " Error al procesar la incidencia. Favor Notificar a Sistemas";
            $objServiceUtil->insertError('Telcos+',
                                            'SoporteWS.putIngresarIncidencia',
                                             'Error SoporteWS.putIngresarIncidencia:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);

            $arrayRespuestaTotal= array('mensaje'       => $strRespuesta,
                                        'respuesta'     => 'PROCESO FALLIDO',
                                        'status'        => '500',
                                        'usrCreacion'   => $strUsrCreacion,
                                        'feCreacion'    => $strFechaActual);

            return $arrayRespuestaTotal;
        }

        return $arrayRespuestaTotal;
    }



    /**
     * Función que reenvía el número de Ticket a ECUCERT
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 19/03/2020
     *
     * @param array $arrayData [
     *   user           - Usuario que solicita guardar la incidencia
     *   originID       - Ip que solicita guardar la incidencia
     *   noTicket       - Número del ticket de la incidencia
     * ]
     *
     * @return array $arrayResultado[
     *   mensaje'       => Mensaje general del proceso
     *   respuesta'     => Mensaje del detalle de lo que paso en el proceso
     *   status'        => Estado de procesamiento
     *   usrCreacion'   => Usuario que solicita el procesamiento
     *   feCreacion'    => Fecha de creación del proceso
     * ]
     *
     */
    public function putReenviarTicketEcucert($arrayData)
    {
        $objSoporteService          = $this->get('soporte.SoporteService');
        $emSoporte                  = $this->getDoctrine()->getManager("telconet_soporte");
        $objServiceUtil             = $this->get('schema.Util');
        $strUsrCreacion             = $arrayData['user'];
        $strIpCreacion              = $arrayData['source']['originID'];
        $strNoTicket                = $arrayData['data']['noTicket'];
        $arrayRespuestaTotal        = array();

        if(!isset($strNoTicket) || empty($strNoTicket))
        {
            $arrayRespuestaTotal =  array (  'status'          => "ERROR",
                                             'strMensaje'      => "Falta No Ticket");
        }

        if(!empty($arrayRespuestaTotal))
        {
            return $arrayRespuestaTotal;
        }

        try
        {
            $arrayParametros        = array('strNoTicket'       => $strNoTicket,
                                            'strUsrCreacion'    => $strUsrCreacion,
                                            'strIpCreacion'     => $strIpCreacion);

            $objIncidenciaTicket    = $emSoporte->getRepository('schemaBundle:InfoIncidenciaCab')
                                                ->findOneByNoTicket($strNoTicket);

            if(!empty($objIncidenciaTicket))
            {
                $arrayRespuesta     = $objSoporteService->reenvioTicketEcucert($arrayParametros);
                $arrayRespuestaTotal= array('mensaje'        => $arrayRespuesta['strMensaje'],
                                            'respuesta'      => $arrayRespuesta['strRespuesta'],
                                            'status'         => $arrayRespuesta['strStatus'],
                                            'usrCreacion'    => $strUsrCreacion,
                                            'feCreacion'     => $strFechaActual);
            }
            else
            {
                $arrayRespuestaTotal= array('mensaje'       => "PROCESO FALLIDO",
                                            'respuesta'     => "EL TICKET NO EXISTE",
                                            'status'        => "205",
                                            'usrCreacion'   => $strUsrCreacion,
                                            'feCreacion'    => $strFechaActual);
            }

        }
        catch(\Exception $e)
        {
            $strRespuesta = " Error al procesar la incidencia. Favor Notificar a Sistemas";
            $objServiceUtil->insertError('Telcos+',
                                            'SoporteWS.putReenviarTicketEcucert',
                                             'Error SoporteWS.putReenviarTicketEcucert:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);

            $arrayRespuestaTotal= array('mensaje'       => $strRespuesta,
                                        'respuesta'     => 'PROCESO FALLIDO',
                                        'status'        => '500',
                                        'usrCreacion'   => $strUsrCreacion,
                                        'feCreacion'    => $strFechaActual);

            return $arrayRespuestaTotal;
        }

        return $arrayRespuestaTotal;
    }

    /**
     * Función que cierra el caso o la tarea en base
     * a número de Ticket a ECUCERT
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 30/03/2020
     *
     * @param array $arrayData [
     *   user           - Usuario que solicita guardar la incidencia
     *   originID       - Ip que solicita guardar la incidencia
     *   noTicket       - Número del ticket de la incidencia
     * ]
     *
     * @return array $arrayResultado[
     *   mensaje'       => Mensaje general del proceso
     *   respuesta'     => Mensaje del detalle de lo que paso en el proceso
     *   status'        => Estado de procesamiento
     *   usrCreacion'   => Usuario que solicita el procesamiento
     *   feCreacion'    => Fecha de creación del proceso
     * ]
     *
     */
    public function putCerrarCasoTareaEcucert($arrayData)
    {
        $objSoporteService          = $this->get('soporte.SoporteService');
        $emSoporte                  = $this->getDoctrine()->getManager("telconet_soporte");
        $objServiceUtil             = $this->get('schema.Util');
        $strUsrCreacion             = $arrayData['user'];
        $strIpCreacion              = $arrayData['source']['originID'];
        $strNoTicket                = $arrayData['data']['noTicket'];
        $arrayRespuestaTotal        = array();

        if(!isset($strNoTicket) || empty($strNoTicket))
        {
            $arrayRespuestaTotal =  array (  'status'          => "ERROR",
                                             'strMensaje'      => "Falta No Ticket");
        }

        if(!empty($arrayRespuestaTotal))
        {
            return $arrayRespuestaTotal;
        }

        try
        {
            $arrayParametros        = array('strNoTicket'       => $strNoTicket,
                                            'strUsrCreacion'    => $strUsrCreacion,
                                            'strIpCreacion'     => $strIpCreacion);

            $objIncidenciaTicket    = $emSoporte->getRepository('schemaBundle:InfoIncidenciaCab')
                                                ->findOneByNoTicket($strNoTicket);

            if(!empty($objIncidenciaTicket))
            {
                $arrayRespuesta     = $objSoporteService->cerrarCasoTareaEcucert($arrayParametros);
                $arrayRespuestaTotal= array('mensaje'        => $arrayRespuesta['strMensaje'],
                                            'respuesta'      => $arrayRespuesta['strRespuesta'],
                                            'status'         => $arrayRespuesta['strStatus'],
                                            'usrCreacion'    => $strUsrCreacion,
                                            'feCreacion'     => $strFechaActual);
            }
            else
            {
                $arrayRespuestaTotal= array('mensaje'       => "PROCESO FALLIDO",
                                            'respuesta'     => "EL TICKET NO EXISTE",
                                            'status'        => "205",
                                            'usrCreacion'   => $strUsrCreacion,
                                            'feCreacion'    => $strFechaActual);
            }

        }
        catch(\Exception $e)
        {
            $strRespuesta = " Error al procesar la incidencia. Favor Notificar a Sistemas";
            $objServiceUtil->insertError('Telcos+',
                                            'SoporteWS.putCerrarCasoTareaEcucert',
                                             'Error SoporteWS.putCerrarCasoTareaEcucert:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);

            $arrayRespuestaTotal= array('mensaje'       => $strRespuesta,
                                        'respuesta'     => 'PROCESO FALLIDO',
                                        'status'        => '500',
                                        'usrCreacion'   => $strUsrCreacion,
                                        'feCreacion'    => $strFechaActual);

            return $arrayRespuestaTotal;
        }

        return $arrayRespuestaTotal;
    }

    /** activarNetvoiceMd
     * activar el servicio de telefonía de netvoice para la empresa megadatos
     *
     * @param array $arrayData
     * @return array $arrayRespuesta
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 19-12-2018
     * 
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 16-06-2021
     * Se corrije variable en el catch y se inserta el error en la tabla info_log. 
     * 
     */

    public function activarNetvoiceMd($arrayData)
    {
        
        $serviceUtil            = $this->get('schema.Util');
        $serviceTelefonia       = $this->get('tecnico.InfoTelefonia');
        $intEmpresa             = $arrayData['data']['codEmpresa'];
        $strPrefijoEmpresa      = $arrayData['data']['prefijoEmpresa'];
        $intServicio            = $arrayData['data']['idServicio'];
        $strUser                = $arrayData['user'];
        $strIpCreacion          = $arrayData['ipCreacion'];
        
        try
        {
            
            $arrayResult = $serviceTelefonia->activarLineasTelefonicas(array(   'intIdServicio'     => $intServicio,   
                                                                                'strUser'           => $strUser,
                                                                                'strIpClient'       => $strIpCreacion ,
                                                                                'strPrefijoEmpresa' => $strPrefijoEmpresa,
                                                                                'intCodEmpresa'     => $intEmpresa));

            if($arrayResult['status'] != 'OK')
            {
                throw new \Exception('Error '.$arrayResult['mensaje']);
            }

            $arrayRespuesta = array('status' => 'OK', 'mensaje' => 'OK');
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'Ocurrio un error: \n ' . $ex->getMessage());
            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresa,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'descriptionError' => $ex->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUser));
            
            return $arrayRespuesta;
        }

        return $arrayRespuesta;
    }

    /**
     * Función que realiza la llamada al método 'cambiarPlan', para realizar
     * el upgrade de plan(cambio de velocidad) de un cliente.
     *
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.0 13-06-2019
     * 
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 1.1 23-05-2023 Invocacion a la funcion que permite crear adendum por cambio de plan.
     */
    public function cambioDePlan($arrayData)
    {
        $arrayParametros  = array();
        $arrayParametros['intIdServicio']            = $arrayData['data']['idServicio'];
        $arrayParametros['intIdPlanNuevo']           = $arrayData['data']['idPlanNuevo'];
        $arrayParametros['strLogin']                 = $arrayData['data']['login'];
        $arrayParametros['strIdentificacionCliente'] = $arrayData['data']['identificacionCliente'];
        $arrayParametros['intIdEmpresa']             = $arrayData['data']['idEmpresa'];
        $arrayParametros['strPrefijoEmpresa']        = $arrayData['data']['prefijoEmpresa'];
        $arrayParametros['strUsrCreacion']           = $arrayData['data']['usrCreacion'];
        $arrayParametros['strIpCreacion']            = $arrayData['data']['ipCreacion'];
        $arrayParametros['strEstadoProd']            = 'Activo';
        $serviceUtil                                 = $this->get('schema.Util');

        /* @var $serviceInfoServicio \telconet\comercialBundle\Service\InfoServicioService */
        $serviceInfoServicio  = $this->get('comercial.InfoServicio');
        $arrayCapacidadesPlan = $serviceInfoServicio->obtenerCapacidadesPlan($arrayParametros);
        if($arrayCapacidadesPlan)
        {
            $arrayValorPlanActual = $serviceInfoServicio->obtenerValorPlanActual($arrayParametros);

            $arrayValorPlanNuevo  = $serviceInfoServicio->obtenerValorPlanNuevo($arrayParametros);

            if($arrayValorPlanNuevo[0]['valor_plan'] > 0)
            {
                if($arrayValorPlanActual)
                {
                    $arrayPeticiones = array(
                                    'idEmpresa'          => $arrayParametros['intIdEmpresa'],
                                    'intIdDepartamento'  => "0",
                                    'prefijoEmpresa'     => $arrayParametros['strPrefijoEmpresa'],
                                    'idServicio'         => $arrayParametros['intIdServicio'],
                                    'planId'             => $arrayParametros['intIdPlanNuevo'],
                                    'precioNuevo'        => 0,
                                    'precioViejo'        => $arrayValorPlanNuevo[0]['valor_plan'],
                                    'capacidad1'         => $arrayCapacidadesPlan[0]['valor'],
                                    'capacidad2'         => $arrayCapacidadesPlan[1]['valor'],
                                    'capacidad1Actual'   => "0",
                                    'capacidad2Actual'   => "0",
                                    'usrCreacion'        => $arrayParametros['strUsrCreacion'],
                                    'ipCreacion'         => $arrayParametros['strIpCreacion'],
                                    'intIdPersonaEmpRol' => $arrayValorPlanActual[0]['id_persona_rol'],
                                    'intIdOficina'       => $arrayValorPlanActual[0]['oficina_id'],
                                    'velocidadNueva'     => "",
                                    'velocidadAnterior'  => "",
                                    'esIsb'              => "",
                                    'precioNuevoIp'      => "",
                                    "strEjecucionWs"     => "SI"
                                  );

                    /* @var $cambioPlan InfoCambiarPlan */
                    $cambioPlan = $this->get('tecnico.InfoCambiarPlan');
                    $intPlanIdViejo = $cambioPlan->getPlanActualServicio($arrayParametros['intIdServicio'])->getId();
                    //*----------------------------------------------------------------------*/
                    $arrayCambioPlan = $cambioPlan->cambiarPlan($arrayPeticiones);
                    
                    if($arrayCambioPlan['status']!= "OK")
                    {
                        $arrayResponse = $arrayCambioPlan;
                    }
                    else
                    {
                        $arrayNotificacionCambioPlan = array('strCodigoMens'  => '',
                                                     'strIdTipoPromoMens' => '',
                                                     'intIdServicio'      => $arrayParametros['intIdServicio'],
                                                     'intIdEmpresa'       => $arrayParametros['intIdEmpresa'],
                                                     'precioViejo'        => $arrayValorPlanNuevo[0]['valor_plan'],
                                                     'planId'             => $arrayParametros['intIdPlanNuevo'],
                                                     'planIdViejo'        => $intPlanIdViejo,
                                                     'strPrefijoEmpresa'  => $arrayParametros['strPrefijoEmpresa']
                                                    );
                        $arrayNotificacionCP = $cambioPlan->enviarNotificacionCambioPlan($arrayNotificacionCambioPlan);
                        $serviceUtil->insertError( 'Telcos+',
                                        'TecnicoWSController->cambioDePlan()',
                                        'Respuesta: '.json_encode($arrayNotificacionCP),
                                        $arrayParametros['strUsrCreacion'],
                                        $arrayParametros['strIpCreacion']);
                        $arrayResponse['cambioPlan'] = $arrayCambioPlan;
                    }
                }
                else
                {
                    $arrayResponse['status']  = "ERROR";
                    $arrayResponse['mensaje'] = "No se pudo obtener valor del plan actual.";
                }
            }
            else
            {
                $arrayResponse['status']  = "ERROR";
                $arrayResponse['mensaje'] = "El valor del plan debe ser mayor a 0.";
            }
        }
        else
        {
            $arrayResponse['status']  = "ERROR";
            $arrayResponse['mensaje'] = "No se pudo obtener capacidades de plan.";
        }

        return $arrayResponse;
    }

    /**
     * Función que obtiene constantes parametrizadas en base de datos.
     * Obtiene el tiempo de espera de una activación TN por parte de IPCCL2 y
     * los tipos de equipos utilizados por última milla en una tarea.
     *
     * @author Ronny Morán Ch. <rmoranc@telconet.ec>
     * @version 1.0 09-07-2019
     *
     *
     * @param array $arrayData[
     *                         'user'    : string :  Usuario de creación]
     *
     * @return array $arrayRespuesta['status'   : string :  Codigo de respuesta del consumo,
     *                               'mensaje'  : string :  Mensaje de respuesta
     *                               'data'     : array  :  Parámetros]
     */
    private function getParametrosOperaciones($arrayData)
    {
        $arrayRespuesta = array();
        try
        {
            $strUsuario             =  $arrayData['user'];
            $strTiempoIpccl         =  "TIEMPO_ACTIVACION_TN_IPCCL2";
            $strEquiposUm           =  "EQUIPOS_ULTIMA_MILLA";
            $strEstado              =  "Activo";
            $emGeneral              =  $this->getDoctrine()->getManager("telconet_general");
            $serviceUtil            =  $this->get('schema.Util');
            $emGeneral->getConnection()->beginTransaction();

            $objCabTiempoIpccl    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                ->findOneBy(array(
                                                                    'nombreParametro'   => $strTiempoIpccl,
                                                                    'estado'            => $strEstado
                                                                  )
                                                            );

            $objDetTiempoIpccl    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->findOneBy(array(
                                                                    'parametroId'   => $objCabTiempoIpccl->getId()
                                                                  )
                                                            );

            $objCabEquiposUm    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                ->findOneBy(array(
                                                                    'nombreParametro'   => $strEquiposUm,
                                                                    'estado'            => $strEstado
                                                                  )
                                                            );

            $objDetEquiposUm    = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->findBy(array(
                                                                    'parametroId'   => $objCabEquiposUm->getId()
                                                                  )
                                                            );
            foreach($objDetEquiposUm as $objParametro )
            {
                switch($objParametro->getDescripcion())
                {
                    case 'FO':
                        $arrayTiposUm[] = array('strFo' => $objParametro->getValor1());
                        break;
                    case 'RA':
                        $arrayTiposUm[] = array('strRa' => $objParametro->getValor1());
                        break;
                    case 'UTP':
                        $arrayTiposUm[] = array('strUtp' => $objParametro->getValor1());
                        break;
                    case 'SAT':
                        $arrayTiposUm[] = array('strSat' => $objParametro->getValor1());
                        break;
                    default:
                        break;
                }
            }

            $arrayFinal = array(
                                    'strTiempoIpccl'       =>$objDetTiempoIpccl->getValor1(),
                                    'arrayEquiposUm'       =>$arrayTiposUm
                                    );

            $strMensaje                     = "Parámetros obtenidos!";
            $arrayRespuesta['status']       = $this->status['OK'];
            $arrayRespuesta['mensaje']      = $strMensaje;
            $arrayRespuesta['data']         = $arrayFinal;
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->getParametrosOperaciones()',
                                       'Error al obtener los parámetros: '.$ex->getMessage(),
                                       $strUsuario,
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al obtener la información, favor notificar a sistemas.";
            $arrayRespuesta['data']    = "";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que nos devuelve si una tarea tiene
     * la caracteristica de crear KML.
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 23-11-2020
     */
    private function getPermisosKml($arrayData)
    {
        $arrayRespuesta = array();
        $strMensajeValidacion = '';
        try
        {
            $strUsuario             =  $arrayData['user'];
            $emGeneral              =  $this->getDoctrine()->getManager("telconet_general");
            $emSoporte              =  $this->getDoctrine()->getManager("telconet_soporte");
            $serviceUtil            =  $this->get('schema.Util');
            $emSoporte->getConnection()->beginTransaction();

            $objParametroCab        = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                  ->findOneBy(array("nombreParametro" =>'CONF_ERRORES_GENERALES_TMO',
                                                                    "estado"          => "Activo"));
            if(is_object($objParametroCab))
            {
                $objParametroDet   = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findOneBy(array("parametroId"    =>$objParametroCab->getId(),
                                                                        "estado"         => "Activo"));
                if($objParametroDet)
                {
                    $strMensajeValidacion = $objParametroDet->getValor2();
                }
            }
            $strPermisoKml = $emSoporte ->getRepository('schemaBundle:InfoDetalle')
                                        ->validarCaracteristicaIdDetalle($arrayData['data']);

            $arrayRespuesta['status']       = $this->status['OK'];
            $arrayRespuesta['mensaje']      = "Consulta Exitosa";
            $arrayRespuesta['data']         = array('permisoKml' => $strPermisoKml);
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->getParametrosOperaciones()',
                                       'Error al obtener los parámetros: '.$ex->getMessage(),
                                       $strUsuario,
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = $strMensajeValidacion;
            $arrayRespuesta['data']    = array();
        }
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene las categorias de fotos para su posterior comparación
     *
     * @author: Jean Nazareno <jnazareno@telconet.ec>
     * @version 1.0 29-10-2019
     * 
     * @author: Jeampier  Carriel <jacarriel@telconet.ec>
     * @version 1.1 20-03-2023 - Se agrega empresa EN para obtener los elementos a comparar permitidos.
     *
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function getCategoriasFotosPorComparar($arrayData)
    {
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $serviceUtil            = $this->get('schema.Util');
        $strMsgSoporteSistemas  = 'si el tema persiste por favor escalar una tarea a Soporte Sistemas. Asunto : '
                                  . 'Verificación de Categoría de Fotos obligatorias.';
        $emGeneral->getConnection()->beginTransaction();

        $strPrefijoEmpresaEN = 'EN';
        $intIdEmpresaMD   = '18';
        $objInfoEmpresaEN = $emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')
                                                ->findOneBy(array('prefijo' => $strPrefijoEmpresaEN,
                                                                  'estado'  => 'Activo'));
        try
        {
            $objAdmiParametroCab    = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                                'nombreParametro'   => 'FOTOS_OBLIGATORIAS',
                                'estado'            => 'Activo'
                             )
                        );

            if(!empty($objInfoEmpresaEN) && $arrayData['data']['idEmpresa'] == $objInfoEmpresaEN->getId())
            {
                $arrayData['data']['idEmpresa'] = $intIdEmpresaMD;
            }

            $arrayParametro = array(
                                    'idParametroCab'        => $objAdmiParametroCab->getId(),
                                    'idTarea'               => $arrayData['data']['idTarea'],
                                    'idDepartamento'        => $arrayData['data']['idDepartamento'],
                                    'idEmpresa'             => $arrayData['data']['idEmpresa']
                                    );

            $arrayReturn = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
            ->getCategoriasFotos($arrayParametro);

            if($arrayReturn['status'] == 'OK')
            {
                if(count($arrayReturn['respuesta']) > 0)
                {
                    $arrayResultado['categoriasFotos']  = $arrayReturn['respuesta'];
                    $arrayResultado['status']           = $this->status['OK'];
                    $arrayResultado['mensaje']          = $this->mensaje['OK'];
                }
                else
                {
                    $arrayResultado['categoriasFotos']  = $arrayReturn['respuesta'];
                    $arrayResultado['status']           = 204;
                    $arrayResultado['mensaje']          = 'No existen Fotos categorizadas a su departamento, '
                                                          . 'por favor verificar con su jefe inmediato '.$strMsgSoporteSistemas;
                }
            }
            else
            {
                $serviceUtil->insertError(  'Telcos Mobile',
                'TecnicoWSController.getCategoriasFotosPorComparar',
                $arrayReturn['respuesta'],
                $arrayData['user'],
                "127.0.0.1");

                $arrayResultado['data']         = null;
                $arrayResultado['status']       = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']      = 'Problemas al obtener las categorías de fotos, ' .$strMsgSoporteSistemas;
            }

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
                                        'TecnicoWSController.getCategoriasFotosPorComparar',
                                        $ex->getMessage(),
                                        $arrayData['user'],
                                        "127.0.0.1");

            $arrayResultado['data']          = null;
            $arrayResultado['status']        = $this->status['ERROR'];
            $arrayResultado['mensaje']       = $ex->getMessage();
        }

        return $arrayResultado;
    }

    /**
     * Función que guarda, compara y valida una imagen con su imagen ideal.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 28-10-2019
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.1 02-06-2020 - Se modifica código para crear nueva estructura de archivos.
     *
     * @param array $arrayData
     *
     * @return array $arrayRespuesta
     *
     */
    private function putComparaValidaImagen($arrayData)
    {
        $arrayRespuesta = array();
        try
        {
            $strUsuario                 = $arrayData['user'];
            $strFechaActual             = new \DateTime('now');
            $strEtiquetaFoto            = $arrayData['data']['etiquetaN2'];
            $strCronologia              = $arrayData['data']['cronologia'];
            $strIdComunicacion          = $arrayData['data']['idComunicacion'];
            $serviceUtil                = $this->get('schema.Util');
            $serviceProcesarImagenes    = $this->get('tecnico.ProcesarImagenes');
            $emComercial                = $this->getDoctrine()->getManager("telconet");
            $emFinan                    = $this->getDoctrine()->getManager("telconet_financiero");
            $strCodigoPostal            = '593';
            $strOrigenAccion            = 'tareas';
            $strExt                     = 'jpg';

            $strPrefijoEmpresa = $emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')->getPrefijoByCodigo($arrayData['data']['idEmpresa']);

            if(isset($arrayData['bandNfs']) && $arrayData['bandNfs'])
            {
                $strAplicacion = $arrayData['strFolderApplication'];
            }
            else
            {
                $arrayParametrosFilePath = array(
                    'strCodigoPostal'       => $strCodigoPostal,
                    'strPrefijoEmpresa'     => $strPrefijoEmpresa,
                    'strFolderApplication'  => $arrayData['strFolderApplication'],
                    'strController'         => 'Tecnico',
                    'strOrigenAccion'       => $strOrigenAccion,
                    'strExt'                => $strExt
                );

                $strRutaFisicaCompleta = $serviceUtil->createNewFilePath($arrayParametrosFilePath);
            }

            $arrayParametros = array(
                'idDetalle'                 => $arrayData['data']['idDetalle'],
                'foto'                      => $arrayData['data']['foto'],
                'nombreFoto'                => $strEtiquetaFoto.'_'.$strCronologia.'_'.$strIdComunicacion,
                'usrCreacion'               => $strUsuario,
                'ipCreacion'                => "127.0.0.1",
                'feCreacion'                => $strFechaActual,
                'idEmpresa'                 => $arrayData['data']['idEmpresa'],
                'floatLatitud'              => $arrayData['data']['floatLatitud'],
                'floatLongitud'             => $arrayData['data']['floatLongitud'],
                'idDepartamento'            => $arrayData['data']['idDepartamento'],
                'idTarea'                   => $arrayData['data']['idTarea'],
                'idComunicacion'            => $strIdComunicacion,
                'cronologia'                => $strCronologia,
                'strEtiquetaFoto'           => $strEtiquetaFoto,
                'strRutaFisicaCompleta'     => $strRutaFisicaCompleta,
                'strApp'                    => $strAplicacion,
                'bandNfs'                   => $arrayData['bandNfs'],
                'strSubModulo'              => $strOrigenAccion,
                'strPrefijoEmpresa'         => $strPrefijoEmpresa
            );

            if(isset($arrayData['data']['foto']) && !empty($arrayData['data']['foto']))
            {
                $arrayResultado = $serviceProcesarImagenes->comparaValidaImagen($arrayParametros);
            }
            else
            {
                $arrayRespuesta['status']       = $this->status['ERROR_PARCIAL'];
                $arrayRespuesta['mensaje']      = "No se encontró foto para comparar";
                $arrayRespuesta['data']         = "";

                return $arrayRespuesta;
            }

            $arrayRespuesta['status']       = $this->status[$arrayResultado['status']];
            $arrayRespuesta['mensaje']      = $arrayResultado['mensaje'];
            $arrayRespuesta['data']         = $arrayResultado['data'];
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->putComparaValidaImagen()',
                                       'Error al comparar imágenes: '.$ex->getMessage(),
                                       $strUsuario,
                                       "127.0.0.1" );
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al comparar imágenes, favor notificar a sistemas.";
            $arrayRespuesta['data']    = "";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene el estado de la ultima imagen validada segun el nombre.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 06-11-2019
     *
     * @param array $arrayData
     *
     * @return array $arrayRespuesta
     *
     */
    private function getInfoFotoValidada($arrayData)
    {
        $arrayRespuesta = array();
        try
        {
            $strUsuario                 = $arrayData['user'];
            $emComunicacion             = $this->getDoctrine()->getManager("telconet_comunicacion");
            $serviceUtil                = $this->get('schema.Util');

            $strNombreFoto = $arrayData['data']['etiquetaN2'] . '_' . $arrayData['data']['cronologia'] . '_'
                             . $arrayData['data']['idComunicacion'];

            $arrayResultadoFotos = $emComunicacion->getRepository('schemaBundle:InfoDocumento')
            ->getResultadoFotosAntesDespues(
                                                [
                                                    "nombreDocumento" => $strNombreFoto,
                                                    "usuario"         => $strUsuario
                                                ]
                                            );

            if($arrayResultadoFotos['status'] == 'OK')
            {
                $arrayDataRespuesta = array(
                    'estadoEvaluacion'  =>  $arrayResultadoFotos['resultado'][0]['estadoEvaluacion']
                                            ? $arrayResultadoFotos['resultado'][0]['estadoEvaluacion'] : "",
                    'evaluacionTrabajo' =>  $arrayResultadoFotos['resultado'][0]['evaluacionTrabajo']
                                            ? $arrayResultadoFotos['resultado'][0]['evaluacionTrabajo'] : "",
                    'intentos'          =>  $arrayResultadoFotos['total']
                );

                $arrayRespuesta['status']       = $this->status['OK'];
                $arrayRespuesta['mensaje']      = $this->mensaje['OK'];
                $arrayRespuesta['data']         = $arrayDataRespuesta;
            }
            else
            {
                $serviceUtil->insertError(
                    'Telcos+',
                    'TecnicoWSController->getInfoFotoValidada()',
                    $arrayResultadoFotos['resultado'],
                    $strUsuario,
                    "127.0.0.1"
                );

                $arrayRespuesta['status']  = "ERROR";
                $arrayRespuesta['mensaje'] = "Se presentaron problemas al obtener info de las imágenes, favor notificar a sistemas.";
                $arrayRespuesta['data']    = "";
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->getInfoFotoValidada()',
                                       'Error al obtener info de las imágenes: '.$ex->getMessage(),
                                       $strUsuario,
                                       "127.0.0.1"
                                    );

            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al obtener info de las imágenes, favor notificar a sistemas.";
            $arrayRespuesta['data']    = "";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene las fotos totales tomadas en validación antes y despues.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 27-11-2019
     *
     * @param array $arrayData
     *
     * @return array $arrayRespuesta
     *
     */
    private function getFotosPorTareaUsuarioAntesDespues($arrayData)
    {
        $arrayRespuesta = array();

        try
        {
            $strUsuario                 = $arrayData['user'];
            $emComunicacion             = $this->getDoctrine()->getManager("telconet_comunicacion");
            $emGeneral                  = $this->getDoctrine()->getManager("telconet_general");
            $serviceUtil                = $this->get('schema.Util');
            $strCronologiaFotoAntes     = "";
            $strCronologiaFotoDespues   = "";

            $arrayCronologiaFotos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne(
                        'CRONOLOGIA_FOTOS_OBLIGATORIAS',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        ''
                    );
            if (is_array($arrayCronologiaFotos))
            {
                $strCronologiaFotoAntes     = !empty($arrayCronologiaFotos['valor1']) ? $arrayCronologiaFotos['valor1'] : "ANTES";
                $strCronologiaFotoDespues   = !empty($arrayCronologiaFotos['valor2']) ? $arrayCronologiaFotos['valor2'] : "DESPUES";
            }

            $arrayResultadoFotos = $emComunicacion->getRepository('schemaBundle:InfoDocumento')
            ->getFotosPorTareaUsuarioAntesDespues(
                                                    [
                                                        "idDetalle"             => $arrayData['data']['idDetalle'],
                                                        "usuario"               => $strUsuario,
                                                        "cronologiaFotoDespues" => $strCronologiaFotoDespues,
                                                        "cronologiaFotoAntes"   => $strCronologiaFotoAntes,
                                                        "nombreElemento"        => $arrayData['data']['nombreElemento']
                                                                                    ? $arrayData['data']['nombreElemento'] : ""
                                                    ]
                                                );

            if($arrayResultadoFotos['status'] == 'OK')
            {
                $arrayRespuesta['status']       = $this->status['OK'];
                $arrayRespuesta['mensaje']      = $this->mensaje['OK'];
                $arrayRespuesta['data']         = ['elementos' => $arrayResultadoFotos['resultado']];
            }
            else
            {
                $serviceUtil->insertError(
                    'Telcos+',
                    'TecnicoWSController->getFotosPorTareaUsuarioAntesDespues()',
                    $arrayResultadoFotos['resultado'],
                    $strUsuario,
                    "127.0.0.1"
                );

                $arrayRespuesta['status']  = "ERROR";
                $arrayRespuesta['mensaje'] = "Se presentaron problemas al obtener info de las imágenes, favor notificar a sistemas.";
                $arrayRespuesta['data']    = "";
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->getFotosPorTareaUsuarioAntesDespues()',
                                       'Error al obtener info de las imágenes: '.$ex->getMessage(),
                                       $strUsuario,
                                       "127.0.0.1"
                                    );

            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al obtener info de las imágenes, favor notificar a sistemas.";
            $arrayRespuesta['data']    = "";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que actualiza las coordenadas y factibilidad de un cliente
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 19-06-2020
     * 
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 25-03-2021
     * Se agrega la dirección según las coordenadas del técnico en sitio.
     * 
     *
     * @param array $arrayData
     *
     * @return array $arrayRespuesta
     *
     */
    public function actualizarCoordenadasFactibilidadCliente($arrayData)
    {
        $arrayRespuesta             = array();
        $strStatus                  = "OK";
        $strMensaje                 = "";
        $strData                    = "";
        $serviceUtil                = $this->get('schema.Util');
        $serviceInfoPunto           = $this->get('comercial.InfoPunto');
        $serviceInfoServicio        = $this->get('comercial.infoservicio');
        $strIpCreacion              = '127.0.0.1'; 

        try
        {
            $intCodEmpresa      = $arrayData['data']['intCodEmpresa'];
            $strPrefijoEmpresa  = $arrayData['data']['strPrefijoEmpresa'];
            if( $intCodEmpresa  ==  "18")
            {
                $strPrefijoEmpresa = "MD";
            }
            $intIdServicio      = $arrayData['data']['intIdServicio'];
            $strUsrCreacion     = $arrayData['user'];
            $strOrigen          = $arrayData['data']['strOrigen'];
            $intIdPunto         = $arrayData['data']['intIdPunto'];
            $strLatitud         = $arrayData['data']['strLatitud'];
            $strLongitud        = $arrayData['data']['strLongitud'];
            $strDireccion       = $arrayData['data']['strDireccion'];


            $arrayActualizaCoordenadas  = array(
                                                'intIdPunto'            => $intIdPunto,
                                                'strLatitud'            => $strLatitud,
                                                'strLongitud'           => $strLongitud,
                                                'strCodEmpresa'         => $intCodEmpresa,
                                                'strUsrCreacion'        => $strUsrCreacion,
                                                'strIpCreacion'         => $strIpCreacion,
                                                'boolNoValidarRegistro' => true,
                                                'strDireccion'          => $strDireccion
                                            );

            $arrayRespuestaActualizaCoordenadas = $serviceInfoPunto->actualizarCoordenadaDelPunto($arrayActualizaCoordenadas);

            if($arrayRespuestaActualizaCoordenadas['status'] == "OK")
            {
                $arrayLiberarPuertoFactibilidad = array(
                                                        'intIdServicio'     => $intIdServicio,
                                                        'intCodEmpresa'     => $intCodEmpresa,
                                                        'strPrefijoEmpresa' => $strPrefijoEmpresa,
                                                        'intIdServicio'     => $intIdServicio,
                                                        'strUsrCreacion'    => $strUsrCreacion,
                                                        'strOrigen'         => $strOrigen,
                                                        'strMotivo'         => "Actualización de coordenadas",
                                                        'strIpCreacion'     => $strIpCreacion
                                                );

                $arrayResponseLiberarPuerto = $serviceInfoServicio->liberarPuertoPuntoFactible($arrayLiberarPuertoFactibilidad);

                if($arrayResponseLiberarPuerto['strStatus'] == 'OK')
                {
                    $strMensaje = $serviceInfoServicio->solicitarNuevaFactibilidadMismoServicio($arrayLiberarPuertoFactibilidad);
                }
                else
                {
                    $strStatus  = $arrayResponseLiberarPuerto['strStatus'];
                    $strMensaje = $arrayResponseLiberarPuerto['strMensaje'];
                }
            }
            else
            {
                $strStatus  = $arrayRespuestaActualizaCoordenadas['status'];
                $strMensaje = $arrayRespuestaActualizaCoordenadas['mensaje'];
            }

            $arrayRespuesta['status']  = $strStatus;
            $arrayRespuesta['mensaje'] = $strMensaje;
            $arrayRespuesta['data']    = $strData;

        }
        catch(\Exception $exception)
        {
            $serviceUtil->insertLog(array(
                              'enterpriseCode'   => "10",
                              'logType'          => 1,
                              'logOrigin'        => 'TELCOS',
                              'application'      => basename(__FILE__),
                              'appClass'         => basename(__CLASS__),
                              'appMethod'        => basename(__FUNCTION__),
                              'descriptionError' => $exception->getMessage(),
                              'status'           => 'Fallido',
                              'inParameters'     => json_encode($arrayData, 128),
                              'creationUser'     => $strUsrCreacion));

            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Problemas al cambiar las coordenadas del cliente.";
            $arrayRespuesta['data']    = "";
        }

        return $arrayRespuesta;
    }

    /**
     * Función que realiza la confirmación del enlace del servicio de una tarea de soporte
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0 05-07-2020
     *
     * @param array $arrayData
     *
     * @return array $arrayRespuesta
     *
     * Se agrega lógica para poder obtener un filtrado por IPS.
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.2, 26-07-2020
     *
     */
    private function getValidarEnlaces($arrayData)
    {
        $emGeneral                      = $this->getDoctrine()->getManager('telconet_general');
        $emComercial                    = $this->getDoctrine()->getManager("telconet");
        $serviceTecnico                 = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil                    = $this->get('schema.Util');
        $strProgresoConfirIpServ        = "CONFIRMA_IP_SERVICIO";
        $arrayDataRequest               = $arrayData['data'];
        $intEmpresaId                   = $arrayDataRequest['empresaId'];
        $intServicioId                  = $arrayDataRequest['servicioId'];
        $intCasoId                      = $arrayDataRequest['casoId'];
        $intDetalleId                   = $arrayDataRequest['detalleId'];
        $strUsrCreacion                 = $arrayDataRequest['user'];
        $intComunicacionId              = $arrayDataRequest['idComunicacion'];
        $strEmpresaCod                  = $arrayDataRequest['empresaCod'];
        $strUltimaMilla                 = $arrayDataRequest['ultimaMilla'];
        $intDepartamentoId              = $arrayDataRequest['departamentoId'];
        $arrayRespuesta                 = array();
        $intIdCabEnlaceFibra            = 0;
        $strParametroLatenciaMax        = "";
        $strParametroPaquetesRecibir    = "";
        $strParametroLatenciaPromedio   = "";
        $arrayDataParametroConfirm      = "";
        $strUnidadLatencia              = "";
        $boolStatusPing                 = 'False';

        try
        {

            $arrayParametroUnidadLat = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne('UNIDADES_CONFIRMAR_ENLACE',
                        '',
                        '',
                        '',
                        'UNIDAD_LATENCIA_ENLACE',
                        '',
                        '',
                        ''
                    );

            if (is_array($arrayParametroUnidadLat))
            {
                $strUnidadLatencia = !empty($arrayParametroUnidadLat['valor2']) ? $arrayParametroUnidadLat['valor2'] : "";
            }

            $arrayParamEnlacesFibra     = array(
                                                    'nombreParametro' => $strUltimaMilla,
                                                    'descripcion'     => 'UMBRALES PARA VALIDAR LA  POTENCIA DE ENLACES',
                                                    'estado'          => "Activo"
                                                );

            $arrayParamFiltroTipoIps    = array(
                                                    'nombreParametro' => "VALIDACION_ENLACE_TIPOS_IP",
                                                    'estado'          => "Activo"
                                                );

            $entityParametroFiltroCabecera  = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneByNombreParametro($arrayParamFiltroTipoIps);

            $entityParametroCab         = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneByNombreParametro($arrayParamEnlacesFibra);


            if( isset($entityParametroCab) && !empty($entityParametroCab) )
            {
                $intIdCabEnlaceFibra  = $entityParametroCab->getId();
                $intIdCabFiltroValida = $entityParametroFiltroCabecera->getId();

                $arrayDetLatMax             = array(
                                                    'estado'      => "Activo",
                                                    'parametroId' => $intIdCabEnlaceFibra,
                                                    'descripcion' => "MAX_LATENCIA_MAXIMA"
                                                    );

                $arrayDetPaqRecibido        = array(
                                                    'estado'      => "Activo",
                                                    'parametroId' => $intIdCabEnlaceFibra,
                                                    'descripcion' => "MIN_PORCENTAJE_PAQUETES_RECIBIDO"
                                                    );

                $arrayDetLatAvg             = array(
                                                    'estado'      => "Activo",
                                                    'parametroId' => $intIdCabEnlaceFibra,
                                                    'descripcion' => "MAX_LATENCIA_MEDIA"
                                                    );

                $arrayDetFiltro             = array(
                                                    'estado'      => "Activo",
                                                    'parametroId' => $intIdCabFiltroValida,
                                                    'valor1'      => "FILTRO_VTIPOS_IP"
                                                    );

                $objDetLatMax               = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findOneBy($arrayDetLatMax);
                $objDetPaqRecibido          = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findOneBy($arrayDetPaqRecibido);
                $objDetLatAvg               = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findOneBy($arrayDetLatAvg);
                $objDetFiltro               = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findOneBy($arrayDetFiltro);

                if(isset($objDetLatMax))
                {
                    $strParametroLatenciaMax         = $objDetLatMax->getValor1() ? $objDetLatMax->getValor1() : '';
                }
                if(isset($objDetPaqRecibido))
                {
                    $strParametroPaquetesRecibir     = $objDetPaqRecibido->getValor1() ? $objDetPaqRecibido->getValor1() : '';
                }
                if(isset($objDetLatAvg))
                {
                    $strParametroLatenciaPromedio    = $objDetLatAvg->getValor1() ? $objDetLatAvg->getValor1() : '';
                }
                if(isset($objDetFiltro))
                {
                    $arrayFiltro                     = array($objDetFiltro->getValor2(),$objDetFiltro->getValor3(),$objDetFiltro->getValor4());
                }

                $arrayDataPaquetes          = array(
                                                    'sent'          => (int)$strParametroPaquetesRecibir,
                                                    'received'      => (int)$strParametroPaquetesRecibir,
                                                    'lost'          => 0
                                                );

                $arrayDataParametroConfirm  = array(
                                                        'statusPing'            => false,
                                                        'packages'              => $arrayDataPaquetes,
                                                        'latency'               => $arrayDataLatencia
                                                    );

            }



            $arrayValidaProgreso        = array(
                                                'intServicioId'          => $intServicioId,
                                                'intEmpresaCod'          => $intEmpresaId,
                                                'tipoProgreso'           => $strProgresoConfirIpServ,
                                                'detalleId'              => $intDetalleId,
                                                'casoId'                 => $intCasoId,
                                                'user'                   => $strUsrCreacion
                                                );

            $arrayDataCliente          = array(
                                                'intServicioId'       => $intServicioId,
                                                'arrayFiltro'         => $arrayFiltro
                                                    );
            $strTieneConfirIPserv        = $emGeneral->getRepository('schemaBundle:InfoServicioProdCaract')
                                                     ->validaProgresoTarea($arrayValidaProgreso);

            $arrayDataTecnica           = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->getIpWanClienteSoporte($arrayDataCliente);
            if($strTieneConfirIPserv == 'NO')
            {
                $arrayDataRegion            = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->getRegionClienteSoporte($arrayDataCliente);

                $arrayConfirmarEnlace       = array(
                                                        'intServicioId'             => $intServicioId,
                                                        'intEmpresaCod'             => $intEmpresaId,
                                                        'tipoProgreso'              => $strProgresoConfirIpServ,
                                                        'detalleId'                 => $intDetalleId,
                                                        'user'                      => $strUsrCreacion,
                                                        'idComunicacion'            => $intComunicacionId,
                                                        'ipWanCliente'              => $arrayDataTecnica['ipWanCliente'],
                                                        'empresaCod'                => $strEmpresaCod,
                                                        'ultimaMilla'               => $strUltimaMilla,
                                                        'parametroLatenciaMax'      => $strParametroLatenciaMax,
                                                        'parametroPaquetesRecibir'  => $strParametroPaquetesRecibir,
                                                        'parametroLatenciaPromedio' => $strParametroLatenciaPromedio,
                                                        'regionCliente'             => $arrayDataRegion['nombreRegion'],
                                                        'departamentoId'            => $intDepartamentoId,
                                                        'unidadLatencia'            => $strUnidadLatencia
                                                    );


                $arrayResponseNw    = $serviceTecnico->confirmarEnlaceWsNwSoporte($arrayConfirmarEnlace);

                $arrayResponseNw['data']['ipWan'] = $arrayDataTecnica['ipWanCliente'];

                $boolResult         = $arrayResponseNw['result'];
                $strMensaje         = $arrayResponseNw['mensaje'];
                $arrayData          = $arrayResponseNw['data'];
                $boolStatusPing     = false;

                if($strUltimaMilla === 'RAD')
                {
                    $boolResult      = false;
                }
            }
            else
            {
                $boolResult         = true;
                $strMensaje         = "El enlace fue validado correctamente.";
                $arrayData          = $arrayDataParametroConfirm;

            }
            $arrayRespuesta['message']              = $this->mensaje['OK'];
            $arrayRespuesta['status']               = $this->status['OK'];
            $arrayRespuesta['result']               = $boolResult;
            $arrayRespuesta['data']                 = $arrayData;
            $arrayRespuesta['data']['statusPing']   = $boolStatusPing;
            $arrayRespuesta['data']['message']      = $strMensaje;

        }
        catch(\Exception $exception)
        {
            $arrayRespuesta['message']              = $this->mensaje['ERROR'];
            $arrayRespuesta['status']               = $this->status['ERROR'];
            $arrayRespuesta['result']               = false;
            $arrayRespuesta['data']                 = $arrayDataParametroConfirm;
            $arrayRespuesta['data']['message']      = $arrayRespuesta['message'];
            $strClass                               = "TecnicoWSController";
            $strAppMethod                           = "getValidarEnlaces";


            $serviceUtil->insertLog(array(
                              'enterpriseCode'      => "10",
                              'logType'             => 1,
                              'logOrigin'           => 'TELCOS',
                              'application'         => 'TELCOS',
                              'appClass'            => $strClass,
                              'appMethod'           => $strAppMethod,
                              'descriptionError'    => $exception->getMessage(),
                              'status'              => 'Fallido',
                              'inParameters'        => json_encode($arrayData),
                              'creationUser'        => $strUsrCreacion));

        }
        return $arrayRespuesta;
    }


    /**
     * Funcion que sirve para verificar si existe un serial de un elemento
     * en el naf y agregarlo a una estructura para luego precargarlo en la web
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 11-07-2020
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.1 16-06-2021 - Se cambia lógica para recibir un array de equipos y agregar
     * el servicio de la tarea.
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.2 13-09-2021 - Se agrega validación para no tomar en cuenta los equipos del nodo
     * para sobrescribir su información.
     * 
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.3 29-09-2021 
     * - Se agrega validación para inicializar el equipo del lado del nodo.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 03-10-2022 - Se agrega validación para inicializar el equipo para servicios SEG_VEHICULO.
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.5 17-11-2022 - Se agrega validación para inicializar el equipo para servicios  Safe City.
     * 
     * @param array $arrayData
     * @return array $resultado
     */
    private function putVerificarGuardarSerieElemento($arrayData)
    {
        $strMensaje                 = "";
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $intEmpresaId               = $arrayData['data']['empresaId'];
        $intPersonaId               = $arrayData['data']['personaId'];
        $intPersonaEmpresaRolId     = "";
        $intPuntoId                 = $arrayData['data']['puntoId'];
        $strNombreTipoElemento      = $arrayData['data']['nombreTipoElemento'];
        $intTipoElementoId          = 0;
        $strSerieElemento           = $arrayData['data']['serieElemento'];
        $intElementoId              = "";
        $strUbicacion               = $arrayData['data']['ubicacion'];
        $strPropietario             = $arrayData['data']['propietario'];
        $strIdServicio              = $arrayData['data']['idServicio'];
        $intIdServicio              = $arrayData['data']['servicioId'];
        $arrayDataEquipos           = $arrayData['data']['dataEquipos'];
        $strEstado                  = "Activo";
        $strUbicacionNodo           = "NODO";
        $strUsrCreacion             = $arrayData['user'];
        $strFeCreacion              = new \DateTime('now');
        $strModeloElementoCliente   = "";
        $serviceTecnico             = $this->get('tecnico.InfoServicioTecnico');
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $serviceUtil                = $this->get('schema.Util');

        try
        {
            $arrayParametrosPersonaEmpresaRol = array(
                'intIdPersona'  => $intPersonaId,
                'strDescRol'    => 'Cliente',
                'intCodEmpresa' => $intEmpresaId
            );
            $objPersonaEmpRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                    ->getPersonaEmpresaRolPorPersonaPorTipoRolNew($arrayParametrosPersonaEmpresaRol);

            if(is_object($objPersonaEmpRol))
            {
                $intPersonaEmpresaRolId = $objPersonaEmpRol->getId();
            }

            for($intIndex = 0; $intIndex < count($arrayDataEquipos); $intIndex++)
            {
                $strNombreTipoElemento      = $arrayDataEquipos[$intIndex]['strTipoElemento'];
                $intTipoElementoId          = 0;
                $strSerieElemento           = $arrayDataEquipos[$intIndex]['strSerie'];
                $strMacElemento             = "";
                $strModeloElemento          = "";
                $intElementoId              = "";
                $strUbicacion               = $arrayDataEquipos[$intIndex]['strUbicacion'];
                $strPropietario             = $arrayDataEquipos[$intIndex]['strPropietario'];

                $objTipoElemento    = $emComercial->getRepository('schemaBundle:AdmiTipoElemento')
                ->findBy(array( "nombreTipoElemento" => $strNombreTipoElemento));

                $intTipoElementoId = $objTipoElemento[0]->getId();

                $arrayRespuesta = $serviceTecnico->buscarElementoEnNaf($strSerieElemento,$strModeloElementoCliente, "PI", "ActivarServicio");
                
                $strMac         = "";
                $strModelo      = "";
                $strDescipcion  = "";

                if($arrayRespuesta[0]['status']=="OK")
                {
                    $strRespuesta      = $arrayRespuesta[0]['mensaje'];
                    $arrayElemento     = explode(",",$strRespuesta);
                    if(count($arrayElemento)>1)
                    {
                        $strMac        = $arrayElemento[1];
                        $strModelo     = $arrayElemento[2];
                        $strDescipcion = $arrayElemento[0];

                        $arrayResultado['elemento'][] = array(
                            'descripcion'=>$strDescipcion ,
                            'mac'    => $strMac,
                            'modelo' => $strModelo);

                        $objElemento   = $emInfraestructura->getRepository("schemaBundle:InfoElementoInstalacion")
                        ->findOneBy(array(
                            'personaEmpresaRolId'   => $intPersonaEmpresaRolId,
                            'tipoElementoId'        => $intTipoElementoId,
                            'estado'                => 'Activo',
                            'ubicacion'             => $strUbicacion,
                            'puntoId'               => $intPuntoId
                        ));

                        $booleanIngresaSet = true;
                        if(!empty($intIdServicio))
                        {
                            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                            if(is_object($objServicio) && is_object($objServicio->getProductoId())
                               && ($objServicio->getProductoId()->getNombreTecnico() == 'SEG_VEHICULO'   || 
                                   $objServicio->getProductoId()->getNombreTecnico() == 'DATOS SAFECITY' || 
                                   $objServicio->getProductoId()->getNombreTecnico() == 'SAFECITYDATOS'  ||
                                   $objServicio->getProductoId()->getNombreTecnico() == 'SAFECITYWIFI'   ||
                                   $objServicio->getProductoId()->getNombreTecnico() == 'SAFECITYSWPOE'))
                            {
                                $booleanIngresaSet = false;
                            }
                        }

                        if(is_object($objElemento) && $strUbicacion != $strUbicacionNodo && $booleanIngresaSet)
                        {
                            $objElemento->setSerieElemento($strSerieElemento);
                            $objElemento->setPropietario($strPropietario);
                            $objElemento->setEstado($strEstado);
                            $objElemento->setUsrUltMod($strUsrCreacion);
                            $objElemento->setFeUltMod($strFeCreacion);
                            $objElemento->setMacElemento($strMac);
                            $objElemento->setModeloElemento($strModelo);
                            $objElemento->setServicioId($strIdServicio!=null?$strIdServicio:$intIdServicio);
                            $emInfraestructura->persist($objElemento);
                            $emInfraestructura->flush();
                        }
                        else
                        {
                            //grabar elementos
                            $objElementoInstalacion = new InfoElementoInstalacion();
                            $objElementoInstalacion->setPersonaEmpresaRolId($intPersonaEmpresaRolId);
                            $objElementoInstalacion->setPuntoId($intPuntoId);
                            $objElementoInstalacion->setTipoElementoId($intTipoElementoId);
                            $objElementoInstalacion->setSerieElemento($strSerieElemento);
                            $objElementoInstalacion->setElementoId($intElementoId);
                            $objElementoInstalacion->setUbicacion($strUbicacion);
                            $objElementoInstalacion->setMacElemento($strMac);
                            $objElementoInstalacion->setModeloElemento($strModelo);
                            $objElementoInstalacion->setPropietario($strPropietario);
                            $objElementoInstalacion->setEstado($strEstado);
                            $objElementoInstalacion->setUsrCreacion($strUsrCreacion);
                            $objElementoInstalacion->setFeCreacion($strFeCreacion);
                            $objElementoInstalacion->setServicioId($strIdServicio!=null?$strIdServicio:$intIdServicio);
                            $emInfraestructura->persist($objElementoInstalacion);
                            $emInfraestructura->flush();
                        }
                    }
                    else
                    {
                        $strMensaje = $arrayRespuesta[0]['mensaje'];
                        throw new \Exception("ERROR_PARCIAL");
                    }
                }
                else
                {
                    $arrayResultado['elemento'][] = array(
                        'descripcion'=>$strDescipcion ,
                        'mac'    => $strMac,
                        'modelo' => $strModelo);
                }

            }
        }
        catch(\Exception $exception)
        {
            if($exception->getMessage() == "NULL")
            {
                $arrayResultado['status']   = $this->status['NULL'];
                $arrayResultado['mensaje']  = $this->mensaje['NULL'];
            }
            else if($exception->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']   = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']  = $strMensaje;
            }
            else
            {
                $arrayResultado['status']   = $this->status['ERROR'];
                $arrayResultado['mensaje']  = $this->mensaje['ERROR'];
            }

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));

            return $arrayResultado;
        }
            
        $arrayResultado['status']   = $this->status['OK'];
        $arrayResultado['mensaje']  = $this->mensaje['OK'];
        return $arrayResultado;
    }

    /**
     * Funcion que sirve para generar un contrato de tipo VEHICULO.
     *
     * @author Marlon Plúas <mpluas@telconet.ec>
     * @version 1.0 24-08-2020
     *
     * @param array $arrayData
     * @return array $arrayRespuesta
     */
    private function contratoVehiculo($arrayData)
    {
        $arrayRespuesta            = array();
        $arrayParametrosContrato   = array();
        $objRequest                = $this->get('request');
        $emComercial               = $this->getDoctrine()->getManager("telconet");
        $emGeneral                 = $this->getDoctrine()->getManager('telconet_general');
        $emInfraestructura         = $this->getDoctrine()->getManager("telconet_infraestructura");
        $strFeCreacion             = new \DateTime('now');
        $serviceInfoContrato       = $this->get('comercial.InfoContrato');
        $arrayRespuesta['status']  = "ERROR";
        $arrayRespuesta['mensaje'] = "Transacción exitosa";
        $strTipoContratoVehiculo   = 'VEHICULO';

        $intIdElemento          = $arrayData['data']['idElemento'];
        $intCodEmpresa          = $arrayData['data']['empresaCod'];
        $intIdOficina           = $arrayData['data']['idOficina'];
        $strUsrCreacion         = $arrayData['data']['usrCreacion'];
        $strIpCreacion          = $objRequest->getClientIp();
        $strFechaInicioContrato = $arrayData['data']['fechaInicioContrato'];
        $strFechaFinContrato    = $arrayData['data']['fechaFinContrato'];
        $intIdPersonaEmpresaRol = $arrayData['data']['idPersonaEmpresaRol'];

        switch ($intCodEmpresa)
        {
            case 10:
                $strPrefijoEmpresa = "TN";
                break;
            case 18:
                $strPrefijoEmpresa = "MD";
                break;
            default:
                $arrayRespuesta['mensaje'] = "No se encuentra configurado el prefijo de la empresa";
                return $arrayRespuesta;
        }

        /* Validaciónes */
        if($intIdElemento == null || $intIdElemento == 0)
        {
            $arrayRespuesta['mensaje'] = "El valor idElemento es requerido";
            return $arrayRespuesta;
        }
        if($intIdOficina == null || $intIdOficina == 0)
        {
            $arrayRespuesta['mensaje'] = "El valor idOficina es requerido";
            return $arrayRespuesta;
        }
        if($strUsrCreacion == null)
        {
            $arrayRespuesta['mensaje'] = "El valor usrCreacion es requerido";
            return $arrayRespuesta;
        }
        if($intIdPersonaEmpresaRol == null || $intIdPersonaEmpresaRol == 0)
        {
            $arrayRespuesta['mensaje'] = "El valor idPersonaEmpresaRol es requerido";
            return $arrayRespuesta;
        }

        $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                         ->findOneBy(array('id'     => $intIdElemento,
                                                           'estado' => 'Activo'));
        if($objElemento == null)
        {
            $arrayRespuesta['mensaje'] = "El idElemento "
                                         . $intIdElemento
                                         . " no existe o no se encuentra activo";
            return $arrayRespuesta;
        }

        $objPersonaEmpresaRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                            ->findOneBy(array(
                                                    'id'     => $intIdPersonaEmpresaRol,
                                                    'estado' => 'Activo'
                                            ));
        if($objPersonaEmpresaRol == null)
        {
            $arrayRespuesta['mensaje'] = "El idPersonaEmpresaRol "
                                         . $intIdPersonaEmpresaRol
                                         . " no existe o no se encuentra activo";
            return $arrayRespuesta;
        } else
        {
            $intIdCliente = $objPersonaEmpresaRol->getPersonaId()->getId();
        }

        $objTipoContrato = $emComercial->getRepository('schemaBundle:AdmiTipoContrato')
                                       ->findOneBy(array(
                                               'empresaCod'              => $intCodEmpresa,
                                               'descripcionTipoContrato' => $strTipoContratoVehiculo
                                       ));

        $intIdTipoContrato   = $objTipoContrato->getId() ? $objTipoContrato->getId() : 0;
        $strFeInicioContrato = new \DateTime();
        if($strFechaInicioContrato != "")
        {
            list($anioInicioContrato, $mesInicioContrato, $diaInicioContrato) = explode("-", $strFechaInicioContrato);
            $strFeInicioContrato->setDate($anioInicioContrato, $mesInicioContrato, $diaInicioContrato);
        }
        $strFeFinContrato = new \DateTime();
        if($strFechaFinContrato != "")
        {
            list($anioFinContrato, $mesFinContrato, $diaFinContrato) = explode("-", $strFechaFinContrato);
            $strFeFinContrato->setDate($anioFinContrato, $mesFinContrato, $diaFinContrato);
        }
        $objFormaPago   = $emGeneral->getRepository('schemaBundle:AdmiFormaPago')
                                    ->findOneByDescripcionFormaPago('EFECTIVO');
        $intIdFormaPago = $objFormaPago->getId() ? $objFormaPago->getId() : 0;

        $arrayCheck         = null;
        $arrayClausula      = null;
        $arrayDatosContrato = array(
                'codigoNumeracionVE'   => 'CONVE',
                'tipoContratoId'       => $intIdTipoContrato,
                'feInicioContrato'     => $strFeInicioContrato,
                'feFinContratoPost'    => $strFeFinContrato,
                'idcliente'            => $intIdCliente,
                'personaEmpresaRolId'  => $intIdPersonaEmpresaRol,
                'valorEstado'          => 'Activo',
                'formaPagoId'          => $intIdFormaPago,
                'datos_form_files'     => array(),
                'arrayTipoDocumentos'  => array(),
                'tipoCuentaId'         => '',
                'bancoTipoCuentaId'    => '',
                'numeroCtaTarjeta'     => '',
                'titularCuenta'        => '',
                'valorAnticipo'        => '',
                'numeroContratoEmpPub' => ''
        );

        $emInfraestructura->getConnection()->beginTransaction();
        try
        {
            $arrayParametrosContrato['codEmpresa']     = $intCodEmpresa;
            $arrayParametrosContrato['prefijoEmpresa'] = $strPrefijoEmpresa;
            $arrayParametrosContrato['idOficina']      = $intIdOficina;
            $arrayParametrosContrato['usrCreacion']    = $strUsrCreacion;
            $arrayParametrosContrato['clientIp']       = $strIpCreacion;
            $arrayParametrosContrato['datos_form']     = $arrayDatosContrato;
            $arrayParametrosContrato['check']          = $arrayCheck;
            $arrayParametrosContrato['clausula']       = $arrayClausula;
            $objContrato                               = $serviceInfoContrato->crearContrato($arrayParametrosContrato);

            $intIdContrato           = $objContrato->getId();
            $strDoc                  = 'CONTRATO';
            $strObservacionHistorial = '<b>Datos Nuevos de ' . $strDoc . ':<b><br>';
            $objInfoDetalleElemento  = new InfoDetalleElemento();
            $objInfoDetalleElemento->setElementoId($objElemento->getId());
            $objInfoDetalleElemento->setDetalleNombre('CONTRATO');
            $objInfoDetalleElemento->setDetalleValor($intIdContrato);
            $objInfoDetalleElemento->setDetalleDescripcion('CONTRATO');
            $objInfoDetalleElemento->setFeCreacion($strFeCreacion);
            $objInfoDetalleElemento->setUsrCreacion($strUsrCreacion);
            $objInfoDetalleElemento->setIpCreacion($strIpCreacion);
            $objInfoDetalleElemento->setEstado('Activo');
            $emInfraestructura->persist($objInfoDetalleElemento);
            $emInfraestructura->flush();
            $strObservacionHistorial .= 'ID de Contrato: ' . $intIdContrato . '<br>';

            $strNombreContratista = "";
            $objPersonaContrato   = $objContrato->getPersonaEmpresaRolId()->getPersonaId();
            if($objPersonaContrato->getNombres() != "" && $objPersonaContrato->getApellidos() != "")
            {
                $strNombreContratista .= $objPersonaContrato->getNombres() . " " . $objPersonaContrato->getApellidos();
            } else
            {
                $strNombreContratista .= $objPersonaContrato->getRazonSocial();
            }

            $strObservacionHistorial .= 'Contratista: ' . $strNombreContratista . '<br>';
            $strObservacionHistorial .= 'Tipo de Contrato:' . $strTipoContratoVehiculo . '<br>';
            $strObservacionHistorial .= 'Fecha de Inicio de Contrato: ' . date_format($objContrato->getFeAprobacion(),
                            'd-m-Y') . '<br>';
            $strObservacionHistorial .= 'Fecha de Fin de Contrato: '
                                        . date_format($objContrato->getFeFinContrato(), 'd-m-Y')
                                        . '<br>';
            $strObservacionHistorial .= 'Estado: ' . $objContrato->getEstado() . '<br>';

            $objInfoHistorialElemento = new InfoHistorialElemento();
            $objInfoHistorialElemento->setElementoId($objElemento);
            $objInfoHistorialElemento->setObservacion($strObservacionHistorial);
            $objInfoHistorialElemento->setFeCreacion($strFeCreacion);
            $objInfoHistorialElemento->setUsrCreacion($strUsrCreacion);
            $objInfoHistorialElemento->setIpCreacion($strIpCreacion);
            $objInfoHistorialElemento->setEstadoElemento('Activo');
            $emInfraestructura->persist($objInfoHistorialElemento);
            $emInfraestructura->flush();
            $emInfraestructura->getConnection()->commit();
            $emInfraestructura->getConnection()->close();

            $arrayRespuesta['status']             = "OK";
            $arrayRespuesta['data']['idContrato'] = $intIdContrato;
        } catch (\Exception $e)
        {
            error_log($e->getMessage());
            $emInfraestructura->getConnection()->rollback();
            $emInfraestructura->getConnection()->close();
            $arrayRespuesta['mensaje'] = $e->getMessage();
        }
        return $arrayRespuesta;
    }


    /**
     * Función que sirve para activar instalaciones Telconet.
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.0 24-09-2020
     *
     *
     *
     * @author Ronny Morán  <rmoranc@telconet.ec>
     * @version 1.1 11-12-2020
     * Se establece el estado activo al servicio en caso de tener el estado EnVerificacion.
     *
     *
     * Se valida estado EnVerificacion del servicio de internet para la confirmación del servicio.
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.2 12-02-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 25-05-2021 - Se agrega validación para la activación del servicio DATOS SAFECITY.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 20-07-2021 Se agrega validaciones para los tipos de red
     *
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 1.5 09-09-2021 Se agrega validaciones para producto Internet SAFE
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.6 05-07-2022 Se agrega el método para realizar el cambio de plan de los servicios de Cámaras SAFECITY.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.7 03-10-2022 Se agrega el método para la activación de los servicio SEG VEHICULOS.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.8 12-01-2023 Se agrega sleep de espera antes de ejecución de obteneción de potencia mediante
     *                         la configuración del parámetro TIEMPO ESPERA PROCESOS
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 2.0 17-1-2023 - Se agrega arreglos elemento adicionales clente y nodo para servicios safe city.
     *
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.8 21-11-2022 Se agrega al servicio wifi gpon la caracteristica ip controladora.
     * 
     *
     *
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.9 04-12-2022 - Se agregan las validacions para el producto SAFE ENTRTY
     * 
     * @author Axel Auza <aauza@telconet.ec>
     * @version 2.0 07-06-2023 - Se agrega validación para obtener los elementos por clientes en el producto SEG_VEHICULO
     * 
     * @param array $arrayData
     * @return array $resultado
     */
    private function putActivacionTn($arrayData)
    {
        $intEmpresaId                       = $arrayData['data']['empresaId'];
        $intPrefijoEmpresa                  = $arrayData['data']['prefijoEmpresa'];
        $intPersonaId                       = $arrayData['data']['personaId'];
        $strProducto                        = $arrayData['data']['nombreProducto'];
        $strEquiposProducto                 = $arrayData['data']['infoEquiposProducto'];
        $strAdicionales                     = $arrayData['data']['adicionalesProducto'];
        $intIdDetSolPlanif                  = $arrayData['data']['detSolicitudId'];
        $intIdServicio                      = $arrayData['data']['idServicio'];
        $intIdProducto                      = $arrayData['data']['idProducto'];
        $strLogin                           = $arrayData['data']['login'];
        $strUltimaMilla                     = $arrayData['data']['ultmamilla'];
        $strSerieOnt                        = $arrayData['data']['serieOnt'];
        $strModeloOnt                       = $arrayData['data']['modeloOnt'];
        $strMacOnt                          = $arrayData['data']['macOnt'];
        $strSerieWifi                       = $arrayData['data']['serieWifi'];
        $strModeloWifi                      = $arrayData['data']['modeloWifi'];
        $strMacWifi                         = $arrayData['data']['macWifi'];
        $strMacIpFija                       = $arrayData['data']['macIpFija'];
        $intIdComunicacion                  = $arrayData['data']['comunicacionId'];
        $intDetalleId                       = $arrayData['data']['detalleId'];
        $strUsrCreacion                     = $arrayData['user'];
        $strTipoRed                         = $arrayData['data']['tipoRed'];
        $booleanActivarOnt                  = isset($arrayData['data']['seActivaOnt']) && $arrayData['data']['seActivaOnt'] == "S" ? true : false;
        $strIpCreacion                      = "127.0.0.1";
        $strTieneSmartWifiRenta             = "NO";
        $strEsInternetLite                  = "SI";
        $strEsPlan                          = "no";
        $strCodProgresActivacion            = "ACTIVACION_SERVICIO";
        $strOrigenProgreso                  = "MOVIL";
        $intIdPlan                          = "0";
        $intIdSplitter                      = "";
        $intIdInterfaceSplitter             = "";
        $arrayDatosIps                      = "";
        $strMarcaOlt                        = "";
        $strNombreTecnico                   = "";
        $strPerfil                          = "";
        $strCapacidad1                      = "";
        $strCapacidad2                      = "";
        $intInterfaceElementoId             = "";
        $intInterfaceElementoSplitterId     = "";
        $strPlan                            = "";
        $strNumPc                           = "";
        $strSsid                            = "";
        $strPassword                        = "";
        $strModoOperacion                   = "";
        $strObservacionCliente              = "";
        $strSerieSmartWifi                  = "";
        $strModeloSmartWifi                 = "";
        $strMacSmartWifi                    = "";
        $intIdIntCouSim                     = "";
        $strMensaje                         = "";
        $serviceUtil                        = $this->get('schema.Util');
        $emComercial                        = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura                  = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emGeneral                          = $this->getDoctrine()->getManager('telconet_general');
        $serviceSoporte                     = $this->get('soporte.SoporteService');
        $serviceTecnico                     = $this->get('tecnico.InfoServicioTecnico');
        $objCambiarPuerto                   = $this->get('tecnico.InfoCambiarPuerto');
        $objActivarPuerto                   = $this->get('tecnico.InfoActivarPuerto');
        $serviceRecursosRed                 = $this->get('planificacion.RecursosDeRed');
        $strAccion                          = "";
        $strProductoInternetSafe            = "Internet SAFE";


        //verificar si el servicio es tipo red GPON
        $booleanTipoRedGpon = false;
        if(!empty($strTipoRed))
        {
            $arrayParVerTipoRed = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $strTipoRed,
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
            {
                $booleanTipoRedGpon = true;
            }
        }
        
        try
        {
            $arrayProductoInternetSafe = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne('PARAMETROS_GENERALES_MOVIL', 
                     '', 
                     '', 
                     '', 
                     'PRODUCTO_INTERNET_SAFE', 
                     '', 
                     '', 
                     ''
                     );

            if(is_array($arrayProductoInternetSafe))
            {
                $strProductoInternetSafe     = !empty($arrayProductoInternetSafe['valor2']) ? $arrayProductoInternetSafe['valor2'] : "Internet SAFE";
            }
            
            $arrayParametrosPersonaEmpresaRol = array(
                                                        'intIdPersona'  => $intPersonaId,
                                                        'strDescRol'    => 'Cliente',
                                                        'intCodEmpresa' => $intEmpresaId
                                                    );
            $objPersonaEmpRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                    ->getPersonaEmpresaRolPorPersonaPorTipoRolNew($arrayParametrosPersonaEmpresaRol);

            if(is_object($objPersonaEmpRol))
            {
                $intPersonaEmpresaRolId = $objPersonaEmpRol->getId();
            }
            $objServicio                        = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->findOneById($intIdServicio);
            $objServicioTecnico                 = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneByServicioId($intIdServicio);
            $intInterfaceElementoId             = $objServicioTecnico->getInterfaceElementoId();
            $intIdSplitter                      = $objServicioTecnico->getElementoConectorId();
            $intIdInterfaceSplitter             = $objServicioTecnico->getInterfaceElementoConectorId();
            if(!empty($intIdInterfaceSplitter))
            {
                $objInfoInterfaceElemento       = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                        ->find($intIdInterfaceSplitter);
                $intInterfaceElementoSplitterId = $objInfoInterfaceElemento->getNombreInterfaceElemento();
            }
            $intElementoIdOlt                   = $objServicioTecnico->getElementoId();
            if(!empty($intElementoIdOlt))
            {
                $objElementoOlt                 = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                        ->findOneById($intElementoIdOlt);
                $strMarcaOlt                    = $objElementoOlt->getModeloElementoId()
                                                                     ->getMarcaElementoId()
                                                                     ->getNombreMarcaElemento();
            }
            $objProducto                        = $objServicio->getProductoId();

            if(is_object($objProducto))
            {
                $strSerieWifioForti       = $strSerieWifi;
                $strModeloWifioForti      = $strModeloWifi;
                $strMacWifioForti         = $strMacWifi;

                if(strpos($strProducto, 'TELEWORK') || $strProducto == 'TELEWORKER'
                   || $strProducto == 'TELEWORKER WIFI' || $strProducto == $strProductoInternetSafe)
                {
                    $strSerieWifioForti     = "";
                }

                $intPuntoId           = $objServicio->getPuntoId()->getId();

                if($objServicio->getEstado() != 'Asignada' && $objServicio->getEstado() != 'Activo'
                   && $objServicio->getEstado() != 'EnVerificacion'
                   && (!$booleanTipoRedGpon || $objProducto->getNombreTecnico()=='DATOS SAFECITY')
                   && $objProducto->getNombreTecnico() != 'SEG_VEHICULO' 
                   && $objProducto->getNombreTecnico() != 'SAFE ENTRY')
                {
                    $strAccion            = "Asignación de recursos de red producto";   

                    $strNombreTecnico     = strtoupper($objProducto->getNombreTecnico());   

                    if($strNombreTecnico === 'INTERNET SMALL BUSINESS')
                    {

                        $objPlan                    = $objServicio->getPlanId();
                        $intElementoId              = $objServicioTecnico->getElementoId();
                        $intCantidad                = $objServicio->getCantidad();

                        if(is_object($objPlan))
                        {
                            $intIdPlan     = $objPlan->getId();
                            $strEsPlan     = "si";
                        }

                        $objElemento                    = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->findOneById($intElementoId);
                        $strMarcaElemento               = $objElemento->getModeloElementoId()
                                                                      ->getMarcaElementoId()
                                                                      ->getNombreMarcaElemento();

                            $arrayIpRecursos                = array(
                                                                'nro_cantidad'                  => $intCantidad,
                                                                'id_elemento'                   => $intElementoId,
                                                                'id_servicio'                   => $intIdServicio,
                                                                'id_punto'                      => $intPuntoId,
                                                                'esPlan'                        => $strEsPlan,
                                                                'id_plan'                       => $intIdPlan,
                                                                'marca_elemento'                => $strMarcaElemento,
                                                                'empresaId'                     => $intEmpresaId,
                                                                'recursosRed'                   => $serviceRecursosRed
                                                                );



                        $strReponseIps            = $serviceTecnico->getIpsRecursos($arrayIpRecursos);
                        $arrayResponseIps         = json_decode($strReponseIps->getContent(), true);
                        $arrayRelaciones['total'] = count($arrayResponseIps['ips']);
                        $arrayRelaciones['caracteristicas'] =   $arrayResponseIps['ips']  ;
                        $arrayDatosIps = json_encode($arrayRelaciones);

                    }

                    if($objProducto->getNombreTecnico() === 'DATOS SAFECITY')
                    {
                        $arrayRecursosRed = array(
                            'idDetalleSolicitud'  => $intIdDetSolPlanif,
                            'idSplitter'          => $intIdSplitter,
                            'idInterfaceSplitter' => $intIdInterfaceSplitter,
                            'marcaOlt'            => $strMarcaOlt,
                            'idEmpresa'           => $intEmpresaId,
                            'prefijoEmpresa'      => $intPrefijoEmpresa,
                            'usrCreacion'         => $strUsrCreacion,
                            'ipCreacion'          => $strIpCreacion
                        );
                        $arrayRespRecursos = $serviceRecursosRed->asignarRecursosRedDatosGpon($arrayRecursosRed);
                        $objServicio       = $emComercial->getRepository('schemaBundle:InfoServicio')->findOneById($intIdServicio);
                    }
                    else
                    {
                        $arrayRecursosRed = array(
                            'idDetSolPlanif'                => $intIdDetSolPlanif,
                            'idSplitter'                    => $intIdSplitter,
                            'idInterfaceSplitter'           => $intIdInterfaceSplitter,
                            'datosIps'                      => $arrayDatosIps,
                            'marcaOlt'                      => $strMarcaOlt,
                            'nombreTecnico'                 => $strNombreTecnico,
                            'idEmpresa'                     => $intEmpresaId,
                            'prefijoEmpresa'                => $intPrefijoEmpresa,
                            'usrCreacion'                   => $strUsrCreacion,
                            'ipCreacion'                    => $strIpCreacion
                        );
                        $arrayRespRecursos = $serviceRecursosRed->asignarRecursosRedInternetLite($arrayRecursosRed);
                    }

                    if($arrayRespRecursos['status'] != 'OK')
                    {
                        throw new \Exception($arrayRespRecursos['mensaje']);
                    }
                }

                //verificar característica migración
                $booleanMigracionSwitchPoe = false;
                $objCarMigSwServicio = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                            "MIGRACION_SWITCH_POE",
                                                                                            $objProducto);
                if(is_object($objCarMigSwServicio))
                {
                    $booleanMigracionSwitchPoe = true;
                }
                if($objServicio->getEstado() == 'Asignada' || $booleanMigracionSwitchPoe)
                {
                    $strAccion        = "Activación de producto";
                    $entityPerfil     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array("descripcionCaracteristica" => "PERFIL",
                                                                      "estado"                    => "Activo"));

                    $objProdCaractPerfil = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                       ->findOneBy(array("productoId"          => $intIdProducto,
                                                                         "caracteristicaId"    => $entityPerfil->getId(),
                                                                         "estado"              => "Activo"));
                    if(is_object($objProdCaractPerfil))
                    {
                        $objPerfilProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array("servicioId"                  => $intIdServicio,
                                                                          "estado"                      => "Activo",
                                                                          "productoCaracterisiticaId"   => $objProdCaractPerfil->getId()));
                        if($objPerfilProdCaract)
                        {
                            $strPerfil = $objPerfilProdCaract->getValor();
                        }
                    }

                    $serviceActivacion = $this->get('tecnico.InfoActivarPuerto');
                    if($objProducto->getNombreTecnico() === 'DATOS SAFECITY' || $objProducto->getNombreTecnico() === 'SAFECITYSWPOE'
                        || ($booleanTipoRedGpon && $booleanMigracionSwitchPoe))
                    {
                        $strBanderaCamaraSafecity = "N";
                        $strBanderaWifiSafecity   = "N";
                        if($objProducto->getNombreTecnico() === 'SAFECITYDATOS')
                        {
                            $strBanderaCamaraSafecity = "S";
                        }
                        elseif($objProducto->getNombreTecnico() === 'SAFECITYWIFI')
                        {
                            $strBanderaWifiSafecity = "S";
                        }
                        $arrayPeticiones = array(
                                                'idServicio'                    => $intIdServicio,
                                                'idEmpresa'                     => $intEmpresaId,
                                                'prefijoEmpresa'                => $intPrefijoEmpresa,
                                                'ultimaMilla'                   => $strUltimaMilla,
                                                'booleanReasignarTareaGpon'     => false,
                                                'booleanFinalizarTareaGpon'     => false,
                                                'observacionCliente'            => $strObservacionCliente,
                                                'usrCreacion'                   => $strUsrCreacion,
                                                'ipCreacion'                    => $strIpCreacion,
                                                'strEsCpeExistente'             => "NO",
                                                'idTecnicoEncargado'            => $arrayData['data']['idTecnicoEncargado'],
                                                //DATOS SAFECITY - SAFECITYDATOS
                                                'serieOnt'                      => $strSerieOnt,
                                                'modeloOnt'                     => $strModeloOnt,
                                                'macOnt'                        => $strMacOnt,
                                                'nombreOnt'                     => $arrayData['data']['nombreOnt'],
                                                //SAFECITYSWPOE
                                                'idOnt'                         => $arrayData['data']['intIdOnt'],
                                                'puertosOnt'                    => $arrayData['data']['nombreInterface'],
                                                'nombreNuevoCpe'                => $arrayData['data']['nombreNuevoElemento'],
                                                'macNuevoCpe'                   => $arrayData['data']['macNuevoElemento'],
                                                'serieNuevoCpe'                 => $arrayData['data']['serieNuevoElemento'],
                                                'modeloNuevoCpe'                => $arrayData['data']['modeloNuevoElemento'],
                                                //SAFECITYDATOS
                                                'idServicioSwPoe'               => $arrayData['data']['intIdServicioSwPoe'],
                                                'idInterfaceOntSwPoe'           => $arrayData['data']['intIdInterfaceOnt'],
                                                'idSwPoe'                       => $arrayData['data']['intIdSwPoeGpon'],
                                                'puertosSwPoe'                  => $arrayData['data']['nombreInterface'],
                                                'arrayDipositivosNodo'          => $arrayData['data']['arrayDipositivosNodo'],
                                                'arrayDipositivosCliente'       => $arrayData['data']['arrayDipositivosCliente'],
                                            );
                        $arrayRespuestaActivacion = $serviceActivacion->activarClienteTNGpon($arrayPeticiones);
                        $strStatus                = $arrayRespuestaActivacion[0]['status'];
                        $strMensajeActivar        = $arrayRespuestaActivacion[0]['mensaje'];
                        $objServicio              = $emComercial->getRepository('schemaBundle:InfoServicio')->findOneById($intIdServicio);
                    }
                    elseif($booleanTipoRedGpon && ($booleanActivarOnt || !$booleanMigracionSwitchPoe))
                    {
                        $strBanderaCamaraSafecity = "N";
                        $strBanderaWifiSafecity   = "N";
                        if($objProducto->getNombreTecnico() === 'SAFECITYDATOS')
                        {
                            $strBanderaCamaraSafecity = "S";
                        }
                        elseif($objProducto->getNombreTecnico() === 'SAFECITYWIFI')
                        {
                            $strBanderaWifiSafecity = "S";
                        }
                        $arrayPeticiones = array(
                                                'idServicio'                    => $intIdServicio,
                                                'idEmpresa'                     => $intEmpresaId,
                                                'prefijoEmpresa'                => $intPrefijoEmpresa,
                                                'ultimaMilla'                   => $strUltimaMilla,
                                                'serieOnt'                      => $strSerieOnt,
                                                'modeloOnt'                     => $strModeloOnt,
                                                'macOnt'                        => $strMacOnt,
                                                'nombreOnt'                     => $arrayData['data']['nombreOnt'],
                                                'idOnt'                         => $arrayData['data']['intIdOnt'],
                                                'puertosOnt'                    => $arrayData['data']['nombreInterface'],
                                                'idProducto'                    => $intIdProducto,
                                                'strTipoOrden'                  => $objServicio->getTipoOrden(),
                                                'esPseudoPe'                    => "N",
                                                'strEsCpeExistente'             => "NO",
                                                'booleanActivarOnt'             => $booleanActivarOnt,
                                                'booleanExisteSwPoeGpon'        => isset($arrayData['data']['intIdServicioSwPoe']) &&
                                                                                   !empty($arrayData['data']['intIdServicioSwPoe']) ? true : false,
                                                'idTecnicoEncargado'            => $arrayData['data']['idTecnicoEncargado'],
                                                'strTipoEnlace'                 => $objServicioTecnico->getTipoEnlace(),
                                                'booleanReasignarTareaGpon'     => false,
                                                'observacionCliente'            => $strObservacionCliente,
                                                'usrCreacion'                   => $strUsrCreacion,
                                                'ipCreacion'                    => $strIpCreacion,
                                                //SAFECITYDATOS
                                                'banderaCamaraSafecity'         => $strBanderaCamaraSafecity,
                                                'nombreNuevoCamara'             => $arrayData['data']['nombreNuevoElemento'],
                                                'serieNuevoCamara'              => $arrayData['data']['serieNuevoElemento'],
                                                'modeloCamara'                  => $arrayData['data']['modeloNuevoElemento'],
                                                'macCamara'                     => $arrayData['data']['macNuevoElemento'],
                                                'resolucionCamara'              => $arrayData['data']['resolucionCamara'],
                                                'codecCamara'                   => $arrayData['data']['codecCamara'],
                                                'fpsCamara'                     => $arrayData['data']['fpsCamara'],
                                                'idServicioSwPoe'               => $arrayData['data']['intIdServicioSwPoe'],
                                                'idInterfaceOntSwPoe'           => $arrayData['data']['intIdInterfaceOnt'],
                                                'idSwPoe'                       => $arrayData['data']['intIdSwPoeGpon'],
                                                'puertosSwPoe'                  => $arrayData['data']['nombreInterface'],
                                                //SAFECITYWIFI
                                                'banderaWifiSafecity'           => $strBanderaWifiSafecity,
                                                'ipControladora'                => $arrayData['data']['ipControladora'],
                                                'nombreWifi'                    => $arrayData['data']['nombreNuevoElemento'],
                                                'serieWifi'                     => $arrayData['data']['serieNuevoElemento'],
                                                'modeloWifi'                    => $arrayData['data']['modeloNuevoElemento'],
                                                'macWifi'                       => $arrayData['data']['macNuevoElemento'],
                                                'arrayDipositivosNodo'          => $arrayData['data']['arrayDipositivosNodo'],
                                                'arrayDipositivosCliente'       => $arrayData['data']['arrayDipositivosCliente'],
                                            );
                        $arrayRespuestaActivacion = $serviceActivacion->activarClienteTN($arrayPeticiones);
                        $strStatus                = $arrayRespuestaActivacion[0]['status'];
                        $strMensajeActivar        = $arrayRespuestaActivacion[0]['mensaje'];
                        $objServicio              = $emComercial->getRepository('schemaBundle:InfoServicio')->findOneById($intIdServicio);
                    }
                    else
                    {
                        $arrayPeticiones = array(
                                                'idEmpresa'                     => $intEmpresaId,
                                                'prefijoEmpresa'                => $intPrefijoEmpresa,
                                                'idServicio'                    => $intIdServicio,
                                                'idProducto'                    => $intIdProducto,
                                                'perfil'                        => $strPerfil,
                                                'login'                         => $strLogin,
                                                'capacidad1'                    => $strCapacidad1,
                                                'capacidad2'                    => $strCapacidad2,
                                                'interfaceElementoId'           => $intInterfaceElementoId,
                                                'interfaceElementoSplitterId'   => $intInterfaceElementoSplitterId,
                                                'ultimaMilla'                   => $strUltimaMilla,
                                                'plan'                          => $strPlan,
                                                'serieOnt'                      => $strSerieOnt,
                                                'modeloOnt'                     => $strModeloOnt,
                                                'macOnt'                        => $strMacOnt,
                                                'serieWifi'                     => $strSerieWifioForti,
                                                'modeloWifi'                    => $strModeloWifioForti,
                                                'macWifi'                       => $strMacWifioForti,
                                                'numPc'                         => $strNumPc,
                                                'ssid'                          => $strSsid,
                                                'password'                      => $strPassword,
                                                'modoOperacion'                 => $strModoOperacion,
                                                'observacionCliente'            => $strObservacionCliente,
                                                'strSerieSmartWifi'             => $strSerieSmartWifi,
                                                'strModeloSmartWifi'            => $strModeloSmartWifi,
                                                'strMacSmartWifi'               => $strMacSmartWifi,
                                                'strTieneSmartWifiRenta'        => $strTieneSmartWifiRenta,
                                                'strEsInternetLite'             => $strEsInternetLite,
                                                'idIntCouSim'                   => $intIdIntCouSim,
                                                'usrCreacion'                   => $strUsrCreacion,
                                                'ipCreacion'                    => $strIpCreacion
                                            );
                        $arrayRespuestaActivacion = $serviceActivacion->activarClienteInternetLite($arrayPeticiones);
                        $strStatus                = $arrayRespuestaActivacion['strStatus'];
                        $strMensajeActivar        = $arrayRespuestaActivacion['strMensaje'];
                    }

                    if($strStatus != 'OK')
                    {
                        throw new \Exception($strMensajeActivar);
                    }
                }

                if($objServicio->getEstado() == 'EnVerificacion')
                {
                    $objServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                          ->find($intIdServicio);
                    if (is_object($objServicio))
                    {
                            $strAccion      = "Confirmando y guardando historial";
                            $strTipoOrden   = $objServicio->getTipoOrden();

                            //SE CONFIRMA AUTOMATICAMENTE LOS SERVICIOS CON TIPO DE ORDEN N
                            if ($intPrefijoEmpresa == 'TN' &&
                                (strpos($objServicio->getProductoId()->getGrupo(),'DATACENTER') === false) &&
                                $strTipoOrden == "N" && $strEsInternetLite === "NO"
                               )
                            {
                                $arrayPeticiones = array(
                                                        'idEmpresa'                     => $intEmpresaId,
                                                        'prefijoEmpresa'                => $intPrefijoEmpresa,
                                                        'idServicio'                    => $objServicio->getId(),
                                                        'idProducto'                    => $objServicio->getProductoId()->getId(),
                                                        'observacionActivarServicio'    => "Se confirmo el servicio",
                                                        'idAccion'                      => "847",
                                                        'usrCreacion'                   => $strUsrCreacion,
                                                        'ipCreacion'                    => $strIpCreacion
                                                        );

                               /* @var $confirmar InfoConfirmarServicio */
                               $serviceConfirmarServicio = $this->get('tecnico.InfoConfirmarServicio');
                               //*----------------------------------------------------------------------*/
                               //validar migración sdwan
                               if(is_object($objServicio) && !empty($objServicio))
                               {
                                   $strServicio =   "";
                                   $objServProdCaractSDWAN   = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                                    'SDWAN',
                                                                                                                    $objServicio->getProductoId()
                                                                                                                    );

                                    if (is_object($objServProdCaractSDWAN) && !empty($objServProdCaractSDWAN))
                                    {
                                        $serviceCambioElemento      = $this->get('tecnico.InfoCambioElemento');
                                        $objProducto                = $emComercial->getRepository('schemaBundle:admiProducto')
                                                                                  ->find($objServicio->getProductoId());
                                        if(is_object($objProducto) && !empty($objProducto))
                                        {
                                            $arrayServiciosTecnicosPorPuntoPro = $this->getDoctrine()
                                                                                ->getManager('telconet')
                                                                                ->getRepository('schemaBundle:InfoServicioTecnico')
                                                                                ->getElementosPorPuntoProduct($objServicio,
                                                                                                              $objProducto,'Activar');

                                            if(!isset($arrayServiciosTecnicosPorPuntoPro["elementoClienteId"]))
                                            {
                                                $arrayElementoServicios = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                        ->findBy(array(
                                                                        'elementoClienteId' =>
                                                                        $arrayServiciosTecnicosPorPuntoPro[0]["elementoClienteId"])
                                                                        );

                                                if(!empty($arrayElementoServicios) && is_array($arrayElementoServicios))
                                                {
                                                    foreach($arrayElementoServicios as $objElementoServicio)
                                                    {
                                                        if(is_object($objElementoServicio) && !empty($objElementoServicio) &&
                                                            $objElementoServicio->getServicioId()->getId()!=$objServicio->getId())
                                                        {
                                                            $objServicioNg = $emComercial->getRepository('schemaBundle:infoServicio')
                                                                                         ->findOneBy(array('id' => $objElementoServicio
                                                                                                                    ->getServicioId()->getId(),
                                                                                                           'estado' => "Activo"));
                                                            //VERIFICAMOS SI EL OTRO ELEMENTO CONECTADO ES UN SERVICIO FIREWALL
                                                            if(is_object($objServicioNg) && !empty($objServicioNg) &&
                                                                $objServicioNg->getProductoId()->getDescripcionProducto()=='SECURITY NG FIREWALL')
                                                            {
                                                                $strServicio       =   "Firewall";
                                                                $objServicioNgFire = $objServicioNg;
                                                            }
                                                            else if(is_object($objServicioNg) && !empty($objServicioNg) &&
                                                                $objServicioNg->getProductoId()->getDescripcionProducto()=='Internet SDWAN')
                                                            {
                                                                $strServicio    =   "Backup";
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                               }
                               if(is_object($objServProdCaractSDWAN) && !empty($objServProdCaractSDWAN))
                               {
                                   $objServProdCancelar         = $serviceTecnico
                                                                  ->getServicioProductoCaracteristica($objServicio,
                                                                  "SERVICIO_MISMA_ULTIMA_MILLA",
                                                                  $objServicio->getProductoId());
                                   if(is_object($objServProdCancelar) && !empty($objServProdCancelar))
                                   {
                                       $objServicioCancelar     = $emComercial->getRepository('schemaBundle:infoServicio')
                                                                                            ->find($objServProdCancelar->getValor());
                                   }
                                   if(is_object($objServicioCancelar) && !empty($objServicioCancelar) && 
                                      ( $objServicioCancelar->getProductoId()->getDescripcionProducto()=='Internet MPLS' ||
                                       $objServicioCancelar->getProductoId()->getDescripcionProducto()=='L3MPLS'))
                                   {
                                        if(!empty($strServicio))
                                        {
                                             $arrayParametrosCancel = array(
                                                                     'idEmpresa'             => $intEmpresaId,
                                                                     'prefijoEmpresa'        => $intPrefijoEmpresa,
                                                                     'usrCreacion'           => $strUsrCreacion,
                                                                     'ipCreacion'            => $strIpCreacion,
                                                                     'idServicio'            => $objServicioCancelar->getId(),
                                                                     'idServicioNue'         => $objServicio->getId(),
                                                                     'idProducto'            => $objServicioCancelar->getProductoId(),
                                                                     'strTipoOrden'          => 'C',
                                                                     'login'                 => $strLogin,
                                                                     'strCambioCpe'          => 'S',
                                                                     'objServicioNgFire'     => $objServicioNgFire,
                                                                     'strServicio'           => $strServicio
                                             );

                                             $arrayRespuestaCambCpe = $serviceCambioElemento->cambiaElementoCpeSdwan($arrayParametrosCancel);
                                             $strStatus             = $arrayRespuestaCambCpe[0]['status'];
                                             $strMensaje            = $arrayRespuestaCambCpe[0]['mensaje'];
                                         }
                                         else
                                         {
                                             $arrayParametrosCancel = array(
                                                             'idEmpresa'             => $intEmpresaId,
                                                             'prefijoEmpresa'        => $intPrefijoEmpresa,
                                                             'usrCreacion'           => $strUsrCreacion,
                                                             'ipCreacion'            => $strIpCreacion,
                                                             'idServicio'            => $objServicioCancelar->getId(),
                                                             'idServicioNue'         => $objServicio->getId(),
                                                             'idProducto'            => $objServicioCancelar->getProductoId(),
                                                             'strTipoOrden'          => 'C',
                                                             'login'                 => $strLogin,
                                                             'strCambioCpe'          => 'N'
                                                           );
                                             $arrayRespuestaCambCpe = $serviceCambioElemento->cambiaElementoCpeSdwan($arrayParametrosCancel);
                                             $strStatus             = $arrayRespuestaCambCpe[0]['status'];
                                             $strMensaje            = $arrayRespuestaCambCpe[0]['mensaje'];

                                         }
                                    }
                               }

                                   $arrayRespuesta = $serviceConfirmarServicio->confirmarServicio($arrayPeticiones);

                            }
                            else if( $strEsInternetLite === "SI" 
                                      && is_object($objServicio->getProductoId())
                                      && ($objServicio->getProductoId()->getNombreTecnico() === "INTERNET SMALL BUSINESS"
                                        || ($objServicio->getProductoId()->getNombreTecnico() === "TELCOHOME" && $strTipoOrden === "N")) )
                            {
                                $arrayPeticiones = array(
                                                            'idEmpresa'             => $intEmpresaId,
                                                            'prefijoEmpresa'        => $intPrefijoEmpresa,
                                                            'idServicio'            => $objServicio->getId(),
                                                            'idProducto'            => $objServicio->getProductoId()->getId(),
                                                            'usrCreacion'           => $strUsrCreacion,
                                                            'ipCreacion'            => $strIpCreacion,
                                                            'idAccion'              => "847",
                                                            'empleadoSesion'        => $strUsrCreacion,
                                                            'esISB'                 => $strEsInternetLite
                                                        );

                                /* @var $grabarHistorial InfoGrabarHistorial */
                                $objGrabarHistorial = $this->get('tecnico.InfoGrabarHistorial');
                                //*----------------------------------------------------------------------*/
                                $arrayParObtenerSleep = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('TIEMPO ESPERA PROCESOS',
                                                                                                                           'TECNICO',
                                                                                                                           '',
                                                                                                                           'OBTENER POTENCIA',
                                                                                                                           '',
                                                                                                                           '',
                                                                                                                           '',
                                                                                                                           '',
                                                                                                                           '',
                                                                                                                           $intEmpresaId);
                                if(isset($arrayParObtenerSleep) && !empty($arrayParObtenerSleep) &&
                                   isset($arrayParObtenerSleep['valor1']) && !empty($arrayParObtenerSleep['valor1']) &&
                                   is_numeric($arrayParObtenerSleep['valor1']))
                                {
                                    sleep(intval($arrayParObtenerSleep['valor1']));
                                    
                                }
                                //*LOGICA DE NEGOCIO - CAPA DE SERVICIO----------------------------------*/
                                $strStatus = $objGrabarHistorial->grabarHistorial($arrayPeticiones);

                                if($strStatus != "OK" && $strStatus != "OK1")
                                {
                                    throw new \Exception($strStatus);
                                }

                            }
                            else if($strEsInternetLite === "SI"
                                    && is_object($objServicio->getProductoId())
                                    && ($objServicio->getProductoId()->getNombreTecnico() === "TELCOHOME" && $strTipoOrden === "T"))
                            {
                                /* @var $serviceConfirmarServicio InfoConfirmarServicio */
                                $serviceConfirmarServicio   = $this->get('tecnico.InfoConfirmarServicio');
                                $serviceConfirmarServicio
                                ->actualizarSolicitudTrasladoTN(
                                                                array( 'objServicio'       => $objServicio,
                                                                       'strUsrCreacion'    => $strUsrCreacion,
                                                                       'strIpCreacion'     => $strIpCreacion
                                                                      ));
                            }
                    }

                    $strAccion             = "Guardando elementos";
                    $objTipoOnt            = $emComercial->getRepository('schemaBundle:AdmiTipoElemento')
                                                         ->findBy(array( "nombreTipoElemento" =>"CPE ONT"));
                    $objElementoInstalacion = new InfoElementoInstalacion();

                    $objElementoInstalacion->setPersonaEmpresaRolId($intPersonaEmpresaRolId);
                    $objElementoInstalacion->setPuntoId($intPuntoId);
                    $objElementoInstalacion->setTipoElementoId($objTipoOnt[0]->getId());
                    $objElementoInstalacion->setSerieElemento($strSerieOnt);
                    $objElementoInstalacion->setMacElemento($strMacOnt);
                    $objElementoInstalacion->setModeloElemento($strModeloOnt);
                    $objElementoInstalacion->setServicioId($intIdServicio);
                    $objElementoInstalacion->setIpElemento(null);
                    $objElementoInstalacion->setElementoId(null);
                    $objElementoInstalacion->setUbicacion('CLIENTE');
                    $objElementoInstalacion->setPropietario('TELCONET');
                    $objElementoInstalacion->setEstado('Activo');
                    $objElementoInstalacion->setUsrCreacion($strUsrCreacion);
                    $objElementoInstalacion->setFeCreacion(new \DateTime('now'));
                    $emInfraestructura->persist($objElementoInstalacion);
                    $emInfraestructura->flush();

                    if($strEquiposProducto != "")
                    {
                        $strTipoElemento        = "";
                        if(strpos($strEquiposProducto, 'CPE'))
                        {
                            $strTipoElemento    = "CPE WIFI";
                        }
                        else if (strpos($strEquiposProducto, 'FORTI'))
                        {
                             $strTipoElemento    = "FORTIGATE";
                        }

                        $objAdmiTipoElemento         = $emComercial->getRepository('schemaBundle:AdmiTipoElemento')
                                                        ->findBy(array( "nombreTipoElemento" =>$strTipoElemento));


                        $objElementoInstalacion = new InfoElementoInstalacion();
                        $objElementoInstalacion->setPersonaEmpresaRolId($intPersonaEmpresaRolId);
                        $objElementoInstalacion->setPuntoId($intPuntoId);
                        $objElementoInstalacion->setTipoElementoId($objAdmiTipoElemento[0]->getId());
                        $objElementoInstalacion->setSerieElemento($strSerieWifi);
                        $objElementoInstalacion->setMacElemento($strMacWifi);
                        $objElementoInstalacion->setModeloElemento($strModeloWifi);
                        $objElementoInstalacion->setServicioId($intIdServicio);
                        $objElementoInstalacion->setIpElemento(null);
                        $objElementoInstalacion->setElementoId(null);
                        $objElementoInstalacion->setUbicacion('CLIENTE');
                        $objElementoInstalacion->setPropietario('TELCONET');
                        $objElementoInstalacion->setEstado('Activo');
                        $objElementoInstalacion->setUsrCreacion($strUsrCreacion);
                        $objElementoInstalacion->setFeCreacion(new \DateTime('now'));
                        $emInfraestructura->persist($objElementoInstalacion);
                        $emInfraestructura->flush();
                    }


                }

                if($booleanTipoRedGpon && $objServicio->getEstado() == 'EnPruebas' && is_object($objServicio->getProductoId())
                   && $objServicio->getProductoId()->getNombreTecnico() != 'DATOS SAFECITY'
                   && $objServicio->getProductoId()->getNombreTecnico() != 'SAFECITYSWPOE')
                {
                    $arrayPeticiones = array(
                                            'idEmpresa'                     => $intEmpresaId,
                                            'prefijoEmpresa'                => $intPrefijoEmpresa,
                                            'idServicio'                    => $objServicio->getId(),
                                            'idProducto'                    => $objServicio->getProductoId()->getId(),
                                            'observacionActivarServicio'    => "Se confirmo el servicio",
                                            'idAccion'                      => "847",
                                            'usrCreacion'                   => $strUsrCreacion,
                                            'ipCreacion'                    => $strIpCreacion
                                            );
                    //confirmar servicio
                    $serviceConfirmarServicio = $this->get('tecnico.InfoConfirmarServicio');
                    $arrayRespuesta = $serviceConfirmarServicio->confirmarServicio($arrayPeticiones);
                    //realizar sumarizado de las capacidades en la red TN gpon_mpls
                    $arrayValidarProductoTotalBw = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        '',
                                                                        'PRODUCTO_TOTAL_BW_WS',
                                                                        $objServicio->getProductoId()->getId(),
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $intEmpresaId);
                    if(!empty($arrayValidarProductoTotalBw) && isset($arrayValidarProductoTotalBw['valor2']))
                    {
                        $arrayParametrosCambioVelGpon = array(
                            "objServicio"       => $objServicio,
                            "strCodEmpresa"     => $intEmpresaId,
                            "strPrefijoEmpresa" => $intPrefijoEmpresa,
                            "strUsrCreacion"    => $strUsrCreacion,
                            "strIpCreacion"     => $strIpCreacion,
                        );
                        $serviceCambPlanService = $this->get('tecnico.InfoCambiarPlan');
                        $serviceCambPlanService->actualizarCapacidadDatosTNGpon($arrayParametrosCambioVelGpon);
                    }
                }

                //activacion de SEG VEHICULO
                if($objServicio->getEstado() == 'AsignadoTarea' && $objProducto->getNombreTecnico() == 'SEG_VEHICULO')
                {
                    $arrayPeticiones = array(
                                            'idServicio'                    => $intIdServicio,
                                            'idProducto'                    => $intIdProducto,
                                            'idEmpresa'                     => $intEmpresaId,
                                            'prefijoEmpresa'                => $intPrefijoEmpresa,
                                            'observacionCliente'            => $strObservacionCliente,
                                            'usrCreacion'                   => $strUsrCreacion,
                                            'ipCreacion'                    => $strIpCreacion,
                                            'idTecnicoEncargado'            => $arrayData['data']['idTecnicoEncargado'],
                                            'observacionActivarServicio'    => "Se confirmo el servicio",
                                            'idAccion'                      => "847",
                                        );
                    //verificar elementos
                    $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PARAMETROS_SEG_VEHICULOS',
                                                        'TECNICO',
                                                        '',
                                                        'ELEMENTOS_PRODUCTO',
                                                        $objProducto->getId(),
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        $intEmpresaId,
                                                        'valor5',
                                                        '',
                                                        '',
                                                        '',
                                                        $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
                    if(!isset($arrayParElementos) || empty($arrayParElementos))
                    {
                        $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get('PARAMETROS_SEG_VEHICULOS',
                                                                          'TECNICO',
                                                                          '',
                                                                          'ELEMENTOS_PRODUCTO',
                                                                          $objProducto->getId(),
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          $intEmpresaId,
                                                                          'valor5',
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          'GENERAL');
                    }
                    foreach($arrayParElementos as $arrayItemParEle)
                    {
                        $strKeyTipo = $arrayItemParEle['valor6'];
                        $arrayPeticiones['serie'.$strKeyTipo]  = $arrayData['data']['serie'.$strKeyTipo];
                        $arrayPeticiones['modelo'.$strKeyTipo] = $arrayData['data']['modelo'.$strKeyTipo];
                        $arrayPeticiones['mac'.$strKeyTipo]    = $arrayData['data']['mac'.$strKeyTipo];
                    }
                    $serviceConfirmarServicio = $this->get('tecnico.InfoConfirmarServicio');
                    $arrayRespuesta = $serviceConfirmarServicio->confirmarServicio($arrayPeticiones);

                    if($arrayRespuesta[0]['status'] != 'OK')
                    {
                        throw new \Exception($arrayRespuesta[0]['mensaje']);
                    }
                }

                if( $objServicio->getEstado() == 'Pendiente' &&  $objProducto->getNombreTecnico() == 'SAFE ENTRY')
                {
                    $arrayPeticiones = array(
                        'idServicio'                    => $intIdServicio,
                        'idProducto'                    => $intIdProducto,
                        'idEmpresa'                     => $intEmpresaId,
                        'prefijoEmpresa'                => $intPrefijoEmpresa,
                        'observacionCliente'            => $strObservacionCliente,
                        'usrCreacion'                   => $strUsrCreacion,
                        'ipCreacion'                    => $strIpCreacion,
                        'idTecnicoEncargado'            => $arrayData['data']['idTecnicoEncargado'],
                        'observacionActivarServicio'    => "Se confirmo el servicio",
                        'idAccion'                      => "847");
                    //verificar elementos
                    $arrayElementosSafe = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('CONFIG ELEMENTOS SAFE ENTRY',
                                                                'TECNICO',
                                                                '',
                                                                'ELEMENTOS_SAFE_ENTRY',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                $intEmpresaId,
                                                                'valor7');
                    
                    if(!is_array($arrayElementosSafe))
                    {
                        throw new \Exception('No se ha podido obtener el parametro para realizar la validacion de los elemntos Safe Entry');
                    }

                    foreach($arrayElementosSafe as $arrayElemento)
                    {
                        $strKeyTipo = $arrayElemento['valor5'];
                        $arrayPeticiones['serie'.$strKeyTipo]  = $arrayData['data']['serie'.$strKeyTipo];
                        $arrayPeticiones['modelo'.$strKeyTipo] = $arrayData['data']['modelo'.$strKeyTipo];
                        $arrayPeticiones['mac'.$strKeyTipo]    = $arrayData['data']['mac'.$strKeyTipo];
                    }
                    $serviceConfirmarServicio = $this->get('tecnico.InfoConfirmarServicio');
                    $arrayRespuesta = $serviceConfirmarServicio->confirmarServicio($arrayPeticiones);

                    if($arrayRespuesta[0]['status'] != 'OK')
                    {
                        throw new \Exception($arrayRespuesta[0]['mensaje']);
                    }
                }
            }

            if($strAdicionales == "IP_ADICIONAL")
            {
                $objInfoPuntoIp                 = $emComercial->getRepository('schemaBundle:InfoPunto')
                                                              ->findOneBy(array('login'=> $strLogin));


                $intIdPuntoIp           = $objInfoPuntoIp->getId();
                $arrayEntrada           = array(
                                                'puntoId'               => $intIdPuntoIp,
                                                'estadoAdicional'       => array('PreAsignacionInfoTecnica',
                                                                                 'Asignada')
                                                );

                $strServicioIpAdicional          = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                               ->getIpServicioAdicional($arrayEntrada);

                if(is_array($strServicioIpAdicional) && !empty($strServicioIpAdicional[0]['servicio_id']))
                {
                    $strIdServicioAdicional = $strServicioIpAdicional[0]['servicio_id'];

                    $objServicioIpAdicional         = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                  ->findOneBy(array(
                                                                                    'id' => $strIdServicioAdicional,
                                                                                    )
                                                                              );

                    if(is_object($objServicioIpAdicional) && !empty($objServicioIpAdicional))
                    {
                        $intServicioIdIp                = $objServicioIpAdicional->getId();
                        $objProductoIdIp                = $objServicioIpAdicional->getProductoId();

                        if(is_object($objProductoIdIp) && !empty($objProductoIdIp))
                        {
                            $strNombreTecnicoIp             = strtoupper($objProductoIdIp->getNombreTecnico());

                            $objServicioTecnicoIp           = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                          ->findOneByServicioId($intServicioIdIp);

                            $objTipoSolicitudInfoTecnica    = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                          ->findOneBy(array("descripcionSolicitud" => "SOLICITUD INFO TECNICA",
                                                                                                    "estado"               => "Activo"));
                            $objInfoDetalleSolicitudIp      = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                          ->findOneBy(array("servicioId"      => $intServicioIdIp,
                                                                                                    "tipoSolicitudId" => $objTipoSolicitudInfoTecnica
                                                                                                                         ->getId()));

                            $intIdDetSolPlanif      = $objInfoDetalleSolicitudIp->getId();
                            $intIdSplitter          = "";
                            $intIdInterfaceSplitter = "";
                            $strMarcaOlt            = "";
                            $intIdServicioRef       = $intServicioIdIp;
                            $strTieneIpFijaActiva   = "1";

                            if($objServicioIpAdicional->getEstado() != 'Asignada' && $objServicioIpAdicional->getEstado() != 'Activo')
                            {
                                $strAccion              = "Asignando recursos de red IP Adicional";
                                if($strNombreTecnicoIp === 'IPSB')
                                {
                                    $objPlanIp                  = $objServicioIpAdicional->getPlanId();
                                    $intPuntoId                 = $objServicioIpAdicional->getPuntoId()->getId();
                                    $intElementoId              = $objServicioTecnicoIp->getElementoId();
                                    $intCantidad                = $objServicioIpAdicional->getCantidad();

                                    if(is_object($objPlanIp))
                                    {
                                        $intIdPlan     = $objPlanIp->getId();
                                        $strEsPlan     = "si";
                                    }

                                    $objElementoIp                  = $emInfraestructura
                                                                      ->getRepository('schemaBundle:InfoElemento')
                                                                      ->findOneById($intElementoId);
                                    if(is_object($objElementoIp))
                                    {
                                        $strMarcaElementoIp             = $objElementoIp->getModeloElementoId()
                                                                                  ->getMarcaElementoId()
                                                                                  ->getNombreMarcaElemento();
                                    }


                                    $arrayIpRecursos                = array(
                                                                            'nro_cantidad'                  => $intCantidad,
                                                                            'id_elemento'                   => $intElementoId,
                                                                            'id_servicio'                   => $intServicioIdIp,
                                                                            'id_punto'                      => $intPuntoId,
                                                                            'esPlan'                        => $strEsPlan,
                                                                            'id_plan'                       => $intIdPlan,
                                                                            'marca_elemento'                => $strMarcaElementoIp,
                                                                            'empresaId'                     => $intEmpresaId,
                                                                            'recursosRed'                   => $serviceRecursosRed
                                                                            );

                                    $strReponseIps              = $serviceTecnico->getIpsRecursos($arrayIpRecursos);
                                    $arrayResponseIps           = json_decode($strReponseIps->getContent(), true);
                                    $arrayRelacionesIp['total'] = count($arrayResponseIps['ips']);
                                    $arrayRelacionesIp['caracteristicas'] =   $arrayResponseIps['ips']  ;
                                    $arrayDatosIps = json_encode($arrayRelacionesIp);
                                }

                                $arrayRecursosRed       = array(
                                                                'idDetSolPlanif'                => $intIdDetSolPlanif,
                                                                'idSplitter'                    => $intIdSplitter,
                                                                'idInterfaceSplitter'           => $intIdInterfaceSplitter,
                                                                'datosIps'                      => $arrayDatosIps,
                                                                'marcaOlt'                      => $strMarcaOlt,
                                                                'nombreTecnico'                 => $strNombreTecnicoIp,
                                                                'idEmpresa'                     => $intEmpresaId,
                                                                'prefijoEmpresa'                => $intPrefijoEmpresa,
                                                                'usrCreacion'                   => $strUsrCreacion,
                                                                'ipCreacion'                    => $strIpCreacion
                                                                );

                                $arrayRespRecursos = $serviceRecursosRed->asignarRecursosRedInternetLite($arrayRecursosRed);


                                if($arrayRespRecursos['status'] != 'OK')
                                {
                                    throw new \Exception($arrayRespRecursos['mensaje']);
                                }

                            }

                            if($objServicioIpAdicional->getEstado() != 'Activo')
                            {
                                $strAccion                  = "Activando IP Adicional";
                                $arrayActivaAdicional       = array(
                                                                    'idServicio'                    => $intIdServicioRef,
                                                                    'idServicioRef'                 => $intIdServicio,
                                                                    'macIpFija'                     => $strMacIpFija,
                                                                    'tieneIpFijaActiva'             => $strTieneIpFijaActiva,
                                                                    'idEmpresa'                     => $intEmpresaId,
                                                                    'prefijoEmpresa'                => $intPrefijoEmpresa,
                                                                    'user'                          => $strUsrCreacion,
                                                                    'ipClient'                      => $strIpCreacion,
                                                                    'infoCambiarPuerto'             => $objCambiarPuerto,
                                                                    'InfoActivarPuerto'             => $objActivarPuerto
                                                                    );

                                $arrayReponseActivaIp = $serviceTecnico->activarIpAdicional($arrayActivaAdicional);

                                if($arrayReponseActivaIp != 'OK')
                                {
                                    throw new \Exception($arrayReponseActivaIp);
                                }
                            }
                        }
                    }

                }


            }

            $strAccion                   = "Ingresando progreso de activación";

            $arrayProgresoActivacion     = array(
                                                'strCodEmpresa'         => $intEmpresaId,
                                                'intIdTarea'            => $intIdComunicacion,
                                                'intIdDetalle'          => $intDetalleId,
                                                'strCodigoTipoProgreso' => $strCodProgresActivacion,
                                                'intIdServicio'         => $intIdServicio,
                                                'strOrigen'             => $strOrigenProgreso,
                                                'strUsrCreacion'        => $strUsrCreacion,
                                                'strIpCreacion'         => $strIpCreacion);

            $arrayRespuesta    = $serviceSoporte->ingresarProgresoTarea($arrayProgresoActivacion);
            $strStatus         = $arrayRespuesta['status'];
            $strMensajeProg    = $arrayRespuesta['mensaje'];

            if($strStatus != 'OK' && strpos($strMensajeProg, 'Ya existe un registro del progreso de la tarea') === false)
            {
                throw new \Exception($strMensajeProg);
            }


        }
        catch(\Exception $exception)
        {
            $arrayParametroMapeoError     = array(
                                                'mensaje'               => $exception->getMessage(),
                                                'mensajeDefault'        => "No se pudo realizar la activación",
                                                'nombreParametro'       => "MAPEO_ERRORES_ACTIVACION_TN",
                                                'empresaId'             => $intEmpresaId,
                                                'user'                  => $strUsrCreacion);


            $arrayResultado['status']   = $this->status['ERROR'];
            $objProducto = $objServicio->getProductoId();
            
            if($booleanTipoRedGpon || 
                ( is_object($objProducto) && !empty($objProducto) && $objProducto->getNombreTecnico() == 'SEG_VEHICULO') )
            {
                $arrayResultado['mensaje'] = $exception->getMessage();
            }
            else
            {
                $arrayResultado['mensaje'] = $serviceUtil->getMapeoMensajeError($arrayParametroMapeoError);
            }
            
            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'appAction'        => $strAccion,
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));


            return $arrayResultado;
        }

        $arrayResultado['status']   = $this->status['OK'];
        $arrayResultado['mensaje']  = $this->mensaje['OK'];
        return $arrayResultado;
    }

    /**
     * Función que sirve verificar si una instalación Tn tiene agregado un producto adicional.
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.0 24-09-2020
     *
     *
     * @param array $arrayData
     * @return array $resultado
     */
    private function getTieneIpAdicional($arrayData)
    {
        $intEmpresaId                       = $arrayData['data']['empresaId'];
        $strLogin                           = $arrayData['data']['login'];
        $strUsrCreacion                     = $arrayData['user'];
        $strTieneIpAdicional                = "NO";
        $arrayResultado                     = array();
        $emComercial                        = $this->getDoctrine()->getManager("telconet");
        $serviceUtil                        = $this->get('schema.Util');

        try
        {
            $objInfoPuntoIp                 = $emComercial->getRepository('schemaBundle:InfoPunto')
                                                          ->findOneBy(array('login'=> $strLogin));
            if(is_object($objInfoPuntoIp) && !empty($objInfoPuntoIp))
            {
                $intIdPuntoIp           = $objInfoPuntoIp->getId();
                $arrayEntrada           = array(
                                                'puntoId'               => $intIdPuntoIp,
                                                'estadoAdicional'       => array('PreAsignacionInfoTecnica',
                                                                                 'Asignada')
                                                );

                $strServicioIpAdicional          = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                               ->getIpServicioAdicional($arrayEntrada);

                if(is_array($strServicioIpAdicional) && !empty($strServicioIpAdicional[0]['servicio_id']))
                {
                    $strTieneIpAdicional = "SI";
                }
            }

            $arrayResultado['tieneIpAdicional']  = $strTieneIpAdicional;

        }
        catch(\Exception $exception)
        {
            $arrayRespuesta['data']     = $arrayResultado;
            $arrayRespuesta['status']   = $this->status['ERROR'];
            $arrayRespuesta['mensaje']  = $exception->getMessage();

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'descriptionError' => $arrayRespuesta['status']." Mensaje: ".$arrayRespuesta['mensaje'],
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));

            return $arrayRespuesta;
        }

        $arrayRespuesta['data']     = $arrayResultado;
        $arrayRespuesta['status']   = $this->status['OK'];
        $arrayRespuesta['mensaje']  = $this->mensaje['OK'];

        return $arrayRespuesta;
    }


    /**
     * Función que sirve para obtener información según serial de elemento ingresado, se valida tambien por
     * estado del sevicio.
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0 20-10-2020
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 11-12-2020
     * Se agrega  el estado EnVerificacion del servicio, para consultar información del elemento.
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 03-03-2021 Se valida modelo compatible para activación de producto Extender Db 
     * en caso de tenerlo agregado. 
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.3 10-05-2021 Se valida modelo de equipo compatible para activación de producto 
     * Extender Dual Band y Wifi Dual Band.
     * 
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function getElementoCliente($arrayData)
    {
        $strModeloElemento              = $arrayData['data']['nombreModeloElemento'];
        $strSerieElementoCliente        = $arrayData['data']['serieElementoCliente'];
        $strModeloElementoCliente       = $arrayData['data']['modeloElementoCliente'];
        $intServicioId                  = $arrayData['data']['servicio_id'];
        $intEmpresaId                   = $arrayData['data']['empresaId'];
        $strEsOnt                       = $arrayData['data']['esOnt'];
        $strNombreTecnicoProducto       = $arrayData['data']['nombreTecnicoProducto']; 
        $strTipoEquipo                  = $arrayData['data']['tipoEquipo']; 
        $strUsrCreacion                 = $arrayData['user'];
        $strMarcaOlt                    = "";
        $strDescripcion                 = "";
        $strMac                         = "";
        $strEstadoElemento              = "PI";
        $strMensaje                     = "No se pudo obtener información";
        $serviceUtil                    = $this->get('schema.Util');
        $emComercial                    = $this->getDoctrine()->getManager("telconet");
        $emGeneral                      = $this->getDoctrine()->getManager('telconet_general');
        $strAccion                      = "Obtener información del elemento";
        $strProductoExtender            = $arrayData['data']['tieneProductoExtender'];
        $boolModeloCompatible           = false;

        try
        {
            $objServicio                        = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->findOneById($intServicioId);

            if(($objServicio->getEstado() == 'Activo' || $objServicio->getEstado() == 'EnVerificacion' ) && $strEsOnt == "SI")
            {
                $strEstadoElemento = "IN";
            }

            if(isset($strModeloElemento) && !empty($strModeloElemento))
            {
                $emComercial            = $this->getDoctrine()->getManager();
                $objModeloElementoOlt   = $emComercial->getRepository('schemaBundle:AdmiModeloElemento')
                                                      ->findOneBy(array("nombreModeloElemento"  => $strModeloElemento,
                                                                        "estado"                => "Activo"));
                if(is_object($objModeloElementoOlt))
                {
                    $objMarcaOlt    = $objModeloElementoOlt->getMarcaElementoId();
                    if(is_object($objMarcaOlt))
                    {
                        $strMarcaOlt    = $objMarcaOlt->getNombreMarcaElemento();
                    }

                }
            }

            $serviceTecnico = $this->get('tecnico.InfoServicioTecnico');

            if($strMarcaOlt == "TELLION")
            {
                $arrayDataElemento     = array(
                                                'serie'             => $strSerieElementoCliente,
                                                'modelo'            => $strModeloElementoCliente,
                                                'estado'            => $strEstadoElemento);


                $arrayInfoElemento = $serviceTecnico->obtenerElementoNaf($arrayDataElemento);

                if($arrayInfoElemento[0]['status'] == "OK")
                {
                    $strDescripcion             = $arrayInfoElemento[0]['mensaje'];
                    $arrayRespuesta             = $arrayInfoElemento[0]['mensaje'];
                    $arrayResul                   = explode(",",$arrayRespuesta);

                    if(count($arrayResul) > 1)
                    {
                        $strMac             = $arrayResul[1];
                        $strModelo          = $arrayResul[2];
                    }
                    else
                    {
                        throw new \Exception("NULL");
                    }
                }
                else
                {
                    $strMensaje = $arrayInfoElemento[0]['mensaje'];
                    throw new \Exception($strMensaje);
                }
            }
            else if($strMarcaOlt == "HUAWEI" || $strMarcaOlt == "ZTE")
            {
                $arrayDataElemento     = array(
                                                'serie'             => $strSerieElementoCliente,
                                                'modelo'            => $strModeloElementoCliente,
                                                'estado'            => $strEstadoElemento);

                $arrayInfoElemento = $serviceTecnico->obtenerElementoNaf($arrayDataElemento);

                if($arrayInfoElemento[0]['status'] == "OK")
                {
                    $arrayRespuesta      = $arrayInfoElemento[0]['mensaje'];
                    $arrayResul        = explode(",",$arrayRespuesta);

                    if(count($arrayResul) > 1)
                    {
                        $strDescripcion    = $arrayResul[0];
                        $strMac            = $arrayResul[1];
                        $strModelo         = $arrayResul[2];
                    }
                    else
                    {
                        throw new \Exception("NULL");
                    }
                }
                else
                {
                    $strMensaje = $arrayInfoElemento[0]['mensaje'];
                    throw new \Exception($strMensaje);
                }
            }
            
            if((isset($strNombreTecnicoProducto) && !empty($strNombreTecnicoProducto)) && 
                (isset($strTipoEquipo) && !empty($strTipoEquipo)))
            {
                $objParametroCab = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                ->findOneBy( array( 'nombreParametro' => 'MODELOS_EQUIPOS_VALIDAR_MOVIL',
                                    'estado'      => 'Activo' ) );

                $intIdParametroCab = 0;

                if($objParametroCab)
                {
                    $intIdParametroCab = $objParametroCab->getId();
                }

                $arrayDetFiltro = array(
                                    'parametroId'   => $intIdParametroCab,
                                    'valor3'        => $strTipoEquipo,
                                    'valor4'        => $strNombreTecnicoProducto, 
                                    'estado'        => 'Activo'     
                                );

                $arrayModelos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->findBy($arrayDetFiltro);

                foreach($arrayModelos as $objModelos)
                {
                    if($strModelo == $objModelos->getValor2())
                    {
                        $boolModeloCompatible = true;
                        break;
                    }
                    $arrayModelosPermitidos[] = $objModelos->getValor2(); 
                }

                if(!$boolModeloCompatible)
                {
                    $strMensaje = "La serie ingresada no es compatible para la activación, "
                            . "favor ingresar uno de los siguientes modelos: <b> ".implode(', ', $arrayModelosPermitidos)." </b>";
                    throw new \Exception("ERROR_PARCIAL");
                }    
            }
            
            $arrayRespuesta = array('descripcion'       => $strDescripcion, 
                                    'mac'               => $strMac, 
                                    'modelo'            => $strModelo);
        }
        catch(\Exception $e)
        {
            $arrayResultado['elemento'] = (object)[];
            $arrayResultado['status']   = $this->status['ERROR'];
            $arrayResultado['mensaje']  = $strMensaje;

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'appAction'        => $strAccion,
                'descriptionError' => $strMensaje,
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
            return $arrayResultado;
        }

        $arrayResultado['elemento'] = $arrayRespuesta;
        $arrayResultado['status']   = $this->status['OK'];
        $arrayResultado['mensaje']  = $this->mensaje['OK'];
        return $arrayResultado;
    }

    /**
     * Funcion que sirve para consultar el id sucriber
     * atravez del login de usuario
     *
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.0 15-10-2020
     *
     * @param array $arrayData
     * @return array $arrayRespuesta
     */
    private function consultaSuscriber($arrayData)
    {

        //inicialización de variables
        $arrayOciCon      = "";
        $arrayParametros  = "";
        $arrayRespuesta   = "";
        $arrayResultadoObtenerInfo = "";

        //variables para conexion a la base de datos mediante conexion OCI
        $arrayOciCon['user_comercial']    = $this->container->getParameter('user_comercial');
        $arrayOciCon['passwd_comercial']  = $this->container->getParameter('passwd_comercial');
        $arrayOciCon['user_financiero']   = $this->container->getParameter('user_financiero');
        $arrayOciCon['passwd_financiero'] = $this->container->getParameter('passwd_financiero');
        $arrayOciCon['dsn']               = $this->container->getParameter('database_dsn');
        $arrayParametros['ociCon']        = $arrayOciCon;



        //variables para consulta de información decliente
        $arrayParametros['strLogin']     = $arrayData['data']['login'];

        //ejecución de service para recuperar información de cliente
        $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
        $arrayResultadoObtenerInfo = $serviceServicioTecnico->obtenerSusbcriber($arrayParametros);

        //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
        $arrayRespuesta['data']    = $arrayResultadoObtenerInfo['data']['suscribers'];
        $arrayRespuesta['status']  = $arrayResultadoObtenerInfo['strStatus'];
        $arrayRespuesta['mensaje'] = $arrayResultadoObtenerInfo['strMensaje'];


        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para cambiar de estado de pendiente a activo
     * con el suscriber id
     *
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.0 22-10-2020
     *
     * @param array $arrayData
     * @return array $arrayRespuesta
     */
    private function activarsubscriber($arrayData)
    {

        //inicialización de variables
        $arrayOciCon      = "";
        $arrayParametros  = "";
        $arrayRespuesta   = "";
        $arrayResultadoObtenerInfo = "";

        //variables para conexion a la base de datos mediante conexion OCI
        $arrayOciCon['user_comercial']    = $this->container->getParameter('user_comercial');
        $arrayOciCon['passwd_comercial']  = $this->container->getParameter('passwd_comercial');
        $arrayOciCon['user_financiero']   = $this->container->getParameter('user_financiero');
        $arrayOciCon['passwd_financiero'] = $this->container->getParameter('passwd_financiero');
        $arrayOciCon['dsn']               = $this->container->getParameter('database_dsn');
        $arrayParametros['ociCon']        = $arrayOciCon;



        //variables para consulta de información decliente
        if( is_numeric($arrayData['data']['Suscriber_id']))
        {
             $arrayParametros['strSuscriber_id']     = $arrayData['data']['Suscriber_id'];
             $arrayParametros['strOrigen_Act']       = $arrayData['data']['origenActivacion'];
             $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
             $arrayResultadoObtenerInfo = $serviceServicioTecnico->actualizarEstado($arrayParametros);

            //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
             $arrayRespuesta['status']  = $arrayResultadoObtenerInfo['strStatus'];
             $arrayRespuesta['mensaje'] = $arrayResultadoObtenerInfo['strMensaje'];
        }
        else
        {
            $arrayRespuesta['status'] =  'ERROR' ;
            $arrayRespuesta['mensaje'] = 'EL Suscriber_id no es numerico' ;
        }

        return $arrayRespuesta;
    }

     /**
     * Función que sirve para verificar si un punto tiene agregado un producto adicional
     * y obtener información parametrizada del producto
     *
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.0 24-11-2020
     *
     * Se valida respuesta al obtener más de un producto adicional.
     * @author Carlos Caguana <ccaguana@telconet.ec>
     * @version 1.1 04-12-2020
     *
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 03-03-2021 Se agrega el nombre técnico del producto.
     *
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.3 09-03-2021 Se obtiene información del extender registrado previamente.
     * Utilizado para el autocompletado de información.
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.4 05-05-2021 Se agrega lógica para incluir producto Extender Dual Band.
     *
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.5 29-06-2021 Se agrega validación removida, 
     *                         para devolver información de elementos en productos en caso de tenerlos.
     *
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.6 25-07-2021 Se modifica la obtención de elementos a solicitar según valores parametrizados.
     * 
     *     
     * @param array $arrayData
     * @return array $resultado
     */
    private function getInfoProductoAdicionalMd($arrayData)
    {
        $intEmpresaId                       = $arrayData['data']['idEmpresa'];
        $intPuntoId                         = $arrayData['data']['puntoid'];
        $intServicioId                      = $arrayData['data']['idservicio'];
        $strUsrCreacion                     = $arrayData['user'];
        $arrayResultado                     = array();
        $emComercial                        = $this->getDoctrine()->getManager("telconet");
        $serviceUtil                        = $this->get('schema.Util');
        $emGeneral                          = $this->getDoctrine()->getManager('telconet_general');
        $emSoporte                          = $this->getDoctrine()->getManager("telconet_soporte");
        $arrayProgresos                     = array();
        $strTieneProducto                   = "NO";

        try
        {

            $arrayEntrada           = array(
                                            'puntoId'               => $intPuntoId,
                                            'servicioId'            => $intServicioId
                                            );

            $arrayServicioProdAd         = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                          ->getProductoMdAdicional($arrayEntrada);

            if(is_array($arrayServicioProdAd) && count($arrayServicioProdAd) > 0)
            {
                foreach ($arrayServicioProdAd  as $productosAdicionales => $elementKey)
                {
                    $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($elementKey['producto_id']);
                    if(is_object($objProducto))
                    {
                        $strCodigoProducto = $objProducto->getCodigoProducto();
                        $arrayAdmiParametroDetRemov  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne(   'ACTIVACION_PRODUCTOS_MEGADATOS',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $strCodigoProducto,
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '');

                        if(isset($arrayAdmiParametroDetRemov) && $objProducto->getNombreTecnico() === "WDB_Y_EDB"
                           && (!isset($intServicioId) || empty($intServicioId)) &&  $elementKey['estado'] == "Asignada")
                        {
                               unset($arrayServicioProdAd[$productosAdicionales]);
                        }
                    }
                }
            }


            if(is_array($arrayServicioProdAd) && !empty($arrayServicioProdAd[0]['producto_id']) && count($arrayServicioProdAd) == 1)
            {
                $strTieneProducto = "SI";

                $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($arrayServicioProdAd[0]['producto_id']);
                if(is_object($objProducto))
                {
                    $strCodigoProducto = $objProducto->getCodigoProducto();

                    $arrayAdmiParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne(   'ACTIVACION_PRODUCTOS_MEGADATOS',
                                                                '',
                                                                '',
                                                                '',
                                                                $strCodigoProducto,
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '');

                    if(isset($arrayAdmiParametroDet))
                    {
                        $arrayProgresosTarea            = $emSoporte->getRepository('schemaBundle:AdmiProgresosTarea')
                                                                     ->findOneBy(array('id' => $arrayAdmiParametroDet['valor3']));

                        if(is_object($arrayProgresosTarea))
                        {
                            $arrayProgresPorcentaje         = $emSoporte->getRepository('schemaBundle:InfoProgresoPorcentaje')
                                                                         ->findBy(array('tareaId' => $arrayProgresosTarea->getCodigoTarea()));

                            foreach($arrayProgresPorcentaje as $datos)
                            {
                                $intIdProgreso              = $datos->getTipoProgreso();
                                $arrayTipoProgreso          = $emSoporte->getRepository('schemaBundle:AdmiTipoProgreso')
                                                                         ->findOneBy(array('id' => $intIdProgreso));

                                $arrayProgresos[] = $arrayTipoProgreso->getCodigo();

                            }
                        }


                    }

                }
            }

            if(count($arrayServicioProdAd) > 0)
            {
                $strTieneProducto = "SI";
                foreach ( $arrayServicioProdAd  as $productosAdicionales )
                {

                    $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($productosAdicionales['producto_id']);
                    $strCodigoProducto = $objProducto->getCodigoProducto();
                    
                    $strFiltroProductosAdicionales = '';

                    if(!isset($intServicioId) || empty($intServicioId))
                    {
                        $strFiltroProductosAdicionales = 'SI';
                    }

                    $arrayAdmiParametroDet  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne(   'ACTIVACION_PRODUCTOS_MEGADATOS',
                                                                '',
                                                                '',
                                                                '',
                                                                $strCodigoProducto,
                                                                '',
                                                                '',
                                                                $strFiltroProductosAdicionales,
                                                                '',
                                                                '');

                    $strCaracteristicaEquipo       = ""; 
                    if(isset($arrayAdmiParametroDet))
                    {

                        $strCaracteristicaEquipo = !empty($arrayAdmiParametroDet['valor2']) ? $arrayAdmiParametroDet['valor2'] : "" ;    

                        $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
                        $arrayParametros = array();
                        $arrayParametros['intIdServicio']   = $productosAdicionales['idServicio'];
                        $arrayParametros['strTipoServicio'] = 'Plan';
                        $arrayParametros['intIdEmpresa']    = $intEmpresaId;
                        $arrayParametros['objEmComercial']  = $emComercial;

                        $arrayParametros['objServicioTecnicoService'] = $serviceServicioTecnico;

                        $strJsonDataSeries            = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                  ->generarJsonTrasladoExtender($arrayParametros);

                        $arrayDataSeries = json_decode($strJsonDataSeries, true);

                        if(isset($arrayDataSeries['encontrados']) && count($arrayDataSeries['encontrados']) > 0)
                        {
                            for($intIndex = 0; $intIndex < count($arrayDataSeries['encontrados']); $intIndex++)
                            {
                                if($arrayDataSeries['encontrados'][$intIndex]['strTipoElemento'] == "CPE WIFI")
                                {
                                     $arrayInfoExtender[] = array  (
                                                      'strSerieElemento'        =>$arrayDataSeries['encontrados'][$intIndex]['strSerieElemento'],
                                                      'strMacElemento'          =>$arrayDataSeries['encontrados'][$intIndex]['strMacElemento'],
                                                      'strModeloElemento'       =>$arrayDataSeries['encontrados'][$intIndex]['strModeloElemento'],
                                                      'strDescripcionElemento'  =>'Extender Dual Band'
                                                      );
                                    break;
                                }
                            }
                        }

                        $strSplitString = explode("@" , $strCaracteristicaEquipo);
                        foreach($strSplitString as $i =>$key) 
                        { 
                            $arrayEquipos[]= array  (
                                                 'ext'              =>$key,
                                                 'info_elemento'    =>$arrayInfoExtender
                                                ); 

                        }                        

                        if(!isset($strCaracteristicaEquipo) || empty($strCaracteristicaEquipo))
                        {
                            unset($arrayEquipos);
                            $arrayEquipos = array();
                        }


                        $arrayProductos[] = array  (
                            'producto'          => $objProducto->getDescripcionProducto(),
                            'nombreTecnicoProd' => $objProducto->getNombreTecnico(),
                            'estado'            => $productosAdicionales['estado'],
                            'idServicio'        => $productosAdicionales['idServicio'],
                            'equipos'           => $arrayEquipos
                        );
                    }
                    unset($arrayEquipos);
                }


            }

            $arrayProducto  = array(
                                    'equipos'                => !empty($arrayAdmiParametroDet['valor2']) ? $arrayAdmiParametroDet['valor2'] : "",
                                    'estado'                 => !empty($arrayServicioProdAd[0]['estado'])? $arrayServicioProdAd[0]['estado']: "",
                                    'activacionEnConjunto'   => !empty($arrayAdmiParametroDet['valor4']) ? $arrayAdmiParametroDet['valor4'] : "", 
                                    'progresos'              => $arrayProgresos,
                                    'tieneProducto'          => $strTieneProducto,
                                    'cantidadProducto'       => count($arrayServicioProdAd),
                                    'productosAdicionales'   => $arrayProductos
                                    );

            $arrayResultado  = $arrayProducto;
        }
        catch(\Exception $exception)
        {
            $arrayRespuesta['data']     = $arrayResultado;
            $arrayRespuesta['status']   = $this->status['ERROR'];
            $arrayRespuesta['mensaje']  = $exception->getMessage();

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'descriptionError' => $arrayRespuesta['mensaje'],
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));

            return $arrayRespuesta;
        }

        $arrayRespuesta['data']     = $arrayResultado;
        $arrayRespuesta['status']   = $this->status['OK'];
        $arrayRespuesta['mensaje']  = $this->mensaje['OK'];
        return $arrayRespuesta;
    }


    /**
     * Función que sirve para activar producto Md de cableado o Wifi+Ap
     * que ya incluyen un servicio de internet Activo.
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.0 24-11-2020
     *
     * Se modifica la forma de obtener el servicio de internet principal por punto.
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.1 11-02-2021
     *
     *
     * Se modifica la función para que realice el Cambio de ONT en caso de requerirlo
     * y se devuelve la confirmación del cambio de ONT.
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.2 10-03-2021
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.3 27-03-2021 - Cambia descripcion de la solicitud para cableado ethernet.
     *           Se quita validacion de else cuando es CE producto adicional para que tambien active el servicio
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.4 05-05-2021 Se agrega lógica para incluir producto Extender Dual Band.
     *
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.5 25-07-2021 Se agrega lógica para trasladar Extender Dual Band y activar Netlifecam Md.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.6 27-08-2021 Se agrega envio de correo al cliente confirmando activacion el producto.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.7 21-10-2021 Se mejora la validacion de los EDB para verificar si el producto trasladado a activar
     *                          ya se encontraba activo en origen, para no generar doble facturacion.
     *  
     * @param array $arrayData
     * @return array $arrayResultadoWs
     */
    private function putActivacionProductoMd($arrayData)
    {
        $intEmpresaId                       = $arrayData['data']['empresaId'];
        $strEmpresaCod                      = $arrayData['data']['empresaCod'];
        $intIdServicio                      = $arrayData['data']['servicioId'];
        $intIdComunicacion                  = $arrayData['data']['comunicacionId'];
        $intDetalleId                       = $arrayData['data']['detalleId'];

        $strSerieExtenderDualBand           = $arrayData['data']['serieExtender'];
        $strModeloExtenderDualBand          = $arrayData['data']['modeloExtender'];
        $strMacExtenderDualBand             = $arrayData['data']['macExtender'];
        
        $strSerieOnt                        = $arrayData['data']['serieOntCambiar'];
        $strModeloOnt                       = $arrayData['data']['modeloOntCambiar'];
        $strMacOnt                          = $arrayData['data']['macOntCambiar'];
        $strDescripcionOnt                  = $arrayData['data']['descripcionOntCambiar'];

        $strSerieSmartWifi                  = $arrayData['data']['strSerieSmartWifi'];
        $strMacSmartWifi                    = $arrayData['data']['strMacSmartWifi'];
        $strModeloSmartWifi                 = $arrayData['data']['strModeloSmartWifi'];
        $strTipoElemento                    = $arrayData['data']['strTipoElemento'];
        
        $strSerieTarjeta                    = $arrayData['data']['serieTarjeta'];
        $strModeloTarjeta                   = $arrayData['data']['modeloTarjeta'];
        $strCapacidadTarjeta                = $arrayData['data']['capacidadTarjeta'];
        $strMarcaTarjeta                    = $arrayData['data']['marcaTarjeta'];
        
        $intIdSolicitudServicio             = $arrayData['data']['idDetalleSolicitud'];
        $strObsActivarServicio              = $arrayData['data']['observacionActivar'];
        $intPuntoId                         = $arrayData['data']['puntoId'];
        $strUsrCreacion                     = $arrayData['user'];
        $strCodProgresActivacion            = "ACTIVACION_SERVICIO"; 
        $strOrigenProgreso                  = "MOVIL";
        $intIdAccion                        = "847";
        $strIpCreacion                      = "127.0.0.1";
        $strTipoServicio                    = "PRODUCTO";
        $arrayResultadoWs                   = array();
        $emComercial                        = $this->getDoctrine()->getManager("telconet");
        $serviceUtil                        = $this->get('schema.Util');
        $serviceConfirmarServicio           = $this->get('tecnico.InfoConfirmarServicio');
        $emSeguridad                        = $this->getDoctrine()->getManager('telconet_seguridad');
        $emInfraestructura                  = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emGeneral                          = $this->getDoctrine()->getManager('telconet_general');
        $serviceSoporte                     = $this->get('soporte.SoporteService');
        $serviceCambioElemento              = $this->get('tecnico.InfoCambioElemento');
        $strMensajeExito                    = "¡Servicio activado!"; 
        $serviceActivarPuerto               = $this->get('tecnico.InfoActivarPuerto');
        $serviceTecnico                     = $this->get('tecnico.InfoServicioTecnico');
        $arrayParamProducNetCam   = $serviceTecnico->paramProductosNetlifeCam();
        try
        {
                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                if (!is_object($objServicio))
                {
                    throw new \Exception("No se encontró información del servicio");
                }

                $objServicioPunto = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->obtieneProductoInternetxPunto($intPuntoId); 

                if (!is_object($objServicioPunto))
                {
                    throw new \Exception("No se encontró información del servicio de Internet");
                }

                $intIdServicioInternet = $objServicioPunto->getId();

                // Se valida si producto EDB del origen estaba activo al trasladar
                $objProductoInternet = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                            ->findOneBy(array("empresaCod"        => $intEmpresaId, 
                                                            "descripcionProducto" => "INTERNET DEDICADO",
                                                            "estado"              => "Activo"));
                $strTrasladarExtenderDB = "NO";
                $objCaractTrasladarExtenderDB = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 
                                                                                                   'TRASLADAR EXTENDER DUAL BAND',
                                                                                                   $objProductoInternet);

                if(is_object($objCaractTrasladarExtenderDB))
                {
                    $strTrasladarExtenderDB = "SI";
                }
                
                if($objServicio->getEstado() != 'Activo' && $objServicio->getProductoId()->getNombreTecnico() === "WDB_Y_EDB")
                { 
                    
                    if($objServicio->getEstado() == 'Asignada')
                    {
                        $intIdElemento              = "";
                        $strNombreCpe               = "";
                        $strTipoElementoCpe         = "CPE ONT";
                        $strEsWifiDualBand          = "SI";
                        $strCambioEquiposDualBand   = "SI";

                        $arrayPeticionCambio[] = array( 'idEmpresa'              => $intEmpresaId,
                                                        'prefijoEmpresa'         => $strEmpresaCod,
                                                        'idServicio'             => $intIdServicio,
                                                        'idElemento'             => $intIdElemento,
                                                        'modeloCpe'              => $strModeloOnt,
                                                        'nombreCpe'              => $strNombreCpe,
                                                        'macCpe'                 => $strMacOnt,
                                                        'strRegistraEquipo'      => "N",
                                                        'serieCpe'               => $strSerieOnt,
                                                        'descripcionCpe'         => $strDescripcionOnt,
                                                        'tipoElementoCpe'        => $strTipoElementoCpe,
                                                        'strEsCambioEquiSoporteMasivo'  => "NO",
                                                        'usrCreacion'            => $strUsrCreacion,
                                                        'esPseudoPe'             => "N",
                                                        'ipCreacion'             => $strIpCreacion,
                                                        'serNaf'                 => $this->container->getParameter('database_host_naf'),
                                                        'ptoNaf'                 => $this->container->getParameter('database_port_naf'),
                                                        'sidNaf'                 => $this->container->getParameter('database_name_naf'),
                                                        'usrNaf'                 => $this->container->getParameter('user_naf'),
                                                        'pswNaf'                 => $this->container->getParameter('passwd_naf'),
                                                        'host'                   => $this->container->getParameter('host'),
                                                        'strEsWifiDualBand'      => $strEsWifiDualBand,
                                                        'intIdServicioInternet'  => $intIdServicioInternet,
                                                        'cambioEquiposDualBand'  => $strCambioEquiposDualBand,
                                                  );

                        $arrayResponseCambio = $serviceCambioElemento->cambioElemento($arrayPeticionCambio);

                        if($arrayResponseCambio[0]['status'] != "OK")
                        {
                            $strResultCambio = $arrayResponseCambio[0]['mensaje'];
                            throw new \Exception($strResultCambio);
                        }
                        else
                        {
                            $strResultCambio = "OK";
                            $strMensajeExito = "¡Cambio de ONT realizado con éxito! <br> <b> "
                                    . "Favor realizar la sincronización del extender con el ONT para su activación </b>";
                            
                            $arrayResultadoWs['status']   = $this->status['OK'];
                            $arrayResultadoWs['mensaje']  = $strMensajeExito;

                            return $arrayResultadoWs;
                        }
                    }    
                    
                    $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneBy(array( "servicioId" => $objServicio->getId()));
                    if (!is_object($objServicioTecnico))
                    {
                        throw new \Exception("No se encontró información técnica del servicio");
                    }
                    $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
                    if (!is_object($objAccion))
                    {
                        throw new \Exception("No se encontró información de la acción");
                    }

                    $arrayPeticiones['objServicio']                     = $objServicio;
                    $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
                    $arrayPeticiones['objAccion']                       = $objAccion;
                    $arrayPeticiones['strEmpresaCod']                   = $intEmpresaId;
                    $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
                    $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
                    $arrayPeticiones['strSerieExtenderDualBand']        = $strSerieExtenderDualBand;
                    $arrayPeticiones['strModeloExtenderDualBand']       = $strModeloExtenderDualBand;
                    $arrayPeticiones['strMacExtenderDualBand']          = $strMacExtenderDualBand;
                    $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
                    $arrayPeticiones['strTipoServicio']                 = $strTipoServicio;
                    $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
                    $arrayPeticiones['strObservacion']                  = $strObsActivarServicio;
                    $arrayPeticiones['strPrefijoEmpresa']               = $strEmpresaCod;
                    $arrayPeticiones['objEmpleadoSesion']               = $strUsrCreacion;
                    $arrayPeticiones['strOrigen']                       = $strOrigenProgreso;
                    
                    
                    $arrayConfirmarServicio = $serviceConfirmarServicio->confirmarServicioExtenderDualBand($arrayPeticiones);
                    $strStatus              = $arrayConfirmarServicio["status"];
                    $strMensajeActiva       = $arrayConfirmarServicio["mensaje"];
                    $objServicioInternet    = $arrayConfirmarServicio["objServicioInternet"];
                    
                    if ($strStatus !== "OK")
                    {
                        throw new \Exception($strMensajeActiva);
                    }
                    
                    $objServproductocaract  = new InfoServicioProdCaract();	
                    $objServproductocaract->setServicioId($intIdServicio);
                    $objServproductocaract->setProductoCaracterisiticaId("446");
                    $objServproductocaract->setValor($strMacExtenderDualBand);
                    $objServproductocaract->setEstado("Activo");	
                    $objServproductocaract->setUsrCreacion($strUsrCreacion);	
                    $objServproductocaract->setFeCreacion(new \DateTime('now'));	
                    $emComercial->persist($objServproductocaract);
                    $emComercial->flush();
                    
                }
                else if($objServicio->getEstado() != 'Activo' && $objServicio->getProductoId()->getNombreTecnico() === "EXTENDER_DUAL_BAND"
                        && ($objServicio->getTipoOrden() == 'N' || ($objServicio->getTipoOrden() == 'T' && $strTrasladarExtenderDB == "NO")))
                { 
                    if($objServicioPunto->getEstado() == 'Activo')
                    {
                        $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->findOneBy(array( "servicioId" => $objServicio->getId()));

                        if (!is_object($objServicioTecnico))
                        {
                            throw new \Exception("No se encontró información técnica del servicio");
                        }

                        $objServicioTecnicoInternet = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->findOneBy(array( "servicioId" => $intIdServicioInternet));

                        if (!is_object($objServicioTecnicoInternet))
                        {
                            throw new \Exception("No se encontró información técnica del servicio de Internet");
                        }

                        $objElemento        = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                            ->find($objServicioTecnicoInternet->getElementoClienteId());

                        if (!is_object($objElemento))
                        {
                            throw new \Exception("No se encontró información del elemento del servicio de Internet");
                        }

                        $objParametroCab = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                        ->findOneBy( array( 'nombreParametro' => 'MODELOS_EQUIPOS_VALIDAR_MOVIL',
                                            'estado'      => 'Activo' ) );

                        $intIdParametroCab = 0;

                        if($objParametroCab)
                        {
                            $intIdParametroCab = $objParametroCab->getId();
                        }

                        $arrayDetFiltro             = array(
                                                            'parametroId'   => $intIdParametroCab,
                                                            'estado'        => 'Activo'     
                                                        );
                        
                        $arrayModelosOnt = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findBy($arrayDetFiltro); 

                        $strNombreModeloElemento    = $objElemento->getModeloElementoId()->getNombreModeloElemento();
                        $boolModeloCompatible       = false;

                        foreach($arrayModelosOnt as $objModelosOnt)
                        {
                            if($strNombreModeloElemento == $objModelosOnt->getValor2())
                            {
                                $boolModeloCompatible = true;  
                                break;
                            }
                        }                        

                        if($boolModeloCompatible)
                        {
                            $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
                        
                            if (!is_object($objAccion))
                            {
                                throw new \Exception("No se encontró información de la acción");
                            }
    
                            $arrayPeticiones['objServicio']                     = $objServicio;
                            $arrayPeticiones['objServicioTecnico']              = $objServicioTecnico;
                            $arrayPeticiones['objAccion']                       = $objAccion;
                            $arrayPeticiones['strEmpresaCod']                   = $intEmpresaId;
                            $arrayPeticiones['strUsrCreacion']                  = $strUsrCreacion;
                            $arrayPeticiones['strIpCreacion']                   = $strIpCreacion;
                            $arrayPeticiones['strSerieExtenderDualBand']        = $strSerieExtenderDualBand;
                            $arrayPeticiones['strModeloExtenderDualBand']       = $strModeloExtenderDualBand;
                            $arrayPeticiones['strMacExtenderDualBand']          = $strMacExtenderDualBand;
                            $arrayPeticiones['intIdServicioInternet']           = $intIdServicioInternet;
                            $arrayPeticiones['strTipoServicio']                 = $strTipoServicio;
                            $arrayPeticiones['intIdSolicitudServicio']          = $intIdSolicitudServicio;
                            $arrayPeticiones['strObservacion']                  = $strObsActivarServicio;
                            $arrayPeticiones['strPrefijoEmpresa']               = $strEmpresaCod;
                            $arrayPeticiones['objEmpleadoSesion']               = $strUsrCreacion;
                            $arrayPeticiones['strOrigen']                       = $strOrigenProgreso;
    
    
                            $arrayConfirmarServicio = $serviceConfirmarServicio->confirmarServicioExtenderDualBand($arrayPeticiones);
                            $strStatus              = $arrayConfirmarServicio["status"];
                            $strMensajeActiva       = $arrayConfirmarServicio["mensaje"];
                            $objServicioInternet    = $arrayConfirmarServicio["objServicioInternet"];
    
                            if ($strStatus !== "OK")
                            {
                                throw new \Exception($strMensajeActiva);
                            }
    
                            $objServproductocaract  = new InfoServicioProdCaract();	
                            $objServproductocaract->setServicioId($intIdServicio);
                            $objServproductocaract->setProductoCaracterisiticaId("446");
                            $objServproductocaract->setValor($strMacExtenderDualBand);
                            $objServproductocaract->setEstado("Activo");	
                            $objServproductocaract->setUsrCreacion($strUsrCreacion);	
                            $objServproductocaract->setFeCreacion(new \DateTime('now'));	
                            $emComercial->persist($objServproductocaract);
                            $emComercial->flush();
                        }
                        else
                        {
                            throw new \Exception("No se puede activar el producto Extender Dual Band, "
                                                    ."el modelo del ONT no es compatible.");
                        } 
                    }
                    else
                    {
                        throw new \Exception("No se puede activar el producto Extender Dual Band, "
                                                ."el servicio de Internet no se encuentra activo.");
                    }    
                } 
                else if($objServicio->getEstado() != 'Activo' && $objServicio->getProductoId()->getNombreTecnico() === "EXTENDER_DUAL_BAND"
                        && $objServicio->getTipoOrden() == 'T' && $strTrasladarExtenderDB == "SI")
                {
                    $arrayPeticiones = array( 'intIdServicio'         => $intIdServicio,
                                              'intIdServicioInternet' => $intIdServicioInternet,
                                              'strSerieElemento'      => $strSerieExtenderDualBand,
                                              'strMacElemento'        => $strMacExtenderDualBand,                
                                              'strUsrCreacion'        => $strUsrCreacion,
                                              'strIpCreacion'         => $strIpCreacion,
                                              'strEmpresaCod'         => $intEmpresaId
                                            );
                    
                    $arrayRespuestaTrasladoEDB = $serviceActivarPuerto->trasladarExtenderDualBand($arrayPeticiones);
                    
                    $strStatus         = $arrayRespuestaTrasladoEDB['strStatus'];
                    $strMensaje        = $arrayRespuestaTrasladoEDB['strMensaje'];
                    
                    if ($strStatus !== "OK")
                    {
                        throw new \Exception($strMensaje);
                    }            
                }
                else if($objServicio->getEstado() != 'Activo' && $objServicio->getProductoId()->getCodigoProducto() === "CABL")
                {
                    // Se cambia descripcion de la solicitud por la de cableado ethernet
                    $objAdmiTipoSolicitudPla = $emComercial->getRepository("schemaBundle:AdmiTipoSolicitud")
                                              ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD DE INSTALACION CABLEADO ETHERNET',
                                                                'estado'               => 'Activo'));
                    
                    if(is_object($objAdmiTipoSolicitudPla) && !empty($objAdmiTipoSolicitudPla))
                    {
                        $arrayParametrosPlan = array ('Servicio'          => $intIdServicio,
                                                      'TipoSolicitud'     => $objAdmiTipoSolicitudPla->getId(),
                                                      'Producto'          => $objServicio->getProductoId()->getId());
                        
                        $arrayDetalleSolicitudPla = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                ->getEstadoSolicitudAdicional($arrayParametrosPlan);
                       
                        if(is_array($arrayDetalleSolicitudPla) && !empty($arrayDetalleSolicitudPla))
                        {
                            $objDetalleSol = $arrayDetalleSolicitudPla[0];
                            $objDetalleSol->setEstado('Activo');
                            $emComercial->persist($objDetalleSol);
                            $emComercial->flush();

                            $objDetalleSolHist = $emComercial->getRepository("schemaBundle:InfoDetalleSolHist")
                                                               ->findOneBy(array('detalleSolicitudId' => $objDetalleSol->getId()));
                            
                            if(is_object($objDetalleSolHist) && !empty($objDetalleSolHist))
                            {
                                $entityDetalleSolHist = new InfoDetalleSolHist();
                                $entityDetalleSolHist->setDetalleSolicitudId($objDetalleSol);
                                $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                                $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                                $entityDetalleSolHist->setEstado('Activo');
                                $emComercial->persist($entityDetalleSolHist);
                                $emComercial->flush();
                            }

                            $objDetalleSolCaract = $emComercial->getRepository("schemaBundle:InfoDetalleSolCaract")
                                                               ->findOneBy(array(
                                                                            'detalleSolicitudId' => $objDetalleSol->getId(),
                                                                            'valor'              => $objServicio->getProductoId()->getId(),
                                                                            'estado'             => 'PrePlanificada'));
                            
                            if(is_object($objDetalleSolCaract) && !empty($objDetalleSolCaract))
                            {
                                $objDetalleSolCaract->setEstado('Activo');
                                $emComercial->persist($objDetalleSolCaract);
                                $emComercial->flush();
                            }
                        }

                        $objServicio = $emComercial->getRepository("schemaBundle:InfoServicio")
                                        ->findOneBy(array(
                                                            'id'           => $intIdServicio,
                                                            'productoId'   => $objServicio->getProductoId()->getId(),
                                                            'estado'       => array('Asignada', 'AsignadoTarea')));
                        
                        if(is_object($objServicio) && !empty($objServicio))
                        {
                            $objServicio->setEstado('Activo');
                            $emComercial->persist($objServicio);
                            $emComercial->flush();

                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($objServicio);
                            $objServicioHist->setObservacion('Se Confirmo el Servicio');
                            $objServicioHist->setIpCreacion($strIpCreacion);
                            $objServicioHist->setUsrCreacion($strUsrCreacion);
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setAccion('confirmarServicio');
                            $objServicioHist->setEstado('Activo');
                            $emComercial->persist($objServicioHist);
                            $emComercial->flush();
                        }                       
                        
                    }
                }
                else if($objServicio->getEstado() == 'Activo' && $objServicio->getPlanId() != null)
                {
                    // Activamos las solicitudes de cableado, que esten asignadas de ese servicio
                    $arrayDetSolicitudes = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                        ->findByParameters(array('servicioId' => $objServicio->getId()));
                    foreach($arrayDetSolicitudes as $detSolicitud)
                    {
                        $objTipSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                        ->findOneById($detSolicitud['tipoSolicitudId']);
                        if ($objTipSolicitud->getDescripcionSolicitud() == 'SOLICITUD DE INSTALACION CABLEADO ETHERNET')
                        {
                            $entityDetSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                            ->findOneById($detSolicitud['id']);
                            if ($entityDetSolicitud->getEstado() == 'Asignada' || 
                                $entityDetSolicitud->getEstado() == 'AsignadoTarea')
                            {
                                $entityDetSolicitud->setEstado('Activo');
                                $emComercial->persist($entityDetSolicitud);
                                $emComercial->flush();

                                $entityDetalleSolHist = new InfoDetalleSolHist();
                                $entityDetalleSolHist->setDetalleSolicitudId($entityDetSolicitud);
                                $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                                $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                                $entityDetalleSolHist->setEstado('Activo');
                                $emComercial->persist($entityDetalleSolHist);
                                $emComercial->flush();
                            
                                $objServicioHist = new InfoServicioHistorial();
                                $objServicioHist->setServicioId($objServicio);
                                $objServicioHist->setObservacion('Se activo el Cableado Ethernet');
                                $objServicioHist->setIpCreacion($strIpCreacion);
                                $objServicioHist->setUsrCreacion($strUsrCreacion);
                                $objServicioHist->setFeCreacion(new \DateTime('now'));
                                $objServicioHist->setEstado('Activo');
                                $emComercial->persist($objServicioHist);
                                $emComercial->flush();
                            }
                        }
                    }
                }  
                else if($objServicio->getEstado() != 'Activo' && in_array($objServicio->getProductoId()->getNombreTecnico(), $arrayParamProducNetCam))
                {
                    
                    $strPermitirRegistroElemento  = "N";
                    
                    if(is_object($objServicio->getProductoId()))
                    {
                        $arrayParametrosProductoPermitido = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                      ->getOne('PROYECTO NETLIFECAM',
                                                                               'INFRAESTRUCTURA',
                                                                               'ACTIVACION PARA NETLIFECAM',
                                                                               "PRODUCTO CONFIGURADO PARA REGISTRAR ELEMENTO",
                                                                               $objServicio->getProductoId()->getId(),
                                                                               '',
                                                                               '',
                                                                               '',
                                                                               '',
                                                                               $intEmpresaId);

                        if(isset($arrayParametrosProductoPermitido["valor1"]) && !empty($arrayParametrosProductoPermitido["valor1"]))
                        {
                            $strPermitirRegistroElemento  = "S";
                        }
                    }
                    
                    $arrayPeticiones = array(
                                                'idServicio'                    => $objServicio->getId(),
                                                'idProducto'                    => $objServicio->getProductoId()->getId(),
                                                'observacionActivarServicio'    => $strObsActivarServicio,
                                                'idAccion'                      => $intIdAccion,              
                                                'strNombreTecnico'              => $objServicio->getProductoId()->getNombreTecnico(),
                                                'productoPermitidoRegistroEle'  => $strPermitirRegistroElemento,
                                                
						'serieTarjeta'                  => $strSerieTarjeta,
                                                'modeloTarjeta'                 => $strModeloTarjeta,
                                                'capacidadTarjeta'              => $strCapacidadTarjeta,                        
                                                'marcaTarjeta'                  => $strMarcaTarjeta,
                                                
                                                'strTipoElemento'               => $strTipoElemento,
                                                'strSerieSmartWifi'             => $strSerieSmartWifi,
                                                'strModeloSmartWifi'            => $strModeloSmartWifi,
                                                'strMacSmartWifi'               => $strMacSmartWifi,
                                                
                                                'usrCreacion'                   => $strUsrCreacion,
                                                'ipCreacion'                    => $strIpCreacion,
                                                'prefijoEmpresa'                => $strEmpresaCod,
                                                'idEmpresa'                     => $intEmpresaId,
                                                'intIdServicioInternet'         => $intIdServicioInternet,
                                                'origen'                        => $strOrigenProgreso 
                                            );
                    
                    $arrayRespuesta     = $serviceConfirmarServicio->confirmarServicio($arrayPeticiones);
                    $strMensajeActivar  = $arrayRespuesta[0]['mensaje'];
                    
                    if ($strMensajeActivar != "OK") 
                    {
                        throw new \Exception("No se pudo realizar la activación, verifique el servicio de internet "
                                             . "que esté activo o escalar una tarea a Soporte Sistemas");
                    }
                }
            
            $arrayProgresoActivacion     = array(
                                                'strCodEmpresa'         => $intEmpresaId,
                                                'intIdTarea'            => $intIdComunicacion,
                                                'intIdDetalle'          => $intDetalleId,
                                                'strCodigoTipoProgreso' => $strCodProgresActivacion,
                                                'intIdServicio'         => $intIdServicio,
                                                'strOrigen'             => $strOrigenProgreso,
                                                'strUsrCreacion'        => $strUsrCreacion,
                                                'strIpCreacion'         => $strIpCreacion);
                        
            $arrayRespuesta         = $serviceSoporte->ingresarProgresoTarea($arrayProgresoActivacion); 
            $strMensajeProg         = $arrayRespuesta['mensaje'];
            $strStatusProg          = $arrayRespuesta['status'];
            
            if($strStatusProg != 'OK' && strpos($strMensajeProg, 'Ya existe un registro del progreso de la tarea') === false)
            {
                throw new \Exception($strMensajeProg);   
            }

            $arrayParametrosMail = array(
                "servicio" => $objServicio,
                "prefijoEmpresa" => $strEmpresaCod,
                "empleadoSesion" => $strUsrCreacion,
                "idEmpresa" => $intEmpresaId,
                "user" => $strUsrCreacion,
                "ipClient" => $strIpCreacion
            );

            $serviceConfirmarServicio->envioMailConfirmarServicio($arrayParametrosMail);
        }
        catch(\Exception $exception)
        {
            $arrayParametroMapeoError     = array(
                                                'mensaje'               => $exception->getMessage(),
                                                'mensajeDefault'        => $exception->getMessage(),
                                                'nombreParametro'       => "MAPEO_ERRORES_ACTIVACION_MD",
                                                'empresaId'             => $intEmpresaId,
                                                'user'                  => $strUsrCreacion);
        
            $arrayResultadoWs['status']   = $this->status['ERROR'];
            $arrayResultadoWs['mensaje']  = $serviceUtil->getMapeoMensajeError($arrayParametroMapeoError);
            
            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
            
            return $arrayResultadoWs;
        }
        
        $arrayResultadoWs['status']   = $this->status['OK'];
        $arrayResultadoWs['mensaje']  = $strMensajeExito;
        
        return $arrayResultadoWs;
    }

    /**
     * Método encargado de obtener los equipos asignado a un técnico.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 04-05-2021
     *
     * @param  Array $arrayParametros
     * @return Array $arrayRespuesta
     */
    private function getEquiposAsignados($arrayParametros)
    {
        $emNaf         = $this->getDoctrine()->getManager("telconet_naf");
        $serviceUtil   = $this->get('schema.Util');
        $arrayData     = $arrayParametros['data'];
        $strUsuario    = $arrayParametros['user'] ? $arrayParametros['user'] : 'Telcos+';
        $strIpUsuario  = $arrayParametros['ip']   ? $arrayParametros['ip']   : '127.0.0.1';

        try
        {
            if (!isset($arrayData['idEmpresa']) || (isset($arrayData['idEmpresa']) && empty($arrayData['idEmpresa'])))
            {
                throw new \Exception("Error : idEmpresa Invalido");
            }

            if (!isset($arrayData['idPersona']) || (isset($arrayData['idPersona']) && empty($arrayData['idPersona'])))
            {
                throw new \Exception("Error : idPersona Invalido");
            }

            $arrayRespuesta = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                    ->obtenerEquiposAsignados(array('serviceUtil'               => $serviceUtil,
                                                    'strUsuario'                => $strUsuario,
                                                    'strIpUsuario'              => $strIpUsuario,
                                                    'strEstadoEquipo'           => $arrayData['estadoEquipo'],
                                                    'boolPerteneceElementoNodo' => $arrayData['perteneceElementoNodo'],
                                                    'strIdEmpresa'              => $arrayData['idEmpresa'],
                                                    'intIdPersona'              => $arrayData['idPersona'],
                                                    'strNumeroSerie'            => $arrayData['serieElemento'],
                                                    'strModelo'                 => $arrayData['modeloElemento'],
                                                    'strTipoElemento'           => $arrayData['tipoElemento'],
                                                    'strDescripcion'            => $arrayData['descripcionElemento']));
        }
        catch (\Exception $objException)
        {
            $strMessage = 'Error en el WebService getEquiposAsignados';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode('Error : ', $objException->getMessage())[1];
            }

            $serviceUtil->insertError('TecnicoWSController',
                                      'getEquiposAsignados',
                                       $objException->getMessage(),
                                       $strUsuario,
                                       $strIpUsuario);

            $arrayRespuesta = array ('status' => false,'message' => $strMessage);
        }
        return $arrayRespuesta;
    }

    /**
     * Método encargado de obtener los elemento adicionales 
     * agregar al cliente o al nodo asignado a un técnico.
     *
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.0 10-1-2023
     *
     *
     */
    private function getElementosAdicionalesClienteNodo($arrayParametros)
    {
        $emNaf         = $this->getDoctrine()->getManager("telconet_naf");
        $serviceUtil   = $this->get('schema.Util');
        $arrayData     = $arrayParametros['data'];
        $strUsuario    = $arrayParametros['user'] ? $arrayParametros['user'] : 'Telcos+';
        $strIpUsuario  = $arrayParametros['ip']   ? $arrayParametros['ip']   : '127.0.0.1';

        try
        {
            if (!isset($arrayData['idEmpresa']) || (isset($arrayData['idEmpresa']) && empty($arrayData['idEmpresa'])))
            {
                throw new \Exception("Error : idEmpresa Invalido");
            }

            if (!isset($arrayData['idPersona']) || (isset($arrayData['idPersona']) && empty($arrayData['idPersona'])))
            {
                throw new \Exception("Error : idPersona Invalido");
            }

            $arrayRespuesta = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                ->getElementosAdicionalesClienteNodo(array('serviceUtil'        => $serviceUtil,
                                                    'strUsuario'                => $strUsuario,
                                                    'strIpUsuario'              => $strIpUsuario,
                                                    'strEstadoEquipo'           => $arrayData['estadoEquipo'],
                                                    'boolPerteneceElemento'     => $arrayData['perteneceElemento'] == 1 ? true : false,
                                                    'strIdEmpresa'              => $arrayData['idEmpresa'],
                                                    'intIdPersona'              => $arrayData['idPersona'],
                                                    'strNumeroSerie'            => $arrayData['serieElemento'],
                                                    'strModelo'                 => $arrayData['modeloElemento'],
                                                    'strTipoElemento'           => $arrayData['tipoElemento'],
                                                    'strDescripcion'            => $arrayData['descripcionElemento']));
        }
        catch (\Exception $objException)
        {
            $strMessage = 'Error en el WebService getEquiposAsignados';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode('Error : ', $objException->getMessage())[1];
            }

            $serviceUtil->insertError('TecnicoWSController',
                                      'getEquiposAsignados',
                                       $objException->getMessage(),
                                       $strUsuario,
                                       $strIpUsuario);

            $arrayRespuesta = array ('status' => false,'message' => $strMessage);
        }
        return $arrayRespuesta;
    }

    /**
     * Método encargado de realizar el retiro de un elemento que pertenece a un nodo.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 22-06-2021
     *
     * @param  Array $arrayParametros
     * @return Array $arrayRespuesta
     */
    private function retirarElementoPerteneceNodo($arrayParametros)
    {
        $serviceElemento =  $this->get('tecnico.InfoElemento');
        $serviceUtil     =  $this->get('schema.Util');
        $arrayData       =  $arrayParametros['data'];
        $strUsuario      =  $arrayParametros['user'] ? $arrayParametros['user'] : 'Telcos+';
        $strIpUsuario    =  $arrayParametros['ip']   ? $arrayParametros['ip']   : '127.0.0.1';
        $strMessage      = 'Proceso Ejecutado';
        $arrayResRetiro  =  array();

        try
        {
            $arrayRetirarElemento = array();
            $arrayRetirarElemento['strIdEmpresa']       = $arrayData['idEmpresa'];
            $arrayRetirarElemento['intIdDetalle']       = $arrayData['idDetalle'];
            $arrayRetirarElemento['intIdElementoNodo']  = $arrayData['idElementoNodo'];
            $arrayRetirarElemento['strTipoResponsable'] = $arrayData['tipoResponsable'];
            $arrayRetirarElemento['intIdResponsable']   = $arrayData['idResponsable'];
            $arrayRetirarElemento['strUsuario']         = $strUsuario;
            $arrayRetirarElemento['strIpUsuario']       = $strIpUsuario;

            foreach ($arrayData['equiposNodo'] as $arrayEquiposNodo)
            {
                $arrayRetirarElemento['intIdSolicitud'] = $arrayEquiposNodo['idSolicitud'];
                $arrayRetirarElemento['intIdElemento']  = $arrayEquiposNodo['idElemento'];
                $arrayResRetiro[] = $serviceElemento->retirarElementoPerteneceNodo($arrayRetirarElemento);
            }

            $arrayRespuesta = array ('status'  => "OK",
                                     'message' => $strMessage,
                                     'data'    => $arrayResRetiro);
        }
        catch (\Exception $objException)
        {
            $strMessage = 'Error en el WebService retirarElementoPerteneceNodo';
            $serviceUtil->insertError('TecnicoWSController',
                                      'retirarElementoPerteneceNodo',
                                       $objException->getMessage(),
                                       $strUsuario,
                                       $strIpUsuario);

            $arrayRespuesta = array ('status' => "ERROR",'message' => $strMessage);
        }
        return $arrayRespuesta;
    }

     /**
     * Función que sirve para activar servicios de internet Netlife y productos adicionales.
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.0 21-12-2020
     *
     *
     * Se obtiene el perfil utilizado en instalaciones Md con tecnología Tellion.
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.1 12-02-2021
     *
     *
     * Se modifica webservice para permitir la activación del servicio de internet
     * y de productos adicionales por separado.
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 03-03-2021 
     * 
     * 
     * Se agrega validación para realizar el traslado de un equipo Wifi Dual Band
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.3 09-03-2021 
     * 
     * Se agrega validación para verificar si se tiene un equipo Extender Dual Band en un traslado.
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.4 26-05-2021 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 07-08-2021 Se agrega validación para que se permita activar servicios El Canal del Fútbol al activar el servicio de Internet
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.6 25-08-2021 - Se modifica mensaje de activación en caso que tenga agregado un Extender Dual Band en un traslado.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.7 22-11-2021 Se agrega validación incluir activacion de productos GolTV
     * 
     * @param array $arrayData
     * @return array $arrayResultadoWs
     */
    private function putActivacionMd($arrayData)
    {
        $intEmpresaId = $arrayData['data']['empresaId'];
        $strPrefijoEmpresa = $arrayData['data']['prefijoEmpresa'];
        $intIdDetSolPlanif = $arrayData['data']['detSolicitudId'];
        $intIdServicio = $arrayData['data']['idServicio'];
        $intIdComunicacion = $arrayData['data']['comunicacionId'];
        $intDetalleId = $arrayData['data']['detalleId'];
        $intIdElementoConector = $arrayData['data']['idElementoConector'];
        $intIdInterfaceElementoConector = $arrayData['data']['idInterfaceElementoConector'];
        $intIdInterfaceOltMigracion = $arrayData['data']['idInterfaceOltMigracion'];
        $intIdOltMigracion = $arrayData['data']['idOltMigracion'];
        $intIdSplitterMigracion = $arrayData['data']['idSplitterMigracion'];
        $strDescripcionWifiAct = $arrayData['data']['descripcionWifi'];
        $strDescripcionOntAct = $arrayData['data']['descripcionOnt'];
        $strIdOficinaActiv = $arrayData['data']['idOficina'];
        $intIdProducto = $arrayData['data']['idProducto'];
        $strPerfil = $arrayData['data']['perfil'];
        $strLogin = $arrayData['data']['login'];
        $intIdInterfaceElemento = $arrayData['data']['idInterfaceElemento'];
        $strNombreInterfaceElementoConector = $arrayData['data']['nombreInterfaceElementoConector'];
        $strUltimaMilla = $arrayData['data']['ultimaMilla'];
        $intIdPlan = $arrayData['data']['idPlan'];
        $strMacWifi = $arrayData['data']['macWifi'];
        $strSerieWifi = $arrayData['data']['serieWifi'];
        $strModeloWifi = $arrayData['data']['modeloWifi'];
        $strMacOnt = $arrayData['data']['macOnt'];
        $strSerieOnt = $arrayData['data']['serieOnt'];
        $strModeloOnt = $arrayData['data']['modeloOnt'];
        $strSsid = $arrayData['data']['ssid'];
        $strPassword = $arrayData['data']['password'];
        $strNumeroPc = $arrayData['data']['numeroPc'];
        $strModoOperacion = $arrayData['data']['modoOperacion'];
        $strObservacionCliente = $arrayData['data']['observacionCliente'];
        $strOrigenActiv = $arrayData['data']['origenMovil'];
        $strUsrCreacion = $arrayData['user'];
        $strIpCreacion = "127.0.0.1";
        $strOrigenProgreso = "MOVIL";
        $strMensajeUsuario = "¡Servicio activado!";
        $intIdAccion = "847";
        $strTipoServicio = "PRODUCTO";
        $strObsActivarServicio = "Activando producto Wifi Md desde móvil";
        $strCodigoProgreso = "";
        $strIpRecursosRed = "";
        $strMascaraRecursosRed = "";
        $strGatewayRecursosRed = "";
        $strScopeRecursosRed = "";
        $strTipoRecursosRed = "";
        $strAccion = "";
        $serviceUtil = $this->get('schema.Util');
        $serviceSoporte = $this->get('soporte.SoporteService');
        $objActivarPuerto = $this->get('tecnico.InfoActivarPuerto');
        $emSoporte = $this->getDoctrine()->getManager("telconet_soporte");
        $emComercial = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura = $this->getDoctrine()->getManager("telconet_infraestructura");
        $arrayServiciosProdAd = $arrayData['data']['serviciosActivar'];
        $serviceConfirmarServicio = $this->get('tecnico.InfoConfirmarServicio');
        $emSeguridad = $this->getDoctrine()->getManager('telconet_seguridad');

        $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
            ->findOneById($intIdServicio);
        $serviceInfoServTec = $this->get('tecnico.InfoServicioTecnico');

        try
        {
            $arrayEstadoProceso = $emSoporte->getRepository('schemaBundle:InfoEstadoInstalacion')->ObtenerEstadoProceso($intIdServicio);
            $strAccion = "Verificando estado de instalación";


            if (isset($arrayEstadoProceso['estado']) && !empty($arrayEstadoProceso['estado']) && $arrayEstadoProceso['estado'] == "REALIZADO")
            {
                $strMensajeUsuario = "¡Servicio activado!";
                $arrayResultadoWs['status'] = $this->status['OK'];
                $arrayResultadoWs['mensaje'] = $strMensajeUsuario;
                return $arrayResultadoWs;
            }
            else
            {

                if ($objServicio->getEstado() != 'Asignada' && $objServicio->getEstado() != 'EnVerificacion'
                    && $objServicio->getEstado() != 'Activo')
                {

                    $strAccion = "Obteniendo ip para recursos de red";
                    $strEsPlan = "no";
                    $boolFlagProd = false;
                    $serviceTecnicoAsig = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->findOneBy(array('servicioId' => $intIdServicio));

                    //obtener el elemento olt
                    $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                        ->find($serviceTecnicoAsig->getElementoId());
                    $intIdElemento = $objElemento->getId();
                    $strMarcaElemento = $objElemento->getModeloElementoId()->getMarcaElementoId();


                    $serviceRecursosRed = $this->get('planificacion.RecursosDeRed');

                    $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')
                        ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO",
                            "estado" => "Activo",
                            "empresaCod" => $intEmpresaId));

                    //verificar si el servicio tiene plan o producto
                    if ($objServicio->getPlanId())
                    {
                        $strEsPlan = "si";

                        //verificar si el plan tiene ip entre sus productos
                        $objPlanDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                            ->findBy(array("planId" => $objServicio->getPlanId()->getId()));
                        $objProdIp = $emComercial->getRepository('schemaBundle:AdmiProducto')
                            ->findOneBy(array("nombreTecnico" => "IP", "empresaCod" => $intEmpresaId, "estado" => "Activo"));
                        for ($intIndex = 0; $intIndex < count($objPlanDet); $intIndex++)
                        {
                            if ($objPlanDet[$intIndex]->getProductoId() == $objProdIp->getId())
                            {
                                $boolFlagProd = true;
                                break;
                            }
                        }
                    }//if($objServicio->getPlanId())

                    //CARACTERISTICA TRASLADO
                    $objTraslado = $serviceInfoServTec->getServicioProductoCaracteristica($objServicio, "TRASLADO", $objProducto);

                    if ($objTraslado)
                    {
                        $intIdservicioAnterior = $objTraslado->getValor();
                        $objServicioTecnicoAnt = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                            ->findOneByServicioId($intIdservicioAnterior);
                        if ($serviceTecnicoAsig->getElementoId() == $objServicioTecnicoAnt->getElementoId())
                        {
                            //copiar la Ip
                            $objInfoIp = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                ->findOneBy(array("servicioId" => $intIdservicioAnterior,
                                    "estado" => 'Activo'));
                            if ($objInfoIp)
                            {
                                //buscar scopes
                                $arrayScopeOlt = $emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                    ->getScopePorIpFija($objInfoIp->getIp(),
                                        $serviceTecnicoAsig->getElementoId());
                                if ($arrayScopeOlt)
                                {
                                    $strScope = $arrayScopeOlt['NOMBRE_SCOPE'];
                                }
                                else
                                {
                                    $strScope = "";
                                }
                                $arrayResultado = array();
                                $arrayResultado['ips'] = array();
                                $arrayResultado['error'] = null;
                                $arrayResultado['faltantes'] = 0;
                                $arrayResultado['elemento'] = $serviceTecnicoAsig->getElementoId();
                                $arrayIp = array();
                                $arrayIp['ip'] = $objInfoIp->getIp();
                                $arrayIp['tipo'] = 'FIJA';
                                $arrayIp['scope'] = $strScope;
                                $arrayResultado['ips'][] = $arrayIp;

                                //Retorna la ip si es la misma caja y mismo olt
                                if ($boolFlagProd)
                                {
                                    $arrayRespuesta = array(
                                        'ip' => $objInfoIp->getIp(),
                                        'mascara' => "",
                                        'gateway' => "",
                                        'tipo' => 'FIJA',
                                        'scope' => $strScope,
                                        'flag' => $boolFlagProd
                                    );
                                }
                                else
                                {
                                    $arrayRespuesta = array(
                                        'ip' => "",
                                        'mascara' => "",
                                        'gateway' => "",
                                        'tipo' => "",
                                        'scope' => "",
                                        'flag' => $boolFlagProd
                                    );
                                }

                                $arrayResultadoData['ipRecurso'] = $arrayRespuesta;

                                $strIpRecursosRed = $arrayResultadoData['ipRecurso']['ip'];
                                $strMascaraRecursosRed = $arrayResultadoData['ipRecurso']['mascara'];
                                $strGatewayRecursosRed = $arrayResultadoData['ipRecurso']['gateway'];
                                $strScopeRecursosRed = $arrayResultadoData['ipRecurso']['scope'];
                                $strTipoRecursosRed = $arrayResultadoData['ipRecurso']['tipo'];

                            }//if ($objInfoIp)
                        }
                    }

                    if ($boolFlagProd)
                    {
                        //se valida marca del elemento,en caso de venir nula se recupera la marca del elemento del servicio de internet
                        if ($strMarcaElemento == null || $strMarcaElemento == "" || $strMarcaElemento == 'null')
                        {
                            $intIdElemento = $emComercial->getRepository("schemaBundle:InfoElemento")
                                ->getElementoParaPerfil($intIdServicio, $strEsPlan, $objServicio->getPuntoId());
                            if (strpos($intIdElemento, 'Error') !== false)
                            {
                                $arrayResultado['error'] = $intIdElemento;
                            }
                            else
                            {
                                $entityElementoOlt = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                    ->find($intIdElemento);
                                $strMarcaElemento = $entityElementoOlt->getModeloElementoId()
                                    ->getMarcaElementoId()->getNombreMarcaElemento();
                            }
                        }
                        if ($strMarcaElemento == 'TELLION')
                        {
                            $strTipoAprovisionamiento = $serviceRecursosRed->geTipoAprovisionamiento($intIdElemento);
                            if ($strTipoAprovisionamiento == 'POOL')
                            {
                                $arrayResultado = $serviceRecursosRed->getIpsDisponiblePoolOlt($objServicio->getCantidad(),
                                    $intIdElemento, $intIdServicio,
                                    $objServicio->getPuntoId()->getId(),
                                    $strEsPlan,
                                    $objServicio->getPlanId()->getId(), "SI");
                            }
                            else
                            {
                                $arrayResultado = $serviceRecursosRed->getIpsDisponibleScopeOlt($objServicio->getCantidad(),
                                    $intIdElemento, $intIdServicio,
                                    $objServicio->getPuntoId()->getId(),
                                    $strEsPlan,
                                    $objServicio->getPlanId()->getId());
                            }
                        }
                        else if ($strMarcaElemento == 'HUAWEI' || $strMarcaElemento == 'ZTE')
                        {
                            $arrayResultado = $serviceRecursosRed->getIpsDisponibleScopeOlt($objServicio->getCantidad(),
                                $intIdElemento,
                                $intIdServicio,
                                $objServicio->getPuntoId()->getId(),
                                $strEsPlan,
                                $objServicio->getPlanId()->getId());
                        }
                        else
                        {
                            $arrayResultado = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                ->getIpsReservadasOlt($intIdServicio);
                            if (isset($arrayResultado['error']))
                            {
                                $strTipoAprovisionamiento = $serviceRecursosRed->geTipoAprovisionamiento($serviceTecnicoAsig->getElementoId());
                                if (strpos($arrayResultado['error'], 'No existen Ips Reservadas para este servicio') !== false &&
                                    $strTipoAprovisionamiento == "CNR")
                                {
                                    $arrayResultado = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                        ->getIpsReservadasOlt($intIdServicio, "Activo");

                                }
                                else
                                {
                                    $arrayResultado = $serviceRecursosRed->getIpsDisponibleScopeOlt($objServicio->getCantidad(),
                                        $intIdElemento,
                                        $intIdServicio,
                                        $objServicio->getPuntoId()->getId(),
                                        $strEsPlan,
                                        $objServicio->getPlanId()->getId());
                                }

                            }
                        }


                        //verificar si el resultado viene con error
                        if (isset($arrayResultado['error']))
                        {
                            $strMensaje = $arrayResultado['error'];
                            throw new \Exception($strMensaje);
                        }

                        $arrayRespuesta = array(
                            'ip' => $arrayResultado['ips'][0]['ip'],
                            'mascara' => "",
                            'gateway' => "",
                            'tipo' => $arrayResultado['ips'][0]['tipo'],
                            'scope' => $arrayResultado['ips'][0]['scope'],
                            'flag' => $boolFlagProd
                        );

                        $arrayResultadoData['ipRecurso'] = $arrayRespuesta;

                        $strIpRecursosRed = $arrayResultadoData['ipRecurso']['ip'];
                        $strMascaraRecursosRed = $arrayResultadoData['ipRecurso']['mascara'];
                        $strGatewayRecursosRed = $arrayResultadoData['ipRecurso']['gateway'];
                        $strScopeRecursosRed = $arrayResultadoData['ipRecurso']['scope'];
                        $strTipoRecursosRed = $arrayResultadoData['ipRecurso']['tipo'];

                    }
                    else
                    {
                        $arrayRespuesta = array(
                            'ip' => "",
                            'mascara' => "",
                            'gateway' => "",
                            'tipo' => "",
                            'scope' => "",
                            'flag' => $boolFlagProd
                        );

                        $arrayResultadoData['ipRecurso'] = $arrayRespuesta;

                        $strIpRecursosRed = $arrayResultadoData['ipRecurso']['ip'];
                        $strMascaraRecursosRed = $arrayResultadoData['ipRecurso']['mascara'];
                        $strGatewayRecursosRed = $arrayResultadoData['ipRecurso']['gateway'];
                        $strScopeRecursosRed = $arrayResultadoData['ipRecurso']['scope'];
                        $strTipoRecursosRed = $arrayResultadoData['ipRecurso']['tipo'];
                    }

                    // ASIGNANDO RECURSOS DE RED

                    $strEsPlanAsign = "no";
                    $boolFlagProd = false;
                    $strNombreTecnico = "";
                    $strMensaje = "";
                    $strAccion = "Asignando recursos de Red";
                    $strProcesoAsign = "INSTALACION";

                    $serviceInfoTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->findOneBy(array('servicioId' => $intIdServicio));

                    //obtener el elemento olt
                    $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                        ->find($serviceInfoTecnico->getElementoId());
                    $objMarcaElemento = $objElemento->getModeloElementoId()->getMarcaElementoId();

                    //verificar si el servicio tiene plan o producto
                    if ($objServicio->getPlanId())
                    {
                        $strEsPlanAsign = "si";

                        //verificar si el plan tiene ip entre sus productos
                        $objPlanDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                            ->findBy(array("planId" => $objServicio->getPlanId()->getId()));
                        $objProdIp = $emComercial->getRepository('schemaBundle:AdmiProducto')
                            ->findOneBy(array("nombreTecnico" => "IP", "empresaCod" => $intEmpresaId, "estado" => "Activo"));
                        if (count($objPlanDet) < 2)
                        {
                            for ($intIndex = 0; $intIndex < count($objPlanDet); $intIndex++)
                            {
                                if ($objPlanDet[$intIndex]->getProductoId() == $objProdIp->getId())
                                {
                                    $strNombreTecnico = $objProdIp->getNombreTecnico();
                                    $boolFlagProd = true;
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        $strNombreTecnico = strtoupper($objServicio->getProductoId()->getNombreTecnico());
                    }

                    if ($strProcesoAsign == 'MIGRACION')
                    {
                        //obtener solicitud de planificacion
                        $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                            ->findOneBy(array('descripcionSolicitud' => "SOLICITUD MIGRACION"));
                    }
                    else if ($strProcesoAsign == 'INSTALACION')
                    {
                        //obtener solicitud de planificacion
                        $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                            ->findOneBy(array('descripcionSolicitud' => "SOLICITUD PLANIFICACION"));
                    }
                    else
                    {
                        throw new \Exception("ERROR_PARCIAL");
                    }

                    $objDetalleSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                        ->findOneBy(array('servicioId' => $intIdServicio,
                            'tipoSolicitudId' => $objTipoSolicitud->getId()));

                    //se obtiene el numero de ips reservadas para el servicio
                    $objRegistrosIpsReservadas = $emInfraestructura->getRepository('schemaBundle:InfoIp')->getIpsReservadasOlt($intIdServicio);
                    $intCantidadIpsReservadas = count($objRegistrosIpsReservadas['ips']);

                    //crear json de ips
                    $strIpReservada = $strIpRecursosRed;
                    $strMascara = $strMascaraRecursosRed;
                    $strGateway = $strGatewayRecursosRed;
                    $strScope = $strScopeRecursosRed;
                    $strTipoIp = $strTipoRecursosRed;

                    if ($strIpReservada)
                    {
                        $arrayJsonIpsReservadas = '{"total":1,"caracteristicas":[{"ip":"' . $strIpReservada . '","mascara":"' . $strMascara . '",'
                            . '"gateway":"' . $strGateway . '","tipo":"' . $strTipoIp . '","scope":"' . $strScope . '"}]}';
                    }
                    else
                    {
                        $arrayJsonIpsReservadas = '';
                    }

                    $serviceRecursoRed = $this->get('planificacion.RecursosDeRed');

                    $arrayPeticiones = array(
                        'id' => $objDetalleSolicitud->getId(),
                        'producto' => "",
                        'nombreTecnico' => $strNombreTecnico,
                        'elementoId' => $serviceInfoTecnico->getElementoId(),
                        'interfaceId' => $serviceInfoTecnico->getInterfaceElementoId(),
                        'vci' => "",
                        'datosIps' => $arrayJsonIpsReservadas,
                        'tipoSolicitud' => $objTipoSolicitud->getDescripcionSolicitud(),
                        'idSplitter' => $intIdElementoConector,
                        'idSplitterHuawei' => $intIdSplitterMigracion,     //migracion
                        'idOlt' => $intIdOltMigracion,     //migracion
                        'idInterfaceOlt' => $intIdInterfaceOltMigracion,     //migracion
                        'interfaceSplitterId' => $intIdInterfaceElementoConector,
                        'marcaOlt' => $objMarcaElemento->getNombreMarcaElemento(),
                        'idEmpresa' => $intEmpresaId,
                        'prefijoEmpresa' => $strPrefijoEmpresa,
                        'cantidadRegistrosIps' => $intCantidadIpsReservadas,
                        'esPlan' => $strEsPlanAsign,
                        'usrCreacion' => $strUsrCreacion,
                        'ipCreacion' => $strIpCreacion
                    );

                    $arrayRespuestaRecursos = $serviceRecursoRed->asignarRecursosRed($arrayPeticiones);
                    $strStatus = $arrayRespuestaRecursos['status'];
                    $strMensaje = $arrayRespuestaRecursos['mensaje'];

                    if ($strStatus != "OK")
                    {
                        throw new \Exception($strMensaje);
                    }

                    //Se guardo correctamente los Recursos de Red

                    //Ingresar Progreso ASIGNACION_RECURSOS
                    $strAccion = "Ingresando progreso de asignación de recursos de red";
                    $strCodigoProgreso = "ASIGNACION_RECURSOS";

                    $arrayProgresoActivacion = array(
                        'strCodEmpresa' => $intEmpresaId,
                        'intIdTarea' => $intIdComunicacion,
                        'intIdDetalle' => $intDetalleId,
                        'strCodigoTipoProgreso' => $strCodigoProgreso,
                        'intIdServicio' => $intIdServicio,
                        'strOrigen' => $strOrigenProgreso,
                        'strUsrCreacion' => $strUsrCreacion,
                        'strIpCreacion' => $strIpCreacion);

                    $arrayRespuesta = $serviceSoporte->ingresarProgresoTarea($arrayProgresoActivacion);
                    $strStatus = $arrayRespuesta['status'];
                    $strMensajeProg = $arrayRespuesta['mensaje'];

                    if ($strStatus != 'OK' && strpos($strMensajeProg, 'Ya existe un registro del progreso de la tarea') === false)
                    {
                        throw new \Exception($strMensajeProg);
                    }

                }

                if ($objServicio->getEstado() == 'Asignada')
                {
                    //Obteniendo perfil creado al asignar recursos de red.
                    $arrayEntradaPerfil = array(
                        'servicioId' => $intIdServicio
                    );

                    $arrayServicioPerfil = $emComercial->getRepository('schemaBundle:InfoServicio')
                        ->getPerfilActivacionMd($arrayEntradaPerfil);

                    if (is_array($arrayServicioPerfil) && !empty($arrayServicioPerfil[0]['valor']))
                    {
                        $strLineProfile = $arrayServicioPerfil[0]['valor'];
                        $arrayPerfil = explode("_", $strLineProfile);
                        $strLineProfile = $arrayPerfil[0] . "_" . $arrayPerfil[1];
                        $strPerfil = $strLineProfile;
                    }

                    //Fin Obteniendo perfil creado al asignar recursos de red.

                    //activando
                    //valores de entrada
                    ini_set('max_execution_time', 400000);
                    $strMensajeError = "";
                    $strAccion = "Activando servicio de internet";
                    //fin entrada

                    $serviceTecnicoAct = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($objServicio->getId());
                    $objElementoOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($serviceTecnicoAct->getElementoId());


                    //Insert inicio de la activacion para control de la activacion en el movil operaciones
                    $arrayEstadoInstalacion = array(
                        'servicioId' => $intIdServicio,
                        'user' => $strUsrCreacion,
                        'estado' => 'PROCESANDO'
                    );

                    $serviceSoporte->ingresarEstadoInstalacion($arrayEstadoInstalacion);
                    //////////////////////////////////////////////////////////////////

                    //obtener los datos y departamento de la persona por empresa
                    $objDatos = $emComercial->getRepository('schemaBundle:InfoPersona')
                        ->getPersonaDepartamentoPorUserEmpresa($strUsrCreacion, $intEmpresaId);

                    if ($objServicio->getTipoOrden() == 'N')
                    {
                        $strDescripcionWifi = $strDescripcionWifiAct;
                        $strDescripcionOnt = $strDescripcionOntAct;

                        if ($objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento() == "HUAWEI" ||
                            $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento() == "ZTE")
                        {
                            if ($strDescripcionOnt == "" || $strDescripcionOnt == null)
                            {
                                $strMensajeError = "No Existen los datos de los Elementos del Cliente, Favor Revisar!";
                                throw new \Exception($strMensajeError);
                            }
                        }
                        else
                        {
                            if ($strDescripcionOnt == "" || $strDescripcionOnt == null
                                || $strDescripcionWifi == "" || $strDescripcionWifi == null)
                            {
                                $strMensajeError = "No Existen los datos de los Elementos del Cliente, Favor Revisar!";
                                throw new \Exception($strMensajeError);
                            }
                        }
                    }

                    $arrayPeticiones = array(
                        'idEmpresa' => $intEmpresaId,
                        'prefijoEmpresa' => $strPrefijoEmpresa,
                        'idOficina' => $strIdOficinaActiv,
                        'idServicio' => $intIdServicio,
                        'idProducto' => $intIdProducto,
                        'perfil' => $strPerfil,
                        'login' => $strLogin,
                        'interfaceElementoId' => $intIdInterfaceElemento,
                        'interfaceElementoSplitterId' => $strNombreInterfaceElementoConector,
                        'ultimaMilla' => $strUltimaMilla,
                        'plan' => $intIdPlan,
                        'macWifi' => $strMacWifi,
                        'serieWifi' => $strSerieWifi,
                        'modeloWifi' => $strModeloWifi,
                        'macOnt' => $strMacOnt,
                        'serieOnt' => $strSerieOnt,
                        'modeloOnt' => $strModeloOnt,
                        'ssid' => $strSsid,
                        'password' => $strPassword,
                        'numeroPc' => $strNumeroPc,
                        'modoOperacion' => $strModoOperacion,
                        'observacion' => $strObservacionCliente,
                        'usrCreacion' => $strUsrCreacion,
                        'ipCreacion' => $strIpCreacion,
                        'serNaf' => $this->container->getParameter('database_host_naf'),
                        'ptoNaf' => $this->container->getParameter('database_port_naf'),
                        'sidNaf' => $this->container->getParameter('database_name_naf'),
                        'usrNaf' => $this->container->getParameter('user_naf'),
                        'pswNaf' => $this->container->getParameter('passwd_naf'),
                        'mac' => "",
                        'ipCpeRadio' => "",
                        'capacidad1' => "",
                        'capacidad2' => "",
                        'idPersonaEmpresaRol' => $objDatos['ID_PERSONA_EMPRESA_ROL'],
                        'origenMovil' => $strOrigenActiv,
                    );

                    if (isset($arrayData['calculoPotencia'])) 
                    {
                        $arrayPeticiones['calculoPotencia'] = $arrayData['calculoPotencia'];
                    }
                    
                    //activar el servicio
                    $arrayRespuestaAct = $objActivarPuerto->activarCliente($arrayPeticiones);

                    //obtener respuesta
                    $strStatus = $arrayRespuestaAct[0]['status'];
                    $strMensaje = $arrayRespuestaAct[0]['mensaje'];

                    if ($strStatus != "OK")
                    {
                        //Insert de estado ROLLBACK, cuando existe problemas en la instalación

                        $arrayEstadoInstalacion = array(
                            'servicioId' => $intIdServicio,
                            'user' => $strUsrCreacion,
                            'estado' => 'ROLLBACK'
                        );
                        $serviceSoporte->ingresarEstadoInstalacion($arrayEstadoInstalacion);
                        //////////////////////////////////////////////////////////////////

                        if ($strMensaje == "java.net.ConnectException: Connection timed out")
                        {
                            $strResult = "No Existe Conectividad hacia el Elemento! Favor comunicarse con el departamento de GEPON";
                        }
                        else if ($strMensaje === '"java.lang.Exception: No se pudo alcanzar el host..."')
                        {
                            $strMensaje = "El elemento no es alcanzable desde el Servidor Telcos, favor comunicarse con el Dep. GEPON!";
                        }
                        else if ($strMensaje == "NO ID CLIENTE")
                        {
                            $strResult = "Slot no existe, favor revise la Linea Pon donde debe enganchar el cliente!";
                        }
                        else if ($strMensaje == "MAX ID CLIENTE")
                        {
                            $strResult = "Limite de clientes por Puerto esta en el maximo, Favor comunicarse con el departamento de GEPON";
                        }
                        else if ($strMensaje == "CANTIDAD CERO")
                        {
                            $strResult = "CPEs Agotados, favor revisar!";
                        }
                        else if ($strMensaje == "NO EXISTE CPE")
                        {
                            $strResult = "No existe el Elemento Cliente indicado, favor revisar!";
                        }
                        else if ($strMensaje == "CPE NO ESTA EN ESTADO")
                        {
                            $strResult = "Elemento Cliente no esta en estado: PENDIENTE INSTALACION/RETIRADO, favor revisar!";
                        }
                        else if ($strMensaje == "NO EXISTE TAREA")
                        {
                            $strResult = "No existe el Script para realizar la transaccion!";
                        }
                        else if ($strStatus == "NAF")
                        {
                            $strResult = "No existe el Elemento Cliente indicado, favor revisar!";
                        }
                        else
                        {
                            $strResult = $strMensaje;
                        }

                        $strMensajeError = $strResult;
                        throw new \Exception($strMensajeError);
                    }
                    else
                    {
                        if ($strPrefijoEmpresa == "MD" || $strPrefijoEmpresa == "EN")
                        {
                            $objTemplating = $this->container->get('templating');
                            $objMailer = $this->container->get('mailer');
                            $strMailerSend = $this->container->getParameter('mailer_send');
                            $entityDetalleSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                ->find($intIdDetSolPlanif);
                            $objInfoServicio = $entityDetalleSolicitud->getServicioId();

                            $entityServicioHistorial = new InfoServicioHistorial();
                            $entityServicioHistorial->setServicioId($objInfoServicio);
                            $entityServicioHistorial->setIpCreacion($strIpCreacion);
                            $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                            $entityServicioHistorial->setEstado($objInfoServicio->getEstado());
                            $entityServicioHistorial->setObservacion("Se finalizo la Instalación");
                            $emComercial->persist($entityServicioHistorial);
                            $emComercial->flush();

                            $entityDetalleSolicitud->setEstado("Finalizada");
                            $emComercial->persist($entityDetalleSolicitud);
                            $emComercial->flush();

                            //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                            $objLastDetalleSolhist = $emComercial->getRepository('schemaBundle:InfoDetalleSolHist')
                                ->findOneDetalleSolicitudHistorial($intIdDetSolPlanif, 'Planificada');

                            $entityDetalleSolHist = new InfoDetalleSolHist();
                            $entityDetalleSolHist->setDetalleSolicitudId($entityDetalleSolicitud);
                            if ($objLastDetalleSolhist)
                            {
                                $entityDetalleSolHist->setFeIniPlan($objLastDetalleSolhist->getFeIniPlan());
                                $entityDetalleSolHist->setFeFinPlan($objLastDetalleSolhist->getFeFinPlan());
                                $entityDetalleSolHist->setObservacion($objLastDetalleSolhist->getObservacion());
                            }
                            $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                            $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                            $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                            $entityDetalleSolHist->setEstado('Finalizada');

                            $emComercial->persist($entityDetalleSolHist);
                            $emComercial->flush();

                            //------- COMUNICACIONES --- NOTIFICACIONES
                            $objMail = $objTemplating->render('planificacionBundle:Coordinar:notificacion.html.twig',
                                array('detalleSolicitud' => $entityDetalleSolicitud,
                                    'detalleSolicitudHist' => null,
                                    'motivo' => null));

                            $strAsunto = "Solicitud de Instalacion Finalizada #" . $entityDetalleSolicitud->getId();

                            //DESTINATARIOS....
                            $arrayFormasContacto = $emComercial->getRepository('schemaBundle:InfoPersona')
                                ->getContactosByLoginPersonaAndFormaContacto($objInfoServicio->getPuntoId()->getUsrVendedor(),
                                    'Correo Electronico');
                            $arrayTo = array();
                            $arrayCc = array();
                            $arrayTo[] = 'notificaciones_telcos@telconet.ec';

                            if ($arrayFormasContacto)
                            {
                                foreach ($arrayFormasContacto as $formaContacto)
                                {
                                    $arrayTo[] = $formaContacto['valor'];
                                }
                            }

                            //ENVIO DE MAIL
                            $objMessage = \Swift_Message::newInstance()
                                ->setSubject($strAsunto)
                                ->setFrom('notificaciones_telcos@telconet.ec')
                                ->setTo($arrayTo)
                                ->setCc($arrayCc)
                                ->setBody($objMail, 'text/html');
                            if ($strMailerSend == "true")
                            {
                                $objMailer->send($objMessage);
                            }

                        }
                        else
                        {
                            throw new \Exception("No se finalizo la instalación");
                        }

                        $strMensaje = "Se Activo el cliente";
                    }

                    //fin activando ws


                }

                $arrayVerificarProductos = array(
                    'puntoId' => $objServicio->getPuntoId()->getId()
                );

                $arrayServicioProdAd = $emComercial->getRepository('schemaBundle:InfoServicio')
                    ->getProductoMdAdicional($arrayVerificarProductos);

                if (is_array($arrayServicioProdAd) && count($arrayServicioProdAd) == 0)
                {
                    $strAccion = "Ingresando progreso de activación sin productos adicionales";
                    $strCodigoProgreso = "ACTIVACION_SERVICIO";

                    $arrayProgresoActivacion = array(
                        'strCodEmpresa' => $intEmpresaId,
                        'intIdTarea' => $intIdComunicacion,
                        'intIdDetalle' => $intDetalleId,
                        'strCodigoTipoProgreso' => $strCodigoProgreso,
                        'intIdServicio' => $intIdServicio,
                        'strOrigen' => $strOrigenProgreso,
                        'strUsrCreacion' => $strUsrCreacion,
                        'strIpCreacion' => $strIpCreacion);

                    $arrayRespuesta = $serviceSoporte->ingresarProgresoTarea($arrayProgresoActivacion);
                    $strStatus = $arrayRespuesta['status'];
                    $strMensajeProg = $arrayRespuesta['mensaje'];
                    $strMensajeUsuario = "¡Servicio activado!";

                    if ($strStatus != 'OK' && strpos($strMensajeProg, 'Ya existe un registro del progreso de la tarea') === false)
                    {
                        throw new \Exception($strMensajeProg);
                    }

                    //Insert de estado de la activacion para control de la activacion en el movil operaciones
                    $arrayEstadoInstalacion = array(
                        'servicioId' => $intIdServicio,
                        'user' => $strUsrCreacion,
                        'estado' => 'REALIZADO'
                    );
                    $serviceSoporte->ingresarEstadoInstalacion($arrayEstadoInstalacion);
                    //////////////////////////////////////////////////////////////////
                }

                if (is_array($arrayServicioProdAd) && count($arrayServicioProdAd) > 0)
                {
                    foreach ($arrayServicioProdAd as $productosAdicionales)
                    {
                        $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($productosAdicionales['producto_id']);
                        if (is_object($objProducto) && $objProducto->getNombreTecnico() == "WDB_Y_EDB")
                        {
                            $strMensajeUsuario = "¡Servicio activado! <br> <b> "
                                               . "Favor realizar la sincronización del extender con el ONT para su activación </b>";             
                            break;
                        }
                        else if(is_object($objProducto) && $objProducto->getNombreTecnico() == "EXTENDER_DUAL_BAND"
                                && $objServicio->getTipoOrden() == "T")
                        {
                            $strMensajeUsuario = "¡Servicio activado!";             
                            break; 
                        }
                    }
                }

                //Activando productos adicionales

                if (isset($arrayServiciosProdAd) && count($arrayServiciosProdAd) > 0)
                {
                    $strAccion = "Activando productos adicionales";
                    foreach ((array)$arrayServiciosProdAd as $servicios)
                    {
                        $objServicioAd = $emComercial->getRepository('schemaBundle:InfoServicio')
                            ->findOneById($servicios['idServicio']);

                        if (is_object($objServicioAd) && ($objServicioAd->getEstado() == "Pendiente"
                                || $objServicioAd->getEstado() == "PendienteAp"))
                        {
                            $objServicioPunto = $emComercial->getRepository('schemaBundle:InfoServicio')
                                ->find($intIdServicio);

                            if ($objServicioAd->getProductoId()->getNombreTecnico() === "WDB_Y_EDB")
                            {

                                $intIdServicioInternet = $objServicioPunto->getId();
                                $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                    ->findOneBy(array("servicioId" => $objServicioAd->getId()));
                                if (!is_object($objServicioTecnico))
                                {
                                    throw new \Exception("No se encontró información técnica del servicio");
                                }
                                $objAccion = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);
                                if (!is_object($objAccion))
                                {
                                    throw new \Exception("No se encontró información de la acción");
                                }

                                if (is_object($objServicioPunto) && $objServicioPunto->getTipoOrden() == "N")
                                {
                                    $arrayPeticiones['objServicio'] = $objServicioAd;
                                    $arrayPeticiones['objServicioTecnico'] = $objServicioTecnico;
                                    $arrayPeticiones['objAccion'] = $objAccion;
                                    $arrayPeticiones['strEmpresaCod'] = $intEmpresaId;
                                    $arrayPeticiones['strUsrCreacion'] = $strUsrCreacion;
                                    $arrayPeticiones['strIpCreacion'] = $strIpCreacion;
                                    $arrayPeticiones['strSerieExtenderDualBand'] = $servicios['serieEquipo'];
                                    $arrayPeticiones['strModeloExtenderDualBand'] = $servicios['modeloEquipo'];
                                    $arrayPeticiones['strMacExtenderDualBand'] = $servicios['macEquipo'];
                                    $arrayPeticiones['intIdServicioInternet'] = $intIdServicioInternet;
                                    $arrayPeticiones['strTipoServicio'] = $strTipoServicio;
                                    $arrayPeticiones['intIdSolicitudServicio'] = $intIdDetSolPlanif;
                                    $arrayPeticiones['strObservacion'] = $strObsActivarServicio;
                                    $arrayPeticiones['strPrefijoEmpresa'] = $strPrefijoEmpresa;
                                    $arrayPeticiones['objEmpleadoSesion'] = $strUsrCreacion;
                                    $arrayPeticiones['strOrigen'] = "ACTIVACION";

                                    $arrayConfirmarServicio = $serviceConfirmarServicio
                                        ->confirmarServicioExtenderDualBand($arrayPeticiones);
                                    $strStatus = $arrayConfirmarServicio["status"];
                                    $strMensajeActiva = $arrayConfirmarServicio["mensaje"];
                                    $objServicioInternet = $arrayConfirmarServicio["objServicioInternet"];


                                    if ($strStatus !== "OK")
                                    {
                                        throw new \Exception($strMensajeActiva);
                                    }
                                }
                                else
                                {
                                    $arrayPeticiones = array('intIdServicio' => $objServicioAd->getId(),
                                        'intIdServicioInternet' => $intIdServicioInternet,
                                        'strSerieElemento' => $servicios['serieEquipo'],
                                        'strMacElemento' => $servicios['macEquipo'],
                                        'strUsrCreacion' => $strUsrCreacion,
                                        'strIpCreacion' => $strIpCreacion,
                                        'strEmpresaCod' => $intEmpresaId
                                    );

                                    $arrayRespuestaTrasladoEDB = $objActivarPuerto->trasladarExtenderDualBand($arrayPeticiones);
                                    $strStatusTraslado = $arrayRespuestaTrasladoEDB['strStatus'];
                                    $strMensajeTraslado = $arrayRespuestaTrasladoEDB['strMensaje'];
                                    $strMostrarMensajeTraslado = $arrayRespuestaTrasladoEDB['strMostrarMensaje'];

                                    if ($strStatusTraslado !== "OK")
                                    {
                                        throw new \Exception($strMensajeTraslado);
                                    }
                                }

                            }
                            else if ($objServicioAd->getProductoId()->getCodigoProducto() === "CABL")
                            {
                                $objAdmiTipoSolicitudPla = $emComercial->getRepository("schemaBundle:AdmiTipoSolicitud")
                                    ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD PLANIFICACION',
                                        'estado' => 'Activo'));

                                if (is_object($objAdmiTipoSolicitudPla) && !empty($objAdmiTipoSolicitudPla))
                                {
                                    $arrayParametrosPlan = array('Servicio' => $objServicioAd->getId(),
                                        'TipoSolicitud' => $objAdmiTipoSolicitudPla->getId(),
                                        'Producto' => $objServicioAd->getProductoId()->getId());

                                    $arrayDetalleSolicitudPla = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                        ->getEstadoSolicitudAdicional($arrayParametrosPlan);

                                    if (is_array($arrayDetalleSolicitudPla) && !empty($arrayDetalleSolicitudPla))
                                    {
                                        $objDetalleSol = $arrayDetalleSolicitudPla[0];
                                        $objDetalleSol->setEstado('Activo');
                                        $emComercial->persist($objDetalleSol);
                                        $emComercial->flush();

                                        $objDetalleSolHist = $emComercial->getRepository("schemaBundle:InfoDetalleSolHist")
                                            ->findOneBy(array('detalleSolicitudId' => $objDetalleSol->getId()));

                                        if (is_object($objDetalleSolHist) && !empty($objDetalleSolHist))
                                        {
                                            $entityDetalleSolHist = new InfoDetalleSolHist();
                                            $entityDetalleSolHist->setDetalleSolicitudId($objDetalleSol);
                                            $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                                            $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                            $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                                            $entityDetalleSolHist->setEstado('Activo');
                                            $emComercial->persist($entityDetalleSolHist);
                                            $emComercial->flush();
                                        }

                                        $objDetalleSolCaract = $emComercial->getRepository("schemaBundle:InfoDetalleSolCaract")
                                            ->findOneBy(array(
                                                'detalleSolicitudId' => $objDetalleSol->getId(),
                                                'valor' => $objServicioAd->getProductoId()->getId(),
                                                'estado' => 'PrePlanificada'));

                                        if (is_object($objDetalleSolCaract) && !empty($objDetalleSolCaract))
                                        {
                                            $objDetalleSolCaract->setEstado('Activo');
                                            $emComercial->persist($objDetalleSolCaract);
                                            $emComercial->flush();
                                        }
                                    }
                                    else
                                    {
                                        $objServicio = $emComercial->getRepository("schemaBundle:InfoServicio")
                                            ->findOneBy(array(
                                                'id' => $objServicioAd->getId(),
                                                'productoId' => $objServicio->getProductoId()->getId(),
                                                'estado' => "Asignada"));

                                        if (is_object($objServicio) && !empty($objServicio))
                                        {
                                            $objServicio->setEstado('EnVerificacion');
                                            $emComercial->persist($objServicio);
                                            $emComercial->flush();

                                            $objServicioHist = new InfoServicioHistorial();
                                            $objServicioHist->setServicioId($objServicio);
                                            $objServicioHist->setObservacion('Se Confirmo el Servicio');
                                            $objServicioHist->setIpCreacion($strIpCreacion);
                                            $objServicioHist->setUsrCreacion($strUsrCreacion);
                                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                                            $objServicioHist->setAccion('confirmarServicio');
                                            $objServicioHist->setEstado('Activo');
                                            $emComercial->persist($objServicioHist);
                                            $emComercial->flush();
                                        }
                                    }


                                }
                            }
                            else if ($objServicioAd->getProductoId()->getCodigoProducto() === "PA01" ||
                                $objServicioAd->getProductoId()->getCodigoProducto() === "NO01" ||
                                $objServicioAd->getProductoId()->getNombreTecnico() === "ECDF" ||
                                $objServicioAd->getProductoId()->getNombreTecnico() === "GTVPREMIUM")
                            {

                                $serviceActivacion = $this->get('tecnico.InfoActivarPuerto');
                                $arrayPeticiones['idServicio'] = $objServicioAd->getId();
                                $arrayPeticiones['idEmpresa'] = $intEmpresaId;
                                $arrayPeticiones['idOficina'] = "";
                                $arrayPeticiones['idAccion'] = $intIdAccion;
                                $arrayPeticiones['usrCreacion'] = $strUsrCreacion;
                                $arrayPeticiones['clientIp'] = $strIpCreacion;
                                $arrayPeticiones['strOrigen'] = $strOrigenProgreso;

                                $arrayRespuestaActOtros = $serviceActivacion->activarServiciosOtros($arrayPeticiones);
                                $strStatus = $arrayRespuestaActOtros['status'];
                                $strMensaje = $arrayRespuestaActOtros['mensaje'];

                                $arrayResultado = array();
                                $arrayDestinatariosCorreo = array();
                                $arrayDestinatariosMovil = array();

                                if ($strStatus == "OK")
                                {
                                    $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                        ->find($objServicioAd->getId());
                                    $objInfoPunto = $emComercial->getRepository('schemaBundle:InfoPunto')
                                        ->find($objInfoServicio->getPuntoId()->getId());
                                    $objInfoPersonaEmpRol = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                        ->find($objInfoPunto->getPersonaEmpresaRolId()->getId());
                                    $arrayDestinatariosCorreo = $emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                        ->obtieneFormaContactoxParametros(
                                            array("intPuntoId" => $objInfoServicio->getPuntoId()->getId(),
                                                "intPersonaId" => $objInfoPersonaEmpRol
                                                    ->getPersonaId()->getId(),
                                                "strDescripcionFormaContacto" => "Correo Electronico"));
                                    $arrayDestinatariosMovil = $emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                        ->obtieneFormaContactoxParametros(
                                            array("intPuntoId" => $objInfoServicio->getPuntoId()->getId(),
                                                "intPersonaId" => $objInfoPersonaEmpRol->getPersonaId()->getId(),
                                                "strDescripcionFormaContacto" => "%Movil%"));

                                    $arrayResultado = array('srtResultado' => 'OK',
                                        'strCorreo' => $arrayDestinatariosCorreo[0],
                                        'strMovil' => $arrayDestinatariosMovil[0]);

                                    $arrayParametrosMail = array(
                                        "servicio" => $objInfoServicio,
                                        "prefijoEmpresa" => $strPrefijoEmpresa,
                                        "empleadoSesion" => $strUsrCreacion,
                                        "idEmpresa" => $intEmpresaId,
                                        "user" => $strUsrCreacion,
                                        "ipClient" => $strIpCreacion
                                    );

                                    $objConfirmar = $this->get('tecnico.InfoConfirmarServicio');
                                    $objConfirmar->envioMailConfirmarServicio($arrayParametrosMail);

                                }
                            }

                        }
                    }

                    $strAccion = "Ingresando progreso de activación en productos adicionales";
                    $strCodigoProgreso = "ACTIVACION_SERVICIO";

                    $arrayProgresoActivacion = array(
                        'strCodEmpresa' => $intEmpresaId,
                        'intIdTarea' => $intIdComunicacion,
                        'intIdDetalle' => $intDetalleId,
                        'strCodigoTipoProgreso' => $strCodigoProgreso,
                        'intIdServicio' => $intIdServicio,
                        'strOrigen' => $strOrigenProgreso,
                        'strUsrCreacion' => $strUsrCreacion,
                        'strIpCreacion' => $strIpCreacion);

                    $arrayRespuesta = $serviceSoporte->ingresarProgresoTarea($arrayProgresoActivacion);
                    $strStatus = $arrayRespuesta['status'];
                    $strMensajeProg = $arrayRespuesta['mensaje'];
                    $strMensajeUsuario = "¡Producto activado!";

                    if ($strStatus != 'OK' && strpos($strMensajeProg, 'Ya existe un registro del progreso de la tarea') === false)
                    {
                        throw new \Exception($strMensajeProg);
                    }

                    //Insert de estado de la activacion para control de la activacion en el movil operaciones
                    $arrayEstadoInstalacion = array(
                        'servicioId' => $intIdServicio,
                        'user' => $strUsrCreacion,
                        'estado' => 'REALIZADO'
                    );
                    $serviceSoporte->ingresarEstadoInstalacion($arrayEstadoInstalacion);
                    //////////////////////////////////////////////////////////////////
                }

                //Fin Activando productos adicionales


            }

        }
        catch (\Exception $exception)
        {
            if ($objServicio->getEstado() == 'Asignada')
            {
                $arrayEstadoInstalacion = array(
                    'servicioId' => $intIdServicio,
                    'user' => $strUsrCreacion,
                    'estado' => 'ROLLBACK'
                );
                $serviceSoporte->ingresarEstadoInstalacion($arrayEstadoInstalacion);
            }

            $arrayParametroMapeoError = array(
                'mensaje' => $exception->getMessage(),
                'mensajeDefault' => $exception->getMessage(),
                'nombreParametro' => "MAPEO_ERRORES_ACTIVACION_MD",
                'empresaId' => $intEmpresaId,
                'user' => $strUsrCreacion);

            $arrayResultadoWs['status'] = $this->status['ERROR'];
            $arrayResultadoWs['mensaje'] = $serviceUtil->getMapeoMensajeError($arrayParametroMapeoError);

            $serviceUtil->insertLog(array(
                'enterpriseCode' => $intEmpresaId,
                'logType' => 1,
                'logOrigin' => 'TELCOS',
                'application' => 'TELCOS',
                'appClass' => basename(__CLASS__),
                'appMethod' => basename(__FUNCTION__),
                'appAction' => $strAccion,
                'descriptionError' => $exception->getMessage(),
                'status' => 'Fallido',
                'inParameters' => json_encode($arrayData),
                'creationUser' => $strUsrCreacion));

            return $arrayResultadoWs;
        }

        $arrayResultadoWs['status'] = $this->status['OK'];
        $arrayResultadoWs['mensaje'] = $strMensajeUsuario;
        return $arrayResultadoWs;
    }

    /**
     * Endpoint que se encargará de recibir peticiones de activaciones temporales del flujo ZeroTouch.
     *
     * @param $arrayData
     * @return string[]
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 06-04-2021 | Version Inicial
     *
     */
    private function activarZeroTouch($arrayData)
    {

        $arrayRespuesta = array();

        $arrayEquipos = array();

        /*Obtenemos el servicio tecnico para poder ejecutar las funciones.*/
        $serviceInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');

        try
        {
            if (empty($arrayData['data']['idEmpresa']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro Id de Empresa.', 400);
            }
            if (empty($arrayData['data']['idServicio']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro id de Servicio.', 400);
            }
            if (empty($arrayData['data']['idDetalle']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro Id de Detalle.', 400);
            }
            if (empty($arrayData['data']['idDepartamentoOrigen']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro Id del Departamento.', 400);
            }
            if (empty($arrayData['op']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro Operación.', 400);
            }
            if (empty($arrayData['user']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro usuario.', 400);
            }
            if (empty($arrayData['userIp']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro IP de usuario.', 400);
            }
            if (!is_array($arrayData['data']['equipos']))
            {
                throw new \Exception('Bad Request: No se recibieron los equipos necesarios.', 400);
            }

            foreach ($arrayData['data']['equipos'] as $key => $arrayEquipo)
            {
                $arrayEquipos[$arrayEquipo['ubicacion']][] = $arrayEquipo;
            }

            $arrayParametros = array(
                'arrayEquiposClte'         => $arrayEquipos['CLIENTE'],
                'arrayEquiposNodo'         => isset($arrayEquipos['NODO']) ? $arrayEquipos['NODO'] : null,
                'intIdEmpresa'             => $arrayData['data']['idEmpresa'],
                'intIdServicio'            => $arrayData['data']['idServicio'],
                'intIdDetalle'             => $arrayData['data']['idDetalle'],
                'intIdDepartamentoOrigen'  => $arrayData['data']['idDepartamentoOrigen'],
                'strUser'                  => $arrayData['user'],
                'strUserIp'                => $arrayData['userIp']
            );

            /*Enviamos los parámetros a nuestro servicio que se va a conectar NW para realizar el aprovisionamiento temporal.*/
            $arrayAprovisionTemp = $serviceInfoServicioTecnico->activacionTemporalZeroTouch($arrayParametros);

            $arrayRespuesta = $arrayAprovisionTemp;
            /*Validamos la respuesta correcta.*/
            if ($arrayAprovisionTemp['status'] !== 200)
            {
                throw new \Exception($arrayAprovisionTemp['message']);
            }

        }
        catch (\Exception $e)
        {
            $arrayRespuesta['message'] = is_null($e->getMessage()) || $e->getMessage() == ''?
                                        'Ha ocurrido un error durante el proceso, intente nuevamente.':
                                        $e->getMessage();
            
            $arrayRespuesta['status'] = $e->getCode() !== 0 ? $e->getCode(): 500;
            $arrayRespuesta['data'] = null;
            
            /*Ingresamos en el historial de servicio que ocurrió un error de acuerdo al mensaje.*/
            $serviceInfoServicioTecnico->insertarHistorialServicio(
                array(
                    'intIdServicio' => $arrayData['data']['idServicio'],
                    'strObservacion' => "ZeroTouch Error: " . $arrayRespuesta['message'],
                    'strUsuarioCreacion' => $arrayData['user']
                ));

        }

        return $arrayRespuesta;

    }

    private function putPruebasConectividad($arrayData)
    {
        $arrayRespuesta = array();

        $arrayParametros = array(
            'intIdEmpresa'         => $arrayData['data']['idEmpresa'],
            'intIdServicio'        => $arrayData['data']['idServicio'],
            'strUser'              => $arrayData['user'],
            'strUserIp'            => $arrayData['userIp']
        );

        /*Obtenemos el servicio tecnico para poder ejecutar las funciones.*/
        $serviceInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');

        try
        {
            if (empty($arrayData['data']['idEmpresa']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro Id de Empresa.', 400);
            }
            if (empty($arrayData['data']['idServicio']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro id de Servicio.', 400);
            }
            if (empty($arrayData['op']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro Operación.', 400);
            }
            if (empty($arrayData['user']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro usuario.', 400);
            }
            if (empty($arrayData['userIp']))
            {
                throw new \Exception('Bad Request: No se recibió el parámetro IP de usuario.', 400);
            }

            /*Enviamos los parámetros a nuestro servicio que se va a conectar NW para realizar el aprovisionamiento temporal.*/
            $arrayNwTest = $serviceInfoServicioTecnico->zeroTouchNwTest($arrayParametros);

            $arrayRespuesta = $arrayNwTest;

            /*Validamos la respuesta correcta.*/
            if ($arrayNwTest['status'] !== 200)
            {
                /*TODO: Cambiar el flujo zerotouch a NO(validar).*/
                throw new \Exception($arrayNwTest['message']);
            }

        }
        catch (\Exception $e)
        {
            $arrayRespuesta['message'] = is_null($e->getMessage()) || $e->getMessage() == ''?
                                        'Ha ocurrido un error durante el proceso, intente nuevamente.' :
                                        $e->getMessage();

            $arrayRespuesta['status'] = $e->getCode() !== 0 ? $e->getCode(): 500;
            $arrayRespuesta['data'] = null;
            
            /*Ingresamos en el historial de servicio que ocurrió un error de acuerdo al mensaje.*/
            $serviceInfoServicioTecnico->insertarHistorialServicio(
                array(
                    'intIdServicio' => $arrayData['data']['idServicio'],
                    'strObservacion' => "ZeroTouch Error: " . $arrayRespuesta['message'],
                    'strUsuarioCreacion' => $arrayData['user']
                ));
        }

        return $arrayRespuesta;

    }
    
    /**
     * Función que actualiza la fecha de expiración de una licencia
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 31-08-2021
     * 
     * @param array $arrayData
     *
     * @return array $arrayRespuesta
     *
     */
    public function actualizaFechaExpiracionSecureCpe($arrayData)
    {
        $arrayRespuesta             = array();
        $strStatus                  = "OK";
        $strMensaje                 = "";
        $strData                    = "";
        $serviceUtil                = $this->get('schema.Util');
        $serviceTecnico             = $this->get('tecnico.InfoServicioTecnico');
        $strIpCreacion              = '127.0.0.1'; 
        
        $emComercial       = $this->getDoctrine()->getManager("telconet");
        $emInfraestructura = $this->getDoctrine()->getManager("telconet_infraestructura");
        
        $emComercial->getConnection()->beginTransaction();

        try
        {
            $strIpEquipo    = $arrayData['data']['ipEquipo'];
            $strSerieEquipo = $arrayData['data']['serieEquipo'];
            $strLogin       = $arrayData['data']['loginPunto'];
            $strFecha       = $arrayData['data']['fecha'];
            $strUsrCreacion = $arrayData['dataAuditoria']['usrCreacion'];
            $strIpCreacion  = $arrayData['dataAuditoria']['ipCreacion'];
            
            //Consultamos la ip del servicio para obtener el mismo
            
            $objInfoIp = $emComercial->getRepository('schemaBundle:InfoIp')
                                     ->findOneBy(array("ip" => $strIpEquipo));
            
            if (is_object($objInfoIp))
            {
                $intIdServicio = $objInfoIp->getServicioId();
            }
            else
            {
                throw new \Exception("No se encontró información de la ip obtenida");
            }
            
            //Consulta para obtener el servicio secure cpe 
            $objProducto       = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                  ->findOneBy(array("descripcionProducto" => "SECURITY SECURE CPE", 
                                                    "empresaCod"          => "10", 
                                                    "estado"              => "Activo"));
            if (is_object($objProducto))
            {
                $intIdProducto = $objProducto->getId();
            }
            else
            {
                throw new \Exception("Producto no existe");
            }
            
            $objCaracteristica = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array("descripcionCaracteristica" => "ID_SERVICIO_SECURE_CPE", 
                                                         "estado"                    => "Activo"));
            if (is_object($objCaracteristica))
            {
                $intIdCaracteristica = $objCaracteristica->getId();
            }
            else
            {
                throw new \Exception("Caracteristica no existe");
            }
            
            $objProdCaract  = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"      => $intIdProducto,
                                                                  "caracteristicaId"=> $intIdCaracteristica));
            if (is_object($objProdCaract))
            {
                $intIdProdCaract = $objProdCaract->getId();
            }
            else
            {
                throw new \Exception("Producto Caracteristica no existe");
            }
            $objServCaractPrincipal = $emInfraestructura->getRepository('schemaBundle:InfoServicioProdCaract')
                                                      ->findOneBy(array("productoCaracterisiticaId" => $intIdProdCaract,
                                                                                            "valor" => $intIdServicio));

            if(is_object($objServCaractPrincipal))
            {
                $intIdServicioCpe = $objServCaractPrincipal->getServicioId();
            }
            else
            {
                throw new \Exception("Registro no existe");
            }
            
            $objInfoServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                        ->find($intIdServicioCpe);
            
            if (!is_object($objInfoServicio))
            {
                throw new \Exception("Servicio no existe");
            }

            $arrayParametros  = array(
                                        'objServicio'       => $objInfoServicio,
                                        'objProducto'       => $objInfoServicio->getProductoId(),
                                        'strCaracteristica' => 'FECHA_EXPIRACION_SEGURIDAD_CPE',
                                        'strValor'          => $strFecha,
                                        'strUsrCreacion'    => $strUsrCreacion
                                            );
            $arrayRespuestaActualizaFecha = $serviceTecnico->actualizarServicioProductoCaracteristica($arrayParametros);

            $strStatus  = "OK";
            $strMensaje = "Actualización exitosa";
            
            $arrayRespuesta['status']  = $strStatus;
            $arrayRespuesta['mensaje'] = $strMensaje;
            $arrayRespuesta['data']    = $strData;
            
            //historial de la fecha de expiración actualizada
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objInfoServicio);
            $objServicioHistorial->setObservacion($strMensaje.'. Fecha de expiración: '.$strFecha);
            $objServicioHistorial->setEstado("Activo");
            $objServicioHistorial->setAccion("actualizaFechaExpiracion");
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $emComercial->persist($objServicioHistorial);
            $emComercial->flush();
                
            $emComercial->getConnection()->commit();
            $emComercial->getConnection()->close();

        }
        catch(\Exception $exception)
        {
            $serviceUtil->insertLog(array(
                              'enterpriseCode'   => "10",
                              'logType'          => 1,
                              'logOrigin'        => 'TELCOS',
                              'application'      => basename(__FILE__),
                              'appClass'         => basename(__CLASS__),
                              'appMethod'        => basename(__FUNCTION__),
                              'descriptionError' => $exception->getMessage(),
                              'status'           => 'Fallido',
                              'inParameters'     => json_encode($arrayData, 128),
                              'creationUser'     => $strUsrCreacion));

            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Problemas al actualizar fecha de expiración.";
            $arrayRespuesta['data']    = "";
        }

        return $arrayRespuesta;
    }
    
    /**
    * Funcion que sirve para consumir webservice de seguridad lógica
    *
    * @author Antonio Ayala <afayala@telconet.ec>
    * @version 1.0 01-09-2021
    * @since 1.0
    * @param type $arrayData
    * @return string
    *
    */
    private function actualizarFechaExpiracionBase($arrayData)
    {
        $arrayRespuesta     = array();
        $serviceUtil        = $this->get('schema.Util');
        $serviceNetworking  = $this->get('tecnico.NetworkingScripts');
        try
        {
            $arrayParams=array('arrayIpEquipos' => $arrayData['data']['arrayIpEquipos'],
                               'opcion'         => $arrayData['data']['opcion']
                              );
            //Llamada al web service de secure cpe
            $strJsonDatosWs   = json_encode($arrayParams);
            $arrayRespuestaWs = $serviceNetworking->callSecureCpeWebService($strJsonDatosWs);
            $strStatus        = $arrayRespuestaWs['status'];
            $strMensaje       = $arrayRespuestaWs['mensaje'];
            
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertLog(array(
                              'enterpriseCode'   => "10",
                              'logType'          => 1,
                              'logOrigin'        => 'TELCOS',
                              'application'      => basename(__FILE__),
                              'appClass'         => basename(__CLASS__),
                              'appMethod'        => basename(__FUNCTION__),
                              'descriptionError' => $ex->getMessage(),
                              'status'           => 'Fallido',
                              'inParameters'     => json_encode($arrayData, 128),
                              'creationUser'     => $strUsrCreacion));

            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Problemas al actualizar fechas de expiracion.";
            $arrayRespuesta['data']    = "";
        }
        return $arrayRespuesta;
    }

    /**
     * getValidaElementosOrigenTraslados
     * 
     * Funcion que sirve obtener información de elementos entregados en traslados de diferente tecnología
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 20-02-2022
     * @since 1.0
     * @param type $arrayData
     * @return string
     *
     */
    private function getValidaElementosOrigenTraslados($arrayData)
    {
        $arrayRespuesta           = array();
        $serviceUtil              = $this->get('schema.Util');
        $serviceServicioComercial = $this->get('comercial.InfoServicio');
        try
        {
            $arrayParametros  = array();
            $arrayParametros["strIpCreacion"]  = $arrayData['data']['ipCreacion'];
            $arrayParametros["strUsrCreacion"] = $arrayData['data']['usrCreacion'];
            $arrayParametros["strCodEmpresa"]  = $arrayData['data']['codEmpresa'];
            $arrayParametros["intIdServicio"]  = $arrayData['data']['idServicio'];
            $arrayRespuestaWs = $serviceServicioComercial->obtenerValidaElementosOrigenTraslados($arrayParametros);
            $arrayRespuesta['status'] = $arrayRespuestaWs['strEstado'] === "OK" ?  $this->status['OK'] :  $this->status['ERROR'];
            $arrayRespuestaWsTmp = array();
            $arrayRespuestaWsTmp['estado']  = $arrayRespuestaWs['strEstado'];
            $arrayRespuestaWsTmp['mensaje'] = $arrayRespuestaWs['strMensaje'];
            $arrayRespuestaWsTmp['existenEquiposFacturar'] = $arrayRespuestaWs['strExistenEquiposFacturar'];
            $arrayRespuesta['data'] = $arrayRespuestaWsTmp;
            $arrayRespuesta['mensaje'] = $arrayRespuestaWs['strEstado'] === "OK" ? "Consulta exitosa" : $arrayRespuestaWs['strMensaje'];
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertLog(array(
                              'enterpriseCode'   => "10",
                              'logType'          => 1,
                              'logOrigin'        => 'TELCOS',
                              'application'      => basename(__FILE__),
                              'appClass'         => basename(__CLASS__),
                              'appMethod'        => basename(__FUNCTION__),
                              'descriptionError' => $ex->getMessage(),
                              'status'           => 'Fallido',
                              'inParameters'     => json_encode($arrayData, 128),
                              'creationUser'     => $strUsrCreacion));

            $arrayRespuesta['status']  = $this->status['ERROR'];
            $arrayRespuesta['mensaje'] = "Problemas al obtener validación de elementos traslado.";
        }
        return $arrayRespuesta;
    }

    /* 
     * Funcion que sirve para obtener equipos de cliente en nodo
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 10-06-2021
     * 
     * 
     * @param array $arrayData
     * @return array $resultado
     */
    private function getDispositivosClienteNodo($arrayData)
    {
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial                = $this->getDoctrine()->getManager();
        $objElementoService         = $this->get("tecnico.InfoElemento");
        $serviceUtil                = $this->get('schema.Util');
        $intIdServicio              = $arrayData['data']['servicioId'];
        $intEmpresaId               = $arrayData['data']['empresaId'];
        $intDetSolicitudId          = $arrayData['data']['detSolicitudId'];
        $strAccion                  = $arrayData['data']['accion'];
        $strUsrCreacion             = $arrayData['user'];

        try
        {
            if(!is_null($strAccion) && $strAccion == 'RETIRO')
            {
                $arrayElementosNodo = $objElementoService->obtenerDispositivosRetiroClienteNodo(
                                            array('intIdServicio' => $intIdServicio,
                                            'detSolicitudId'=> $intDetSolicitudId)
                                        );
            }
            else
            {
                $arrayElementosNodo = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                ->obtenerDispositivosClienteNodo(array('intIdServicio' => $intIdServicio));
            }
    
            if (!empty($arrayElementosNodo) && count($arrayElementosNodo) > 0)
            {
                foreach ($arrayElementosNodo as $objInfoElementoNodo)
                {
                    $arrayResultado['result'][] = array(
                        'serieElemento' => $objInfoElementoNodo->getSerieFisica(),
                        'modeloElemento' => $objInfoElementoNodo->getModeloElementoId()
                        ->getNombreModeloElemento(),
                        'tipoElemento' => $objInfoElementoNodo->getModeloElementoId()
                        ->getTipoElementoId()
                        ->getNombreTipoElemento()
                    );
                }
            }
        }
        catch(\Exception $exception)
        {
            if($exception->getMessage() == "NULL")
            {
                $arrayResultado['status']   = $this->status['NULL'];
                $arrayResultado['mensaje']  = $this->mensaje['NULL'];
            }
            else if($exception->getMessage() == "ERROR_PARCIAL")
            {
                $arrayResultado['status']   = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']  = $strMensaje;
            }
            else
            {
                $arrayResultado['status']   = $this->status['ERROR'];
                $arrayResultado['mensaje']  = $this->mensaje['ERROR'];
            }

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'TecnicoWSController',
                'appMethod'        => 'getDispositivosClienteNodo',
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));

            return $arrayResultado;
        }
            
        $arrayResultado['status']   = $this->status['OK'];
        $arrayResultado['mensaje']  = $this->mensaje['OK'];
        return $arrayResultado;
    }

    /**
    * Funcion que sirve para validar el elemento y producto técnico del servicio
    * y obtener la información necesaria para su activación
    *
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.0 19-11-2021
    * @since 1.0
    * @param type $arrayData
    * @return Array $arrayResultado
    *
    */
    private function putValidarElementoServicioGpon($arrayData)
    {
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial                = $this->getDoctrine()->getManager();
        $emGeneral                  = $this->getDoctrine()->getManager('telconet_general');
        $serviceUtil                = $this->get('schema.Util');
        $serviceTecnico             = $this->get("tecnico.InfoServicioTecnico");
        $intIdServicio              = $arrayData['data']['idServicio'];
        $intEmpresaId               = $arrayData['data']['empresaId'];
        $strModeloElementoNuevo     = $arrayData['data']['modeloElementoNuevo'];
        $strSerieElementoNuevo      = $arrayData['data']['serieElementoNuevo'];
        $strUsrCreacion             = $arrayData['user'];
        $strIpCreacion              = "127.0.0.1";

        try
        {
            $booleanActivarOnt    = true;
            $booleanValidarCamara = false;
            //obtener servicio
            $objServicio          = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->findOneById($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }
            //obtengo el producto
            $objProducto = $objServicio->getProductoId();
            //validar producto
            if($objProducto->getNombreTecnico() === "SAFECITYSWPOE")
            {
                //validar modelo elemento
                $arrayParametrosModelosSwPoe = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                        'INFRAESTRUCTURA',
                                                                                        '',
                                                                                        'MODELOS_SWITCH_POE',
                                                                                        $strModeloElementoNuevo,
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        $intEmpresaId);
                if(!isset($arrayParametrosModelosSwPoe) || empty($arrayParametrosModelosSwPoe))
                {
                    throw new \Exception("ERROR SW POE: El elemento ingresado no es un modelo de SW POE permitido, favor verificar.");
                }
            }
            else if($objProducto->getNombreTecnico() === "SAFECITYDATOS")
            {
                //verificar tipo elemento
                $objModeloElementoCpe = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                          ->findOneBy(array("nombreModeloElemento"  => $strModeloElementoNuevo,
                                                            "estado"                => "Activo"));
                if(is_object($objModeloElementoCpe))
                {
                    $objTipoElementoNuevo       = $objModeloElementoCpe->getTipoElementoId();
                    $arrayVerificarTipoElemento = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get("PARAMETROS PROYECTO GPON SAFECITY",
                                                                            'INFRAESTRUCTURA',
                                                                            'PARAMETROS',
                                                                            'MAPEO TIPOS ELEMENTOS CAMARA',
                                                                            $objTipoElementoNuevo->getNombreTipoElemento(),
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            $intEmpresaId);
                    if(empty($arrayVerificarTipoElemento))
                    {
                        throw new \Exception("ERROR CAMARA: El tipo elemento ingresado no es permitido, favor verificar.");
                    }
                }
                else
                {
                    throw new \Exception("Por favor registrar el modelo($strModeloElementoNuevo) en Telcos ".
                                         "para el elemento con la serie $strSerieElementoNuevo.");
                }
                //validar PTZ
                $arrayParametrosModelosPtz = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                        'INFRAESTRUCTURA',
                                                        '',
                                                        'MODELOS_CAMARAS_PTZ',
                                                        $strModeloElementoNuevo,
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        $intEmpresaId);
                if(!isset($arrayParametrosModelosPtz) || empty($arrayParametrosModelosPtz))
                {
                    $booleanValidarCamara = true;
                }
                //verificar si existe camara PTZ
                $arrayParVerificarCamaraPTZ = array(
                    "objServicio"    => $objServicio,
                    "strCodEmpresa"  => $intEmpresaId,
                    "strUsrCreacion" => $strUsrCreacion,
                    "strIpCreacion"  => $strIpCreacion,
                );
                $arrayVerificarCamaraPTZ = $serviceTecnico->verificarExisteCamaraPTZGponTN($arrayParVerificarCamaraPTZ);
                //validar modelo
                if(isset($arrayParametrosModelosPtz) && !empty($arrayParametrosModelosPtz)
                   && $arrayVerificarCamaraPTZ['status'] == "OK" && $arrayVerificarCamaraPTZ['resultado'] == "SI")
                {
                    throw new \Exception("Solo se debe activar una cámara PTZ en el punto.");
                }
                elseif( (!isset($arrayParametrosModelosPtz) || empty($arrayParametrosModelosPtz) )
                   && $arrayVerificarCamaraPTZ['status'] == "OK" && $arrayVerificarCamaraPTZ['resultado'] == "NO")
                {
                    throw new \Exception("Se debe activar primero la cámara PTZ en el punto.");
                }
            }
            else if($objProducto->getNombreTecnico() === "SAFECITYWIFI")
            {
                //verificar tipo elemento
                $objModeloElementoCpe = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                          ->findOneBy(array("nombreModeloElemento"  => $strModeloElementoNuevo,
                                                            "estado"                => "Activo"));
                if(is_object($objModeloElementoCpe))
                {
                    $objTipoElementoNuevo       = $objModeloElementoCpe->getTipoElementoId();
                    $arrayVerificarTipoElemento = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get("PARAMETROS PROYECTO GPON SAFECITY",
                                                                            'INFRAESTRUCTURA',
                                                                            'PARAMETROS',
                                                                            'MAPEO TIPOS ELEMENTOS AP',
                                                                            $objTipoElementoNuevo->getNombreTipoElemento(),
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            $intEmpresaId);
                    if(empty($arrayVerificarTipoElemento))
                    {
                        throw new \Exception("ERROR AP: El tipo elemento ingresado no es permitido, favor verificar.");
                    }
                }
                else
                {
                    throw new \Exception("Por favor registrar el modelo($strModeloElementoNuevo) en Telcos ".
                                         "para el elemento con la serie $strSerieElementoNuevo.");
                }
            }
            else
            {
                throw new \Exception("El producto del servicio '".$objProducto->getNombreTecnico().
                                     "' para la red GPON_MPLS no está soportado.");
            }
            //obtener los datos del ont
            $arrayParDatosOnt = array(
                "objServicio"    => $objServicio,
                "strUsrCreacion" => $strUsrCreacion,
                "strIpCreacion"  => $strIpCreacion
            );
            $arrayResultDatosOnt = $serviceTecnico->getDatosOntGponTN($arrayParDatosOnt);
            if($arrayResultDatosOnt['status'] != "OK" || empty($arrayResultDatosOnt['datos']))
            {
                throw new \Exception($arrayResultDatosOnt['mensaje']);
            }
            $arrayDataResultado['intIdOnt']  = $arrayResultDatosOnt['datos']['intIdOnt'];
            $arrayDataResultado['serieOnt']  = $arrayResultDatosOnt['datos']['strSerieOnt'];
            $arrayDataResultado['macOnt']    = $arrayResultDatosOnt['datos']['strMacOnt'];
            $arrayDataResultado['nombreOnt'] = $arrayResultDatosOnt['datos']['strNombreOnt'];
            $arrayDataResultado['modeloOnt'] = $arrayResultDatosOnt['datos']['strModeloOnt'];
            $arrayDataResultado['marcaOnt']  = $arrayResultDatosOnt['datos']['strMarcaOnt'];
            //interfaces
            $arrayDataResultado['interfaces'] = array();
            //validar si activa en el sw poe
            if($booleanValidarCamara)
            {
                //verificar SW POE
                $arrayParServSwPoe = array(
                    "objPunto"      => $objServicio->getPuntoId(),
                    "strParametro"  => "PRODUCTO_ADICIONAL_SW_POE",
                    "strCodEmpresa" => $intEmpresaId
                );
                $arrayResultServicioSwPoe = $serviceTecnico->getServicioGponPorProducto($arrayParServSwPoe);
                if($arrayResultServicioSwPoe['status'] == "OK" && is_object($arrayResultServicioSwPoe['objServicio']))
                {
                    $booleanActivarOnt = false;
                    $objServicioSwPoe  = $arrayResultServicioSwPoe['objServicio'];
                    if($objServicioSwPoe->getEstado() == "Activo")
                    {
                        $arrayDataResultado['intIdServicioSwPoe'] = $objServicioSwPoe->getId();
                        //obtener servicio tecnico
                        $objServcioTecnicoSwPoe = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array("servicioId" => $objServicioSwPoe->getId()));
                        $intIdEleClienteSwPoe   = $objServcioTecnicoSwPoe->getElementoClienteId();
                        if(!empty($intIdEleClienteSwPoe))
                        {
                            $objElementoSwPoe = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdEleClienteSwPoe);
                            if(is_object($objElementoSwPoe))
                            {
                                $arrayDataResultado['intIdSwPoeGpon']     = $objElementoSwPoe->getId();
                                $arrayDataResultado['strNombreSwPoeGpon'] = $objElementoSwPoe->getNombreElemento();
                                $arrayDataResultado['strSerieSwPoeGpon']  = $objElementoSwPoe->getSerieFisica();
                                $objMacDelServicio  = $serviceTecnico->getServicioProductoCaracteristica($objServicioSwPoe,
                                                                                                        "MAC CLIENTE",
                                                                                                        $objServicioSwPoe->getProductoId());
                                if(is_object($objMacDelServicio))
                                {
                                    $arrayDataResultado['strMacSwPoeGpon'] = $objMacDelServicio->getValor();
                                }
                                $objModeloElemento  = $objElementoSwPoe->getModeloElementoId();
                                $arrayDataResultado['strModeloSwPoeGpon'] = $objModeloElemento->getNombreModeloElemento();
                                $arrayDataResultado['strMarcaSwPoeGpon']  = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                            }
                        }
                        //obtener id de la interface del ont
                        $intIdInterfaceClienteSwPoe = $objServcioTecnicoSwPoe->getInterfaceElementoClienteId();
                        if(!empty($intIdInterfaceClienteSwPoe))
                        {
                            $objEnlaceSwPoe = $emComercial->getRepository('schemaBundle:InfoEnlace')
                                                            ->findOneBy(array("interfaceElementoFinId" => $intIdInterfaceClienteSwPoe,
                                                                              "estado"                 => "Activo"));
                            if(is_object($objEnlaceSwPoe))
                            {
                                $arrayDataResultado['intIdInterfaceOnt'] = $objEnlaceSwPoe->getInterfaceElementoIniId()->getId();
                            }
                        }
                        //verificar sw poe
                        if(!isset($arrayDataResultado['intIdSwPoeGpon']))
                        {
                            throw new \Exception("No se pudo encontrar el elemento Switch PoE, por favor notificar a Sistemas.");
                        }
                        //verificar interface del ont
                        if(!isset($arrayDataResultado['intIdInterfaceOnt']))
                        {
                            throw new \Exception("No se pudo encontrar la interface del ONT conectada al Switch PoE, ".
                                                 "por favor notificar a Sistemas.");
                        }
                        //obtener interfaces
                        $arrayInterfacesElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                               ->findBy(array("elementoId" => $arrayDataResultado['intIdSwPoeGpon'],
                                                                              "estado"     => "not connect"));
                        foreach($arrayInterfacesElemento as $objInterfaceElemento)
                        {
                            $arrayDataResultado['interfaces'][] = array('idInterface'     => $objInterfaceElemento->getId(),
                                                                        'nombreInterface' => $objInterfaceElemento->getNombreInterfaceElemento());
                        }
                    }
                    else
                    {
                        throw new \Exception("El servicio Switch PoE debe estar Activo.");
                    }
                }
            }
            //obtener interfaces del ont
            if($booleanActivarOnt)
            {
                $arrayInterfacesElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->findBy(array("elementoId" => $arrayDataResultado['intIdOnt'],
                                                                      "estado"     => "not connect"));
                //obtener los puertos permitidos del ont
                $arrayPuertosPermitidos = array();
                $arrayParametrosPuertos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                        'INFRAESTRUCTURA',
                                                                                        '',
                                                                                        'PUERTOS_ONT_PERMITIDOS_POR_PRODUCTO',
                                                                                        $objProducto->getId(),
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        $intEmpresaId);
                foreach($arrayParametrosPuertos as $arrayDetalles)
                {
                    $arrayPuertosPermitidos[] = $arrayDetalles['valor2'];
                }
                //obtener los modelos camaras PTZ
                $arrayModelosCamarasPtz    = array();
                $arrayParametrosModelosPtz = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                            'INFRAESTRUCTURA',
                                                                            '',
                                                                            'MODELOS_CAMARAS_PTZ',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $intEmpresaId);
                foreach($arrayParametrosModelosPtz as $arrayDetalles)
                {
                    $arrayModelosCamarasPtz[] = $arrayDetalles['valor1'];
                }
                //verificar si el puerto esta ocupado por una camara
                if($objProducto->getNombreTecnico() === "SAFECITYSWPOE" && !empty($arrayPuertosPermitidos) && !empty($arrayModelosCamarasPtz))
                {
                    //recorrer puertos
                    foreach($arrayPuertosPermitidos as $strPuertoPermitido)
                    {
                        $objInterfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                        ->findOneBy(array("elementoId"              => $arrayDataResultado['intIdOnt'],
                                                                          "nombreInterfaceElemento" => $strPuertoPermitido,
                                                                          "estado"                  => 'connected'));
                        if(is_object($objInterfaceElemento))
                        {
                            $arrayEstadosCamaras  = array("Activo","In-Corte","EnPruebas");
                            $arrayServicioCamaras = $emComercial->getRepository('schemaBundle:InfoServicio')
                                        ->createQueryBuilder('s')
                                        ->innerJoin('schemaBundle:AdmiProducto', 'p', 'WITH', 's.productoId = p.id')
                                        ->innerJoin('schemaBundle:InfoServicioTecnico', 'tec', 'WITH', 'tec.servicioId = s.id')
                                        ->innerJoin('schemaBundle:InfoElemento', 'ele', 'WITH', 'tec.elementoClienteId = ele.id')
                                        ->innerJoin('schemaBundle:AdmiModeloElemento', 'mod', 'WITH', 'ele.modeloElementoId = mod.id')
                                        ->innerJoin('schemaBundle:InfoEnlace', 'enl', 'WITH', 
                                                    'tec.interfaceElementoClienteId = enl.interfaceElementoFinId')
                                        ->where("p.nombreTecnico = :nombreTecnico")
                                        ->andWhere("enl.interfaceElementoIniId = :interfaceElementoIniId")
                                        ->andWhere("enl.estado = :estadoActivo")
                                        ->andWhere("s.estado IN (:estadosServicio)")
                                        ->andWhere("mod.nombreModeloElemento NOT IN (:nombresModeloElemento)")
                                        ->setParameter('nombreTecnico', "SAFECITYDATOS")
                                        ->setParameter('interfaceElementoIniId', $objInterfaceElemento->getId())
                                        ->setParameter('estadoActivo', "Activo")
                                        ->setParameter('estadosServicio', array_values($arrayEstadosCamaras))
                                        ->setParameter('nombresModeloElemento', array_values($arrayModelosCamarasPtz))
                                        ->getQuery()
                                        ->getResult();
                            if(!empty($arrayServicioCamaras) && count($arrayServicioCamaras) > 0)
                            {
                                $arrayInterfacesElemento[] = $objInterfaceElemento;
                            }
                        }
                    }
                }
                //verificar interfaces
                foreach($arrayInterfacesElemento as $objInterfaceElemento)
                {
                    if(empty($arrayPuertosPermitidos) || in_array($objInterfaceElemento->getNombreInterfaceElemento(), $arrayPuertosPermitidos))
                    {
                        $arrayDataResultado['interfaces'][] = array('idInterface'     => $objInterfaceElemento->getId(),
                                                                    'nombreInterface' => $objInterfaceElemento->getNombreInterfaceElemento());
                    }
                }
            }
            //setear activar ont
            $arrayDataResultado['seActivaOnt'] = $booleanActivarOnt ? "S" : "N";
            //seteo respuesta
            $arrayResultado['status']  = $this->status['OK'];
            $arrayResultado['mensaje'] = $this->mensaje['OK'];
            $arrayResultado['data']    = $arrayDataResultado;
        }
        catch(\Exception $exception)
        {
            if($exception->getMessage() == "NULL")
            {
                $arrayResultado['status']   = $this->status['NULL'];
                $arrayResultado['mensaje']  = $this->mensaje['NULL'];
            }
            else
            {
                $arrayResultado['status']   = $this->status['ERROR'];
                $arrayResultado['mensaje']  = $exception->getMessage();
            }

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'TecnicoWSController',
                'appMethod'        => 'putValidarElementoServicioGpon',
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
        }

        return $arrayResultado;
    }

    /**
    * Funcion que sirve para obtener la información de los elementos
    * para una migración a switch poe o cambio equipo para servicios GPON_MPLS.
    *
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.0 05-01-2022
    * @since 1.0
    *
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.1 17-11-2022 - Se valida que se obtenga el elemento cliente asignado a la solicitud.
    * @since 1.0
    *
    * @param type $arrayData
    * @return Array $arrayResultado
    *
    */
    private function getElementoClientePorServicioGpon($arrayData)
    {
        $emInfraestructura = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial       = $this->getDoctrine()->getManager();
        $serviceUtil       = $this->get('schema.Util');
        $serviceTecnico    = $this->get("tecnico.InfoServicioTecnico");
        $intIdServicio     = $arrayData['data']['idServicio'];
        $strTipoConsulta   = $arrayData['data']['tipoConsulta'];
        $intEmpresaId      = $arrayData['data']['empresaId'];
        $strUsrCreacion    = $arrayData['user'];
        $strIpCreacion     = "127.0.0.1";
        $intIdEleCliente   = null;

        try
        {
            //obtener servicio
            $objServicio          = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->findOneById($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }
            //verifico tipo de consulta
            if($strTipoConsulta == "CAMBIO_EQUIPO")
            {
                $objTipoSolicitud    = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                            ->findOneBy(array("descripcionSolicitud" => "SOLICITUD CAMBIO DE MODEM INMEDIATO",
                                                              "estado"               => "Activo"));
                $objDetalleSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                            ->findOneBy(array("servicioId"      => $objServicio->getId(),
                                                              "tipoSolicitudId" => $objTipoSolicitud,
                                                              "estado"          => "AsignadoTarea"));
                if(!is_object($objDetalleSolicitud))
                {
                    throw new \Exception("No se encontró la solicitud de cambio de equipo del servicio, por favor notificar a Sistemas.");
                }
                //dato de la solicitud
                $arrayDataResultado['intIdSolicitud'] = $objDetalleSolicitud->getId();
                //obtener elemento cliente
                $objCaractEleCliente = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array("descripcionCaracteristica" => "ELEMENTO CLIENTE",
                                                                    "estado"                      => "Activo"));
                if(!is_object($objCaractEleCliente))
                {
                    throw new \Exception("No se encontró la característica del elemento del cliente, por favor notificar a Sistemas.");
                }
                $objDetalleSolCaract = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array("detalleSolicitudId" => $objDetalleSolicitud->getId(),
                                                                      "caracteristicaId"   => $objCaractEleCliente->getId(),
                                                                      "estado"             => 'AsignadoTarea'));
                if(is_object($objDetalleSolCaract))
                {
                    $intIdEleCliente = $objDetalleSolCaract->getValor();
                }
            }
            else
            {
                //setear activar ont
                $arrayDataResultado['seActivaOnt'] = "N";
                //obtener los datos del ont
                $arrayParDatosOnt = array(
                    "objServicio"    => $objServicio,
                    "strUsrCreacion" => $strUsrCreacion,
                    "strIpCreacion"  => $strIpCreacion
                );
                $arrayResultDatosOnt = $serviceTecnico->getDatosOntGponTN($arrayParDatosOnt);
                if($arrayResultDatosOnt['status'] != "OK" || empty($arrayResultDatosOnt['datos']))
                {
                    throw new \Exception($arrayResultDatosOnt['mensaje']);
                }
                $arrayDataResultado['intIdOnt']  = $arrayResultDatosOnt['datos']['intIdOnt'];
                $arrayDataResultado['serieOnt']  = $arrayResultDatosOnt['datos']['strSerieOnt'];
                $arrayDataResultado['macOnt']    = $arrayResultDatosOnt['datos']['strMacOnt'];
                $arrayDataResultado['nombreOnt'] = $arrayResultDatosOnt['datos']['strNombreOnt'];
                $arrayDataResultado['modeloOnt'] = $arrayResultDatosOnt['datos']['strModeloOnt'];
                $arrayDataResultado['marcaOnt']  = $arrayResultDatosOnt['datos']['strMarcaOnt'];

                //obtener datos SW POE
                $arrayParServSwPoe = array(
                    "objPunto"      => $objServicio->getPuntoId(),
                    "strParametro"  => "PRODUCTO_ADICIONAL_SW_POE",
                    "strCodEmpresa" => $intEmpresaId
                );
                $arrayResultServicioSwPoe = $serviceTecnico->getServicioGponPorProducto($arrayParServSwPoe);
                if($arrayResultServicioSwPoe['status'] != "OK" || !is_object($arrayResultServicioSwPoe['objServicio']))
                {
                    throw new \Exception($arrayResultServicioSwPoe['mensaje']);
                }
                $objServicioSwPoe = $arrayResultServicioSwPoe['objServicio'];
                //obtener servicio tecnico
                $objServcioTecnicoSwPoe = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneBy(array("servicioId" => $objServicioSwPoe->getId()));
                $intIdEleClienteSwPoe   = $objServcioTecnicoSwPoe->getElementoClienteId();
                if(empty($intIdEleClienteSwPoe))
                {
                    throw new \Exception("No se encontró el elemento cliente del servicio SWITCH POE, por favor notificar a Sistemas.");
                }
                $objElementoSwPoe = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdEleClienteSwPoe);
                if(!is_object($objElementoSwPoe))
                {
                    throw new \Exception("No se encontró el objeto del elemento cliente del servicio SWITCH POE, ".
                                         "por favor notificar a Sistemas.");
                }
                $objModeloElemento  = $objElementoSwPoe->getModeloElementoId();
                $objMacDelServicio  = $serviceTecnico->getServicioProductoCaracteristica($objServicioSwPoe,
                                                                                         "MAC CLIENTE",
                                                                                         $objServicioSwPoe->getProductoId());
                //datos del sw poe
                $arrayDataResultado['intIdServicioSwPoe'] = $objServicioSwPoe->getId();
                $arrayDataResultado['intIdSwPoeGpon']     = $objElementoSwPoe->getId();
                $arrayDataResultado['strNombreSwPoeGpon'] = $objElementoSwPoe->getNombreElemento();
                $arrayDataResultado['strSerieSwPoeGpon']  = $objElementoSwPoe->getSerieFisica();
                $arrayDataResultado['strModeloSwPoeGpon'] = $objModeloElemento->getNombreModeloElemento();
                $arrayDataResultado['strMarcaSwPoeGpon']  = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                $arrayDataResultado['strMacSwPoeGpon']    = "";
                if(is_object($objMacDelServicio))
                {
                    $arrayDataResultado['strMacSwPoeGpon'] = $objMacDelServicio->getValor();
                }
                //obtener id de la interface del ont
                $intIdInterfaceClienteSwPoe = $objServcioTecnicoSwPoe->getInterfaceElementoClienteId();
                if(empty($intIdInterfaceClienteSwPoe))
                {
                    throw new \Exception("No se encontró la interface elemento cliente del servicio SWITCH POE, ".
                                         "por favor notificar a Sistemas.");
                }
                $objEnlaceSwPoe = $emComercial->getRepository('schemaBundle:InfoEnlace')
                                                ->findOneBy(array("interfaceElementoFinId" => $intIdInterfaceClienteSwPoe,
                                                                  "estado"                 => "Activo"));
                if(!is_object($objEnlaceSwPoe))
                {
                    throw new \Exception("No se pudo encontrar la interface del ONT conectada al Switch PoE, ".
                                         "por favor notificar a Sistemas.");
                }
                $arrayDataResultado['intIdInterfaceOnt'] = $objEnlaceSwPoe->getInterfaceElementoIniId()->getId();
                //obtener interfaces
                $arrayInterfacesElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->findBy(array("elementoId" => $arrayDataResultado['intIdSwPoeGpon'],
                                                                      "estado"     => "not connect"));
                foreach($arrayInterfacesElemento as $objInterfaceElemento)
                {
                    $arrayDataResultado['interfaces'][] = array('idInterface'     => $objInterfaceElemento->getId(),
                                                                'nombreInterface' => $objInterfaceElemento->getNombreInterfaceElemento());
                }
            }
            //obtengo los datos del elemento cliente
            $objServcioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array("servicioId" => $objServicio->getId()));
            if(empty($intIdEleCliente))
            {
                $intIdEleCliente   = $objServcioTecnico->getElementoClienteId();
                if(empty($intIdEleCliente))
                {
                    throw new \Exception("No se encontró el elemento cliente del servicio, por favor notificar a Sistemas.");
                }
            }
            $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdEleCliente);
            if(!is_object($objElemento))
            {
                throw new \Exception("No se encontró el objeto del elemento cliente del servicio, por favor notificar a Sistemas.");
            }
            $objModeloElemento  = $objElemento->getModeloElementoId();
            $objTipoElemento    = $objModeloElemento->getTipoElementoId();
            $objMacDelServicio  = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                     "MAC CLIENTE",
                                                                                     $objServicio->getProductoId());
            //datos del elemento cliente
            $arrayDataResultado['intIdElementoCliente']     = $objElemento->getId();
            $arrayDataResultado['strNombreElementoCliente'] = $objElemento->getNombreElemento();
            $arrayDataResultado['strSerieElementoCliente']  = $objElemento->getSerieFisica();
            $arrayDataResultado['strModeloElementoCliente'] = $objModeloElemento->getNombreModeloElemento();
            $arrayDataResultado['strMarcaElementoCliente']  = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
            $arrayDataResultado['strTipoElementoCliente']   = $objTipoElemento->getNombreTipoElemento();
            $arrayDataResultado['strMacElementoCliente']    = "";
            if(is_object($objMacDelServicio))
            {
                $arrayDataResultado['strMacElementoCliente'] = $objMacDelServicio->getValor();
            }

            //seteo respuesta
            $arrayResultado['status']  = $this->status['OK'];
            $arrayResultado['mensaje'] = $this->mensaje['OK'];
            $arrayResultado['data']    = $arrayDataResultado;
        }
        catch(\Exception $exception)
        {
            if($exception->getMessage() == "NULL")
            {
                $arrayResultado['status']   = $this->status['NULL'];
                $arrayResultado['mensaje']  = $this->mensaje['NULL'];
            }
            elseif(strpos($exception->getMessage(),"cambio de equipo") !== false)
            {
                $arrayResultado['status']   = $this->status['NULL'];
                $arrayResultado['mensaje']  = $exception->getMessage();
            }
            else
            {
                $arrayResultado['status']   = $this->status['ERROR'];
                $arrayResultado['mensaje']  = $exception->getMessage();
            }

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'TecnicoWSController',
                'appMethod'        => 'getElementoClientePorServicioGpon',
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
        }

        return $arrayResultado;
    }

    /**
    * Funcion que sirve para realizar el cambio equipo para servicios GPON_MPLS.
    *
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.0 05-01-2022
    * @since 1.0
    *
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.1 04-11-2022 - Se modifica el método putCambioEquipoTNGpon a putCambioEquipoTN, para los cambio de equipos TN.
    * @since 1.0
    *
    * @param type $arrayData
    * @return Array $arrayResultado
    *
    */
    private function putCambioEquipoTN($arrayData)
    {
        $emInfraestructura = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial       = $this->getDoctrine()->getManager();
        $serviceCambioElemento = $this->get('tecnico.InfoCambioElemento');
        $serviceUtil       = $this->get('schema.Util');
        $intIdServicio     = $arrayData['data']['idServicio'];
        $intEmpresaId      = $arrayData['data']['empresaId'];
        $strPrefijoEmpresa = $arrayData['data']['prefijoEmpresa'];
        $strUsrCreacion    = $arrayData['user'];
        $strIpCreacion     = "127.0.0.1";

        try
        {
            //obtener servicio
            $objServicio       = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->findOneById($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }
            //obtener ip
            $strIpCpe          = "";
            $objInfoIp         = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                ->findOneBy(array("servicioId" => $intIdServicio,
                                                                                  "estado"     => "Activo"));
            if(is_object($objInfoIp))
            {
                $strIpCpe = $objInfoIp->getId();
            }
            //arreglo de cambio equipo
            $arrayPeticiones[] = array( 'idEmpresa'              => $intEmpresaId,
                                        'prefijoEmpresa'         => $strPrefijoEmpresa,
                                        'idServicio'             => $intIdServicio,
                                        'idElemento'             => $arrayData['data']['idElementoCliente'],
                                        'ipCpe'                  => $strIpCpe,
                                        'idResponsable'          => $arrayData['data']['idResponsable'],
                                        'tipoResponsable'        => "C",
                                        'nombreCpe'              => $objServicio->getLoginAux(),
                                        'modeloCpe'              => $arrayData['data']['modeloNuevoElemento'],
                                        'macCpe'                 => $arrayData['data']['macNuevoElemento'],
                                        'serieCpe'               => $arrayData['data']['serieNuevoElemento'],
                                        'descripcionCpe'         => $arrayData['data']['descripcionNuevoElemento'],
                                        'tipoElementoCpe'        => $arrayData['data']['tipoNuevoElemento'],
                                        'macCpeBck'              => "",
                                        'strRegistraEquipo'      => "S",
                                        'strEsCambioEquiSoporteMasivo'  => "NO",
                                        'nombreInterface'        => "",
                                        'nombreInterfaceBck'     => "",
                                        'interfacesConectadas'   => "0",
                                        'intIdElementoWifi'      => "",
                                        'strModeloWifi'          => "",
                                        'strMacWifi'             => "",
                                        'strSerieWifi'           => "",
                                        'strDescripcionWifi'     => "",
                                        'strNombreWifi'          => "",
                                        'strTieneMigracionHw'    => "",
                                        'strEquipoCpeHw'         => "",
                                        'strEquipoWifiAdicional' => "",
                                        'strAgregarWifi'         => "",
                                        'strEsSmartWifi'         => "NO",
                                        'strEsApWifi'            => "NO",
                                        'strTipoRed'             => $arrayData['data']['tipoRed'],
                                        'usrCreacion'            => $strUsrCreacion,
                                        'esPseudoPe'             => "N",
                                        'ipCreacion'             => $strIpCreacion,
                                        'serNaf'                 => $this->container->getParameter('database_host_naf'),
                                        'ptoNaf'                 => $this->container->getParameter('database_port_naf'),
                                        'sidNaf'                 => $this->container->getParameter('database_name_naf'),
                                        'usrNaf'                 => $this->container->getParameter('user_naf'),
                                        'pswNaf'                 => $this->container->getParameter('passwd_naf'),
                                        'host'                   => $this->container->getParameter('host'),
                                        'strEsExtenderDualBand'  => "NO",
                                        'objEmpleadoSesion'      => $strUsrCreacion
                                      );
            $arrayRespuesta = $serviceCambioElemento->cambioElemento($arrayPeticiones);
            if($arrayRespuesta[0]['status']!="OK")
            {
                throw new \Exception($arrayRespuesta[0]['mensaje']);
            }

            //seteo respuesta
            $arrayResultado['status']  = $this->status['OK'];
            $arrayResultado['mensaje'] = $arrayRespuesta[0]['mensaje'];
        }
        catch(\Exception $exception)
        {
            $arrayResultado['status']   = $this->status['ERROR'];
            $arrayResultado['mensaje']  = $exception->getMessage();

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'TecnicoWSController',
                'appMethod'        => 'putCambioEquipoTN',
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
        }

        return $arrayResultado;
    }

    /**
     * procesarActivarTelcographTn
     *
     * Función que permite la creación del cliente en el telcograph
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 27-06-2022
     * @since 1.0
     *
     * @param Array $arrayData
     *                         [
     *                           servicioId        Id del servicio
     *                           usrCreacion       Usuario de creación
     *                           ipCreacion        Ip de creación
     *                         ]
     *
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     * ]
     */
    public function procesarActivarTelcographTn($arrayData)
    {
        $serviceUtil    = $this->get('schema.Util');
        $emComercial    = $this->getDoctrine()->getManager();
        $arrayRespuesta = array();
        try
        {
            //inicialización de variables
            $arrayParametros                   = array();
            $arrayParametros['strProceso']     = "crear";
            $arrayParametros['strUsrCreacion'] = $arrayData['usrCreacion'];
            $arrayParametros['strIpCreacion']  = $arrayData['ipCreacion'];

            if(
               (isset($arrayData['data']['servicioId']) && !empty($arrayData['data']['servicioId'])) &&
               (isset($arrayData['usrCreacion']) && !empty($arrayData['usrCreacion']) &&
               (isset($arrayData['ipCreacion']) && !empty($arrayData['ipCreacion'])))
              )
            {
                $strProcesarTelcoGraph = isset($arrayData['data']['procesarTelcoGraph']) ? $arrayData['data']['procesarTelcoGraph'] : "";
                $strProcesarZabbix     = isset($arrayData['data']['procesarZabbix'])     ? $arrayData['data']['procesarZabbix']     : "";
                //obtener servicio
                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                        ->find($arrayData['data']['servicioId']);
                if(!is_object($objServicio))
                {
                    throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
                }

                $arrayParametros['objInfoServicio'] = $objServicio;
                $serviceServicioTecnico    = $this->get('tecnico.InfoServicioTecnico');
                //procesar telcograph
                if($strProcesarTelcoGraph == "SI")
                {
                    $arrayRespTelcograph       = $serviceServicioTecnico->procesaHostTelcoGraph($arrayParametros);
                    $arrayRespuesta['status']  = $arrayRespTelcograph['strStatus'];
                    $arrayRespuesta['mensaje'] = $arrayRespTelcograph['strMensaje'];
                }
                //procesar zabbix
                if($strProcesarZabbix == "SI")
                {
                    $arrayRespZabbix           = $serviceServicioTecnico->enviarInfoClienteZabbix($arrayParametros);
                    $arrayRespuesta['status']  = !empty($arrayRespZabbix) && is_array($arrayRespZabbix) ? "OK" : "ERROR";
                    $arrayRespuesta['mensaje'] = !empty($arrayRespZabbix) && is_array($arrayRespZabbix) ? "OK" : $arrayRespZabbix;
                }
            }
            else
            {
                $arrayRespuesta['status']  = "ERROR";
                $arrayRespuesta['mensaje'] = "Información incompleta.";
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->procesarActivarTelcographTn()',
                                       $ex->getMessage(),
                                       $arrayData['usrCreacion'],
                                       $arrayData['ipCreacion']);
            $arrayRespuesta['status']  = "ERROR";
            $arrayRespuesta['mensaje'] = "Se presentaron problemas al crear el monitoreo del TelcoGraph o Zabbix, favor notificar a sistemas.";
        }
        return $arrayRespuesta;
    }

    /**
    * Funcion que sirve para llamar y ejecutar Jar de Reactivacion TTCO.
    *
    * @author Javier Hidalgo <jihidalgo@telconet.ec>
    * @version 1.0 26-07-2022
    * @since 1.0
    * @param type $arrayData
    * @return Array $arrayResultado
    *
    */
    private function callJarReactivacion($arrayData)
    {
        try
        {
            $strServicios    = $arrayData['data']['servicios'];
            $strUsrCreacion  = $arrayData['data']['usrCreacion'];
            $strIpCliente    = $arrayData['data']['ipCliente'];
            $strProceso      = $arrayData['data']['proceso'];
            $strFechaProceso = $arrayData['data']['fechaProceso'];
            //llamar service callJarReactivacion
            $objReconectarService = $this->get('tecnico.InfoReconectarServicio');
            $arrayPeticiones['servicios']       = $strServicios;
            $arrayPeticiones['usrCreacion']     = $strUsrCreacion;
            $arrayPeticiones['ipCliente']       = $strIpCliente;
            $arrayPeticiones['proceso']         = $strProceso;
            $arrayPeticiones['fechaProceso']    = $strFechaProceso;
            $arrayResultado = $objReconectarService->callJarReactivacion($arrayPeticiones);
        }
        catch(\Exception $e)
        {
            $arrayResultado['status']  = "ERROR";
            $arrayResultado['mensaje'] = $e->getMessage();
        }
        return $arrayResultado;
    }
    /**
    * Funcion que sirve para llamar y ejecutar Jar de Corte Masivo.
    *
    * @author Milen Ortega <mortega1@telconet.ec>
    * @version 1.0 27-11-2022
    * @since 1.0
    * @param type $arrayData
    * @return Array $arrayResultado
    *
    */
    private function callJarCorteMasivo($arrayData)
    {
        try
        {
            $strIdsPuntosCR     = $arrayData['data']['idsPuntosCR'];
            $intMontoDeuda      = $arrayData['data']['montoDeuda'];
            $strNumFactAbiertas = $arrayData['data']['numFactAbiertas'];
            $intIdOficina       = $arrayData['data']['idOficina'];
            $intIdFormaPago     = $arrayData['data']['idFormaPago'];
            $strUsrCreacion     = $arrayData['data']['usrCreacion'];
            $strIpCliente       = $arrayData['data']['ipCliente'];
            $strProceso         = $arrayData['data']['proceso'];
            $strFechaProceso    = $arrayData['data']['fechaProceso'];
            //llamar service callJarCorteMasivo
            $objReconectarService = $this->get('tecnico.InfoReconectarServicio');
            $arrayPeticiones['idsPuntosCR']       = $strIdsPuntosCR;
            $arrayPeticiones['montoDeuda']       = $intMontoDeuda;
            $arrayPeticiones['numFactAbiertas']       = $strNumFactAbiertas;
            $arrayPeticiones['idOficina']       = $intIdOficina;
            $arrayPeticiones['idFormaPago']       = $intIdFormaPago;
            $arrayPeticiones['usrCreacion']     = $strUsrCreacion;
            $arrayPeticiones['ipCliente']       = $strIpCliente;
            $arrayPeticiones['proceso']         = $strProceso;
            $arrayPeticiones['fechaProceso']    = $strFechaProceso;
            $arrayResultado = $objReconectarService->callJarCorteMasivo($arrayPeticiones);
        }
        catch(\Exception $e)
        {
            $arrayResultado['status']  = "ERROR";
            $arrayResultado['mensaje'] = $e->getMessage();
        }
        return $arrayResultado;
    }
    /**
    * Funcion que sirve para obtener la información de los tipos de elementos
    * con los elementos asignados al tecnico, para los servicios MobileBus.
    * 
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.0 23-09-2022
    *
    * @author Leonardo Mero <lemero@telconet.ec>
    * @version 1.1 09-12-2022 - Se retornan los elementos del producto SAFE ENTRY cuando el servicio posee dicho producto
    *
    * @author Axel Auza <aauza@telconet.ec>
    * @version 1.2 07-06-2023 - Se agrega validación para obtener los elementos por clientes en el producto SEG_VEHICULO
    *
    * @since 1.0
    * @param type $arrayData
    * @return Array $arrayResultado
    *
    */
    private function getEquiposPorProducto($arrayData)
    {
        $emGeneral         = $this->getDoctrine()->getManager('telconet_general');
        $emComercial       = $this->getDoctrine()->getManager();
        $emNaf             = $this->getDoctrine()->getManager("telconet_naf");
        $serviceUtil       = $this->get('schema.Util');
        $intIdServicio     = $arrayData['data']['idServicio'];
        $intEmpresaId      = $arrayData['data']['empresaId'];
        $intIdEmpleado     = $arrayData['data']['intPersona'];
        $strUsrCreacion    = $arrayData['user'];

        try
        {
            //obtener servicio
            $objServicio          = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                              ->findOneById($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }

            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId());
            if(!isset($objProducto))
            {
                throw new \Exception('No se pudo encontrar el producto');
            }
            //obtener los elementos del cliente
            $arrayDataResultado = array();
            if($objProducto->getNombreTecnico() == 'SEG_VEHICULO')
            {
                $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('PARAMETROS_SEG_VEHICULOS',
                                                                  'TECNICO',
                                                                  '',
                                                                  'ELEMENTOS_PRODUCTO',
                                                                  $objServicio->getProductoId()->getId(),
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $intEmpresaId,
                                                                  'valor5',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
                if(!isset($arrayParElementos) || empty($arrayParElementos))
                {
                    $arrayParElementos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('PARAMETROS_SEG_VEHICULOS',
                                                                      'TECNICO',
                                                                      '',
                                                                      'ELEMENTOS_PRODUCTO',
                                                                      $objServicio->getProductoId()->getId(),
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $intEmpresaId,
                                                                      'valor5',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      'GENERAL');
                }
            }
            elseif($objProducto->getNombreTecnico() == 'SAFE ENTRY')
            {
                $arrayParElementos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get('CONFIG ELEMENTOS SAFE ENTRY',
                                                            'TECNICO',
                                                            '',
                                                            'ELEMENTOS_SAFE_ENTRY',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $intEmpresaId,
                                                            'valor7');
            }
            foreach($arrayParElementos as $arrayItemParEle)
            {
                if($objProducto->getNombreTecnico() == 'SEG_VEHICULO')
                {
                    $arrayTiposElementos = explode(";",$arrayItemParEle['valor2']);
                    $intContador    = intval($arrayItemParEle['valor5']);
                    $strDescripcion = $arrayItemParEle['valor3'];
                    $strPoseeMac    = $arrayItemParEle['valor4'];
                    $strOrder       = $arrayItemParEle['valor5'];
                    $strKey         = $arrayItemParEle['valor6'];
                }
                elseif($objProducto->getNombreTecnico() == 'SAFE ENTRY')
                {
                    $arrayTiposElementos = json_decode($arrayItemParEle['valor3']);
                    $intContador    = intval($arrayItemParEle['valor7']);
                    $strDescripcion = $arrayItemParEle['valor2'];
                    $strPoseeMac    = $arrayItemParEle['valor6'];
                    $strOrder       = $arrayItemParEle['valor7'];
                    $strKey         = $arrayItemParEle['valor5'];
                }
                $arrayDataResultado[$intContador]['tipoElemento'] = $arrayTiposElementos[0];
                $arrayDataResultado[$intContador]['descripcion']  = $arrayItemParEle['valor3'];
                $arrayDataResultado[$intContador]['mac']          = $arrayItemParEle['valor4'] == "S";
                $arrayDataResultado[$intContador]['order']        = $arrayItemParEle['valor5'];
                $arrayDataResultado[$intContador]['key']          = $arrayItemParEle['valor6'];
                $arrayDataResultado[$intContador]['elementos']    = array();
                //obtener elementos del tecnico
                foreach($arrayTiposElementos as $strTipoElemento)
                {
                    $arrayRequestObtenerEquiposAsignados = array('boolPerteneceElementoNodo' => false,
                                                                 'strIdEmpresa'    =>  $intEmpresaId,
                                                                 'intIdPersona'    =>  $intIdEmpleado,
                                                                 'strEstadoEquipo' => 'PI',
                                                                 'strNumeroSerie'  =>  null,
                                                                 'strModelo'       =>  null,
                                                                 'strTipoElemento' =>  $strTipoElemento);

                    $arrayActivosCliente = $emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                                                ->obtenerEquiposAsignados($arrayRequestObtenerEquiposAsignados);
                    if($arrayActivosCliente['status'])
                    {
                        foreach($arrayActivosCliente['result'] as $arrayItemActivoCliente)
                        {
                            $arrayDataResultado[$intContador]['elementos'][] = array(
                                "serie"  => $arrayItemActivoCliente['serieElemento'],
                                "modelo" => $arrayItemActivoCliente['modeloElemento'],
                                "mac"    => $arrayItemActivoCliente['macElemento']
                            );
                        }
                    }
                }
            }

            //seteo respuesta
            $arrayResultado['status']  = $this->status['OK'];
            $arrayResultado['mensaje'] = $this->mensaje['OK'];
            $arrayResultado['data']    = $arrayDataResultado;
        }
        catch(\Exception $exception)
        {
            if($exception->getMessage() == "NULL")
            {
                $arrayResultado['status']   = $this->status['NULL'];
                $arrayResultado['mensaje']  = $this->mensaje['NULL'];
            }
            else
            {
                $arrayResultado['status']   = $this->status['ERROR'];
                $arrayResultado['mensaje']  = $exception->getMessage();
            }

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'TecnicoWSController',
                'appMethod'        => 'getEquiposPorProducto',
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
        }

        return $arrayResultado;
    }

    /**
     * verificaPotenciaMDFttx
     *
     * Función que permite validar la potencia que tiene un servicio antes de activar
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 11-08-2022
     * @since 1.0
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.1 21-11-2022 - Se asigna tareas a logines de la empresa TN
     *
     * @return Array $arrayRespuesta
     * [
     *    - status   Estado de la transaccion ejecutada
     *    - mensaje  Mensaje de la transaccion ejecutada
     * ]
     */
    public function verificaPotenciaMDFttx($arrayData)
    {
        $strClass                   = "TecnicoWSController";
        $strAppMethod               = "verificaPotenciaMDFttx";
        $arrayRespuesta             = array();
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $emGeneral                  = $this->getDoctrine()->getManager('telconet_general');
        $serviceInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil                = $this->get('schema.Util');
        $intIdServicio              = $arrayData['data']['servicioId'];
        $intElementoId              = $arrayData['data']['elementoId'];
        $strModeloOnt               = $arrayData['data']['modelo_ont'];
        $strUsrCreacion             = $arrayData['user'];
        $strIpCreacion              = "127.0.0.1";
        $serviceGeneral             = $this->get('tecnico.InfoServicioTecnico');
        $intProductoId              = $arrayData['data']['idProducto'];
        $strDestinatarioTarea       = "";
        $intOntIdAnt                = "";
        $strPuertoOltAnt            = "";

        try 
        {

            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intProductoId);
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

            $arrayRequiereValidarPotencia = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne(
                                                    'VALIDAR POTENCIA SERVICIO',
                                                    'SOPORTE',
                                                    '',
                                                    'REQUIERE VALIDACION POTENCIA',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    $arrayData['data']['empresaCod']);
            if (is_array($arrayRequiereValidarPotencia) && $arrayRequiereValidarPotencia['valor1']) 
            {   
                $arrayPotencias = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->getOne(
                                        'VALIDAR POTENCIA SERVICIO',
                                        'SOPORTE',
                                        '',
                                        'NIVELES DE POTENCIA OPTIMOS',
                                        '',
                                        '',
                                        '',
                                        '',
                                        '');

                $arrayMensaje = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->getOne(
                                        'VALIDAR POTENCIA SERVICIO',
                                        'SOPORTE',
                                        '',
                                        'MENSAJE POTENCIA SOBRE EL RANGO',
                                        '',
                                        '',
                                        '',
                                        '',
                                        '');
                                        
                if(!empty($arrayPotencias['valor1']) && !empty($arrayPotencias['valor2']) && !empty($arrayMensaje['valor1']))
                {
                    $intPotenciaMax = $arrayPotencias['valor1'];
                    $intPotenciaMin = $arrayPotencias['valor2'];
                    $strMensajePotencia = $arrayMensaje['valor1'];
                }
                else
                {
                    throw new \Exception("Valores de potencias no validos");
                }
                
                $arrayLineProfile = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(
                                                                'VALIDAR POTENCIA SERVICIO',
                                                                'SOPORTE',
                                                                '',
                                                                'LINE-PROFILE-POTENCIA',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '');
                if(!empty($arrayLineProfile['valor1']))
                {
                    $strLineProfile = $arrayLineProfile['valor1'];
                }
                else
                {
                    throw new \Exception("LINE-PROFILE-POTENCIA no se encuentra parametrizado");
                }

                $objProfileProdCaract = $serviceGeneral->getServicioProductoCaracteristica($objServicio, "LINE-PROFILE-NAME", $objProducto);
                if($objProfileProdCaract)
                {
                    $strLineProfile = $objProfileProdCaract->getValor();
                }

                $arrayAsuntoTarea = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(
                                                                'VALIDAR POTENCIA SERVICIO',
                                                                'SOPORTE',
                                                                '',
                                                                'ASUNTO DE LA TAREA',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '');
                if(!empty($arrayAsuntoTarea['valor1']))
                {
                    $strAsuntoTarea = $arrayAsuntoTarea['valor1'];
                }
                else
                {
                    throw new \Exception("Asunto de la tarea no parametrizado");
                }

                if (empty($arrayData['data']['serialOnt'])) 
                {
                    $objSpcTrasladoServicioInternet = $serviceGeneral->getServicioProductoCaracteristica($objServicio, 
                                                                                                        "TRASLADO", 
                                                                                                        $objProducto);
                    if(is_object($objSpcTrasladoServicioInternet))
                    {
                        $intIdServicioOrigen        = $objSpcTrasladoServicioInternet->getValor();
                        $objServicioOrigen          = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioOrigen);
                        $objServicioTecnicoOrigen   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array( "servicioId" => $intIdServicioOrigen));
                        if(!is_object($objServicioTecnicoOrigen) 
                            || !($objServicioTecnicoOrigen->getElementoId() > 0) || 
                            !($objServicioTecnicoOrigen->getInterfaceElementoId() > 0) 
                            || !($objServicioTecnicoOrigen->getElementoConectorId() > 0) 
                            || !($objServicioTecnicoOrigen->getInterfaceElementoConectorId() > 0)
                            || !($objServicioTecnicoOrigen->getElementoClienteId() > 0) 
                            || !($objServicioTecnicoOrigen->getInterfaceElementoClienteId() > 0))
                        {
                            throw new \Exception("El servicio técnico del servicio en el punto origen no tiene la información técnica completa");
                        }
                        else 
                        {
                            $objElementoCpeOntOrigen    = $emComercial->getRepository('schemaBundle:InfoElemento')
                                                                ->find($objServicioTecnicoOrigen->getElementoClienteId());
                            if (is_object($objElementoCpeOntOrigen)) 
                            {
                                $arrayData['data']['serialOnt'] = $objElementoCpeOntOrigen->getSerieFisica();

                                $objInterfaceElementoAnt = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                    ->find($objServicioTecnicoOrigen->getInterfaceElementoId());
                                if(is_object($objInterfaceElementoAnt))
                                {
                                    $strPuertoOltAnt = $objInterfaceElementoAnt->getNombreInterfaceElemento();
                                }
                                       
                                $objIndiceCliente = $serviceGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                          "INDICE CLIENTE", 
                                                                                                          $objProducto);
                                if(is_object($objIndiceCliente))
                                {
                                    $intOntIdAnt = $objIndiceCliente->getValor();
                                }
                                
                                $objSpcServiceProfile = $serviceGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                          "SERVICE-PROFILE", 
                                                                                                          $objProducto);
                                if(is_object($objSpcServiceProfile))
                                {
                                    $strServiceProfile = $objSpcServiceProfile->getValor();
                                }
                                $objSpcMacOnt = $serviceGeneral->getServicioProductoCaracteristica($objServicioOrigen, "MAC ONT", $objProducto);
                                if(is_object($objSpcMacOnt))
                                {
                                    $arrayData['data']['macOnt'] = $objSpcMacOnt->getValor();
                                }
                                $objSpcLineProfile = $serviceGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                        "LINE-PROFILE-NAME", 
                                                                                                        $objProducto);
                                if(is_object($objSpcLineProfile))
                                {
                                    $strLineProfile = $objSpcLineProfile->getValor();
                                }
                            }
                        }
                    }                                                                      
                    else 
                    {
                        throw new \Exception("No existe la característica de Traslado para el servicio actual");
                    }
                }
                else 
                {
                    $objProfileProdCaract = $serviceGeneral->getServicioProductoCaracteristica($objServicio, "SERVICE-PROFILE", $objProducto);
                    if($objProfileProdCaract)
                    {
                        $strServiceProfile = $objProfileProdCaract->getValor();
                    }
                    else
                    {
                        //buscar el service profile en el elemento
                        $objDetalleElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->findOneBy(array(  "detalleNombre" => "SERVICE-PROFILE-NAME",
                                                                    "detalleValor"  => $strModeloOnt,
                                                                    "elementoId"    => $intElementoId
                                                                )
                                                        );
                        if($objDetalleElemento)
                        {
                            $strServiceProfile = $objDetalleElemento->getDetalleValor();
                        }
                        else
                        {
                            $strServiceProfile = $strModeloOnt;
                        }
                    }
                }                

                $arrayDatos  = array(
                    'serial_ont'         => $arrayData['data']['serialOnt'],
                    'mac_ont'            => $arrayData['data']['macOnt'],
                    'nombre_olt'         => $arrayData['data']['nombre_olt'],
                    'ip_olt'             => $arrayData['data']['ip_olt'],
                    'puerto_olt'         => $arrayData['data']['puerto_olt'],
                    'modelo_olt'         => $arrayData['data']['modelo_olt'],
                    'estado_servicio'    => 'EnVerificacion',
                    'mac_wifi'           => isset($arrayData['data']['mac_wifi']) ? $arrayData['data']['mac_wifi']: "",
                    'service_profile'    => $strServiceProfile,
                    'line_profile'       => $strLineProfile,
                    'ont_id_antiguo'     => $intOntIdAnt,
                    'puerto_olt_antiguo' => $strPuertoOltAnt
                );

                $arrayDataWs =  json_encode(array(
                                    'empresa'              => $arrayData['empresa'],
                                    'nombre_cliente'       => $arrayData['data']['nombre_cliente'],
                                    'login'                => $arrayData['login'],
                                    'identificacion'       => '',
                                    'datos'                => $arrayDatos,
                                    'opcion'               => 'POTENCIA_ENGANCHADOS',
                                    'ejecutaComando'       => 'SI',
                                    'usrCreacion'          => $arrayData['user'],
                                    'ipCreacion'           => $strIpCreacion,
                                    'comandoConfiguracion' => 'SI'
                                ));

                $serviceUtil->insertLog(array(
                                                'enterpriseCode'   => "10",
                                                'logType'          => 1,
                                                'logOrigin'        => 'TELCOS',
                                                'application'      => 'TELCOS',
                                                'appClass'         => $strClass,
                                                'appMethod'        => $strAppMethod,
                                                'descriptionError' => 'Request-POTENCIA_ENGANCHADOS',
                                                'status'           => 'Seguimiento',
                                                'inParameters'     => $arrayDataWs,
                                                'creationUser'     => $arrayData['user']));
                                 
                $arrayDataObtenida = $serviceInfoServicioTecnico->verificaPotenciaMDFttx($arrayDataWs);
                if( !empty($arrayDataObtenida))
                {
                    if ($arrayDataObtenida['status'] == 500) 
                    {
                        throw new \Exception("No Existe Conectividad con el WS POTENCIA_ENGANCHADOS");
                    }
                    
                    $arrayDataObtenida = json_decode($arrayDataObtenida['result'],true);

                    if($arrayDataObtenida['status']=='OK' && $arrayDataObtenida['potencia'])
                    {
                        $intPotenciaWS = $arrayDataObtenida['potencia'];
                        if($intPotenciaMin <= $intPotenciaWS && $intPotenciaWS <= $intPotenciaMax)
                        {
                            $strObservacion = 'Potencia en nivel óptimo'.'<br> <b>Potencia: '.$intPotenciaWS.' dBm <b>';

                            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                            ->find($arrayData['data']['servicioId']);
                            $objInfoServicioHistorial = new InfoServicioHistorial();
                            $objInfoServicioHistorial->setEstado('AsignadoTarea');
                            $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);                                
                            $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                            $objInfoServicioHistorial->setServicioId($objServicio);
                            $objInfoServicioHistorial->setObservacion($strObservacion);
                            $emComercial->persist($objInfoServicioHistorial);
                            $emComercial->flush();
                            
                            $arrayRespuesta['status']  = $this->status['OK'];
                            $arrayRespuesta['mensaje'] = $strObservacion;
                            
                        }
                        else
                        {
                            $strObservacionFallido = 'Se ha obtenido la potencia del servicio '.
                                                'con un nivel no óptimo: '.$intPotenciaWS.' dBm';
                            if($intPotenciaWS > $intPotenciaMax)
                            {
                                $arrayRespuesta['status']  = $this->status['ERROR'];
                                $arrayRespuesta['mensaje'] = $strMensajePotencia. 
                                                '<br> <b>Potencia: '.$intPotenciaWS.' dBm <b>';

                                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->find($arrayData['data']['servicioId']);
                                $objInfoServicioHistorial = new InfoServicioHistorial();
                                $objInfoServicioHistorial->setEstado('AsignadoTarea');
                                $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);                                
                                $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                                $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                                $objInfoServicioHistorial->setServicioId($objServicio);
                                $objInfoServicioHistorial->setObservacion($strObservacionFallido);
                                $emComercial->persist($objInfoServicioHistorial);
                                $emComercial->flush();
                            }
                            else
                            {
                                $arrayData['potencia'] = $intPotenciaWS;
                                $arrayData['potenciaMin'] = $intPotenciaMin;
                                $arrayData['potenciaMax'] = $intPotenciaMax;
                                $arrayResponsePotSplitter = $this->verificaPotenciaSplitter($arrayData);
                                if($arrayResponsePotSplitter['status']=='OK')
                                {
                                    $arrayRespuesta['status']  = $this->status['OK'];
                                    $arrayRespuesta['mensaje'] = $arrayResponsePotSplitter['mensaje'];
                                }else
                                {
                                    $arrayRespuesta['status']  = $this->status['ERROR'];
                                    $arrayRespuesta['mensaje'] = $arrayResponsePotSplitter['mensaje'];
                                }
                            }
                        }
                    }
                    else
                    {
                        $arrayRespuesta['status']               = $this->status['ERROR'];
                        $arrayRespuesta['mensaje']              = $arrayDataObtenida['mensaje'];
                    }
                }
                else
                {
                    $arrayRespuesta['status']   = $this->status['ERROR'];
                    $arrayRespuesta['mensaje']  = 'El WS Potencia Enganchados no ha devuelto datos, favor notificar a sistemas';
                }
            }
            else
            {
                $arrayRespuesta['status']  = $this->status['OK'];
                $arrayRespuesta['mensaje'] = 'Validacion de potencia del servicio no requerida';
            }
        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError( 'Telcos+',
                                       'TecnicoWSController->verificaPotenciaMDFttx',
                                       $ex->getMessage(),
                                       $strUsrCreacion,
                                       $strIpCreacion);
            
            $arrayRespuesta['status']  = $this->status['ERROR'];
            $arrayRespuesta['mensaje'] = $ex->getMessage();
        }
        
        return $arrayRespuesta;
    }

    /**
     *
     * Función que permite validar la potencia que tiene un servicio antes de activar
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 11-08-2022
     * @since 1.0
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.1 11-01-2023 - Se corrige id de empresa para la creacion de la tarea
     *
     */    
    
    private function verificaPotenciaSplitter($arrayData)
    {
        $strClass                   = "TecnicoWSController";
        $strAppMethod               = "verificaPotenciaSplitter";
        $arrayRespuesta             = array();
        $emInfraestructura          = $this->getDoctrine()->getManager("telconet_infraestructura");
        $emComercial                = $this->getDoctrine()->getManager("telconet");
        $emGeneral                  = $this->getDoctrine()->getManager('telconet_general');
        $serviceInfoServicioTecnico = $this->get('tecnico.InfoServicioTecnico');
        $serviceUtil                = $this->get('schema.Util');
        $intIdServicio              = $arrayData['data']['servicioId'];
        $intElementoId              = $arrayData['data']['elementoId'];
        $strModeloOnt               = $arrayData['data']['modelo_ont'];
        $strUsrCreacion             = $arrayData['user'];
        $strIpCreacion              = "127.0.0.1";
        $serviceGeneral             = $this->get('tecnico.InfoServicioTecnico');
        $intPotenciaMax             = $arrayData['potenciaMax'];
        $intPotenciaMin             = $arrayData['potenciaMin'];
        $intPotenciaWS              = $arrayData['potencia'];

        try
        {
            $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                ->findOneBy(array( "servicioId" => $arrayData['data']['servicioId']));
            
            if(is_object($objServicioTecnico))
            {
                $strIdSplitter = $objServicioTecnico->getElementoConectorId();
                $strIdOlt = $objServicioTecnico->getElementoId();
            }
            
            $arrayDataTecnica = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                ->getDatosServicioXSplitter($strIdSplitter);

            $arrayDataWs =  json_encode(array(
                'empresa'              => $arrayData['empresa'],
                'nombre_olt'           => $arrayData['data']['nombre_olt'],
                'ip_olt'               => $arrayData['data']['ip_olt'],
                'modelo_olt'           => $arrayData['data']['modelo_olt'],
                'nombre_splitter'      => $arrayData['data']['nombre_splitter'],
                'login'                => $arrayData['data']['login'],
                'identificacion'       => '',
                'datos'                => $arrayDataTecnica['datos'],
                'opcion'               => 'POTENCIA_SPLITTER',
                'ejecutaComando'       => 'SI',
                'usrCreacion'          => $strUsrCreacion,
                'ipCreacion'           => $strIpCreacion,
                'comandoConfiguracion' => 'SI'
            ));
            
            $serviceUtil->insertLog(array(
                                            'enterpriseCode'   => "10",
                                            'logType'          => 1,
                                            'logOrigin'        => 'TELCOS',
                                            'application'      => 'TELCOS',
                                            'appClass'         => $strClass,
                                            'appMethod'        => $strAppMethod,
                                            'descriptionError' => 'Request-POTENCIA_SPLITTER',
                                            'status'           => 'Seguimiento',
                                            'inParameters'     => $arrayDataWs,
                                            'creationUser'     => $arrayData['user']));

            $arrayDataObtenidaSplitter = $serviceInfoServicioTecnico->verificaPotenciaMDFttx($arrayDataWs);
            if( !empty($arrayDataObtenidaSplitter) )
            {
                $arrayDataObtenidaSplitter = json_decode($arrayDataObtenidaSplitter['result'],true);
                
                if($arrayDataObtenidaSplitter['status'] == "OK")
                {
                    $intTotalPotencia = count($arrayDataObtenidaSplitter['data']);
                    $intValidos = 0;
                    foreach ($arrayDataObtenidaSplitter['data'] as $valor) 
                    {
                        if($intPotenciaMin <= $valor['potencia'] && $valor['potencia'] <= $intPotenciaMax)
                        {
                            $intValidos++;
                        }
                    }

                    if((($intTotalPotencia * 50)/100) <= $intValidos)
                    {
                        $strObservacionFallido = 'Se ha obtenido la potencia del servicio '.
                                                'con un nivel no óptimo: '.$intPotenciaWS.' dBm';

                        $arrayRespuesta['status']  = $this->status['ERROR'];
                        $arrayRespuesta['mensaje'] = 'Los demás clientes del splitter tienen niveles adecuados, '.
                                                        'problema de UM, debe revisar y dejar en nivel óptimo'.
                                                        '<br> <b>Potencia actual: '.$intPotenciaWS.' dBm <b>'.
                                                        '<br> <b>Potencia Minima: '.$intPotenciaMin.' dBm<b>'.
                                                        '<br> <b>Potencia Máxima: '.$intPotenciaMax.' dBm <b>';
                        
                        $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                        ->find($arrayData['data']['servicioId']);
                        $objInfoServicioHistorial = new InfoServicioHistorial();
                        $objInfoServicioHistorial->setEstado('AsignadoTarea');
                        $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);                                
                        $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                        $objInfoServicioHistorial->setServicioId($objServicio);
                        $objInfoServicioHistorial->setObservacion($strObservacionFallido);
                        $emComercial->persist($objInfoServicioHistorial);
                        $emComercial->flush();
                    }
                    else
                    {
                        $arrayData['data']['empresaId'] = ($arrayData['data']['empresaId']) ? $arrayData['data']['empresaId'] : 
                                                                                              $arrayData['data']['empresaCod'];
                        $arrayInfoCanton = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                        ->getCantonPorElementoId($strIdOlt);

                        if($arrayInfoCanton['status']  == 'ok' && $arrayInfoCanton['registros'] != null)
                        {
                            $strJurisdiccion = $arrayInfoCanton['registros'][0]['nombre_canton'];

                            if(strtoupper($strJurisdiccion) == 'GUAYAQUIL' || strtoupper($strJurisdiccion) == 'QUITO')
                            {
                                $arrayDestinatarioTarea = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                ->getOne(
                                    'VALIDAR POTENCIA SERVICIO',
                                    'SOPORTE',
                                    '',
                                    'DESTINATARIO TAREA JURISDICCION '.strtoupper($strJurisdiccion),
                                    '',
                                    '',
                                    '',
                                    '',
                                    '');
                                if(!empty($arrayDestinatarioTarea['valor1']))
                                {
                                    $strDestinatarioTarea = $arrayDestinatarioTarea['valor1'];
                                }
                            }
                            else
                            {
                                $arrayDataTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                    ->obtenerJefeTsJurisdiccionPotencia($strJurisdiccion);
                                if(!empty($arrayDataTecnico['datos']))
                                {
                                    $strDestinatarioTarea = $arrayDataTecnico['datos'][0]['LOGIN'];
                                }
                                else 
                                {
                                    $arrayDestinatarioTarea = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(
                                                                'VALIDAR POTENCIA SERVICIO',
                                                                'SOPORTE',
                                                                '',
                                                                'CANTON SIN EMPLEADO'.
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '');
                                    if(!empty($arrayDestinatarioTarea['valor1']))
                                    {
                                        $strDestinatarioTarea = $arrayDestinatarioTarea['valor1'];
                                    }
                                    else 
                                    {
                                        throw new \Exception("No se ha encontrado destinatario para ".
                                                "la jurisdiccion ".$strJurisdiccion);
                                    }   
                                }
                            }
                            
                            $objInfoPersonaEmple = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                    ->findOneByLogin($strDestinatarioTarea);

                            if(!empty($objInfoPersonaEmple))
                            {
                                $objPersonaDep = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                    ->findByPersonaId($objInfoPersonaEmple->getId());
                                if(!empty($objPersonaDep))
                                {
                                    foreach ($objPersonaDep as $objPersonaDepTN) 
                                    {
                                        if ($objPersonaDepTN->getEmpresaRolId()->getEmpresaCod()->getPrefijo() == 'TN'
                                                && $objPersonaDepTN->getEstado()=='Activo') 
                                        {
                                            $arrayParametrosTarea = array(
                                                'latitud'               => $arrayData['data']['latitud'],
                                                'longitud'              => $arrayData['data']['longitud'],
                                                'observaciones'         => 'Revisar potencia de Splitter',
                                                'empresaCod'            => $arrayData['data']['prefijoEmpresa'],
                                                'ipCreacion'            => "127.0.0.1",
                                                'usuario'               => $arrayData['user'],
                                                'intPuntoId'            => $arrayData['data']['puntoId'],
                                                'idPersonaEmpresaRol'   => $objPersonaDepTN->getId(),
                                                'idDepartamento'        => $objPersonaDepTN->getDepartamentoId(),
                                                'idPersona'             => $objInfoPersonaEmple->getId(),
                                                'nombresEmpleado'       => $objInfoPersonaEmple->getNombres().
                                                        ' '.$objInfoPersonaEmple->getApellidos(),
                                                'rolDepartamental'      => $objInfoPersonaEmple->getCargo(),
                                                'idEmpresa'             => $objPersonaDepTN->getEmpresaRolId()
                                                                                ->getEmpresaCod()->getId(),
                                                'jurisdiccion'          => $strJurisdiccion,
                                                'formaContacto'         => '',
                                                'loginCliente'          => $arrayData['login'],
                                                'nombreCliente'         => $arrayData['data']['nombre_cliente'],
                                                'strAplicacion'         => $strClass,
                                                'bandNfs'               => false,
                                                'prefijoEmpresa'        => $objPersonaDepTN->getEmpresaRolId()
                                                                    ->getEmpresaCod()->getPrefijo(),
                                                'strOrigenAccion'       => 'tareas',
                                                'intPotencia'           => $intPotenciaWS);
                                    
                                            $arrayResponseTarea = 
                                                    $this->putTareaDepartamentoPotencia($arrayParametrosTarea);
                                            
                                            if($arrayResponseTarea['status']=='OK')
                                            {
                                                $arrayRespuesta['status']  = $this->status['OK'];
                                                $arrayRespuesta['mensaje'] = 'Los demás clientes del Splitter tienen 
                                                potencias no adecuadas.<br> <b>Se ha creado la tarea: '. 
                                                                            $arrayResponseTarea['data']['idTarea'].'<b>'.
                                                                            '<br> <b>Potencia: '.$intPotenciaWS.'<b>';
                                                $strObservacionTarea="Se ha creado la tarea <b>". 
                                                    $arrayResponseTarea['data']['idTarea']."</b> para revisión de la ".
                                                            'potencia<br> <b>Potencia: '.$intPotenciaWS.'<b>';
                                                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->find($arrayData['data']['servicioId']);
                                                $objInfoServicioHistorial = new InfoServicioHistorial();
                                                $objInfoServicioHistorial->setEstado('AsignadoTarea');
                                                $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);
                                                $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                                                $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                                                $objInfoServicioHistorial->setServicioId($objServicio);
                                                $objInfoServicioHistorial->setObservacion($strObservacionTarea);
                                                $emComercial->persist($objInfoServicioHistorial);
                                                $emComercial->flush();
                                            }
                                            else
                                            {
                                                throw new \Exception('Ha ocurrido un error al generar a tarea');
                                            }
                                            break;
                                        }
                                    }
                                }
                                else 
                                {
                                    throw new \Exception("No se ha encontrado informacion Empresa Rol".
                                            "del usuario ".$strDestinatarioTarea);
                                }
                            }
                            else
                            {
                                throw new \Exception("No se ha encontrado al usuario: ".$strDestinatarioTarea);
                            }
                            
                        }
                        else
                        {
                            throw new \Exception('Consulta no válida, el canton 
                                                        no existe en nuestro sistema.
                                                        Por favor reportar a Soporte Sistemas
                                                        para que el cantón pueda ser ingresado.');
                        }
                    }
                }
                else
                {
                    throw new \Exception($arrayDataObtenidaSplitter['mensaje']);
                }
            }
            else
            {
                throw new \Exception('El WS Potencia Splitter no ha devuelto datos, favor notificar a sistemas');
            }
        }catch (\Throwable $th) 
        {
            $serviceUtil->insertError('Telcos Mobile',
                                      'TecnicoWSController.verificaPotenciaSplitter',
                                      $ex->getMessage(),
                                      $arrayData['user'],
                                      "127.0.0.1");

            $arrayRespuesta['status']   = $this->status['ERROR'];
            $arrayRespuesta['mensaje']  = $ex->getMessage();
        }
        
        return $arrayRespuesta;
    }


    /**
     * Función que llama a service para crear una tarea
     * para revision de niveles de potencia.
     *
     * @author: Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 26-07-2022
     *
     * @param array $arrayData
     * @return array $arrayResultado
     */
    private function putTareaDepartamentoPotencia($arrayData)
    {
        $emComercial            = $this->getDoctrine()->getManager("telconet");
        $emSoporte              = $this->getDoctrine()->getManager("telconet_soporte");
        $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
        $serviceTecnico         = $this->get('tecnico.InfoServicioTecnico');
        $emGeneral->getConnection()->beginTransaction();
        $strNombreParametro     = "Verificar niveles de potencia adecuados";
        $emFinan                = $this->getDoctrine()->getManager("telconet_financiero");
        $serviceUtil            = $this->get('schema.Util');
        $strCodigoPostal        = '593';
        $strOrigenAccion        = 'tareas';
        $arrayData['bandNfs']   = false;
    
        $strPrefijoEmpresa = $emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')->getPrefijoByCodigo($arrayData['idEmpresa']);
    
        try
        {
            $strLatitud            = $arrayData['latitud'];
            $strLongitud           = $arrayData['longitud'];
            $strLoginCliente       = $arrayData['loginCliente'];
            $strUsuario            = $arrayData['usuario'];

            //Necesarios para la busqueda de para quien sera la tarea.
            $intIdDepartamento     = $arrayData['idDepartamento'];
            $intDescripcionRol     = $arrayData['rolDepartamental'];
            $intIdEmpresa          = $arrayData['idEmpresa'];
            $strJurisdiccion       = $arrayData['jurisdiccion'];
            $intFormaContacto      = $arrayData['formaContacto'];
            $strNombreCliente      = $arrayData['nombreCliente'];

            $strObservacion        = $arrayData['observaciones'];

            $objTarea           = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                        ->findOneBy(array('nombreTarea' => $strNombreParametro));
            //Obtenemos el Id del punto del cliente por medio de su login.
            $objPuntoCliente    = $emComercial->getRepository('schemaBundle:InfoPunto')->findOneBy(array('login'=> $strLoginCliente));
            $intIdPunto         = $objPuntoCliente->getId();

            $arrayParametrosTarea = array(
                'objTarea'              => $objTarea,
                'latitud'               => $strLatitud,
                'longitud'              => $strLongitud,
                'observacion'           => $strObservacion,
                'empresaCod'            => $intIdEmpresa,
                'ipCreacion'            => "127.0.0.1",
                'usrCreacion'           => $strUsuario,
                'intPuntoId'            => $intIdPunto,
                'idDepartamento'        => $intIdDepartamento,
                'rolDepartamental'      => $intDescripcionRol,
                'idEmpresa'             => $intIdEmpresa,
                'jurisdiccion'          => $strJurisdiccion,
                'formaContacto'         => $intFormaContacto,
                'loginCliente'          => $strLoginCliente,
                'idPersona'             => $arrayData['idPersona'],
                'nombresEmpleado'       => $arrayData['nombresEmpleado'],
                'idPersonaEmpresaRol'   => $arrayData['idPersonaEmpresaRol'],
                'nombreCliente'         => $strNombreCliente,
                'bandNfs'               => $arrayData['bandNfs'],
                'prefijoEmpresa'        => $strPrefijoEmpresa,
                'strOrigenAccion'       => $strOrigenAccion
            );

            $objRespuesta     = $serviceTecnico->crearTareaPorJurisdiccionPotencia($arrayParametrosTarea);

            if(isset($objRespuesta) && !empty($objRespuesta) && $objRespuesta['status']==="OK" &&  $objRespuesta['idDetalle'] != null)
            {
                $arrayResultado['data']     = array('idDetalle' => $objRespuesta['idDetalle'],
                                                    'idTarea'   => $objRespuesta['idTarea']);

                $entityInfoTareaSegui = new InfoTareaSeguimiento();
                $entityInfoTareaSegui->setDetalleId($objRespuesta['idDetalle']);
                $entityInfoTareaSegui->setObservacion("Tarea fue Asignada ".$arrayData['nombresEmpleado']);
                $entityInfoTareaSegui->setUsrCreacion($strUsuario);
                $entityInfoTareaSegui->setFeCreacion(new \DateTime('now'));
                $entityInfoTareaSegui->setEmpresaCod($intIdEmpresa);
                $entityInfoTareaSegui->setEstadoTarea('Asignada');
                $entityInfoTareaSegui->setInterno("N");
                $entityInfoTareaSegui->setDepartamentoId($intIdDepartamento);
                $entityInfoTareaSegui->setPersonaEmpresaRolId($arrayData['idPersonaEmpresaRol']);
                $emSoporte->persist($entityInfoTareaSegui);
                $emSoporte->flush();

                if (!empty($arrayData['intPotencia'])) 
                {
                    $entityInfoTareaSegui = new InfoTareaSeguimiento();
                    $entityInfoTareaSegui->setDetalleId($objRespuesta['idDetalle']);
                    $entityInfoTareaSegui->setObservacion('Potencia obtenida: '.$arrayData['intPotencia'].' dbm.');
                    $entityInfoTareaSegui->setUsrCreacion($strUsuario);
                    $entityInfoTareaSegui->setFeCreacion(new \DateTime('now'));
                    $entityInfoTareaSegui->setEmpresaCod($intIdEmpresa);
                    $entityInfoTareaSegui->setEstadoTarea('Asignada');
                    $entityInfoTareaSegui->setInterno("N");
                    $entityInfoTareaSegui->setDepartamentoId($intIdDepartamento);
                    $entityInfoTareaSegui->setPersonaEmpresaRolId($arrayData['idPersonaEmpresaRol']);
                    $emSoporte->persist($entityInfoTareaSegui);
                    $emSoporte->flush();
                }
                
                $arrayResultado['status']   = "OK";
                $arrayResultado['mensaje']  = $this->mensaje['OK'];
            }
            else
            {
                $arrayResultado['data']     = null;
                $arrayResultado['status']   = $this->status['ERROR_PARCIAL'];
                $arrayResultado['mensaje']  = $this->mensaje['CONSULTA'];
            }

        }
        catch(\Exception $ex)
        {
            $serviceUtil->insertError(  'Telcos Mobile',
            'TecnicoWSController.putTareaDepartamentoDocadjunto',
            $ex->getMessage(),
            $arrayData['user'],
            "127.0.0.1");

            $arrayResultado['data']         = null;
            $arrayResultado['status']       = $this->status['ERROR'];
            $arrayResultado['mensaje']      = $ex->getMessage();
        }

        return $arrayResultado;
    }

    /**
     * Función que para verificar si el traslado es en el mismo OLT.
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 10-11-2022
     *
     * @param array $arrayData
     * @return array $resultado
     */
    private function getVerificaDiferenteIpOlt($arrayData)
    {
        $intEmpresaId         = $arrayData['data']['empresaId'];
        $strLogin             = $arrayData['data']['login'];
        $strIpOlt             = $arrayData['data']['ipOlt'];
        $strIdServicio        = $arrayData['data']['servicioId'];
        $strIdProducto        = $arrayData['data']['productoId'];
        $strIdPunto           = $arrayData['data']['puntoId'];
        $strUsrCreacion       = $arrayData['user'];
        $strDiferenteIpOlt    = "S";
        $arrayRespuesta       = array();
        $emComercial          = $this->getDoctrine()->getManager("telconet");
        $serviceUtil          = $this->get('schema.Util');
        $serviceGeneral       = $this->get('tecnico.InfoServicioTecnico');
        $emInfraestructura    = $this->getDoctrine()->getManager("telconet_infraestructura");

        try
        {
            $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($strIdProducto);
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($strIdServicio);

            if(is_object($objProducto) && is_object($objServicio))
            {
                $objTraslado  = $serviceGeneral->getServicioProductoCaracteristica($objServicio, "TRASLADO", $objProducto);
        
                if(is_object($objTraslado))
                {
                    $objServicioAnterior = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->find($objTraslado->getValor());
                    if(is_object($objServicioAnterior))
                    {
                        $objTecnicoAnterior = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                            ->findOneBy(array( "servicioId" => $objServicioAnterior->getId()));
                        if (is_object($objTecnicoAnterior)) 
                        {
                            $objElementoAnterior = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                        ->find($objTecnicoAnterior->getElementoId());
                            if(is_object($objElementoAnterior))
                            {
                                $objIpElementoAnterior = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                    ->findOneBy(array("elementoId" => $objElementoAnterior->getId()));
                                if(is_object($objIpElementoAnterior))
                                {
                                    $strIpAnterior = $objIpElementoAnterior->getIp();
                                    if($strIpAnterior == $strIpOlt)
                                    {
                                        $strDiferenteIpOlt = 'N';
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            $arrayRespuesta['status']  = $this->status['OK'];
            $arrayRespuesta['mensaje'] = $strDiferenteIpOlt;
        }
        catch(\Exception $exception)
        {
            $arrayRespuesta['status']  = $this->status['ERROR_PARCIAL'];
            $arrayRespuesta['mensaje'] = $this->mensaje['CONSULTA'];

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaId,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => basename(__CLASS__),
                'appMethod'        => basename(__FUNCTION__),
                'descriptionError' => $arrayRespuesta['status']." Mensaje: ".$exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
        }

        return $arrayRespuesta;
    }

    /**
    * Función que sirve para activar el servicio MD y consultar potencia en el mismo OLT.
    *
    * @author Jeampier Carriel <jacarriel@telconet.ec>
    * @version 1.0 28-11-2022
    *
    * @param array $arrayData
    * @return array $resultado
    */
    private function putActivacionPotenciaTraslado($arrayData)
    {
        $emGeneral      = $this->getDoctrine()->getManager("telconet_general");
        $emComercial    = $this->getDoctrine()->getManager("telconet");
        $serviceUtil    = $this->get('schema.Util');
        $serviceGeneral = $this->get('tecnico.InfoServicioTecnico');
        $emInfraestructura    = $this->getDoctrine()->getManager("telconet_infraestructura");
        $strUsrCreacion = $arrayData['user'];
        $strIpCreacion  = '127.0.0.1';
        $strIdProducto  = $arrayData['data']['idProducto'];
        $strIdServicio  = $arrayData['data']['idServicio'];
        try 
        {
            $arrayValidaPotenciaTraslado = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne(
                                                'VALIDAR POTENCIA SERVICIO',
                                                'SOPORTE',
                                                '',
                                                'REQUIERE VALIDACION POTENCIA TRASLADO',
                                                '',
                                                '',
                                                '',
                                                '',
                                                '');

            if (is_array($arrayValidaPotenciaTraslado)) 
            {   
                $strValidaPotenciaTraslado = $arrayValidaPotenciaTraslado['valor1'];
                if($strValidaPotenciaTraslado == 'S')
                {
                    $arrayData['calculoPotencia'] = 'S';
                    $arrayResponseActivacion = $this->putActivacionMd($arrayData);
                    if ($arrayResponseActivacion['status'] == 200) 
                    {
                        $arrayResultado['status']       = $this->status['OK'];
                        $arrayResultado['mensaje']      = $arrayResponseActivacion['mensaje'];
                    }else
                    {
                        if(strpos($arrayResponseActivacion['mensaje'],"Potencia"))
                        {
                            $intPotenciaWS = intval(substr($arrayResponseActivacion['mensaje'], -3));
                            $arrayData['servicioId'] = $arrayData['idServicio'];
                            $arrayMensaje = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->getOne(
                                        'VALIDAR POTENCIA SERVICIO',
                                        'SOPORTE',
                                        '',
                                        'MENSAJE POTENCIA SOBRE EL RANGO',
                                        '',
                                        '',
                                        '',
                                        '',
                                        '');

                            $arrayPotencias = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->getOne(
                                        'VALIDAR POTENCIA SERVICIO',
                                        'SOPORTE',
                                        '',
                                        'NIVELES DE POTENCIA OPTIMOS',
                                        '',
                                        '',
                                        '',
                                        '',
                                        '');
                                        
                            if(!empty($arrayPotencias['valor1']) && !empty($arrayPotencias['valor2']) && !empty($arrayMensaje['valor1']))
                            {
                                $intPotenciaMax = $arrayPotencias['valor1'];
                                $intPotenciaMin = $arrayPotencias['valor2'];
                                $strMensajePotencia = $arrayMensaje['valor1'];
                            }else
                            {
                                throw new \Exception("Valores de potencias no validos");
                            }

                            $strObservacionFallido = 'Se ha obtenido la potencia del servicio '.
                                                'con un nivel no óptimo: '.$intPotenciaWS.' dBm';
                            if($intPotenciaWS > $intPotenciaMax)
                            {
                                $arrayResultado['status']  = $this->status['ERROR'];
                                $arrayResultado['mensaje'] = $strMensajePotencia. 
                                                '<br> <b>Potencia: '.$intPotenciaWS.' dBm <b>';

                                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->find($arrayData['data']['idServicio']);
                                $objInfoServicioHistorial = new InfoServicioHistorial();
                                $objInfoServicioHistorial->setEstado('AsignadoTarea');
                                $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);                                
                                $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                                $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                                $objInfoServicioHistorial->setServicioId($objServicio);
                                $objInfoServicioHistorial->setObservacion($strObservacionFallido);
                                $emComercial->persist($objInfoServicioHistorial);
                                $emComercial->flush();
                            }
                            else
                            {
                                $arrayData['potencia'] = $intPotenciaWS;
                                $arrayData['potenciaMin'] = $intPotenciaMin;
                                $arrayData['potenciaMax'] = $intPotenciaMax;
                                $arrayData['data']['servicioId']=$strIdServicio;
                                $arrayData['empresa'] = $arrayData['data']['prefijoEmpresa'];
                                $arrayData['data']['prefijoEmpresa'] = $arrayData['data']['empresaCod'];
                                $arrayData['login'] = $arrayData['data']['login'];
                                
                                $objProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($strIdProducto);
                                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($strIdServicio);
                                $objPuntoCliente = $emComercial->getRepository('schemaBundle:InfoPunto')
                                                    ->findOneBy(array('id' => $objServicio->getPuntoId()));
                                
                                if(is_object($objPuntoCliente))
                                {
                                    $arrayData['data']['longitud'] = $objPuntoCliente->getLongitud();
                                    $arrayData['data']['latitud'] = $objPuntoCliente->getLatitud();
                                }

                                $objSpcTrasladoServicioInternet = $serviceGeneral->getServicioProductoCaracteristica($objServicio, 
                                                                                                                        "TRASLADO", 
                                                                                                                        $objProducto);
                                $objServicioTecnico   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                    ->findOneBy(array( "servicioId" => $strIdServicio));
                                if(is_object($objServicioTecnico))
                                {
                                    $arrayData['data']['elementoId'] = $objServicioTecnico->getElementoId();
                                    $objElementoOlt = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                    ->find($objServicioTecnico->getElementoId());
                                    if(is_object($objElementoOlt))
                                    {
                                        $arrayData['data']['nombre_olt'] = $objElementoOlt->getNombreElemento();
                                        $arrayData['data']['modelo_olt'] = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
                                    }
                                    $objIp = $emComercial->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("elementoId" => $objServicioTecnico->getElementoId()));
                                    if(is_object($objIp))
                                    {
                                        $arrayData['data']['ip_olt'] = $objIp->getIp();
                                    }
                                    $objElementoSplitter = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                        ->find($objServicioTecnico->getElementoConectorId());
                                    if(is_object($objElementoSplitter))
                                    {
                                        $arrayData['data']['nombre_splitter'] = $objElementoSplitter->getNombreElemento();
                                    }
                                }
                                if(is_object($objSpcTrasladoServicioInternet))
                                {
                                    $intIdServicioOrigen        = $objSpcTrasladoServicioInternet->getValor();
                                    $objServicioOrigen          = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->find($intIdServicioOrigen);
                                    $objServicioTecnicoOrigen   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                            ->findOneBy(array( "servicioId" => $intIdServicioOrigen));
                                    if(!is_object($objServicioTecnicoOrigen) 
                                        || !($objServicioTecnicoOrigen->getElementoId() > 0) || 
                                        !($objServicioTecnicoOrigen->getInterfaceElementoId() > 0) 
                                        || !($objServicioTecnicoOrigen->getElementoConectorId() > 0) 
                                        || !($objServicioTecnicoOrigen->getInterfaceElementoConectorId() > 0)
                                        || !($objServicioTecnicoOrigen->getElementoClienteId() > 0) 
                                        || !($objServicioTecnicoOrigen->getInterfaceElementoClienteId() > 0))
                                    {
                                        throw new \Exception("El servicio técnico del servicio en el punto origen".
                                                            "no tiene la información técnica completa");
                                    }
                                    else 
                                    {
                                        $objElementoCpeOntOrigen    = $emComercial->getRepository('schemaBundle:InfoElemento')
                                                                            ->find($objServicioTecnicoOrigen->getElementoClienteId());
                                        if (is_object($objElementoCpeOntOrigen)) 
                                        {
                                            $arrayData['data']['modelo_ont'] = $objElementoCpeOntOrigen
                                                                    ->getModeloElementoId()->getNombreModeloElemento();
                                        }
                                    }
                                }                                                                      
                                else 
                                {
                                    throw new \Exception("No existe la característica de Traslado para el servicio actual");
                                }

                                $arrayPotenciaSplitter = $this->verificaPotenciaSplitter($arrayData);
                                if($arrayPotenciaSplitter['status']=='200')
                                {
                                    $arrayData['calculoPotencia'] = 'N';
                                    $arrayResponseActivacion = $this->putActivacionMd($arrayData);
                                    if ($arrayResponseActivacion['status'] == 200) 
                                    {
                                        $arrayResultado['status']       = $this->status['OK'];
                                        $arrayResultado['mensaje']      = $arrayResponseActivacion['mensaje'];
                                    }else
                                    {
                                        $arrayResultado['status']       = $this->status['OK'];
                                        $arrayResultado['mensaje']      = $arrayResponseActivacion['mensaje'];
                                    }
                                }else
                                {
                                    $arrayResultado['status']  = $this->status['ERROR'];
                                    $arrayResultado['mensaje'] = $arrayPotenciaSplitter['mensaje'];
                                }
                            }
                        }else
                        {
                            $arrayResultado['status']       = $this->status['ERROR'];
                            $arrayResultado['mensaje']      = $arrayResponseActivacion['mensaje'];   
                        }
                    }
                }else
                {
                    $arrayResponseActivacion = $this->putActivacionMd($arrayData);
                    if ($arrayResponseActivacion['status'] == 200) 
                    {
                        $arrayResultado['status']       = $this->status['OK'];
                        $arrayResultado['mensaje']      = $arrayResponseActivacion['mensaje'];
                    }else
                    {
                        $arrayResultado['status']       = $this->status['ERROR'];
                        $arrayResultado['mensaje']      = $arrayResponseActivacion['mensaje'];   
                    }
                }
                
            }
        }catch (\Exception $ex) 
        {
            $serviceUtil->insertError('Telcos Mobile',
                                    'TecnicoWSController.putActivacionPotenciaTraslado',
                                    $ex->getMessage(),
                                    $strUserCreacion,
                                    $strIpCreacion);

            $arrayResultado['status']       = $this->status['ERROR'];
            $arrayResultado['mensaje']      = $ex->getMessage();
        }

        return $arrayResultado;

    }
    
    /**
    * Funcion que permite ejecutar el reverso de un olt alta densidad migrado
    * Por medio de nombre del elemento olt y la ip asociada
    *
    * @author Jeampier Carriel <jacarriel@telconet.ec>
    * @version 1.0 28-11-2022
    *
    * @param array $arrayData
    * @return array $resultado
    */
    private function reversarMigracionPorOlt($arrayData)
    {
        $strIpOltMigracion         = $arrayData['data']['ipOltNuevoMigracion'];
        $strNombreOltMigracion     = $arrayData['data']['nombreOltNuevoMigracion'];
        $strUserPeticion           = $arrayData['user'];
        $arrayRespuesta            = array();
        $serviceTecnico            = $this->get('tecnico.InfoServicioTecnico');
        
        $arrayParametros = array(
            'ipOltNuevoMigracion'        => $strIpOltMigracion,
            'nombreOltNuevoMigracion'    => $strNombreOltMigracion,
            'user'                       => $strUserPeticion
        );
        return $serviceTecnico->reversarMigracionPorOlt($arrayParametros);

    }   

    /**
    * Funcion que sirve para obtener la capacidad del servicio o los servicios
    * asociados al login o loginAux.
    * 
    * @author Jenniffer Mujica <jmujica@telconet.ec>
    * @version 1.0 23-11-2022
    * @param type $arrayData
    * @return Array $arrayResultado
    *
    */
    private function getCapacidadDataTecnica($arrayData)
    {

        $emGeneral         = $this->getDoctrine()->getManager('telconet_general');
        $emComercial       = $this->getDoctrine()->getManager();
        $serviceUtil       = $this->get('schema.Util');

        //Inicializacion de variables
        $strEmpresaDesc    = $arrayData['data']['prefijoEmpresa'];
        $intEmpresaCod     = $arrayData['data']['codEmpresa'];
        $strLogin          = $arrayData['data']['login'];
        $strLoginAux       = $arrayData['data']['loginAux'];
        $strUsrCreacion    = $arrayData['data']['usrCreacion'];
        $strIpCreacion     = $arrayData['data']['ipCreacion'];
        $arrayRespuesta    = array();

        try
        {
            //valida login y loginAux lleno
            if(empty($strLogin) && empty($strLoginAux))
            {
                throw new \Exception("No se ha ingresado login a consultar".
                                        ", favor verificar.");
            }

            $serviceGeneral         = $this->get('tecnico.InfoServicioTecnico');
            $emGeneral              = $this->getDoctrine()->getManager("telconet_general");
            $arrayEstadosPermitidos = array();
            $arrayProducPermitidos  = array();

            $arrayEstadosPermitidos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PARAMETROS_CORRELACIONAR_BW',
                                                            'TECNICO',
                                                            '',
                                                            '',
                                                            'ESTADOS_SERVICIOS_PERMITIDOS',
                                                            '',
                                                            '',
                                                            '',
                                                            '');

            if(empty($arrayEstadosPermitidos) || !is_array($arrayEstadosPermitidos))
            {
                throw new \Exception("No se pudo obtener los parámetros de estados permitidos para las capacidades ".
                                        "de los servicios a consultar, por favor notificar a Sistemas.");
            }

            foreach($arrayEstadosPermitidos as $arrayDetalles)
            {
                $arrayEstados[] = $arrayDetalles['valor2'];
            }

            $arrayProducPermitidos  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PARAMETROS_CORRELACIONAR_BW',
                                                            'TECNICO',
                                                            '',
                                                            '',
                                                            'PRODUCTOS_SERVICIOS_PERMITIDOS',
                                                            '',
                                                            '',
                                                            '',
                                                            '');

            if(empty($arrayProducPermitidos) || !is_array($arrayProducPermitidos))
            {
                throw new \Exception("No se pudo obtener los parámetros de los productos permitidos para las capacidades ".
                                        "los servicios a consultar, por favor notificar a Sistemas.");
            }

            foreach($arrayProducPermitidos as $arrayDetalles)
            {
                $arrayProductos[] = $arrayDetalles['valor2'];
            }
            
            if($strEmpresaDesc == 'TN' && !empty($intEmpresaCod))
            {
                $arrayDataResultado = array();
                if (isset($strLoginAux) && !empty($strLoginAux))
                {
                    //Se busca el servicio asociado al loginAux 
                    $arrayServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->createQueryBuilder('s')
                                                ->innerJoin('schemaBundle:AdmiProducto', 'p', 'WITH', 's.productoId = p.id')
                                                ->innerJoin('schemaBundle:InfoPunto', 'pto', 'WITH', 's.puntoId = pto.id')
                                                ->where("p.empresaCod = :empresa_cod")
                                                ->andWhere("s.loginAux = :login_aux")
                                                ->setParameter('empresa_cod', $intEmpresaCod)
                                                ->setParameter('login_aux', $strLoginAux)
                                                ->getQuery()
                                                ->getResult();
    
                    if(empty($arrayServicio))
                    {
                        throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
                    }
    
                    if(!empty($arrayServicio) && count($arrayServicio) > 0)
                    {
                        $objServicio = $arrayServicio[0];
                        $objProducto = $arrayServicio[0]->getProductoId();
                        $objPunto = $arrayServicio[0]->getPuntoId();
                        $strEstado = $objServicio->getEstado();

                        if(!in_array($strEstado,$arrayEstados))
                        {
                            throw new \Exception("Estado no permitido, favor verificar.");
                        }

                        if(!in_array($objProducto->getId(), $arrayProductos))
                        {
                            throw new \Exception("Producto no permitido, favor verificar.");
                        }

                    }
    
                    $objProdCapacUno = $serviceGeneral->getServicioProductoCaracteristica($objServicio, "CAPACIDAD1", $objProducto);
    
                    $objProdCapacDos = $serviceGeneral->getServicioProductoCaracteristica($objServicio, "CAPACIDAD2", $objProducto);
    
                    $arrayDataResultado[] = array(
                        "loginAux"              => $strLoginAux,
                        "login"                 => ($objPunto->getLogin() != null) ? $objPunto->getLogin() : '',
                        "servicioDescripcion"   => is_object($objServicio) ? $objServicio->getDescripcionPresentaFactura() : '',
                        "productoDescripcion"   => is_object($objProducto) ? $objProducto->getDescripcionProducto() : '',
                        "capacidadUno"          => is_object($objProdCapacUno) ? $objProdCapacUno->getValor() : '',
                        "capacidadDos"          => is_object($objProdCapacDos) ? $objProdCapacDos->getValor() : ''
                    );
    
                    //seteo respuesta
                    $arrayRespuesta['status']  = $this->status['OK'];
                    $arrayRespuesta['mensaje'] = $this->mensaje['OK'];
                    $arrayRespuesta['servicios']    = $arrayDataResultado;
                }
                else
                {
                    //Se busca los servicios asociados a el login del punto
                    $arrayServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                    ->createQueryBuilder('s')
                                                    ->innerJoin('schemaBundle:AdmiProducto', 'p', 'WITH', 's.productoId = p.id')
                                                    ->innerJoin('schemaBundle:InfoPunto', 'pto', 'WITH', 's.puntoId = pto.id')
                                                    ->where("p.empresaCod = :empresa_cod")
                                                    ->andWhere("pto.login = :login")
                                                    ->andWhere("s.estado IN (:estadosServicio)")
                                                    ->andWhere("s.productoId IN (:producPermitidos)")
                                                    ->setParameter('empresa_cod', $intEmpresaCod)
                                                    ->setParameter('login', $strLogin)
                                                    ->setParameter('estadosServicio', array_values($arrayEstados))
                                                    ->setParameter('producPermitidos', array_values($arrayProductos))
                                                    ->getQuery()
                                                    ->getResult();
                    
                    if(empty($arrayServicio))
                    {
                        throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
                    }
    
                    foreach($arrayServicio as $arrayItemServ)
                    {
                        $objServicio = $arrayItemServ;
                        $objProducto = $objServicio->getProductoId();
    
                        $objProdCapacUno = $serviceGeneral->getServicioProductoCaracteristica($objServicio, "CAPACIDAD1", $objProducto);
    
                        $objProdCapacDos = $serviceGeneral->getServicioProductoCaracteristica($objServicio, "CAPACIDAD2", $objProducto);
    
                        $arrayDataResultado[] = array(
                            "loginAux"  => ($objServicio->getLoginAux() != null) ? $objServicio->getLoginAux() : '',
                            "login"     => $strLogin,
                            "servicioDescripcion"   => is_object($objServicio) ? $objServicio->getDescripcionPresentaFactura() : '',
                            "productoDescripcion"   => is_object($objProducto) ? $objProducto->getDescripcionProducto() : '',
                            "capacidadUno"          => is_object($objProdCapacUno) ? $objProdCapacUno->getValor() : '',
                            "capacidadDos"          => is_object($objProdCapacDos) ? $objProdCapacDos->getValor() : ''
                        );                        
                    }
    
                    //seteo respuesta
                    $arrayRespuesta['status']  = $this->status['OK'];
                    $arrayRespuesta['mensaje'] = $this->mensaje['OK'];
                    $arrayRespuesta['servicios']    = $arrayDataResultado;
                }
            }
            else
            {
                throw new \Exception("Error en la información ingresada, favor verificar.");
            }
        }
        catch(\Exception $exception)
        {
            if($exception->getMessage() == "NULL")
            {
                $arrayRespuesta['status']   = $this->status['NULL'];
                $arrayRespuesta['mensaje']  = $this->mensaje['NULL'];
            }
            else
            {
                $arrayRespuesta['status']   = $this->status['ERROR'];
                $arrayRespuesta['mensaje']  = $exception->getMessage();
            }

            $serviceUtil->insertLog(array(
                'enterpriseCode'   => $intEmpresaCod,
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'TecnicoWSController',
                'appMethod'        => 'getCapacidadDataTecnica',
                'descriptionError' => $exception->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayData),
                'creationUser'     => $strUsrCreacion));
        }

        return $arrayRespuesta;

    }
}
