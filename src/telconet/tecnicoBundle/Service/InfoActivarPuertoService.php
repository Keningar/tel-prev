<?php

namespace telconet\tecnicoBundle\Service;

use telconet\schemaBundle\Entity\InfoInterfaceElemento;
use telconet\schemaBundle\Entity\InfoServicioProdCaract;
use telconet\schemaBundle\Entity\InfoEnlace;
use telconet\schemaBundle\Entity\InfoServicio;
use telconet\schemaBundle\Entity\InfoIp;
use telconet\schemaBundle\Entity\InfoServicioHistorial;
use telconet\schemaBundle\Entity\InfoDetalleSolHist;
use telconet\schemaBundle\Entity\InfoOrdenTrabajo;
use telconet\schemaBundle\Entity\InfoDetalleSolicitud;
use telconet\schemaBundle\Entity\InfoDetalleSolCaract;
use telconet\schemaBundle\Entity\InfoDetalleInterface;
use telconet\planificacionBundle\Service\RecursosDeRedService;
use telconet\comercialBundle\Service\InfoServicioService;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;

/**
 * Clase que sirve para la activación de Puertos
 * 
 * @author Versión Inicial
 * @version 1.0
 * 
 * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
 * @version 1.1 2016-10-19 - Eliminación de 'use' no utilizadas
 *                           Inclusión de variable $serviceUtil de tipo 'schema.Util' instanciada en setDependencies
 * 
 * @author Modificado: John Vera <javera@telconet.ec>
 * @version 1.2 2018-09-28 - Se modifica función para agregar el serviceTelefonia
 * 
 * @author Modificado: Antonio Ayala <afayala@telconet.ec>
 * @version 1.3 2020-09-22 - Se modifica función para agregar el SoporteService
 * 
 * @author Modificado: Daniel Reyes <djreyes@telconet.ec>
 * @version 1.4 2021-07-28 - Se agrega la variable $servicioConfirmar para 'tecnico.InfoConfirmarServicio'
 *                             y la variable $serviceServicioComercial para 'comercial.InfoServicio'
 * 
 */
class InfoActivarPuertoService {
    private $emComercial;
    private $emGeneral;
    private $emInfraestructura;
    private $emSoporte;
    private $emComunicacion;
    private $emSeguridad;
    private $emFinanciero;
    private $emNaf;
    private $servicioGeneral;
    private $licenciasMcAfee;
    private $licenciasOffice365;
    private $host;
    private $pathTelcos;
    private $pathParameters;
    private $networkingScripts;
    private $intCantidadIntentos;
    private $intSegundosSleep;
    private $opcion = "ACTIVAR";
    private $ejecutaComando;
    private $strConfirmacionTNMiddleware;
    private $recursosRed;
    private $serviceTelefonia;
    private $serviceCliente;
    private $servicePromociones;
    private $serviceUtilidades;
    private $emcom;
    /**
     * @var EnvioPlantillaService
     */
    private $envioPlantilla;  
    /**
     * @var envioSMS
     */
    private $envioSMS;
    /**
     *
     * @var serviceUtil 
     */
    private $serviceUtil;      
    private $serviceCrypt;
    private $serviceFoxPremium;
    private $serviceLicenciasKaspersky;
    private $serviceLicenciasKasperskyWs;
    private $objContainer;

    private $rdaTipoEjecucion;
    private $rdaBandEjecuta;
    private $servicioConfirmar;
    private $serviceServicioComercial;
    private $serviceSolicitudes;
    private $serviceCancelarServicio;
    private $serviceTokenCas;
    private $serviceKonibit;

    public function __construct(Container $container)
    {
        $this->emSoporte            = $container->get('doctrine')->getManager('telconet_soporte');
        $this->emInfraestructura    = $container->get('doctrine')->getManager('telconet_infraestructura');
        $this->emSeguridad          = $container->get('doctrine')->getManager('telconet_seguridad');
        $this->emFinanciero         = $container->get('doctrine')->getManager('telconet_financiero');
        $this->emComercial          = $container->get('doctrine')->getManager('telconet');
        $this->emGeneral            = $container->get('doctrine')->getManager('telconet_general');
        $this->emComunicacion       = $container->get('doctrine')->getManager('telconet_comunicacion');
        $this->emNaf                = $container->get('doctrine')->getManager('telconet_naf');
        $this->host                 = $container->getParameter('host');
        $this->pathTelcos           = $container->getParameter('path_telcos');
        $this->pathParameters       = $container->getParameter('path_parameters');
        $this->intCantidadIntentos  = $container->getParameter('cantidad_intentos');
        $this->intSegundosSleep     = $container->getParameter('segundos_sleep');
        $this->ejecutaComando       = $container->getParameter('ws_rda_ejecuta_scripts');
        $this->rdaTipoEjecucion     = $container->getParameter('ws_rda_tipo_ejecucion');
        $this->rdaBandEjecuta       = $container->getParameter('ws_rda_band_ejecuta');
        $this->strConfirmacionTNMiddleware = $container->getParameter('ws_rda_opcion_confirmacion_middleware');
        $this->user_naf             = $container->getParameter('user_naf');
        $this->passwd_naf           = $container->getParameter('passwd_naf');
        $this->database_dsn_naf     = $container->getParameter('database_dsn_naf');
        $this->serviceTokenCas      = $container->get('seguridad.TokenCas');
        $this->serviceKonibit       = $container->get('comercial.ConsumoKonibit');
    }
  
    public function setDependencies(InfoServicioTecnicoService  $servicioGeneral, 
                                    InfoCancelarServicioService $cancelarServicio, 
                                    LicenciasMcAfeeService      $licenciasMcAfeeServicio,
                                    NetworkingScriptsService    $networkingScript,
                                    RedAccesoMiddlewareService  $redAccesoMiddleware,
                                    Container                   $container,
                                    RecursosDeRedService        $serviceRecursoRed,
                                    InfoTelefoniaService        $serviceTelefonia
                                    )
    {
        $this->servicioGeneral      = $servicioGeneral;
        $this->cancelarServicio     = $cancelarServicio;
        $this->licenciasMcAfee      = $licenciasMcAfeeServicio;
        $this->networkingScripts    = $networkingScript;
        $this->rdaMiddleware        = $redAccesoMiddleware;
        $this->recursosRed          = $serviceRecursoRed;
        $this->serviceTelefonia     = $serviceTelefonia;
        $this->serviceInfoElemento  = $container->get('tecnico.InfoElemento');
        $this->licenciasOffice365   = $container->get('tecnico.LicenciasOffice365');
        $this->envioPlantilla       = $container->get('soporte.EnvioPlantilla');
        $this->envioSMS             = $container->get('comunicaciones.SMS');
        $this->serviceUtil          = $container->get('schema.Util');
        $this->serviceCliente       = $container->get('comercial.Cliente');
        $this->serviceCrypt         = $container->get('seguridad.Crypt');
        $this->serviceFoxPremium    = $container->get('tecnico.FoxPremium');
        $this->serviceSoporte       = $container->get('soporte.SoporteService');
        $this->serviceUtilidades    = $container->get('administracion.Utilidades');
        $this->serviceLicenciasKaspersky    = $container->get('tecnico.LicenciasKaspersky');
        $this->serviceLicenciasKasperskyWs  = $container->get('tecnico.LicenciasKasperskyWs');
        $this->servicePromociones           = $container->get('tecnico.Promociones');
        $this->objContainer                 = $container;
        $this->emcom                        = $container->get('doctrine.orm.telconet_entity_manager');
        $this->servicioConfirmar            = $container->get('tecnico.InfoConfirmarServicio');
        $this->serviceServicioComercial     = $container->get('comercial.InfoServicio');
        $this->serviceSolicitudes           = $container->get('comercial.Solicitudes');
        $this->serviceCancelarServicio      = $container->get('tecnico.InfoCancelarServicio');
    }
  
    
    /**
     * Funcion que activa el cliente y verifica si es de fibra o de cobre
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 18-07-2015 John Vera
     * 
     * Se agrega parametro idOficina
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 30-10-2015 Jesus Bozada 
     * 
     * Se actualiza service para que reciba nuevos parametros para la activacion
     * del servicio de la empresa TN
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.2 11-12-2015
     * 
     * Se verifica que la variable si es pseudoPe sea S o N segun sea enviado como request
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 07-02-2017
     * 
     * Se agregan parametros para realizar activación de servicios SmartWifi II
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 24-02-2017
     * @since 1.3
     * 
     *
     * Se agrega nuevo parámetro origenMovil, el cual el aplicativo TM Operaciones enviará cuando se active un traslado, 
     * para que no finalice la solicitud ni la tarea al momento de activar el servicio.
     * @author Modificado: Nestor Naula <nnaulal@telconet.ec>
     * @version 1.5 24-07-2018  
     *
     * Se agrega programación para activación de servicios ZTE
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.6 23-07-2018
     * @since 1.4
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 28-11-2018 Se realizan validaciones para activación de nuevos planes de MD
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 01-08-2022 - Se valida el tipo de red para los servicios SAFE ANALYTICS CAM de las cámaras safecity.
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.9 25-11-2022 - Se agrega variable calculoPotencia para consultar la potencia en los traslados del mismo OLT.
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.10 22-02-2023 - Se agrega validacion para activar internet Ecuanet.
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 2.0 17-1-2023 - Se agrega arreglos elemento adicionales clente y nodo para servicios safe city.
     */
    public function activarCliente($arrayPeticiones)
    {
        //*OBTENCION DE PARAMETROS-----------------------------------------------*/
        $idEmpresa                      = $arrayPeticiones['idEmpresa'];
        $prefijoEmpresa                 = $arrayPeticiones['prefijoEmpresa'];
        $idServicio                     = $arrayPeticiones['idServicio'];
        $interfaceElementoId            = $arrayPeticiones['interfaceElementoId'];
        $interfaceElementoSplitterId    = $arrayPeticiones['interfaceElementoSplitterId'];
        $idProducto                     = $arrayPeticiones['idProducto'];
        $plan                           = $arrayPeticiones['plan'];
        $ultimaMilla                    = $arrayPeticiones['ultimaMilla'];
        $mac                            = $arrayPeticiones['mac'];
        $login                          = $arrayPeticiones['login'];
        $perfil                         = $arrayPeticiones['perfil'];
        $ipCpeRadio                     = $arrayPeticiones['ipCpeRadio'];
        $capacidad1                     = $arrayPeticiones['capacidad1'];
        $capacidad2                     = $arrayPeticiones['capacidad2'];
        $macWifi                        = $arrayPeticiones['macWifi'];
        $serieWifi                      = strtoupper($arrayPeticiones['serieWifi']);
        $modeloWifi                     = $arrayPeticiones['modeloWifi'];
        $macOnt                         = $arrayPeticiones['macOnt'];
        $serieOnt                       = strtoupper($arrayPeticiones['serieOnt']);
        $modeloOnt                      = $arrayPeticiones['modeloOnt'];
        $ssid                           = $arrayPeticiones['ssid'];
        $password                       = $arrayPeticiones['password'];
        $numeroPc                       = $arrayPeticiones['numeroPc'];
        $modoOperacion                  = $arrayPeticiones['modoOperacion'];
        $observacion                    = $arrayPeticiones['observacion'];
        $usrCreacion                    = $arrayPeticiones['usrCreacion'];
        $ipCreacion                     = $arrayPeticiones['ipCreacion'];
        $idPersonaEmpresaRol            = $arrayPeticiones['idPersonaEmpresaRol'];
        $idOficina                      = $arrayPeticiones['idOficina'];
        $strOrigenMovil                 = $arrayPeticiones['origenMovil'];
        $strSerieSmartWifi              = !empty($arrayPeticiones['strSerieSmartWifi'])?$arrayPeticiones['strSerieSmartWifi']:"";
        $strModeloSmartWifi             = !empty($arrayPeticiones['strModeloSmartWifi'])?$arrayPeticiones['strModeloSmartWifi']:"";
        $strMacSmartWifi                = !empty($arrayPeticiones['strMacSmartWifi'])?$arrayPeticiones['strMacSmartWifi']:"";
        $strTieneSmartWifiRenta         = !empty($arrayPeticiones['strTieneSmartWifiRenta'])?$arrayPeticiones['strTieneSmartWifiRenta']:"";
        $arrayPeticiones['strTipoRed']  = isset($arrayPeticiones['strTipoRed']) && !empty($arrayPeticiones['strTipoRed'])
                                          ? $arrayPeticiones['strTipoRed'] : "MPLS";
        $arrayPeticiones['booleanReasignarTareaGpon'] = isset($arrayPeticiones['booleanReasignarTareaGpon'])
                                                        ? $arrayPeticiones['booleanReasignarTareaGpon'] : true;
        $arrayPeticiones['booleanFinalizarTareaGpon'] = isset($arrayPeticiones['booleanFinalizarTareaGpon'])
                                                        ? $arrayPeticiones['booleanFinalizarTareaGpon'] : true;
        
        
        $servicio                       = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        if(is_object($servicio))
        {
            if (empty($strTieneSmartWifiRenta))
            {
                $strTieneSmartWifiRenta = "NO";
                //se valida si el servicio de tipo Plan tiene en su detalle un producto Renta SmartWifi
                $objPlan = $servicio->getPlanId();
                if(is_object($objPlan))
                {
                    $objProdSmartWifiRenta  = $this->emComercial
                                                   ->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array("descripcionProducto" => "Renta SmartWiFi (Aironet 1602)",
                                                                     "empresaCod"          => $idEmpresa, 
                                                                     "estado"              => "Activo"));
                    if(is_object($objProdSmartWifiRenta))
                    {

                        $arrayPlanDet = $this->emComercial
                                             ->getRepository('schemaBundle:InfoPlanDet')
                                             ->findBy(array("planId" => $objPlan->getId()));

                        foreach($arrayPlanDet as $objPlanDet)
                        {
                            if($objPlanDet->getProductoId() == $objProdSmartWifiRenta->getId())
                            {
                                $strTieneSmartWifiRenta = "SI";
                            }
                        }
                    }

                }
            }
        }
        //Se establece por default a false para tener el flujo normal de un Servicio de datos
        $boolEsPseudoPe     = false;
        
        //Si no es enviado valor dentro del array establece el flujo del servicio como normal y no pseudope
        if(isset($arrayPeticiones['esPseudoPe']))
        {
            if($arrayPeticiones['esPseudoPe']=='S')
            {
                $boolEsPseudoPe = true;
            }
        }
        
        //Si no es PseudoPe obtiene la informacion tecnica normal para el Servicio que no es pseudope
        if(!$boolEsPseudoPe)
        {
            $servicioTecnico    = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                        ->findOneBy(array( "servicioId" => $servicio->getId()));
            $interfaceElemento  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($interfaceElementoId);
            $producto           = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($idProducto);
            $elementoId         = $interfaceElemento->getElementoId();
            $elemento           = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($elementoId);
            $modeloElementoId   = $elemento->getModeloElementoId();
            $modeloElemento     = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloElementoId);
        }

        //*---------------------------------------------------------------------*/

        //migracion_ttco_md
        $arrayEmpresaMigra = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                  ->getEmpresaEquivalente($idServicio, $prefijoEmpresa);

        if($arrayEmpresaMigra)
        {
            if($arrayEmpresaMigra['prefijo'] == 'TTCO')
            {
                 $idEmpresa = $arrayEmpresaMigra['id'];
                 $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
            }
        }

        //*COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)-------------------------*/
        //validar si el tipo de orden viene vacia
        if($servicio->getTipoOrden()==''){
            $respuestaArray[] = array('status'=>'ERROR', 'mensaje'=>'ERROR TIPO SERVICIO');
        }

        if($servicio->getTipoOrden()!='')
        {
            if($prefijoEmpresa=="TTCO")
            {
                $arrayParametros = array(
                                            'servicio'          => $servicio,
                                            'servicioTecnico'   => $servicioTecnico,
                                            'plan'              => $plan,
                                            'ultimaMilla'       => $ultimaMilla,
                                            'producto'          => $producto,
                                            'modeloElemento'    => $modeloElemento,
                                            'interfaceElemento' => $interfaceElemento,
                                            'mac'               => $mac,
                                            'login'             => $login,
                                            'perfil'            => $perfil,
                                            'ipCpeRadio'        => $ipCpeRadio,
                                            'capacidad1'        => $capacidad1,
                                            'capacidad2'        => $capacidad2,
                                            'usrCreacion'       => $usrCreacion,
                                            'ipCreacion'        => $ipCreacion,
                                            'prefijoEmpresa'    => $prefijoEmpresa,
                                            'idEmpresa'         => $idEmpresa
                                        );
                $respuestaArray = $this->activarClienteTtco($arrayParametros);

            }
            else if($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN")
            {
                $arrayParametros = array(
                                            'usrCreacion'                   => $usrCreacion,
                                            'ipCreacion'                    => $ipCreacion,
                                            'idEmpresa'                     => $idEmpresa,
                                            'strCapacidad1'                 => $capacidad1,
                                            'strCapacidad2'                 => $capacidad2,
                                            'servicio'                      => $servicio,
                                            'servicioTecnico'               => $servicioTecnico,
                                            'interfaceElemento'             => $interfaceElemento,
                                            'interfaceElementoSplitterId'   => $interfaceElementoSplitterId,
                                            'perfil'                        => $perfil,
                                            'login'                         => $login,
                                            'macWifi'                       => $macWifi,
                                            'serieWifi'                     => $serieWifi,
                                            'modeloWifi'                    => $modeloWifi,
                                            'modeloElemento'                => $modeloElemento,
                                            'prefijoEmpresa'                => $prefijoEmpresa,
                                            'macOnt'                        => $macOnt,
                                            'serieOnt'                      => $serieOnt,
                                            'modeloOnt'                     => $modeloOnt,
                                            'ssid'                          => $ssid,
                                            'password'                      => $password,
                                            'numeroPc'                      => $numeroPc,
                                            'modoOperacion'                 => $modoOperacion,
                                            'observacion'                   => $observacion,
                                            'producto'                      => $producto,
                                            'ultimaMilla'                   => $ultimaMilla,
                                            'idPersonaEmpresaRol'           => $idPersonaEmpresaRol,
                                            'idOficina'                     => $idOficina,
                                            'strSerieSmartWifi'             => $strSerieSmartWifi,
                                            'strModeloSmartWifi'            => $strModeloSmartWifi,
                                            'strMacSmartWifi'               => $strMacSmartWifi,
                                            'strTieneSmartWifiRenta'        => $strTieneSmartWifiRenta,
                                            'strOrigenMovil'                => $strOrigenMovil
                    );
                
                if (isset($arrayPeticiones['calculoPotencia']) && !empty($arrayPeticiones['calculoPotencia'])) 
                {
                    $arrayParametros['calculoPotencia'] = $arrayPeticiones['calculoPotencia'];
                }
                $respuestaArray = $this->activarClienteMd($arrayParametros);
            }
            else if($prefijoEmpresa == "TN")
            {
                //se valida si el tipo de red es GPON
                $booleanTipoRedGpon = false;
                if(isset($arrayPeticiones['strTipoRed']) && !empty($arrayPeticiones['strTipoRed']))
                {
                    $arrayParVerTipoRed = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('NUEVA_RED_GPON_TN',
                                                            'COMERCIAL',
                                                            '',
                                                            'VERIFICAR TIPO RED',
                                                            'VERIFICAR_GPON',
                                                            $arrayPeticiones['strTipoRed'],
                                                            '',
                                                            '',
                                                            '');
                    if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                    {
                        $booleanTipoRedGpon = true;
                    }
                    elseif(is_object($servicio) && is_object($servicio->getProductoId()))
                    {
                        //verificar si es servicio safecity
                        $arrayParSerAdd = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                             'INFRAESTRUCTURA',
                                                                             'PARAMETROS',
                                                                             'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                                             $servicio->getProductoId()->getId(),
                                                                             '',
                                                                             '',
                                                                             '',
                                                                             '',
                                                                             $idEmpresa);
                        if(isset($arrayParSerAdd) && !empty($arrayParSerAdd))
                        {
                            $booleanTipoRedGpon = true;
                        }
                    }
                }
                //se verifica el tipo de red
                if( $booleanTipoRedGpon
                    && $arrayPeticiones["banderaWifiSafecity"] == "N"
                    && ( $arrayPeticiones["banderaCamaraSafecity"] == "N" || 
                         ($arrayPeticiones["banderaCamaraSafecity"] == "S" && $arrayPeticiones["booleanMigrarSwPoe"])
                       )
                    && ( $arrayPeticiones["banderaCamaraVpnSafecity"] == "N" || 
                         ($arrayPeticiones["banderaCamaraVpnSafecity"] == "S" && $arrayPeticiones["booleanMigrarSwPoe"])
                       )
                  )
                {
                    $respuestaArray = $this->activarClienteTNGpon($arrayPeticiones);
                }
                else
                {
                    $respuestaArray = $this->activarClienteTN($arrayPeticiones);
                }
            }
        }
        /*----------------------------------------------------------------------*/
      
        return $respuestaArray;
    }

    /**
     * Funcion que sirve para activar servicios de la empresa MD
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 11-12-2015
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 26-07-2015 actualizacion de interface del elemento cliente
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 05-08-2015 validacion de enlace antes de crearlo.
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.3 08-08-2015 se cambio para obtener el elemento cliente CPE
     *
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.4 2015-10-20 Se incluyó insertError en el catch y no presentar el mensaje capturado por la Exception
     *
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.5 2016-11-14 Se incluye llamado a metodo de control de excepciones para manejo de mensajes de las mismas de manera correcta
     *
     * @author Allan Suárez C. <arsuarez@telconet.ec>
     * @version 1.6 2016-12-08 Se agrega validacion para llamar metodo de activacion en caso de servicio depender de psuedoPe
     *
     * @author John Vera R. <javera@telconet.ec>
     * @version 1.7 2017-04-04 Se agrega validacion para que no actualice la interface cliente si es que este ya tiene una
     *
     * @author Allan Suárez C. <arsuarez@telconet.ec>
     * @version 1.8 2017-03-31 Se agrega historial de enlace Backup a que servcicio Principal hace referencia una vez que haya sido activado
     *
     * @author John Vera R. <javera@telconet.ec>
     * @version 1.9 01-06-2017 Se adiciono el tipo de orden traslado para el proceso de activacion
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.0 11-07-2017 Se corrige validacion que la variable $interfaceElementoCliente exista para poder luego obtener
     *                         el enlace ligado, en caso que sea una activacion con una misma UM.
     *
     * @author John Vera R. <javera@telconet.ec>
     * @version 2.1 13-07-2017 Se valida que cuando la solicitud de wifi este finalizada no se realice ningun proceso
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.2 28-08-2017 Se elimina validación de traslados para que el servicio pase a estado EnPruebas y luego se pueda confirmar el servicio
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 2.3 21-01-2018 Se debe considerar el tipo orden C (Cambio de tipo medio) para la activación de servicio de TN.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.4 28-08-2017 Se agrega programación para activar servicios de tipo traslado
     * @since 2.3
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.5 08-08-2018 Se realizan ajustes para escribir en el historial del servicio, cuando sean servicios DC que usan el mismo cpe
     * @since 2.4
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.6 30-01-2019 - Se realizan ajustes para grabar la trazabilidad de activaciones que usan el mismo CPE
     * @since 2.5
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.7 19-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                           enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     * @since 2.6
     * 
     * @author David Leon      <mdleon@telconet.ec>
     * @version 2.8 05-08-2019 - Se agrega el Producto L3MPLS SDWAN a la validación de Monitoreo.
     * 
     * @author David Leon      <mdleon@telconet.ec>
     * @version 2.9 06-09-2019 - Se agrega el Producto DATOS DC SDWAN a la validación de Monitoreo.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 2.10 18-11-2019 -Se procede agregar la lógica para activar el producto Datos FWA.
     * @param $arrayParametros
     * 
     * @author David Leon      <mdleon@telconet.ec>
     * @version 2.11 08-01-2020 - Se valida para productos Sdwan se inserte valores por defectos si la mac, versión y administra cpe son vació.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.0 13-05-2021 - Se registra en el historial los dispositivos del cliente que se encuentran en el nodo.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.1 06-06-2022 - Se agrega parámetros para el envió de notificación del password de la cámara safecity.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.2 01-08-2022 - Se agrega las validaciones para las activaciones de los servicios SAFE ANALYTICS CAM de las cámaras safecity.
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 3.3 11-10-2022 - Se finaliza la tarea para las camaras GPON
     * 
     * @author Joel Muñoz <jrmunoz@telconet.ec>
     * @version 3.4 01-12-2022 - Se agrega validación para evitar que se llame al WS cuando se trata de una migración SDWAN
     * @return array
     * 
     */
    public function activarClienteTN($arrayParametros)
    {
        $intIdServicio         = $arrayParametros['idServicio'];
        $arrayIpsControladora  = $arrayParametros['ipControladora'];
        $objServicio           = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $strTipoOrden          = $objServicio->getTipoOrden();
        $intIdPersonaCamara    = "";
        $intIdPerEmpRolCamara  = "";
        
        $observacionServicio   = "";
        $boolEsPseudoPe        = $arrayParametros['esPseudoPe']=='S'?true:false;
        $strStatusValidaBackup = "OK";

        $strBanderaLineasBravco  = "N";
        $strRazonSocial          = "";
        $strRouteTargetExport    = "";
        $strRouteTargetImport    = "";
        $strLoginAuxServicioBackup       = "";
        $arrayParametros['strTipoOrden'] = $strTipoOrden;
        $arrayEstadosPermitidosBackUps   = array("Activo", 
                                                 "In-Corte", 
                                                 "Eliminado", 
                                                 "Cancel", 
                                                 "Anulado", 
                                                 "Anulada", 
                                                 "Rechazado", 
                                                 "Rechazada",
                                                 "Reubicado",
                                                 "Trasladado");
        
        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        if($arrayParametros["banderaCamaraSafecity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
           || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
        {
            $this->emSoporte->getConnection()->isTransactionActive();
        }
        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        $this->emNaf->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/

        try
        {
            //***************Validar que la razon social este dentro de las permitidas para ejecutar las lineas de monitoreo************//
            if(!empty($arrayParametros['idProducto']) && isset($arrayParametros["idProducto"]))
            {
                $objProducto = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($arrayParametros['idProducto']);

                if(is_object($objProducto) && is_object($objServicio) && ( $objProducto->getNombreTecnico() === "L3MPLS" ||
                   $objProducto->getNombreTecnico() === "L3MPLS SDWAN" || $objProducto->getNombreTecnico() === "DATOSDC" ||
                   $objProducto->getNombreTecnico() === "DATOS DC SDWAN" || $objProducto->getNombreTecnico() === "SAFECITYDATOS"
                   || $objProducto->getNombreTecnico() === "SAFECITYWIFI"))
                {
                    //Consultar Razon Social
                    $objInfoPersona = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();

                    if(is_object($objInfoPersona))
                    {
                        $strRazonSocial = $objInfoPersona->getRazonSocial();
                    }

                    if(!empty($strRazonSocial))
                    {
                        $arrayRazonesSociales = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->getOne('PROYECTO MONITOREO CLIENTES GRUPO BRAVCO',
                                                                           'INFRAESTRUCTURA',
                                                                           'ACTIVAR SERVICIO',
                                                                           'RAZON SOCIAL GRUPO BRAVCO',
                                                                           $strRazonSocial,
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '');
                    }

                    if(isset($arrayRazonesSociales["valor1"]) && !empty($arrayRazonesSociales["valor1"]))
                    {
                        $strBanderaLineasBravco = "S";
                        $strRouteTargetExport   = $arrayRazonesSociales["valor2"];
                        $strRouteTargetImport   = $arrayRazonesSociales["valor3"];
                        $strRazonSocial         = $arrayRazonesSociales["valor4"];
                    }
                }
            }

            $arrayParametros["strBanderaLineasBravco"]  = $strBanderaLineasBravco;
            $arrayParametros["strRazonSocial"]          = $strRazonSocial;
            $arrayParametros["strRouteTargetExport"]    = $strRouteTargetExport;
            $arrayParametros["strRouteTargetImport"]    = $strRouteTargetImport;
            //***************Validar que la razon social este dentro de las permitidas para ejecutar las lineas de monitoreo************//

            if ($strTipoOrden == 'T')
            {
                //se valida principal y backup para poder realizar la activación del servicio por traslado
                //se agrega validación para servicios concentradores, se enlazan los extremos al nuevo concentrador
                $objServicio = $this->emComercial
                                    ->getRepository('schemaBundle:InfoServicio')
                                    ->find($arrayParametros['idServicio']);
                if (is_object($objServicio))
                {
                    //validación de principal y backup
                    $objServicioTecnico = $this->emComercial
                                               ->getRepository('schemaBundle:InfoServicioTecnico')
                                               ->findOneByServicioId($objServicio->getId());
                    if (is_object($objServicioTecnico) && $objServicioTecnico->getTipoEnlace() == 'PRINCIPAL')
                    {
                        $objEsBackup = $this->emComercial
                                            ->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy(array("descripcionCaracteristica" => "ES_BACKUP", 
                                                              "estado"                    => "Activo"));
                    
                        if (is_object($objEsBackup))
                        {
                            $objProdCaractBackUp = $this->emComercial
                                                        ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array("productoId"       => $objServicio->getProductoId()->getId(), 
                                                                          "caracteristicaId" => $objEsBackup->getId(), 
                                                                          "estado"           => "Activo"));

                            if (is_object($objProdCaractBackUp))
                            {
                                $arrayProdCaractBUNuevo = $this->emComercial
                                                               ->getRepository('schemaBundle:InfoServicioProdCaract')
                                                               ->findBy(array('valor'                     => $objServicio->getId(),
                                                                              'productoCaracterisiticaId' => $objProdCaractBackUp->getId(),
                                                                              'estado'                    => 'Activo'));
                                foreach($arrayProdCaractBUNuevo as $objProdCaractBUNuevo)
                                {
                                    $objServicioBackup = $this->emComercial
                                                              ->getRepository('schemaBundle:InfoServicio')
                                                              ->find($objProdCaractBUNuevo->getServicioId());
                                    if (is_object($objServicioBackup))
                                    {
                                        if (!in_array($objServicioBackup->getEstado(),$arrayEstadosPermitidosBackUps))
                                        {
                                            $strStatusValidaBackup      = "ERROR";
                                            $strLoginAuxServicioBackup .=  $objServicioBackup->getLoginAux(). " ";
                                        }
                                    }
                                }
                            }
                            else
                            {
                                $strStatusValidaBackup = "ERROR-INFO";
                            }
                        }
                        else
                        {
                            $strStatusValidaBackup = "ERROR-INFO";
                        }
                        if ($strStatusValidaBackup == "ERROR")
                        {
                            throw new \Exception("El servicio principal que desea activar tiene servicios".
                                                 " backup's que se encuentran pendientes de activación. ".
                                                 $strLoginAuxServicioBackup);
                        }
                        else if ($strStatusValidaBackup == "ERROR-INFO")
                        {
                            throw new \Exception("Existieron problemas al recuperar información de caracterisiticas".
                                                 " BACKUP necesarias para validaciones.");
                        }
                    }
                    
                    //validación de concentradores y extremos
                    if ($objServicio->getProductoId()->getEsConcentrador() == 'SI')
                    {
                        $objServProdCaractTraslado = $this->servicioGeneral
                                                          ->getServicioProductoCaracteristica($objServicio, 
                                                                                              "TRASLADO", 
                                                                                              $objServicio->getProductoId());
                        if (is_object($objServProdCaractTraslado))
                        {
                            $strIdServicioOrigTraslado = $objServProdCaractTraslado->getValor();
                            $objServicioOrigenTraslado = $this->emComercial
                                                              ->getRepository('schemaBundle:InfoServicio')
                                                              ->find($strIdServicioOrigTraslado);
                            if (is_object($objServicioOrigenTraslado))
                            {
                                $arrayParametrosExtCon = array();
                
                                //Los extremos con los siguientes estados no serán considerados dentro de la consulta
                                $arrayParametrosExtCon['estadosDiscriminados']      = array('Eliminado','Anulado','Rechazada');
                                $arrayParametrosExtCon['intIdServicioConcentrador'] = $strIdServicioOrigTraslado;

                                $arrayInformacionExtremosConcentradores = $this->emComercial
                                                                               ->getRepository('schemaBundle:InfoServicioTecnico')
                                                                               ->getArrayInformacionConcentradorExtremo($arrayParametrosExtCon);

                                if(isset($arrayInformacionExtremosConcentradores))
                                {
                                    foreach($arrayInformacionExtremosConcentradores as $arrayInfoExtremoConcentrador)
                                    {
                                        if ('EXTREMO' == $arrayInfoExtremoConcentrador['tipo'])
                                        {
                                            $objServicioExtremo = $this->emComercial
                                                                       ->getRepository('schemaBundle:InfoServicio')
                                                                       ->find($arrayInfoExtremoConcentrador['idServicio']);
                                            if (is_object($objServicioExtremo))
                                            {
                                                $objServProdCaractExtEnlaceDatos = $this->servicioGeneral
                                                                                        ->getServicioProductoCaracteristica
                                                                                        ($objServicioExtremo, 
                                                                                         "ENLACE_DATOS", 
                                                                                         $objServicioExtremo->getProductoId());
                                                if (is_object($objServProdCaractExtEnlaceDatos))
                                                {
                                                    $this->servicioGeneral
                                                         ->setEstadoServicioProductoCaracteristica($objServProdCaractExtEnlaceDatos, 'Eliminado');
                                                    $this->servicioGeneral
                                                         ->ingresarServicioProductoCaracteristica($objServicioExtremo, 
                                                                                                  $objServicioExtremo->getProductoId(), 
                                                                                                  "ENLACE_DATOS", 
                                                                                                  $objServicio->getId(), 
                                                                                                  $arrayParametros['usrCreacion']);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (is_object($objServicioTecnico))
                    {
                        $arrayParametros['strTipoEnlace'] = $objServicioTecnico->getTipoEnlace();
                    }
                }
            }
            
            if ($strTipoOrden == 'C')
            {
                //se valida principal y backup para poder realizar la activación del servicio por cambio de tipo medio
                //se agrega validación para servicios concentradores, se enlazan los extremos al nuevo concentrador
                $objServicio = $this->emComercial
                                    ->getRepository('schemaBundle:InfoServicio')
                                    ->find($arrayParametros['idServicio']);
                if (is_object($objServicio))
                {
                    //validación de concentradores y extremos
                    if ($objServicio->getProductoId()->getEsConcentrador() == 'SI')
                    {
                        $objServProdCaractTraslado = $this->servicioGeneral
                                                          ->getServicioProductoCaracteristica($objServicio,
                                                                                              "ID_CAMBIO_TIPO_MEDIO",
                                                                                              $objServicio->getProductoId());
                        if (is_object($objServProdCaractTraslado))
                        {
                            $strIdServicioOrigTraslado = $objServProdCaractTraslado->getValor();
                            $objServicioOrigenTraslado = $this->emComercial
                                                              ->getRepository('schemaBundle:InfoServicio')
                                                              ->find($strIdServicioOrigTraslado);
                            if (is_object($objServicioOrigenTraslado))
                            {
                                $arrayParametrosExtCon = array();

                                //Los extremos con los siguientes estados no serán considerados dentro de la consulta
                                $arrayParametrosExtCon['estadosDiscriminados']      = array('Eliminado','Anulado','Rechazada');
                                $arrayParametrosExtCon['intIdServicioConcentrador'] = $strIdServicioOrigTraslado;

                                $arrayInformacionExtremosConcentradores = $this->emComercial
                                                                               ->getRepository('schemaBundle:InfoServicioTecnico')
                                                                               ->getArrayInformacionConcentradorExtremo($arrayParametrosExtCon);

                                if(isset($arrayInformacionExtremosConcentradores))
                                {
                                    foreach($arrayInformacionExtremosConcentradores as $arrayInfoExtremoConcentrador)
                                    {
                                        if ('EXTREMO' == $arrayInfoExtremoConcentrador['tipo'])
                                        {
                                            $objServicioExtremo = $this->emComercial
                                                                       ->getRepository('schemaBundle:InfoServicio')
                                                                       ->find($arrayInfoExtremoConcentrador['idServicio']);
                                            if (is_object($objServicioExtremo))
                                            {
                                                $objServProdCaractExtEnlaceDatos = $this->servicioGeneral
                                                                                        ->getServicioProductoCaracteristica
                                                                                        ($objServicioExtremo, 
                                                                                         "ENLACE_DATOS", 
                                                                                         $objServicioExtremo->getProductoId());
                                                if (is_object($objServProdCaractExtEnlaceDatos))
                                                {
                                                    $this->servicioGeneral
                                                         ->setEstadoServicioProductoCaracteristica($objServProdCaractExtEnlaceDatos, 'Eliminado');
                                                    $this->servicioGeneral
                                                         ->ingresarServicioProductoCaracteristica($objServicioExtremo, 
                                                                                                  $objServicioExtremo->getProductoId(), 
                                                                                                  "ENLACE_DATOS", 
                                                                                                  $objServicio->getId(), 
                                                                                                  $arrayParametros['usrCreacion']);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if($strTipoOrden == 'N' || $strTipoOrden == 'T' || $strTipoOrden == 'C')
            {
                if($boolEsPseudoPe)
                {
                    $objProducto = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($arrayParametros['idProducto']);
                    if(is_object($objProducto) && $objProducto->getNombreTecnico() === "DATOS FWA")
                    {
                        $arrayParametroActivaFWA    = array('objServicio'       => $objServicio,
                                                            'objProducto'       => $objProducto,
                                                            'strIpWanTelefonica'=> $arrayParametros['strIpWanTelefonica'],
                                                            'strIpLoopBack'     => $arrayParametros['strIpLoopBack'],
                                                            'strUsrCreacion'    => $arrayParametros['usrCreacion'],
                                                            'strIpCreacion'     => $arrayParametros['ipCreacion']
                                                            );
                        $arrayRespuesta             = $this->activarDatosFWA($arrayParametroActivaFWA);
                    }
                    else
                    {
                        $arrayRespuesta = $this->activarServicioPseudoPeTN($arrayParametros);
                    }

                    $strStatus  = $arrayRespuesta['status'];
                    $strMensaje = $arrayRespuesta['mensaje'];
                }
                else
                {
                    if(strpos($objServicio->getProductoId()->getGrupo(),'DATACENTER')!==false)
                    {
                        $arrayRespuesta = $this->activarServicioDataCenter($arrayParametros);
                        $strStatus  = $arrayRespuesta['status'];
                        $strMensaje = $arrayRespuesta['mensaje'];
                    }
                    else//Activacion Servicios con productos tradicionales
                    {
                        $arrayRespuesta = $this->activarServicioPorNuevaTN($arrayParametros);
                        $strStatus  = $arrayRespuesta[0]['status'];
                        $strMensaje = $arrayRespuesta[0]['mensaje'];
                        $intIdPersonaCamara   = isset($arrayRespuesta[0]['intIdPersonaCamara']) ?
                                                $arrayRespuesta[0]['intIdPersonaCamara'] : '';
                        $intIdPerEmpRolCamara = isset($arrayRespuesta[0]['intIdPerEmpRolCamara']) ?
                                                $arrayRespuesta[0]['intIdPerEmpRolCamara'] : '';
                    }
                }                
            }

            if($strStatus == "OK")
            {
                //setear estado del servicio
                if($strTipoOrden == "R")
                {
                    $objServicio->setEstado("Activo");
                }
                else
                {
                    $objServicio->setEstado("EnPruebas");
                }
                
                $objPunto           = $objServicio->getPuntoId();
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                               ->findOneByServicioId($objServicio->getId());
                
                if(!$boolEsPseudoPe)
                {
                    $objInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($objServicioTecnico->getInterfaceElementoId());
                    //conectar puerto del splitter
                    $objInterfaceElemento->setEstado("connected");
                    $this->emInfraestructura->persist($objInterfaceElemento);
                }

                //setear estado del punto
                $objPunto->setEstado("Activo");
                $this->emComercial->persist($objPunto);

                

                if($objServicio->getPuntoFacturacionId() == null || $objServicio->getPuntoFacturacionId() == "")
                {
                    $objServicio->setPuntoFacturacionId($objPunto);
                    //punto de facturacion
                    $puntoAdicional = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                           ->findOneBy(array( "puntoId" => $objPunto->getId()));
                    $puntoAdicional->setEsPadreFacturacion("S");
                    $this->emComercial->persist($puntoAdicional);
                    $this->emComercial->flush();
                }

                $this->emComercial->persist($objServicio);
                $this->emComercial->persist($objServicioTecnico);

                //finalizar solicitud planificacion
                $objTipoSolicitudPlanficacion = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                  ->findOneBy(array("descripcionSolicitud"=>"SOLICITUD PLANIFICACION",
                                                                    "estado"=>"Activo"));
                $objSolicitudPlanficacion = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                              ->findOneBy(array("servicioId"=>$objServicio->getId(),
                                                                "tipoSolicitudId"=>$objTipoSolicitudPlanficacion->getId(),
                                                                "estado"=>"AsignadoTarea"));
                if($objSolicitudPlanficacion)
                {
                    $objSolicitudPlanficacion->setEstado("Finalizada");
                    $this->emComercial->persist($objSolicitudPlanficacion);
                    $this->emComercial->flush();
                }

                //historial del servicio
                $servicioHistorial = new InfoServicioHistorial();
                $servicioHistorial->setServicioId($objServicio);
                
                $observacionServicio .= "<b>Informaci&oacute;n de los Elementos del Cliente</b><br/>";

                if($arrayParametros["banderaCamaraSafecity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
                   || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
                {
                    if(!$arrayParametros["booleanActivarOnt"]
                       && (!empty($arrayParametros['idInterfaceOntSwPoe']) || !empty($arrayParametros['idInterfaceOntEleReq'])))
                    {
                        $intIdIntOnt = !empty($arrayParametros['idInterfaceOntSwPoe']) ? $arrayParametros['idInterfaceOntSwPoe']
                                       : $arrayParametros['idInterfaceOntEleReq'];
                        $objInterfaceElementoOnt           = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                        ->find($intIdIntOnt);
                        if(is_object($objInterfaceElementoOnt))
                        {
                            $arrayParametros['puertosOnt'] = $objInterfaceElementoOnt->getNombreInterfaceElemento();
                        }
                    }
                    $observacionServicio .= "<br/><b>ONT</b><br/>";
                    $observacionServicio .= "&#10140;<b>Nombre:</b> ".$arrayParametros["nombreOnt"]."<br/>";                       
                    $observacionServicio .= "&#10140;<b>Puerto:</b> ".$arrayParametros["puertosOnt"]."<br/>";                    
                    if($arrayParametros["banderaCamaraSafecity"] == "S")
                    {
                        if(!$arrayParametros["booleanActivarOnt"] && $arrayParametros["booleanExisteSwPoeGpon"])
                        {
                            $observacionServicio .= "<br/><b>Switch PoE</b><br/>";
                            $observacionServicio .= "&#10140;<b>Nombre:</b> ".$arrayParametros["nombreSwPoe"]."<br/>";
                            $observacionServicio .= "&#10140;<b>Puerto:</b> ".$arrayParametros["puertosSwPoe"]."<br/>";
                        }
                        $observacionServicio .= "<br/><b>CAMARA</b><br/>";
                        $observacionServicio .= "&#10140;<b>Nombre:</b> ".$arrayParametros["nombreNuevoCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Serie:</b> ".$arrayParametros["serieNuevoCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Modelo:</b> ".$arrayParametros["modeloCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Mac:</b> ".$arrayParametros["macCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Resoluci&oacute;n:</b> ".$arrayParametros["resolucionCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Codec:</b> ".$arrayParametros["codecCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Fps:</b> ".$arrayParametros["fpsCamara"]."<br/><br/>";
                    }
                    elseif($arrayParametros["banderaWifiSafecity"] == "S")
                    {
                        $observacionServicio .= "<br/><b>AP WIFI</b><br/>";
                        $observacionServicio .= "&#10140;<b>Nombre:</b> ".$arrayParametros["nombreWifi"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Serie:</b> ".$arrayParametros["serieWifi"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Modelo:</b> ".$arrayParametros["modeloWifi"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Mac:</b> ".$arrayParametros["macWifi"]."<br/>";
                        if(isset($arrayParametros["ipControladora"]) && !empty($arrayParametros["ipControladora"]) &&
                        $arrayParametros["ipControladora"] !== '-Seleccione-')
                        {
                            $observacionServicio .= "&#10140;<b>Ip Controladora:</b> ".$arrayParametros["ipControladora"]."<br/>";
                        }
                    }
                    elseif($arrayParametros["banderaCamaraVpnSafecity"] == "S")
                    {
                        if(!$arrayParametros["booleanActivarOnt"] && $arrayParametros["booleanExisteSwPoeGpon"])
                        {
                            $observacionServicio .= "<br/><b>Switch PoE</b><br/>";
                            $observacionServicio .= "&#10140;<b>Nombre:</b> ".$arrayParametros["nombreSwPoe"]."<br/>";
                            $observacionServicio .= "&#10140;<b>Puerto:</b> ".$arrayParametros["puertosSwPoe"]."<br/>";
                        }
                        elseif(!empty($arrayParametros['idServicioEleReqGpon']) || !empty($arrayParametros['idElementoReqGpon']))
                        {
                            $observacionServicio .= "<br/><b>Elemento</b><br/>";
                            $observacionServicio .= "&#10140;<b>Nombre:</b> ".$arrayParametros["nombreEleReqGpon"]."<br/>";
                            $observacionServicio .= "&#10140;<b>Puerto:</b> ".$arrayParametros["puertosEleReqGpon"]."<br/>";
                        }
                        $observacionServicio .= "<br/><b>CAMARA</b><br/>";
                        $observacionServicio .= "&#10140;<b>Nombre:</b> ".$arrayParametros["nombreNuevoCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Serie:</b> ".$arrayParametros["serieNuevoCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Modelo:</b> ".$arrayParametros["modeloCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Mac:</b> ".$arrayParametros["macCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Resoluci&oacute;n:</b> ".$arrayParametros["resolucionCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Codec:</b> ".$arrayParametros["codecCamara"]."<br/>";
                        $observacionServicio .= "&#10140;<b>Fps:</b> ".$arrayParametros["fpsCamara"]."<br/><br/>";
                    }
                    $this->servicioGeneral->ingresarServicioHistorial($objServicio, "Activo", $observacionServicio,
                                                                      $arrayParametros['usrCreacion'], $arrayParametros['ipCreacion']);
                }
                else
                {
                    if($arrayParametros["flagCpe"]=="nuevo")
                    { 
                        //Nuevo Cpe
                        $observacionServicio .= "Nuevo Cpe <br/>";
                        $observacionServicio .= "Propiedad de: ".$arrayParametros["propiedadNuevoCpe"]."<br/>";
                        $observacionServicio .= "Nombre Cpe: ".$arrayParametros["nombreNuevoCpe"]."<br/>";
                        $observacionServicio .= "Serie Cpe: ".$arrayParametros["serieNuevoCpe"]."<br/>";
                        $observacionServicio .= "Modelo Cpe: ".$arrayParametros["modeloNuevoCpe"]."<br/>";
                        $observacionServicio .= "Mac: ".$arrayParametros["macNuevoCpe"]."<br/>";
                        $observacionServicio .= "Versi&oacute;n IOS Cpe: ".$arrayParametros["iosNuevoCpe"]."<br/>";
                        $observacionServicio .= "Gestion Remota Cpe: ".$arrayParametros["gestionNuevoCpe"]."<br/>";
                        $observacionServicio .= "Administra Cpe: ".$arrayParametros["administraNuevoCpe"]."<br/><br/>";

                        if(!$boolEsPseudoPe)
                        {
                            $observacionServicio .= "Transciever <br/>";
                            $observacionServicio .= "Serie Transciever: ".$arrayParametros["serieNuevoTransciever"]."<br/>";
                            $observacionServicio .= "Modelo Transciever: ".$arrayParametros["modeloNuevoTransciever"]."<br/><br/>";

                            $observacionServicio .= "Roseta <br/>";
                            $observacionServicio .= "C&oacute;digo Roseta: ".$arrayParametros["nombreNuevoRoseta"]."<br/>";
                        }
                    }
                    //existe
                    else
                    {
                        if($objServicio->getProductoId()->getGrupo() == "DATACENTER" ||
                            $objServicio->getProductoId()->getGrupo() == "INTERNET Y DATOS")
                        {
                            $arrayParametros["propiedadNuevoCpe"]   = $arrayParametros["propiedadExisteCpe"];
                            $arrayParametros["nombreNuevoCpe"]      = $arrayParametros["nombreExisteCpe"];
                            $arrayParametros["serieNuevoCpe"]       = $arrayParametros["serieExisteCpe"];
                            $arrayParametros["modeloNuevoCpe"]      = $arrayParametros["modeloExisteCpe"];
                            $arrayParametros["macNuevoCpe"]         = $arrayParametros["macExisteCpe"];
                            $arrayParametros["iosNuevoCpe"]         = $arrayParametros["iosExisteCpe"];
                            $arrayParametros["gestionNuevoCpe"]     = $arrayParametros["gestionExisteCpe"];
                            $arrayParametros["administraNuevoCpe"]  = $arrayParametros["administraExisteCpe"];
                        }

                        $objServProdCaractSDWAN   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                            'SDWAN',
                                                                                                            $objServicio->getProductoId()
                                                                                                            );
                        if (is_object($objServProdCaractSDWAN))
                        {
                            $arrayParametros["iosNuevoCpe"] = '6.2';
                            $arrayParametros["gestionNuevoCpe"] = 'SI';
                            $arrayParametros["administraNuevoCpe"] = 'TN-CONF Y CLIENTE-CONF';
                        }

                        //Cpe Existente
                        if((isset($arrayParametros['booleanEsSDWAN'])) 
                        && isset($arrayParametros['booleanEsMigracionSDWAN']) 
                        && $arrayParametros['booleanEsSDWAN'] === "true" 
                        && $arrayParametros['booleanEsMigracionSDWAN']=== "true")
                        {
                            $observacionServicio .= "Cpe Existente de Punto<br/>";
                            $observacionServicio .= "Propiedad de: ".$arrayParametros["propiedadExisteCpe"]."<br/>";
                            $observacionServicio .= "Nombre Cpe: ".$arrayParametros["nombreExisteCpe"]."<br/>";
                            $observacionServicio .= "Serie Cpe: ".$arrayParametros["serieExisteCpe"]."<br/>";
                            $observacionServicio .= "Modelo Cpe: ".$arrayParametros["modeloExisteCpe"]."<br/>";
                            $observacionServicio .= "Mac Cpe: ".$arrayParametros["macExisteCpe"]."<br/>";
                            $observacionServicio .= "Versi&oacute;n IOS Cpe: ".$arrayParametros["iosExisteCpe"]."<br/>";
                            $observacionServicio .= "Gestion Remota Cpe: ".$arrayParametros["gestionExisteCpe"]."<br/>";
                            $observacionServicio .= "Administra Cpe: ".$arrayParametros["administraExisteCpe"]."<br/>";
                        }
                        else
                        {
                            $observacionServicio .= "Cpe Existente de Punto<br/>";
                            $observacionServicio .= "Propiedad de: ".$arrayParametros["propiedadNuevoCpe"]."<br/>";
                            $observacionServicio .= "Nombre Cpe: ".$arrayParametros["nombreNuevoCpe"]."<br/>";
                            $observacionServicio .= "Serie Cpe: ".$arrayParametros["serieNuevoCpe"]."<br/>";
                            $observacionServicio .= "Modelo Cpe: ".$arrayParametros["modeloNuevoCpe"]."<br/>";
                            $observacionServicio .= "Mac Cpe: ".$arrayParametros["macNuevoCpe"]."<br/>";
                            $observacionServicio .= "Versi&oacute;n IOS Cpe: ".$arrayParametros["iosNuevoCpe"]."<br/>";
                            $observacionServicio .= "Gestion Remota Cpe: ".$arrayParametros["gestionNuevoCpe"]."<br/>";
                            $observacionServicio .= "Administra Cpe: ".$arrayParametros["administraNuevoCpe"]."<br/>";
                        }
                    }

                    //Historial de los dispositivos en nodo.
                    if (isset($arrayParametros['arrayDipositivosNodo']) && !empty($arrayParametros['arrayDipositivosNodo']))
                    {
                        $observacionServicio .= "<br/><b>Dispositivos en Nodo</b>: <br/>";
                        foreach ($arrayParametros['arrayDipositivosNodo'] as $arrayDipositivoNodo)
                        {
                            $observacionServicio .= "Serie: " .$arrayDipositivoNodo["serieElemento"] ."<br/>";
                            $observacionServicio .= "Modelo: ".$arrayDipositivoNodo["modeloElemento"]."<br/><br/>";
                        }
                    }

                    $this->servicioGeneral->ingresarServicioHistorial($objServicio, "EnVerificacion", $observacionServicio,
                                                                      $arrayParametros['usrCreacion'], $arrayParametros['ipCreacion']);

                    $this->servicioGeneral->ingresarServicioHistorial($objServicio, "EnPruebas", "",
                                                                      $arrayParametros['usrCreacion'], $arrayParametros['ipCreacion']);
                }

                //Si es Camara SafeCity se genera usuario,clave y url para que sean configurados en el monitoreo
                //Si es Wifi SafeCity se reasigna la tarea a Radio
                if( ($arrayParametros["banderaCamaraSafecity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
                     || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
                    && $arrayParametros["booleanReasignarTareaGpon"])
                {
                    $arrayParametosTareaSafecity["objServicio"]       = $objServicio;
                    $arrayParametosTareaSafecity["intIdPersonaCamara"] = $intIdPersonaCamara;
                    $arrayParametosTareaSafecity["intIdPerEmpRolCamara"] = $intIdPerEmpRolCamara;
                    $arrayParametosTareaSafecity["strCodEmpresa"]     = $arrayParametros['idEmpresa'];
                    $arrayParametosTareaSafecity["strPrefijoEmpresa"] = $arrayParametros['prefijoEmpresa'];
                    $arrayParametosTareaSafecity["strUsrCreacion"]    = $arrayParametros['usrCreacion'];
                    $arrayParametosTareaSafecity["strIpCreacion"]     = $arrayParametros['ipCreacion'];
                    $this->servicioGeneral->reasignarTareaSafeCityGponTN($arrayParametosTareaSafecity);
                }
                //verificar servicio adicionales safecity
                if( ($arrayParametros["banderaCamaraSafecity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
                     || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
                    && ( (!empty($arrayParametros['idOnt']) && !empty($arrayParametros['puertosOnt']))
                         || !empty($arrayParametros['idInterfaceOntEleReq'])
                         || !empty($arrayParametros['idInterfaceOntSwPoe']) )
                  )
                {
                    //Se activa la IP del servicio que previamente fue reservada
                    $objInfoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                         ->findOneBy(array("servicioId" => $objServicio->getId()));

                    if(is_object($objInfoIp))
                    {
                        $objInfoIp->setEstado("Activo");
                        $this->emInfraestructura->persist($objInfoIp);
                        $this->emInfraestructura->flush();
                    }
                    //Se cambia a estado connect la interfaz del ONT donde se conecta.
                    if(!$arrayParametros["booleanActivarOnt"]
                       && (!empty($arrayParametros['idInterfaceOntSwPoe']) || !empty($arrayParametros['idInterfaceOntEleReq'])))
                    {
                        $intIdIntOnt = !empty($arrayParametros['idInterfaceOntSwPoe']) ? $arrayParametros['idInterfaceOntSwPoe']
                                       : $arrayParametros['idInterfaceOntEleReq'];
                        $objInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                                    ->find($intIdIntOnt);
                    }
                    elseif(!empty($arrayParametros['idOnt']) && !empty($arrayParametros['puertosOnt']))
                    {
                        $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($arrayParametros['idOnt']);
                        if(is_object($objElemento))
                        {
                            $objInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                         ->findOneBy(array("elementoId"              => $objElemento,
                                                                           "nombreInterfaceElemento" => $arrayParametros['puertosOnt']));
                        }
                    }
                    //verificar si existe el objeto
                    if(is_object($objInterfaceElemento))
                    {
                        $objInterfaceElemento->setEstado("connected");
                        $this->emInfraestructura->persist($objInterfaceElemento);
                        $this->emInfraestructura->flush();
                        //Se registra el puerto del ONT como caracteristica del servicio CAMARA
                        if($arrayParametros["banderaCamaraVpnSafecity"] != "S")
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                           $objServicio->getProductoId(),
                                                                                           "PUERTO_ONT",
                                                                                           $objInterfaceElemento->getNombreInterfaceElemento(),
                                                                                           $arrayParametros["usrCreacion"]);
                        }
                    }
                }

                //Si el servicio pasa a estado EnPruebas o Activo se verifica si no tiene login aux para poder crearlo
                if($objServicio->getEstado()=="EnPruebas" || $objServicio->getEstado()=="Activo")
                {
                    //Generacion de Login Auxiliar al Servicio            
                    $this->servicioGeneral->generarLoginAuxiliar($objServicio->getId());
                }
                
                //Generar informacion en enlace BACKUP referencia de que Servicio Principal este es creado
                if(is_object($objServicioTecnico) && $objServicioTecnico->getTipoEnlace() == 'BACKUP')
                {
                    $objServCaractPrincipal = $this->servicioGeneral
                                                   ->getServicioProductoCaracteristica($objServicio,'ES_BACKUP',$objServicio->getProductoId());
                    
                    if(is_object($objServCaractPrincipal))
                    {
                        $objServicioPrincipal = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                     ->find($objServCaractPrincipal->getValor());
                        
                        if(is_object($objServicioPrincipal))
                        {
                            if($objServicioPrincipal->getLoginAux())
                            {
                                $observacionServicio = "Se creó Servicio <b>BACKUP</b> referente a Servicio Principal : <b>".
                                                       $objServicioPrincipal->getLoginAux().'</b>';
                                $this->servicioGeneral->ingresarServicioHistorial($objServicio, 
                                                                                  $objServicio->getEstado(), 
                                                                                  $observacionServicio, 
                                                                                  $arrayParametros['usrCreacion'], 
                                                                                  $arrayParametros['ipCreacion']);
                            }
                        }
                    }
                }
                
                //valido para que finalice la solicitud
                $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                      ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD NODO WIFI',
                                                                                      'estado' => 'Activo'));
                
                //consultamos el punto
                $objDetalleElemento = $this->emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                                                        ->findOneBy(array(  'detalleValor'  => $objServicio->getPuntoId()->getId(),
                                                                            'detalleNombre' => 'ID_PUNTO',
                                                                            'estado'        => 'Activo'));
                if($objDetalleElemento)
                {
                    $arraySolicitudesWifi = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                            ->findBy(array(
                                                'elementoId'        => $objDetalleElemento->getElementoId(),
                                                'tipoSolicitudId'   => $objTipoSolicitud->getId()
                                            ));
                }

                if (count($arraySolicitudesWifi)>=1)
                {
                    foreach ($arraySolicitudesWifi as $objSolicitudWifi)
                    {
                        if ($objSolicitudWifi->getEstado() != 'Finalizada' )
                        {
                            $intIdServicio = $objSolicitudWifi->getServicioId();
                            if($intIdServicio)
                            {
                                $estadoSolicitud = 'PreFactibilidad';
                            }
                            else
                            {
                                $estadoSolicitud = 'Finalizada';
                            }

                            //actualizo la solicitud
                            $objSolicitudWifi->setEstado($estadoSolicitud);
                            $this->emComercial->persist($objSolicitudWifi);
                            $this->emComercial->flush();

                            //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                            $objDetalleSolHist = new InfoDetalleSolHist();
                            $objDetalleSolHist->setDetalleSolicitudId($objSolicitudWifi);
                            $objDetalleSolHist->setIpCreacion($arrayParametros['ipCreacion']);
                            $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                            $objDetalleSolHist->setUsrCreacion($arrayParametros['usrCreacion']);
                            $objDetalleSolHist->setEstado($estadoSolicitud);
                            $objDetalleSolHist->setObservacion('Se cambio el estado porque se activó el L3 del nodo wifi.');
                            $this->emComercial->persist($objDetalleSolHist);
                            $this->emComercial->flush();

                            $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                   ->find($objSolicitudWifi->getElementoId());
                            $objElemento->setObservacion('Nodo wifi aprobada en la activacion de servicio L3MPLS' );
                            $objElemento->setEstado("Activo");
                            $this->emInfraestructura->persist($objElemento);
                            $this->emInfraestructura->flush();


                            //realizo el enlace del cassette al router
                            $objTipoMedio = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                ->find($objServicioTecnico->getUltimaMillaId());
                            //objeto interface elemento cliente
                            $interfaceElementoCliente  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                ->find($arrayParametros['interfaceCpeExistente']);
                            //validacion para WIFI por UTP - javera
                            if($objServicioTecnico->getInterfaceElementoConectorId())
                            {
                                $interfaceElementoConector = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                    ->find($objServicioTecnico->getInterfaceElementoConectorId());
                            }
                            else
                            {
                                $interfaceElementoConector = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                    ->find($objServicioTecnico->getInterfaceElementoId());
                            }

                            //Validar que objeto de interface elemento cliente exista ( ligado a un CPE existente, en caso de usar misma UM )
                            if(is_object($interfaceElementoCliente))
                            {
                                //consulto el enlace
                                $objInfoEnlace = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                    ->findBy(array('interfaceElementoFinId' => $interfaceElementoCliente->getId(),
                                        'estado'                 => 'Activo'));
                                if(!$objInfoEnlace)
                                {

                                    //grabar enlace nuevo - puerto del Splitter con puerto del ont
                                    $enlace = new InfoEnlace();
                                    $enlace->setInterfaceElementoIniId($interfaceElementoConector);
                                    $enlace->setInterfaceElementoFinId($interfaceElementoCliente);
                                    $enlace->setTipoMedioId($objTipoMedio);
                                    $enlace->setTipoEnlace("PRINCIPAL");
                                    $enlace->setEstado("Activo");
                                    $enlace->setUsrCreacion($arrayParametros['usrCreacion']);
                                    $enlace->setFeCreacion(new \DateTime('now'));
                                    $enlace->setIpCreacion($arrayParametros['ipCreacion']);
                                    $this->emInfraestructura->persist($enlace);
                                    $this->emInfraestructura->flush();

                                    $interfaceElementoCliente->setEstado("connected");
                                    $this->emInfraestructura->persist($interfaceElementoCliente);
                                    $this->emInfraestructura->flush();

                                    $interfaceElementoConector->setEstado("connected");
                                    $this->emInfraestructura->persist($interfaceElementoConector);
                                    $this->emInfraestructura->flush();
                                }
                                if(!$objServicioTecnico->getInterfaceElementoClienteId())
                                {
                                    $objServicioTecnico->setInterfaceElementoClienteId($interfaceElementoCliente->getId());
                                    $this->emComercial->persist($objServicioTecnico);
                                    $this->emComercial->flush();
                                }
                            }
                        }
                    }
                }

                //*DECLARACION DE COMMITS*/
                if(($arrayParametros["banderaCamaraSafecity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
                    || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
                   && $this->emSoporte->getConnection()->isTransactionActive())
                {
                    $this->emSoporte->getConnection()->commit();
                }

                if ($this->emInfraestructura->getConnection()->isTransactionActive())
                {
                    $this->emInfraestructura->getConnection()->commit();
                }

                if ($this->emComercial->getConnection()->isTransactionActive())
                {
                    $this->emComercial->getConnection()->commit();
                }

                if ($this->emNaf->getConnection()->isTransactionActive())
                {
                    $this->emNaf->getConnection()->commit();
                }
            }
            //Si es Camara GPON
            if( ($arrayParametros["banderaCamaraSafecity"] == "S" || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
            && $arrayParametros["booleanReasignarTareaGpon"])
            {
                
                $objParametroCab = $this->emGeneral->getRepository("schemaBundle:AdmiParametroCab")
                                                   ->findOneBy(array("nombreParametro" => "PARAMETROS PROYECTO GPON SAFECITY",
                                                                      "estado"          => "Activo"));
                if(is_object($objParametroCab))
                {
                    //Verificamos si se requiere finalizar la tarea
                    $objEjecutaTareaAutoDet = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                              ->findOneBy(array("parametroId" => $objParametroCab->getId(),
                                                                                "descripcion" => "ANALITICA_TAREA_AUTOMATICA",
                                                                                "estado"      => "Activo"));
                    //obtengo el id detalle de la tarea
                    $objCaractIdDetalle = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                        'ID_DETALLE_TAREA_INSTALACION',$objServicio->getProductoId());
                    if((!is_object($objEjecutaTareaAutoDet) || $objEjecutaTareaAutoDet->getValor1() !== 'S')
                    && is_object($objCaractIdDetalle))
                    {
                        //obtengo el info detalle
                        $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($objCaractIdDetalle->getValor());
                        if(is_object($objInfoDetalle))
                        {
                            //Se finaliza la tarea
                            $arrayParametrosFinTarea = array(
                                'idEmpresa'               => $arrayParametros["idEmpresa"],
                                'prefijoEmpresa'          => $arrayParametros["prefijoEmpresa"],
                                'idDetalle'               => $objInfoDetalle->getId(),
                                'idAsignado'              => null,
                                'observacion'             => 'Se finaliza tarea de forma automatica.',
                                'usrCreacion'             => $arrayParametros["usrCreacion"],
                                'ipCreacion'              => $arrayParametros["ipCreacion"],
                                'accionTarea'             => 'finalizada'
                            );
                            $this->serviceSoporte->finalizarTarea($arrayParametrosFinTarea);
                        } 
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            if(($arrayParametros["banderaCamaraSafecity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
                || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
                && $this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->rollback();
            }
          
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
          
            if ($this->emNaf->getConnection()->isTransactionActive())
            {
                $this->emNaf->getConnection()->rollback();
            }                       
                        
            $this->serviceUtil->insertError('Telcos+', 
                                            'InfoActivarPuertoService->activarClienteTN', 
                                            $e->getMessage(),
                                            $arrayParametros['usrCreacion'], 
                                            $arrayParametros['ipCreacion']
                                           );
            if ($strStatusValidaBackup != "OK" && $strTipoOrden == 'T')
            {
                $strMensaje = $e->getMessage();
            }
            else
            {
                $strMensaje = $this->serviceUtil->getMensajeException($e);
            }
            
            $strStatus  = "ERROR";
        }
        //*----------------------------------------------------------------------*/
        
        $this->emInfraestructura->getConnection()->close();
        $this->emComercial->getConnection()->close();
        $this->emNaf->getConnection()->close();
        //*----------------------------------------------------------------------*/
        
        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal[] = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
    }

    /**
     * Método para activar un producto Datos FWA.
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.0 12-11-2019
     *
     * @param array $arrayParametro
     * @return array
     * @throws \Exception
     */
    public function activarDatosFWA($arrayParametro)
    {
        $arrayRespuesta     = array();
        $objServicio        = $arrayParametro['objServicio'];
        $objProducto        = $arrayParametro['objProducto'];
        $strUsrCreacion     = $arrayParametro['strUsrCreacion'];
        $strIpCreacion      = $arrayParametro['strIpCreacion'];
        $strIpLoopBack      = $arrayParametro['strIpLoopBack'];
        $strIpWanTelefonica = $arrayParametro['strIpWanTelefonica'];
        $strLoginFWA        = $arrayParametro['strLoginFWA'];

        $strRegionServicio      = "";
        if(is_object($objServicio->getPuntoId()))
        {
            $intIdOficinaServicio   = is_object($objServicio->getPuntoId()->getPuntoCoberturaId()) ? 
                                                $objServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId() : 0;
            $objOficinaServicio     = $this->emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                                                        ->find($intIdOficinaServicio);
            if(is_object($objOficinaServicio))
            {
                $objCantonServicio = $this->emComercial->getRepository("schemaBundle:AdmiCanton")
                                                       ->find($objOficinaServicio->getCantonId());
                if(is_object($objCantonServicio))
                {
                    $strRegionServicio = $objCantonServicio->getRegion();
                }
            }
        }
        //Grabar la ip de loopback
        $arrayParametroAsignaIp = array('objServicio'           => $objServicio,
                                        'strUsrCreacion'        => $strUsrCreacion,
                                        'strIpCreacion'         => $strIpCreacion,
                                        'strNombreParametro'    => 'IP_LOOPBACK_FWA',
                                        'strIpLoopback'         => $strIpLoopBack,
                                        'strValor1'             => $strRegionServicio);
        $arrayGrabarServicioIp  = $this->recursosRed->grabarIpFWA($arrayParametroAsignaIp);
        if(empty($arrayGrabarServicioIp) || $arrayGrabarServicioIp['status'] !== 'OK')
        {
            throw new \Exception($arrayGrabarServicioIp['mensaje']);
        }
        else
        {
            //Grabar característica del producto.
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                           $objProducto,
                                                                           "IP_LOOPBACK",
                                                                           $strIpLoopBack,
                                                                           $strUsrCreacion);

            //Grabo característica de Ip Wan Telefónica
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                           $objProducto,
                                                                           "IP_WAN_TELEFONICA",
                                                                           $strIpWanTelefonica,
                                                                           $strUsrCreacion);

            //Grabo característica de Login FWA
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                           $objProducto,
                                                                           "LOGIN_FWA",
                                                                           $strLoginFWA,
                                                                           $strUsrCreacion);

            //Generación de Login Auxiliar del Servicio
            $this->servicioGeneral->generarLoginAuxiliar($objServicio->getId());
        }
        $arrayRespuesta = array('status'    => 'OK',
                                'mensaje'   => array('status'   => 'OK',
                                                     'mensaje'  => 'Activación lógica exitosa.'));
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que sirve para activar el servicio por tipo de Orden Nueva
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 11-12-2015
     * 
     * Se agrega funcionalidad para grabar elementos de clientes y se crean los enlaces de cliente
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 6-04-2016
     * 
     * Se agrega validación de capacidades y se agrega que si el cpe es propiedad de Telconet, solo ahi se descargue del naf
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.2 2-05-2016
     * 
     * Se agrega el cambio de bw en el concentrador, al pasar el estado activo del extremo
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.3 23-05-2016
     *
     * Se agregan parametros para activar servicio um radio para la empresa TN
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 07-06-2016
     *
     * Se omite al Transceiver como enlace cuando la UM es Radio
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.5 2016-07-01
     * 
     * Se actualice para que realice los enlaces de manera correcta al momento de activar un servicio:
     * 
     *  - FIBRA - RUTA
     *        -> CASSETTE - ROSETA - TRANSCIEVER - CPE
     *  - FIBRA - DIRECTO
     *        -> SWITCH - ROSETA - TRANSCIEVER - CPE
     *  - UTP 
     *        -> SWITCH - CPE
     *  - RADIO 
     *        -> SWITCH - RADIO - CPE
     * 
     * @author Modificado: Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.6 2017-07-21
     * 
     * Se agrega validacion para que guarde la mac del cpe en la interface del mismo y no en el detalle del elemento
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.7 04-08-2016
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.8 2016-10-19 - Se incluye boque try catch para menejar errores y retornarlos al método que lo invoca
     *                           Se remueven variables no usadas
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.9 31-10-2016 Se agrega llamado a funcion que actualiza las capacidades del concentrador dado la cancelacion de su extremo
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.0 10-11-2016 Se agrega validación para que solo en servicios con enlaces PRINCIPAL realicen recalculo de BW en Concentrador
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.1 14-11-2016 Se invoca llamado a metodo de control de excepciones para manejar mensaje de la misma correctamente
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.2 30-11-2016 Se agrega validación para que solo se puedan activar servicios con RADIOS de cliente ya existentes en telcos
     *                         (Proyecto CNE)
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.3 25-07-2017 Se agrega validacion de existencia objeto con informacion de Servicio Tecnico del Cpe existente para que pueda
     *                         ser heredado por el servicio a ser activado
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.4 28-08-2017 Se agrega el tipo de orden "T" para que se ingrese la información de los elementos roseta, transceiver, etc.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 2.5 21-01-2018 Se agrega el tipo de orden "C" para que se ingrese la información de los elementos roseta, transceiver, etc.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.6 28-08-2017 Se agrega programación para gestionar traslados TN
     * @since 2.5
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 2.6 22-10-2018 Se agrega validación de vlans cuando sea el producto L3MPLS CANAL DE TELEFONIA referente al flujo de netvoice TN
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 2.7 22-10-2018 Se elimina la validación agregada en la versión 2.6 ya que esta se realizará al asignar recursos de red
     * 
     * @author John Vera <javera@telconet.ec>
     * @since 7-11-2018
     * @version 2.8 - Se agrega validación para que soporte la activación para productos de LINEAS TELEFONIA FIJA
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @since 30-01-2019
     * @version 2.9 - Se realizan ajustes para grabar la trazabilidad de activaciones que usan el mismo CPE
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.0  20-03-2019 - Se envia la clase_servicio: INTERNET-HSRP y DATOS-HSRP para las ordenes de servicio que tienen definido
     *                            el esquema PE-HSRP
     * @since 2.9
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.1  15-04-2019 - Se agrega lógica que permite validar el escenario de los SW de Telefónica(anillo  V-R1 y V-R2), la idea es mapear
     *                            estos valores por el valor real del anillo que para el caso de telefónica es 0
     * @since 3.0
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.2  19-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                            enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     * @since 3.1
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 3.3  23-07-2019 - Se valida los tipo de enlaces para los productos SDWAN (PRNCIPAL,PRINCIPAL1....)
     *                            Se valida que se realice la extración(Substring) cuando el tipo de enlace no sea null
     * @since 3.2
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 3.4  05-08-2019 - Se agrega validaciones para el producto L3MPLS SDWAN, para que se comprote igual a L3MPLS.
     * 
     * @since 3.3
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.5 01-06-2020 - Se agrega el id del servicio a la url 'configSW' del ws de networking para la validación del BW
     *
     * @since 3.4
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.6 18-09-2020 - Se agrega validación para el producto Directlink MPLS para que no entre a validar los concentradores. 
     *                           Se genera la tarea interna para el responsable de la activación del producto FastCloud
     *
     * @since 3.5
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.7 06-11-2020 - Se agrega validación de existencia de interfaces relacionadas. 
     *
     * @since 3.6
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.8 09-12-2020 - Se ingresa la solicitud de RPA licenciamiento para los equipos que requieran licencia.
     *
     * @since 3.7
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.9 03-05-2021 - Se realizan ajustes para poder activar equipos del flujo ZeroTouch.
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 4.0 11-05-2021 - Se realiza la carga y descarga de los activos del cliente.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 5.0 01-10-2021 - Se cambia parametros que se envian al método actualizarCapacidadesEnConcentrador
     * para que guarde el usuario en el log
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 6.0 03-12-2021 - Se agrega validación para cuando es Radio y es misma última milla. Si pasa validación
     *                           obtiene mac de la radio existente
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.1 23-03-2022 - Se verifica las características de monitoreo para el servicio principal DATOS SAFECITY en la red GPON_MPLS.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.2 06-06-2022 - Se agrega parámetros para el envió de notificación del password de la cámara safecity.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.3 15-06-2022 - Se valida a mayúscula la serie del elemento para los servicios safecity.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.4 01-08-2022 - Se agrega las validaciones para las activaciones de los servicios SAFE ANALYTICS CAM de las cámaras safecity.
     *
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 6.5 20-09-2022  Se registra la caracteristica FORMATO_RESOLUCION TIPO_CAMARA y POSICION_CAMARA
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 6.6 21-11-2022  Se registra la caracteristica ip controladora para servicio wifi gpon
     * 
     * @author Jenniffer Mujica <jmujica@telconet.ec>
     * @version 6.7 17-02-2023  Se agrega validación de característica t-con-admi para los servicios wifi, se valida elemento olt zte
     * 
     * @author Joel Muñoz M <jrmunoz@telconet.ec>
     * @version 6.8 13-03-2023  Se agrega excepción a llamado a servicio NW cuando es una migración SDWAN
     *
     * @param $arrayParametros [$intIdServicio, $strSerieNuevoCpe, $strModeloNuevoCpe, $strMacNuevoCpe, $strPropiedadNuevoCpe,
     *                          $strPropiedadNuevoCpe, $strIosNuevoCpe, $strGestionNuevoCpe, $strAdministraNuevoCpe]
     */
    public function activarServicioPorNuevaTN($arrayParametros)
    {
        try
        {
            //datos radio
            $strSerieNuevoRadio       = $arrayParametros['serieNuevoRadio'];
            $strModeloNuevoRadio      = $arrayParametros['modeloNuevoRadio'];
            $strMacNuevoRadio         = $arrayParametros['macNuevoRadio'];
            $strPropiedadNuevoRadio   = $arrayParametros['propiedadNuevoRadio'];
            $strIosNuevoRadio         = $arrayParametros['iosNuevoRadio'];
            $strGestionNuevoRadio     = $arrayParametros['gestionNuevoRadio'];
            $strAdministraNuevoRadio  = $arrayParametros['administraNuevoRadio'];
            $strEsExistente           = $arrayParametros['strEsExistente'];
            $intInterfaceEleClie      = $arrayParametros['intInterfaceEleClie'];
            $arrayZeroTouch           = $arrayParametros['arrayZeroTouch'];

            //datos cpe        
            $strSerieNuevoCpe       = $arrayParametros['serieNuevoCpe'];
            $strModeloNuevoCpe      = $arrayParametros['modeloNuevoCpe'];
            $strMacNuevoCpe         = $arrayParametros['macNuevoCpe'];
            $strPropiedadNuevoCpe   = $arrayParametros['propiedadNuevoCpe'];
            $strIosNuevoCpe         = $arrayParametros['iosNuevoCpe'];
            $strGestionNuevoCpe     = $arrayParametros['gestionNuevoCpe'];
            $strAdministraNuevoCpe  = $arrayParametros['administraNuevoCpe'];
            $strFlagCpe             = $arrayParametros['flagCpe'];
            $intServicioIdExisteCpe = $arrayParametros['idServicioExisteCpe'];
            $strUltimaMilla         = $arrayParametros['ultimaMilla']; 

            //Ont Safecity
            $booleanEsServicioSafecity  = false;
            $objInterfaceElementoOnt    = null;
            $booleanActivarOnt          = $arrayParametros['booleanActivarOnt'];
            $booleanExisteSwPoeGpon     = $arrayParametros['booleanExisteSwPoeGpon'];
            $intIdInterfaceOnt          = !empty($arrayParametros['idInterfaceOntSwPoe']) ? $arrayParametros['idInterfaceOntSwPoe']
                                          : $arrayParametros['idInterfaceOntEleReq'];
            $intIdOnt                   = $arrayParametros['idOnt'];
            $strModeloOnt               = $arrayParametros['modeloOnt'];
            $strSerieOnt                = $arrayParametros['serieOnt'];
            $strMacOnt                  = $arrayParametros['macOnt'];
            $strPuertosOnt              = $arrayParametros['puertosOnt'];
            //Sw PoE Safecity
            $intIdServicioSwPoe         = $arrayParametros['idServicioSwPoe'];
            $intIdSwPoe                 = $arrayParametros['idSwPoe'];
            $strPuertosSwPoe            = $arrayParametros['puertosSwPoe'];
            //Elemento Requerido Safecity
            $intIdServicioEleReqGpon    = $arrayParametros['idServicioEleReqGpon'];
            $intIdElementoReqGpon       = $arrayParametros['idElementoReqGpon'];
            $strPuertosEleReqGpon       = $arrayParametros['puertosEleReqGpon'];
            //Camara Safecity
            $strBanderaCamaraSafecity   = $arrayParametros['banderaCamaraSafecity'];
            $strNombreNuevoCamara       = $arrayParametros['nombreNuevoCamara'];
            $strSerieNuevoCamara        = $arrayParametros['serieNuevoCamara'];
            $strModeloCamara            = $arrayParametros['modeloCamara'];
            $strMacCamara               = $arrayParametros['macCamara'];
            //Camara VPN Safecity
            $strBanderaCamaraVpnSafecity = $arrayParametros['banderaCamaraVpnSafecity'];
            //Wifi Safecity
            $strBanderaWifiSafecity     = $arrayParametros['banderaWifiSafecity'];
            $strNombreWifiSafecity      = $arrayParametros['nombreWifi'];
            $strSerieWifiSafecity       = $arrayParametros['serieWifi'];
            $strModeloWifiSafecity      = $arrayParametros['modeloWifi'];
            $strMacWifiSafecity         = $arrayParametros['macWifi'];

            //datos CPE para atar mismo CPE a varias MAC por Activacion
            $intIdInterfaceCpeExistente     = $arrayParametros['interfaceCpeExistente'];
            $strMacCpeExistente             = $arrayParametros['macCpeExistente'];

            //datos transciever
            $strSerieNuevoTransciever   = $arrayParametros['serieNuevoTransciever'];
            $strModeloNuevoTransciever  = $arrayParametros['modeloNuevoTransciever'];

            //datos roseta
            $strCodigoNuevaRoseta   = $arrayParametros['nombreNuevoRoseta'];

            //datos
            $intIdServicio          = $arrayParametros['idServicio'];
            $intIdEmpresa           = $arrayParametros['idEmpresa'];
            $strPrefijoEmpresa      = $arrayParametros['prefijoEmpresa'];
            $strUsrCreacion         = $arrayParametros['usrCreacion'];
            $strIpCreacion          = $arrayParametros['ipCreacion'];
            $strVlanNuevoCpe        = $arrayParametros['vlan'];
            
            //datos activación por traslado de servicios
            $strEsRadioExistente       = $arrayParametros['strEsRadioExistente'];
            $strEsCpeExistente         = $arrayParametros['strEsCpeExistente'];
            $strEsTransceiverExistente = $arrayParametros['strEsTransceiverExistente'];
            $strBanderaLineasBravco    = $arrayParametros['strBanderaLineasBravco']?$arrayParametros['strBanderaLineasBravco']:"N";

            $strDescripcionUm       = '';
            $strBanderaServProdCaract       = "N";
            $arrayParametrosAuditoria       = array();
            $objServicio                    = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objServicioTecnico             = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                   ->findOneByServicioId($objServicio->getId());
            $objInterfaceElemento           = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoId());

            $boolEsFibraRuta = false;

            $usaUmExistente  = false;
            $strStatus       = "OK";
            
            $intIdPersonaCamara = '';
            $intIdPerEmpRolCamara = '';
            if($strBanderaCamaraSafecity == "S" || $strBanderaCamaraVpnSafecity == "S")
            {
                $booleanEsServicioSafecity = true;
                $strElementoSafecity = $strNombreNuevoCamara;
                $strSerieNuevoCpe  = strtoupper($strSerieNuevoCamara);
                $strModeloNuevoCpe = $strModeloCamara;
                $strMacNuevoCpe    = $strMacCamara;
            }
            elseif($strBanderaWifiSafecity == "S")
            {
                $booleanEsServicioSafecity = true;
                $strElementoSafecity = $strNombreWifiSafecity;
                $strSerieNuevoCpe  = strtoupper($strSerieWifiSafecity);
                $strModeloNuevoCpe = $strModeloWifiSafecity;
                $strMacNuevoCpe    = $strMacWifiSafecity;
            }

            //Se obtiene caracteristica si servicio se activa con ultima milla existente
            $objServProdCaractMismaUM   = $this->servicioGeneral
                                               ->getServicioProductoCaracteristica($objServicio,
                                                                                   'SERVICIO_MISMA_ULTIMA_MILLA',
                                                                                   $objServicio->getProductoId());

            if($objServProdCaractMismaUM)
            {
                $usaUmExistente  = true;
            }       
            else
            {
                $arrayParametros['idServicio']  = $objServicio->getId();
                $arrayParametros['elementoId']  = $objServicioTecnico->getElementoId();
                $arrayParametros['interfaceId'] = $objServicioTecnico->getInterfaceElementoId();

                //Se determina si servicio proviene de una misma Ultima milla siempre y cuando pertenezca al mismo punto
                $boolTieneMismaUM = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->tieneMismaUltimaMilla($arrayParametros);

                if($boolTieneMismaUM)
                {
                    $usaUmExistente = true;
                }
            }

            //no usar ultima milla para camara vpn
            if($strBanderaCamaraVpnSafecity == "S")
            {
                $usaUmExistente = false;
            }

            //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
            $objServProdCaractTipoFact = $this->servicioGeneral
                                              ->getServicioProductoCaracteristica($objServicio,'TIPO_FACTIBILIDAD',$objServicio->getProductoId());

            if($strUltimaMilla == "Fibra Optica")
            {
                if($objServProdCaractTipoFact)
                {
                    if($objServProdCaractTipoFact->getValor() == 'RUTA')
                    {
                        $boolEsFibraRuta = true;
                    }
                }
                else
                { 
                    //Si tiene data de GIS hace referencia a servicio de Fibra Directa
                    if($objServicioTecnico->getInterfaceElementoConectorId())
                    {
                        $boolEsFibraRuta = true;
                    }
                }
            }

            if ( $strUltimaMilla == "Fibra Optica")
            {                    
                //Si la caracteristica no existe ( SERVICIOS VIEJOS )  o si la tipo de ENLACE es Fibra/RUTA se obtiene la interface del
                //cassette como interface conector a enlazar con la roseta a crear
                if( $boolEsFibraRuta )
                {                
                    $objInterfaceElementoConector   = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                           ->find($objServicioTecnico->getInterfaceElementoConectorId());
                }
                else //Cuando se indica que es enlace DIRECTO se obtiene la interface del switch como interface conector para enlazar con la roseta
                {
                    $objInterfaceElementoConector = $objInterfaceElemento;
                }

                $strDescripcionUm = '_fib';
            }
            else if ( $strUltimaMilla == "Radio" )
            {
                $objInterfaceElementoConector = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                     ->findOneBy(array("elementoId"              => $objServicioTecnico->getElementoConectorId(),
                                                                       "nombreInterfaceElemento" => "esp1",
                                                                       "estado"                  => "connected"));
                if (!$objInterfaceElementoConector)
                {
                    $objInterfaceElementoConector = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                         ->findOneBy(array("elementoId"              => $objServicioTecnico->getElementoConectorId(),
                                                                           "nombreInterfaceElemento" => "esp1",
                                                                           "estado"                  => "not connect"));
                    //eliminar enlace a switch anterior
                    $objInterfaceElementoConector->setEstado("connected");
                    $this->emInfraestructura->persist($objInterfaceElementoConector);
                    $this->emInfraestructura->flush();
                }
                $strDescripcionUm = '_rad';
            }
            else if ( $strUltimaMilla == "UTP" )
            {
                $strDescripcionUm = '_utp';
                $objInterfaceElementoConector = $objInterfaceElemento;
            }

            $objUltimaMilla         = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                              ->find($objServicioTecnico->getUltimaMillaId());

            $objElemento            = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($objServicioTecnico->getElementoId());
            $objProducto            = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($arrayParametros['idProducto']); 

            //Se obtiene las capacidades de todos los servicios vinculados al sw
            $arrayCapacidades = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                        ->getResultadoCapacidadesPorInterface($objInterfaceElemento->getId());


            $arrayPeticiones    = array();           
            
            if($objServicio->getdescripcionpresentafactura() == 'CANAL TELEFONIA')
            {
                $arrayPeticiones['servicio']    = 'NETVOICE-L3MPLS';      
            }
            elseif($objProducto->getDescripcionProducto() == 'DIRECTLINK MPLS')
            {
                $arrayPeticiones['servicio']    = 'DIRECTLINK-L3MPLS';      
            }
            else
            {             
                $arrayPeticiones['servicio']     = $objProducto->getNombreTecnico();
            }

            //se verifica si el servicio safecity
            if($booleanEsServicioSafecity)
            {
                //verificar si el equipo esta asignado
                $arrayVerificarActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                        ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                        'intIdPersona'   => (!isset($arrayPeticiones['idTecnicoEncargado']) ? 
                                                                                    $arrayPeticiones['idTecnicoEncargado'] : null),
                                                        'strNumeroSerie' => $strSerieNuevoCpe,
                                                        'booleanRedGponMpls' => true));
                if(!$arrayVerificarActivo['status'])
                {
                    $strStatus  = "ERROR";
                    $strMensaje = "DISPOSITIVOS CLIENTE: No se encontró el equipo asignado con serie del elemento $strSerieNuevoCpe.";
                }
                //verificar si no esta ingresado el tecnico
                if(!isset($arrayParametros['idTecnicoEncargado']) || empty($arrayParametros['idTecnicoEncargado']))
                {
                    $arrayParametros['idTecnicoEncargado'] = $arrayVerificarActivo["result"][0]['idPersona'];
                }
                $intIdPersonaCamara   = $arrayVerificarActivo["result"][0]['idPersona'];
                $intIdPerEmpRolCamara = $arrayVerificarActivo["result"][0]['idPersonaRol'];
                //validar modelo
                $objModeloElementoCpe = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                          ->findOneBy(array("nombreModeloElemento"  => $strModeloNuevoCpe,
                                                            "estado"                => "Activo"));
                if(is_object($objModeloElementoCpe))
                {
                    $strParTipoElemento = "MAPEO TIPOS ELEMENTOS CAMARA";
                    if($strBanderaWifiSafecity == "S")
                    {
                        $strParTipoElemento = "MAPEO TIPOS ELEMENTOS AP";
                    }
                    //verificar tipo elemento
                    $arrayVerificarTipoElemento = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get("PARAMETROS PROYECTO GPON SAFECITY",
                                                                            'INFRAESTRUCTURA',
                                                                            'PARAMETROS',
                                                                            $strParTipoElemento,
                                                                            $objModeloElementoCpe->getTipoElementoId()->getNombreTipoElemento(),
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            $intIdEmpresa);
                    if(empty($arrayVerificarTipoElemento))
                    {
                        $strStatus  = "ERROR";
                        $strMensaje = "El elemento con la serie $strSerieNuevoCpe y el modelo $strModeloNuevoCpe no es permitido para los ".
                                      "servicios ".$objProducto->getDescripcionProducto().".";
                    }
                }
                else
                {
                    $strStatus  = "ERROR";
                    $strMensaje = "Por favor registrar el modelo($strModeloNuevoCpe) en Telcos para el elemento con la serie $strSerieNuevoCpe.";
                }
            }

            //verificar si existe SW POE GPON
            if($strBanderaCamaraSafecity == "S" && $booleanExisteSwPoeGpon)
            {
                //obtener los modelos camaras PTZ
                $arrayModelosCamarasPtz    = array();
                $arrayParametrosModelosPtz = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                'INFRAESTRUCTURA',
                                                                                '',
                                                                                'MODELOS_CAMARAS_PTZ',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                $intIdEmpresa);
                foreach($arrayParametrosModelosPtz as $arrayDetalles)
                {
                    $arrayModelosCamarasPtz[] = $arrayDetalles['valor1'];
                }
                //verificar si la camara nueva es PTZ
                if(in_array($strModeloNuevoCpe,$arrayModelosCamarasPtz) && $booleanActivarOnt)
                {
                    //verificar si existe camara PTZ
                    $arrayParVerificarCamaraPTZ = array(
                        "objServicio"    => $objServicio,
                        "strCodEmpresa"  => $intIdEmpresa,
                        "strUsrCreacion" => $strUsrCreacion,
                        "strIpCreacion"  => $strIpCreacion,
                    );
                    $arrayVerificarCamaraPTZ = $this->servicioGeneral->verificarExisteCamaraPTZGponTN($arrayParVerificarCamaraPTZ);
                    if($arrayVerificarCamaraPTZ['status'] == "OK" && $arrayVerificarCamaraPTZ['resultado'] == "SI")
                    {
                        $strStatus  = "ERROR";
                        $strMensaje = "Solo se debe activar una cámara PTZ en el punto";
                    }
                }
                elseif( (!in_array($strModeloNuevoCpe,$arrayModelosCamarasPtz) && $booleanActivarOnt) ||
                        (in_array($strModeloNuevoCpe,$arrayModelosCamarasPtz) && !$booleanActivarOnt) )
                {
                    $strStatus  = "ERROR";
                    $strMensaje = "Solo se debe activar la cámara PTZ en el ONT, los otros modelos de cámaras se deben activar en el Switch PoE.";
                }
            }

            //Mac y Vlans por servicio activos en el puerto
            $arrayMacNueva[] = $strFlagCpe=='nuevo'?$strMacNuevoCpe:$strMacCpeExistente;
            $arrayMacVlan    = array($strVlanNuevoCpe=>$arrayMacNueva);            
            
            if($strStatus == "OK" && !$booleanEsServicioSafecity)
            {            
                //accion a ejecutar
                $arrayPeticiones['url']          = 'configSW';
                $arrayPeticiones['accion']       = 'activar';                
                $arrayPeticiones['id_servicio']  = $objServicio->getId();
                $arrayPeticiones['nombreMetodo'] = 'InfoActivarPuertoService.activarServicioPorNuevaTN';
                $arrayPeticiones['sw']           = $objElemento->getNombreElemento();
                $arrayPeticiones['macVlan']      = $arrayMacVlan;
                $arrayPeticiones['user_name']    = $strUsrCreacion;
                $arrayPeticiones['user_ip']      = $strIpCreacion;       
                $arrayPeticiones['bw_up']        = intval($arrayCapacidades['totalCapacidad1']) + intval($arrayParametros['capacidadUno']);
                $arrayPeticiones['bw_down']      = intval($arrayCapacidades['totalCapacidad2']) + intval($arrayParametros['capacidadDos']);     
                $arrayPeticiones['login_aux']    = $objServicio->getLoginAux();
                $arrayPeticiones['descripcion']  = 'cce_'.$objServicio->getLoginAux().$strDescripcionUm;
                $arrayPeticiones['pto']          = $objInterfaceElemento->getNombreInterfaceElemento();
                $arrayPeticiones['anillo']       = $arrayParametros['anillo'];

                //Se valida si el anillo no es numérico caso telefónica, de ser así se asigna el valor de anillo mapeado
                $arrayParametrosAnilloByVlan["strValorAnillo"] = $arrayParametros['anillo'];
                $arrayValorAnillo                              = $this->servicioGeneral->getValorAnilloByParametro($arrayParametrosAnilloByVlan);

                if($arrayValorAnillo["status"] === "S")
                {
                    $arrayPeticiones['anillo'] = $arrayValorAnillo['anillo'];
                }

                //validacion de capacidades
                if($arrayParametros['capacidadUno'] == null || $arrayParametros['capacidadDos'] == null)
                {
                    $strStatus = "ERROR";
                    $strMensaje = "No Existen las Capacidades, Favor Verificar!";

                    $arrayRespuestaArray[] = array('status'=>$strStatus, 'mensaje'=>$strMensaje);
                    return $arrayRespuestaArray;
                }                                

                //Ejecucion del metodo via WS para realizar la configuracion del SW
                // SE AGREGA VALIDACIÓN PARA NO HACER LLAMADA A NETWORKING SI ES UNA MIGRACION SDWAN
                if(!(isset($arrayParametros['booleanEsSDWAN']) 
                && isset($arrayParametros['booleanEsMigracionSDWAN']) 
                && $arrayParametros['booleanEsSDWAN'] === "true" 
                && $arrayParametros['booleanEsMigracionSDWAN']=== "true"))
                {
                    $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);
                }
                else
                {
                    $arrayRespuesta['status'] = 'OK';
                }

                $strStatus  = $arrayRespuesta['status'];
                $strMensaje = $arrayRespuesta['mensaje'];
            }
            
            $arrayEquipos       = array();
            $arrayCargaDescarga = array();

            if($strStatus == "OK")
            {
                if($strUltimaMilla == "Radio")
                {
                    if ($strFlagCpe == 'existe' && $usaUmExistente)
                    {
                        //Se obtiene la data tecnica del servicio del cual se esta referenciando
                        $objServicioTecnicoCpeExiste  = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                             ->findOneBy(array("servicioId" => $intServicioIdExisteCpe));
                        
                        if (is_object($objServicioTecnicoCpeExiste))
                        {
                            $objDetalleElemento  = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                               ->findOneBy(array("elementoId"   => $objServicioTecnicoCpeExiste->getElementoClienteId(),
                                                                 "detalleNombre"=> 'MAC',
                                                                 "estado"       => 'Activo'));
                            
                            if (is_object($objDetalleElemento))
                            {
                                $strMacNuevoRadio = $objDetalleElemento->getDetalleValor();
                            }
                        }
                    }
                    
                    $arrayMacVlanNuevoRad       = $this->servicioGeneral
                                                       ->getArrayMacVlansAConfigurar($arrayMacVlan,$arrayParametros['vlan'],$strMacNuevoRadio,"+");
                    $arrayPeticiones['url']     = 'configMAC';
                    $arrayPeticiones['macVlan'] = $arrayMacVlanNuevoRad;
                    //Ejecucion del metodo via WS para realizar la configuracion del SW

                                    // SE AGREGA VALIDACIÓN PARA NO HACER LLAMADA A NETWORKING SI ES UNA MIGRACION SDWAN
                    if(!(isset($arrayParametros['booleanEsSDWAN']) 
                    && isset($arrayParametros['booleanEsMigracionSDWAN']) 
                    && $arrayParametros['booleanEsSDWAN'] === "true" 
                    && $arrayParametros['booleanEsMigracionSDWAN']=== "true"))
                    {
                        $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                    }
                    else
                    {
                        $arrayRespuesta['status'] = 'OK';
                    }

                    $strStatus      = $arrayRespuesta['status'];
                    $strMensaje     = $arrayRespuesta['mensaje'];
                }
                if($strStatus == "OK")
                {
                    //Se realiza validacion para que solo ejecute recalculo de BW para Servicios con tipo de enlace PRINCIPAL
                    $strValidaEnlace = ($objServicioTecnico->getTipoEnlace() !== null) ? 
                                       substr($objServicioTecnico->getTipoEnlace(), 0, 9):$objServicioTecnico->getTipoEnlace();
                    if($strValidaEnlace == 'PRINCIPAL' && !$booleanEsServicioSafecity)
                    {
                        //Subir bw del concentrador por activacion de nuevo servicio
                        $arrayParametrosBw = array( 
                                                    'booleanEsSDWAN'         => $arrayParametros['booleanEsSDWAN'],
                                                    'booleanEsMigracionSDWAN'=>$arrayParametros['booleanEsMigracionSDWAN'],
                                                    "objServicio"       => $objServicio,
                                                    "usrCreacion"       => $strUsrCreacion,
                                                    "ipCreacion"        => $strIpCreacion,
                                                    "capacidadUnoNueva" => intval($arrayParametros['capacidadUno']),
                                                    "capacidadDosNueva" => intval($arrayParametros['capacidadDos']),
                                                    "operacion"         => "+",
                                                    "accion"            => "Se actualiza Capacidades por Activación de "
                                                                           . "Servicio : <b>".$objServicio->getLoginAux()."<b>"
                                                   );

                        
                        //Se actualiza las capacidades del Concentrador
                        $this->servicioGeneral->actualizarCapacidadesEnConcentrador($arrayParametrosBw);
                    }

                    $arrayPeticiones = array();

                    //*************Validar si la orden de servicio tiene seteado el esquema de Pe-Hsrp*************//
                    $arrayPeticiones          = array();
                    $strBanderaServProdCaract = "N";
                    $arrayParametrosProdCaract["strCaracteristica"] = "PE-HSRP";
                    $arrayParametrosProdCaract["objProducto"]       = $objProducto;
                    $arrayParametrosProdCaract["objServicio"]       = $objServicio;

                    $strBanderaServProdCaract = $this->serviceCliente->consultaServicioProdCaract($arrayParametrosProdCaract);
                    //*************Validar si la orden de servicio tiene seteado el esquema de Pe-Hsrp*************//

                    if(($objProducto->getNombreTecnico()=="L3MPLS" || $objProducto->getNombreTecnico()=="L3MPLS SDWAN")
                        && !$booleanEsServicioSafecity)
                    {
                        $arrayPeticiones['banderaBravco'] = 'NO';
                        //validaciones
                        if($objServicio->getdescripcionpresentafactura() == 'CANAL TELEFONIA')
                        {
                            $arrayPeticiones['clase_servicio'] = 'NETVOICE-L3MPLS';
                        }
                        elseif($objProducto->getDescripcionProducto() == 'DIRECTLINK MPLS')
                        {
                            $arrayPeticiones['clase_servicio'] = 'DIRECTLINK-L3MPLS';      
                        }
                        else
                        {
                            $arrayPeticiones['clase_servicio'] = $objProducto->getNombreTecnico();
                        }

                        //Si es esquema Pe Hsrp se actualiza parametro clase servicio
                        if($strBanderaServProdCaract === "S")
                        {
                            $arrayPeticiones['banderaBravco']  = 'SI';
                            $arrayPeticiones['clase_servicio'] = $objProducto->getClasificacion().'-HSRP';
                        }
                        $strValidaEnlace = ($arrayParametros['tipoEnlace'] !== null) ? 
                                       substr($arrayParametros['tipoEnlace'], 0, 9):$arrayParametros['tipoEnlace'];
                        //accion a ejecutar
                        $arrayPeticiones['url']                   = 'configPE';
                        $arrayPeticiones['accion']                = 'Activar';
                        $arrayPeticiones['sw']                    = $arrayParametros['elementoNombre'];
                        $arrayPeticiones['vrf']                   = $arrayParametros['vrf'];
                        $arrayPeticiones['pe']                    = $arrayParametros['elementoPadre'];
                        $arrayPeticiones['anillo']                = $arrayParametros['anillo'];
                        $arrayPeticiones['subred']                = $arrayParametros['subredServicio'];
                        $arrayPeticiones['mascara']               = $arrayParametros['mascaraSubredServicio'];
                        $arrayPeticiones['gateway']               = $arrayParametros['gwSubredServicio'];
                        $arrayPeticiones['rd_id']                 = $arrayParametros['rdId'];
                        $arrayPeticiones['descripcion_interface'] = $arrayParametros['loginAux'];
                        $arrayPeticiones['ip_bgp']                = $arrayParametros['ipServicio'];
                        $arrayPeticiones['asprivado']             = $arrayParametros['asPrivado'];
                        $arrayPeticiones['nombre_sesion_bgp']     = $arrayParametros['loginAux'];
                        $arrayPeticiones['default_gw']            = $arrayParametros['defaultGateway'];
                        $arrayPeticiones['protocolo']             = $arrayParametros['protocolo'];
                        $arrayPeticiones['servicio']              = $objProducto->getNombreTecnico();
                        $arrayPeticiones['login_aux']             = $arrayParametros['loginAux'];
                        $arrayPeticiones['tipo_enlace']           = $strValidaEnlace;
                        $arrayPeticiones['vlan']                  = $arrayParametros['vlan'];
                        $arrayPeticiones['weight']                = null;

                        $arrayPeticiones['user_name']             = $strUsrCreacion;
                        $arrayPeticiones['user_ip']               = $strIpCreacion;

                        //Se envian a configurar lineas de monitoreo de enlaces de datos
                        if($strBanderaLineasBravco === "S")
                        {
                            $arrayPeticiones['razon_social'] = $arrayParametros['strRazonSocial'];
                            $arrayPeticiones['rt_export']    = $arrayParametros['strRouteTargetExport'];
                            $arrayPeticiones['rt_import']    = $arrayParametros['strRouteTargetImport'];
                        }

                        //Se valida si el anillo no es numérico caso telefónica, de ser así se asigna el valor de anillo mapeado
                        $arrayParametrosAnilloByVlan["strValorAnillo"] = $arrayParametros['anillo'];
                        $arrayValorAnillo                              = $this->servicioGeneral
                                                                              ->getValorAnilloByParametro($arrayParametrosAnilloByVlan);

                        if($arrayValorAnillo["status"] === "S")
                        {
                            $arrayPeticiones['anillo'] = $arrayValorAnillo['anillo'];
                        }

                        //Ejecucion del metodo via WS para realizar la configuracion en el Pe
                        // SE AGREGA VALIDACIÓN PARA NO HACER LLAMADA A NETWORKING SI ES UNA MIGRACION SDWAN
                        if(!(isset($arrayParametros['booleanEsSDWAN']) 
                        && isset($arrayParametros['booleanEsMigracionSDWAN']) 
                        && $arrayParametros['booleanEsSDWAN'] === "true" 
                        && $arrayParametros['booleanEsMigracionSDWAN']=== "true"))
                        {
                            $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);    
                        }
                        else
                        {
                            $arrayRespuesta['status'] = 'OK';
                        }


                        $strStatus  = $arrayRespuesta['status'];
                        $strMensaje = $arrayRespuesta['mensaje'];
                    }
                }
                //obtener el elemento Ont
                if($booleanEsServicioSafecity && $strStatus == "OK")
                {
                    //obtenemos el elemento del Ont
                    $objInterfaceElementoOnt     = null;
                    $objInterfaceElementoSwPoe   = null;
                    $objInterfaceElementoReqGpon = null;
                    if(!$booleanActivarOnt && !empty($intIdInterfaceOnt))
                    {
                        $objInterfaceElementoOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                                        ->find($intIdInterfaceOnt);
                    }
                    else
                    {
                        $objElementoOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdOnt);
                        if(is_object($objElementoOnt))
                        {
                            $objInterfaceElementoOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                    ->findOneBy(array("elementoId"              => $objElementoOnt->getId(),
                                                                                      "nombreInterfaceElemento" => $strPuertosOnt));
                        }
                    }
                    //verificar objeto
                    if(!is_object($objInterfaceElementoOnt))
                    {
                        $strStatus  = "ERROR";
                        $strMensaje = "No se ha podido obtener la interface del elemento Ont, por favor notificar a Sistemas.";
                    }
                    //obtener interface del sw poe
                    if(!$booleanActivarOnt && $booleanExisteSwPoeGpon && is_object($objInterfaceElementoOnt))
                    {
                        //obtengo el servicio sw poe
                        $objServicioSwPoe          = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioSwPoe);
                        //obtengo la interface del SW POE
                        $objInterfaceElementoSwPoe = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                ->findOneBy(array("elementoId"              => $intIdSwPoe,
                                                                                  "nombreInterfaceElemento" => $strPuertosSwPoe));
                        //verificar interface
                        if(is_object($objServicioSwPoe) && is_object($objInterfaceElementoSwPoe))
                        {
                            //cambiar estado de la interface
                            $objInterfaceElementoSwPoe->setEstado("connected");
                            $this->emInfraestructura->persist($objInterfaceElementoSwPoe);
                            $this->emInfraestructura->flush();
                            //verifico si tiene enlace la interface del sw poe
                            $objEnlaceSwPoe = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                ->findOneBy(array("interfaceElementoFinId" => $objInterfaceElementoSwPoe,
                                                                                  "estado"                 => "Activo"));
                            if(!is_object($objEnlaceSwPoe))
                            {
                                //obtengo el servicio tecnico sw poe
                                $objServicioTecnicoSwPoe = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                                                                            ->findOneByServicioId($objServicioSwPoe->getId());
                                //obtengo ultima milla
                                $objUltimaMillaSwPoe     = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                            ->find($objServicioTecnicoSwPoe->getUltimaMillaId());
                                //insertar nuevo enlace sw poe
                                $objEnlaceSwPoe = new InfoEnlace();
                                $objEnlaceSwPoe->setInterfaceElementoIniId($objInterfaceElementoOnt);
                                $objEnlaceSwPoe->setInterfaceElementoFinId($objInterfaceElementoSwPoe);
                                $objEnlaceSwPoe->setTipoMedioId($objUltimaMillaSwPoe);
                                $objEnlaceSwPoe->setTipoEnlace($objServicioTecnicoSwPoe->getTipoEnlace());
                                $objEnlaceSwPoe->setEstado("Activo");
                                $objEnlaceSwPoe->setUsrCreacion($strUsrCreacion);
                                $objEnlaceSwPoe->setFeCreacion(new \DateTime('now'));
                                $objEnlaceSwPoe->setIpCreacion($strIpCreacion);
                                $this->emInfraestructura->persist($objEnlaceSwPoe);
                                $this->emInfraestructura->flush();
                            }
                            //verificar si no tiene la primer camara principal activa para activar en el ont
                            $objServCaractCamPrincipal = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioSwPoe,
                                                                                                   'RELACION_CAMARA_PRINCIPAL',
                                                                                                   $objServicioSwPoe->getProductoId());
                            if(!is_object($objServCaractCamPrincipal))
                            {
                                $booleanActivarOnt = true;
                                //ingresamos la relación de la camara principal al servicio sw poe
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioSwPoe,
                                                                                               $objServicioSwPoe->getProductoId(),
                                                                                               "RELACION_CAMARA_PRINCIPAL",
                                                                                               $objServicio->getId(),$strUsrCreacion);
                            }
                        }
                        else
                        {
                            $strStatus  = "ERROR";
                            $strMensaje = "No se ha podido obtener la interface del elemento Switch PoE, por favor notificar a Sistemas.";
                        }
                    }
                    //obtener interface del elemento requerido
                    if(!$booleanActivarOnt && $intIdElementoReqGpon != null && !empty($strPuertosEleReqGpon))
                    {
                        //obtengo la interface del elemento requerido
                        $objInterfaceElementoReqGpon = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                ->findOneBy(array("elementoId"              => $intIdElementoReqGpon,
                                                                                  "nombreInterfaceElemento" => $strPuertosEleReqGpon));
                        //verificar servicio e interface
                        if(is_object($objInterfaceElementoReqGpon))
                        {
                            //cambiar estado de la interface
                            $objInterfaceElementoReqGpon->setEstado("connected");
                            $this->emInfraestructura->persist($objInterfaceElementoReqGpon);
                            $this->emInfraestructura->flush();
                            //verifico si tiene enlace la interface del sw poe
                            $objEnlaceEleReq = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                ->findOneBy(array("interfaceElementoFinId" => $objInterfaceElementoReqGpon,
                                                                                  "estado"                 => "Activo"));
                            if(!is_object($objEnlaceEleReq))
                            {
                                //insertar nuevo enlace sw poe
                                $objEnlaceEleReq = new InfoEnlace();
                                $objEnlaceEleReq->setInterfaceElementoIniId($objInterfaceElementoOnt);
                                $objEnlaceEleReq->setInterfaceElementoFinId($objInterfaceElementoReqGpon);
                                $objEnlaceEleReq->setTipoMedioId($objUltimaMilla);
                                $objEnlaceEleReq->setTipoEnlace($objServicioTecnico->getTipoEnlace());
                                $objEnlaceEleReq->setEstado("Activo");
                                $objEnlaceEleReq->setUsrCreacion($strUsrCreacion);
                                $objEnlaceEleReq->setFeCreacion(new \DateTime('now'));
                                $objEnlaceEleReq->setIpCreacion($strIpCreacion);
                                $this->emInfraestructura->persist($objEnlaceEleReq);
                                $this->emInfraestructura->flush();
                            }
                        }
                        else
                        {
                            $strStatus  = "ERROR";
                            $strMensaje = "No se ha podido obtener la interface del elemento GPON, por favor notificar a Sistemas.";
                        }
                    }
                }
                //Se realiza el llamado al web service para la activacion de los servicios safecity camara y wifi. 
                if($booleanEsServicioSafecity && $strBanderaCamaraVpnSafecity != "S" && $strStatus == "OK")
                {
                    //seteo el parametro
                    $arrayParametrosLlamadaWsSafeCity                           = array();
                    $arrayParametrosLlamadaWsSafeCity["booleanActivarOnt"]      = $booleanActivarOnt;
                    $arrayParametrosLlamadaWsSafeCity["strEsCamaraSafeCity"]    = $strBanderaCamaraSafecity;
                    $arrayParametrosLlamadaWsSafeCity["strEsWifiSafecity"]      = $strBanderaWifiSafecity;
                    $arrayParametrosLlamadaWsSafeCity["objServicio"]            = $objServicio;
                    $arrayParametrosLlamadaWsSafeCity["intIdOnt"]               = "";
                    $arrayParametrosLlamadaWsSafeCity["strSerieOnt"]            = $strSerieOnt;
                    $arrayParametrosLlamadaWsSafeCity["strMacOnt"]              = $strMacOnt;
                    $arrayParametrosLlamadaWsSafeCity["strModeloOnt"]           = $strModeloOnt;
                    $arrayParametrosLlamadaWsSafeCity["strPuertoOnt"]           = $objInterfaceElementoOnt->getNombreInterfaceElemento();
                    $arrayParametrosLlamadaWsSafeCity["strTieneCpe"]            = "N";
                    $arrayParametrosLlamadaWsSafeCity["strVlan"]                = $arrayParametros['vlan'];
                    $arrayParametrosLlamadaWsSafeCity["strVrf"]                 = $arrayParametros['vrf'];
                    $arrayParametrosLlamadaWsSafeCity["strVlanAdmin"]           = $arrayParametros['vlanAdmin'];
                    $arrayParametrosLlamadaWsSafeCity["strVrfAdmin"]            = $arrayParametros['vrfAdmin'];
                    $arrayParametrosLlamadaWsSafeCity["strIpServicio"]          = "";
                    $arrayParametrosLlamadaWsSafeCity["strSubredServicio"]      = "";     
                    $arrayParametrosLlamadaWsSafeCity["strGatewayServicio"]     = "";
                    $arrayParametrosLlamadaWsSafeCity["strNombreParametroRda"]  = "PARAMETROS PARA WS de RDA - Activacion";
                    $arrayParametrosLlamadaWsSafeCity["intIdEmpresa"]           = $intIdEmpresa;
                    $arrayParametrosLlamadaWsSafeCity["strPrefijoEmpresa"]      = $strPrefijoEmpresa;
                    $arrayParametrosLlamadaWsSafeCity["strUsrCreacion"]         = $strUsrCreacion;
                    $arrayParametrosLlamadaWsSafeCity["strIpCreacion"]          = $strIpCreacion;

                    $strRespuestaLlamadaWs = $this->llamadaWsActivarProductosGPON($arrayParametrosLlamadaWsSafeCity);

                    $strStatus  = $strRespuestaLlamadaWs["status"];
                    $strMensaje = $strRespuestaLlamadaWs["mensaje"];
                    
                    //Cuando es servicios safecity se setea UM nueva
                    $usaUmExistente = false;
                }

                if($strStatus == "OK" && ($objServicio->getTipoOrden() == 'N' ||
                   $objServicio->getTipoOrden() == 'T' || $objServicio->getTipoOrden() == 'C'))
                {                                                 
                    if($strPrefijoEmpresa == "MD")
                    {
                        $strEmpresaCod = "10";
                    }
                    else
                    {
                        $strEmpresaCod = $intIdEmpresa;
                    }

                    //Si el servicio utiliza una ULTIMA MILLA NUEVA
                    if(!$usaUmExistente)
                    {
                        $codigoArticuloElementoCliente  = "";
                        $strTipoArticulo                = "AF";
                        $strIdentificacionCliente       = "";

                        //Solo con fibra optica se crea roseta y transciever
                        if ($strUltimaMilla == "Fibra Optica" && !$booleanEsServicioSafecity)
                        {
                            //ingresar elemento roseta
                            $arrayParametrosRoseta = array(
                                                            'nombreElementoCliente'         => $strCodigoNuevaRoseta,
                                                            'nombreModeloElementoCliente'   => "ROS-1234",
                                                            'serieElementoCliente'          => "00000",
                                                            'objInterfaceElementoVecinoOut' => $objInterfaceElementoConector,
                                                            'objUltimaMilla'                => $objUltimaMilla,
                                                            'objServicio'                   => $objServicio,
                                                            'intIdEmpresa'                  => $intIdEmpresa,
                                                            'usrCreacion'                   => $strUsrCreacion,
                                                            'ipCreacion'                    => $strIpCreacion
                                                        );
                            $objInterfaceElementoClienteInicio = $this->servicioGeneral
                                                                      ->ingresarElementoClienteTN($arrayParametrosRoseta,"ROSETA");
                            
                            if(!is_object($objInterfaceElementoClienteInicio))
                            {
                                $arrayRespuestaFinal[] = array("status" => "ERROR", "mensaje" => "El elemento seleccionado no tiene interfaces
                                                    relacionadas");
                                return $arrayRespuestaFinal;
                            }

                            /*Obtenemos el parametro desde la base.*/
                            $arrayAdmiParametroProd  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                ->getOne('PRODUCTOS_ZERO_TOUCH',
                                    'TECNICO',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '10');

                            /*Validamos que haya llegado el parametro mediante un ternario.*/
                            $arrayProductosZeroTouch = !empty($arrayAdmiParametroProd) ?
                                json_decode($arrayAdmiParametroProd['valor1'], true) :
                                null;

                            if ((is_array($arrayZeroTouch) && $arrayProductosZeroTouch) &&
                                in_array($objServicio->getProductoId()->getId(), $arrayProductosZeroTouch))
                            {
                                $arrayCpeZeroTouch = $arrayZeroTouch['ELEMENTOS_INSTALACION']['cpeCliente'];
                                $arrayTransceiverZeroTouch = $arrayZeroTouch['ELEMENTOS_INSTALACION']['transceiverCliente'];

                                $boolValidaSerieCPE = $arrayCpeZeroTouch['serie'] == $strSerieNuevoCpe;
                                $boolValidaSerieTransceiver = $arrayTransceiverZeroTouch['serie'] == $strSerieNuevoTransciever;

                                if ($boolValidaSerieCPE && $boolValidaSerieTransceiver)
                                {
                                    if($arrayCpeZeroTouch['propiedad'] == "TELCONET")
                                    {
                                        /*Consultamos el objeto del CPE.*/
                                        $objCpeEncontrado = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                            ->findOneBy(array(
                                                'numeroSerie' => $strSerieNuevoCpe,
                                                'estado' => 'IN'
                                            ));
                                        
                                            $objCpeEncontrado->setEstado('PI');
                                            $this->emNaf->persist($objCpeEncontrado);
                                    }

                                    /*Consultamos el objeto del Transceiver.*/
                                    $objTransceiverEncontrado = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                        ->findOneBy(array(
                                            'numeroSerie' => $strSerieNuevoTransciever,
                                            'estado' => 'IN'
                                        ));

                                    /*Actualizamos los estados.*/
                                    $objTransceiverEncontrado->setEstado('PI');
                                    $this->emNaf->persist($objTransceiverEncontrado);
                                    $this->emNaf->flush();
                                    $this->emNaf->commit();
                                }
                            }

                            //ingresar elemento transciever
                            $arrElementoClienteTransceiver  = $this->servicioGeneral->buscarElementoEnNaf($strSerieNuevoTransciever, 
                                                                                                          $strModeloNuevoTransciever, 
                                                                                                          "PI", "ActivarServicio");
                            $strStatusElementoClienteTrans  = $arrElementoClienteTransceiver[0]['status'];
                            $codigoArticuloElementoCliente  = "";
                            $strTipoArticulo                = "AF";
                            $strIdentificacionCliente       = "";
                            
                            if($strStatusElementoClienteTrans == "OK" || $strEsTransceiverExistente == "SI")
                            {
                                //Almacenamos la serie del dispositivo transceiver y el id de control para realizar la carga y descarga.
                                $arrayInfoActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                        ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                        'intIdPersona'   => $arrayParametros['idTecnicoEncargado'],
                                                                        'strNumeroSerie' => $strSerieNuevoTransciever));

                                if ($arrayInfoActivo['status'])
                                {
                                    $arrayEquipos[] = array('strNumeroSerie'  => $strSerieNuevoTransciever,
                                                            'intIdControl'    => $arrayInfoActivo["result"][0]['idControl'],
                                                            'intCantidadEnt'  => 1,
                                                            'intCantidadRec'  => 1,
                                                            'strTipoArticulo' => 'Equipos');
                                }

                                $arrayParametrosTransceiver = array(
                                                            'nombreElementoCliente'         => "trans-".$objServicio->getLoginAux(),
                                                            'nombreModeloElementoCliente'   => $strModeloNuevoTransciever,
                                                            'serieElementoCliente'          => $strSerieNuevoTransciever,
                                                            'objInterfaceElementoVecinoOut' => $objInterfaceElementoClienteInicio,
                                                            'objUltimaMilla'                => $objUltimaMilla,
                                                            'objServicio'                   => $objServicio,
                                                            'intIdEmpresa'                  => $intIdEmpresa,
                                                            'usrCreacion'                   => $strUsrCreacion,
                                                            'ipCreacion'                    => $strIpCreacion
                                                        );
                                $objInterfaceElementoClienteTransceiver = $this->servicioGeneral
                                                                               ->ingresarElementoClienteTN($arrayParametrosTransceiver,
                                                                                                           "TRANSCEIVER");
                                if(!is_object($objInterfaceElementoClienteTransceiver))
                                {
                                    $arrayRespuestaFinal[] = array("status" => "ERROR", "mensaje" => "El elemento seleccionado no tiene interfaces
                                                        relacionadas");
                                    return $arrayRespuestaFinal;
                                }
                                
                                if ($strEsTransceiverExistente == "NO")
                                {
                                    //actualizamos registro en el naf transceiver
                                    $pv_mensajeerror = str_repeat(' ', 1000);
                                    $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                    . ":cantidad, :pv_mensajeerror); END;";
                                    $stmt = $this->emNaf->getConnection()->prepare($sql);
                                    $stmt->bindParam('codigoEmpresaNaf',        $strEmpresaCod);
                                    $stmt->bindParam('codigoArticulo',          $codigoArticuloElementoCliente);
                                    $stmt->bindParam('tipoArticulo',            $strTipoArticulo);
                                    $stmt->bindParam('identificacionCliente',   $strIdentificacionCliente);
                                    $stmt->bindParam('serieCpe',                $strSerieNuevoTransciever);
                                    $stmt->bindParam('cantidad',                intval(1));
                                    $stmt->bindParam('pv_mensajeerror',         $pv_mensajeerror);
                                    $stmt->execute();

                                    if(strlen(trim($pv_mensajeerror)) > 0)
                                    {
                                        $respuestaFinal[] = array("status" => "NAF", "mensaje" => "ERROR TRANSCEIVER NAF: ".$pv_mensajeerror);
                                        return $respuestaFinal;
                                    }
                                }
                            }
                            else
                            {
                                $respuestaFinal[] = array('status' => 'NAF', 'mensaje' => $arrElementoClienteTransceiver[0]['mensaje']);
                                return $respuestaFinal;
                            }
                        }
                        //se agrega validacion de equipo radio existente
                        else if ($strUltimaMilla == "Radio" && $strEsExistente != 'SI')
                        {
                            //ingresar elemento transciever
                            $arrElementoClienteRadio  = $this->servicioGeneral->buscarElementoEnNaf($strSerieNuevoRadio, 
                                                                                                    $strModeloNuevoRadio, 
                                                                                                    "PI",
                                                                                                    "ActivarServicio");
                            $strStatusElementoClienteRadio  = $arrElementoClienteRadio[0]['status'];
                            $codigoArticuloElementoCliente  = "";
                            $strTipoArticulo                = "AF";
                            $strIdentificacionCliente       = "";

                            if($strStatusElementoClienteRadio == "OK" || $strEsRadioExistente == "SI")
                            {
                                //Almacenamos la serie del dispositivo de radio y el id de control para realizar la carga y descarga.
                                $arrayInfoActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                        ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                        'intIdPersona'   => $arrayParametros['idTecnicoEncargado'],
                                                                        'strNumeroSerie' => $strSerieNuevoRadio));

                                if ($arrayInfoActivo['status'])
                                {
                                    $arrayEquipos[] = array('strNumeroSerie'  => $strSerieNuevoRadio,
                                                            'intIdControl'    => $arrayInfoActivo["result"][0]['idControl'],
                                                            'intCantidadEnt'  => 1,
                                                            'intCantidadRec'  => 1,
                                                            'strTipoArticulo' => 'Equipos');
                                }

                                $arrayParametrosRadio = array(
                                                                'nombreElementoCliente'         => 'rad-'.$objServicio->getLoginAux(),
                                                                'nombreModeloElementoCliente'   => $strModeloNuevoRadio,
                                                                'serieElementoCliente'          => $strSerieNuevoRadio,
                                                                'objInterfaceElementoVecinoOut' => $objInterfaceElementoConector,
                                                                'objUltimaMilla'                => $objUltimaMilla,
                                                                'objServicio'                   => $objServicio,
                                                                'intIdEmpresa'                  => $intIdEmpresa,
                                                                'usrCreacion'                   => $strUsrCreacion,
                                                                'ipCreacion'                    => $strIpCreacion
                                                              );
                                $objInterfaceElementoClienteInicio = $this->servicioGeneral
                                                                          ->ingresarElementoClienteTN($arrayParametrosRadio,"RADIO");
                                if(!is_object($objInterfaceElementoClienteInicio))
                                {
                                    $arrayRespuestaFinal[] = array("status" => "ERROR", "mensaje" => "El elemento seleccionado no tiene interfaces
                                                        relacionadas");
                                    return $arrayRespuestaFinal;
                                }
                                
                                if ($strEsRadioExistente == "NO")
                                {
                                    //actualizamos registro en el naf transceiver
                                    $pv_mensajeerror = str_repeat(' ', 1000);
                                    $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                    . ":cantidad, :pv_mensajeerror); END;";
                                    $stmt = $this->emNaf->getConnection()->prepare($sql);
                                    $stmt->bindParam('codigoEmpresaNaf',        $intIdEmpresa);
                                    $stmt->bindParam('codigoArticulo',          $codigoArticuloElementoCliente);
                                    $stmt->bindParam('tipoArticulo',            $strTipoArticulo);
                                    $stmt->bindParam('identificacionCliente',   $strIdentificacionCliente);
                                    $stmt->bindParam('serieCpe',                $strSerieNuevoRadio);
                                    $stmt->bindParam('cantidad',                intval(1));
                                    $stmt->bindParam('pv_mensajeerror',         $pv_mensajeerror);
                                    $stmt->execute();

                                    if(strlen(trim($pv_mensajeerror)) > 0)
                                    {
                                        $respuestaFinal[] = array("status" => "NAF", "mensaje" => "ERROR RADIO NAF: ".$pv_mensajeerror);
                                        return $respuestaFinal;
                                    }
                                }

                                $objElementoClienteRadio = $objInterfaceElementoClienteInicio->getElementoId();

                                //info_detalle_elemento propiedad
                                $this->servicioGeneral->ingresarDetalleElemento($objElementoClienteRadio, "PROPIEDAD", "ELEMENTO PROPIEDAD DE",
                                                                                $strPropiedadNuevoRadio, $strUsrCreacion, $strIpCreacion);

                                //info_detalle_elemento gestion remota
                                $this->servicioGeneral->ingresarDetalleElemento($objElementoClienteRadio,
                                                                                "GESTION REMOTA",
                                                                                "ELEMENTO GESTION REMOTA",
                                                                                $strGestionNuevoRadio,
                                                                                $strUsrCreacion,
                                                                                $strIpCreacion); 

                                //info_detalle_elemento administra
                                $this->servicioGeneral->ingresarDetalleElemento($objElementoClienteRadio, "ADMINISTRA",
                                                                                "ELEMENTO ES ADMINISTRADO POR", $strAdministraNuevoRadio,
                                                                                $strUsrCreacion, $strIpCreacion);

                                //info_detalle_elemento
                                $this->servicioGeneral->ingresarDetalleElemento($objElementoClienteRadio, "MAC", "MAC", $strMacNuevoRadio, 
                                                                                $strUsrCreacion, $strIpCreacion);
                                
                                //info_elemento ios
                                $objElementoClienteRadio->setVersionOs($strIosNuevoRadio);
                                $this->emInfraestructura->persist($objElementoClienteRadio);
                                $this->emInfraestructura->flush();
                            }
                        }
                        //en caso de que la Radio exista en el telcos no se registra nuevamente y tampoco se despacha en naf
                        else if ($strUltimaMilla == "Radio" && $strEsExistente == 'SI')
                        {
                            $objInterfaceElementoClienteInicio = $this->emInfraestructura
                                                                      ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                      ->find($intInterfaceEleClie);
                        }

                        //Determinar elemento Vecino a enlazar con el CPE segun el tipo de medio
                        if($strUltimaMilla == "Radio")
                        {
                            $objInterfaceElementoVecinoOut = $objInterfaceElementoClienteInicio;//Puerto out del Radio
                        }
                        else if($strUltimaMilla == "Fibra Optica")

                        {
                            $objInterfaceElementoVecinoOut = $objInterfaceElementoClienteTransceiver; //Puerto out del TRANS
                        }
                        else //UTP
                        {
                            $objInterfaceElementoVecinoOut = $objInterfaceElementoConector; //Puerto out del Switch
                        }

                        if($strPropiedadNuevoCpe == "TELCONET" || $booleanEsServicioSafecity)
                        {
                            //ingresar elemento cpe
                            $arrElementoCliente = $this->servicioGeneral->buscarElementoEnNaf($strSerieNuevoCpe, $strModeloNuevoCpe,
                                                                                              "PI", "ActivarServicio");
                            $strStatusElementoCliente = $arrElementoCliente[0]['status'];
                        }
                        else
                        {
                            $strStatusElementoCliente = "OK";
                        }

                        if($strStatusElementoCliente=="OK" || $strEsCpeExistente == "SI")
                        {
                            //Se Valida que si se escogio nuevo CPE ( se proceda a realizar el flujo normal )
                            if($strFlagCpe == "nuevo" || $booleanEsServicioSafecity)
                            {
                                //Almacenamos la serie del dispositivo cpe y el id de control para realizar la carga y descarga.
                                $arrayInfoActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                        ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                        'intIdPersona'   => (!isset($arrayPeticiones['idTecnicoEncargado']) ? 
                                                                                                    $arrayPeticiones['idTecnicoEncargado'] : null),
                                                                        'strNumeroSerie' => $strSerieNuevoCpe,
                                                                        'booleanRedGponMpls' => $booleanEsServicioSafecity));

                                if ($arrayInfoActivo['status'])
                                {
                                    $arrayEquipos[] = array('strNumeroSerie'  => $strSerieNuevoCpe,
                                                            'intIdControl'    => $arrayInfoActivo["result"][0]['idControl'],
                                                            'intCantidadEnt'  => 1,
                                                            'intCantidadRec'  => 1,
                                                            'strTipoArticulo' => 'Equipos');
                                }

                                $arrayParametrosCpe = array(
                                                            'nombreElementoCliente'         => $objServicio->getLoginAux(),
                                                            'nombreModeloElementoCliente'   => $strModeloNuevoCpe,
                                                            'serieElementoCliente'          => $strSerieNuevoCpe,
                                                            'objInterfaceElementoVecinoOut' => null,
                                                            'objUltimaMilla'                => $objUltimaMilla,
                                                            'objServicio'                   => $objServicio,
                                                            'intIdEmpresa'                  => $intIdEmpresa,
                                                            'usrCreacion'                   => $strUsrCreacion,
                                                            'ipCreacion'                    => $strIpCreacion,
                                                            'banderaCamaraSafeCity'         => $strBanderaCamaraSafecity,
                                                            'banderaWifiSafecity'           => $strBanderaWifiSafecity,
                                                            'banderaCamaraVpnSafecity'      => $strBanderaCamaraVpnSafecity,
                                                            'esServicioNuevo'               => "SI",
                                                            'strTipoOrden'                  => $arrayParametros['strTipoOrden'],
                                                            'strTipoEnlace'                 => $arrayParametros['strTipoEnlace']
                                                        );

                                $arrayParametrosCpe['objInterfaceElementoVecinoOut'] = $objInterfaceElementoVecinoOut;

                                if($booleanEsServicioSafecity)
                                {
                                    $arrayParametrosCpe['nombreElementoCliente'] = $strElementoSafecity;
                                    if(is_object($objInterfaceElementoSwPoe))
                                    {
                                        $arrayParametrosCpe['objInterfaceElementoVecinoOut'] = $objInterfaceElementoSwPoe;
                                    }
                                    elseif(is_object($objInterfaceElementoReqGpon))
                                    {
                                        $arrayParametrosCpe['objInterfaceElementoVecinoOut'] = $objInterfaceElementoReqGpon;
                                    }
                                    else
                                    {
                                        $arrayParametrosCpe['objInterfaceElementoVecinoOut'] = $objInterfaceElementoOnt;
                                    }
                                    $objInterfaceElementoCliente = $this->servicioGeneral->ingresarElementoClienteTN($arrayParametrosCpe);
                                }
                                else
                                {
                                    $objInterfaceElementoCliente = $this->servicioGeneral->ingresarElementoClienteTN($arrayParametrosCpe,"CPE");
                                }

                                if(($strPropiedadNuevoCpe == "TELCONET" || $booleanEsServicioSafecity) && $strEsCpeExistente == "NO")
                                {
                                    //actualizamos registro en el naf cpe
                                    $pv_mensajeerror = str_repeat(' ', 1000);
                                    $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                    . ":cantidad, :pv_mensajeerror); END;";
                                    $stmt = $this->emNaf->getConnection()->prepare($sql);
                                    $stmt->bindParam('codigoEmpresaNaf',        $strEmpresaCod);
                                    $stmt->bindParam('codigoArticulo',          $codigoArticuloElementoCliente);
                                    $stmt->bindParam('tipoArticulo',            $strTipoArticulo);
                                    $stmt->bindParam('identificacionCliente',   $strIdentificacionCliente);
                                    $stmt->bindParam('serieCpe',                $strSerieNuevoCpe);
                                    $stmt->bindParam('cantidad',                intval(1));
                                    $stmt->bindParam('pv_mensajeerror',         $pv_mensajeerror);
                                    $stmt->execute();

                                    if(strlen(trim($pv_mensajeerror)) > 0)
                                    {
                                        $respuestaFinal[] = array("status"=>"NAF", "mensaje"=>"ERROR CPE NAF: ".$pv_mensajeerror);
                                        return $respuestaFinal;
                                    }
                                }

                                $objElementoCliente = $objInterfaceElementoCliente->getElementoId();

                                if(!$booleanEsServicioSafecity)
                                {                                
                                    //info_detalle_elemento propiedad
                                    $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "PROPIEDAD", "ELEMENTO PROPIEDAD DE", 
                                                                                    $strPropiedadNuevoCpe, $strUsrCreacion, $strIpCreacion);

                                    //info_detalle_elemento gestion remota
                                    $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "GESTION REMOTA", "ELEMENTO GESTION REMOTA",
                                                                                    $strGestionNuevoCpe, $strUsrCreacion, $strIpCreacion); 

                                    //info_detalle_elemento administra
                                    $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "ADMINISTRA", "ELEMENTO ES ADMINISTRADO POR",
                                                                                    $strAdministraNuevoCpe, $strUsrCreacion, $strIpCreacion);
                                }
                                
                                //info_elemento ios
                                $objElementoCliente->setVersionOs($strIosNuevoCpe);
                                $this->emInfraestructura->persist($objElementoCliente);
                                $this->emInfraestructura->flush();
                                //CREAR SOLCITUD DE RPA LICENCIA
                                if(is_object($objElementoCliente))
                                {
                                    //obtener el id de la marca del elemento
                                    $intIdMarcaElemento     = $objElementoCliente->getModeloElementoId()->getMarcaElementoId()->getId();
                                    //seteo el arreglo de los id de las marcas
                                    $arrayIdMarcasLicencia  = array();
                                    //obtengo las marcas de los elementos para licenciamiento
                                    $arrayParamDetMarcas    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('RPA_MARCA_ELEMENTOS_LICENCIA',
                                                                            'TECNICO',
                                                                            '',
                                                                            '',
                                                                            $objProducto->getId(),
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $intIdEmpresa);
                                    if(is_array($arrayParamDetMarcas) && !empty($arrayParamDetMarcas))
                                    {
                                        foreach($arrayParamDetMarcas as $arrayDetParametro)
                                        {
                                            $arrayIdMarcasLicencia[] = $arrayDetParametro['valor2'];
                                        }
                                    }
                                    //verifico si la marca requiere licenciamiento
                                    if(in_array($intIdMarcaElemento, $arrayIdMarcasLicencia))
                                    {
                                        //obtengo el tipo de solicitud de rpa licencia
                                        $objTipoSolicitudRpa    = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RPA LICENCIA",
                                                                                                  "estado"               => "Activo"));
                                        if(is_object($objTipoSolicitudRpa))
                                        {
                                            //ingreso la solicitud
                                            $objDetalleSolicitudRpa = new InfoDetalleSolicitud();
                                            $objDetalleSolicitudRpa->setServicioId($objServicio);
                                            $objDetalleSolicitudRpa->setTipoSolicitudId($objTipoSolicitudRpa);
                                            $objDetalleSolicitudRpa->setEstado("Pendiente");
                                            $objDetalleSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                            $objDetalleSolicitudRpa->setUsrCreacion($strUsrCreacion);
                                            $objDetalleSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                            $this->emComercial->persist($objDetalleSolicitudRpa);
                                            $this->emComercial->flush();
                                            //crear historial para la solicitud
                                            if(is_object($objDetalleSolicitudRpa))
                                            {
                                                $objHistorialSolicitudRpa = new InfoDetalleSolHist();
                                                $objHistorialSolicitudRpa->setDetalleSolicitudId($objDetalleSolicitudRpa);
                                                $objHistorialSolicitudRpa->setEstado("Pendiente");
                                                $objHistorialSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                                $objHistorialSolicitudRpa->setUsrCreacion($strUsrCreacion);
                                                $objHistorialSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                                $objHistorialSolicitudRpa->setIpCreacion($strIpCreacion);
                                                $this->emComercial->persist($objHistorialSolicitudRpa);
                                                $this->emComercial->flush();
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //Se obtiene la informacion del CPE existente y su respectivo puerto
                                $objInterfaceElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                       ->find($intIdInterfaceCpeExistente);

                                //Enlazar puerto del Tx al puerto disponible del CPE existente
                                $enlace = new InfoEnlace();
                                $enlace->setInterfaceElementoIniId($objInterfaceElementoVecinoOut);//Out Tx Nueva Ultima Milla
                                $enlace->setInterfaceElementoFinId($objInterfaceElementoCliente);// In Puerto disponible del CPE Existente
                                $enlace->setTipoMedioId($objUltimaMilla);
                                $enlace->setTipoEnlace($objServicioTecnico->getTipoEnlace());
                                $enlace->setEstado("Activo");
                                $enlace->setUsrCreacion($strUsrCreacion);
                                $enlace->setFeCreacion(new \DateTime('now'));
                                $enlace->setIpCreacion($strIpCreacion);
                                $this->emInfraestructura->persist($enlace);

                                //conectar interface in del puerto disponible del cpe existente
                                $objInterfaceElementoCliente->setEstado("connected");
                                $this->emInfraestructura->persist($objInterfaceElementoCliente);
                                $this->emInfraestructura->flush();

                                //SE REGISTRA EL TRACKING DEL ELEMENTO
                                $arrayParametrosAuditoria["strNumeroSerie"]  = $arrayParametros['serieExisteCpe'];
                                $arrayParametrosAuditoria["strEstadoTelcos"] = 'Activo';
                                $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
                                $arrayParametrosAuditoria["strEstadoActivo"] = 'Activo';
                                $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
                                $arrayParametrosAuditoria["strCodEmpresa"]   = '10';
                                $arrayParametrosAuditoria["strTransaccion"]  = 'Activacion Cliente';
                                $arrayParametrosAuditoria["intOficinaId"]    = 0;

                                //Se consulta el login del cliente
                                if(is_object($objServicio))
                                {
                                    $objInfoPunto = $this->emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                                                            ->find($objServicio->getPuntoId()->getId());
                                    if(is_object($objInfoPunto))
                                    {
                                        $strCedulaCliente = is_object($objInfoPunto->getPersonaEmpresaRolId())     ?
                                                is_object($objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()) ?
                                                $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()->getIdentificacionCliente():"":"";

                                        $arrayParametrosAuditoria["strCedulaCliente"] = $strCedulaCliente;
                                        $arrayParametrosAuditoria["strLogin"]         = $objInfoPunto->getLogin();
                                    }
                                }

                                $arrayParametrosAuditoria["strUsrCreacion"] = $arrayParametros['usrCreacion'];

                                $this->serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
                            }
                        }//if($strStatusElementoCliente=="OK")
                        else
                        {
                            $respuestaFinal[] = array('status'=>'NAF', 'mensaje'=>$arrElementoCliente[0]['mensaje']);
                            return $respuestaFinal;
                        }

                        //Guardar la MAC del CPE atada a la interface del equipo
                        //Determinar primero si existe CPE o ROSETA
                        $objInterfaceElementoCliente->setMacInterfaceElemento($strMacNuevoCpe);
                        $this->emInfraestructura->persist($objInterfaceElementoCliente);
                        $this->emInfraestructura->flush();

                        //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                        $objInfoDetalleInterface = new InfoDetalleInterface();
                        $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCliente);
                        $objInfoDetalleInterface->setDetalleNombre("servicio");
                        $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                        $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                        $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                        $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                        $this->emInfraestructura->persist($objInfoDetalleInterface);
                        $this->emInfraestructura->flush();

                        /** Guardar cpe en servicio tecnico
                        * 
                        *  FIBRA(r)-> ELEMENTO CLIENTE = ROSETA
                        *  FIBRA(D)-> ELEMENTO CLIENTE = ROSETA
                        *  RADIO   -> ELEMENTO CLIENTE = CPE
                        *  UTP     -> ELEMENTO CLIENTE = CPE
                        */

                        //Objeto que almacena el elemento cliente a relacionar en la data tecnica de acuerdo a la ultima milla del servicio
                        $objInterfaceElementoClienteFinal = null;

                        //Si es Fibra RUTA o DIRECTA ( ROSETA ) o si es RADIO ( RADIO )
                        if(($strUltimaMilla == "Fibra Optica" || $strUltimaMilla == "Radio") && !$booleanEsServicioSafecity)
                        {
                            $objInterfaceElementoClienteFinal = $objInterfaceElementoClienteInicio; //ROSETA
                        }
                        else //UTP  elemento cliente Id es el CPE
                        {
                            $objInterfaceElementoClienteFinal = $objInterfaceElementoCliente; //CPE
                        }

                        $objServicioTecnico->setElementoClienteId($objInterfaceElementoClienteFinal->getElementoId()->getId());
                        $objServicioTecnico->setInterfaceElementoClienteId($objInterfaceElementoClienteFinal->getId());
                        $this->emComercial->persist($objServicioTecnico);
                        $this->emComercial->flush();
                    }
                    else //Si utiliza Ultima Milla Existente
                    {
                        //Se obtiene la data tecnica del servicio del cual se esta referenciando
                        $objServicioTecnicoCpeExiste  = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                             ->findOneBy(array("servicioId" => $intServicioIdExisteCpe));

                        //Interface escogida del mismo CPE para enganchar la nueva MAC del servicio a Activar
                        $objInterfaceElementoCpeExistente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                    ->find($intIdInterfaceCpeExistente);

                        if($objInterfaceElementoCpeExistente)
                        {
                            //Se setea el puerto del CPE con al informacion del Servicio configurado y se cambia a estado "connected" 
                            //En caso de estar ya conectada la interface se continua a agregar el servicio a la referencia de la interface
                            $objInterfaceElementoCpeExistente->setMacInterfaceElemento($strMacCpeExistente);
                            $objInterfaceElementoCpeExistente->setEstado("connected");
                            $this->emInfraestructura->persist($objInterfaceElementoCpeExistente);
                            $this->emInfraestructura->flush(); 

                            //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                            $objInfoDetalleInterface = new InfoDetalleInterface();
                            $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCpeExistente);
                            $objInfoDetalleInterface->setDetalleNombre("servicio");
                            $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                            $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                            $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                            $this->emInfraestructura->persist($objInfoDetalleInterface);
                            $this->emInfraestructura->flush();
                        }

                        //guardar cpe/roseta/radio en servicio tecnico
                        if(is_object($objServicioTecnicoCpeExiste))
                        {
                            $objServicioTecnico->setElementoClienteId($objServicioTecnicoCpeExiste->getElementoClienteId());
                            $objServicioTecnico->setInterfaceElementoClienteId($objServicioTecnicoCpeExiste->getInterfaceElementoClienteId());
                            $this->emComercial->persist($objServicioTecnico);
                            $this->emComercial->flush();
                        }

                        //SE REGISTRA EL TRACKING DEL ELEMENTO
                        $arrayParametrosAuditoria["strNumeroSerie"]  = $arrayParametros['serieExisteCpe'];
                        $arrayParametrosAuditoria["strEstadoTelcos"] = 'Activo';
                        $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
                        $arrayParametrosAuditoria["strEstadoActivo"] = 'Activo';
                        $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
                        $arrayParametrosAuditoria["strCodEmpresa"]   = '10';
                        $arrayParametrosAuditoria["strTransaccion"]  = 'Activacion Cliente';
                        $arrayParametrosAuditoria["intOficinaId"]    = 0;

                        //Se consulta el login del cliente
                        if(is_object($objServicio))
                        {
                            $objInfoPunto = $this->emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                                                    ->find($objServicio->getPuntoId()->getId());
                            if(is_object($objInfoPunto))
                            {
                                $strCedulaCliente = is_object($objInfoPunto->getPersonaEmpresaRolId())     ?
                                        is_object($objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()) ?
                                        $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()->getIdentificacionCliente():"":"";

                                $arrayParametrosAuditoria["strLogin"]         = $objInfoPunto->getLogin();
                                $arrayParametrosAuditoria["strCedulaCliente"] = $strCedulaCliente;
                            }
                        }

                        $arrayParametrosAuditoria["strUsrCreacion"] = $arrayParametros['usrCreacion'];

                        $this->serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
                    }

                    //REGISTRAMOS LOS EQUIPOS DEL CLIENTE QUE SE ENCUENTRAN EN EL NODO.
                    if (isset($arrayParametros['arrayDipositivosNodo']) && !empty($arrayParametros['arrayDipositivosNodo'])
                        && !$booleanEsServicioSafecity)
                    {
                        foreach ($arrayParametros['arrayDipositivosNodo'] as $intIdx => $arrayDipositivoNodo)
                        {
                            //Almacenamos la serie de los dispositivo en nodo y el id de control para realizar la carga y descarga.
                            $strMacDispositivo = 'NA';
                            $arrayInfoActivos  = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                    ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                    'intIdPersona'   => $arrayParametros['idTecnicoEncargado'],
                                                                    'strNumeroSerie' => $arrayDipositivoNodo['serieElemento']));

                            if ($arrayInfoActivos['status'])
                            {
                                $arrayInfoActivo   = $arrayInfoActivos['result'][0];
                                $strMacDispositivo = $arrayInfoActivo['macElemento'];
                                $intIdControl      = $arrayInfoActivo['idControl'];
                                $arrayEquipos[]    = array('strNumeroSerie'  => $arrayDipositivoNodo['serieElemento'],
                                                           'intIdControl'    => $intIdControl,
                                                           'intCantidadEnt'  => 1,
                                                           'intCantidadRec'  => 1,
                                                           'strTipoArticulo' => 'Equipos');
                            }

                            $intContador       = $intIdx + 1;
                            $strNombre         = "nodo$intContador-".$objServicio->getLoginAux();
                            $arrayElementoNodo = array('nombreElementoCliente'       => $strNombre,
                                                       'nombreModeloElementoCliente' => $arrayDipositivoNodo['modeloElemento'],
                                                       'serieElementoCliente'        => $arrayDipositivoNodo['serieElemento'],
                                                       'boolEsUbicacionNodo'         => true,
                                                       'strMacDispositivo'           => $strMacDispositivo,
                                                       'objServicio'                 => $objServicio,
                                                       'intIdEmpresa'                => $intIdEmpresa,
                                                       'usrCreacion'                 => $strUsrCreacion,
                                                       'ipCreacion'                  => $strIpCreacion);

                            $strRespuesta = $this->servicioGeneral->ingresarElementoClienteTN($arrayElementoNodo,"");

                            if ($strRespuesta !== "" && is_string($strRespuesta))
                            {
                                throw new \Exception($strRespuesta);
                            }

                            //Actualizamos el dispositivo en el Naf.
                            $strCodigoArticulo        = '';
                            $strTipoArticulo          = 'AF';
                            $strIdentificacionCliente = '';
                            $strMensajeError          = str_repeat(' ',1000);

                            $strSql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf,"
                                                                                . ":codigoArticulo,"
                                                                                . ":tipoArticulo,"
                                                                                . ":identificacionCliente,"
                                                                                . ":serieCpe,"
                                                                                . ":cantidad,"
                                                                                . ":pv_mensajeerror); END;";

                            $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                            $objStmt->bindParam('codigoEmpresaNaf'     , $strEmpresaCod);
                            $objStmt->bindParam('codigoArticulo'       , $strCodigoArticulo);
                            $objStmt->bindParam('tipoArticulo'         , $strTipoArticulo);
                            $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                            $objStmt->bindParam('serieCpe'             , $arrayDipositivoNodo['serieElemento']);
                            $objStmt->bindParam('cantidad'             , intval(1));
                            $objStmt->bindParam('pv_mensajeerror'      , $strMensajeError);
                            $objStmt->execute();

                            if (strlen(trim($strMensajeError)) > 0)
                            {
                                throw new \Exception("DISPOSITIVO NODO: ".$strMensajeError);
                            }
                        }
                    }

                    //LLAMADA AL SERVICE PARA REALIZAR LA CARGA Y DESCARGA DEL ACTIVO.
                    if (!empty($arrayEquipos) && count($arrayEquipos) > 0)
                    {
                        $arrayCargaDescarga['strUsuario']              =  $strUsrCreacion;
                        $arrayCargaDescarga['strIpUsuario']            =  $strIpCreacion;
                        $arrayCargaDescarga['strTipoRecibe']           = 'Cliente';
                        $arrayCargaDescarga['intIdServicio']           =  $objServicio->getId();
                        $arrayCargaDescarga['intIdEmpleado']           =  $arrayParametros['idTecnicoEncargado'];
                        $arrayCargaDescarga['intIdEmpresa']            =  $intIdEmpresa;
                        $arrayCargaDescarga['strTipoActividad']        = 'Instalacion';
                        $arrayCargaDescarga['strTipoTransaccion']      = 'Nuevo';
                        $arrayCargaDescarga['strObservacion']          = 'Instalacion del servicio';
                        $arrayCargaDescarga['arrayEquipos']            =  $arrayEquipos;
                        $arrayCargaDescarga['strEstadoSolicitud']      = 'Asignada';
                        $arrayCargaDescarga['strDescripcionSolicitud'] = 'SOLICITUD PLANIFICACION';
                        $arrayCargaDescarga['booleanServicioSafecity'] =  $booleanEsServicioSafecity;
                        $arrayCargaDescarga['intIdPerEmpRolCamara']    =  $intIdPerEmpRolCamara;
                        $arrayResCarDes = $this->serviceInfoElemento->cargaDescargaActivos($arrayCargaDescarga);

                        if (!$arrayResCarDes['status'])
                        {
                            throw new \Exception("DISPOSITIVOS CLIENTE: ".$arrayResCarDes['message']);
                        }
                    }

                    if((is_array($arrayParametros['arrayDipositivosNodo'])  || is_array($arrayParametros['arrayDipositivosCliente']))
                       && (is_object($objServicio))  && ($booleanEsServicioSafecity) &&
                         ($objServicio->getProductoId()->getNombreTecnico() === "SAFECITYDATOS"
                       || $objServicio->getProductoId()->getNombreTecnico() === "SAFECITYWIFI"))
                    {
                        $arrayDipositivos = array('arrayDipositivosNodo'  => $arrayParametros['arrayDipositivosNodo'],
                                                'arrayDipositivosCliente' => $arrayParametros['arrayDipositivosCliente'],
                                                'idTecnicoEncargado'      => $arrayParametros['idTecnicoEncargado'],
                                                'objServicio'             => $objServicio,
                                                'strUsrCreacion'          => $strUsrCreacion,          
                                                'strIpCreacion'           => $strIpCreacion);
    
                        $arrayResponseGenerica = $this->agregarElemntosAdicionalesClienteNodo($arrayDipositivos);
    
                        if(isset($arrayResponseGenerica['status']) && !empty($arrayResponseGenerica['status']) &&
                                $arrayResponseGenerica['status'] === "ERROR")
                        {
                            throw new \Exception($arrayResponseGenerica['mensaje']);
                        }
                    }

                    //despues de la activacion valido si el servicio pertenece a telefonia para obtener factibilidad automatica de los numeros
                    if($objServicio->getdescripcionpresentafactura() == 'CANAL TELEFONIA')
                    {
                        
                        $strResultIp = $this->getIpLanTelefonia(array(  'elementoPadre'     => $arrayParametros['elementoPadre'],
                                                                        'strUsrCreacion'    => $strUsrCreacion,
                                                                        'strIpCreacion'     => $strIpCreacion,
                                                                        'strPrefijoEmpresa' => $strPrefijoEmpresa,
                                                                        'objServicio'       => $objServicio));
                        if($strResultIp != 'OK')
                        {
                            throw new \Exception($strResultIp);
                        }                        
                    }
                }

                //verifico si es servicios safecity
                if($strStatus == "OK" && $booleanEsServicioSafecity && $strBanderaCamaraVpnSafecity != "S")
                {
                    if($strBanderaCamaraSafecity == "S")
                    {
                        //ingresamos la fps
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "FPS",
                                                                                       $arrayParametros["fpsCamara"], $strUsrCreacion);
                        //ingresamos la code
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "CODEC",
                                                                                       $arrayParametros["codecCamara"], $strUsrCreacion);
                        //ingresamos la resolucion
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "RESOLUCION",
                                                                                       $arrayParametros["resolucionCamara"], $strUsrCreacion);
                        
                        $objParametroCab = $this->emGeneral->getRepository("schemaBundle:AdmiParametroCab")
                                                           ->findOneBy(array("nombreParametro" => "PARAMETROS PROYECTO GPON SAFECITY",
                                                                             "estado"          => "Activo"));
                        //Ingresamos el formato de la resolucion de la camara
                        $strForResCamara = $arrayParametros["formatoResCamara"];
                        if(!isset($strForResCamara))
                        {
                            $objForResCamara = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                                 ->findOneBy(array("parametroId" => $objParametroCab->getId(),
                                                                                   "descripcion"=>'RESOLUCION_CAMARA',
                                                                                   "valor1"=>$arrayParametros["resolucionCamara"],
                                                                                   "estado"=>"Activo"));
                            if(isset($objForResCamara))
                            {
                                $strForResCamara = $objForResCamara->getValor2()."x".$objForResCamara->getValor3();
                            }                                                    
                        }
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "FORMATO_RESOLUCION",
                                                                                       $strForResCamara, $strUsrCreacion);
                        
                        //Ingresamos el tipo de camara
                        $strTipoCamara = $arrayParametros["tipoCamara"];
                        if(!isset($strTipoCamara))
                        {
                            $objTipoCamara = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                               ->findOneBy(array("parametroId" => $objParametroCab->getId(),
                                                                                 "descripcion"=>'MODELOS_CAMARAS',
                                                                                 "valor1"=>$arrayParametros["modeloCamara"],
                                                                                 "estado"=>"Activo"));
                            if(isset($objTipoCamara))
                            {
                                $strTipoCamara = $objTipoCamara->getValor2();
                            }                                                   
                        }
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "TIPO_CAMARA",
                                                                                       $strTipoCamara, $strUsrCreacion);
                        //Ingresamos la posicion de la camara
                        $strPuertoOnt = $arrayParametros['puertosOnt'];
                        $strPosicionCamara = $strPuertoOnt=='1'?'PTZ':($strPuertoOnt=='2'?'IZQUIERDA':($strPuertoOnt=='3'?'DERECHA':'FRONTAL'));
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "POSICION_CAMARA",
                                                                                       $strPosicionCamara, $strUsrCreacion);  
                        
                    }
                    //obtener servicio principal
                    $objServicioDatosSafe   = null;
                    $objCaractDatosSafeCity = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                           'RELACION_SERVICIOS_GPON_SAFECITY',$objProducto);
                    if(is_object($objCaractDatosSafeCity))
                    {
                        $objServicioDatosSafe = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                                            ->find($objCaractDatosSafeCity->getValor());
                    }
                    //ingresamos la mac del ont
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "MAC ONT",
                                                                                   $strMacOnt, $strUsrCreacion);
                    //ingresamos la mac del cliente
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),"MAC CLIENTE",
                                                                                   $strMacNuevoCpe, $strUsrCreacion);
                    //guardar características
                    $arrayParametrosDatos = $strRespuestaLlamadaWs['arrayDatosMiddleware']['datos'];
                    if($strBanderaWifiSafecity == "S")
                    {
                    	$arrayDatosAdminActivar = $arrayParametrosDatos['datos_activar'][0];
                    	$arrayDatosActivar      = $arrayParametrosDatos['datos_activar'][1];
                    }
                    else
                    {
                    	$arrayDatosActivar = $arrayParametrosDatos['datos_activar'][0];
                    }
                    $booleanServicioNuevo = $strRespuestaLlamadaWs['booleanServicioNuevo'];
                    $objServicioPuntoAnt  = $strRespuestaLlamadaWs['objServicioPunto'];
                    //se ingresa indice del cliente
                    if(isset($strRespuestaLlamadaWs['ontId']))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                       $objProducto,
                                                                                       "INDICE CLIENTE",
                                                                                       $strRespuestaLlamadaWs['ontId'],
                                                                                       $strUsrCreacion);
                        //ingresar característica principal
                        if(is_object($objServicioDatosSafe))
                        {
                            $objCaractIndiceDatosSafeCity = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                            'INDICE CLIENTE',
                                                                                            $objServicioDatosSafe->getProductoId());
                            if(!is_object($objCaractIndiceDatosSafeCity))
                            {
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                               $objServicioDatosSafe->getProductoId(),
                                                                                               "INDICE CLIENTE",
                                                                                               $strRespuestaLlamadaWs['ontId'],
                                                                                               $strUsrCreacion);
                            }
                        }
                    }
                    else
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                       $objProducto,
                                                                                       "INDICE CLIENTE",
                                                                                       $arrayParametrosDatos['ont_id'],
                                                                                       $strUsrCreacion);
                    }
                    //se ingresa spid monitoreo
                    if(isset($strRespuestaLlamadaWs['spId_Monitoreo']) && !is_array($strRespuestaLlamadaWs['spId_Monitoreo'])
                       && is_object($objServicioDatosSafe))
                    {
                        $objCaractSpidMonitoreo = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                                            'SPID',
                                                                                                            $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractSpidMonitoreo))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "SPID",
                                                                                           $strRespuestaLlamadaWs['spId_Monitoreo'],
                                                                                           $strUsrCreacion);
                        }
                    }
                    //se ingresa spid datos
                    if(isset($strRespuestaLlamadaWs['spId_Datos']) && !empty($strRespuestaLlamadaWs['spId_Datos']))
                    {
                        if(is_array($strRespuestaLlamadaWs['spId_Datos']))
                        {
                            $strSpIdDatos    = $strRespuestaLlamadaWs['spId_Datos'][0];
                            $strSpIdDatosDos = isset($strRespuestaLlamadaWs['spId_Datos'][1])
                                               ? $strRespuestaLlamadaWs['spId_Datos'][1] : $strSpIdDatos;
                        }
                        else
                        {
                            $strSpIdDatos    = $strRespuestaLlamadaWs['spId_Datos'];
                            $strSpIdDatosDos = $strRespuestaLlamadaWs['spId_Datos'];
                        }
                        //verificar wifi
                        if($strBanderaWifiSafecity == "S")
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                           $objProducto,
                                                                                           "SPID ADMIN",
                                                                                           $strSpIdDatos,
                                                                                           $strUsrCreacion);
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                           $objProducto,
                                                                                           "SPID",
                                                                                           $strSpIdDatosDos,
                                                                                           $strUsrCreacion);
                        }
                        else
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                           $objProducto,
                                                                                           "SPID",
                                                                                           $strSpIdDatos,
                                                                                           $strUsrCreacion);
                        }
                    }
                    else if(is_object($objServicioPuntoAnt))
                    {
                        $objCaractSpid = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoAnt,
                                                                                                   'SPID',
                                                                                                   $objServicioPuntoAnt->getProductoId());
                        if(is_object($objCaractSpid))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                           $objProducto,
                                                                                           "SPID",
                                                                                           $objCaractSpid->getValor(),
                                                                                           $strUsrCreacion);
                        }
                    }
                    //seteo la line-profile-name
                    $strLineProfileName = $arrayParametrosDatos['line_profile'];
                    //verifico si es el primer servicio para el punto y que sea un datos
                    if( $booleanServicioNuevo && isset($strRespuestaLlamadaWs['LINE_PROFILE']) && !empty($strRespuestaLlamadaWs['LINE_PROFILE']) )
                    {
                        $strLineProfileName = $strRespuestaLlamadaWs['LINE_PROFILE'];
                        //actualizar line profile al resto de servicios
                        $arrayNombresTecnico    = array("L3MPLS","SAFECITYDATOS","SAFECITYWIFI","INTERNET","INTMPLS");
                        $arrayServiciosPunto    = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                                        ->createQueryBuilder('s')
                                                                        ->join("s.productoId", "p")
                                                                        ->join("s.puntoId", "pu")
                                                                        ->where("pu.id       = :puntoId")
                                                                        ->andWhere("s.estado = :estado")
                                                                        ->andWhere("p.nombreTecnico IN (:nombresTecnico)")
                                                                        ->setParameter('puntoId', $objServicio->getPuntoId()->getId())
                                                                        ->setParameter('estado',  "Activo")
                                                                        ->setParameter('nombresTecnico', array_values($arrayNombresTecnico))
                                                                        ->orderBy('s.id', 'ASC')
                                                                        ->getQuery()
                                                                        ->getResult();
                        foreach($arrayServiciosPunto as $objServicioPunto)
                        {
                            //verificar productos
                            $objProductoPunto = $objServicioPunto->getProductoId();
                            $objCaractTipoRed = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,
                                                                                                          'TIPO_RED',
                                                                                                          $objServicioPunto->getProductoId());
                            $objCaractMacOntPun = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,'MAC ONT',
                                                                                                            $objProductoPunto);
                            //se verifica si el servicio es tipo de red GPON
                            $booleanTipoRedGponPun = false;
                            if(is_object($objCaractTipoRed))
                            {
                                $arrayParVerTipoRedPun = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                                        ->getOne('NUEVA_RED_GPON_TN',
                                                                                                                'COMERCIAL',
                                                                                                                '',
                                                                                                                'VERIFICAR TIPO RED',
                                                                                                                'VERIFICAR_GPON',
                                                                                                                $objCaractTipoRed->getValor(),
                                                                                                                '',
                                                                                                                '',
                                                                                                                '');
                                if(isset($arrayParVerTipoRedPun) && !empty($arrayParVerTipoRedPun))
                                {
                                    $booleanTipoRedGponPun = true;
                                }
                            }
                            if(is_object($objCaractTipoRed) && $booleanTipoRedGponPun
                               && is_object($objCaractMacOntPun) && $objCaractMacOntPun->getValor() == $strMacOnt)
                            {
                                $objCaractLineProfilePun = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,
                                                                                                                     "LINE-PROFILE-NAME",
                                                                                                                     $objProductoPunto);
                                if(is_object($objCaractLineProfilePun))
                                {
                                    $objCaractLineProfilePun->setEstado('Eliminado');
                                    $objCaractLineProfilePun->setUsrUltMod($strUsrCreacion);
                                    $objCaractLineProfilePun->setFeUltMod(new \DateTime('now'));
                                    $this->emComercial->persist($objCaractLineProfilePun);
                                    $this->emComercial->flush();
                                }
                                //se ingresa la característica line profile name
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioPunto,$objProductoPunto,
                                                                                               "LINE-PROFILE-NAME",
                                                                                               $strLineProfileName,$strUsrCreacion);
                            }
                        }
                    }
                    //se ingresa la característica line profile name
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"LINE-PROFILE-NAME",
                                                                                   $strLineProfileName,$strUsrCreacion);
                    //ingresar característica principal
                    if(is_object($objServicioDatosSafe))
                    {
                        $objCaractLProDatosSafeCity = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                        'LINE-PROFILE-NAME',
                                                                                        $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractLProDatosSafeCity))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "LINE-PROFILE-NAME",
                                                                                           $strLineProfileName,
                                                                                           $strUsrCreacion);
                        }
                    }
                    //se ingresa la característica service-profile-name
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"SERVICE-PROFILE",
                                                                                   $arrayParametrosDatos['service_profile'],$strUsrCreacion);
                    //ingresar característica principal
                    if(is_object($objServicioDatosSafe))
                    {
                        $objCaractSProDatosSafeCity = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                        'SERVICE-PROFILE',
                                                                                        $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractSProDatosSafeCity))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "SERVICE-PROFILE",
                                                                                           $arrayParametrosDatos['service_profile'],
                                                                                           $strUsrCreacion);
                        }
                    }
                    //se ingresa las características de monitoreo
                    if(is_object($objServicioDatosSafe))
                    {
                        $objCaractGPortMonitoreo = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                        "GEM-PORT",
                                                                                        $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractGPortMonitoreo))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "GEM-PORT",
                                                                                           $arrayParametrosDatos['gemport_monitoreo'],
                                                                                           $strUsrCreacion);
                        }
                        $objCaractTTableMonitoreo = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                        "TRAFFIC-TABLE",
                                                                                        $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractTTableMonitoreo))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "TRAFFIC-TABLE",
                                                                                           $arrayParametrosDatos['traffic_table_monitoreo'],
                                                                                           $strUsrCreacion);
                        }
                        $objCaractTContMonitoreo = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                        "T-CONT",
                                                                                        $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractTContMonitoreo))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "T-CONT",
                                                                                           $arrayParametrosDatos['t_cont_monitoreo'],
                                                                                           $strUsrCreacion);
                        }
                        $objCaractMappingMonitoreo = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                        "ID-MAPPING",
                                                                                        $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractMappingMonitoreo))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "ID-MAPPING",
                                                                                           $arrayParametrosDatos['id_mapping_monitoreo'],
                                                                                           $strUsrCreacion);
                        }
                        $objCaractVlanMonitoreo = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                        "VLAN",
                                                                                        $objServicioDatosSafe->getProductoId());
                        if(!is_object($objCaractVlanMonitoreo))
                        {
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDatosSafe,
                                                                                           $objServicioDatosSafe->getProductoId(),
                                                                                           "VLAN",
                                                                                           $arrayParametrosDatos['vlan_monitoreo'],
                                                                                           $strUsrCreacion);
                        }
                    }
                    //se ingresa las características de datos
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"GEM-PORT",
                                                                                   $arrayDatosActivar['gemport_datos'],$strUsrCreacion);
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"TRAFFIC-TABLE",
                                                                                   $arrayDatosActivar['traffic_table_datos'],$strUsrCreacion);
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"T-CONT",
                                                                                   $arrayDatosActivar['t_cont_datos'],$strUsrCreacion);
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"ID-MAPPING",
                                                                                   $arrayDatosActivar['id_mapping_datos'],$strUsrCreacion);
                    //ingresar características admin WIFI
                    if($strBanderaWifiSafecity == "S" && isset($arrayDatosAdminActivar) && !empty($arrayDatosAdminActivar))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"GEM-PORT-ADMIN",
                                                                                       $arrayDatosAdminActivar['gemport_datos'],$strUsrCreacion);
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"TRAFFIC-TABLE-ADMIN",
                                                                                       $arrayDatosAdminActivar['traffic_table_datos'],
                                                                                       $strUsrCreacion);
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"T-CONT-ADMIN",
                                                                                       $arrayDatosAdminActivar['t_cont_datos'],$strUsrCreacion);
                    }
                }
                //verifico si es servicio camara vpn gpon safecity
                if($strStatus == "OK" && $strBanderaCamaraVpnSafecity == "S")
                {
                    //ingresamos la fps
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "FPS",
                                                                                   $arrayParametros["fpsCamara"], $strUsrCreacion);
                    //ingresamos la code
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "CODEC",
                                                                                   $arrayParametros["codecCamara"], $strUsrCreacion);
                    //ingresamos la resolucion
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "RESOLUCION",
                                                                                   $arrayParametros["resolucionCamara"], $strUsrCreacion);
                }

                if($strStatus == "OK" && $objProducto->getDescripcionProducto() == 'DIRECTLINK MPLS')
                {
                    //Consultamos los parametros para la creacion de la tarea
                    $arrayParamCreaTarea = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('CREAR_TAREA_INTERNA_SERVICIOS',
                                                     'TECNICO',
                                                     '',
                                                     '',
                                                     $objProducto->getId(),
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     $intIdEmpresa);
                    if( isset($arrayParamCreaTarea) && !empty($arrayParamCreaTarea) )
                    {
                        $strNombreTarea         = $arrayParamCreaTarea['valor2'];
                        $strObservacion         = $arrayParamCreaTarea['valor3'];
                        $strNombreDepartamento  = $arrayParamCreaTarea['valor4'];
                        $strUsrCreacionTarea    = isset($arrayParamCreaTarea['valor5']) && 
                                                  !empty($arrayParamCreaTarea['valor5']) ? $arrayParamCreaTarea['valor5'] : $strUsrCreacion;
                        $intIdPersonaEmpresaRol = $arrayParamCreaTarea['valor6'];
                        
                        $objCreationUser        = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                                ->findOneBy(array('login'=>$strUsrCreacionTarea));
                        $strEmpleado            = "";

                        if(is_object($objCreationUser))
                        {
                            $strEmpleado        = $objCreationUser->getNombres().' '.$objCreationUser->getApellidos();
                        }

                        $objInfoPunto = $this->emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                                                    ->find($objServicio->getPuntoId()->getId());
                        if(is_object($objInfoPunto))
                        {
                            $objPersona             = $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId();
                            $strNombreCliente       = $objPersona->getNombres() ? $objPersona->getNombres().' '.
                                                                                $objPersona->getApellidos() :
                                                                                $objPersona->getRazonSocial();      
                        }
                           
                        //Consultamos el $intIdPersonaEmpresaRol para obtener los datos de ese id
                        $objPerResponsableTarea =   $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                      ->find($intIdPersonaEmpresaRol);
                        $objPersonaResponsableTarea=$objPerResponsableTarea->getPersonaId();
                            
                        if(is_object($objPersonaResponsableTarea))
                        {
                            $strNombreCompleto   = $objPersonaResponsableTarea->getNombres()." ".$objPersonaResponsableTarea->getApellidos();
                                                        
                            $arrayJefeResponsable["idPersonaEmpresaRol"]    = $intIdPersonaEmpresaRol;
                            $arrayJefeResponsable["idPersona"]              = $objPersonaResponsableTarea->getId();
                            $arrayJefeResponsable["nombreCompleto"]         = $strNombreCompleto;
                        }
                        
                        $objCanton = $objInfoPunto->getSectorId()->getParroquiaId()->getCantonId();
                        
                        $arrayParametrosTarea = array(
                                                        'strIdEmpresa'          => $intIdEmpresa,
                                                        'strPrefijoEmpresa'     => $strPrefijoEmpresa == 'TNP'?'TN':$strPrefijoEmpresa,
                                                        'strNombreTarea'        => $strNombreTarea,
                                                        'strObservacion'        => $strObservacion,
                                                        'strNombreDepartamento' => $strNombreDepartamento,
                                                        'strNombreCliente'      => $strNombreCliente,
                                                        'strEmpleado'           => $strEmpleado,
                                                        'strUsrCreacion'        => $strUsrCreacionTarea,
                                                        'strIp'                 => $strIpCreacion,
                                                        'strOrigen'             => 'WEB-TN',
                                                        'arrayDestinatarios'    => array(),
                                                        'arrayJefeResponsable'  => $arrayJefeResponsable,
                                                        'strLogin'              => $objInfoPunto->getLogin(),
                                                        'intPuntoId'            => $objInfoPunto->getId(),
                                                        'strValidacionTags'     => 'NO',
                                                        'strCiudad'             => $objCanton->getNombreCanton()
                                                    );    
                        $arrayRespuestaCreacion     = $this->serviceSoporte->ingresarTareaInterna($arrayParametrosTarea);
                    }
                    
                    
                }

                if($strStatus == "OK" && $strBanderaWifiSafecity == "S" &&
                  isset($arrayParametros["ipControladora"]) && !empty($arrayParametros["ipControladora"])
                  && $arrayParametros["ipControladora"] !== '-Seleccione-')
                {
                    //ingresamos la ip controladora
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "IP CONTROLADORA",
                                                                                    $arrayParametros["ipControladora"], $strUsrCreacion);
                }
            }

            //se verifica si el servicio safecity
            if($booleanEsServicioSafecity)
            {
                $arrayRespuestaArray[] = array(
                                            'status'             => $strStatus,
                                            'mensaje'            => $strMensaje,
                                            'intIdPersonaCamara' => $intIdPersonaCamara,
                                            'intIdPerEmpRolCamara' => $intIdPerEmpRolCamara
                                        );
            }
            else
            {
                $arrayRespuestaArray[] = array('status'=>$strStatus, 'mensaje'=>$strMensaje);
            }
            return $arrayRespuestaArray;
        }
        catch (\Exception $e)
        {
            $this->serviceUtil->insertError('Telcos+', 
                                            'InfoActivarPuertoService->activarServicioPorNuevaTN', 
                                            $e->getMessage(),
                                            $arrayParametros['usrCreacion'], 
                                            $arrayParametros['ipCreacion']
                                           );
            
            $this->serviceUtil->relanzarExcepcion($e);
        }
    }
    
    /**
     * 
     * Metodo encargado de obtener IP LAN para telefonia 
     * 
     * @author John Vera <javera@telconet.ec>
     * @since 07-11-2018
     * @version 1.0
     * 
     * 
     * @param Array $arrayParametros 
     *                              [
     *                                  elementoPadre      indica el texto del elemento padre
     *                                  objServicio        indica el objetoServicio
     *                                  strPrefijoEmpresa  indica el prefijo de empresa
     *                                  strIpCreacion      indica la ip creación
     *                                  strUsrCreacion     indica al usuario que ingresa        
     *                              ]
     * @return $strMensaje
     */    
    
    public function getIpLanTelefonia($arrayParametros)
    {        
        $strElementoPadre              = $arrayParametros['elementoPadre'];
        $strUsrCreacion                = $arrayParametros['strUsrCreacion'];
        $strIpCreacion                 = $arrayParametros['strIpCreacion'];
        $strPrefijoEmpresa             = $arrayParametros['strPrefijoEmpresa'];
        $objServicio                   = $arrayParametros['objServicio'];
                        
        $strMensaje       = 'OK';
        
        try
        {
        
            $objElementoPadre = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                        ->findOneByNombreElemento($strElementoPadre);

            if(!is_object($objElementoPadre))
            {
                throw new \Exception("No Existen Referencia a Elemento Padre");
            }

            $arrayPrefijo=array('strDetalleNombre' => 'PREFIJO_RED', 'intElemento' => $objElementoPadre->getId(),'strEstado' => 'Activo');

            $arrayValor = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                               ->getUltimoDetalleElemento($arrayPrefijo);

            //-----------------------------------------------------------------------------
            //   Se asigna Red 1 para configuracion del Backbone ( pe con el Hub satelital )
            //-----------------------------------------------------------------------------
            $strMascara                             = trim('255.255.255.254');
            $arrayParametrosSubred                  = array();
            $arrayParametrosSubred['tipoAccion']    = "asignar";
            $arrayParametrosSubred['uso']           = "TELEFONIA";
            $arrayParametrosSubred['mascara']       = $strMascara;// mascara 31
            $arrayParametrosSubred['subredPrefijo'] = "10.".$arrayValor[0]['detalleValor'];


            $arraySubred = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')->provisioningSubred($arrayParametrosSubred);

            if(isset($arraySubred['subredId']) && $arraySubred['subredId']>0)
            {
                $strSubred    = $arraySubred['subredId'];
                $objSubredBb  = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')->find($strSubred);

                if(is_object($objSubredBb))
                {
                    $objSubredBb->setElementoId($objElementoPadre);
                    $this->emInfraestructura->persist($objSubredBb);
                    $this->emInfraestructura->flush();

                }
                else
                {
                    throw new \Exception("No Existen Subredes con máscara <b>".$arrayParametrosSubred['mascara']."</b> disponibles, "
                                         . "notificar a Sistemas");
                }
            }
            else
            {
                throw new \Exception("No Existen Subredes con máscara <b>".$arrayParametrosSubred['mascara']." y subred ".
                    $arrayParametrosSubred['subredPrefijo']." </b> disponibles, Notificar a Sistemas.");
            }                    

            $strIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                             ->getIpDisponibleBySubred($strSubred);

            if($strIp === 'NoDisponible')
            {
                throw new \Exception("No Existe IP Disponible, favor comunicarse con Sistemas!");
            }


            $objInfoIp = new InfoIp();
            $objInfoIp->setIp($strIp);
            $objInfoIp->setServicioId($objServicio->getId());
            $objInfoIp->setEstado("Activo");
            $objInfoIp->setSubredId($strSubred);
            $objInfoIp->setTipoIp('TELEFONIA');
            $objInfoIp->setVersionIp("IPV4");
            $objInfoIp->setMascara($strMascara);
            $objInfoIp->setUsrCreacion($strUsrCreacion);
            $objInfoIp->setFeCreacion(new \DateTime('now'));
            $objInfoIp->setIpCreacion($strIpCreacion);
            $this->emInfraestructura->persist($objInfoIp);
            $this->emInfraestructura->flush();  
            
            //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
            $objServicioHist = new InfoServicioHistorial();
            $objServicioHist->setServicioId($objServicio);
            $objServicioHist->setIpCreacion($strIpCreacion);
            $objServicioHist->setFeCreacion(new \DateTime('now'));
            $objServicioHist->setUsrCreacion($strUsrCreacion);
            $objServicioHist->setEstado('Activo');
            //se agrega codigo para llevar rastro de la ip asignada por el sistema Telcos
            $objServicioHist->setObservacion('La IP Lan asignada para telefonía es '.$strIp);
            $this->emComercial->persist($objServicioHist);          

            $objProductoTelefonia = $this->emComercial  ->getRepository('schemaBundle:AdmiProducto')
                                                        ->findOneBy(array('descripcionProducto' => 'COU LINEAS TELEFONIA FIJA', 
                                                                          'estado' => 'Activo'));

            if(is_object($objProductoTelefonia))
            {

                $arrayServiciosTelefonia = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                           ->findBy(array('puntoId'     => $objServicio->getPuntoId(),
                                                                          'productoId'  => $objProductoTelefonia->getId(),
                                                                          'estado'      => 'Pendiente'));

                foreach($arrayServiciosTelefonia as $objServicioTelefonia)
                {

                    $arrayParametros = array('intServicio'          => $objServicioTelefonia->getId(),
                                             'strIp'                => $strIpCreacion,
                                             'strUser'              => $strUsrCreacion,
                                             'strPrefijoEmpresa'    => $strPrefijoEmpresa,
                                             'boolProcesoActivacion'=> true);

                    $this->serviceTelefonia->solicitarFactibilidadTelefonia($arrayParametros);
                }
            }                    
        } 
        catch (\Exception $ex) 
        {
            $strMensaje = $ex->getMessage();
        }        
        
        return $strMensaje;        
    }
  
    /**
     * 
     * Metodo encargado de activar servicios PseudoPe
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 17-11-2016
     * @version 1.0
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 20-04-2017
     * @version 1.1 - Se adapta para activar internet dedicado bajo esquema pseudope
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 09-06-2017
     * @version 1.2 - Se adapta para activar internet mpls bajo esquema pseudope con UM Satelital
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 21-06-2017
     * @version 1.3 - Se adapta para activar servicios L3mpls con las dos subredes solicitadas ( Backbone y Vsat )
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 24-05-2018
     * @version 1.4 - Se envia descripcion de acuerdo a la Ultima milla del servicio para identificacion de NW
     * 
     * @author John Vera <javera@telconet.ec>
     * @since 7-11-2018
     * @version 1.5 - Se agrega validación para que soporte la activación para productos de LINEAS TELEFONIA FIJA
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6  28-03-2019 - Se envia la clase_servicio: INTERNET-HSRP y DATOS-HSRP para las ordenes de servicio que tienen definido
     *                            el esquema PE-HSRP
     * @since 1.5
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7  15-04-2019 - Se agrega lógica que permite validar el escenario de los SW de Telefónica(anillo  V-R1 y V-R2), la idea es mapear
     *                            estos valores por el valor real del anillo que para el caso de telefónica es 0
     * @since 1.6
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.8  19-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                            enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     * @since 1.7
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.9 01-06-2020 - Se agrega el id del servicio a la url 'configSW' del ws de networking para la validación del BW
     * @since 1.8
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 09-12-2020 - Se ingresa la solicitud de RPA licenciamiento para los equipos que requieran licencia.
     * @since 1.9
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.1 17-05-2021 - Se realiza la carga y descarga de los activos del cliente.
     *
     * @param Array $arrayParametros 
     *                              [
     *                                  serieNuevoCpe         Serie del nuevo CPE en activacipón
     *                                  modeloNuevoCpe        Modelo del nuevo CPE
     *                                  macNuevoCpe           MAC a ser configurado en el CPE por servicio activo
     *                                  propiedadNuevoCpe     Propiedad del CPE
     *                                  iosNuevoCpe           SO del CPE
     *                                  gestionNuevoCpe       Encargado de la gestion del CPE
     *                                  administraNuevoCpe    Administracion del CPE
     *                                  flagCpe               Indica si se requiere instalar en CPE nuevo o existente
     *                                  idServicioExisteCpe   Id de CPE existente
     *                                  interfaceCpeExistente Puerto wan de CPE existente
     *                                  macCpeExistente       MAC de CPE existente
     *                                  idServicio            id del Servicio a ser activado
     *                                  idEmpresa             id de la empresa Telconet
     *                                  usrCreacion           Usuario que dispara el proceso
     *                                  ipCreacion            Ip de donde es lanzado el proceso
     *                              ]
     * @return Array $arrayRespuesta [ status , mensaje ]
     * @throws type
     */
    public function activarServicioPseudoPeTN($arrayParametros)
    {
        try
        {            
            //datos cpe        
            $strSerieNuevoCpe       = $arrayParametros['serieNuevoCpe'];
            $strModeloNuevoCpe      = $arrayParametros['modeloNuevoCpe'];
            $strMacNuevoCpe         = $arrayParametros['macNuevoCpe'];
            $strPropiedadNuevoCpe   = $arrayParametros['propiedadNuevoCpe'];
            $strIosNuevoCpe         = $arrayParametros['iosNuevoCpe'];
            $strGestionNuevoCpe     = $arrayParametros['gestionNuevoCpe'];
            $strAdministraNuevoCpe  = $arrayParametros['administraNuevoCpe'];
            $strFlagCpe             = $arrayParametros['flagCpe'];
            $intServicioIdExisteCpe = $arrayParametros['idServicioExisteCpe'];      
            $strVlanNuevoCpe        = $arrayParametros['vlan'];
            $strUltimaMilla         = $arrayParametros['ultimaMilla'];

            //datos CPE para atar mismo CPE a varias MAC por Activacion
            $intIdInterfaceCpeExistente     = $arrayParametros['interfaceCpeExistente'];
            $strMacCpeExistente             = $arrayParametros['macCpeExistente'];

            //datos
            $intIdServicio          = $arrayParametros['idServicio'];
            $intIdEmpresa           = $arrayParametros['idEmpresa'];            
            $strUsrCreacion         = $arrayParametros['usrCreacion'];
            $strIpCreacion          = $arrayParametros['ipCreacion'];

            $strBanderaLineasBravco = $arrayParametros['strBanderaLineasBravco']?$arrayParametros['strBanderaLineasBravco']:"N";
            $objServicio            = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objServicioTecnico     = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneByServicioId($objServicio->getId());
          
            $objProducto            = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($arrayParametros['idProducto']);
            
            $usaUmExistente         = false;
            
            $this->serviceUtil->validaObjeto($objServicio,"No existe Servicio a ser activado");
            $this->serviceUtil->validaObjeto($objServicioTecnico,"No existe información Técnica del Servicio a ser activado");
            $this->serviceUtil->validaObjeto($objProducto,"No existe referencia del Producto ");

            //Se obtiene caracteristica si servicio se activa con ultima milla existente
            $objServProdCaractMismaUM   = $this->servicioGeneral
                                               ->getServicioProductoCaracteristica($objServicio,
                                                                                   'SERVICIO_MISMA_ULTIMA_MILLA',
                                                                                   $objServicio->getProductoId());

            if(is_object($objServProdCaractMismaUM))
            {
                $usaUmExistente  = true;
            }            
            
            //Se realiza validacion para que solo ejecute recalculo de BW para Servicios con tipo de enlace PRINCIPAL
            if($objServicioTecnico->getTipoEnlace() == 'PRINCIPAL')
            {
                //Subir bw del concentrador por activacion de nuevo servicio
                $arrayParametrosBw = array( 
                                            "objServicio"       => $objServicio,
                                            "usrCreacion"       => $strUsrCreacion,
                                            "ipCreacion"        => $strIpCreacion,
                                            "capacidadUnoNueva" => intval($arrayParametros['capacidadUno']),
                                            "capacidadDosNueva" => intval($arrayParametros['capacidadDos']),
                                            "operacion"         => "+",
                                            "accion"            => "Se actualiza Capacidades por Activación de "
                                                                   . "Servicio : <b>".$objServicio->getLoginAux()."<b>"
                                           );

                //Se actualiza las capacidades del Concentrador
                $this->servicioGeneral->actualizarCapacidadesEnConcentrador($arrayParametrosBw);
            }
            
            $strNombreTecnico     = $objProducto->getNombreTecnico();
                       
            if($strUltimaMilla != 'SATELITAL')
            {
                $objInterfaceElemento = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                                ->find($objServicioTecnico->getInterfaceElementoId());

                $this->serviceUtil->validaObjeto($objInterfaceElemento,"No existe Interface del Switch virtual referenciada");

                $arrayMacNueva[] = $strFlagCpe=='nuevo'?$strMacNuevoCpe:$strMacCpeExistente;
                $arrayMacVlan    = array($strVlanNuevoCpe=>$arrayMacNueva);

                //Se obtiene las capacidades de todos los servicios vinculados al sw
                $arrayCapacidades = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                            ->getResultadoCapacidadesPorInterface($objInterfaceElemento->getId());
                
                $strDescripcion = '';
                
                if($strUltimaMilla == 'Fibra Optica')
                {
                    $strDescripcion = '_fib';
                }
                if($strUltimaMilla == 'Radio')
                {
                    $strDescripcion = '_rad';
                }
                if($strUltimaMilla == 'UTP')
                {
                    $strDescripcion = '_utp';
                }
                
                if($objServicio->getdescripcionpresentafactura() == 'CANAL TELEFONIA')
                {
                    $arrayPeticiones['servicio']    = 'NETVOICE-L3MPLS';      
                }
                else
                {             
                    $arrayPeticiones['servicio']     = $strNombreTecnico;
                }                   

                $arrayPeticiones['url']          = 'configSW';
                $arrayPeticiones['accion']       = 'activar';                
                $arrayPeticiones['id_servicio']  = $objServicio->getId();
                $arrayPeticiones['nombreMetodo'] = 'InfoActivarPuertoService.activarServicioPseudoPeTN';
                $arrayPeticiones['sw']           = $objInterfaceElemento->getElementoId()->getNombreElemento();
                $arrayPeticiones['macVlan']      = $arrayMacVlan;
                $arrayPeticiones['user_name']    = $strUsrCreacion;
                $arrayPeticiones['user_ip']      = $strIpCreacion;       
                $arrayPeticiones['bw_up']        = intval($arrayCapacidades['totalCapacidad1']) + intval($arrayParametros['capacidadUno']);
                $arrayPeticiones['bw_down']      = intval($arrayCapacidades['totalCapacidad2']) + intval($arrayParametros['capacidadDos']);     
                $arrayPeticiones['login_aux']    = $objServicio->getLoginAux();
                $arrayPeticiones['descripcion']  = 'cce_'.$objServicio->getLoginAux().$strDescripcion;
                $arrayPeticiones['pto']          = $objInterfaceElemento->getNombreInterfaceElemento();
                $arrayPeticiones['anillo']       = $arrayParametros['anillo'];

                //Se valida si el anillo no es numérico caso telefónica, de ser así se asigna el valor de anillo mapeado
                $arrayParametrosAnilloByVlan["strValorAnillo"] = $arrayParametros['anillo'];
                $arrayValorAnillo                              = $this->servicioGeneral->getValorAnilloByParametro($arrayParametrosAnilloByVlan);

                if($arrayValorAnillo["status"] === "S")
                {
                    $arrayPeticiones['anillo'] = $arrayValorAnillo['anillo'];
                }

                $arrayRespuestaSw = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                $strStatus  = $arrayRespuestaSw['status'];
                $strMensaje = $arrayRespuestaSw['mensaje'];

                if($strStatus != 'OK')
                {
                    $arrayRespuesta = array('status'=>$strStatus, 'mensaje'=>$strMensaje);
                    return $arrayRespuesta;
                }
            }
            else
            {
                $strStatus  = 'OK';
                $strMensaje = 'OK';
            }                        
                        
            //Solo ejecutara accion en el Pe los servicios L3 o Satelitales ( IntMpls ) dado que no necesitan switch pero si pe
            if($strNombreTecnico == 'L3MPLS')
            {
                $strIpServicio     = $arrayParametros['ipServicio'];
                $strSubredServicio = $arrayParametros['subredServicio'];
                $strMascara        = $arrayParametros['mascaraSubredServicio'];
                $strGateway        = $arrayParametros['gwSubredServicio'];
                $strDescripcion    = $arrayParametros['loginAux'];

                //Obtener la Subred de la VSAT del cliente a ser enviada para configuracion
                //Obtener la informacion de la subred de Backbone escogida para configuracion
                if($strUltimaMilla == 'SATELITAL')
                {
                    //Para Satelital se envia la mascara establecida para VSAT como ip para enrutamiento a nivel de NW
                    $strIpServicio     = $arrayParametros['subredServicio'];

                    $objServProdCaract = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                  'SUBRED_VSAT',
                                                                                                  $objServicio->getProductoId());
                    if(is_object($objServProdCaract))
                    {
                        $objSubredBackbone = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objServProdCaract->getValor());

                        if(is_object($objSubredBackbone))
                        {
                            $strSubredServicio = $objSubredBackbone->getSubred();
                            $strMascara        = $objSubredBackbone->getMascara();
                            $strGateway        = $objSubredBackbone->getGateway();
                            $strDescripcion    = $arrayParametros['loginAux'].'_TO_HUB_SATELITAL_VLAN'.$arrayParametros['vlan'];
                        }
                        else
                        {
                            $arrayRespuesta = array("status"=>"ERROR", "mensaje"=>"No existe Subred creada para configuracion de Backbone");
                            return $arrayRespuesta;
                        }
                    }
                    else
                    {
                        $arrayRespuesta = array("status"=>"ERROR", "mensaje"=>"No existe referencia de Subred del cliente configurada");
                        return $arrayRespuesta;
                    }
                }
                //validaciones
                $arrayPeticiones = array();
                //*************Validar si la orden de servicio tiene seteado el esquema de Pe-Hsrp*************//
                $strBanderaServProdCaract = "N";
                $arrayParametrosProdCaract["strCaracteristica"] = "PE-HSRP";
                $arrayParametrosProdCaract["objProducto"]       = $objProducto;
                $arrayParametrosProdCaract["objServicio"]       = $objServicio;

                $strBanderaServProdCaract = $this->serviceCliente->consultaServicioProdCaract($arrayParametrosProdCaract);
                //*************Validar si la orden de servicio tiene seteado el esquema de Pe-Hsrp*************//

                if($objServicio->getdescripcionpresentafactura() == 'CANAL TELEFONIA')
                {
                    $arrayPeticiones['clase_servicio']    = 'NETVOICE-L3MPLS';
                }
                else
                {             
                    $arrayPeticiones['clase_servicio']        = $strNombreTecnico;
                }
                        
                //accion a ejecutar
                $arrayPeticiones['url']                   = 'configPE';
                $arrayPeticiones['accion']                = 'Activar';        
                $arrayPeticiones['sw']                    = '';
                $arrayPeticiones['vrf']                   = $arrayParametros['vrf'];
                $arrayPeticiones['pe']                    = $arrayParametros['elementoPadre'];
                $arrayPeticiones['anillo']                = '';
                $arrayPeticiones['vlan']                  = $arrayParametros['vlan'];
                $arrayPeticiones['subred']                = $strSubredServicio;
                $arrayPeticiones['mascara']               = $strMascara;
                $arrayPeticiones['gateway']               = $strGateway;
                $arrayPeticiones['rd_id']                 = $arrayParametros['rdId'];
                $arrayPeticiones['descripcion_interface'] = $arrayParametros['loginAux'];
                $arrayPeticiones['ip_bgp']                = $strIpServicio;
                $arrayPeticiones['asprivado']             = $arrayParametros['asPrivado'];
                $arrayPeticiones['nombre_sesion_bgp']     = $arrayParametros['loginAux'];
                $arrayPeticiones['default_gw']            = $arrayParametros['defaultGateway'];
                $arrayPeticiones['protocolo']             = $arrayParametros['protocolo'];
                $arrayPeticiones['servicio']              = $strNombreTecnico;
                $arrayPeticiones['login_aux']             = $strDescripcion;
                $arrayPeticiones['tipo_enlace']           = $arrayParametros['tipoEnlace'];
                $arrayPeticiones['banderaBravco']         = 'NO';
                $arrayPeticiones['weight']                = null;
                $arrayPeticiones['user_name']             = $strUsrCreacion;
                $arrayPeticiones['user_ip']               = $strIpCreacion;

                //Si es esquema Pe Hsrp se actualiza parametro clase servicio
                if($strBanderaServProdCaract === "S")
                {
                    $arrayPeticiones['banderaBravco']  = 'SI';
                    $arrayPeticiones['clase_servicio'] = $objProducto->getClasificacion().'-HSRP';
                }

                //Se envian a configurar lineas de monitoreo de enlaces de datos
                if($strBanderaLineasBravco === "S")
                {
                    $arrayPeticiones['razon_social'] = $arrayParametros['strRazonSocial'];
                    $arrayPeticiones['rt_export']    = $arrayParametros['strRouteTargetExport'];
                    $arrayPeticiones['rt_import']    = $arrayParametros['strRouteTargetImport'];
                }

                //Ejecucion del metodo via WS para realizar la configuracion en el Pe
                $arrayRespuestaWS = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                $strStatus  = $arrayRespuestaWS['status'];
                $strMensaje = $arrayRespuestaWS['mensaje'];
            }
            else
            {
                $strStatus  = 'OK';
                $strMensaje = 'OK';
            }

            $arrayEquipos       = array();
            $arrayCargaDescarga = array();

            if($strStatus == "OK")
            {
                if(!$usaUmExistente)
                {
                    //Se Valida que si se escogio nuevo CPE ( se proceda a realizar el flujo normal )
                    if($strFlagCpe == "nuevo")
                    {
                        //Almacenamos la serie del dispositivo cpe y el id de control para realizar la carga y descarga.
                        $arrayInfoActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                'intIdPersona'   => $arrayParametros['idTecnicoEncargado'],
                                                                'strNumeroSerie' => $strSerieNuevoCpe));

                        if ($arrayInfoActivo['status'])
                        {
                            $arrayEquipos[] = array('strNumeroSerie'  => $strSerieNuevoCpe,
                                                    'intIdControl'    => $arrayInfoActivo["result"][0]['idControl'],
                                                    'intCantidadEnt'  => 1,
                                                    'intCantidadRec'  => 1,
                                                    'strTipoArticulo' => 'Equipos');
                        }

                        $arrayParametrosCpe = array(
                                                    'nombreElementoCliente'         => $objServicio->getLoginAux(),
                                                    'modeloElementoNuevo'           => $strModeloNuevoCpe,
                                                    'serieElementoNuevo'            => $strSerieNuevoCpe,
                                                    'tipoElementoNuevo'             => 'CPE',
                                                    'macElementoNuevo'              => null,
                                                    'objServicio'                   => $objServicio,
                                                    'idEmpresa'                     => $intIdEmpresa,
                                                    'usrCreacion'                   => $strUsrCreacion,
                                                    'ipCreacion'                    => $strIpCreacion
                                                );                   

                        $objElementoCliente = $this->servicioGeneral->ingresarElementoClienteTNSinEnlace($arrayParametrosCpe);
                        
                        $this->serviceUtil->validaObjeto($objElementoCliente,"No pudo crearse Elemento Cliente a activar");

                        if($strPropiedadNuevoCpe == "TELCONET")
                        { 
                            $codigoArticuloElementoCliente  = "";
                            $strTipoArticulo                = "AF";
                            $strIdentificacionCliente       = "";

                            //actualizamos registro en el naf cpe
                            $pv_mensajeerror = str_repeat(' ', 1000);
                            $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                            . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                            . ":cantidad, :pv_mensajeerror); END;";
                            $stmt = $this->emNaf->getConnection()->prepare($sql);
                            $stmt->bindParam('codigoEmpresaNaf',        $intIdEmpresa);
                            $stmt->bindParam('codigoArticulo',          $codigoArticuloElementoCliente);
                            $stmt->bindParam('tipoArticulo',            $strTipoArticulo);
                            $stmt->bindParam('identificacionCliente',   $strIdentificacionCliente);
                            $stmt->bindParam('serieCpe',                $strSerieNuevoCpe);
                            $stmt->bindParam('cantidad',                intval(1));
                            $stmt->bindParam('pv_mensajeerror',         $pv_mensajeerror);
                            $stmt->execute();

                            if(strlen(trim($pv_mensajeerror)) > 0)
                            {
                                $arrayRespuesta = array("status"=>"NAF", "mensaje"=>"ERROR CPE NAF: ".$pv_mensajeerror);
                                return $arrayRespuesta;
                            }
                        }                   

                        //info_detalle_elemento propiedad
                        $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "PROPIEDAD", "ELEMENTO PROPIEDAD DE", 
                                                                        $strPropiedadNuevoCpe, $strUsrCreacion, $strIpCreacion);

                        //info_detalle_elemento gestion remota
                        $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "GESTION REMOTA", "ELEMENTO GESTION REMOTA",
                                                                        $strGestionNuevoCpe, $strUsrCreacion, $strIpCreacion); 

                        //info_detalle_elemento administra
                        $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "ADMINISTRA", "ELEMENTO ES ADMINISTRADO POR",
                                                                        $strAdministraNuevoCpe, $strUsrCreacion, $strIpCreacion);

                        //info_elemento ios
                        $objElementoCliente->setVersionOs($strIosNuevoCpe);
                        $this->emInfraestructura->persist($objElementoCliente);
                        $this->emInfraestructura->flush();

                        $objInterfaceElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                            ->findOneBy(array('nombreInterfaceElemento' => 'wan1',
                                                                              'estado'                  => 'not connect',
                                                                              'elementoId'              => $objElementoCliente->getId()
                                                                             ));
                        //CREAR SOLCITUD DE RPA LICENCIA
                        if(is_object($objElementoCliente))
                        {
                            //obtener el id de la marca del elemento
                            $intIdMarcaElemento     = $objElementoCliente->getModeloElementoId()->getMarcaElementoId()->getId();
                            //seteo el arreglo de los id de las marcas
                            $arrayIdMarcasLicencia  = array();
                            //obtengo las marcas de los elementos para licenciamiento
                            $arrayParamDetMarcas    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('RPA_MARCA_ELEMENTOS_LICENCIA',
                                                                    'TECNICO',
                                                                    '',
                                                                    '',
                                                                    $objProducto->getId(),
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $intIdEmpresa);
                            if(is_array($arrayParamDetMarcas) && !empty($arrayParamDetMarcas))
                            {
                                foreach($arrayParamDetMarcas as $arrayDetParametro)
                                {
                                    $arrayIdMarcasLicencia[] = $arrayDetParametro['valor2'];
                                }
                            }
                            //verifico si la marca requiere licenciamiento
                            if(in_array($intIdMarcaElemento, $arrayIdMarcasLicencia))
                            {
                                //obtengo el tipo de solicitud de rpa licencia
                                $objTipoSolicitudRpa    = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RPA LICENCIA",
                                                                                                  "estado"               => "Activo"));
                                if(is_object($objTipoSolicitudRpa))
                                {
                                    //ingreso la solicitud
                                    $objDetalleSolicitudRpa = new InfoDetalleSolicitud();
                                    $objDetalleSolicitudRpa->setServicioId($objServicio);
                                    $objDetalleSolicitudRpa->setTipoSolicitudId($objTipoSolicitudRpa);
                                    $objDetalleSolicitudRpa->setEstado("Pendiente");
                                    $objDetalleSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                    $objDetalleSolicitudRpa->setUsrCreacion($strUsrCreacion);
                                    $objDetalleSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                    $this->emComercial->persist($objDetalleSolicitudRpa);
                                    $this->emComercial->flush();
                                    //crear historial para la solicitud
                                    if(is_object($objDetalleSolicitudRpa))
                                    {
                                        $objHistorialSolicitudRpa = new InfoDetalleSolHist();
                                        $objHistorialSolicitudRpa->setDetalleSolicitudId($objDetalleSolicitudRpa);
                                        $objHistorialSolicitudRpa->setEstado("Pendiente");
                                        $objHistorialSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                        $objHistorialSolicitudRpa->setUsrCreacion($strUsrCreacion);
                                        $objHistorialSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                        $objHistorialSolicitudRpa->setIpCreacion($strIpCreacion);
                                        $this->emComercial->persist($objHistorialSolicitudRpa);
                                        $this->emComercial->flush();
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //Se obtiene la informacion del CPE existente y su respectivo puerto
                        $objInterfaceElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                               ->find($intIdInterfaceCpeExistente);     
                        if(is_object($objInterfaceElementoCliente))
                        {
                            $objElementoCliente      = $objInterfaceElementoCliente->getElementoId();
                        }
                    }
                    
                    $this->serviceUtil->validaObjeto($objInterfaceElementoCliente,"No existe Interface a conectar Servicio");

                    //conectar interface in del puerto disponible del cpe existente
                    $objInterfaceElementoCliente->setEstado("connected");
                    $this->emInfraestructura->persist($objInterfaceElementoCliente);
                    $this->emInfraestructura->flush();

                    //Guardar la MAC del CPE atada a la interface del equipo
                    //Determinar primero si existe CPE o ROSETA
                    $objInterfaceElementoCliente->setMacInterfaceElemento($strMacNuevoCpe);
                    $this->emInfraestructura->persist($objInterfaceElementoCliente);
                    $this->emInfraestructura->flush();

                    //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                    $objInfoDetalleInterface = new InfoDetalleInterface();
                    $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCliente);
                    $objInfoDetalleInterface->setDetalleNombre("servicio");
                    $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                    $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                    $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                    $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                    $this->emInfraestructura->persist($objInfoDetalleInterface);
                    $this->emInfraestructura->flush();

                    $objServicioTecnico->setElementoClienteId($objElementoCliente->getId());
                    $objServicioTecnico->setInterfaceElementoClienteId($objInterfaceElementoCliente->getId());
                    $this->emComercial->persist($objServicioTecnico);
                    $this->emComercial->flush();                
                }
                else //Si utiliza Ultima Milla Existente
                {
                    //Se obtiene la data tecnica del servicio del cual se esta referenciando
                    $objServicioTecnicoCpeExiste  = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                         ->findOneBy(array("servicioId" => $intServicioIdExisteCpe));
                    
                    $this->serviceUtil->validaObjeto($objServicioTecnicoCpeExiste,"No existe informacion tecnica para obtener elemento del cliente");

                    //Interface escogida del mismo CPE para enganchar la nueva MAC del servicio a Activar
                    $objInterfaceElementoCpeExistente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                ->find($intIdInterfaceCpeExistente);

                    if(is_object($objInterfaceElementoCpeExistente))
                    {
                        //Se setea el puerto del CPE con al informacion del Servicio configurado y se cambia a estado "connected" 
                        //En caso de estar ya conectada la interface se continua a agregar el servicio a la referencia de la interface
                        $objInterfaceElementoCpeExistente->setMacInterfaceElemento($strMacCpeExistente);
                        $objInterfaceElementoCpeExistente->setEstado("connected");
                        $this->emInfraestructura->persist($objInterfaceElementoCpeExistente);
                        $this->emInfraestructura->flush(); 

                        //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                        $objInfoDetalleInterface = new InfoDetalleInterface();
                        $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCpeExistente);
                        $objInfoDetalleInterface->setDetalleNombre("servicio");
                        $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                        $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                        $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                        $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                        $this->emInfraestructura->persist($objInfoDetalleInterface);
                        $this->emInfraestructura->flush();
                    }

                    //guardar cpe en servicio tecnico
                    $objServicioTecnico->setElementoClienteId($objServicioTecnicoCpeExiste->getElementoClienteId());
                    $objServicioTecnico->setInterfaceElementoClienteId($objServicioTecnicoCpeExiste->getInterfaceElementoClienteId());
                    $this->emComercial->persist($objServicioTecnico);
                    $this->emComercial->flush();
                }
                
                //si es canal telefonia reservo la ip LAN
                if($objServicio->getdescripcionpresentafactura() == 'CANAL TELEFONIA')
                {
                    
                    $objEmpresa  = $this->emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')->find($intIdEmpresa);
                    
                    if(is_object($objEmpresa))
                    {
                        $strResultIp = $this->getIpLanTelefonia(array(  'elementoPadre'     => $arrayParametros['elementoPadre'],
                                                                        'strUsrCreacion'    => $strUsrCreacion,
                                                                        'strIpCreacion'     => $strIpCreacion,
                                                                        'strPrefijoEmpresa' => $objEmpresa->getPrefijo(),
                                                                        'objServicio'       => $objServicio));
                        if($strResultIp != 'OK')
                        {
                            throw new \Exception($strResultIp);
                        }
                    }
                    

                }
                                           
                //REGISTRAMOS LOS EQUIPOS DEL CLIENTE QUE SE ENCUENTRAN EN EL NODO.
                if (isset($arrayParametros['arrayDipositivosNodo']) && !empty($arrayParametros['arrayDipositivosNodo']))
                {
                    foreach ($arrayParametros['arrayDipositivosNodo'] as $intIdx => $arrayDipositivoNodo)
                    {
                        //Almacenamos la serie de los dispositivo en nodo y el id de control para realizar la carga y descarga.
                        $strMacDispositivo = 'NA';
                        $arrayInfoActivos  = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                'intIdPersona'   => $arrayParametros['idTecnicoEncargado'],
                                                                'strNumeroSerie' => $arrayDipositivoNodo['serieElemento']));

                        if ($arrayInfoActivos['status'])
                        {
                            $arrayInfoActivo   = $arrayInfoActivos['result'][0];
                            $strMacDispositivo = $arrayInfoActivo['macElemento'];
                            $intIdControl      = $arrayInfoActivo['idControl'];
                            $arrayEquipos[]    = array('strNumeroSerie'  => $arrayDipositivoNodo['serieElemento'],
                                                       'intIdControl'    => $intIdControl,
                                                       'intCantidadEnt'  => 1,
                                                       'intCantidadRec'  => 1,
                                                       'strTipoArticulo' => 'Equipos');
                        }

                        $intContador       = $intIdx + 1;
                        $strNombre         = "nodo$intContador-".$objServicio->getLoginAux();
                        $arrayElementoNodo = array('nombreElementoCliente'       => $strNombre,
                                                   'nombreModeloElementoCliente' => $arrayDipositivoNodo['modeloElemento'],
                                                   'serieElementoCliente'        => $arrayDipositivoNodo['serieElemento'],
                                                   'boolEsUbicacionNodo'         => true,
                                                   'strMacDispositivo'           => $strMacDispositivo,
                                                   'objServicio'                 => $objServicio,
                                                   'intIdEmpresa'                => $intIdEmpresa,
                                                   'usrCreacion'                 => $strUsrCreacion,
                                                   'ipCreacion'                  => $strIpCreacion);

                        $strRespuesta = $this->servicioGeneral->ingresarElementoClienteTN($arrayElementoNodo,"");

                        if ($strRespuesta !== "" && is_string($strRespuesta))
                        {
                            $arrayRespuesta[] = array("status"  => "INGRESAR-DISPOSITIVO-NODO",
                                                      "mensaje" =>  $strRespuesta);
                            return $arrayRespuesta;
                        }

                        //Actualizamos el dispositivo en el Naf.
                        $strCodigoArticulo        = '';
                        $strTipoArticulo          = 'AF';
                        $strIdentificacionCliente = '';
                        $strMensajeError          = str_repeat(' ',1000);

                        $strSql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf,"
                                                                            . ":codigoArticulo,"
                                                                            . ":tipoArticulo,"
                                                                            . ":identificacionCliente,"
                                                                            . ":serieCpe,"
                                                                            . ":cantidad,"
                                                                            . ":pv_mensajeerror); END;";

                        $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                        $objStmt->bindParam('codigoEmpresaNaf'     , $intIdEmpresa);
                        $objStmt->bindParam('codigoArticulo'       , $strCodigoArticulo);
                        $objStmt->bindParam('tipoArticulo'         , $strTipoArticulo);
                        $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                        $objStmt->bindParam('serieCpe'             , $arrayDipositivoNodo['serieElemento']);
                        $objStmt->bindParam('cantidad'             , intval(1));
                        $objStmt->bindParam('pv_mensajeerror'      , $strMensajeError);
                        $objStmt->execute();

                        if (strlen(trim($strMensajeError)) > 0)
                        {
                            $arrayRespuesta[] = array("status"  => "NAF",
                                                      "mensaje" => "DISPOSITIVO NODO: ".$strMensajeError);
                            return $arrayRespuesta;
                        }
                    }
                }

                //LLAMADA AL SERVICE PARA REALIZAR LA CARGA Y DESCARGA DEL ACTIVO.
                if (!empty($arrayEquipos) && count($arrayEquipos) > 0)
                {
                    $arrayCargaDescarga['strUsuario']              =  $strUsrCreacion;
                    $arrayCargaDescarga['strIpUsuario']            =  $strIpCreacion;
                    $arrayCargaDescarga['strTipoRecibe']           = 'Cliente';
                    $arrayCargaDescarga['intIdServicio']           =  $objServicio->getId();
                    $arrayCargaDescarga['intIdEmpleado']           =  $arrayParametros['idTecnicoEncargado'];
                    $arrayCargaDescarga['intIdEmpresa']            =  $intIdEmpresa;
                    $arrayCargaDescarga['strTipoActividad']        = 'Instalacion';
                    $arrayCargaDescarga['strTipoTransaccion']      = 'Nuevo';
                    $arrayCargaDescarga['strObservacion']          = 'Instalacion del servicio';
                    $arrayCargaDescarga['arrayEquipos']            =  $arrayEquipos;
                    $arrayCargaDescarga['strEstadoSolicitud']      = 'Asignada';
                    $arrayCargaDescarga['strDescripcionSolicitud'] = 'SOLICITUD PLANIFICACION';
                    $arrayResCarDes = $this->serviceInfoElemento->cargaDescargaActivos($arrayCargaDescarga);

                    if (!$arrayResCarDes['status'])
                    {
                        $arrayRespuesta[] = array("status"  => "NAF",
                                                  "mensaje" => "DISPOSITIVOS CLIENTE: ".$arrayResCarDes['message']);
                        return $arrayRespuesta;
                    }
                }
            }

            $arrayRespuesta = array('status'=>$strStatus, 'mensaje'=>$strMensaje);
            return $arrayRespuesta;
        }
        catch (\Exception $e)
        {
            throw ($e);
        }
    }
    
    /**
     * Metodo encargo de realizar la activacion de Servicios de INTERNET/DATOS de DATACENTER
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 27-09-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 18-04-2018 - Se adapta logica para realizar activacion para DATOS DC
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 23-07-2018 - Se valida que sólo los servicios de DATOSDC que no sean concentradores pida la información de ENLACE_DATOS
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 08-08-2018 - Se realizan ajustes para activar servicios de datacenter que utilizan el mismo cpe del punto
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 26-09-2018 - Se realizan ajustes para truncar el parámetro name_route a 25 caracteres, debido a que existe una restricción
     *                           de máximo de caracteres
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5  15-04-2019 - Se agrega lógica que permite validar el escenario de los SW de Telefónica(anillo  V-R1 y V-R2), la idea es mapear
     *                            estos valores por el valor real del anillo que para el caso de telefónica es 0
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 26-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                           enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.7 01-06-2020 - Se agrega el id del servicio a la url 'configSW' del ws de networking para la validación del BW
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 09-12-2020 - Se ingresa la solicitud de RPA licenciamiento para los equipos que requieran licencia.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.9 20-05-2021 - Se realiza la carga y descarga de los activos del cliente.
     *
     * @param Array $arrayParametros
     *                              [
     *                                  serieNuevoCpe         Serie del nuevo CPE en activacipón
     *                                  modeloNuevoCpe        Modelo del nuevo CPE
     *                                  macNuevoCpe           MAC a ser configurado en el CPE por servicio activo
     *                                  propiedadNuevoCpe     Propiedad del CPE
     *                                  iosNuevoCpe           SO del CPE
     *                                  gestionNuevoCpe       Encargado de la gestion del CPE
     *                                  administraNuevoCpe    Administracion del CPE
     *                                  flagCpe               Indica si se requiere instalar en CPE nuevo o existente
     *                                  idServicioExisteCpe   Id de CPE existente
     *                                  interfaceCpeExistente Puerto wan de CPE existente
     *                                  macCpeExistente       MAC de CPE existente
     *                                  idServicio            id del Servicio a ser activado
     *                                  idEmpresa             id de la empresa Telconet
     *                                  usrCreacion           Usuario que dispara el proceso
     *                                  ipCreacion            Ip de donde es lanzado el proceso
     *                                  vlanLan               Vlan LAN
     *                                  vlnaWan               Vlan WAN
     *                              ]
     * @return Array $arrayRespuesta [ status , mensaje ]
     */
    public function activarServicioDataCenter($arrayParametros)
    {
        try
        {
            //datos cpe        
            $strNombreCpe           = $arrayParametros['nombreNuevoCpe'];
            $strSerieNuevoCpe       = $arrayParametros['serieNuevoCpe'];
            $strModeloNuevoCpe      = $arrayParametros['modeloNuevoCpe'];
            $strMacNuevoCpe         = $arrayParametros['macNuevoCpe'];
            $strPropiedadNuevoCpe   = $arrayParametros['propiedadNuevoCpe'];
            $strIosNuevoCpe         = $arrayParametros['iosNuevoCpe'];
            $strGestionNuevoCpe     = $arrayParametros['gestionNuevoCpe'];
            $strAdministraNuevoCpe  = $arrayParametros['administraNuevoCpe'];
            $strFlagCpe             = $arrayParametros['flagCpe'];
            $intServicioIdExisteCpe = $arrayParametros['idServicioExisteCpe'];
            $strDescripcionEquipo   = $arrayParametros['descripcionNuevoCpe'];

            //datos cpe existente
            $strPropiedadExisteCpe      = $arrayParametros['propiedadExisteCpe'];
            $strNombreExisteCpe         = $arrayParametros['nombreExisteCpe'];
            $strMacExisteCpe            = $arrayParametros['macExisteCpe'];

            //datos CPE para atar mismo CPE a varias MAC por Activacion
            $intIdInterfaceCpeExistente     = $arrayParametros['interfaceCpeExistente'];
            $strMacCpeExistente             = $arrayParametros['macCpeExistente'];

            //datos
            $intIdServicio          = $arrayParametros['idServicio'];
            $intIdEmpresa           = $arrayParametros['idEmpresa'];
            $strUsrCreacion         = $arrayParametros['usrCreacion'];
            $strIpCreacion          = $arrayParametros['ipCreacion'];
            $strVlanLan             = $arrayParametros['strVlanLan'];
            $strVlanWan             = $arrayParametros['strVlanWan'];
            
            //tipo equipo
            $strSiglaEquipo         = $arrayParametros['siglaEquipo'];
            $strPuertoRemoto        = $arrayParametros['puertoRemoto'];

            $strBanderaLineasBravco = $arrayParametros['strBanderaLineasBravco']?$arrayParametros['strBanderaLineasBravco']:"N";
            $strTipoRecursos        = '';
            $usaUmExistente         = false;

            //Se asignan valores existentes del cpe del punto
            if($strFlagCpe != "nuevo")
            {
                $strPropiedadNuevoCpe = $strPropiedadExisteCpe;
                $strNombreCpe         = $strNombreExisteCpe;
                $strMacNuevoCpe       = $strMacExisteCpe;
            }

            $objServicio                    = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objServicioTecnico             = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                   ->findOneByServicioId($objServicio->getId());
            
            $objElemento                    = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                   ->find($objServicioTecnico->getElementoId());
            //Puerto del NEXUS
            $objInterfaceElemento           = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoId());                        
            
            //Se obtiene caracteristica si servicio se activa con ultima milla existente
            $objServProdCaractMismaUM       = $this->servicioGeneral
                                                   ->getServicioProductoCaracteristica($objServicio,
                                                                                      'SERVICIO_MISMA_ULTIMA_MILLA',
                                                                                      $objServicio->getProductoId());
            if(is_object($objServProdCaractMismaUM))
            {
                $usaUmExistente  = true;
            }       
            else
            {                        
                $arrayParametrosTieneMismaUM                = array(); 
                $arrayParametrosTieneMismaUM['idServicio']  = $objServicio->getId();
                $arrayParametrosTieneMismaUM['elementoId']  = $objServicioTecnico->getElementoId();
                $arrayParametrosTieneMismaUM['interfaceId'] = $objServicioTecnico->getInterfaceElementoId();

                //Se determina si servicio proviene de una misma Ultima milla siempre y cuando pertenezca al mismo punto
                $usaUmExistente = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->tieneMismaUltimaMilla($arrayParametrosTieneMismaUM);
            }

            //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
            $objServProdCaractTipoRecursos =   $this->servicioGeneral
                                                    ->getServicioProductoCaracteristica($objServicio,
                                                                                        'TIPO_RECURSO_DC',
                                                                                        $objServicio->getProductoId());
            if(is_object($objServProdCaractTipoRecursos))
            {
                $strTipoRecursos = $objServProdCaractTipoRecursos->getValor();
            }

            $objProducto      = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($arrayParametros['idProducto']);
            $strStatus        = 'OK';
            $strNombreTecnico = $objProducto->getNombreTecnico();
            
            if(($strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'DATOS DC SDWAN') && $objProducto->getEsConcentrador() != 'SI')
            {
                $objServProdCaractEnlaceDatos  =   $this->servicioGeneral
                                                        ->getServicioProductoCaracteristica($objServicio,
                                                                                            'ENLACE_DATOS',
                                                                                            $objServicio->getProductoId());
                if(!is_object($objServProdCaractEnlaceDatos))
                {
                    $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'Para Activar es necesario tener enlazado un Concentrador');
                    return $arrayRespuesta;
                }
            }

            //Solo los recursos dedicados ingresan y ejecutan utilizando el WS de NW
            if($strTipoRecursos == 'dedicado' || ($strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'DATOS DC SDWAN'))
            {
                //Obtener la MAC del fortigate
                $arrayParametrosDet =   $this->emInfraestructura->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne("FIREWALLS DATA CENTER", 
                                                                         "TECNICO", 
                                                                         "", 
                                                                         "", 
                                                                         "", 
                                                                         $arrayParametros['strFirewallDC'], 
                                                                         "",
                                                                         "",
                                                                         "",
                                                                         $arrayParametros['idEmpresa']
                                                                       );
                $strMacFortiGate = '';
                
                if(!empty($arrayParametrosDet))
                {
                    $strMacFortiGate = $arrayParametrosDet['valor3'];
                }
                
                //Se obtiene las capacidades de todos los servicios vinculados al sw
                $arrayCapacidades = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                            ->getResultadoCapacidadesPorInterface($objInterfaceElemento->getId());
                
                $arrayMacNueva[] = $strMacFortiGate;
                
                //Mac y Vlans por servicio activos en el puerto
                $arrayMacVlan = array( $strVlanWan => $arrayMacNueva );
                
                $strNombreDispositivo = '';
                
                if($strPropiedadNuevoCpe == "TELCONET")
                {
                    $strNombreDispositivo = $strNombreCpe;
                    $strSiglaEquipo       = '';
                }
                else
                {
                    $strNombreDispositivo = $objServicio->getLoginAux();
                    $strSiglaEquipo       = $strSiglaEquipo.'_';
                }

                $objInfoSolucionDet = $this->emComercial->getRepository('schemaBundle:InfoSolucionDet')
                        ->findOneBy(array('servicioId' => $objServicio->getId(),'estado'=>'Activo'));
                $objInfoSolucionCab = is_object($objInfoSolucionDet) ? $objInfoSolucionDet->getSolucionCabId() : null;

                $objServicioAlquilerEspacio = null;
                $strFilaRack                = 'FilaXRackX';
                
                if (is_object($objInfoSolucionCab))
                {
                    $arrayParametrosSolucion                  = array();
                    $arrayParametrosSolucion['intSecuencial'] = $objInfoSolucionCab->getNumeroSolucion();
                    $arrayServiciosGrupo = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                            ->getArrayServiciosPorGrupoSolucion($arrayParametrosSolucion);

                    foreach($arrayServiciosGrupo as $objServicioGrupo)
                    {
                        $indIdProducto           = $objServicioGrupo->getProductoId()->getId();
                        $strProductoAlqEspacioDC = $objServicioGrupo->getProductoId()->getDescripcionProducto();                       
                        
                        if($objServicioGrupo != $objServicio)
                        {
                            $arrayFilasJaulas = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('PRODUCTOS ALQUILER ESPACIO', 
                                                                      'COMERCIAL', 
                                                                      '',
                                                                      '',
                                                                      $indIdProducto,
                                                                      $strProductoAlqEspacioDC,
                                                                      '',
                                                                      '', 
                                                                      '', 
                                                                      $arrayParametros['idEmpresa']);
                             
                            if(!empty($arrayFilasJaulas))
                            {
                                $objServicioAlquilerEspacio = $objServicioGrupo;
                            }
                        }                        
                    }
                }
                
                if(empty($strPuertoRemoto) || !$strPuertoRemoto)
                {
                    $strPuertoRemoto = 'XX';
                }

                if(is_object($objServicioAlquilerEspacio))
                {
                    //Llamada al web-service que consulta la información del cuarto de TI.
                    $arrayRequest    = array ('servicioId' => $objServicioAlquilerEspacio->getId());
                    $arrayResponseWs = $this->objContainer->get('comercial.InfoSolucion')->WsPostDc(
                            array('strOpcion'    => 'soluciondc',
                                  'strEndPoint'  => 'listarCuartoTiServicio',
                                  'arrayRequest' =>  $arrayRequest));

                    if ($arrayResponseWs['status'] && !empty($arrayResponseWs['data']))
                    {
                        $strFilaRack             = 'JAULA';
                        $strTipoEspacioAlquilado =  $arrayResponseWs['data'][0]['descripcionRecurso'];

                        if (strpos($strTipoEspacioAlquilado, 'RACK') !== false)
                        {
                            $arrayJsonFactibilidad = json_decode(json_encode($arrayResponseWs['data']));
                            $strFilaRack           = $arrayJsonFactibilidad[0]->nombreFila.'-'.$arrayJsonFactibilidad[0]->nombreRack;
                        }
                    }
                }

                //Crear description a enviar al WS para transaccionar sobre los Nexus 5k
                $strDescripcion = $strSiglaEquipo.$strNombreDispositivo.'_Eth'.$strPuertoRemoto.'_'.str_replace(" ","",$strFilaRack);

                $arrayPeticiones                 = array();
                //accion a ejecutar
                $arrayPeticiones['url']          = 'configSW';
                $arrayPeticiones['accion']       = 'activar';                
                $arrayPeticiones['id_servicio']  = $objServicio->getId();
                $arrayPeticiones['nombreMetodo'] = 'InfoActivarPuertoService.activarServicioDataCenter';
                $arrayPeticiones['sw']           = $objElemento->getNombreElemento();
                $arrayPeticiones['macVlan']      = $arrayMacVlan;
                $arrayPeticiones['user_name']    = $strUsrCreacion;
                $arrayPeticiones['user_ip']      = $strIpCreacion;       
                $arrayPeticiones['bw_up']        = intval($arrayCapacidades['totalCapacidad1']) + intval($arrayParametros['capacidadUno']);
                $arrayPeticiones['bw_down']      = intval($arrayCapacidades['totalCapacidad2']) + intval($arrayParametros['capacidadDos']);     
                $arrayPeticiones['servicio']     = $strNombreTecnico;
                $arrayPeticiones['login_aux']    = $objServicio->getLoginAux();
                $arrayPeticiones['descripcion']  = $strDescripcion;
                $arrayPeticiones['pto']          = $objInterfaceElemento->getNombreInterfaceElemento();
                $arrayPeticiones['anillo']       = $arrayParametros['anillo'];

                //Se valida si el anillo no es numérico caso telefónica, de ser así se asigna el valor de anillo mapeado
                $arrayParametrosAnilloByVlan["strValorAnillo"] = $arrayParametros['anillo'];
                $arrayValorAnillo                              = $this->servicioGeneral->getValorAnilloByParametro($arrayParametrosAnilloByVlan);

                if($arrayValorAnillo["status"] === "S")
                {
                    $arrayPeticiones['anillo'] = $arrayValorAnillo['anillo'];
                }

                //Ejecucion del metodo via WS para realizar la configuracion del SW
                $arrayRespuestaWS = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                $strStatus  = $arrayRespuestaWS['status'];
                $strMensaje = $arrayRespuestaWS['mensaje']; 
                
                if($strStatus!= 'OK')
                {
                    $arrayRespuesta = array('status' => $strStatus, 'mensaje' => $strMensaje);
                    return $arrayRespuesta;
                }
                
                if($strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'DATOS DC SDWAN')
                {
                    $arrayParametrosBw = array( 
                                                "objServicio"       => $objServicio,
                                                "usrCreacion"       => $arrayPeticiones['usrCreacion'],
                                                "ipCreacion"        => $arrayPeticiones['ipCreacion'],
                                                "capacidadUnoNueva" => intval($arrayParametros['capacidadUno']),
                                                "capacidadDosNueva" => intval($arrayParametros['capacidadDos']),
                                                "operacion"         => "+",
                                                "accion"            => "Se actualiza Capacidades por Activación de "
                                                                       . "Servicio DatosDC: <b>".$objServicio->getLoginAux()."<b>"
                                               );

                    //Se actualiza las capacidades del Concentrador
                    $this->servicioGeneral->actualizarCapacidadesEnConcentrador($arrayParametrosBw);
                }
                
                //Obtener la informacion de Subred del Servicio
                $objInfoIp = $this->emInfraestructura->getRepository("schemaBundle:InfoIp")
                                                     ->findOneBy(array('servicioId' => $objServicio->getId(),
                                                                       'estado'     => 'Activo'));
                
                $objSubred = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objInfoIp->getSubredId());
                
                if(!is_object($objSubred))
                {
                    $arrayRespuesta = array("status"=>"ERROR", "mensaje"=>"No existe Subred pública para realizar enrutamiento");
                    return $arrayRespuesta;
                }
                
                //Ejecutar PE
                $strSubredServicio = '';
                $strMascara        = '';
                $strGateway        = '';
                $strIpServicio     = '';
                
                if($strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'INTERNET DC SDWAN')
                {
                    $objServProdCaractSubredEnganche   =   $this->servicioGeneral
                                                                ->getServicioProductoCaracteristica($objServicio,
                                                                                                    'SUBRED_ENGANCHE',
                                                                                                    $objServicio->getProductoId());
                    if(is_object($objServProdCaractSubredEnganche))
                    {
                        $objSubredEnganche = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")
                                                                     ->find($objServProdCaractSubredEnganche->getValor());

                        if(is_object($objSubredEnganche))
                        {
                            $strSubredServicio = $objSubredEnganche->getSubred();
                            $strMascara        = $objSubredEnganche->getMascara();
                            $strGateway        = $objSubredEnganche->getGateway();
                            $strIpServicio     = $objSubredEnganche->getSubred();
                        }
                        else
                        {
                            $arrayRespuesta = array("status"=>"ERROR", "mensaje"=>"No existe Subred de Enganche creada para configuracion de Backbone");
                            return $arrayRespuesta;
                        }
                    }
                }
                else
                {
                    $strSubredServicio = $objSubred->getSubred();
                    $strMascara        = $objSubred->getMascara();
                    $strGateway        = $objSubred->getGateway();
                    $strIpServicio     = $objSubred->getSubred();
                }

                //Ejecucion a nivel del PE del Servicios
                $arrayPeticiones                          = array();
                $arrayPeticiones['url']                   = 'configPE';
                $arrayPeticiones['accion']                = 'Activar';        
                $arrayPeticiones['sw']                    = $objElemento->getNombreElemento();
                $arrayPeticiones['clase_servicio']        = $strNombreTecnico=='DATOSDC'?'DATOSDC-L3':$strNombreTecnico;
                $arrayPeticiones['vrf']                   = $arrayParametros['vrf'];
                $arrayPeticiones['pe']                    = $arrayParametros['elementoPadre'];
                $arrayPeticiones['anillo']                = $arrayParametros['anillo'];
                $arrayPeticiones['vlan']                  = $strVlanWan;
                $arrayPeticiones['subred']                = $strSubredServicio;
                $arrayPeticiones['mascara']               = $strMascara;
                $arrayPeticiones['gateway']               = $strGateway;
                $arrayPeticiones['rd_id']                 = $arrayParametros['rdId'];
                $arrayPeticiones['descripcion_interface'] = $strDescripcion;
                $arrayPeticiones['ip_bgp']                = $strIpServicio;
                $arrayPeticiones['asprivado']             = $arrayParametros['asPrivado'];
                $arrayPeticiones['nombre_sesion_bgp']     = $arrayParametros['loginAux'];
                $arrayPeticiones['default_gw']            = $strGateway;
                $arrayPeticiones['protocolo']             = $arrayParametros['protocolo'];
                $arrayPeticiones['servicio']              = $strNombreTecnico;
                $arrayPeticiones['login_aux']             = $objServicio->getLoginAux();
                $arrayPeticiones['tipo_enlace']           = $arrayParametros['tipoEnlace'];
                $arrayPeticiones['banderaBravco']         = 'NO';
                $arrayPeticiones['weight']                = null;
                $arrayPeticiones['user_name']             = $strUsrCreacion;
                $arrayPeticiones['user_ip']               = $strIpCreacion;

                //Se valida si el anillo no es numérico caso telefónica, de ser así se asigna el valor de anillo mapeado
                $arrayParametrosAnilloByVlan["strValorAnillo"] = $arrayParametros['anillo'];
                $arrayValorAnillo                              = $this->servicioGeneral->getValorAnilloByParametro($arrayParametrosAnilloByVlan);

                if($arrayValorAnillo["status"] === "S")
                {
                    $arrayPeticiones['anillo'] = $arrayValorAnillo['anillo'];
                }

                //Se envian a configurar lineas de monitoreo de enlaces de datos
                if($strBanderaLineasBravco === "S")
                {
                    $arrayPeticiones['razon_social'] = $arrayParametros['strRazonSocial'];
                    $arrayPeticiones['rt_export']    = $arrayParametros['strRouteTargetExport'];
                    $arrayPeticiones['rt_import']    = $arrayParametros['strRouteTargetImport'];
                }

                //Ejecucion del metodo via WS para realizar la configuracion en el Pe
                $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                $strStatus   = $arrayRespuesta['status'];
                $strMensaje  = $arrayRespuesta['mensaje'];

                if($strStatus!='OK')
                {
                    $arrayRespuesta = array('status' => $strStatus, 'mensaje' => $strMensaje);
                    return $arrayRespuesta;
                }
                 
                if($strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'INTERNET DC SDWAN')
                {
                    //Obtener la Subred /29 privada para enviar a configurar en los ASR
                    //Obtener la 4ta IP de la red Privada /29
                    $strIpEngancge = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->getIpDisponibleBySubred($objSubredEnganche->getId());

                    $arrayOctetos  = explode(".", $strIpEngancge);

                    //Se suma 2 octetos para obtener la 4ta IP de la subred generada
                    $strOcteto  = intval($arrayOctetos[3]) + 2;

                    $strIpEngancge = $arrayOctetos[0].'.'.$arrayOctetos[1].'.'.$arrayOctetos[2].'.'.$strOcteto;

                    $arrayPeticiones                    = array();
                    $arrayPeticiones['url']             = 'enrutamientoEstaticoPe';
                    $arrayPeticiones['accion']          = 'agregar';
                    $arrayPeticiones['clase_servicio']  = $strNombreTecnico;
                    $arrayPeticiones['vrf']             = $arrayParametros['vrf'];
                    $arrayPeticiones['pe']              = $arrayParametros['elementoPadre'];
                    $arrayPeticiones['sw']              = $objElemento->getNombreElemento();
                    $arrayPeticiones['name_route']      = substr('route_'.$objServicio->getLoginAux(),0,25);
                    $arrayPeticiones['net_lan']         = stristr($objSubred->getSubred(),"/",true);
                    $arrayPeticiones['mask_lan']        = $objSubred->getMascara();
                    $arrayPeticiones['ip_destino']      = $strIpEngancge;//IP FORTIGATE
                    $arrayPeticiones['distance_admin']  = '1';
                    $arrayPeticiones['option']          = 'A';
                    $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
                    $arrayPeticiones['login_aux']       = $objServicio->getLoginAux();
                    $arrayPeticiones['user_name']       = $strUsrCreacion;
                    $arrayPeticiones['user_ip']         = $strIpCreacion;

                    //Ejecucion del metodo via WS para realizar la configuracion en el Pe
                    $arrayRespuestaEnrutamiento = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                    $strStatus  = $arrayRespuestaEnrutamiento['status'];
                    $strMensaje  = $arrayRespuestaEnrutamiento['mensaje'];

                    if($strStatus!='OK')
                    {
                        $arrayRespuesta = array('status' => $strStatus, 'mensaje' => $strMensaje);
                    }
                }
            }
            
            $arrayEquipos       = array();
            $arrayCargaDescarga = array();

            if($strStatus == "OK")
            {
                if(!$usaUmExistente)
                {
                    //Se Valida que si se escogio nuevo CPE ( se proceda a realizar el flujo normal )
                    if($strFlagCpe == "nuevo")
                    {
                        //Almacenamos la serie del dispositivo cpe y el id de control para realizar la carga y descarga.
                        $arrayInfoActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                'intIdPersona'   => $arrayParametros['idTecnicoEncargado'],
                                                                'strNumeroSerie' => $strSerieNuevoCpe));

                        if ($arrayInfoActivo['status'])
                        {
                            $arrayEquipos[] = array('strNumeroSerie'  => $strSerieNuevoCpe,
                                                    'intIdControl'    => $arrayInfoActivo["result"][0]['idControl'],
                                                    'intCantidadEnt'  => 1,
                                                    'intCantidadRec'  => 1,
                                                    'strTipoArticulo' => 'Equipos');
                        }

                        $arrayParametrosCpe = array(
                                                    'nombreElementoCliente'         => $objServicio->getLoginAux(),
                                                    'modeloElementoNuevo'           => $strModeloNuevoCpe,
                                                    'serieElementoNuevo'            => $strSerieNuevoCpe,
                                                    'tipoElementoNuevo'             => 'CPE',
                                                    'macElementoNuevo'              => null,
                                                    'objServicio'                   => $objServicio,
                                                    'idEmpresa'                     => $intIdEmpresa,
                                                    'usrCreacion'                   => $strUsrCreacion,
                                                    'ipCreacion'                    => $strIpCreacion,
                                                    'propiedad'                     => $strPropiedadNuevoCpe
                                                );                   

                        $objElementoCliente = $this->servicioGeneral->ingresarElementoClienteTNSinEnlace($arrayParametrosCpe);
                        
                        $this->serviceUtil->validaObjeto($objElementoCliente,"No pudo crearse Elemento Cliente a activar");

                        if($strPropiedadNuevoCpe == "TELCONET")
                        { 
                            $codigoArticuloElementoCliente  = "";
                            $strTipoArticulo                = "AF";
                            $strIdentificacionCliente       = "";

                            //actualizamos registro en el naf cpe
                            $pv_mensajeerror = str_repeat(' ', 1000);
                            $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                            . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                            . ":cantidad, :pv_mensajeerror); END;";
                            $stmt = $this->emNaf->getConnection()->prepare($sql);
                            $stmt->bindParam('codigoEmpresaNaf',        $intIdEmpresa);
                            $stmt->bindParam('codigoArticulo',          $codigoArticuloElementoCliente);
                            $stmt->bindParam('tipoArticulo',            $strTipoArticulo);
                            $stmt->bindParam('identificacionCliente',   $strIdentificacionCliente);
                            $stmt->bindParam('serieCpe',                $strSerieNuevoCpe);
                            $stmt->bindParam('cantidad',                intval(1));
                            $stmt->bindParam('pv_mensajeerror',         $pv_mensajeerror);
                            $stmt->execute();

                            if(strlen(trim($pv_mensajeerror)) > 0)
                            {
                                $arrayRespuesta = array("status"=>"NAF", "mensaje"=>"ERROR CPE NAF: ".$pv_mensajeerror);
                                return $arrayRespuesta;
                            }
                        }        
                        else
                        {
                            if(empty($strDescripcionEquipo))
                            {
                                $strDescripcionEquipo = $strNombreDispositivo.'_Eth'.$strPuertoRemoto;
                            }
                            $objElementoCliente->setDescripcionElemento($strDescripcionEquipo);
                        }

                        //info_detalle_elemento propiedad
                        $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "PROPIEDAD", "ELEMENTO PROPIEDAD DE", 
                                                                        $strPropiedadNuevoCpe, $strUsrCreacion, $strIpCreacion);

                        //info_detalle_elemento gestion remota
                        $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "GESTION REMOTA", "ELEMENTO GESTION REMOTA",
                                                                        $strGestionNuevoCpe, $strUsrCreacion, $strIpCreacion); 

                        //info_detalle_elemento administra
                        $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "ADMINISTRA", "ELEMENTO ES ADMINISTRADO POR",
                                                                        $strAdministraNuevoCpe, $strUsrCreacion, $strIpCreacion);

                        //info_elemento ios                        
                        $objElementoCliente->setNombreElemento($strNombreCpe);
                        $objElementoCliente->setVersionOs($strIosNuevoCpe);
                        $this->emInfraestructura->persist($objElementoCliente);
                        $this->emInfraestructura->flush();

                        $objInterfaceElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                            ->findOneBy(array('nombreInterfaceElemento' => 'wan1',
                                                                              'estado'                  => 'not connect',
                                                                              'elementoId'              => $objElementoCliente->getId()
                                                                             ));
                        //CREAR SOLCITUD DE RPA LICENCIA
                        if(is_object($objElementoCliente))
                        {
                            //obtener el id de la marca del elemento
                            $intIdMarcaElemento     = $objElementoCliente->getModeloElementoId()->getMarcaElementoId()->getId();
                            //seteo el arreglo de los id de las marcas
                            $arrayIdMarcasLicencia  = array();
                            //obtengo las marcas de los elementos para licenciamiento
                            $arrayParamDetMarcas    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('RPA_MARCA_ELEMENTOS_LICENCIA',
                                                                    'TECNICO',
                                                                    '',
                                                                    '',
                                                                    $objProducto->getId(),
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $intIdEmpresa);
                            if(is_array($arrayParamDetMarcas) && !empty($arrayParamDetMarcas))
                            {
                                foreach($arrayParamDetMarcas as $arrayDetParametro)
                                {
                                    $arrayIdMarcasLicencia[] = $arrayDetParametro['valor2'];
                                }
                            }
                            //verifico si la marca requiere licenciamiento
                            if(in_array($intIdMarcaElemento, $arrayIdMarcasLicencia))
                            {
                                //obtengo el tipo de solicitud de rpa licencia
                                $objTipoSolicitudRpa    = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RPA LICENCIA",
                                                                                                  "estado"               => "Activo"));
                                if(is_object($objTipoSolicitudRpa))
                                {
                                    //ingreso la solicitud
                                    $objDetalleSolicitudRpa = new InfoDetalleSolicitud();
                                    $objDetalleSolicitudRpa->setServicioId($objServicio);
                                    $objDetalleSolicitudRpa->setTipoSolicitudId($objTipoSolicitudRpa);
                                    $objDetalleSolicitudRpa->setEstado("Pendiente");
                                    $objDetalleSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                    $objDetalleSolicitudRpa->setUsrCreacion($strUsrCreacion);
                                    $objDetalleSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                    $this->emComercial->persist($objDetalleSolicitudRpa);
                                    $this->emComercial->flush();
                                    //crear historial para la solicitud
                                    if(is_object($objDetalleSolicitudRpa))
                                    {
                                        $objHistorialSolicitudRpa = new InfoDetalleSolHist();
                                        $objHistorialSolicitudRpa->setDetalleSolicitudId($objDetalleSolicitudRpa);
                                        $objHistorialSolicitudRpa->setEstado("Pendiente");
                                        $objHistorialSolicitudRpa->setObservacion("Se crea la solicitud de RPA licenciamiento.");
                                        $objHistorialSolicitudRpa->setUsrCreacion($strUsrCreacion);
                                        $objHistorialSolicitudRpa->setFeCreacion(new \DateTime('now'));
                                        $objHistorialSolicitudRpa->setIpCreacion($strIpCreacion);
                                        $this->emComercial->persist($objHistorialSolicitudRpa);
                                        $this->emComercial->flush();
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //Se obtiene la informacion del CPE existente y su respectivo puerto
                        $objInterfaceElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                               ->find($intIdInterfaceCpeExistente);     
                        if(is_object($objInterfaceElementoCliente))
                        {
                            $objElementoCliente      = $objInterfaceElementoCliente->getElementoId();
                        }
                    }
                    
                    if($strPropiedadNuevoCpe == 'TELCONET')
                    {
                        $this->serviceUtil->validaObjeto($objInterfaceElementoCliente,"No existe Interface a conectar Servicio");

                        //conectar interface in del puerto disponible del cpe existente
                        $objInterfaceElementoCliente->setEstado("connected");
                        $this->emInfraestructura->persist($objInterfaceElementoCliente);
                        $this->emInfraestructura->flush();

                        //Guardar la MAC del CPE atada a la interface del equipo
                        $objInterfaceElementoCliente->setMacInterfaceElemento($strMacNuevoCpe);
                        $this->emInfraestructura->persist($objInterfaceElementoCliente);
                        $this->emInfraestructura->flush();
                    }
                    else//Crear la interface del cliente para atacharle la informacion de la mac del mismo
                    {
                        $objInterfaceElementoCliente = new InfoInterfaceElemento();
                        $objInterfaceElementoCliente->setNombreInterfaceElemento('Eth'.$strPuertoRemoto);
                        $objInterfaceElementoCliente->setDescripcionInterfaceElemento('Eth'.$strPuertoRemoto);
                        $objInterfaceElementoCliente->setElementoId($objElementoCliente);
                        $objInterfaceElementoCliente->setEstado("connected");
                        $objInterfaceElementoCliente->setUsrCreacion($strUsrCreacion);
                        $objInterfaceElementoCliente->setFeCreacion(new \DateTime('now'));
                        $objInterfaceElementoCliente->setIpCreacion($strIpCreacion);
                        $objInterfaceElementoCliente->setMacInterfaceElemento($strMacNuevoCpe);
                        $this->emInfraestructura->persist($objInterfaceElementoCliente);
                        $this->emInfraestructura->flush();
                    }
                    
                    //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                    $objInfoDetalleInterface = new InfoDetalleInterface();
                    $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCliente);
                    $objInfoDetalleInterface->setDetalleNombre("servicio");
                    $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                    $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                    $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                    $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                    $this->emInfraestructura->persist($objInfoDetalleInterface);
                    $this->emInfraestructura->flush();

                    $objServicioTecnico->setInterfaceElementoClienteId($objInterfaceElementoCliente->getId());
                    $objServicioTecnico->setElementoClienteId($objElementoCliente->getId());
                    $this->emComercial->persist($objServicioTecnico);
                    $this->emComercial->flush();
                }
                else //Si utiliza Ultima Milla Existente
                {
                    //Se obtiene la data tecnica del servicio del cual se esta referenciando
                    $objServicioTecnicoCpeExiste  = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                         ->findOneBy(array("servicioId" => $intServicioIdExisteCpe));
                    
                    $this->serviceUtil->validaObjeto($objServicioTecnicoCpeExiste,"No existe informacion tecnica para obtener elemento del cliente");

                    //Interface escogida del mismo CPE para enganchar la nueva MAC del servicio a Activar
                    $objInterfaceElementoCpeExistente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                ->find($intIdInterfaceCpeExistente);

                    if(is_object($objInterfaceElementoCpeExistente))
                    {
                        //Se setea el puerto del CPE con al informacion del Servicio configurado y se cambia a estado "connected" 
                        //En caso de estar ya conectada la interface se continua a agregar el servicio a la referencia de la interface
                        $objInterfaceElementoCpeExistente->setMacInterfaceElemento($strMacCpeExistente);
                        $objInterfaceElementoCpeExistente->setEstado("connected");
                        $this->emInfraestructura->persist($objInterfaceElementoCpeExistente);
                        $this->emInfraestructura->flush(); 

                        //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                        $objInfoDetalleInterface = new InfoDetalleInterface();
                        $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCpeExistente);
                        $objInfoDetalleInterface->setDetalleNombre("servicio");
                        $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                        $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                        $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                        $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                        $this->emInfraestructura->persist($objInfoDetalleInterface);
                        $this->emInfraestructura->flush();
                    }

                    //guardar cpe en servicio tecnico
                    $objServicioTecnico->setElementoClienteId($objServicioTecnicoCpeExiste->getElementoClienteId());
                    $objServicioTecnico->setInterfaceElementoClienteId($objServicioTecnicoCpeExiste->getInterfaceElementoClienteId());
                    $this->emComercial->persist($objServicioTecnico);
                    $this->emComercial->flush();
                }

                //REGISTRAMOS LOS EQUIPOS DEL CLIENTE QUE SE ENCUENTRAN EN EL NODO.
                if (isset($arrayParametros['arrayDipositivosNodo']) && !empty($arrayParametros['arrayDipositivosNodo']))
                {
                    foreach ($arrayParametros['arrayDipositivosNodo'] as $intIdx => $arrayDipositivoNodo)
                    {
                        //Almacenamos la serie de los dispositivo en nodo y el id de control para realizar la carga y descarga.
                        $strMacDispositivo = 'NA';
                        $arrayInfoActivos  = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                ->obtenerEquiposAsignados(array('strIdEmpresa'   => $intIdEmpresa,
                                                                'intIdPersona'   => $arrayParametros['idTecnicoEncargado'],
                                                                'strNumeroSerie' => $arrayDipositivoNodo['serieElemento']));

                        if ($arrayInfoActivos['status'])
                        {
                            $arrayInfoActivo   = $arrayInfoActivos['result'][0];
                            $strMacDispositivo = $arrayInfoActivo['macElemento'];
                            $intIdControl      = $arrayInfoActivo['idControl'];
                            $arrayEquipos[]    = array('strNumeroSerie'  => $arrayDipositivoNodo['serieElemento'],
                                                       'intIdControl'    => $intIdControl,
                                                       'intCantidadEnt'  => 1,
                                                       'intCantidadRec'  => 1,
                                                       'strTipoArticulo' => 'Equipos');
                        }

                        $intContador       = $intIdx + 1;
                        $strNombre         = "nodo$intContador-".$objServicio->getLoginAux();
                        $arrayElementoNodo = array('nombreElementoCliente'       => $strNombre,
                                                   'nombreModeloElementoCliente' => $arrayDipositivoNodo['modeloElemento'],
                                                   'serieElementoCliente'        => $arrayDipositivoNodo['serieElemento'],
                                                   'boolEsUbicacionNodo'         => true,
                                                   'strMacDispositivo'           => $strMacDispositivo,
                                                   'objServicio'                 => $objServicio,
                                                   'intIdEmpresa'                => $intIdEmpresa,
                                                   'usrCreacion'                 => $strUsrCreacion,
                                                   'ipCreacion'                  => $strIpCreacion);

                        $strRespuesta = $this->servicioGeneral->ingresarElementoClienteTN($arrayElementoNodo,"");

                        if ($strRespuesta !== "" && is_string($strRespuesta))
                        {
                            $arrayRespuesta = array("status" => "INGRESAR-DISPOSITIVO-NODO", "mensaje" =>  $strRespuesta);
                            return $arrayRespuesta;
                        }

                        //Actualizamos el dispositivo en el Naf.
                        $strCodigoArticulo        = '';
                        $strTipoArticulo          = 'AF';
                        $strIdentificacionCliente = '';
                        $strMensajeError          = str_repeat(' ',1000);

                        $strSql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf,"
                                                                            . ":codigoArticulo,"
                                                                            . ":tipoArticulo,"
                                                                            . ":identificacionCliente,"
                                                                            . ":serieCpe,"
                                                                            . ":cantidad,"
                                                                            . ":pv_mensajeerror); END;";

                        $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                        $objStmt->bindParam('codigoEmpresaNaf'     , $intIdEmpresa);
                        $objStmt->bindParam('codigoArticulo'       , $strCodigoArticulo);
                        $objStmt->bindParam('tipoArticulo'         , $strTipoArticulo);
                        $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                        $objStmt->bindParam('serieCpe'             , $arrayDipositivoNodo['serieElemento']);
                        $objStmt->bindParam('cantidad'             , intval(1));
                        $objStmt->bindParam('pv_mensajeerror'      , $strMensajeError);
                        $objStmt->execute();

                        if (strlen(trim($strMensajeError)) > 0)
                        {
                            $arrayRespuesta = array("status" => "NAF", "mensaje" => "DISPOSITIVO NODO: ".$strMensajeError);
                            return $arrayRespuesta;
                        }
                    }
                }

                //LLAMADA AL SERVICE PARA REALIZAR LA CARGA Y DESCARGA DEL ACTIVO.
                if (!empty($arrayEquipos) && count($arrayEquipos) > 0)
                {
                    $arrayCargaDescarga['strUsuario']              =  $strUsrCreacion;
                    $arrayCargaDescarga['strIpUsuario']            =  $strIpCreacion;
                    $arrayCargaDescarga['strTipoRecibe']           = 'Cliente';
                    $arrayCargaDescarga['intIdServicio']           =  $objServicio->getId();
                    $arrayCargaDescarga['intIdEmpleado']           =  $arrayParametros['idTecnicoEncargado'];
                    $arrayCargaDescarga['intIdEmpresa']            =  $intIdEmpresa;
                    $arrayCargaDescarga['strTipoActividad']        = 'Instalacion';
                    $arrayCargaDescarga['strTipoTransaccion']      = 'Nuevo';
                    $arrayCargaDescarga['strObservacion']          = 'Instalacion del servicio';
                    $arrayCargaDescarga['arrayEquipos']            =  $arrayEquipos;
                    $arrayCargaDescarga['strEstadoSolicitud']      = 'Asignada';
                    $arrayCargaDescarga['strDescripcionSolicitud'] = 'SOLICITUD PLANIFICACION';
                    $arrayResCarDes = $this->serviceInfoElemento->cargaDescargaActivos($arrayCargaDescarga);

                    if (!$arrayResCarDes['status'])
                    {
                        $arrayRespuesta = array("status" => "NAF", "mensaje" => "DISPOSITIVOS CLIENTE: ".$arrayResCarDes['message']);
                        return $arrayRespuesta;
                    }
                }
            }

            $arrayRespuesta = array('status'=>$strStatus, 'mensaje'=>$strMensaje);
            return $arrayRespuesta;
        }
        catch (\Exception $e)
        {
            $this->serviceUtil->insertError('Telcos+', 
                                            'InfoActivarPuertoService->activarServicioDataCenter',
                                            $e->getMessage(),
                                            $arrayParametros['usrCreacion'], 
                                            $arrayParametros['ipCreacion']
                                           );
            
            $this->serviceUtil->relanzarExcepcion($e);
        }
    }
    
    /**
     * 
     * Metodo encargado de realizar la activacion de enlaces L2
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-05-2018
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     *
     * @param  Array $arrayParametros
     * @return Array $arrayRespuesta [ status, mensaje ]
     */
    public function activarServicioConcentradorL2mpls($arrayParametros)
    {
        $arrayRespuesta       = array();
        $strNombrePeExtremoL2 = '';
        $objServicio          = $arrayParametros['objServicio'];
        $objServicioExtremo   = null;
        $objElementoSwExtremoL2 = null;
        $objElementoPeExtremoL2 = null;
        $strPuertoRo            = '';
        $arrayParametrosWs      = array();

        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            $objDetalleSolicitud = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")->find($arrayParametros['intIdSolicitud']);
            //Obtener el sw virtual enlazado al Ro
            
            $objServicioTecnico = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")->findOneByServicioId($objServicio->getId());
            
            if(is_object($objServicioTecnico))
            {
                $objServicioTecnicoExt = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                           ->getDataTecnicaExtremoPorInterfazL2($objServicioTecnico->getInterfaceElementoId());
                
                if(is_object($objServicioTecnicoExt))
                {
                    $objServicioExtremo     = $objServicioTecnicoExt->getServicioId();

                    $arrayParametrosWs["intIdElemento"] = $objServicioTecnicoExt->getElementoId();

                    if(is_object($objServicioExtremo))
                    {
                        $arrayParametrosWs["intIdServicio"] = $objServicioExtremo->getId();
                    }

                    $objElementoPeExtremoL2 = $this->servicioGeneral->getPeBySwitch($arrayParametrosWs);

                    $objElementoSwExtremoL2 = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                      ->find($objServicioTecnicoExt->getElementoId());
                    
                    if(is_object($objElementoPeExtremoL2) && is_object($objElementoSwExtremoL2))
                    {
                        $strNombrePeExtremoL2 = $objElementoPeExtremoL2->getNombreElemento();
                    }
                    else
                    {
                        $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'No existe información de PE/Sw ( Extremo ) a configurar, '
                                                                                . 'notificar a Sistemas');
                        return $arrayRespuesta;
                    }
                }
                
                //Obtener la interface del Ro a configurar
                $objInterfaceRo = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                          ->find($objServicioTecnico->getInterfaceElementoId());
                
                if(is_object($objInterfaceRo))
                {
                    $strPuertoRo = $objInterfaceRo->getNombreInterfaceElemento();
                }
            }
            
            //-------------------------------------
            //Obteniendo la Ip de loopback
            $objCaractServLoopBack = $this->servicioGeneral
                                          ->getServicioProductoCaracteristica($objServicio, "LOOPBACK_L2", $objServicio->getProductoId());

            if(!is_object($objCaractServLoopBack))
            {
                $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'No existe Ip Loopback para configurar en el Pe (Extremo), '
                                                                        . 'notificar a Sistemas');
                return $arrayRespuesta;
            }
            
            $arrayPeticiones                          = array();
            $arrayPeticiones['url']                   = 'configL2';
            $arrayPeticiones['accion']                = 'activar';                    
            $arrayPeticiones['pe']                    = $strNombrePeExtremoL2;
            $arrayPeticiones['ip_loopback']           = $objCaractServLoopBack->getValor();
            $arrayPeticiones['puerto']                = $strPuertoRo;
            $arrayPeticiones['vc']                    = $arrayParametros['intVirtualConnect'];
            $arrayPeticiones['l2_ip']                 = $arrayParametros['strIpServicio'];
            $arrayPeticiones['concentrador']          = $arrayParametros['strElemento'];
            $arrayPeticiones['servicio']              = 'L2MPLS';
            $arrayPeticiones['desc']                  = 'DATOSC-L2_'.$objServicio->getLoginAux();
            $arrayPeticiones['user_name']             = $arrayParametros['strUsrCreacion'];
            $arrayPeticiones['user_ip']               = $arrayParametros['strIpCreacion'];

            //Ejecucion del metodo via WS para realizar la configuracion en el Pe
            $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

            $strStatus   = $arrayRespuesta['status'];
            $strMensaje  = $arrayRespuesta['mensaje'];

            if($strStatus!='OK')
            {
                $arrayRespuesta = array('status' => $strStatus, 'mensaje' => $strMensaje);
                return $arrayRespuesta;
            }
            
            $objInfoIpExtremo = null;
            
            //Obtener los datos para el Extremo L3 y poder realizar el enrutamiento
            if(is_object($objServicioExtremo))
            {
                //Obtener el nombre del Sw
                $objInfoIpExtremo = $this->emInfraestructura->getRepository("schemaBundle:InfoIp")
                                                            ->findOneBy(array('servicioId' => $objServicioExtremo->getId(),
                                                                              'estado'     => 'Activo'));
                
                if(!is_object($objInfoIpExtremo))
                {
                    $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'No existe la Subred del cliente configurada, debe asignarse '
                                                                            . 'recursos de Red para Extremo');
                    return $arrayRespuesta;
                }
                
                //Obtener la subred de la loopback
                $objInfoIp = $this->emInfraestructura->getRepository("schemaBundle:InfoIp")->findOneBy(array('servicioId' => $objServicio->getId(),
                                                                                                             'estado'     => 'Activo'));
                
                $objSubred = null;
                
                if(is_object($objInfoIp))
                {
                    $objSubred = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objInfoIp->getSubredId());
                    
                    if(!is_object($objSubred))
                    {
                        $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'No existe la Subred L2 configurada, notificar a Sistemas');
                        return $arrayRespuesta;
                    }
                }
                
                //Obtener la VRF de datacenter concentrador L2
                $arrayParametrosDet =   $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne("VRF DATACENTER L2MPLS", 
                                                                 "TECNICO", 
                                                                 "", 
                                                                 "", 
                                                                 "", 
                                                                 "", 
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 $arrayParametros['intIdEmpresa']
                                                               );
                $strVrfL2mpls = '';
                
                if(!empty($arrayParametrosDet))
                {
                    $strVrfL2mpls = $arrayParametrosDet['valor1'];
                }
                
                if(empty($strVrfL2mpls))
                {
                    $arrayRespuesta = array('status' => 'ERROR', 'mensaje' => 'No existe informacion de VRF de L2mpls, notificar a Sistemas');
                    return $arrayRespuesta;
                }
                                
                //Enrutamiento estatico usando la Ip loopback configurada en el CPE con la Subred del cliente
                $arrayPeticiones                    = array();
                $arrayPeticiones['url']             = 'enrutamientoEstaticoPe';
                $arrayPeticiones['accion']          = 'agregar';
                $arrayPeticiones['clase_servicio']  = $objServicioExtremo->getProductoId()->getNombreTecnico();
                $arrayPeticiones['vrf']             = $strVrfL2mpls;
                $arrayPeticiones['pe']              = $objElementoPeExtremoL2->getNombreElemento();
                $arrayPeticiones['sw']              = $objElementoSwExtremoL2->getNombreElemento();
                $arrayPeticiones['name_route']      = 'route_'.$objServicioExtremo->getLoginAux()."_L2";
                $arrayPeticiones['net_lan']         = stristr($objSubred->getSubred(),"/",true);
                $arrayPeticiones['mask_lan']        = $objSubred->getMascara();
                $arrayPeticiones['ip_destino']      = $objInfoIpExtremo->getIp();
                $arrayPeticiones['distance_admin']  = '1';
                $arrayPeticiones['option']          = 'A';
                $arrayPeticiones['servicio']        = $objServicioExtremo->getProductoId()->getNombreTecnico();
                $arrayPeticiones['login_aux']       = $objServicioExtremo->getLoginAux();
                $arrayPeticiones['user_name']       = $arrayParametros['strUsrCreacion'];
                $arrayPeticiones['user_ip']         = $arrayParametros['strIpCreacion'];

                //Ejecucion del metodo via WS para realizar la configuracion en el Pe
                $arrayRespuestaEnrutamiento = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                $strStatus   = $arrayRespuestaEnrutamiento['status'];
                $strMensaje  = $arrayRespuestaEnrutamiento['mensaje'];

                if($strStatus!='OK')
                {
                    $arrayRespuesta = array('status' => $strStatus, 'mensaje' => $strMensaje);
                    return $arrayRespuesta;
                }
            }
                     
            //Se ingresa historial del servicio a ser activado
            $objServicio->setEstado('EnPruebas');
            $this->emComercial->persist($objServicio);
            $this->emComercial->flush();
            
            $this->servicioGeneral->ingresarServicioHistorial(  $objServicio, 
                                                                $objServicio->getEstado(), 
                                                                'Servicio L2 se configuró correctamente', 
                                                                $arrayParametros['strUsrCreacion'], 
                                                                $arrayParametros['strIpCreacion']);
            
            if(is_object($objDetalleSolicitud))
            {
                $objDetalleSolicitud->setEstado('Finalizada');
                $this->emComercial->persist($objDetalleSolicitud);
                $this->emComercial->flush();

                //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                $objDetalleSolHist = new InfoDetalleSolHist();
                $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                $objDetalleSolHist->setIpCreacion($arrayParametros['strIpCreacion']);
                $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $objDetalleSolHist->setUsrCreacion($arrayParametros['strUsrCreacion']);
                $objDetalleSolHist->setEstado('Finalizada');
                $objDetalleSolHist->setObservacion('Servicio L2 se configuró correctamente');
                $this->emComercial->persist($objDetalleSolHist);
                $this->emComercial->flush();  
            }
            
            $strMensaje = 'Servicio L2MPLS fue activado correctamente';
            
            $this->emComercial->commit();
            $this->emInfraestructura->commit();
        } 
        catch (\Exception $ex) 
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }
            
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->rollback();
            }
                        
            $this->emComercial->close();            
            $this->emInfraestructura->close();
            
            $this->serviceUtil->insertError('Telcos+', 
                                            'InfoActivarPuertoService->activarServicioConcentradorL2mpls', 
                                            $ex->getMessage(),
                                            $arrayParametros['strUsrCreacion'], 
                                            $arrayParametros['strIpCreacion']
                                           );
            
            $strStatus  = 'ERROR';
            $strMensaje = 'Error al activar Servicio, por favor notificar a Sistemas';
        }
        
        $arrayRespuesta['status']  = $strStatus;
        $arrayRespuesta['mensaje'] = $strMensaje;
        
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Metodo encargado para realizar la activacion de servicios que poseen la factibilidad Heredada de otro servicio seleccionado
     * FLUJO DE INTERCONEXIONES
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 23-02-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 - 24-04-2018    Se agrega programación para Migrar el servicio origen de esta Activación al finalizar el proceso
     * @since 1.0
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 19-06-2019 - Se agregan parámetros de razon_social y route_target export e import en el método configPE, con el objetivo de
     *                           enviar a configurar una lineas adicionales que permitan al cliente el monitoreo sus enlaces de datos
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.3 31-10-2019 - Se verifica que los concentradores tengan la caracteristica CONCENTRADOR_FWA y se modifica el nombre del servicio.
     * @since 1.2
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 01-06-2020 - Se agrega el id del servicio a la url 'configSW' del ws de networking para la validación del BW
     * @since 1.3
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 21-07-2020 - Se realiza la cancelación del punto cuando se migra el ultimo servicio
     * @since 1.4
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 26-08-2020 - Se libera recursos de red del servicio origen y migracion de servicios por interconexion
     * @since 1.5
     *
     * @since 1.1
     *
     * @param  Array $arrayParametros
     * @return Array $arrayRespuesta
     */
    public function activarServicioPorFactibilidadHeredada($arrayParametros)
    {
        $arrayRespuesta         = array();
        $strBanderaLineasBravco = "N";
        $strRouteTargetExport   = "";
        $strRouteTargetImport   = "";
        $strRazonSocial         = "";

        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        
        try
        {
            
            $objServicio            = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['intIdServicioNuevo']);
            $objServicioTecnico     = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneByServicioId($objServicio->getId());                        
                        
            $this->serviceUtil->validaObjeto($objServicio,"No existe Servicio a ser activado");
            $this->serviceUtil->validaObjeto($objServicioTecnico,"No existe información Técnica del Servicio a ser activado");
            
            $objProducto            = $objServicio->getProductoId();
            $boolEsConcentrador     = false;
            
            //Verificar si es Concentrador
            if($objProducto->getEsConcentrador() == 'SI')
            {
                $boolEsConcentrador = true;
            }
            
            //Se realiza validacion para que solo ejecute recalculo de BW para Servicios con tipo de enlace PRINCIPAL
            if($objServicioTecnico->getTipoEnlace() == 'PRINCIPAL')
            {
                //Subir bw del concentrador por activacion de nuevo servicio
                $arrayParametrosBw = array( 
                                            "objServicio"       => $objServicio,
                                            "usrCreacion"       => $arrayParametros['strUsrCreacion'],
                                            "ipCreacion"        => $arrayParametros['strIpCreacion'],
                                            "capacidadUnoNueva" => intval($arrayParametros['intCapacidadUnoNueva']),
                                            "capacidadDosNueva" => intval($arrayParametros['intCapacidadDosNueva']),
                                            "operacion"         => "+",
                                            "accion"            => "Se actualiza Capacidades por Activación de "
                                                                   . "Servicio : <b>".$objServicio->getLoginAux()."<b>"
                                           );

                //Se actualiza las capacidades del Concentrador
                $this->servicioGeneral->actualizarCapacidadesEnConcentrador($arrayParametrosBw);
            }
            
            $strNombreTecnico     = $objProducto->getNombreTecnico();
                        
            $objInterfaceElemento = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                            ->find($objServicioTecnico->getInterfaceElementoId());

            $this->serviceUtil->validaObjeto($objInterfaceElemento,"No existe Interface del Switch virtual referenciada");

            if(!$boolEsConcentrador)
            {
                $arrayMacNueva[] = $arrayParametros['strMacCpe'];
                $arrayMacVlan    = array($arrayParametros['intVlanNueva'] => $arrayMacNueva);

                //Se obtiene las capacidades de todos los servicios vinculados al sw
                $arrayCapacidades = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                            ->getResultadoCapacidadesPorInterface($objInterfaceElemento->getId());
                
                $objAdmiTipoMedio = $this->emInfraestructura->getRepository("schemaBundle:AdmiTipoMedio")
                                                            ->find($objServicioTecnico->getUltimaMillaId());
                
                if(is_object($objAdmiTipoMedio))
                {
                    $strUltimaMilla = $objAdmiTipoMedio->getNombreTipoMedio();
                }
                
                $strDescripcion = '';
                
                if($strUltimaMilla == 'Fibra Optica')
                {
                    $strDescripcion = '_fib';
                }
                if($strUltimaMilla == 'Radio')
                {
                    $strDescripcion = '_rad';
                }
                if($strUltimaMilla == 'UTP')
                {
                    $strDescripcion = '_utp';
                }

                $arrayPeticiones['url']          = 'configSW';
                $arrayPeticiones['accion']       = 'activar';                
                $arrayPeticiones['id_servicio']  = $objServicio->getId();
                $arrayPeticiones['nombreMetodo'] = 'InfoActivarPuertoService.activarServicioPorFactibilidadHeredada';
                $arrayPeticiones['sw']           = $objInterfaceElemento->getElementoId()->getNombreElemento();
                $arrayPeticiones['macVlan']      = $arrayMacVlan;
                $arrayPeticiones['user_name']    = $arrayParametros['strUsrCreacion'];
                $arrayPeticiones['user_ip']      = $arrayParametros['strIpCreacion'];       
                $arrayPeticiones['bw_up']        = intval($arrayCapacidades['totalCapacidad1']) + intval($arrayParametros['intCapacidadUnoNueva']);
                $arrayPeticiones['bw_down']      = intval($arrayCapacidades['totalCapacidad2']) + intval($arrayParametros['intCapacidadDosNueva']);
                $arrayPeticiones['servicio']     = $strNombreTecnico;
                $arrayPeticiones['login_aux']    = $objServicio->getLoginAux();
                $arrayPeticiones['descripcion']  = 'cce_'.$objServicio->getLoginAux().$strDescripcion;
                $arrayPeticiones['pto']          = $objInterfaceElemento->getNombreInterfaceElemento();
                $arrayPeticiones['anillo']       = $arrayParametros['strAnillo']; 

                $arrayRespuestaSw = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                $strStatus  = $arrayRespuestaSw['status'];

                if($strStatus != 'OK')
                {
                    $arrayRespuesta = array('status' => $strStatus, 'mensaje' => $arrayRespuestaSw['mensaje']);
                    return $arrayRespuesta;
                }
            }
            else
            {
                $strStatus = 'OK';
            }

            if(is_object($objServicio))
            {
                //Consultar Razon Social
                $objInfoPersona = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();

                if(is_object($objInfoPersona))
                {
                    $strRazonSocial = $objInfoPersona->getRazonSocial();
                }

                if(!empty($strRazonSocial))
                {
                    $arrayRazonesSociales = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne('PROYECTO MONITOREO CLIENTES GRUPO BRAVCO',
                                                                       'INFRAESTRUCTURA',
                                                                       'ACTIVAR SERVICIO',
                                                                       'RAZON SOCIAL GRUPO BRAVCO',
                                                                       $strRazonSocial,
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '');
                }

                if(isset($arrayRazonesSociales["valor1"]) && !empty($arrayRazonesSociales["valor1"]))
                {
                    $strBanderaLineasBravco = "S";
                    $strRouteTargetExport   = $arrayRazonesSociales["valor2"];
                    $strRouteTargetImport   = $arrayRazonesSociales["valor3"];
                    $strRazonSocial         = $arrayRazonesSociales["valor4"];
                }
            }

            //Solo ejecutara accion en el Pe los servicios L3 o Satelitales ( IntMpls ) dado que no necesitan switch pero si pe
            if($strNombreTecnico == 'L3MPLS' || $strNombreTecnico == 'CONCINTER')
            {
                if(is_object($objServicio) && is_object($objProducto))
                {
                    $objPersonaEmpresaRol         = $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId();
                    $objCaracteristicaEnlaceDatos = $this->emComercial
                                                         ->getRepository('schemaBundle:AdmiCaracteristica')
                                                         ->findOneBy(array(
                                                                           "descripcionCaracteristica" => 'CONCENTRADOR_FWA',
                                                                           "estado"                    => 'Activo'));
                    $objConcentradorVirtual       = $this->emComercial
                                                         ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                         ->findOneBy(array(
                                                                            'personaEmpresaRolId' => $objPersonaEmpresaRol,
                                                                            'valor'               => $objServicio->getId(),
                                                                            'caracteristicaId'    => $objCaracteristicaEnlaceDatos,
                                                                            'estado'              => 'Activo'));
                    if(is_object($objConcentradorVirtual))
                    {
                        $strNombreTecnico   = "CONCINTER FWA";
                    }
                }
                //validaciones
                $arrayPeticiones = array();
                //accion a ejecutar
                $arrayPeticiones['url']                   = 'configPE';
                $arrayPeticiones['accion']                = 'Activar';
                $arrayPeticiones['sw']                    = $objInterfaceElemento->getElementoId()->getNombreElemento();
                $arrayPeticiones['clase_servicio']        = $strNombreTecnico;
                $arrayPeticiones['vrf']                   = $arrayParametros['strVrfNueva'];
                $arrayPeticiones['pe']                    = $arrayParametros['strElementoPadre'];
                $arrayPeticiones['anillo']                = $arrayParametros['strAnillo'];
                $arrayPeticiones['vlan']                  = $arrayParametros['intVlanNueva'];
                $arrayPeticiones['subred']                = $arrayParametros['strSubredNueva'];
                $arrayPeticiones['mascara']               = $arrayParametros['strMascaraNueva'];
                $arrayPeticiones['gateway']               = $arrayParametros['strGwNueva'];
                $arrayPeticiones['rd_id']                 = $arrayParametros['strRdId'];
                $arrayPeticiones['descripcion_interface'] = $objServicio->getLoginAux();
                $arrayPeticiones['ip_bgp']                = $arrayParametros['srtIpNueva'];
                $arrayPeticiones['asprivado']             = $arrayParametros['intAsPrivadoNueva'];
                $arrayPeticiones['nombre_sesion_bgp']     = $objServicio->getLoginAux();
                $arrayPeticiones['default_gw']            = $arrayParametros['strDefaultGw'];
                $arrayPeticiones['protocolo']             = $arrayParametros['strProtocoloNueva'];
                $arrayPeticiones['servicio']              = $strNombreTecnico;
                $arrayPeticiones['login_aux']             = $objServicio->getLoginAux();
                $arrayPeticiones['tipo_enlace']           = $objServicioTecnico->getTipoEnlace();
                $arrayPeticiones['banderaBravco']         = 'NO';
                $arrayPeticiones['weight']                = null;
                $arrayPeticiones['user_name']             = $arrayParametros['strUsrCreacion'];
                $arrayPeticiones['user_ip']               = $arrayParametros['strIpCreacion'];

                //Se envian a configurar lineas de monitoreo de enlaces de datos
                if($strBanderaLineasBravco === "S")
                {
                    $arrayPeticiones['razon_social'] = $strRazonSocial;
                    $arrayPeticiones['rt_export']    = $strRouteTargetExport;
                    $arrayPeticiones['rt_import']    = $strRouteTargetImport;
                }

                //Ejecucion del metodo via WS para realizar la configuracion en el Pe
                $arrayRespuestaWS = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                $strStatus  = $arrayRespuestaWS['status'];
                $strMensaje = $arrayRespuestaWS['mensaje'];
            }
            else
            {
                $strStatus  = 'OK';
            }
            
            if($strStatus != 'OK')
            {
                $arrayRespuesta = array('status'=>$strStatus, 'mensaje'=>$strMensaje);
                return $arrayRespuesta;
            }
            
            $objTipoSolicitudPlanficacion = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                              ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                                 "estado"              => "Activo"));
                        
            $objSolicitudPlanficacion     = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                              ->findOneBy(array("servicioId"      => $objServicio->getId(),
                                                                                "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                                "estado"          => "Asignada"));
            
            if($objSolicitudPlanficacion)
            {
                $objSolicitudPlanficacion->setEstado("Finalizada");
                $this->emComercial->persist($objSolicitudPlanficacion);
                $this->emComercial->flush();
                
                $objDetalleSolHist = new InfoDetalleSolHist();
                $objDetalleSolHist->setDetalleSolicitudId($objSolicitudPlanficacion);
                $objDetalleSolHist->setIpCreacion($arrayParametros['strIpCreacion']);
                $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $objDetalleSolHist->setUsrCreacion($arrayParametros['strUsrCreacion']);
                $objDetalleSolHist->setEstado("Finalizada");
                $objDetalleSolHist->setObservacion('Se finalizó solicitud por Activación de Servicio...');
                $this->emComercial->persist($objDetalleSolHist);
                $this->emComercial->flush();  
            }
            
            if(!$boolEsConcentrador)
            {
                if(!empty($arrayParametros['strNombreCpeAnterior']) && !empty($arrayParametros['strInterfazCpeAnterior']))
                {
                    //Obtener el CPE anterior
                    $objCpe = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                      ->findOneByNombreElemento($arrayParametros['strNombreCpeAnterior']);

                    if(is_object($objCpe))
                    {
                        $objInterfaze = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                                ->findOneBy(array('estado'                  => 'connected',
                                                                                  'elementoId'              => $objCpe->getId(),
                                                                                  'nombreInterfaceElemento' => $arrayParametros['strInterfazCpeAnterior'])
                                                                                  );
                        if(is_object($objInterfaze))
                        {
                            //Agregar servicio y relacionarlo con la interface del cpe
                            $objInfoDetalleInterface = new InfoDetalleInterface();
                            $objInfoDetalleInterface->setInterfaceElementoId($objInterfaze);
                            $objInfoDetalleInterface->setDetalleNombre("servicio");
                            $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                            $objInfoDetalleInterface->setUsrCreacion($arrayParametros['strUsrCreacion']);
                            $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleInterface->setIpCreacion($arrayParametros['strIpCreacion']);
                            $this->emInfraestructura->persist($objInfoDetalleInterface);
                            $this->emInfraestructura->flush();
                            $this->emInfraestructura->commit();
                        }
                    }
                }
                else
                {
                    $arrayRespuesta = array('status'=>'ERROR', 'mensaje'=>'No exista información de CPE referenciada, porfavor revisar');
                    return $arrayRespuesta;
                }                
            }
            
            //Historial de los Servicios
            
            $this->servicioGeneral->ingresarServicioHistorial($objServicio, 
                                                              "EnPruebas", 
                                                              "El servicio se activó correctamente", 
                                                              $arrayParametros['strUsrCreacion'], 
                                                              $arrayParametros['strIpCreacion']
                                                             );
            
            $objServicio->setEstado("EnPruebas");
            $this->emComercial->persist($objServicio);
            $this->emComercial->flush();
            
            //se recupera servicio origen de esta migración para cambiar a estado Migrado
            $objCaractServHeredado = $this->servicioGeneral
                                          ->getServicioProductoCaracteristica($objServicio, "SERVICIO_HEREDADO", $objProducto);
            if (is_object($objCaractServHeredado))
            {
                $objServicioHeredado = $this->emComercial
                                            ->getRepository('schemaBundle:InfoServicio')
                                            ->find($objCaractServHeredado->getValor());
                
                $this->serviceUtil->validaObjeto($objServicioHeredado,"No existe Servicio Heredado a ser Migrado");
                
                $this->servicioGeneral->ingresarServicioHistorial(
                                                                  $objServicioHeredado, 
                                                                  "Migrado", 
                                                                  "El servicio se Migró correctamente", 
                                                                  $arrayParametros['strUsrCreacion'], 
                                                                  $arrayParametros['strIpCreacion']
                                                                 );

                $objServicioHeredado->setEstado("Migrado");
                $this->emComercial->persist($objServicioHeredado);
                $this->emComercial->flush();

                //Se liberan los recursos de red del servicio origen
                if(is_object($objServicioHeredado))
                {
                    $arrayParametrosLiberar["objServicio"]   = $objServicioHeredado->getId();
                    $arrayParametrosLiberar["objProducto"]   = $objServicioHeredado->getProductoId();
                    $arrayParametrosLiberar["strUser"]       = $arrayParametros['strUsrCreacion'];
                    $arrayParametrosLiberar["strIpCreacion"] = $arrayParametros['strIpCreacion'];
                }

                $this->servicioGeneral->liberaRecursosRed($arrayParametrosLiberar);

                //****************Se valida si el punto debe ser cancelado por migracion de servicio****************************//
                //Obtener los estado a validar
                $arrayValoresParametros = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne('CANCELACION PUNTOS POR MIGRACIONES DE INTERCONEXION',
                                                                   'INFRAESTRUCTURA',
                                                                   'MIGRACION DE SERVICIOS INTERCONEXION',
                                                                   'ESTADOS A CONSIDERAR PARA CANCELACION DE PUNTOS',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   '10');

                if( isset($arrayValoresParametros['valor1']) && !empty($arrayValoresParametros['valor1']) )
                {
                    $arrayEstados = explode("|", $arrayValoresParametros["valor1"]);
                }

                if(is_object($objServicioHeredado))
                {
                    $objInfoPunto                          = $objServicioHeredado->getPuntoId();
                    $arrayParametrosServicio["intIdPunto"] = $objServicioHeredado->getPuntoId()->getId();
                }
                $arrayParametrosServicio["arrayEstados"] = $arrayEstados;

                $intServicios = $this->emComercial->getRepository('schemaBundle:InfoServicio')->existeServiciosHabiles($arrayParametrosServicio);

                if($intServicios == 0)
                {
                    $objInfoPunto->setEstado("Cancelado");
                    $this->emComercial->persist($objInfoPunto);
                    $this->emComercial->flush();
                }
                //****************Se valida si el punto debe ser cancelado por migracion de servicio****************************//
            }

            $this->emComercial->commit();

            $strMensaje = 'El Servicio se activó correctamente';
        }
        catch(\Exception $e)
        {            
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }
            
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->rollback();
            }
            
            $this->emComercial->close();
            $this->emInfraestructura->close();
            
            $this->serviceUtil->insertError('Telcos+', 
                                            'InfoActivarPuertoService->activarServicioPorFactibilidadHeredada', 
                                            $e->getMessage(),
                                            $arrayParametros['strUsrCreacion'], 
                                            $arrayParametros['strIpCreacion']
                                           );
            
            $strStatus  = 'ERROR';
            $strMensaje = 'Error al activar Servicio, por favor notificar a Sistemas';
        }
        
        $arrayRespuesta['status']  = $strStatus;
        $arrayRespuesta['mensaje'] = $strMensaje;
        
        return $arrayRespuesta;
    }
    /**
     * Funcion que sirve para activar Clientes de Fibra
     *
     * @author Francisco Adum <fadum@telconete.ec>
     * @version 1.1 4-05-2015
     * @since 1.0
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 14-08-2015 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 30-10-2015 Se agrega activacion de servicios McAfee que se encuentren en estado pendiente
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 23-02-2016 Se agrega finalizacion de solicitud de planificacion
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.5 25-02-2016 Se quita codigo de finalizacion de solicitud de planificacion y se coloca en controlador
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.6 25-02-2016 Se agrega validación de activación correcta de servicio para activar productos de I. protegidos pendientes
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.7 13-04-2016 Se corrige validación de variable $ejecutaLdap que se encontraba incorrecta
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.8 15-04-2016 Se corrige enlace por traslado de misma tecnologia
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.9 18-07-2016 Se corrige mensaje de observación registrado en historial de servicio
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.10 27-09-2016 Se agrega activacion de servicios Office 365  que se encuentren en estado pendiente.
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.11 01-12-2016 - Se crea producto NetlifeCloud en reemplazo del Office 365, se procede a cambiar el producto
     * 
     * Se agregan parametros para realizar activación de servicios SmartWifi II
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.12 24-02-2017
     * @since 1.11
     * 
     * Se agregan finalización de tareas para servicios activados con tipo de orden Traslado
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.13 09-06-2017
     * @since 1.12
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.14 30-05-2017     Se actualiza funcion para que se pueda utilizar el middleware de RDA.
     *                              Se corrige identacion del codigo.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.15 24-03-2018     Se agrega validación adicional en enlace de splitter y cpe por casos 
     *                              reportados por soporte en servicios Traslados
     * @since 1.14
     * 
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.16 24-07-2018     Se envia un nuevo parámetro strOrigenMovil. El cual es enviado desde el móvil telcos operaciones, para que no finalice la solicitud
     *                              ni las tareas asociadas a la solicitud cuando active el servicio en un Traslado.
     * @since 1.15
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.17 23-07-2018      Se agrega programación para activación de servicios ZTE
     * @since 1.15
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.18 17-01-2019 Se agrega envío de parámetro strOrigenMovil a la función activarPuertoPorNuevaMD
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.19 28-02-2019 Se agregan validaciones para trasladar correctamente servicios con Nuevos Planes MD
     * @since 1.18
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.20 02-09-2019 Para servicios de tipo TRASLADO se retorna el id servicio origen del
     *                          traslado para procesar promociones de estos servicios
     * @since 1.19
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.0  21-11-2019 - Se agrega el proceso para notificar la Activación del servicio a konibit
     *                            mediante GDA en caso de aplicar.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.1 20-09-2020 Se eliminan validaciones que se considerarán en la función activarPuertoPorNuevaMD por nuevo flujo de W + AP
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.2 06-05-2021 Se agrega validación para permitir modelos de ont Wifi Dual Band o los parametrizados cuando el punto tenga asociados
     *                         servicios Extender Dual Band 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.3 10-11-2021 Se agrega la invocación del web service para confirmación de opción de Tn a Middleware
     * 
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.4 10-04-2022 Se agrega programación para procesar traslados en diferente tecnología
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 2.5 25-11-2022 - Se agrega variable calculoPotencia para consultar la potencia en los traslados del mismo OLT.
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 2.6 18-03-2023 - Se agrega envio de prefijo empresa al realizar traslado y ejecución de ldap para Ecuanet.
     *
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 2.6 10-10-2022 Se agrega validación para notificar la Activación del servicio a konibit mediante GDA en caso de aplicar solo lo haga
     *                         para tipos de orden N.
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 2.7 02-05-2023 Se agrega try-catch para validar la confirmación TN en caso de status ERROR y OK
     * 
     * @param array $arrayParametros (usrCreacion, ipCreacion, idEmpresa, servicio, servicioTecnico, interfaceElemento, interfaceElementoSplitterId,
     *                                perfil, login, macWifi, serieWifi, modeloWifi, modeloElemento, prefijoEmpresa, macOnt, serieOnt, modeloOnt,
     *                                ssid, password, numeroPc, modoOperacion, observacion, producto, ultimaMilla,strOrigenMovil)
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 2.7 12-04-2023 - Se agrega inserLog para verificar si se ejecutan las peticiones a MIDDLEWARE
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 2.8 07-06-2023 - Se agrega error_log para verificar si se ejecutan las peticiones a MIDDLEWARE
     */
    public function activarClienteMd($arrayParametros)
    {
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        $usrCreacion                    = $arrayParametros['usrCreacion'];
        $ipCreacion                     = $arrayParametros['ipCreacion'];
        $idEmpresa                      = $arrayParametros['idEmpresa'];
        $servicio                       = $arrayParametros['servicio'];
        $servicioTecnico                = $arrayParametros['servicioTecnico'];
        $interfaceElemento              = $arrayParametros['interfaceElemento'];
        $interfaceElementoSplitterId    = $arrayParametros['interfaceElementoSplitterId'];
        $strCapacidad1                  = $arrayParametros['strCapacidad1'];
        $strCapacidad2                  = $arrayParametros['strCapacidad2'];
        $perfil                         = $arrayParametros['perfil'];
        $login                          = $arrayParametros['login'];
        $macWifi                        = $arrayParametros['macWifi'];
        $serieWifi                      = $arrayParametros['serieWifi'];
        $modeloWifi                     = $arrayParametros['modeloWifi'];
        $modeloElemento                 = $arrayParametros['modeloElemento'];
        $prefijoEmpresa                 = $arrayParametros['prefijoEmpresa'];
        $macOnt                         = $arrayParametros['macOnt'];
        $serieOnt                       = $arrayParametros['serieOnt'];
        $modeloOnt                      = $arrayParametros['modeloOnt'];
        $ssid                           = $arrayParametros['ssid'];
        $password                       = $arrayParametros['password'];
        $numeroPc                       = $arrayParametros['numeroPc'];
        $modoOperacion                  = $arrayParametros['modoOperacion'];
        $observacion                    = $arrayParametros['observacion'];
        $producto                       = $arrayParametros['producto'];
        $ultimaMilla                    = $arrayParametros['ultimaMilla'];
        $idPersonaEmpresaRol            = $arrayParametros['idPersonaEmpresaRol'];
        $idOficina                      = $arrayParametros['idOficina'];
        $strSerieSmartWifi              = !empty($arrayParametros['strSerieSmartWifi'])?$arrayParametros['strSerieSmartWifi']:"";
        $strModeloSmartWifi             = !empty($arrayParametros['strModeloSmartWifi'])?$arrayParametros['strModeloSmartWifi']:"";
        $strMacSmartWifi                = !empty($arrayParametros['strMacSmartWifi'])?$arrayParametros['strMacSmartWifi']:"";
        $strTieneSmartWifiRenta         = !empty($arrayParametros['strTieneSmartWifiRenta'])?$arrayParametros['strTieneSmartWifiRenta']:"";
        $strOrigenMovil                 = $arrayParametros['strOrigenMovil'];
        $arrayDataConfirmacionTn        = array();
        
        $tipoOrden                      = $servicio->getTipoOrden();
        $punto                          = $servicio->getPuntoId();
        $flagTipoOrden                  = 0;
        $strObservacionHistorial        = "";
        $intIdServicioOrigenTraslado    = 0;
        $intIdPuntoOrigen               = 0;
        $status                         = "NA";
        $mensaje                        = "NA";
        $statusMacOnt                   = "NA";
        $statusMacWifi                  = "NA";
        $interfaceElementoSplitter      = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                               ->findOneBy(array("elementoId" => $servicioTecnico->getElementoConectorId(),
                                                                 "nombreInterfaceElemento"=>$interfaceElementoSplitterId));
        $objDetalleElemento             = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                               ->findOneBy(array("elementoId"   => $servicioTecnico->getElementoId(),
                                                                 "detalleNombre"=> 'MIDDLEWARE',
                                                                 "estado"       => 'Activo'));
        $objPersonaEmpresaRol           = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                               ->find($servicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
        $objPersona                     = $objPersonaEmpresaRol->getPersonaId();
        $strIdentificacion              = $objPersona->getIdentificacionCliente();
        $strNombreCliente               = $objPersona->__toString();
        //*----------------------------------------------------------------------*/
      
        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        $this->emNaf->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
      
        $idDocumentoMacOnt  = null;
        $idDocumentoMacWifi = null;
        $ejecutaLdap        = "NO";
        $flagMiddleware     = false;
        
        if($objDetalleElemento)
        {
            if($objDetalleElemento->getDetalleValor() == 'SI')
            {
                $flagMiddleware = true;
            }
        }
        
        //*LOGICA DE NEGOCIO-----------------------------------------------------*/
        try
        {
            /*
             * Codigo para diferenciar si se necesita utilizar middleware o si se necesita utilizar
             * el flujo tradicional
             */
            if($flagMiddleware)
            {
                $ejecutaLdap = "SI";
                if($tipoOrden=='T')
                {
                    $strCalculoPotencia = isset($arrayParametros['calculoPotencia']) ? $arrayParametros['calculoPotencia'] : '';
                    //Cuando el tipo de orden es traslado, se envía por nuevo flujo
                    $arrayRespuestaTraslado = $this->activarClienteMdPorTraslado(array( 'servicio'          => $servicio,
                                                                                        'servicioTecnico'   => $servicioTecnico,
                                                                                        'producto'          => $producto,
                                                                                        'usrCreacion'       => $usrCreacion,
                                                                                        'ipCreacion'        => $ipCreacion,
                                                                                        'idEmpresa'         => $idEmpresa,
                                                                                        'serieOnt'          => $serieOnt,
                                                                                        'macOnt'            => $macOnt,
                                                                                        'modeloOnt'         => $modeloOnt,
                                                                                        'macWifi'           => $macWifi,
                                                                                        'interfaceElemento' => $interfaceElemento,
                                                                                        'interfaceSplitter' => $interfaceElementoSplitter,
                                                                                        'nombreCliente'     => $strNombreCliente,
                                                                                        'identificacion'    => $strIdentificacion,
                                                                                        'idPersonaEmpresaRol' => $idPersonaEmpresaRol,
                                                                                        'calculoPotencia'   => $strCalculoPotencia,
                                                                                        'strPrefijoEmpresa' => $prefijoEmpresa));
                    
                    $status                      = $arrayRespuestaTraslado["status"];
                    $intIdServicioOrigenTraslado = $arrayRespuestaTraslado["strIdServicioOrigen"];
                    $intIdPuntoOrigen            = $arrayRespuestaTraslado["intIdPuntoOrigen"];
                    $arrayDataConfirmacionTn     = $arrayRespuestaTraslado['arrayDataConfirmacionTn'];
                    if($status !== "OK")
                    {
                        throw new \Exception($arrayRespuestaTraslado["mensaje"]);
                    }
                }
                else
                {
                    if($tipoOrden=='N')
                    {
                        $arrayRespuestaServiciosEdb = $this->servicioGeneral
                                                           ->obtenerServiciosPorProducto(
                                                                                array(  "intIdPunto"                    => 
                                                                                        $servicio->getPuntoId()->getId(),
                                                                                        "arrayNombresTecnicoProducto"   => 
                                                                                        array("EXTENDER_DUAL_BAND"),
                                                                                        "strCodEmpresa"                 => $idEmpresa));
                        $intContadorServiciosEdb    = $arrayRespuestaServiciosEdb["intContadorServiciosPorProducto"];
                        if(intval($intContadorServiciosEdb) > 0)
                        {
                            //Se verificará el modelo del ont para verificar que si esté permitido para la instalación de los servicios Extenders
                            $arrayValidaModeloOntParaExtenderOk = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        'MODELOS_EXTENDERS_POR_ONT',
                                                                                        '',
                                                                                        '',
                                                                                        $modeloOnt,
                                                                                        '',
                                                                                        $idEmpresa);
                            if(!isset($arrayValidaModeloOntParaExtenderOk) || empty($arrayValidaModeloOntParaExtenderOk))
                            {
                                $arrayValidaModeloWdbParaExtenderOk = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                      ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                'MODELOS_EQUIPOS',
                                                                                                '',
                                                                                                '',
                                                                                                'WIFI DUAL BAND',
                                                                                                $modeloOnt,
                                                                                                $idEmpresa);
                                if(!isset($arrayValidaModeloWdbParaExtenderOk) || empty($arrayValidaModeloWdbParaExtenderOk))
                                {
                                    throw new \Exception("El modelo de ont ".$modeloOnt." no está permitido para la activación de servicios "
                                                         ."Extenders Dual Band. Si desea continuar la activación con este modelo de ont, "
                                                         ."debe dar de baja los servicios Extender Dual Band de este punto.");
                                }
                            }
                        }
                        //activar puerto
                        $arrParamNuevo = array  (
                                                    'servicio'                  => $servicio,
                                                    'servicioTecnico'           => $servicioTecnico,
                                                    'interfaceElemento'         => $interfaceElemento,
                                                    'modeloElemento'            => $modeloElemento,
                                                    'ultimaMilla'               => $ultimaMilla,
                                                    'producto'                  => $producto,
                                                    'macOnt'                    => $macOnt,
                                                    'serieOnt'                  => $serieOnt,
                                                    'modeloOnt'                 => $modeloOnt,
                                                    'perfil'                    => $perfil,
                                                    'login'                     => $login,
                                                    'observacion'               => $observacion,
                                                    'strCapacidad1'             => $strCapacidad1,
                                                    'strCapacidad2'             => $strCapacidad2,
                                                    'serieWifi'                 => $serieWifi,
                                                    'macWifi'                   => $macWifi,
                                                    'modeloWifi'                => $modeloWifi,
                                                    'ssid'                      => $ssid,
                                                    'numeroPc'                  => $numeroPc,
                                                    'password'                  => $password,
                                                    'modoOperacion'             => $modoOperacion,
                                                    'usrCreacion'               => $usrCreacion,
                                                    'ipCreacion'                => $ipCreacion,
                                                    'idEmpresa'                 => $idEmpresa,
                                                    'prefijoEmpresa'            => $prefijoEmpresa,
                                                    'interfaceElementoSplitter' => $interfaceElementoSplitter,
                                                    'strSerieSmartWifi'         => $strSerieSmartWifi,
                                                    'strModeloSmartWifi'        => $strModeloSmartWifi,
                                                    'strMacSmartWifi'           => $strMacSmartWifi,
                                                    'strTieneSmartWifiRenta'    => $strTieneSmartWifiRenta,
                                                    'idOficina'                 => $idOficina,
                                                    'mensaje'                   => $mensaje,
                                                    'nombreCliente'             => $strNombreCliente,
                                                    'identificacion'            => $strIdentificacion,
                                                    'flagMiddleware'            => $flagMiddleware,
                                                    'flagTipoOrden'             => $flagTipoOrden,
                                                    'strOrigenMovil'            => $strOrigenMovil,
                                                    'intIdPersonaEmpresaRol'    => $idPersonaEmpresaRol
                                                );

                        $arrayRespuesta = $this->activarPuertoPorNuevaMD($arrParamNuevo);
                        $status         = $arrayRespuesta[0]['status'];
                        $mensaje        = $arrayRespuesta[0]['mensaje'];
                        $arrayDataConfirmacionTn = $arrayRespuesta[0]['arrayDataConfirmacionTn'];
 
                        if($status != "OK")
                        {
                            throw new \Exception($mensaje);
                        }
                    }
                    else if($tipoOrden=='R')
                    {
                        $respuestaArray             = $this->activarPuertoPorReubicacion($flagTipoOrden);
                        $status                     = $respuestaArray[0]['status'];
                        $flagTipoOrden              = $respuestaArray[0]['flagTipoOrden'];
                        $interfaceElementoSplitter  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                             ->find($servicioTecnico->getInterfaceElementoId());
                    }

                    //ACTIVACION LOGICA DEL SERVICIO
                    if($status=="OK")
                    {                
                        //setear estado del servicio
                        if($tipoOrden=="R")
                        {
                            $servicio->setEstado("Activo");
                        }
                        else
                        {
                            $servicio->setEstado("EnVerificacion");
                        }

                        //setear estado del punto
                        $punto->setEstado("Activo");
                        $this->emComercial->persist($punto);

                        //setear puertos en el servicio tecnico
                        $servicioTecnico->setInterfaceElementoId($interfaceElemento->getId());
                        $servicioTecnico->setInterfaceElementoConectorId($interfaceElementoSplitter->getId());

                        //conectar puerto del splitter
                        $interfaceElementoSplitter->setEstado("connected");
                        $this->emInfraestructura->persist($interfaceElementoSplitter);

                        if($servicio->getPuntoFacturacionId()==null || $servicio->getPuntoFacturacionId()=="")
                        {
                            $servicio->setPuntoFacturacionId($punto);
                            //punto de facturacion
                            $puntoAdicional = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                                    ->findOneBy(array( "puntoId" => $punto->getId()));
                            $puntoAdicional->setEsPadreFacturacion("S");
                            $this->emComercial->persist($puntoAdicional);
                            $this->emComercial->flush();
                        }

                        $this->emComercial->persist($servicio);
                        $this->emComercial->persist($servicioTecnico);

                        if($flagTipoOrden==1)
                        {
                            $strObservacionHistorial = "Sin ejecucion de Script por REUBICACION";
                        }
                        else
                        {
                            $strObservacionHistorial = $observacion;
                        }

                        //INGRESAR HISTORIAL DEL SERVICIO
                        $this->servicioGeneral->ingresarServicioHistorial($servicio, "EnVerificacion", $strObservacionHistorial, $usrCreacion, $ipCreacion);

                        //LIBERACION DE RECURSOS LOGICOS, SI ES REUBICACION
                        if($tipoOrden=="R")
                        {       
                            /* se liberan recursos,
                             * se ingresan historiales,
                             * se crea solicitud de retiro de equipos,
                             * eliminar equipos anteriores en caso de ser necesario*/
                            $arrParamCancelServicioAnterior = array (
                                                                        'servicio'              => $servicio,
                                                                        'servicioTecnico'       => $servicioTecnico,
                                                                        'tipoOrden'             => $tipoOrden,
                                                                        'usrCreacion'           => $usrCreacion,
                                                                        'ipCreacion'            => $ipCreacion,
                                                                        'producto'              => $producto,
                                                                        'ultimaMilla'           => $ultimaMilla,
                                                                        'idPersonaEmpresaRol'   => $idPersonaEmpresaRol,
                                                                        'idEmpresa'             => $idEmpresa
                                                                    );
                            $this->cancelarServicio->cancelarServicioPorTipoOrden($arrParamCancelServicioAnterior);
                        }
                    }//if($status=="OK")
                }
            }
            else
            {
                if($modeloElemento->getNombreModeloElemento()=="EP-3116")
                {
                    //verifico si el olt esta aprovisionando el CNR
                    $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                  ->findOneBy(array('detalleNombre' =>'APROVISIONAMIENTO_IP',
                                                                    'detalleValor' =>'CNR',
                                                                    'elementoId' => $interfaceElemento->getElementoId()->getId()));

                    if ($objDetalleElemento)
                    {
                        $ejecutaLdap = "SI";
                    }

                    //*OBTENER SCRIPT MAC ONT--------------------------------------------------------*/
                    $scriptArrayMacOnt = $this->servicioGeneral->obtenerArregloScript("obtenerSubscriberMacPuerto",$modeloElemento);
                    $idDocumentoMacOnt= $scriptArrayMacOnt[0]->idDocumento;
                    //*----------------------------------------------------------------------*/

                    //*OBTENER SCRIPT MAC WIFI--------------------------------------------------------*/
                    $scriptArrayMacWifi = $this->servicioGeneral->obtenerArregloScript("obtenerMacIpDinamica",$modeloElemento);
                    $idDocumentoMacWifi= $scriptArrayMacWifi[0]->idDocumento;
                    //*----------------------------------------------------------------------*/
                }
                else
                {
                    $ejecutaLdap = "SI";
                }
                
                if($tipoOrden=='R')
                {
                    $respuestaArray             = $this->activarPuertoPorReubicacion($flagTipoOrden);
                    $status                     = $respuestaArray[0]['status'];
                    $flagTipoOrden              = $respuestaArray[0]['flagTipoOrden'];
                    $interfaceElementoSplitter  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                         ->find($servicioTecnico->getInterfaceElementoId());
                }
                else if($tipoOrden=='T')
                {                
                    $arrParamTraslado = array   (
                                                    'servicio'          => $servicio,
                                                    'servicioTecnico'   => $servicioTecnico,
                                                    'producto'          => $producto,
                                                    'flagTipoOrden'     => $flagTipoOrden,
                                                    'usrCreacion'       => $usrCreacion,
                                                    'ipCreacion'        => $ipCreacion,
                                                    'idEmpresa'         => $idEmpresa,
                                                    'serieOnt'          => $serieOnt,
                                                    'macOnt'            => $macOnt,                                              
                                                    'macWifi'           => $macWifi,
                                                    'interfaceElemento' => $interfaceElemento,
                                                    'nombreCliente'     => $strNombreCliente,
                                                    'identificacion'    => $strIdentificacion
                                                );
                    if (isset($arrayParametros['calculoPotencia'])) 
                    {
                        $arrParamTraslado['calculoPotencia'] = $arrayParametros['calculoPotencia'];
                    }                                                    
                    
                    $respuestaArray = $this->activarPuertoPorTraslado($arrParamTraslado);
                    $status         = $respuestaArray[0]['status'];
                    $flagTipoOrden  = $respuestaArray[0]['flagTipoOrden'];              

                }

                //Valida si flagTipoOrden trae -1 determina que la ejecución en los metodos internos
                //finalizo por algun error o excepcion detectada en alguna validacion. Ejecucion es dada por finalizada
                //Una vez lanzada la excepcion todo transaccion realizada hasta el punto que se lanzo el error sera 
                //reversada con el Rollback
                if($flagTipoOrden == -1)
                {
                    throw new \Exception($respuestaArray[0]['mensaje']);                
                }

                if($tipoOrden=='N' || $flagTipoOrden==3)
                {
                    //ELIMINAR CODIGO DESPUES DE PILOTO MIDDLEWARE
                    //validacion de elementos cliente (ont y wifi) conectados al olt tellion
                    if($modeloElemento->getNombreModeloElemento()=="EP-3116")
                    {
                        //verificar mac ONT conectada
                        $resultadoJsonMacOnt = $this->verificarMacOnt($servicioTecnico, $interfaceElemento, $macOnt, $idDocumentoMacOnt);
                        $statusMacOnt = $resultadoJsonMacOnt->status;
                        if($statusMacOnt=="ERROR")
                        {
                            $respuestaFinal[] = array('status'=>$statusMacOnt, 'mensaje'=>$resultadoJsonMacOnt->mensaje);
                            return $respuestaFinal;
                        }

                        $indice = $resultadoJsonMacOnt->mensaje;
                        //verificar mac WIFI conectada
                        $resultadoJsonMacWifi = $this->verificarMacWifi($servicioTecnico, $interfaceElemento, $macWifi, $indice, $idDocumentoMacWifi);
                        $statusMacWifi = $resultadoJsonMacWifi->status;
                        if($statusMacWifi=="ERROR")
                        {
                            $respuestaFinal[] = array('status'=>$statusMacWifi, 'mensaje'=>$resultadoJsonMacWifi->mensaje);
                            return $respuestaFinal;
                        }
                    }

                    //activar puerto

                    $arrParamNuevo = array  (
                                                'servicio'                  => $servicio,
                                                'servicioTecnico'           => $servicioTecnico,
                                                'interfaceElemento'         => $interfaceElemento,
                                                'modeloElemento'            => $modeloElemento,
                                                'ultimaMilla'               => $ultimaMilla,
                                                'producto'                  => $producto,
                                                'macOnt'                    => $macOnt,
                                                'serieOnt'                  => $serieOnt,
                                                'modeloOnt'                 => $modeloOnt,
                                                'perfil'                    => $perfil,
                                                'login'                     => $login,
                                                'observacion'               => $observacion,
                                                'serieWifi'                 => $serieWifi,
                                                'macWifi'                   => $macWifi,
                                                'modeloWifi'                => $modeloWifi,
                                                'ssid'                      => $ssid,
                                                'numeroPc'                  => $numeroPc,
                                                'password'                  => $password,
                                                'modoOperacion'             => $modoOperacion,
                                                'usrCreacion'               => $usrCreacion,
                                                'ipCreacion'                => $ipCreacion,
                                                'idEmpresa'                 => $idEmpresa,
                                                'prefijoEmpresa'            => $prefijoEmpresa,
                                                'interfaceElementoSplitter' => $interfaceElementoSplitter,
                                                'strSerieSmartWifi'         => $strSerieSmartWifi,
                                                'strModeloSmartWifi'        => $strModeloSmartWifi,
                                                'strMacSmartWifi'           => $strMacSmartWifi,
                                                'strTieneSmartWifiRenta'    => $strTieneSmartWifiRenta,
                                                'idOficina'                 => $idOficina
                                            );

                    $respuestaArray = $this->activarPuertoPorNuevaMD($arrParamNuevo);

                    $status = $respuestaArray[0]['status'];
                    $mensaje = $respuestaArray[0]['mensaje'];
                }
                $strMarcaOlt    = $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                //if($modeloElemento->getNombreModeloElemento()=="MA5608T" && $tipoOrden=='T')
                if($strMarcaOlt == "HUAWEI" && $tipoOrden=='T')
                {

                    $spcTraslado                = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "TRASLADO", $producto);
                    if ($spcTraslado)
                    {
                        $servicioAnterior           = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($spcTraslado->getValor());
                        if ($servicioAnterior)
                        {
                            $servicioTecnicoAnterior    = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                            ->findOneBy(array( "servicioId" => $servicioAnterior->getId()));                              
                        }                                  
                    }

                    if ($servicioTecnicoAnterior)
                    {
                        //VERIFICAR INTERFACES IGUALES - SE ACTIVA IP AUTOMATICAMENTE
                        if($servicioTecnico->getInterfaceElementoId() == $servicioTecnicoAnterior->getInterfaceElementoId() )
                        {
                            $arrayActivacionIps = $this->activarIpsAdicionalesPorPunto( $servicio,
                                                                                    $interfaceElemento,
                                                                                    $idEmpresa,
                                                                                    $modeloElemento,
                                                                                    $usrCreacion,
                                                                                    $ipCreacion,"");
                            $statusIp  = $arrayActivacionIps[0]['status'];
                            $mensajeIp = $arrayActivacionIps[0]['mensaje'];

                            if($statusIp != "OK")
                            {
                                throw new \Exception($mensajeIp);
                            }
                        }         
                    }
                }

                if($status=="OK")
                {                
                    //setear estado del servicio
                    if($tipoOrden=="T" || $tipoOrden=="R")
                    {
                        $servicio->setEstado("Activo");
                    }
                    else
                    {
                        $servicio->setEstado("EnVerificacion");
                    }

                    //setear estado del punto
                    $punto->setEstado("Activo");
                    $this->emComercial->persist($punto);

                    //setear puertos en el servicio tecnico
                    $servicioTecnico->setInterfaceElementoId($interfaceElemento->getId());
                    $servicioTecnico->setInterfaceElementoConectorId($interfaceElementoSplitter->getId());

                    //conectar puerto del splitter
                    $interfaceElementoSplitter->setEstado("connected");
                    $this->emInfraestructura->persist($interfaceElementoSplitter);

                    if($servicio->getPuntoFacturacionId()==null || $servicio->getPuntoFacturacionId()=="")
                    {
                        $servicio->setPuntoFacturacionId($punto);
                        //punto de facturacion
                        $puntoAdicional = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')->findOneBy(array( "puntoId" => $punto->getId()));
                        $puntoAdicional->setEsPadreFacturacion("S");
                        $this->emComercial->persist($puntoAdicional);
                        $this->emComercial->flush();
                    }

                    $this->emComercial->persist($servicio);
                    $this->emComercial->persist($servicioTecnico);

                    if($flagTipoOrden==1)
                    {
                        $strObservacionHistorial = "Sin ejecucion de Script por REUBICACION";
                    }
                    else if($flagTipoOrden==2)
                    {
                        $strObservacionHistorial = "Sin ejecucion de Script por TRASLADO";
                    }
                    else if($flagTipoOrden==3)
                    {
                        $strObservacionHistorial = "Se ejecuto el Script por TRASLADO";
                    }
                    else
                    {
                        $strObservacionHistorial = $observacion;
                    }

                    $this->servicioGeneral->ingresarServicioHistorial($servicio, "EnVerificacion", $strObservacionHistorial, $usrCreacion, $ipCreacion);

                    //si el tipo de orden es Reubicacion o Traslado
                    if($tipoOrden=="T" || $tipoOrden=="R")
                    {                    
                        /* se liberan recursos,
                         * se ingresan historiales,
                         * se crea solicitud de retiro de equipos,
                         * eliminar equipos anteriores en casoser necesario*/
                        $arrParamCancelServicioAnterior = array (
                                                                    'servicio'              => $servicio,
                                                                    'servicioTecnico'       => $servicioTecnico,
                                                                    'tipoOrden'             => $tipoOrden,
                                                                    'usrCreacion'           => $usrCreacion,
                                                                    'ipCreacion'            => $ipCreacion,
                                                                    'producto'              => $producto,
                                                                    'ultimaMilla'           => $ultimaMilla,
                                                                    'idPersonaEmpresaRol'   => $idPersonaEmpresaRol,
                                                                    'idEmpresa'             => $idEmpresa
                                                                );
                        $this->cancelarServicio->cancelarServicioPorTipoOrden($arrParamCancelServicioAnterior);
                    }

                    //si el tipo de orden es Traslado se elimina caracteristica para evitar futuras inconsistencias
                    if($tipoOrden == "T")
                    { 
                        //CARACTERISTICA TRASLADO
                        $spcTraslado = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "TRASLADO", $producto);
                        if ($spcTraslado)
                        {
                            $spcTraslado->setEstado('Eliminado');
                            $this->emComercial->persist($spcTraslado);
                            $this->emComercial->flush();
                        }
                    }
                }
            }
            
            //Se agrega validación adicional para servicios trasladados en casos particulares donde no crea enlace
            if ($status == "OK" && $tipoOrden=='T')
            {
                $servicioTecnico = $this->emComercial
                                        ->getRepository('schemaBundle:InfoServicioTecnico')
                                        ->find($servicioTecnico->getId());
                
                 //objeto interface elemento splitter
                $objInterfaceElementoConectorSt = $this->emInfraestructura
                                                       ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->find($servicioTecnico->getInterfaceElementoConectorId());
                //objeto interface elemento cliente
                $objInterfaceElementoClienteSt  = $this->emInfraestructura
                                                       ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->find($servicioTecnico->getInterfaceElementoClienteId());
                
                $objUltimaMilla = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                       ->findOneBy(array("nombreTipoMedio" => $ultimaMilla));
                
                if (is_object($objInterfaceElementoConectorSt) && 
                    is_object($objInterfaceElementoClienteSt) && 
                    is_object($objUltimaMilla))
                {
                    //buscamos enlace del servicio traslado para validar si existe, caso contrario se crea
                    $objEnlaceSpCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                            ->findOneBy(array("interfaceElementoIniId" => $objInterfaceElementoConectorSt,
                                                              "interfaceElementoFinId" => $objInterfaceElementoClienteSt,
                                                              "estado"                 => "Activo"));
                    if (!is_object($objEnlaceSpCpe))
                    {
                        $objEnlaceSpCpeAntiguo  = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                   ->findOneBy(array("interfaceElementoIniId" => $objInterfaceElementoConectorSt,
                                                                     "estado"                 => "Activo"));
                        if (is_object($objEnlaceSpCpeAntiguo))
                        {
                            $objEnlaceSpCpeAntiguo->setEstado("Eliminado");
                            $this->emInfraestructura->persist($objEnlaceSpCpeAntiguo);
                            $this->emInfraestructura->flush();
                        }
                        /* enlazamos como inicio la ultima interface de elemento crear (TELLION Ó HW) y con fin la interface el smart wifi
                           grabar enlace nuevo - puerto del Splitter con puerto del ont */
                        $objEnlaceNuevo = new InfoEnlace();
                        $objEnlaceNuevo->setInterfaceElementoIniId($objInterfaceElementoConectorSt);
                        $objEnlaceNuevo->setInterfaceElementoFinId($objInterfaceElementoClienteSt);
                        $objEnlaceNuevo->setTipoMedioId($objUltimaMilla);
                        $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                        $objEnlaceNuevo->setEstado("Activo");
                        $objEnlaceNuevo->setUsrCreacion($usrCreacion);
                        $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                        $objEnlaceNuevo->setIpCreacion($ipCreacion);
                        $this->emInfraestructura->persist($objEnlaceNuevo);
                        $this->emInfraestructura->flush();
                    }
                }
            }
        }//try
        catch (\Exception $e)
        {
            error_log($e->getTraceAsString());
            
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->rollback();
            }
          
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
          
            if ($this->emNaf->getConnection()->isTransactionActive())
            {
                $this->emNaf->getConnection()->rollback();
            }            
            
            $status             = "ERROR";
            $mensaje            = "ERROR EN LA LOGICA DE NEGOCIO: <br> ".$e->getMessage();
            $arrayDataConfirmacionTn['datos']['respuesta_confirmacion'] = "ERROR";
            if ($tipoOrden == "T" && $arrayDataConfirmacionTn["statusMiddleware"] === "OK") 
            {
                // LOG 'CONFIRMACION_TN' ENVIO
                $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => $idEmpresa,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => "PROCESO ANTES DE LA PETICION ".$mensaje,
                        'status'              => 'EnvioError',
                        'appAction'           => $this->strConfirmacionTNMiddleware."_".$servicio->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDataConfirmacionTn),
                        'creationUser'        => $usrCreacion));
                $strErrorLog = "Proceso: TrasladarServicioMD, Opción: ".$this->strConfirmacionTNMiddleware
                .", Login: ".$servicio->getPuntoId()->getLogin()
                .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$usrCreacion
                .", Status : EnvioError, Mensaje: ".$strMensaje. ", Descripcion: PROCESO ANTES DE LA PETICION";
                error_log($strErrorLog);
            }
            $this->rdaMiddleware->ejecutaWsSinEsperarRespuestaMiddleware($arrayDataConfirmacionTn);
            if ($tipoOrden == "T" && $arrayDataConfirmacionTn["statusMiddleware"] === "OK") 
            {
                // LOG 'CONFIRMACION_TN' RESPUESTA
                $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => $idEmpresa,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => 'PROCESO DESPUES DE LA PETICION',
                        'status'              => 'RespuestaError',
                        'appAction'           => $this->strConfirmacionTNMiddleware."_".$servicio->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDataConfirmacionTn),
                        'creationUser'        => $usrCreacion));
                $strErrorLog = "Proceso: TrasladarServicioMD, Opción: ".$this->strConfirmacionTNMiddleware
                .", Login: ".$servicio->getPuntoId()->getLogin()
                .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$usrCreacion
                .", Status : RespuestaError, Mensaje: ".$mensaje. ", Descripcion: PROCESO DESPUES DE LA PETICION";
                error_log($strErrorLog);
            }
            $respuestaFinal[]   = array('status'=>$status, 'mensaje'=>$mensaje);

            return $respuestaFinal;
        }
        //*----------------------------------------------------------------------*/
           
        //*DECLARACION DE COMMITS*/
        if ($this->emInfraestructura->getConnection()->isTransactionActive())
        {
            $this->emInfraestructura->getConnection()->commit();
        }

        if ($this->emComercial->getConnection()->isTransactionActive())
        {
            $this->emComercial->getConnection()->commit();
        }

        if ($this->emNaf->getConnection()->isTransactionActive())
        {
            $this->emNaf->getConnection()->commit();
        }     
      
        $this->emInfraestructura->getConnection()->close();
        $this->emComercial->getConnection()->close();
        $this->emNaf->getConnection()->close();
        //*----------------------------------------------------------------------*/
        try 
        {
            //Se crea en el LDAP el nuevo servicio
            if($status=="OK" && $ejecutaLdap == "SI")
            {   
                if($prefijoEmpresa == 'EN')
                {
                    //envio al ldap
                    $objResultadoJsonLdap = $this->servicioGeneral->ejecutarComandoLdap("N", $servicio->getId(), $prefijoEmpresa); 
                }
                else 
                {
                    //envio al ldap
                    $objResultadoJsonLdap = $this->servicioGeneral->ejecutarComandoLdap("N", $servicio->getId());            
                }
                if($objResultadoJsonLdap->status!="OK")
                {
                    $mensaje = $mensaje . "<br>" . $objResultadoJsonLdap->mensaje;
                }
            }
            
            // se valida que la activacion del internet sea correcta
            if($status == "OK")
            {
                $strTipoOrden = $servicio->getTipoOrden();
                if ($strTipoOrden == "N")
                {
                    //se agrega ejecución de activación de servicios McAfee en caso de existir con estado Pendiente.
                    $this->activarServiciosMcAfeePorPunto( $servicio,
                                                          $idEmpresa,
                                                          $idOficina,
                                                          $usrCreacion,
                                                          $ipCreacion );

                    //se agrega ejecución de activación de servicios NetlifeCloud en caso de existir con estado Pendiente.
                    $this->activarServiciosOffice365PorPunto($servicio, 
                                                            $idEmpresa,
                                                            $idOficina, 
                                                            $usrCreacion,
                                                            $ipCreacion);

                    $this->activarProductosAdicionalesEnPlan(array( "intIdServicio"     => $servicio->getId(),
                                                                    "strTipoProceso"    => "INDIVIDUAL",
                                                                    "strOpcion"         => "ACTIVACION",
                                                                    "strCodEmpresa"     => $idEmpresa,
                                                                    "strUsrCreacion"    => $usrCreacion,
                                                                    "strClientIp"       => $ipCreacion));
                    
                    //OBTENER INFORMACIÓN TÉCNICA A UTILIZAR EN WS
                    $arrayParametrosInfoBw = array();
                    $arrayParametrosInfoBw['intIdServicio']     = $servicio->getId();
                    $arrayParametrosInfoBw['intIdEmpresa']      = $idEmpresa;
                    $arrayParametrosInfoBw['strTipoProceso']    = "ACTIVACION";
                    $arrayParametrosInfoBw['strValor']          = $servicio->getId();
                    $arrayParametrosInfoBw['strUsrCreacion']    = $usrCreacion;
                    $arrayParametrosInfoBw['strIpCreacion']     = $ipCreacion;
                    $arrayParametrosInfoBw['strPrefijoEmpresa'] = $prefijoEmpresa;
                    $this->servicePromociones->configurarPromocionesBW($arrayParametrosInfoBw);
                }
                else if ($strTipoOrden == "T") 
                {
                    if($strOrigenMovil == null || !isset($strOrigenMovil) || empty($strOrigenMovil) || $strOrigenMovil!='M'){
                        //finalizar solicitud planificacion
                        $objTipoSolicitudPlanficacion = $this->emComercial
                                                            ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                            ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                              "estado"               => "Activo"));
                        $objSolicitudPlanficacion     = $this->emComercial
                                                            ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                            ->findOneBy(array("servicioId"      => $servicio->getId(),
                                                                              "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                              "estado"          => "Asignada"));

                        if ($objSolicitudPlanficacion)
                        {
                            $objSolicitudPlanficacion->setEstado("Finalizada");
                            $this->emComercial->persist($objSolicitudPlanficacion);
                            $this->emComercial->flush();

                            //crear historial para la solicitud
                            $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                            $objHistorialSolicitudPlani->setDetalleSolicitudId($objSolicitudPlanficacion);
                            $objHistorialSolicitudPlani->setEstado("Finalizada");
                            $objHistorialSolicitudPlani->setObservacion("Cliente instalado");
                            $objHistorialSolicitudPlani->setUsrCreacion($usrCreacion);
                            $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                            $objHistorialSolicitudPlani->setIpCreacion($ipCreacion);
                            $this->emComercial->persist($objHistorialSolicitudPlani);
                            $this->emComercial->flush();

                            $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudPlanficacion->getId();
                            $arrayParametros['strProceso']            = 'Activar';
                            $strMensajeResponse                       = $this->emInfraestructura
                                                                            ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                            ->cerrarTareasPorSolicitud($arrayParametros);
                        }
                    }
                    
                    //OBTENER INFORMACIÓN TÉCNICA A UTILIZAR EN WS
                    $arrayParametrosInfoBw = array();
                    $arrayParametrosInfoBw['intIdServicio']     = $servicio->getId();
                    $arrayParametrosInfoBw['intIdEmpresa']      = $idEmpresa;
                    $arrayParametrosInfoBw['strTipoProceso']    = "TRASLADO";
                    $arrayParametrosInfoBw['strValor']          = $intIdServicioOrigenTraslado;
                    $arrayParametrosInfoBw['strUsrCreacion']    = $usrCreacion;
                    $arrayParametrosInfoBw['strIpCreacion']     = $ipCreacion;
                    $arrayParametrosInfoBw['strPrefijoEmpresa'] = $prefijoEmpresa;
                    $this->servicePromociones->configurarPromocionesBW($arrayParametrosInfoBw);

                    //TRASLADO DE PROMOS MENSUALES
                    $arrayParametrosInfoBw = array();
                    $arrayParametrosInfoBw['strEmpresaCod']     = $idEmpresa;
                    $arrayParametrosInfoBw['intIdPuntoOrigen']  = $intIdPuntoOrigen;
                    $arrayParametrosInfoBw['intIdPuntoDestino'] = $servicio->getPuntoId()->getId();
                    $arrayParametrosInfoBw['strUsrCreacion']    = $usrCreacion;
                    $arrayParametrosInfoBw['strIpCreacion']     = $ipCreacion;
                    $this->servicePromociones->trasladarPromocionesMensuales($arrayParametrosInfoBw);
                }     
            }

            //Proceso para notificar la Activación del servicio a konibit mediante GDA en caso de aplicar.
            try
            {
                if ($prefijoEmpresa === 'MD' && $status === 'OK' && is_object($servicio) && $strTipoOrden == "N")
                {
                    $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                            ->notificarKonibit(array ('intIdServicio'  => $servicio->getId(),
                                                      'strTipoProceso' => 'ACTIVAR',
                                                      'strTipoTrx'     => 'INDIVIDUAL',
                                                      'strUsuario'     => $usrCreacion,
                                                      'strIp'          => $ipCreacion,
                                                      'objUtilService' => $this->serviceUtil));
                }
            }
            catch (\Exception $objException)
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'InfoActivarPuertoService->activarClienteMd->adicional',
                                                'IdServicio: '.$servicio->getId().' - Error: '.$objException->getMessage(),
                                                $usrCreacion,
                                                $ipCreacion);
            }
        } 
        catch (\Exception $objExcep) 
        {
            $this->serviceUtil->insertError('Telcos+',
                                                'InfoActivarPuertoService->activarClienteMd->adicionalTrasladoValidacion',
                                                'IdServicio: '.$servicio->getId().' - Error: '.$objExcep->getMessage(),
                                                $usrCreacion,
                                                $ipCreacion);
        }

        if ($tipoOrden == "T" && $arrayDataConfirmacionTn["statusMiddleware"] === "OK") 
        {
            // LOG 'CONFIRMACION_TN' ENVIO
            $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => $idEmpresa,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => 'PROCESO ANTES DE LA PETICION',
                        'status'              => 'EnvioOK',
                        'appAction'           => $this->strConfirmacionTNMiddleware."_".$servicio->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDataConfirmacionTn),
                        'creationUser'        => $usrCreacion));
            $strErrorLog = "Proceso: TrasladarServicioMD, Opción: ".$this->strConfirmacionTNMiddleware
                .", Login: ".$servicio->getPuntoId()->getLogin()
                .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$usrCreacion
                .", Status : EnvioOK, Mensaje: ".$mensaje. ", Descripcion: PROCESO ANTES DE LA PETICION";
            error_log($strErrorLog);
        }
        $this->rdaMiddleware->ejecutaWsSinEsperarRespuestaMiddleware($arrayDataConfirmacionTn);
        if ($tipoOrden == "T" && $arrayDataConfirmacionTn["statusMiddleware"] === "OK") 
        {
            // LOG 'CONFIRMACION_TN' RESPUESTA
            $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => $idEmpresa,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => 'PROCESO DESPUES DE LA PETICION',
                        'status'              => 'RespuestaOK',
                        'appAction'           => $this->strConfirmacionTNMiddleware."_".$servicio->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDataConfirmacionTn),
                        'creationUser'        => $usrCreacion));
            $strErrorLog = "Proceso: TrasladarServicioMD, Opción: ".$this->strConfirmacionTNMiddleware
                .", Login: ".$servicio->getPuntoId()->getLogin()
                .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$usrCreacion
                .", Status : RespuestaOK, Mensaje: ".$mensaje. ", Descripcion: PROCESO DESPUES DE LA PETICION";
            error_log($strErrorLog);
        }
        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal[] = array('status' => $status, 'mensaje' => $mensaje);
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
      
    }
    
    /**
     * Función que sirve para activar productos adicionales que forman parte de un plan
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 16-12-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 07-03-2019 Se elimina filtro de estado al momento de recuperar caractersíticas del plan
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 02-04-2019 Se agrega recuperación de correos para envío de notificación a clientes indicando que el cambio de plan
     *                         fue realizado exitosamente
     * @since 1.1
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 06-08-2019 Se agrega la programación necesaria para realizar la activación de servicios I. PROTEGIDO MULTI PAID
     *                          con tecnología Kaspersky
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 23-08-2019 Se agrega la obtención de las variables strValor1ParamAntivirus y strValor2LoginesAntivirus para que se consulte
     *                          los parámetros de cada piloto tanto para proceso individual como para los procesos masivos.
     *                          Además se realiza el envío de la variable strMsjTecnologia a los procesos de activación y reintento 
     *                          en dónde se especifica la tecnología del servicio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 23-07-2020 Se elimina restricción respecto a la característica PLANES NUEVOS VIGENTES
     * 
     * @param array $arrayParametros [
     *                                  "intIdServicio"     => id del servicio,
     *                                  "strTipoProceso"    => INDIVIDUAL o MASIVO,
     *                                  "strOpcion"         => ACTIVACION o REINTENTO,
     *                                  "strCodEmpresa"     => id de la empresa en sesión,
     *                                  "strUsrCreacion"    => usuario de creación,
     *                                  "strClientIp"       => ip del cliente,
     *                                  
     *                               ]
     */
    public function activarProductosAdicionalesEnPlan($arrayParametros)
    {
        $boolFalse                  = false;
        $objProductoMcAfee          = null;
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strClientIp                = $arrayParametros["strClientIp"];
        $intIdServicio              = $arrayParametros["intIdServicio"];
        $strValor1ParamAntivirus    = $arrayParametros['strValor1ParamAntivirus'] ? $arrayParametros['strValor1ParamAntivirus'] : "";
        $strValor2LoginesAntivirus  = $arrayParametros['strValor2LoginesAntivirus'] ? $arrayParametros['strValor2LoginesAntivirus'] : "";
        $strStatus                  = "OK";
        try
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio))
            {
                $arrayRespuesta = array("status" => "ERROR", "mensaje" => "No se ha podido obtener el objeto servicio");
                return $arrayRespuesta;
            }
            $arrayParametros["objServicio"] = $objServicio;
            if(isset($arrayParametros["strTipoProceso"]) && !empty($arrayParametros["strTipoProceso"])
                && $arrayParametros["strTipoProceso"] === "CAMBIO DE PLAN MASIVO")
            {
                $objPuntoServicio       = $objServicio->getPuntoId();
                $objPerServicio         = $objPuntoServicio->getPersonaEmpresaRolId();
                $objPersonaServicio     = $objPerServicio->getPersonaId();
                $strNombreCliente       = sprintf("%s",$objPersonaServicio);
                $arrayParamsCorreos     = array("intIdPunto"        => $objPuntoServicio->getId(),
                                                "strUsrCreacion"    => $strUsrCreacion,
                                                "strIpCreacion"     => $strClientIp);
                $arrayCorreosCliente    = $this->serviceLicenciasKaspersky->getCorreosSplitLicencias($arrayParamsCorreos);
                
                // Enviamos correo
                $arrayParametrosEnvio   = array('nombres' => $strNombreCliente);
                /* TODO: Agregar fragmento de codigo para el envio de notificaciones y eliminar la siguiente linea.*/
                array($arrayCorreosCliente, $arrayParametrosEnvio);
            }
        }
        catch (\Exception $e)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activarProductosAdicionalesEnPlan',
                                            "Envio de Correo Cambio Plan Masivo ".$e->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp);

        }
        
        try
        {
            $objPlanServicio = $objServicio->getPlanId();
            if(is_object($objPlanServicio))
            {
                $intIdPlanServicio          = $objPlanServicio->getId();
                $strFlujoAntivirus          = "";
                $strValorAntivirus          = "";
                $arrayDetallesPlanServicio  = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                                ->findBy(array("planId"=>$intIdPlanServicio));
                                
                foreach($arrayDetallesPlanServicio as $objDetallePlanServicio)
                {
                    $objProductoDetallePlan = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->find($objDetallePlanServicio->getProductoId());
                    if(is_object($objProductoDetallePlan))
                    {
                        $boolVerificaMacAfeeEnPlan  = strpos($objProductoDetallePlan->getDescripcionProducto(), 'I. PROTEGIDO MULTI PAID');

                        if($boolVerificaMacAfeeEnPlan !== $boolFalse)
                        {
                            $boolMacAfeeEnPlan          = $boolVerificaMacAfeeEnPlan;
                            $objProductoMcAfee          = $objProductoDetallePlan;
                            $objDetallePlanMcAfee       = $objDetallePlanServicio;
                            $arrayValidaFlujoAntivirus  = $this->serviceLicenciasKaspersky
                                                               ->validaFlujoAntivirus(array(
                                                                                            "intIdPunto"                => 
                                                                                            $objServicio->getPuntoId()->getId(),
                                                                                            "strCodEmpresa"             => 
                                                                                            $arrayParametros["strCodEmpresa"],
                                                                                            "strValor1ParamAntivirus"   => $strValor1ParamAntivirus,
                                                                                            "strValor2LoginesAntivirus" => $strValor2LoginesAntivirus
                                                                                      ));
                            $strFlujoAntivirus  = $arrayValidaFlujoAntivirus["strFlujoAntivirus"];
                            $strValorAntivirus  = $arrayValidaFlujoAntivirus["strValorAntivirus"];
                            
                        }
                    }
                }
                
                if($boolMacAfeeEnPlan !== $boolFalse && is_object($objProductoMcAfee) 
                    && is_object($objDetallePlanMcAfee))
                {
                    $arrayParametros["strValorAntivirus"]       = $strValorAntivirus;
                    if(isset($strValorAntivirus) && !empty($strValorAntivirus))
                    {
                        $arrayParametros['strMsjTecnologia'] = " con tecnología ".$strValorAntivirus;
                    }
                    else
                    {
                        $arrayParametros['strMsjTecnologia'] = "";
                    }
                    $arrayParametros["objServicio"]             = $objServicio;
                    $arrayParametros["objProducto"]             = $objProductoMcAfee;
                    if($strFlujoAntivirus === "NUEVO")
                    {
                        $arrayParametros["objDetallePlanIPMP"]  = $objDetallePlanMcAfee;
                        $arrayActualizarReintentos              = $this->serviceLicenciasKaspersky
                                                                       ->actualizarReintentosIPMPPrevio($arrayParametros);
                        $strStatusActualizarReintentos          = $arrayActualizarReintentos["status"];
                        $strMensajeActualizarReintentos         = $arrayActualizarReintentos["mensaje"];
                        $strEliminaReintentos                   = $arrayActualizarReintentos["eliminaReintentos"];
                        if($strStatusActualizarReintentos !== "OK")
                        {
                            throw new \Exception($strMensajeActualizarReintentos);
                        }
                        if($objServicio->getEstado() !== "In-Corte")
                        {
                            $arrayParametros["obsIntentosPermitidos"]   = $strMensajeActualizarReintentos;
                            $arrayParametros["eliminaReintentos"]       = $strEliminaReintentos;
                            $arrayRespuestaWsMcAfee                     = $this->serviceLicenciasKasperskyWs
                                                                               ->activacionWsProductoIPMP($arrayParametros);
                            $arrayParametros["statusWsIPMP"]            = $arrayRespuestaWsMcAfee["status"];
                            $arrayParametros["arrayDataIPMP"]           = $arrayRespuestaWsMcAfee["arrayDataIPMP"];
                            $arrayRespuestaReintentos                   = $this->serviceLicenciasKaspersky
                                                                               ->actualizarReintentosIPMPPosterior($arrayParametros);
                            $strStatus                                  = $arrayRespuestaReintentos["status"];
                            $strMensaje                                 = $arrayRespuestaReintentos["mensaje"];
                            if($strStatus !== "OK")
                            {
                                throw new \Exception($strMensaje);
                            }
                            if($arrayRespuestaWsMcAfee["status"] === "OK")
                            {
                                $arrayParametros["strHabilitaTransaccion"]  = "SI";
                                $arrayRespuestaSpc  = $this->serviceLicenciasKaspersky->creaSpcActivacionIPMP($arrayParametros);
                                if($arrayRespuestaSpc["status"] === "ERROR")
                                {
                                    $strMensaje .= "<br>Las características no se guardaron correctamente.";
                                }
                            }
                        }
                        else
                        {
                            $strStatus  = $strStatusActualizarReintentos;
                            $strMensaje = "";
                        }
                    }
                    else
                    {
                        $arrayParametros["objDetallePlanMcAfee"]    = $objDetallePlanMcAfee;
                        $arrayActualizarReintentos                  = $this->actualizarReintentosMcAfeePrevio($arrayParametros);
                        $strStatusActualizarReintentos              = $arrayActualizarReintentos["status"];
                        $strMensajeActualizarReintentos             = $arrayActualizarReintentos["mensaje"];
                        $strEliminaReintentos                       = $arrayActualizarReintentos["eliminaReintentos"];
                        if($strStatusActualizarReintentos !== "OK")
                        {
                            throw new \Exception($strMensajeActualizarReintentos);
                        }
                        if($objServicio->getEstado() !== "In-Corte")
                        {
                            $arrayParametros["obsIntentosPermitidos"]           = $strMensajeActualizarReintentos;
                            $arrayParametros["eliminaReintentos"]               = $strEliminaReintentos;
                            $arrayRespuestaWsMcAfee                             = $this->activacionWsProductoMcAfeeEnPlan($arrayParametros);
                            $arrayParametros["statusWsMcAfee"]                  = $arrayRespuestaWsMcAfee["status"];
                            $arrayParametros["arrayInfoClienteMcAfee"]          = $arrayRespuestaWsMcAfee["arrayInfoClienteMcAfee"];
                            $arrayRespuestaReintentos                           = $this->actualizarReintentosMcAfeePosterior($arrayParametros);
                            $strStatus                                          = $arrayRespuestaReintentos["status"];
                            $strMensaje                                         = $arrayRespuestaReintentos["mensaje"];
                            if($strStatus !== "OK")
                            {
                                throw new \Exception($strMensaje);
                            }
                            if($arrayRespuestaWsMcAfee["status"] === "OK")
                            {
                                $arrayRespuestaSpc = $this->creaSpcActivacionMcAfee($arrayParametros);
                                if($arrayRespuestaSpc["status"] === "ERROR")
                                {
                                    $strMensaje .= "<br>Las características no se guardaron correctamente.";
                                }
                            }
                        }
                        else
                        {
                            $strStatus  = $strStatusActualizarReintentos;
                            $strMensaje = "";
                        }
                    }
                }
            }
        } 
        catch (\Exception $e)
        {
            $strStatus          = "ERROR";
            $strMensaje         = "Ha ocurrido un error al reintentar la activación. Por favor notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activarProductosAdicionalesEnPlan',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp);
        }
        $arrayRespuesta = array("status" => $strStatus, "mensaje" => $strMensaje);
        return $arrayRespuesta;
    }
    
    
    /**
     * Función que actualiza los reintentos antes de enviar al web service de activación de McAfee
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 20-12-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 15-03-2019   Se agrega programación para controlar errores que se presentan en servicios de nuevos planes MD
     *                           comercializados por el app Movil Comercial
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 02-04-2019   Se agregan modificaciones para recuperar información de correos a utilizar
     *                           en activación de servicios mcafee
     * @since 1.1
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 31-05-2019 Se realizan modificaciones(se agregan validaciones y creación de bandera de reintento para 
     *                         poder ejecutar la activación del servicio de manualmente) en el proceso de validación de correos 
     *                         utilizados para activar la suscripción mcafee que 
     *                         se encuentra dentro del plan de internet del cliente
     * @since 1.2
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 31-05-2019 Se agrega salto de linea y sombreado al texto del mensaje de error al no recuperar información de correo
     *                         en activaciones de suscripciones mcafee
     * @since 1.3
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"           => objeto del servicio,
     *                                  "objProducto"           => objeto del producto McAfee,
     *                                  "strTipoProceso"        => INDIVIDUAL o MASIVO,
     *                                  "strOpcion"             => ACTIVACION o REINTENTO,
     *                                  "strCodEmpresa"         => id de la empresa en sesión,
     *                                  "strUsrCreacion"        => usuario de creación,
     *                                  "strClientIp"           => ip del cliente
     *                               ]
     */
    public function actualizarReintentosMcAfeePrevio($arrayParametros)
    {
        $strCodEmpresa                      = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion                     = $arrayParametros["strUsrCreacion"];
        $strClientIp                        = $arrayParametros["strClientIp"];
        $strOpcion                          = $arrayParametros["strOpcion"];
        $objServicio                        = $arrayParametros["objServicio"];
        $objProductoMcAfee                  = $arrayParametros["objProducto"];
        $strTipoProceso                     = $arrayParametros["strTipoProceso"];
        $objDetallePlanMcAfee               = $arrayParametros["objDetallePlanMcAfee"];
        $strEliminaReintentos               = "NO";
        $strObservacionIntentosPermitidos = "";
        $this->emComercial->beginTransaction();
        try
        {
            $arrayNumReintentosMcAfee   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne( 'NUMERO_MAX_REINTENTOS_MCAFEE', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    "PLAN", 
                                                                    "", 
                                                                    '', 
                                                                    "", 
                                                                    '', 
                                                                    $strCodEmpresa);
            if(!empty($arrayNumReintentosMcAfee))
            {
                $intNumReintentosPermitidos = intval($arrayNumReintentosMcAfee["valor2"]);
            }
            else
            {
                $intNumReintentosPermitidos = 1;
            }
            
            $objSpcCorreoElectronico = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                 'CORREO ELECTRONICO',
                                                                                                  $objProductoMcAfee
                                                                                                );
                
            
            if($strTipoProceso === "MASIVO" || $strTipoProceso === "CAMBIAR_PLAN" || !is_object($objSpcCorreoElectronico))
            {
                $arrayParamsGuardarSpc  = array("objServicio"       => $objServicio,
                                                "strUsrCreacion"    => $strUsrCreacion,
                                                "objProducto"       => $objProductoMcAfee);
                $strCorreoMcAfee        = $this->servicioGeneral->getCorreoDatosEnvioMd(array("intIdPunto"            => 
                                                                                            $objServicio->getPuntoId()->getId(),
                                                                                            "strValidaCorreoMcAfee" => "SI",
                                                                                            "strUsrCreacion"       =>
                                                                                            $strUsrCreacion,
                                                                                            "strIpCreacion"       =>
                                                                                            $strClientIp));


                //Guardar tiene internet, correo y cantidad de dispositivos
                $arrayParamsGuardarSpc["strCaracteristica"] = "CORREO ELECTRONICO";
                $arrayParamsGuardarSpc["strValor"]          = empty($strCorreoMcAfee)?"SIN CORREO":$strCorreoMcAfee;
                $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                if($arrayRespuestaGuardarSpc["status"] == 'ERROR')
                {
                    $strStatus = "ERROR";
                    throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
                }


                $arrayParamsGuardarSpc["strCaracteristica"] = "TIENE INTERNET";
                $arrayParamsGuardarSpc["strValor"]          = "PLAN";
                $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                if($arrayRespuestaGuardarSpc["status"] == 'ERROR')
                {
                    $strStatus = "ERROR";
                    throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
                }

                
                $strCantidadDispositivos    = "";
                $arrayCaractsPlanProducto   = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                                ->getCaracteristicas($objDetallePlanMcAfee->getId());
                                
                foreach($arrayCaractsPlanProducto as $arrayCaractsPlanProducto)
                {
                    if ($arrayCaractsPlanProducto["nombre"] === "CANTIDAD DISPOSITIVOS")
                    {
                        $strCantidadDispositivos = $arrayCaractsPlanProducto["valor"];
                    }
                }
                $arrayParamsGuardarSpc["strCaracteristica"] = "CANTIDAD DISPOSITIVOS";
                $arrayParamsGuardarSpc["strValor"]          = $strCantidadDispositivos;
                $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                if($arrayRespuestaGuardarSpc["status"] == 'ERROR')
                {
                    $strStatus = "ERROR";
                    throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
                }
                
                if(empty($strCorreoMcAfee))
                {
                    if ($strTipoProceso === "CAMBIAR_PLAN" || $strTipoProceso === "MASIVO")
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                        $objProductoMcAfee, 
                                                                                        "NUMERO REINTENTOS", 
                                                                                        "0", 
                                                                                        $strUsrCreacion);
                        $strObservacionHistorial = "No se activó el producto ".
                                                   $objProductoMcAfee->getDescripcionProducto().
                                                   " incluido en el plan.<br /><b>No se recuperó ningún correo disponible del cliente</b>.";
                        $objServicioHistorial = new InfoServicioHistorial();
                        $objServicioHistorial->setServicioId($objServicio);
                        $objServicioHistorial->setObservacion($strObservacionHistorial);
                        $objServicioHistorial->setEstado($objServicio->getEstado());
                        $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objServicioHistorial->setIpCreacion($strClientIp);
                        $this->emComercial->persist($objServicioHistorial);
                        $this->emComercial->flush();
                        $this->emComercial->commit();
                    }
                    $strStatus = "ERROR";
                    throw new \Exception("No se recuperó ningún correo del cliente.");
                }

                if($strTipoProceso === "MASIVO" && $objServicio->getEstado() === "In-Corte")
                {
                    $arrayParamsGuardarSpc["strCaracteristica"] = "ACTIVACION POR MASIVO";
                    $arrayParamsGuardarSpc["strValor"]          = "SI";
                    $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                    if($arrayRespuestaGuardarSpc["status"] == 'ERROR')
                    {
                        $strStatus = "ERROR";
                        throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
                    }
                }
            }
            
            if($strOpcion === "REINTENTO")
            {
                $objSpcNumReintentos    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                    'NUMERO REINTENTOS',
                                                                                                    $objProductoMcAfee
                                                                                                    );
                if(is_object($objSpcNumReintentos))
                {
                    $strNumReintentoActual = $objSpcNumReintentos->getValor();

                    if(intval($strNumReintentoActual))
                    {
                        $intNumReintentoActual = intval($strNumReintentoActual);
                    }
                    else
                    {
                        $intNumReintentoActual = 0;
                    }
                    $intNuevoNumReintento = $intNumReintentoActual + 1;
                    if($intNuevoNumReintento == $intNumReintentosPermitidos)
                    {
                        $strEliminaReintentos = "SI";
                        $strObservacionIntentosPermitidos .= "<br>Se ha cumplido con el número máximo de reintentos permitidos.";
                        
                    }
                    $objSpcNumReintentos->setValor($intNuevoNumReintento);
                    $objSpcNumReintentos->setUsrUltMod($strUsrCreacion);
                    $objSpcNumReintentos->setFeUltMod(new \DateTime('now'));
                    $this->emComercial->persist($objSpcNumReintentos);
                    $this->emComercial->flush();
                }
                else
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                    $objProductoMcAfee, 
                                                                                    "NUMERO REINTENTOS", 
                                                                                    "1", 
                                                                                    $strUsrCreacion);
                }
            }
            $strStatus  = "OK";
            $strMensaje = $strObservacionIntentosPermitidos;
            $this->emComercial->flush();
            $this->emComercial->commit();
        } 
        catch (\Exception $e) 
        {
            $strStatus          = "ERROR";
            $strMensaje         = "Ha ocurrido un error al reintentar la activación. Por favor notificar a Sistemas";
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->actualizarReintentosMcAfeePrevio',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp);
        }
        
        $arrayRespuesta = array("status"            => $strStatus,
                                "mensaje"           => $strMensaje,
                                "eliminaReintentos" => $strEliminaReintentos);
        return $arrayRespuesta;
    }
    
    /**
     * Función que obtiene la respuesta del ws para la activación de McAfee
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 16-12-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 28-02-2019 Se corrige nombre de método a ejecutar en el ws mcafee en la activación de suscripciones
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 02-04-2019 Se agrega log de errores y envío de notificación a clientes referente a la suscripción del 
     *                         servicio mcafee contratado
     * @since 1.1
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 13-06-2019 Se agrega validación de correo antes de enviar la petición a mcafee para evitar inconsistencias de información
     * @since 1.2
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 14-08-2019 Se agrega manejo de excepciones para el envío de correo
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"       => objeto del servicio,
     *                                  "objProducto"       => objeto del producto McAfee,
     *                                  "strUsrCreacion"    => usuario de creación,
     *                                  "strClientIp"       => ip del cliente
     *                               ]
     */
    public function activacionWsProductoMcAfeeEnPlan($arrayParametros)
    {
        $objServicio            = $arrayParametros["objServicio"];
        $objProductoMcAfee      = $arrayParametros["objProducto"];
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $strClientIp            = $arrayParametros['strClientIp'];
        $objDetallePlanMcAfee   = $arrayParametros["objDetallePlanMcAfee"];
        $strTipoProducto        = "PAID";
        $strStatus              = "";
        $strMensaje             = "";
        try
        {
            if ($objServicio->getEstado() !== 'Activo' &&  $objServicio->getEstado() !=='EnVerificacion' && $objServicio->getEstado() !=='EnPruebas')
            {
                $strStatus = "ERROR";
                throw new \Exception("El punto no tiene un servicio de Internet en estado Activo");
            }
            $intIdServicio          = $objServicio->getId();
            $arrayDatosCliente      = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                        ->getDatosClientePorIdServicio($intIdServicio,false);
            $arrayInfoClienteMcAfee = $this->licenciasMcAfee
                                           ->obtenerInformacionClienteMcAffe(array( "intIdPersona"          => $arrayDatosCliente['ID_PERSONA'],
                                                                                    "intIdServicio"         => $intIdServicio,
                                                                                    "strNombrePlan"         => "",
                                                                                    "strEsActivacion"       => "SI",
                                                                                    "objProductoMcAfee"     => $objProductoMcAfee,
                                                                                    "objDetallePlanMcAfee"  => $objDetallePlanMcAfee));
            $arrayInfoClienteMcAfee["strTipoTransaccion"] = 'Activacion';
            if ($arrayInfoClienteMcAfee["strError"] == 'true')
            {
                $strStatus = "ERROR";
                throw new \Exception("problemas al obtener información del cliente");
            }
            
            $objParametroDetIProtegido  = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->findOneBy(array("descripcion"   => "I. PROTEGIDO MULTI",
                                                                              "estado"        => "Activo",
                                                                              "valor1"        => $strTipoProducto));

            if (!is_object($objParametroDetIProtegido))
            {
                $strStatus = "ERROR";
                throw new \Exception("Problemas al obtener información del producto McAfee.");
            }

            $arrayInfoClienteMcAfee["strSKU"]       = $objParametroDetIProtegido->getValor2();
            $arrayInfoClienteMcAfee["strMetodo"]    = 'CrearSuscripcionMultidispositivo';
            $arrayInfoClienteMcAfee["intLIC_QTY"]   = $arrayInfoClienteMcAfee["strCantidadDispositivos"];
            $arrayInfoClienteMcAfee["intQTY"]       = 1;
            
            if (empty($arrayInfoClienteMcAfee["strCorreo"]) || $arrayInfoClienteMcAfee["strCorreo"] == "SIN CORREO")
            {
                $strMensajeErrorCorreo = "El correo debe ser actualizado para poder realizar la ".
                                         "activación del producto MCAFEE.<br /> Valor Actual: <b>".$arrayInfoClienteMcAfee["strCorreo"]."</b>";
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strMensajeErrorCorreo);
                $objServicioHistorial->setEstado($objServicio->getEstado());
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strClientIp);
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();
                $strStatus = "ERROR";
                throw new \Exception();
            }
            
            $arrayRespuestaSuscripcion = $this->licenciasMcAfee->operacionesSuscripcionCliente($arrayInfoClienteMcAfee);
            
            if ($arrayRespuestaSuscripcion["procesoExitoso"] == "false")
            {
                //historial del servicio
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($arrayRespuestaSuscripcion["mensajeRespuesta"]);
                $objServicioHistorial->setEstado($objServicio->getEstado());
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strClientIp);
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();
                $strStatus = "ERROR";
                throw new \Exception($arrayRespuestaSuscripcion["mensajeRespuesta"]);
            }
            $arrayInfoClienteMcAfee["referencia"] = $arrayRespuestaSuscripcion["referencia"];
            $strStatus = 'OK';
            
            /* envío de correo a cliente indicando a cual de todos sus contactos le llegará la notificación de McAfee
               con la información de sus licencias contratadas */
            $objPuntoServicio   = $objServicio->getPuntoId();
            $objPerServicio     = $objPuntoServicio->getPersonaEmpresaRolId();
            $objPersonaServicio = $objPerServicio->getPersonaId();
            $strNombreCliente   = sprintf("%s",$objPersonaServicio);
            $arrayParametrosCorreoMcAfee = array();
            $arrayParametrosCorreoMcAfee['intIdPunto']     = $objServicio->getPuntoId()->getId();
            $arrayParametrosCorreoMcAfee['strUsrCreacion'] = $strUsrCreacion;
            $arrayParametrosCorreoMcAfee['strIpCreacion']  = $strClientIp;
            $arrayCorreosCliente = $this->servicioGeneral->getCorreosMcAfee($arrayParametrosCorreoMcAfee);
            $arrayCorreosCliente[] = $arrayInfoClienteMcAfee["strCorreo"];
            $arrayParametrosEnvio   = array('nombreCliente' => $strNombreCliente,
                                            'correo'        => $arrayInfoClienteMcAfee["strCorreo"]);
            try
            {
                $this->envioPlantilla->generarEnvioPlantilla(   'Bienvenido a NetlifeDefense, el sistema de '.
                                                                'seguridad informática para proteger tu vida digital.', 
                                                                $arrayCorreosCliente, 
                                                                'ACT_MCAFEE', 
                                                                $arrayParametrosEnvio, 
                                                                '','','', null, false,
                                                                'notificacionesnetlife@netlife.info.ec');
            }
            catch (\Exception $e)
            {
                error_log("No se ha podido enviar el correo con código ACT_MCAFEE ".$e->getMessage());
            }
        }
        catch (\Exception $e)
        {
            $arrayInfoClienteMcAfee = array();
            if ($strStatus === 'ERROR')
            {
                $strMensaje = $e->getMessage();    
            }
            else
            {
                $strStatus  = "ERROR";
                $strMensaje = "";
            }
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activacionWsProductoMcAfeeEnPlan',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp);
        }
        $arrayRespuestaServicio = array("status"                    => $strStatus,
                                        "mensaje"                   => $strMensaje,
                                        "arrayInfoClienteMcAfee"    => $arrayInfoClienteMcAfee);
        return $arrayRespuestaServicio;
    }
    
    /**
     * Función que crea las características técnicas asociadas a un servicio McAfee
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 16-12-2018
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"               => objeto del servicio,
     *                                  "objProducto"               => objeto del producto McAfee,
     *                                  "strUsrCreacion"            => usuario de creación,
     *                                  "strClientIp"               => ip del cliente,
     *                                  "arrayInfoClienteMcAfee"    => información del cliente que se envió al Ws de McAfee
     *                               ]
     */
    public function creaSpcActivacionMcAfee($arrayParametros)
    {
        $objServicio            = $arrayParametros["objServicio"];
        $objProductoMcAfee      = $arrayParametros["objProducto"];
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $strClientIp            = $arrayParametros['strClientIp'];
        $arrayInfoClienteMcAfee = $arrayParametros["arrayInfoClienteMcAfee"];
        $strMensaje             = "";
        
        $this->emComercial->beginTransaction();
        try
        {
            //grabar caracteristica PASSWORD
            $arrayParamsGuardarSpc = array( "objServicio"       => $objServicio,
                                            "strUsrCreacion"    => $strUsrCreacion,
                                            "objProducto"       => $objProductoMcAfee);
            $arrayParamsGuardarSpc["strCaracteristica"] = "PASSWORD";
            $arrayParamsGuardarSpc["strValor"]          = $arrayInfoClienteMcAfee["strPassword"];
            $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
            if ($arrayRespuestaGuardarSpc["status"] == 'ERROR')
            {
                $strStatus = "ERROR";
                throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
            }

            //grabar caracteristica PARTNERREF
            $arrayParamsGuardarSpc["strCaracteristica"] = "PARTNERREF";
            $arrayParamsGuardarSpc["strValor"]          = $arrayInfoClienteMcAfee["strPartnerRef"];
            $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
            if ($arrayRespuestaGuardarSpc["status"] == 'ERROR')
            {
                $strStatus = "ERROR";
                throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
            }

            //grabar caracteristica CUSTOMERCONTEXTID
            $arrayParamsGuardarSpc["strCaracteristica"] = "CUSTOMERCONTEXTID";
            $arrayParamsGuardarSpc["strValor"]          = $arrayInfoClienteMcAfee["strCustomerContextId"];
            $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
            if ($arrayRespuestaGuardarSpc["status"] == 'ERROR')
            {
                $strStatus = "ERROR";
                throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
            }
            
            //grabar caracteristica SKU
            $arrayParamsGuardarSpc["strCaracteristica"] = "SKU";
            $arrayParamsGuardarSpc["strValor"]          = $arrayInfoClienteMcAfee["strSKU"];
            $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
            if ($arrayRespuestaGuardarSpc["status"] == 'ERROR')
            {
                $strStatus = "ERROR";
                throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
            }
            
            //grabar caracteristica REFERENCIA
            $arrayParamsGuardarSpc["strCaracteristica"] = "REFERENCIA";
            $arrayParamsGuardarSpc["strValor"]          = $arrayInfoClienteMcAfee["referencia"];
            $arrayRespuestaGuardarSpc = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
            if($arrayRespuestaGuardarSpc["status"] == 'ERROR')
            {
                $strStatus = "ERROR";
                throw new \Exception($arrayRespuestaGuardarSpc["mensaje"]);
            }
            $this->emComercial->flush();
            
            $strStatus = 'OK';
            $this->emComercial->commit();
        }
        catch (\Exception $e)
        {
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }
            if ($strStatus === 'ERROR')
            {
                $strMensaje = $e->getMessage();    
            }
            else
            {
                $strStatus  = "ERROR";
                $strMensaje = "";
            }
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->creaSpcActivacionMcAfee',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp);
        }
        $arrayRespuestaServicio = array("status"    => $strStatus,
                                        "mensaje"   => $strMensaje);
        return $arrayRespuestaServicio;
    }
    
    
    /**
     * Función que actualiza los reintentos después de enviar al web service de activación de McAfee
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 20-12-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 13-06-2019   Se agrega texto a mensaje de respuesta al usuario cuando la activación termina con errores
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"           => objeto del servicio,
     *                                  "objProducto"           => objeto del producto McAfee,
     *                                  "statusWsMcAfee"        => status de la respuesta al web service,
     *                                  "eliminaReintentos"     => parámetro que verifica si el servicio ya cumplió  con el 
     *                                                             máximo número de reintentos,
     *                                  "obsIntentosPermitidos" => observación respecto a los intentos permitidos,
     *                                  "strOpcion"             => ACTIVACION o REINTENTO,
     *                                  "strCodEmpresa"         => id de la empresa en sesión,
     *                                  "strUsrCreacion"        => usuario de creación,
     *                                  "strClientIp"           => ip del cliente
     *                               ]
     */
    public function actualizarReintentosMcAfeePosterior($arrayParametros)
    {
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strClientIp                = $arrayParametros["strClientIp"];
        $strOpcion                  = $arrayParametros["strOpcion"];
        $objServicio                = $arrayParametros["objServicio"];
        $objProductoMcAfee          = $arrayParametros["objProducto"];
        $strStatusWsMcAfee          = $arrayParametros["statusWsMcAfee"];
        $strEliminaReintentos       = $arrayParametros["eliminaReintentos"];
        $strObsIntentosPermitidos   = $arrayParametros["obsIntentosPermitidos"];
        $this->emComercial->beginTransaction();
        try
        {
            if($strStatusWsMcAfee === "OK")
            {
                $strObservacionHistorial    = "Se activó el producto ".$objProductoMcAfee->getDescripcionProducto()." incluido en el plan.";
                $strEliminaReintentos       = "SI";
            }
            else
            {
                $strObservacionHistorial = "No se activó el producto ".
                                           $objProductoMcAfee->getDescripcionProducto().
                                           " incluido en el plan.";
                if($strOpcion === "ACTIVACION" || $strOpcion === "ACTIVACION POR MASIVO")
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                    $objProductoMcAfee, 
                                                                                    "NUMERO REINTENTOS", 
                                                                                    "0", 
                                                                                    $strUsrCreacion);
                }
            }
            
            if($strOpcion === "ACTIVACION POR MASIVO")
            {
                $objSpcActivacionPorMasivo  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                        'ACTIVACION POR MASIVO',
                                                                                                        $objProductoMcAfee
                                                                                                        );
                if(is_object($objSpcActivacionPorMasivo))
                {
                    $objSpcActivacionPorMasivo->setEstado("Eliminado");
                    $objSpcActivacionPorMasivo->setUsrUltMod($strUsrCreacion);
                    $objSpcActivacionPorMasivo->setFeUltMod(new \DateTime('now'));
                    $this->emComercial->persist($objSpcActivacionPorMasivo);
                    $this->emComercial->flush();
                }
            }
            
            $objSpcNumReintentos    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'NUMERO REINTENTOS',
                                                                                                $objProductoMcAfee
                                                                                                );
            if(is_object($objSpcNumReintentos))
            {
                if($strOpcion === "REINTENTO")
                {
                    $strObservacionHistorial .= "<br>Reintento #".$objSpcNumReintentos->getValor().$strObsIntentosPermitidos;
                }
                if($strEliminaReintentos === "SI")
                {
                    $objSpcNumReintentos->setEstado("Eliminado");
                    $objSpcNumReintentos->setUsrUltMod($strUsrCreacion);
                    $objSpcNumReintentos->setFeUltMod(new \DateTime('now'));
                    $this->emComercial->persist($objSpcNumReintentos);
                    $this->emComercial->flush();
                }
                else
                {
                    $objPunto               = $objServicio->getPuntoId();
                    $objPersonaEmpresaRol   = $objPunto->getPersonaEmpresaRolId();
                    $objPersona             = $objPersonaEmpresaRol->getPersonaId();
                    $objJurisdiccion        = $objPunto->getPuntoCoberturaId();
                    $strLogin               = $objPunto->getLogin();
                    $strNombreCliente       = sprintf("%s",$objPersona);
                    if(is_object($objJurisdiccion))
                    {
                        $strNombreJurisdiccion  = $objJurisdiccion->getNombreJurisdiccion();
                    }
                    else
                    {
                        $strNombreJurisdiccion  = "";
                    }
                    
                    //Se envía notificación indicando que no se ha podido activar producto McAfee incluido en el plan
                    $arrayParametrosErrorMcAfee = array( 
                                                        "nombreProductoMcAfee"  => $objProductoMcAfee->getDescripcionProducto(),
                                                        "cliente"               => $strNombreCliente,
                                                        "login"                 => $strLogin,
                                                        "nombreJurisdiccion"    => $strNombreJurisdiccion,
                                                        "nombrePlan"            => $objServicio->getPlanId()->getNombrePlan(),
                                                        "observacion"           => $strObservacionHistorial,
                                                        "estadoServicio"        => $objServicio->getEstado()
                                                        );
                    $strAsuntoErrorMcAfee       = "Error en Activacion de ".$objProductoMcAfee->getDescripcionProducto()." - ".$strLogin;
                    $this->envioPlantilla->generarEnvioPlantilla(   $strAsuntoErrorMcAfee, 
                                                                    array(), 
                                                                    'ERROR_MCAFEE', 
                                                                    $arrayParametrosErrorMcAfee, 
                                                                    '', 
                                                                    '', 
                                                                    '',
                                                                    null,
                                                                    false,
                                                                    'notificacionesnetlife@netlife.info.ec');
                }
            }
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($strObservacionHistorial);
            $objServicioHistorial->setEstado($objServicio->getEstado());
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strClientIp);
            $this->emComercial->persist($objServicioHistorial);
            $this->emComercial->flush();
            
            $strStatus  = "OK";
            
            if($strStatusWsMcAfee != "OK")
            {
                $strObservacionHistorial .= "<br /><b>Por favor revise el historial del servicio.</b>";
            }
            
            $strMensaje = $strObservacionHistorial;
            $this->emComercial->commit();
        } 
        catch (\Exception $e) 
        {
            $strStatus          = "ERROR";
            $strMensaje         = "Ha ocurrido un error al reintentar la activación. Por favor notificar a Sistemas";
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->actualizarReintentosMcAfeePosterior',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp);
        }
        
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }

    /**
     * Funcion que activa el cliente cuando el servicio
     * es Nuevo
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 25-06-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 31-07-2015 
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 16-04-2016 Se corrige enlace por traslado de misma tecnologia
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 24-06-2016 Se corrige mensaje de respuestas en caso de no encontrar equipos en NAF
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.5 10-03-2017 Se corrige creación de enlace para traslado de misma tecnología pero diferentes SPLITTER
     * @since 1.4
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.6 24-02-2017 Se agregan parametros para realizar activación de servicios SmartWifi II
     * @since 1.5
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.7 11-05-2017  Se modifica funcion para que se conecte al middleware de Megadatos.
     *                          Se corrige identacion del codigo.
     *                          Se eliminan validaciones de equipos enganchados.
     *                          Se elimina validacion de cancelacion Tellion.
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.8 03-10-2017 Correcciones basadas en analisis de Jenkins
     * @since 1.7
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 27-07-2018 Se agrega validación para no duplicar características cuando un traslado tenga factibilidad con mismos olts y
     *                         mismas interfaces, diferentes splitters o mismos splitters y diferentes interfaces
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.10 23-07-2018  Se agrega programación para activación de servicios ZTE
     * @since 1.8
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.11 17-12-2018 Se obtienen y se agregam envío de parámetros wifi dual band al middleware al activar un servicio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.12 17-01-2018 Se agrega característica asociada al servicio con el origen de la activación, que sólo será creada cuando el plan
     *                          incluya un Extender Dual Band, con el fin de mostrar u ocultar el botón Confirmar Servicio, para evitar que
     *                          se duplique el historial de confirmación de servicio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.13 11-05-2020 Se unifica las validaciones por marca y no por modelo de olt
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.14 23-09-2020 Se agrega verificación de Extender Dual Band que anteriormente se pasaba como parámetro
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.15 12-10-2020 Se inicializa la variable $strEquipoOntDualBand a NO para evitar validación de middleware que no permite un valor
     *                          vacío para la activación y se agrega el parámetro de proceso ejecutante para validación de tecnología Dual Band
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.16 01-12-2020 Se agrega verificación de equipo en NAF de acuerdo a validaciones existentes en AFK_PROCESOS.IN_P_PROCESA_INSTALACION,
     *                          antes de enviar el request a middleware, para evitar errores por NAF que obliguen la eliminación de línea pon
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.17 15-11-2020 Se agrega envío de nuevos parámetros al middleware en caso de clientes PYME (ip_fija_wan, tipo_plan_actual)
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.18 22-02-2021 Se agrega validación por el tipo de IP PRIVADA para su actualización.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.18 15-04-2021 Se elimina el parámetro strProcesoEjecutante enviado a la función arrayVerifTecnologiaDualBand 
     *                          debido a los cambios realizados en dicha función
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.19 10-11-2021 Se construye el arreglo con la información que se enviará al web service para confirmación de opción 
     *                          de Tn a Middleware
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.20 01-01-2022 Se agrega validación par verificar si la tecnología permite validar equipos W y Extender dentro del plan
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.3 22-02-2023 - Se agrega validacion para activar internet Ecuanet y 
     *                           Se agrega envio de prefijo empresa al llamar al middleware para activar servicios en Ecuanet.
     * 
     * @param $arrayParametros  [servicio, servicioTecnico, interfaceElemento, modeloELemento, ultimaMilla, producto, macOnt, serieOnt, modeloOnt,
     *                          perfil, login, observacion, serieWifi, macWifi, modeloWifi, ssid, numeroPc, password, modoOperacion, usrCreacion,
     *                          ipCreacion, idEmpresa, prefijoEmpresa, interfaceElementoSplitter, nombreCliente, identificacion, strSerieSmartWifi,
     *                          strModeloSmartWifi, strMacSmartWifi, strTieneSmartWifiRenta, idOficina]
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     */
    public function activarPuertoPorNuevaMD($arrayParametros)
    {
            //*DECLARACION DE VARIABLES----------------------------------------------*/      
        $servicio                   = $arrayParametros['servicio'];
        $servicioTecnico            = $arrayParametros['servicioTecnico'];
        $interfaceElemento          = $arrayParametros['interfaceElemento'];
        $modeloElemento             = $arrayParametros['modeloElemento'];
        $ultimaMilla                = $arrayParametros['ultimaMilla'];
        $producto                   = $arrayParametros['producto'];
        $macOnt                     = $arrayParametros['macOnt'];
        $serieOnt                   = trim(strtoupper($arrayParametros['serieOnt']));
        $modeloOnt                  = $arrayParametros['modeloOnt'];
        $strCapacidad1              = $arrayParametros['strCapacidad1'];
        $strCapacidad2              = $arrayParametros['strCapacidad2'];
        $perfil                     = $arrayParametros['perfil'];
        $login                      = $arrayParametros['login'];
        $observacion                = $arrayParametros['observacion'];
        $serieWifi                  = trim(strtoupper($arrayParametros['serieWifi']));
        $macWifi                    = $arrayParametros['macWifi'];
        $modeloWifi                 = $arrayParametros['modeloWifi'];
        $ssid                       = $arrayParametros['ssid'];
        $numeroPc                   = $arrayParametros['numeroPc'];
        $password                   = $arrayParametros['password'];
        $modoOperacion              = $arrayParametros['modoOperacion'];
        $usrCreacion                = $arrayParametros['usrCreacion'];
        $ipCreacion                 = $arrayParametros['ipCreacion'];
        $idEmpresa                  = $arrayParametros['idEmpresa'];
        $prefijoEmpresa             = $arrayParametros['prefijoEmpresa'];
        $interfaceElementoSplitter  = $arrayParametros['interfaceElementoSplitter'];
        $strNombreCliente           = $arrayParametros['nombreCliente'];
        $strIdentificacion          = $arrayParametros['identificacion'];
        $flagMiddleware             = $arrayParametros['flagMiddleware'];
        $strSerieSmartWifi          = !empty($arrayParametros['strSerieSmartWifi'])?$arrayParametros['strSerieSmartWifi']:"";
        $strModeloSmartWifi         = !empty($arrayParametros['strModeloSmartWifi'])?$arrayParametros['strModeloSmartWifi']:"";
        $strMacSmartWifi            = !empty($arrayParametros['strMacSmartWifi'])?$arrayParametros['strMacSmartWifi']:"";
        $strTieneSmartWifiRenta     = !empty($arrayParametros['strTieneSmartWifiRenta'])?$arrayParametros['strTieneSmartWifiRenta']:"";
        $intIdOficina               = !empty($arrayParametros['idOficina'])?$arrayParametros['idOficina']:0;
        $intFlagTipoOrden           = !empty($arrayParametros['flagTipoOrden']) ? $arrayParametros['flagTipoOrden']:0;
        $strTipoOrden               = "";
        $arrayDataConfirmacionTn    = array();

        $respuestaArray             = array();
        
        try
        {
            $reqAprovisionamiento       = $modeloElemento->getReqAprovisionamiento();
            $status                     = "NA";
            $mensaje                    = "NA";
            $tipoArticulo               = "AF";
            $identificacionCliente      = "";
            $flagElemento               = 0;
            $objInterfaceIniSmartWifi   = null;
            $objElemento                = $interfaceElemento->getElementoId();
            $objIp                      = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                               ->findOneBy(array("elementoId" => $objElemento->getId(), "estado" => "Activo"));
            $strMarcaOlt                = $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento();

            $productoInternet = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array("esPreferencia" => "SI",
                                                                                                        "nombreTecnico" => "INTERNET",
                                                                                                        "empresaCod"    => $idEmpresa,
                                                                                                        "estado"        => "Activo"));
            //*----------------------------------------------------------------------*/

            //obtener caracteristica plan nuevo edicion limitada
            $caractEdicionLimitada = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                          ->findOneBy(array("descripcionCaracteristica"=>"EDICION LIMITADA", "estado"=>"Activo"));
            $planCaractEdicionLimitada = $this->emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                          ->findOneBy(array("planId"            =>$servicio->getPlanId()->getId(),
                                                            "caracteristicaId"  =>$caractEdicionLimitada->getId(),
                                                            "estado"            =>$servicio->getPlanId()->getEstado()));

            $strOrigenActivacion    = "WEB";
            if(isset($arrayParametros['strOrigenMovil']) && !empty($arrayParametros['strOrigenMovil']) && $arrayParametros['strOrigenMovil'] === "M")
            {
                $strOrigenActivacion = "MOVIL";
            }

            $strEquipoOntDualBand   = "NO";
            $strServiciosAdicWdb    = "";
            $arrayServiciosAdicWdb  = array();
            $strEdbEnPlan           = "";
            $arrayVerifTecnologiaDualBand           = $this->servicioGeneral
                                                           ->verificaTecnologiaDualBand(array("intIdServicioInternet" => $servicio->getId()));
            $strStatusVerifTecnologiaDualBand       = $arrayVerifTecnologiaDualBand["status"];
            $strMensajeVerifTecnologiaDualBand      = $arrayVerifTecnologiaDualBand["mensaje"];
            $strModelosEquiposWdbTecnologiaDualBand = $arrayVerifTecnologiaDualBand["modelosEquiposWdb"];
            if($strStatusVerifTecnologiaDualBand === "OK" && is_object($servicio->getPlanId()))
            {
                $arrayInfoVerifVerifTecnologiaDualBand  = explode('|', $strMensajeVerifTecnologiaDualBand);
                $strEsPermitidoWYExtenderEnPlanes       = $arrayInfoVerifVerifTecnologiaDualBand[2];
                if(isset($strModelosEquiposWdbTecnologiaDualBand) && !empty($strModelosEquiposWdbTecnologiaDualBand))
                {
                    $arrayVerificaWyApPorPunto   = $this->servicioGeneral
                                                           ->verificaProductoPorPunto(array("intIdServicioInternet"         => $servicio->getId(),
                                                                                            "arrayNombresTecnicoProducto"   => array("WDB_Y_EDB"),
                                                                                            "strCodEmpresa"                 => $idEmpresa,
                                                                                            "strVerificaEquipo"             => "NO",
                                                                                            "strVerificaProdEnPlan"         => 
                                                                                            $strEsPermitidoWYExtenderEnPlanes));
                    $strWyApEncontrado           = $arrayVerificaWyApPorPunto["strProductoEncontrado"];
                    $strServiciosAdicWyAp        = $arrayVerificaWyApPorPunto["strServiciosAdicProducto"];
                    $arrayServiciosAdicWyAp      = $arrayVerificaWyApPorPunto["arrayServiciosAdicProducto"];

                    $arrayVerificaWdbPorPunto   = $this->servicioGeneral
                                                       ->verificaProductoPorPunto(array("intIdServicioInternet"         => $servicio->getId(),
                                                                                        "arrayNombresTecnicoProducto"   => array("WIFI_DUAL_BAND"),
                                                                                        "strCodEmpresa"                 => $idEmpresa,
                                                                                        "strVerificaEquipo"             => "NO",
                                                                                        "strVerificaProdEnPlan"         => 
                                                                                        $strEsPermitidoWYExtenderEnPlanes));
                    $strWdbEncontrado           = $arrayVerificaWdbPorPunto["strProductoEncontrado"];
                    $strServiciosAdicWdb        = $arrayVerificaWdbPorPunto["strServiciosAdicProducto"];
                    $arrayServiciosAdicWdb      = $arrayVerificaWdbPorPunto["arrayServiciosAdicProducto"];

                    if($strWdbEncontrado === "SI" || $strWyApEncontrado === "SI")
                    {
                        $strEquipoOntDualBand = "SI";
                    }
                }
                
                if($strEsPermitidoWYExtenderEnPlanes === "SI")
                {
                    $arrayRespuestaProdEdbEnPlan    = $this->servicioGeneral
                                                           ->obtieneProductoEnPlan(
                                                                                    array(  "intIdPlan"                => 
                                                                                            $servicio->getPlanId()->getId(),
                                                                                            "strNombreTecnicoProducto" => "EXTENDER_DUAL_BAND"));
                    $strEdbEnPlan                   = $arrayRespuestaProdEdbEnPlan["strProductoEnPlan"];
                }
            }

            if($servicio->getTipoOrden()=='T')
            {
                $strTipoOrden = "TRASLADO";
                $servicioTraslado = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "TRASLADO", $producto);
                $servicioTrasladoId = $servicioTraslado->getValor();
                $servicioAnterior = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($servicioTrasladoId);
                $servicioTecnicoAnterior = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array("servicioId"=>$servicioAnterior->getId()));

                //verificar si son de diferentes olt
                if($servicioTecnico->getElementoId() != $servicioTecnicoAnterior->getElementoId())
                {
                    $flagElemento = 1;
                }

                if($serieOnt =="")
                {
                    $objElementoCliente = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                            ->findOneById($servicioTecnicoAnterior->getElementoClienteId());
                    $serieOnt = $objElementoCliente->getSerieFisica();

                }
                if($macOnt=="")
                {
                    //mac ont anterior
                    $servProdCaractMacOnt = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", $producto);
                    if($servProdCaractMacOnt)
                    {
                        $macOnt=$servProdCaractMacOnt->getValor();
                    }

                    //mac wifi anterior
                    $servProdCaractMacWifi = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC WIFI", $producto);
                    if($servProdCaractMacWifi)
                    {
                        $macWifi=$servProdCaractMacWifi->getValor();
                    }
                }

                if(empty($modeloOnt))
                {
                    $objElementoOntCliente  = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                                ->find($servicioTecnicoAnterior->getElementoClienteId());

                    if(is_object($objElementoOntCliente))
                    {
                        $modeloOnt = $objElementoOntCliente->getModeloElementoId()->getNombreModeloElemento();
                    }
                }


                //verificar si son de diferentes tecnologias
                $oltAnterior = $this->emInfraestructura->find('schemaBundle:InfoElemento', $servicioTecnicoAnterior->getElementoId());

                if($oltAnterior->getId() != $interfaceElemento->getElementoId()->getId())
                {
                    if($oltAnterior->getModeloElementoId()->getMarcaElementoId()->getId() !=
                       $interfaceElemento->getElementoId()->getModeloElementoId()->getMarcaElementoId()->getId())
                    {
                        $diferenteTecnologia = "SI";
                    }
                    else
                    {
                        $diferenteTecnologia = "NO";
                    }
                }
                else
                {
                    $diferenteTecnologia = "NO";
                }
            }

            //Se agrega seteo de variable para activaciones nuevas
            if($servicio->getTipoOrden()=='N')
            {
                $strTipoOrden = "NUEVO";
                $flagElemento = 1;
            }


            if($reqAprovisionamiento=="SI")
            {
                $planDet = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')->findBy(array("planId"=>$servicio->getPlanId()->getId()));
                $prodIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                            ->findOneBy(array("nombreTecnico"=>"IP","empresaCod"=>$idEmpresa, "estado"=>"Activo"));
                $prodInternet = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                            ->findBy(array("nombreTecnico"=>"INTERNET","empresaCod"=>$idEmpresa, "estado"=>"Activo"));
                $flagProd=0;
                for($i=0;$i<count($planDet);$i++){
                    if($planDet[$i]->getProductoId() == $prodIp->getId()){
                        $flagProd=1;
                        break;
                    }

                    for($j=0;$j<count($prodInternet);$j++){
                        if($planDet[$i]->getProductoId() == $prodInternet[$j]->getId()){
                            $producto = $prodInternet[$j];
                            break;
                        }
                    }
                }

                //consultar si el olt tiene aprovisionamiento de ips en el CNR
                $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                              ->findOneBy(array('detalleNombre' =>'APROVISIONAMIENTO_IP',
                                                                                'detalleValor' =>'CNR',
                                                                                'elementoId' => $interfaceElemento->getElementoId()->getId()));
                //validar si el plan es edicion limitada
                if($planCaractEdicionLimitada && $objDetalleElemento)
                {
                    if($planCaractEdicionLimitada->getValor() == "SI")
                    {
                        $flagProd = 0;
                    }
                }

                //buscar caracteristicas para olt huawei
                if($strMarcaOlt == "HUAWEI")
                {
                    //validar si el plan es edicion limitada
                    if($planCaractEdicionLimitada)
                    {
                        if($planCaractEdicionLimitada->getValor() == "SI")
                        {
                            $flagProd = 0;
                        }
                    }

                    //obtener line profile
                    $lineProfileProdCaract = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "LINE-PROFILE-NAME", $producto);
                    if($lineProfileProdCaract)
                    {
                        $ontLineProfile = $lineProfileProdCaract->getValor();
                    }
                    else
                    {
                        $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'No existe Caracteristica LINE-PROFILE-NAME, favor revisar!');
                        return $respuestaFinal;
                    }                  

                    //obtener service profile
                    $srvProfileProdCaract = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "SERVICE-PROFILE", $producto);
                    if($srvProfileProdCaract)
                    {
                        $serviceProfile = $srvProfileProdCaract->getValor();
                    }
                    else
                    {
                        //buscar el service profile en el elemento
                        $elemento = $interfaceElemento->getElementoId();
                        $detalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->findOneBy(array(  "detalleNombre" => "SERVICE-PROFILE-NAME",
                                                                    "detalleValor"  => $modeloOnt,
                                                                    "elementoId"    => $elemento->getId()
                                                                 )
                                                           );
                        if($detalleElemento)
                        {
                            $serviceProfile = $detalleElemento->getDetalleValor();

                            //servicio prod caract service-profile
                            $this->servicioGeneral
                                 ->ingresarServicioProductoCaracteristica($servicio, $producto, "SERVICE-PROFILE", $serviceProfile, $usrCreacion);
                        }
                        else
                        {
                            $respuestaFinal[] = array('status' =>'ERROR',
                                                      'mensaje'=>'No existe Caracteristica SERVICE-PROFILE-NAME en el elemento, favor revisar!');
                            return $respuestaFinal;
                        }
                    }

                    //obtener vlan
                    $vlanProdCaract = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "VLAN", $producto);
                    if($vlanProdCaract)
                    {
                        $vlan = $vlanProdCaract->getValor();
                        if($servicio->getTipoOrden()=='T')
                        {
                            $nombreTipoNegocioPlan = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();

                            //Se valida si el tipo de PLAN es PRO con IPS y se realiza la activacion por TRASLADO
                            //la VLAN a nivel de data debe siempre quedar con 302 en el Telcos 
                            if($nombreTipoNegocioPlan == "PRO")
                            {
                                $arrayProdIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                    ->findBy(array("nombreTecnico" => "IP",
                                    "empresaCod" => $idEmpresa,
                                    "estado" => "Activo"));

                                $arrayPlanDet = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                    ->findBy(array("planId" => $servicio->getPlanId()->getId()));

                                $indiceProductoIp = $this->servicioGeneral->obtenerIndiceInternetEnPlanDet($arrayPlanDet, $arrayProdIp);

                                if($indiceProductoIp != -1)
                                {
                                    $vlan = "302"; //vlan 302 para Traslados de planes PRO con IP Fija
                                }

                                //servicios adicionales
                                $arrayServiciosPorPunto = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                    ->findBy(array("puntoId" => $servicioAnterior->getPuntoId()->getId()));

                                //verificar si servicio tiene ip adicional
                                $intProdAdicional = $this->servicioGeneral->verificarIpFijaEnPunto($arrayServiciosPorPunto, $arrayProdIp, 
                                                                                                   $servicioAnterior);
                                if ($intProdAdicional>0 )
                                {
                                    //verificar si son de mismos olt
                                    if($servicioTecnico->getElementoId() == $servicioTecnicoAnterior->getElementoId())
                                    {
                                        $vlan = "302";//vlan 302 para Traslados de planes PRO con IP Adicional
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'No existe Caracteristica VLAN, favor revisar!');
                        return $respuestaFinal;
                    }

                    //obtener gemport
                    $gemPortProdCaract = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "GEM-PORT", $producto);
                    if($gemPortProdCaract)
                    {
                        $gemPort = $gemPortProdCaract->getValor();
                    }
                    else
                    {
                        $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'No existe Caracteristica GEM-PORT, favor revisar!');
                        return $respuestaFinal;
                    }

                    //obtener traffic table
                    $trafficTableProdCaract = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "TRAFFIC-TABLE", $producto);
                    if($trafficTableProdCaract)
                    {
                        $trafficTable = $trafficTableProdCaract->getValor();
                    }
                    else
                    {
                        $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'No existe Caracteristica TRAFFIC-TABLE, favor revisar!');
                        return $respuestaFinal;
                    }
                }
                else if ($strMarcaOlt == "ZTE")
                {
                    //validar si el plan es edicion limitada 
                    if($planCaractEdicionLimitada && $planCaractEdicionLimitada->getValor() == "SI")
                    {
                        $flagProd = 0;
                    }

                    $serviceProfile = $modeloOnt;

                    if (empty($strCapacidad1))
                    {
                        $objCapacidad1 = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "CAPACIDAD1", $producto);
                        if(is_object($objCapacidad1))
                        {
                            $strCapacidad1 = $objCapacidad1->getValor();
                        }
                        else
                        {
                            $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'No existe Caracteristica CAPACIDAD1, favor revisar!');
                            return $respuestaFinal;
                        }
                    }

                    if (empty($strCapacidad2))
                    {
                        $objCapacidad2 = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "CAPACIDAD2", $producto);
                        if(is_object($objCapacidad2))
                        {
                            $strCapacidad2 = $objCapacidad2->getValor();
                        }
                        else
                        {
                            $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'No existe Caracteristica CAPACIDAD2, favor revisar!');
                            return $respuestaFinal;
                        }
                    }
                }
                else
                {
                    $arrayPerfil    = explode("_", $perfil);
                    $ontLineProfile = $arrayPerfil[0]."_".$arrayPerfil[1];
                }

                //$planCabNuevo --> servcio
                $nombreTipoNegocioPlan = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();

                /*
                 * Codigo para diferenciar si se necesita utilizar middleware o si se necesita utilizar
                 * el flujo tradicional
                 */
                if($flagMiddleware)
                {
                    if($servicio->getTipoOrden() == 'N')
                    {
                        //obtener tipo de negocio
                        $strTipoNegocio = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();

                        $arrayVerifOntNaf   = $this->servicioGeneral->buscarEquipoEnNafPorParametros(array( "serieEquipo"           => $serieOnt,
                                                                                                            "estadoEquipo"          => "PI",
                                                                                                            "tipoArticuloEquipo"    => "AF",
                                                                                                            "modeloEquipo"          => $modeloOnt));
                        if($arrayVerifOntNaf["status"] === "ERROR")
                        {
                            $arrayRespuesta[]   = array("status"  => $arrayVerifOntNaf["status"],
                                                        "mensaje" => $arrayVerifOntNaf["mensaje"]);
                            return $arrayRespuesta;
                        }

                        if(isset($serieWifi) && !empty($serieWifi) && isset($modeloWifi) && !empty($modeloWifi))
                        {
                            $arrayVerifWifiNaf  = $this->servicioGeneral->buscarEquipoEnNafPorParametros(array( "serieEquipo"        => $serieWifi,
                                                                                                                "estadoEquipo"       => "PI",
                                                                                                                "tipoArticuloEquipo" => "AF",
                                                                                                                "modeloEquipo"       => $modeloWifi));
                            if($arrayVerifWifiNaf["status"] === "ERROR")
                            {
                                $arrayRespuesta[]   = array("status"  => $arrayVerifWifiNaf["status"],
                                                            "mensaje" => $arrayVerifWifiNaf["mensaje"]);
                                return $arrayRespuesta;
                            }
                        }

                        //servicio tiene ips
                        if($flagProd == 1 && $flagElemento == 1)
                        {
                            //Validacion PRO con IP interna para obtener la vlan
                            if($nombreTipoNegocioPlan == 'PRO')
                            {
                                $arrayProdIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                    ->findBy(array("nombreTecnico" => "IP", "empresaCod" => $idEmpresa, "estado" => "Activo"));

                                $planDetNuevo = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                     ->findBy(array("planId" => $servicio->getPlanId()->getId()));

                                $indiceProductoIp = $this->servicioGeneral->obtenerIndiceInternetEnPlanDet($planDetNuevo, $arrayProdIp);

                                if($indiceProductoIp != -1)
                                {                      
                                    $vlan = "302";
                                }
                            }

                            $strTipoIp = 'FIJA';

                            //Obtiene tipo de ip por el servicio (PRIVADA)
                            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                ->findOneBy(array("servicioId"  =>  $servicioTecnico->getServicioId()->getId(),
                                                                                  "tipoIp"      =>  "PRIVADA",
                                                                                  "estado"      =>  "Reservada"));
                            if (is_object($objTipoIp))
                            {
                                $strTipoIp = $objTipoIp->getTipoIp();
                            }
                            //obtener las ips 
                            $objIpFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                              ->findOneBy(array("servicioId" => $servicioTecnico->getServicioId()->getId(),
                                                                "tipoIp"     => $strTipoIp,
                                                                "estado"     => "Reservada"));

                            //obtener scope
                            $objCaractScope = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "SCOPE", $prodIp);

                            $arrayDatos = array(
                                                    'serial_ont'            => $serieOnt,
                                                    'mac_ont'               => $macOnt,
                                                    'nombre_olt'            => $objElemento->getNombreElemento(),
                                                    'ip_olt'                => $objIp->getIp(),
                                                    'puerto_olt'            => $interfaceElemento->getNombreInterfaceElemento(),
                                                    'modelo_olt'            => $modeloElemento->getNombreModeloElemento(),
                                                    'gemport'               => $gemPort,
                                                    'service_profile'       => $serviceProfile,
                                                    'line_profile'          => $ontLineProfile,
                                                    'traffic_table'         => $trafficTable,
                                                    'vlan'                  => $vlan,
                                                    'estado_servicio'       => $servicioTecnico->getServicioId()->getEstado(),
                                                    'ip'                    => $objIpFija->getIp(),
                                                    'ip_fijas_activas'      => 0, //cantidad de ips fijas que tiene el cliente
                                                    'tipo_negocio_actual'   => $strTipoNegocio,
                                                    'mac_wifi'              => $macWifi,
                                                    'scope'                 => $objCaractScope->getValor(),
                                                    'capacidad_up'          => $strCapacidad1,
                                                    'capacidad_down'        => $strCapacidad2,
                                                    'equipoOntDualBand'     => $strEquipoOntDualBand,
                                                    'tipoOrden'             => $strTipoOrden
                                                );
                            if ($prefijoEmpresa === 'MD'|| $prefijoEmpresa === "EN")
                            {
                                $arrayRespuestaSeteaInfo = $this->servicioGeneral
                                                                ->seteaInformacionPlanesPyme(array("intIdPlan"       => 
                                                                                                   $servicio->getPlanId()->getId(),
                                                                                                   "intIdPunto"      => 
                                                                                                   $servicio->getPuntoId()->getId(),
                                                                                                   "strConservarIp"  => "",
                                                                                                   "strTipoNegocio"  => $strTipoNegocio,
                                                                                                   "strPrefijoEmpresa" => $prefijoEmpresa,
                                                                                                   "strUsrCreacion"    => $usrCreacion,
                                                                                                   "strIpCreacion"     => $ipCreacion,
                                                                                                   "strTipoProceso"    => "ACTIVAR_PLAN",
                                                                                                   "arrayInformacion"  => $arrayDatos));
                                if($arrayRespuestaSeteaInfo["strStatus"]  === "OK")
                                {
                                    $arrayDatos = $arrayRespuestaSeteaInfo["arrayInformacion"];
                                }
                                else
                                {
                                    $arrayFinal[] = array('status'  => $arrayRespuestaSeteaInfo["strStatus"],
                                                          'mensaje' => "Existieron problemas al recuperar información necesaria ".
                                                                       "para ejecutar proceso, favor notifique a Sistemas.");
                                    return $arrayFinal;
                                }
                            }

                            $arrayDatosMiddleware = array(
                                                            'nombre_cliente'        => $strNombreCliente,
                                                            'login'                 => $login,
                                                            'identificacion'        => $strIdentificacion,
                                                            'datos'                 => $arrayDatos,
                                                            'opcion'                => $this->opcion,
                                                            'ejecutaComando'        => $this->ejecutaComando,
                                                            'usrCreacion'           => $usrCreacion,
                                                            'ipCreacion'            => $ipCreacion,
                                                            'empresa'               => $prefijoEmpresa
                                                        );

                            $arrayRespuesta = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                        }
                        else
                        {
                            $arrayDatos = array(
                                                    'serial_ont'            => $serieOnt,
                                                    'mac_ont'               => $macOnt,
                                                    'nombre_olt'            => $objElemento->getNombreElemento(),
                                                    'ip_olt'                => $objIp->getIp(),
                                                    'puerto_olt'            => $interfaceElemento->getNombreInterfaceElemento(),
                                                    'modelo_olt'            => $modeloElemento->getNombreModeloElemento(),
                                                    'gemport'               => $gemPort,
                                                    'service_profile'       => $serviceProfile,
                                                    'line_profile'          => $ontLineProfile,
                                                    'traffic_table'         => $trafficTable,
                                                    'vlan'                  => $vlan,
                                                    'estado_servicio'       => $servicioTecnico->getServicioId()->getEstado(),
                                                    'ip'                    => '',
                                                    'ip_fijas_activas'      => 0,
                                                    'tipo_negocio_actual'   => $strTipoNegocio,
                                                    'mac_wifi'              => $macWifi,
                                                    'scope'                 => '',
                                                    'capacidad_up'          => $strCapacidad1,
                                                    'capacidad_down'        => $strCapacidad2,
                                                    'equipoOntDualBand'     => $strEquipoOntDualBand,
                                                    'tipoOrden'             => $strTipoOrden
                                                );
                            if ($prefijoEmpresa === 'MD')
                            {
                                $arrayRespuestaSeteaInfo = $this->servicioGeneral
                                                                ->seteaInformacionPlanesPyme(array("intIdPlan"       => 
                                                                                                   $servicio->getPlanId()->getId(),
                                                                                                   "intIdPunto"      => 
                                                                                                   $servicio->getPuntoId()->getId(),
                                                                                                   "strConservarIp"  => "",
                                                                                                   "strTipoNegocio"  => $strTipoNegocio,
                                                                                                   "strPrefijoEmpresa" => $prefijoEmpresa,
                                                                                                   "strUsrCreacion"    => $usrCreacion,
                                                                                                   "strIpCreacion"     => $ipCreacion,
                                                                                                   "strTipoProceso"    => "ACTIVAR_PLAN",
                                                                                                   "arrayInformacion"  => $arrayDatos));
                                if($arrayRespuestaSeteaInfo["strStatus"]  === "OK")
                                {
                                    $arrayDatos = $arrayRespuestaSeteaInfo["arrayInformacion"];
                                }
                                else
                                {
                                    $arrayFinal[] = array('status'  => $arrayRespuestaSeteaInfo["strStatus"],
                                                          'mensaje' => "Existieron problemas al recuperar información necesaria ".
                                                                       "para ejecutar proceso, favor notifique a Sistemas.");
                                    return $arrayFinal;
                                }
                            }

                            $arrayDatosMiddleware = array(
                                                            'nombre_cliente'        => $strNombreCliente,
                                                            'login'                 => $login,
                                                            'identificacion'        => $strIdentificacion,
                                                            'datos'                 => $arrayDatos,
                                                            'opcion'                => $this->opcion,
                                                            'ejecutaComando'        => $this->ejecutaComando,
                                                            'usrCreacion'           => $usrCreacion,
                                                            'ipCreacion'            => $ipCreacion,
                                                            'empresa'               => $prefijoEmpresa
                                                        );

                            $arrayRespuesta = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                        }
                        $status     = $arrayRespuesta['status'];
                        $mensaje    = $arrayRespuesta['mensaje'];

                        $arrayDataConfirmacionTn    = array('nombre_cliente'    => $strNombreCliente,
                                                            'login'             => $login,
                                                            'identificacion'    => $strIdentificacion,
                                                            'datos'             => array(   
                                                                                        'serial_ont'                => $arrayDatos['serial_ont'],
                                                                                        'nombre_olt'                => $arrayDatos['nombre_olt'],
                                                                                        'ip_olt'                    => $arrayDatos['ip_olt'],
                                                                                        'puerto_olt'                => $arrayDatos['puerto_olt'],
                                                                                        'modelo_olt'                => $arrayDatos['modelo_olt'],
                                                                                        'service_profile'           => $arrayDatos['service_profile'],
                                                                                        'vlan'                      => $arrayDatos['vlan'],
                                                                                        'service_port'              => $arrayDatos['service_port'],
                                                                                        'estado_servicio'           => "Activo",
                                                                                        'tipo_negocio_actual'       => 
                                                                                        $arrayDatos['tipo_negocio_actual'],
                                                                                        'opcion_confirmacion'       => $this->opcion,
                                                                                        'respuesta_confirmacion'    => 'ERROR',
                                                                                        'scope'                     => $arrayDatos['scope'],
                                                                                        'ip'                        => $arrayDatos['ip']
                                                                                        ),
                                                            'opcion'            => $this->strConfirmacionTNMiddleware,
                                                            'ejecutaComando'    => $this->ejecutaComando,
                                                            'usrCreacion'       => $usrCreacion,
                                                            'ipCreacion'        => $ipCreacion,
                                                            'empresa'           => $prefijoEmpresa,
                                                            'statusMiddleware'  => $status);
                    }
                    else
                    {
                        //PARA LOS DEMAS TIPOS DE ORDEN (T, R)
                        $status     = "OK";
                    }

                    if($status == 'OK')
                    {
                        if($servicio->getTipoOrden()=='N')
                        {
                            //GRABAMOS INDICE_CLIENTE
                            $this->servicioGeneral
                                ->ingresarServicioProductoCaracteristica($servicio, $producto, "INDICE CLIENTE", $arrayRespuesta['ont_id'], 
                                                                         $usrCreacion);

                            if ($strMarcaOlt != "TELLION")
                            {
                                //GRABAMOS SPID
                                $this->servicioGeneral
                                     ->ingresarServicioProductoCaracteristica( $servicio, 
                                                                               $producto, 
                                                                               "SPID", 
                                                                               $arrayRespuesta['spid'], 
                                                                               $usrCreacion );

                                if ($strMarcaOlt == "ZTE")
                                {
                                    //GRABAMOS VLAN
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                   $producto, 
                                                                                   "VLAN", 
                                                                                   $arrayRespuesta['vlan'], 
                                                                                   $usrCreacion );

                                    //GRABAMOS CLIENT CLASS
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                   $producto, 
                                                                                   "CLIENT CLASS", 
                                                                                   $arrayRespuesta['client_class'], 
                                                                                   $usrCreacion );

                                    //GRABAMOS PCKID
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                   $producto, 
                                                                                   "PACKAGE ID", 
                                                                                   $arrayRespuesta['pckid'], 
                                                                                   $usrCreacion );

                                    //GRABAMOS LINE PROFILE NAME
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                   $producto, 
                                                                                   "LINE-PROFILE-NAME", 
                                                                                   $arrayRespuesta['line_profile'], 
                                                                                   $usrCreacion );

                                    //GRABAMOS SERVICE-PROFILE
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                   $producto, 
                                                                                   "SERVICE-PROFILE", 
                                                                                   $serviceProfile, 
                                                                                   $usrCreacion );
                                }
                            }


                            if($prefijoEmpresa=="MD" || $prefijoEmpresa == 'EN')
                            {
                                $empresaCod= "10";
                            }
                            else
                            {
                                $empresaCod= $idEmpresa;
                            }

                            //ingresar elemento ont
                            $ontNafArray        = $this->servicioGeneral->buscarElementoEnNaf($serieOnt, $modeloOnt, "PI", "ActivarServicio");
                            $ontNaf             = $ontNafArray[0]['status'];
                            $codigoArticuloOnt  = "";

                            if($ontNaf=="OK")
                            {

                                
                                $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                            ->find($arrayParametros['intIdPersonaEmpresaRol']);


                                // verificamos si serie existe en la control custodio
                                $objNaf = $this->emNaf->getRepository('schemaBundle:InfoElemento');
                                $objNafExiste = $objNaf->getElementoSerieNaf($serieOnt);

                                // si no existe en naf
                                if($objNafExiste == null)
                                {

                                    // lleno datos para llamado a procedimiento
                                    $arrayParametrosNaf['numeroSerie']         = $serieOnt;
                                    $arrayParametrosNaf['caracteristicaId']    = null;
                                    $arrayParametrosNaf['empresaId']           = $idEmpresa;
                                    $arrayParametrosNaf['intidPersonaEntrega'] = null;
                                    $arrayParametrosNaf['cantidadEnt']         = null;
                                    $arrayParametrosNaf['intidPersonaRecibe']  = $objInfoPersonaEmpresaRol->getPersonaIdValor();
                                    $arrayParametrosNaf['cantidadRec']         = 1;
                                    $arrayParametrosNaf['tipoTransaccion']     = 'Tarea';
                                    $arrayParametrosNaf['transaccionId']       = 0;
                                    $arrayParametrosNaf['tipoActividad']       = 'Instalacion';
                                    $arrayParametrosNaf['tareaId']             = null;
                                    $arrayParametrosNaf['login']               = $login;
                                    $arrayParametrosNaf['loginEmpleado']       = $usrCreacion;
                                    $arrayParametrosNaf['idControl']           = 0;
                                    $arrayParametrosNaf['observacion']         = 'Regularización proceso automático de '.
                                    'instalaciones equipos a clientes';
                                    $arrayParametrosNaf['tipoArticulo']        = 'Equipos';

                                    $arrayParametrosNaf['strUser']             = $this->user_naf;
                                    $arrayParametrosNaf['strPass']             = $this->passwd_naf;
                                    $arrayParametrosNaf['objDb']               = $this->database_dsn_naf;

                                    $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoDetalleMaterial')
                                    ->putguardarRegistroNaf2($arrayParametrosNaf);

                                    if(is_array($arrayRespuesta))
                                    {
                                    throw new \Exception($arrayRespuesta['message']);
                                    }

                                }

                                //Almacenamos la serie de los dispositivo y el id de control para realizar la carga y descarga.
                                $strMacDispositivo = 'NA';
                                $arrayInfoActivos  = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                        ->obtenerEquiposAsignados(array('strIdEmpresa'   => $idEmpresa,
                                                                        'intIdPersona'   => $objInfoPersonaEmpresaRol->getPersonaIdValor(),
                                                                        'strNumeroSerie' => $serieOnt));

                                if ($arrayInfoActivos['status'])
                                {
                                    $arrayInfoActivo   = $arrayInfoActivos['result'][0];
                                    $strMacDispositivo = $arrayInfoActivo['macElemento'];
                                    $intIdControl      = $arrayInfoActivo['idControl'];
                                    $arrayEquipos[]    = array('strNumeroSerie'  => $serieOnt,
                                                            'intIdControl'    => $intIdControl,
                                                            'intCantidadEnt'  => 1,
                                                            'intCantidadRec'  => 1,
                                                            'strTipoArticulo' => 'Equipos');
                                }

                                $interfaceOnt = $this->servicioGeneral
                                                     ->ingresarElementoCliente($login, $serieOnt, $modeloOnt, "-ont",
                                                                               $interfaceElementoSplitter, $ultimaMilla, $servicio, $usrCreacion,
                                                                               $ipCreacion, $idEmpresa);

                                //actualizamos registro en el naf ont
                                $strMensajeError = str_repeat(' ', 1000);                                                                  
                                $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                . ":cantidad, :pv_mensajeerror); END;";
                                $stmt = $this->emNaf->getConnection()->prepare($sql);
                                $stmt->bindParam('codigoEmpresaNaf', $empresaCod);
                                $stmt->bindParam('codigoArticulo', $codigoArticuloOnt);
                                $stmt->bindParam('tipoArticulo',$tipoArticulo);
                                $stmt->bindParam('identificacionCliente', $identificacionCliente);
                                $stmt->bindParam('serieCpe', $serieOnt);
                                $stmt->bindParam('cantidad', intval(1));
                                $stmt->bindParam('pv_mensajeerror', $strMensajeError);
                                $stmt->execute();

                                if(strlen(trim($strMensajeError))>0)
                                {
                                    $respuestaFinal[] = array(  "status"=>"NAF", "mensaje"=>"ERROR ONT NAF: ".$strMensajeError,
                                                                "arrayDataConfirmacionTn" => $arrayDataConfirmacionTn);
                                    return $respuestaFinal;
                                }
                                $objInterfaceIniSmartWifi = $interfaceOnt;


                                //LLAMADA AL SERVICE PARA REALIZAR LA CARGA Y DESCARGA DEL ACTIVO.
                                if (!empty($arrayEquipos) && count($arrayEquipos) > 0)
                                {
                                    $arrayCargaDescarga['strUsuario']              =  $usrCreacion;
                                    $arrayCargaDescarga['strIpUsuario']            =  $ipCreacion;
                                    $arrayCargaDescarga['strTipoRecibe']           = 'Cliente';
                                    $arrayCargaDescarga['intIdServicio']           =  $servicio->getId();
                                    $arrayCargaDescarga['intIdEmpleado']           =  $objInfoPersonaEmpresaRol->getPersonaIdValor();
                                    $arrayCargaDescarga['intIdEmpresa']            =  $idEmpresa;
                                    $arrayCargaDescarga['strTipoActividad']        = 'Instalacion';
                                    $arrayCargaDescarga['strTipoTransaccion']      = 'Nuevo';
                                    $arrayCargaDescarga['strObservacion']          = 'Instalacion del servicio';
                                    $arrayCargaDescarga['arrayEquipos']            =  $arrayEquipos;
                                    $arrayCargaDescarga['strEstadoSolicitud']      = 'Asignada';
                                    $arrayCargaDescarga['strDescripcionSolicitud'] = 'SOLICITUD PLANIFICACION';
                                    $arrayResCarDes = $this->serviceInfoElemento->cargaDescargaActivos($arrayCargaDescarga);

                                    if (!$arrayResCarDes['status'])
                                    {
                                        throw new \Exception("DISPOSITIVOS CLIENTE: ".$arrayResCarDes['message']);
                                    }
                                }

                            }
                            else
                            {
                                $codigoArticuloOnt  = $ontNafArray[0]['mensaje'];
                                $respuestaFinal[]   = array('status'=>'NAF', 'mensaje'=>$codigoArticuloOnt, 
                                                            "arrayDataConfirmacionTn" => $arrayDataConfirmacionTn);
                                return $respuestaFinal;
                            }

                            if($serieWifi!="" && $modeloWifi!="")
                            {
                                //ingresar elemento wifi
                                $wifiNafArray = $this->servicioGeneral->buscarElementoEnNaf($serieWifi, $modeloWifi, "PI", "ActivarServicio");
                                $wifiNaf = $wifiNafArray[0]['status'];
                                $codigoArticuloWifi = "";
                                if($wifiNaf=="OK"){
                                    $objInterfaceWifi = $this->servicioGeneral
                                                             ->ingresarElementoCliente( $login, 
                                                                                        $serieWifi, 
                                                                                        $modeloWifi,
                                                                                        "-wifi", 
                                                                                        $interfaceOnt, 
                                                                                        $ultimaMilla,
                                                                                        $servicio, 
                                                                                        $usrCreacion, 
                                                                                        $ipCreacion, 
                                                                                        $idEmpresa);

                                    //actualizamos registro en el naf wifi
                                    $pv_mensajeerror = str_repeat(' ', 1000);                                                                  
                                    $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                    . ":cantidad, :pv_mensajeerror); END;";
                                    $stmt = $this->emNaf->getConnection()->prepare($sql);
                                    $stmt->bindParam('codigoEmpresaNaf', $empresaCod);
                                    $stmt->bindParam('codigoArticulo', $codigoArticuloWifi);
                                    $stmt->bindParam('tipoArticulo',$tipoArticulo);
                                    $stmt->bindParam('identificacionCliente', $identificacionCliente);
                                    $stmt->bindParam('serieCpe', $serieWifi);
                                    $stmt->bindParam('cantidad', intval(1));
                                    $stmt->bindParam('pv_mensajeerror', $pv_mensajeerror);
                                    $stmt->execute();

                                    if(strlen(trim($pv_mensajeerror))>0)
                                    {
                                        $respuestaFinal[] = array("status"=>"NAF", "mensaje"=>"ERROR WIFI NAF: ".$pv_mensajeerror,
                                                                  "arrayDataConfirmacionTn" => $arrayDataConfirmacionTn);
                                        return $respuestaFinal;
                                    }
                                    $objInterfaceIniSmartWifi = $objInterfaceWifi;
                                }
                                else{
                                    $codigoArticuloWifi = $wifiNafArray[0]['mensaje'];
                                    $respuestaFinal[] = array('status'=>'NAF', 'mensaje'=>$codigoArticuloWifi,
                                                              "arrayDataConfirmacionTn" => $arrayDataConfirmacionTn);
                                    return $respuestaFinal;  
                                }
                            }
                            //Wifi Dual Band o W + AP como producto adicional debe activarse inmediatamente al activar el servicio de Internet
                            $objServicioAdicOntDb               = null;
                            $strEstadoServicioAdicOntDb         = "";
                            $strObservHistoServicioAdicOntDb    = "";
                            $strAccionHistoServicioAdicOntDb    = "";
                            if($strServiciosAdicWyAp === "SI")
                            {
                                foreach($arrayServiciosAdicWyAp as $objServicioAdicWyAp)
                                {
                                    if($objServicioAdicWyAp->getEstado() === "Pendiente")
                                    {
                                        $objServicioAdicOntDb               = $objServicioAdicWyAp;
                                        $strEstadoServicioAdicOntDb         = "PendienteAp";
                                        $strObservHistoServicioAdicOntDb    = $observacion;
                                        break;
                                    }
                                }
                            }

                            if(!is_object($objServicioAdicOntDb) && $strServiciosAdicWdb === "SI")
                            {
                                foreach($arrayServiciosAdicWdb as $objServicioAdicWdb)
                                {
                                    if($objServicioAdicWdb->getEstado() === "Pendiente")
                                    {
                                        $objServicioAdicOntDb               = $objServicioAdicWdb;
                                        $strEstadoServicioAdicOntDb         = "Activo";
                                        $strObservHistoServicioAdicOntDb    = "Se confirmo el servicio";
                                        $strAccionHistoServicioAdicOntDb    = "confirmarServicio";
                                        break;
                                    }
                                }
                            }

                            if(is_object($objServicioAdicOntDb))
                            {
                                $objServicioAdicOntDb->setEstado($strEstadoServicioAdicOntDb);
                                $this->emComercial->persist($objServicioAdicOntDb);
                                $this->emComercial->flush();
                                $objServicioHistorialOntDb = new InfoServicioHistorial();
                                $objServicioHistorialOntDb->setServicioId($objServicioAdicOntDb);
                                $objServicioHistorialOntDb->setObservacion($strObservHistoServicioAdicOntDb);
                                $objServicioHistorialOntDb->setEstado($strEstadoServicioAdicOntDb);
                                $objServicioHistorialOntDb->setAccion($strAccionHistoServicioAdicOntDb);
                                $objServicioHistorialOntDb->setUsrCreacion($usrCreacion);
                                $objServicioHistorialOntDb->setFeCreacion(new \DateTime('now'));
                                $objServicioHistorialOntDb->setIpCreacion($ipCreacion);
                                $this->emComercial->persist($objServicioHistorialOntDb);
                                $this->emComercial->flush();

                                //Se agrega la información técnica del nuevo equipo Wifi Dual Band
                                $objServTecnicoOntDb    = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                            ->findOneBy(array("servicioId" => $objServicioAdicOntDb->getId()));
                                if(is_object($objServTecnicoOntDb) && is_object($objInterfaceIniSmartWifi) 
                                    && is_object($objServicioAdicOntDb->getProductoId()) 
                                    && $objServicioAdicOntDb->getProductoId()->getNombreTecnico() != "WDB_Y_EDB")
                                {
                                    //guardar wifi dual band en servicio técnico
                                    $objServTecnicoOntDb->setElementoClienteId($objInterfaceIniSmartWifi->getElementoId()->getId());
                                    $objServTecnicoOntDb->setInterfaceElementoClienteId($objInterfaceIniSmartWifi->getId());
                                    $this->emComercial->persist($objServTecnicoOntDb);
                                    $this->emComercial->flush();
                                }

                                $this->servicioGeneral->cancelaOEliminaServiciosDualBand(
                                                                            array(  "intIdPunto"                    => 
                                                                                    $objServicioAdicOntDb->getPuntoId()->getId(),
                                                                                    "strNombreTecnicoProducto"      => "WIFI_DUAL_BAND",
                                                                                    "intIdServicioUnicoACancelar"   => null,
                                                                                    "intIdServicioANoCancelar"      => $objServicioAdicOntDb->getId(),
                                                                                    "strEliminaDataTecnica"         => "NO",
                                                                                    "strObsProcesoEjecutante"       => " por activación de servicio "
                                                                                    .$objServicioAdicOntDb->getProductoId()->getDescripcionProducto(),
                                                                                    "strUsrCreacion"                => $usrCreacion,
                                                                                    "strIpCreacion"                 => $ipCreacion));
                                $this->servicioGeneral->cancelaOEliminaServiciosDualBand(
                                                                            array(  "intIdPunto"                    => 
                                                                                    $objServicioAdicOntDb->getPuntoId()->getId(),
                                                                                    "strNombreTecnicoProducto"      => "WDB_Y_EDB",
                                                                                    "intIdServicioUnicoACancelar"   => null,
                                                                                    "intIdServicioANoCancelar"      => $objServicioAdicOntDb->getId(),
                                                                                    "strEliminaDataTecnica"         => "NO",
                                                                                    "strObsProcesoEjecutante"       => " por activación de servicio "
                                                                                    .$objServicioAdicOntDb->getProductoId()->getDescripcionProducto(),
                                                                                    "strUsrCreacion"                => $usrCreacion,
                                                                                    "strIpCreacion"                 => $ipCreacion));
                            }

                            //se agrega equipo SmartWifi y se crean los enlaces respectivos
                            if($servicio->getTipoOrden()=='N' && $strTieneSmartWifiRenta == "SI")
                            {
                                if(!empty($strSerieSmartWifi) && !empty($strModeloSmartWifi))
                                {
                                    //ingresar elemento wifi
                                    $arraySmartWifiNaf  = $this->servicioGeneral->buscarElementoEnNaf($strSerieSmartWifi, 
                                                                                                      $strModeloSmartWifi, 
                                                                                                      "PI", 
                                                                                                      "ActivarServicio");
                                    $strSmartWifiNaf       = $arraySmartWifiNaf[0]['status'];
                                    $strCodigoArticuloWifi = "";
                                    if($strSmartWifiNaf == "OK")
                                    {
                                        $objInterfaceElementoSmartWifi = $this->servicioGeneral
                                                                              ->ingresarElementoCliente($login, 
                                                                                                        $strSerieSmartWifi, 
                                                                                                        $strModeloSmartWifi,
                                                                                                        "-".$servicio->getId()."-RentaSmartWifi", 
                                                                                                        $objInterfaceIniSmartWifi, 
                                                                                                        $ultimaMilla,
                                                                                                        $servicio, 
                                                                                                        $usrCreacion, 
                                                                                                        $ipCreacion, 
                                                                                                        $idEmpresa);
                                        if (!is_object($objInterfaceElementoSmartWifi))
                                        {
                                            throw new \Exception("No se logro crear el elemento SmartWifi correctamente");
                                        }
                                        $objInterfaceIniSmartWifi = $objInterfaceElementoSmartWifi;

                                        //actualizamos registro en el naf wifi
                                        $pv_mensajeerror = str_repeat(' ', 1000);                                                                  
                                        $sql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, ".
                                                           ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, ".
                                                           ":cantidad, :pv_mensajeerror); END;";
                                        $stmt = $this->emNaf->getConnection()->prepare($sql);
                                        $stmt->bindParam('codigoEmpresaNaf'     , $empresaCod);
                                        $stmt->bindParam('codigoArticulo'       , $strCodigoArticuloWifi);
                                        $stmt->bindParam('tipoArticulo'         , $tipoArticulo);
                                        $stmt->bindParam('identificacionCliente', $identificacionCliente);
                                        $stmt->bindParam('serieCpe'             , $strSerieSmartWifi);
                                        $stmt->bindParam('cantidad'             , intval(1));
                                        $stmt->bindParam('pv_mensajeerror'      , $pv_mensajeerror);
                                        $stmt->execute();

                                        if(strlen(trim($pv_mensajeerror))>0)
                                        {
                                            $respuestaFinal[] = array("status"=>"NAF", "mensaje"=>"ERROR SMARTWIFI NAF: ".$pv_mensajeerror,
                                                                      "arrayDataConfirmacionTn" => $arrayDataConfirmacionTn);
                                            return $respuestaFinal;
                                        }
                                        $objElementoSmartWifi = $objInterfaceElementoSmartWifi->getElementoId();

                                        if (!is_object($objElementoSmartWifi))
                                        {
                                            throw new \Exception("No se logro recuperar el elemento SmartWifi correctamente");
                                        }

                                        $this->servicioGeneral->ingresarDetalleElemento($objElementoSmartWifi,
                                                                                        "MAC WIFI",
                                                                                        "MAC WIFI",
                                                                                        $strMacSmartWifi,
                                                                                        $usrCreacion,
                                                                                        $ipCreacion);
                                    }
                                    else{
                                        $strCodigoArticuloWifi = $arraySmartWifiNaf[0]['mensaje'];
                                        $respuestaFinal[]      = array('status'=>'NAF', 'mensaje'=>$strCodigoArticuloWifi,
                                                                       "arrayDataConfirmacionTn" => $arrayDataConfirmacionTn);
                                        return $respuestaFinal;  
                                    }

                                }
                                else
                                {
                                    //generar solicitud con caracteristica que indique si el servicio que asigna responsable es un smartwifi
                                    $objTipoSolicitudAgregarEquipo = $this->emComercial
                                                                          ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                          ->findOneByDescripcionSolicitud('SOLICITUD AGREGAR EQUIPO');

                                    if (!is_object($objTipoSolicitudAgregarEquipo))
                                    {
                                        throw new \Exception("No se encontro información acerca del tipo de solicitud de planificacion");
                                    }

                                    $objAdmiCaracteristicaSmartWifi = $this->emComercial
                                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                           ->findOneBy(array('descripcionCaracteristica' => 'SMART WIFI',
                                                                                             'estado'                    => 'Activo'));
                                    if (!is_object($objAdmiCaracteristicaSmartWifi))
                                    {
                                        throw new \Exception("No se encontro información acerca de caracteristica SMART WIFI");
                                    }

                                    $objPunto = $servicio->getPuntoId();
                                    if (!is_object($objPunto))
                                    {
                                        throw new \Exception("No se encontro información acerca del punto del servicio");
                                    }

                                    $objDatosNumeracion    = $this->emComercial
                                                                  ->getRepository('schemaBundle:AdmiNumeracion')
                                                                  ->findByEmpresaYOficina($idEmpresa,$intIdOficina,'ORD');
                                    if (!is_object($objDatosNumeracion))
                                    {
                                        throw new \Exception("No se generó la numeración correctamente");
                                    }

                                    $strSecuenciaAsignada  = str_pad($objDatosNumeracion->getSecuencia(),7, '0', STR_PAD_LEFT);
                                    $strNumeroDeContrato   = $objDatosNumeracion->getNumeracionUno().'-'.
                                                             $objDatosNumeracion->getNumeracionDos().'-'.
                                                             $strSecuenciaAsignada;

                                    $objOrdenTrabajo  = new InfoOrdenTrabajo();
                                    $objOrdenTrabajo->setPuntoId($objPunto);
                                    $objOrdenTrabajo->setTipoOrden('N');
                                    $objOrdenTrabajo->setNumeroOrdenTrabajo($strNumeroDeContrato);
                                    $objOrdenTrabajo->setFeCreacion(new \DateTime('now'));
                                    $objOrdenTrabajo->setUsrCreacion($usrCreacion);
                                    $objOrdenTrabajo->setIpCreacion($ipCreacion);
                                    $objOrdenTrabajo->setOficinaId($intIdOficina);
                                    $objOrdenTrabajo->setEstado('Pendiente');
                                    $this->emComercial->persist($objOrdenTrabajo);
                                    $this->emComercial->flush();

                                    $intNumeroAct = ($objDatosNumeracion->getSecuencia()+1);
                                    $objDatosNumeracion->setSecuencia($intNumeroAct);
                                    $this->emComercial->persist($objDatosNumeracion);
                                    $this->emComercial->flush();

                                    $objDetalleSolicitud  = new InfoDetalleSolicitud();
                                    $objDetalleSolicitud->setServicioId($servicio);
                                    $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
                                    $objDetalleSolicitud->setEstado('Asignada');
                                    $objDetalleSolicitud->setUsrCreacion($usrCreacion);
                                    $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                                    $this->emComercial->persist($objDetalleSolicitud);
                                    $this->emComercial->flush();

                                    $objDetalleSolHist = new InfoDetalleSolHist();
                                    $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                                    $objDetalleSolHist->setIpCreacion($ipCreacion);
                                    $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                    $objDetalleSolHist->setUsrCreacion($usrCreacion);
                                    $objDetalleSolHist->setEstado('Asignada');
                                    $this->emComercial->persist($objDetalleSolHist);
                                    $this->emComercial->flush();

                                    $objDetalleSolCaract= new InfoDetalleSolCaract();
                                    $objDetalleSolCaract->setCaracteristicaId($objAdmiCaracteristicaSmartWifi);
                                    $objDetalleSolCaract->setDetalleSolicitudId($objDetalleSolicitud);
                                    $objDetalleSolCaract->setValor("SI");
                                    $objDetalleSolCaract->setEstado("Asignada");
                                    $objDetalleSolCaract->setUsrCreacion($usrCreacion);
                                    $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                                    $this->emComercial->persist($objDetalleSolCaract);
                                    $this->emComercial->flush();
                                }
                            }

                            //Se verifica si se debe crear una solicitud de agregar equipo para el producto adicional W + AP
                            // o si el plan tiene incluido el Extender Dual Band en el plan
                            $objServicioCreaSolDb = null;
                            if($servicio->getTipoOrden() === 'N')
                            {
                                if(is_object($objServicioAdicOntDb) && is_object($objServicioAdicOntDb->getProductoId())
                                    && $objServicioAdicOntDb->getProductoId()->getNombreTecnico() === "WDB_Y_EDB")
                                {
                                    $objServicioCreaSolDb = $objServicioAdicOntDb;
                                }
                                else if($strEdbEnPlan === "SI")
                                {
                                    $objServicioCreaSolDb = $servicio;
                                }

                                if(is_object($objServicioCreaSolDb))
                                {
                                    $arrayRespuestaAgregarEquipo    = $this->servicioGeneral->crearSolAutomaticaAgregarEquipoDualBand(
                                                                                            array(  "objServicio"               => 
                                                                                                    $objServicioCreaSolDb,
                                                                                                    "strAgregarExtenderDualBand"=> "SI",
                                                                                                    "strEstadoSolicitud"        => "Asignada",
                                                                                                    "strUsrCreacion"            => $usrCreacion,
                                                                                                    "strIpCreacion"             => $ipCreacion));

                                    if($arrayRespuestaAgregarEquipo['status'] !== "OK")
                                    {
                                        throw new \Exception($arrayRespuestaAgregarEquipo["mensaje"]);
                                    }
                                    /**
                                     * Se agrega característica asociada al servicio para conocer desde donde se está realizando 
                                     * la activación del servicio
                                     */
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $servicio, $producto, "ORIGEN_ACTIVACION", 
                                                                                                    $strOrigenActivacion, $usrCreacion);
                                }
                            }

                            if($ssid!="")
                            {
                                //servicio prod caract ssid
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SSID", $ssid, $usrCreacion);
                            }                  

                            if($password!="")
                            {
                                //servicio prod caract password
                                $this->servicioGeneral
                                    ->ingresarServicioProductoCaracteristica($servicio, $producto, "PASSWORD SSID", $password, $usrCreacion);
                            }                  

                            if($numeroPc!="")
                            {
                                //servicio prod caract numPc
                                $this->servicioGeneral
                                    ->ingresarServicioProductoCaracteristica($servicio, $producto, "NUMERO PC", $numeroPc, $usrCreacion);
                            }

                            if($modoOperacion!="")
                            {
                                //servicio prod caract modo operacion
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MODO OPERACION",
                                                                                               $modoOperacion, $usrCreacion);
                            }

                            //servicio prod caract mac ont
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC ONT", $macOnt, $usrCreacion);

                            if($macWifi!="")
                            {
                                //servicio prod caract mac wifi
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC WIFI", $macWifi, 
                                                                                               $usrCreacion);
                            }

                            //guardar ont en servicio tecnico
                            $servicioTecnico->setElementoClienteId($interfaceOnt->getElementoId()->getId());
                            $servicioTecnico->setInterfaceElementoClienteId($interfaceOnt->getId());
                            $this->emComercial->persist($servicioTecnico);
                            $this->emComercial->flush();
                        }//if($servicio->getTipoOrden()=='N')
                        else
                        {
                            $ultimaMilla = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                   ->findOneByNombreTipoMedio($ultimaMilla);
                            if($nombreTipoNegocioPlan == 'PYME')
                            {
                                $arrayActivacionIps = $this->activarIpsAdicionalesPorPunto( $servicio,
                                                                                            $interfaceElemento,
                                                                                            $idEmpresa,
                                                                                            $modeloElemento,
                                                                                            $usrCreacion,
                                                                                            $ipCreacion,
                                                                                            "");                                              
                            }
                            if($intFlagTipoOrden !== 4)
                            {
                                $servProdCaractMacOnt   = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", 
                                                                                                                    $producto);
                                $servProdCaractMacWifi  = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC WIFI", 
                                                                                                                    $producto);
                                $objServProdCaractSsid  = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SSID", 
                                                                                                                    $producto);
                                $servProdCaractPassword = $this->servicioGeneral
                                                               ->getServicioProductoCaracteristica($servicioAnterior, "PASSWORD SSID", $producto);
                                $servProdCaractNumPc    = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "NUMERO PC", 
                                                                                                                    $producto);
                                $servProdCaractModo     = $this->servicioGeneral
                                                               ->getServicioProductoCaracteristica($servicioAnterior, "MODO OPERACION", $producto);
                                if($servProdCaractMacOnt)
                                {
                                    //servicio prod caract mac ont
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC ONT",
                                                                                                   $servProdCaractMacOnt->getValor(), $usrCreacion);
                                }

                                if($servProdCaractMacWifi)
                                {
                                    //servicio prod caract mac ont
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC WIFI",
                                                                                                   $servProdCaractMacWifi->getValor(), $usrCreacion);
                                }

                                if(is_object($objServProdCaractSsid))
                                {
                                    //servicio prod caract mac ont
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SSID",
                                                                                                   $objServProdCaractSsid->getValor(), $usrCreacion);
                                }

                                if($servProdCaractPassword)
                                {
                                    //servicio prod caract mac ont
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "PASSWORD SSID",
                                                                                                   $servProdCaractPassword->getValor(), $usrCreacion);
                                }

                                if($servProdCaractNumPc)
                                {
                                    //servicio prod caract mac ont
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "NUMERO PC",
                                                                                                   $servProdCaractNumPc->getValor(), $usrCreacion);
                                }

                                if($servProdCaractModo)
                                {
                                    //servicio prod caract mac ont
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MODO OPERACION",
                                                                                                   $servProdCaractModo->getValor(), $usrCreacion);
                                }
                            }

                            //guardar ont en servicio tecnico, el mismo ont del servicio anterior
                            $servicioTecnico->setElementoClienteId($servicioTecnicoAnterior->getElementoClienteId());
                            $servicioTecnico->setInterfaceElementoClienteId($servicioTecnicoAnterior->getInterfaceElementoClienteId());
                            $this->emComercial->persist($servicioTecnico);
                            $this->emComercial->flush();

                            $objServicioTecnicoCrearEnlace = null;

                            if ( $servicio->getTipoOrden()=='T' && 
                                 ($servicioTecnico->getInterfaceElementoConectorId() != $servicioTecnicoAnterior->getInterfaceElementoConectorId() )
                               )
                            {
                                $objServicioTecnicoCrearEnlace = $servicioTecnico;
                            }
                            else
                            {
                                $objServicioTecnicoCrearEnlace = $servicioTecnicoAnterior;
                            }

                            //objeto interface elemento cliente
                            $interfaceElementoCliente  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                              ->find($objServicioTecnicoCrearEnlace->getInterfaceElementoClienteId());

                            //objeto interface elemento splitter
                            $interfaceElementoConector = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                              ->find($objServicioTecnicoCrearEnlace->getInterfaceElementoConectorId());

                            //grabar enlace nuevo - puerto del Splitter con puerto del ont
                            $enlace = new InfoEnlace();
                            $enlace->setInterfaceElementoIniId($interfaceElementoConector);
                            $enlace->setInterfaceElementoFinId($interfaceElementoCliente);
                            $enlace->setTipoMedioId($ultimaMilla);
                            $enlace->setTipoEnlace("PRINCIPAL");
                            $enlace->setEstado("Activo");
                            $enlace->setUsrCreacion($usrCreacion);
                            $enlace->setFeCreacion(new \DateTime('now'));
                            $enlace->setIpCreacion($ipCreacion);
                            $this->emInfraestructura->persist($enlace);
                            $this->emInfraestructura->flush();
                        }//else

                        //observacion del servicio
                        $servicio->setObservacion($observacion);
                        $this->emComercial->persist($servicio);
                        $this->emComercial->flush();

                        //actualizar ips
                        if($flagProd == 1)
                        {
                            $strTipoIp = 'FIJA';

                            //Obtiene tipo de ip por el servicio (PRIVADA)
                            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                ->findOneBy(array("servicioId"  =>  $servicioTecnico->getServicioId()->getId(),
                                                                                  "tipoIp"      =>  "PRIVADA",
                                                                                  "estado"      =>  "Reservada"));
                            if (is_object($objTipoIp))
                            {
                                $strTipoIp = $objTipoIp->getTipoIp();
                            }

                            //obtener ips fijas q tiene el servicio
                            $ipsFijas = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findBy(array( "servicioId"    => $servicioTecnico->getServicioId()->getId(),
                                                                "tipoIp"        => $strTipoIp, 
                                                                "estado"        => "Reservada"));
                            for($i=0;$i<count($ipsFijas);$i++)
                            {
                                $ipFija = $ipsFijas[$i];
                                $ipFija->setEstado("Activo");
                                $this->emInfraestructura->persist($ipFija);
                                $this->emInfraestructura->flush();
                            }
                        }

                        $caractEdicionLimitada      = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica"=>"EDICION LIMITADA", "estado"=>"Activo"));
                        $planCaractEdicionLimitada  = $this->emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                            ->findOneBy(array("planId"            =>$servicio->getPlanId()->getId(),
                                                                              "caracteristicaId"  =>$caractEdicionLimitada->getId(),
                                                                              "estado"            =>$servicio->getPlanId()->getEstado()));
                        $arrayDataConfirmacionTn['datos']['respuesta_confirmacion'] = "OK";
                    }
                    else
                    {
                        throw new \Exception($arrayRespuesta['mensaje']);
                    }
                }//if($reqAprovisionamiento=="SI")
                else
                {
                    //nuevo plan tiene ips y estane en diferentes olts
                    if($flagProd==1 && $flagElemento == 1){
                        //Validacion PRO con IP interna

                        if($nombreTipoNegocioPlan == 'PRO')
                        {
                            $arrayProdIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                ->findBy(array("nombreTecnico" => "IP", "empresaCod" => $idEmpresa, "estado" => "Activo"));

                            $planDetNuevo = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                ->findBy(array("planId" => $servicio->getPlanId()->getId()));

                            $indiceProductoIp = $this->servicioGeneral->obtenerIndiceInternetEnPlanDet($planDetNuevo, $arrayProdIp);

                            if($indiceProductoIp != -1)
                            {                      
                                $vlan = "302";
                            }

                            if($servicio->getTipoOrden()=='T')
                            {
                                //servicios adicionales
                                $arrayServiciosPorPunto = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                    ->findBy(array("puntoId" => $servicioAnterior->getPuntoId()->getId()));

                                //verificar si servicio tiene ip adicional
                                $intProdAdicional = $this->servicioGeneral->verificarIpFijaEnPunto($arrayServiciosPorPunto, $arrayProdIp, 
                                                                                                   $servicioAnterior);
                                if ($intProdAdicional>0 )
                                {
                                    //verificar si son de mismos olt
                                    if($servicioTecnico->getElementoId() == $servicioTecnicoAnterior->getElementoId())
                                    {
                                        $vlan = "302";
                                    }
                                }
                            }
                        }

                        //tiene ips
                        $arrayParametros=array(
                                                'servicio'          => $servicio,
                                                'servicioTecnico'   => $servicioTecnico,
                                                'interfaceElemento' => $interfaceElemento,
                                                'modeloElemento'    => $modeloElemento,
                                                'producto'          => $producto,
                                                'macOnt'            => $macOnt,
                                                'macWifi'           => $macWifi,
                                                'perfil'            => $perfil,
                                                'login'             => $login,
                                                'ontLineProfile'    => $ontLineProfile,
                                                'serviceProfile'    => $serviceProfile,
                                                'serieOnt'          => $serieOnt,
                                                'vlan'              => $vlan,
                                                'gemPort'           => $gemPort,
                                                'trafficTable'      => $trafficTable,
                                                'usrCreacion'       => $usrCreacion
                                              );

                        //activar puerto con ip
                        $respuestaArray = $this->activarClienteMdConIp($arrayParametros);

                        $status  = $respuestaArray[0]['status'];
                        $mensaje = $respuestaArray[0]['mensaje'];
                        $idClienteElemento = $respuestaArray[0]['mensaje'];
                    }
                    else
                    {

                        //no tiene ips
                        $arrayParametros=array(
                                                'servicioTecnico'   => $servicioTecnico,
                                                'interfaceElemento' => $interfaceElemento,
                                                'modeloElemento'    => $modeloElemento,
                                                'macOnt'            => $macOnt,
                                                'perfil'            => $perfil,
                                                'login'             => $login,
                                                'ontLineProfile'    => $ontLineProfile,
                                                'serviceProfile'    => $serviceProfile,
                                                'serieOnt'          => $serieOnt,
                                                'vlan'              => $vlan,
                                                'gemPort'           => $gemPort,
                                                'trafficTable'      => $trafficTable
                                              );              

                        //activar puerto
                        $respuestaArray = $this->activarClienteMdSinIp($arrayParametros);
                        $status  = $respuestaArray[0]['status'];                              
                        $mensaje = $respuestaArray[0]['mensaje'];
                        $idClienteElemento = $respuestaArray[0]['mensaje'];                              

                    }

                    if($status=="OK")
                    {
                        if($modeloElemento->getNombreModeloElemento()=="MA5608T")
                        {
                            //*OBTENER SCRIPT SPID --------------------------------------------------------*/
                            $scriptArraySpid   = $this->servicioGeneral->obtenerArregloScript("obtenerSpid",$modeloElemento);
                            $idDocumentoSpid   = $scriptArraySpid[0]->idDocumento;
                            $usuario           = $scriptArraySpid[0]->usuario;
                            //*----------------------------------------------------------------------*/

                            //dividir interface para obtener tarjeta y puerto pon
                            list($tarjeta, $puertoPon) = split('/',$interfaceElemento->getNombreInterfaceElemento());

                            //variables datos
                            $datos = $tarjeta.",".$puertoPon.",".$idClienteElemento;

                            $resultadoJsonSpid = $this->obtenerDatosPorAccion($servicioTecnico, $usuario, $datos, $idDocumentoSpid, "obtenerSpid");
                            $statusSpid = $resultadoJsonSpid->status;

                            if($statusSpid!="OK")
                            {
                                $respuestaFinal[] = array('status'=>$statusSpid, 'mensaje'=>$resultadoJsonSpid->mensaje);
                                return $respuestaFinal;
                            }
                            $spid = $resultadoJsonSpid->mensaje;

                            if($spid!="")
                            {
                                //servicio prod caract ssid
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SPID", $spid, $usrCreacion);
                            }

                        }

                        if($servicio->getTipoOrden()=='N' || $diferenteTecnologia=="SI")
                        {                                      
                            if($prefijoEmpresa=="MD"){
                                $empresaCod= "10";
                            }
                            else{
                                $empresaCod= $idEmpresa;
                            }
                            //ingresar elemento ont
                            $ontNafArray = $this->servicioGeneral->buscarElementoEnNaf($serieOnt, $modeloOnt, "PI", "ActivarServicio");
                            $ontNaf = $ontNafArray[0]['status'];
                            $codigoArticuloOnt = "";
                            if($ontNaf=="OK"){
                                $interfaceOnt = $this->servicioGeneral
                                                     ->ingresarElementoCliente($login, $serieOnt, $modeloOnt, "-ont",
                                                                               $interfaceElementoSplitter, $ultimaMilla, $servicio, $usrCreacion,
                                                                               $ipCreacion, $idEmpresa);

                                //actualizamos registro en el naf ont
                                $pv_mensajeerror = str_repeat(' ', 1000);                                                                  
                                $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                . ":cantidad, :pv_mensajeerror); END;";
                                $stmt = $this->emNaf->getConnection()->prepare($sql);
                                $stmt->bindParam('codigoEmpresaNaf', $empresaCod);
                                $stmt->bindParam('codigoArticulo', $codigoArticuloOnt);
                                $stmt->bindParam('tipoArticulo',$tipoArticulo);
                                $stmt->bindParam('identificacionCliente', $identificacionCliente);
                                $stmt->bindParam('serieCpe', $serieOnt);
                                $stmt->bindParam('cantidad', intval(1));
                                $stmt->bindParam('pv_mensajeerror', $pv_mensajeerror);
                                $stmt->execute();

                                if(strlen(trim($pv_mensajeerror))>0)
                                {
                                    $respuestaFinal[] = array("status"=>"NAF", "mensaje"=>"ERROR ONT NAF: ".$pv_mensajeerror);
                                    return $respuestaFinal;
                                }
                                $objInterfaceIniSmartWifi = $interfaceOnt;
                            }
                            else{
                                $codigoArticuloOnt = $ontNafArray[0]['mensaje'];
                                $respuestaFinal[] = array('status'=>'NAF', 'mensaje'=>$codigoArticuloOnt);
                                return $respuestaFinal;
                            }

                            if($serieWifi!="" && $modeloWifi!="")
                            {
                                //ingresar elemento wifi
                                $wifiNafArray = $this->servicioGeneral->buscarElementoEnNaf($serieWifi, $modeloWifi, "PI", "ActivarServicio");
                                $wifiNaf = $wifiNafArray[0]['status'];
                                $codigoArticuloWifi = "";
                                if($wifiNaf=="OK"){
                                    $objInterfaceWifi = $this->servicioGeneral
                                                             ->ingresarElementoCliente( $login, 
                                                                                        $serieWifi, 
                                                                                        $modeloWifi,
                                                                                        "-wifi", 
                                                                                        $interfaceOnt, 
                                                                                        $ultimaMilla,
                                                                                        $servicio, 
                                                                                        $usrCreacion, 
                                                                                        $ipCreacion, 
                                                                                        $idEmpresa);

                                    //actualizamos registro en el naf wifi
                                    $pv_mensajeerror = str_repeat(' ', 1000);                                                                  
                                    $sql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                    . ":cantidad, :pv_mensajeerror); END;";
                                    $stmt = $this->emNaf->getConnection()->prepare($sql);
                                    $stmt->bindParam('codigoEmpresaNaf', $empresaCod);
                                    $stmt->bindParam('codigoArticulo', $codigoArticuloWifi);
                                    $stmt->bindParam('tipoArticulo',$tipoArticulo);
                                    $stmt->bindParam('identificacionCliente', $identificacionCliente);
                                    $stmt->bindParam('serieCpe', $serieWifi);
                                    $stmt->bindParam('cantidad', intval(1));
                                    $stmt->bindParam('pv_mensajeerror', $pv_mensajeerror);
                                    $stmt->execute();

                                    if(strlen(trim($pv_mensajeerror))>0)
                                    {
                                        $respuestaFinal[] = array("status"=>"NAF", "mensaje"=>"ERROR WIFI NAF: ".$pv_mensajeerror);
                                        return $respuestaFinal;
                                    }
                                    $objInterfaceIniSmartWifi = $objInterfaceWifi;
                                }
                                else{
                                    $codigoArticuloWifi = $wifiNafArray[0]['mensaje'];
                                    $respuestaFinal[] = array('status'=>'NAF', 'mensaje'=>$codigoArticuloWifi);
                                    return $respuestaFinal;  
                                }
                            }

                            //se agrega equipo SmartWifi y se crean los enlaces respectivos
                            if($servicio->getTipoOrden()=='N' && $strTieneSmartWifiRenta == "SI")
                            {
                                if(!empty($strSerieSmartWifi) && !empty($strModeloSmartWifi))
                                {
                                    //ingresar elemento wifi
                                    $arraySmartWifiNaf  = $this->servicioGeneral->buscarElementoEnNaf($strSerieSmartWifi, 
                                                                                                      $strModeloSmartWifi, 
                                                                                                      "PI", 
                                                                                                      "ActivarServicio");
                                    $strSmartWifiNaf       = $arraySmartWifiNaf[0]['status'];
                                    $strCodigoArticuloWifi = "";
                                    if($strSmartWifiNaf == "OK")
                                    {
                                        $objInterfaceElementoSmartWifi = $this->servicioGeneral
                                                                              ->ingresarElementoCliente($login, 
                                                                                                        $strSerieSmartWifi, 
                                                                                                        $strModeloSmartWifi,
                                                                                                        "-".$servicio->getId()."-RentaSmartWifi", 
                                                                                                        $objInterfaceIniSmartWifi, 
                                                                                                        $ultimaMilla,
                                                                                                        $servicio, 
                                                                                                        $usrCreacion, 
                                                                                                        $ipCreacion, 
                                                                                                        $idEmpresa);
                                        if (!is_object($objInterfaceElementoSmartWifi))
                                        {
                                            $respuestaFinal[] = array("status"  => "ERROR", 
                                                                      "mensaje" => "No se logro crear el elemento SmartWifi correctamente");
                                            return $respuestaFinal;
                                        }

                                        //actualizamos registro en el naf wifi
                                        $pv_mensajeerror = str_repeat(' ', 1000);                                                                  
                                        $sql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, ".
                                                           ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, ".
                                                           ":cantidad, :pv_mensajeerror); END;";
                                        $stmt = $this->emNaf->getConnection()->prepare($sql);
                                        $stmt->bindParam('codigoEmpresaNaf'     , $empresaCod);
                                        $stmt->bindParam('codigoArticulo'       , $strCodigoArticuloWifi);
                                        $stmt->bindParam('tipoArticulo'         , $tipoArticulo);
                                        $stmt->bindParam('identificacionCliente', $identificacionCliente);
                                        $stmt->bindParam('serieCpe'             , $strSerieSmartWifi);
                                        $stmt->bindParam('cantidad'             , intval(1));
                                        $stmt->bindParam('pv_mensajeerror'      , $pv_mensajeerror);
                                        $stmt->execute();

                                        if(strlen(trim($pv_mensajeerror))>0)
                                        {
                                            $respuestaFinal[] = array("status"=>"NAF", "mensaje"=>"ERROR SMARTWIFI NAF: ".$pv_mensajeerror);
                                            return $respuestaFinal;
                                        }
                                        $objElementoSmartWifi = $objInterfaceElementoSmartWifi->getElementoId();

                                        if (!is_object($objElementoSmartWifi))
                                        {
                                            $respuestaFinal[] = array("status"  => "ERROR", 
                                                                      "mensaje" => "No se logro recuperar el elemento SmartWifi correctamente");
                                            return $respuestaFinal;
                                        }

                                        $this->servicioGeneral->ingresarDetalleElemento($objElementoSmartWifi,
                                                                                        "MAC WIFI",
                                                                                        "MAC WIFI",
                                                                                        $strMacSmartWifi,
                                                                                        $usrCreacion,
                                                                                        $ipCreacion);
                                    }
                                    else{
                                        $strCodigoArticuloWifi = $arraySmartWifiNaf[0]['mensaje'];
                                        $respuestaFinal[]      = array('status'=>'NAF', 'mensaje'=>$strCodigoArticuloWifi);
                                        return $respuestaFinal;  
                                    }

                                }
                                else
                                {
                                    //generar solicitud con caracteristica que indique si el servicio que asigna responsable es un smartwifi
                                    $objTipoSolicitudAgregarEquipo = $this->emComercial
                                                                          ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                          ->findOneByDescripcionSolicitud('SOLICITUD AGREGAR EQUIPO');

                                    if (!is_object($objTipoSolicitudAgregarEquipo))
                                    {
                                        throw new \Exception("No se encontro información acerca del tipo de solicitud de planificacion");
                                    }

                                    $objAdmiCaracteristicaSmartWifi = $this->emComercial
                                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                           ->findOneBy(array('descripcionCaracteristica' => 'SMART WIFI',
                                                                                             'estado'                    => 'Activo'));
                                    if (!is_object($objAdmiCaracteristicaSmartWifi))
                                    {
                                        throw new \Exception("No se encontro información acerca de caracteristica SMART WIFI");
                                    }

                                    $objPunto = $servicio->getPuntoId();
                                    if (!is_object($objPunto))
                                    {
                                        throw new \Exception("No se encontro información acerca del punto del servicio");
                                    }

                                    $objDatosNumeracion    = $this->emComercial
                                                                  ->getRepository('schemaBundle:AdmiNumeracion')
                                                                  ->findByEmpresaYOficina($idEmpresa,$intIdOficina,'ORD');
                                    if (!is_object($objDatosNumeracion))
                                    {
                                        throw new \Exception("No se generó la numeración correctamente");
                                    }

                                    $strSecuencia_asig     = str_pad($objDatosNumeracion->getSecuencia(),7, '0', STR_PAD_LEFT);
                                    $strNumeroDeContrato   = $objDatosNumeracion->getNumeracionUno().'-'.
                                                             $objDatosNumeracion->getNumeracionDos().'-'.
                                                             $strSecuencia_asig;

                                    $objOrdenTrabajo  = new InfoOrdenTrabajo();
                                    $objOrdenTrabajo->setPuntoId($objPunto);
                                    $objOrdenTrabajo->setTipoOrden('N');
                                    $objOrdenTrabajo->setNumeroOrdenTrabajo($strNumeroDeContrato);
                                    $objOrdenTrabajo->setFeCreacion(new \DateTime('now'));
                                    $objOrdenTrabajo->setUsrCreacion($usrCreacion);
                                    $objOrdenTrabajo->setIpCreacion($ipCreacion);
                                    $objOrdenTrabajo->setOficinaId($intIdOficina);
                                    $objOrdenTrabajo->setEstado('Pendiente');
                                    $this->emComercial->persist($objOrdenTrabajo);
                                    $this->emComercial->flush();

                                    $intNumeroAct = ($objDatosNumeracion->getSecuencia()+1);
                                    $objDatosNumeracion->setSecuencia($intNumeroAct);
                                    $this->emComercial->persist($objDatosNumeracion);
                                    $this->emComercial->flush();

                                    $objDetalleSolicitud  = new InfoDetalleSolicitud();
                                    $objDetalleSolicitud->setServicioId($servicio);
                                    $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
                                    $objDetalleSolicitud->setEstado('Asignada');
                                    $objDetalleSolicitud->setUsrCreacion($usrCreacion);
                                    $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                                    $this->emComercial->persist($objDetalleSolicitud);
                                    $this->emComercial->flush();

                                    $objDetalleSolHist = new InfoDetalleSolHist();
                                    $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                                    $objDetalleSolHist->setIpCreacion($ipCreacion);
                                    $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                    $objDetalleSolHist->setUsrCreacion($usrCreacion);
                                    $objDetalleSolHist->setEstado('Asignada');
                                    $this->emComercial->persist($objDetalleSolHist);
                                    $this->emComercial->flush();

                                    $objDetalleSolCaract= new InfoDetalleSolCaract();
                                    $objDetalleSolCaract->setCaracteristicaId($objAdmiCaracteristicaSmartWifi);
                                    $objDetalleSolCaract->setDetalleSolicitudId($objDetalleSolicitud);
                                    $objDetalleSolCaract->setValor("SI");
                                    $objDetalleSolCaract->setEstado("Asignada");
                                    $objDetalleSolCaract->setUsrCreacion($usrCreacion);
                                    $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                                    $this->emComercial->persist($objDetalleSolCaract);
                                    $this->emComercial->flush();
                                }
                            }
                            /* si el servicio es un traslado y es de diferente tecnologia se realizan validaciones y procesos para enlazar
                               equipos SamrtWifi ya existentes */
                            else if ($servicio->getTipoOrden()=='T' && $diferenteTecnologia=="SI")
                            {
                                $objInterfaceElementoSt = $this->emInfraestructura
                                                               ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                               ->find($servicioTecnicoAnterior->getInterfaceElementoClienteId());
                                if(!is_object($objInterfaceElementoSt))
                                {
                                    $respuestaFinal[] = array('status'  => 'ERROR', 
                                                              'mensaje' => 'No existe información de elementos de clientes, favor revisar!');
                                    return $respuestaFinal;
                                }
                                $arrayParams                                   = array();
                                $arrayParams['intInterfaceElementoConectorId'] = $objInterfaceElementoSt->getId();
                                $arrayParams['arrayData']                      = array();
                                $arrayParams['strBanderaReturn']               = 'INTERFACE';
                                $arrayParams['strTipoSmartWifi']               = 'SmartWifi';
                                $arrayParams['strRetornaUltElePlan']           = 'SI';
                                $arrayParams['objInterfaceElementoFinPlan']    = $objInterfaceElementoSt;

                                $objInterfaceElementoFin = $this->emInfraestructura
                                                                ->getRepository('schemaBundle:InfoElemento')
                                                                ->getElementosSmartWifiByInterface($arrayParams);

                                if(!is_object($objInterfaceElementoFin))
                                {
                                    $respuestaFinal[] = array('status'  => 'ERROR', 
                                                              'mensaje' => 'No existe interface de elemento del cliente del servicio anterior,'.
                                                                           ', favor revisar!');
                                    return $respuestaFinal;
                                }

                                //eliminamos enlace donde la ultima interface de elemento crear (TELLION Ó HW) es padre
                                $objEnlaceOntWifiAnterior  = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                  ->findOneBy(array("interfaceElementoIniId" => $objInterfaceElementoFin,
                                                                                    "estado"                 => "Activo"));
                                if (is_object($objEnlaceOntWifiAnterior))
                                {

                                    $objUltimaMillaEnlace = $this->emInfraestructura
                                                                 ->getRepository('schemaBundle:AdmiTipoMedio')
                                                                 ->findOneBy(array( "nombreTipoMedio" => $ultimaMilla, 
                                                                                    "estado"          => "Activo"));

                                    if(!is_object($objUltimaMillaEnlace))
                                    {
                                        $respuestaFinal[] = array('status'  => 'ERROR', 
                                                                  'mensaje' => 'No se logro recuperar el tipo medio del servicio, favor revisar!');
                                        return $respuestaFinal;
                                    }

                                    /* enlazamos como inicio la ultima interface de elemento crear (TELLION Ó HW) y con fin la interface el smart wifi
                                       grabar enlace nuevo - puerto del Splitter con puerto del ont */
                                    $objEnlaceNuevo = new InfoEnlace();
                                    $objEnlaceNuevo->setInterfaceElementoIniId($objInterfaceIniSmartWifi);
                                    $objEnlaceNuevo->setInterfaceElementoFinId($objEnlaceOntWifiAnterior->getInterfaceElementoFinId());
                                    $objEnlaceNuevo->setTipoMedioId($objUltimaMillaEnlace);
                                    $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                                    $objEnlaceNuevo->setEstado("Activo");
                                    $objEnlaceNuevo->setUsrCreacion($usrCreacion);
                                    $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                                    $objEnlaceNuevo->setIpCreacion($ipCreacion);
                                    $this->emInfraestructura->persist($objEnlaceNuevo);
                                    $this->emInfraestructura->flush();

                                    $objEnlaceOntWifiAnterior->setEstado("Eliminado");
                                    $this->emInfraestructura->persist($objEnlaceOntWifiAnterior);
                                    $this->emInfraestructura->flush();
                                }
                            }

                            //servicio prod caract indice cliente
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "INDICE CLIENTE", $idClienteElemento,
                                                                                           $usrCreacion);                                      
                            if($ssid!="")
                            {
                                //servicio prod caract ssid
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SSID", $ssid, $usrCreacion);
                            }                  

                            if($password!="")
                            {
                                //servicio prod caract password
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "PASSWORD SSID", $password, 
                                    $usrCreacion);
                            }                  

                            if($numeroPc!="")
                            {
                                //servicio prod caract numPc
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "NUMERO PC", $numeroPc, 
                                                                                               $usrCreacion);
                            }

                            if($modoOperacion!="")
                            {
                                //servicio prod caract modo operacion
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MODO OPERACION",
                                                                                               $modoOperacion, $usrCreacion);
                            }

                            //servicio prod caract mac ont
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC ONT", $macOnt, $usrCreacion);

                            if($macWifi!="")
                            {
                                //servicio prod caract mac wifi
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC WIFI", $macWifi, 
                                                                                               $usrCreacion);
                            }

                            //guardar ont en servicio tecnico
                            $servicioTecnico->setElementoClienteId($interfaceOnt->getElementoId()->getId());
                            $servicioTecnico->setInterfaceElementoClienteId($interfaceOnt->getId());
                            $this->emComercial->persist($servicioTecnico);
                            $this->emComercial->flush();
                        }
                        else{
                            $ultimaMilla = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                   ->findOneByNombreTipoMedio($ultimaMilla);
                            $servProdCaractMacOnt   = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", 
                                                                                                                $producto);
                            $servProdCaractMacWifi  = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC WIFI", 
                                                                                                                $producto);
                            $servProdCaractSsid     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SSID", $producto);
                            $servProdCaractPassword = $this->servicioGeneral
                                                           ->getServicioProductoCaracteristica($servicioAnterior, "PASSWORD SSID", $producto);
                            $servProdCaractNumPc    = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "NUMERO PC", 
                                $producto);
                            $servProdCaractModo     = $this->servicioGeneral
                                                           ->getServicioProductoCaracteristica($servicioAnterior, "MODO OPERACION", $producto);

                            //servicio prod caract indice cliente
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "INDICE CLIENTE", $idClienteElemento,
                                                                                           $usrCreacion);

                            if($nombreTipoNegocioPlan == 'PYME' && $flagElemento == 0)
                            {

                                $arrayActivacionIps = $this->activarIpsAdicionalesPorPunto( $servicio,
                                                                                            $interfaceElemento,
                                                                                            $idEmpresa,
                                                                                            $modeloElemento,
                                                                                            $usrCreacion,
                                                                                            $ipCreacion,
                                                                                            "OK");                                              
                            }                                        


                            if($servProdCaractMacOnt)
                            {
                                //servicio prod caract mac ont
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC ONT",
                                                                                               $servProdCaractMacOnt->getValor(), $usrCreacion);
                            }

                            if($servProdCaractMacWifi)
                            {
                                //servicio prod caract mac ont
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC WIFI",
                                                                                               $servProdCaractMacWifi->getValor(), $usrCreacion);
                            }

                            if($servProdCaractSsid)
                            {
                                //servicio prod caract mac ont
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SSID",
                                                                                               $servProdCaractSsid->getValor(), $usrCreacion);
                            }

                            if($servProdCaractPassword)
                            {
                                //servicio prod caract mac ont
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "PASSWORD SSID",
                                                                                               $servProdCaractPassword->getValor(), $usrCreacion);
                            }

                            if($servProdCaractNumPc)
                            {
                                //servicio prod caract mac ont
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "NUMERO PC",
                                                                                               $servProdCaractNumPc->getValor(), $usrCreacion);
                            }

                            if($servProdCaractModo)
                            {
                                //servicio prod caract mac ont
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MODO OPERACION",
                                                                                               $servProdCaractModo->getValor(), $usrCreacion);
                            }

                            //guardar ont en servicio tecnico, el mismo ont del servicio anterior
                            $servicioTecnico->setElementoClienteId($servicioTecnicoAnterior->getElementoClienteId());
                            $servicioTecnico->setInterfaceElementoClienteId($servicioTecnicoAnterior->getInterfaceElementoClienteId());
                            $this->emComercial->persist($servicioTecnico);
                            $this->emComercial->flush();

                            $objServicioTecnicoCrearEnlace = null;

                            if ( $servicio->getTipoOrden()=='T' && 
                                 $diferenteTecnologia = "NO"    && 
                                 ($servicioTecnico->getInterfaceElementoConectorId() != $servicioTecnicoAnterior->getInterfaceElementoConectorId() )
                               )
                            {
                                $objServicioTecnicoCrearEnlace = $servicioTecnico;
                            }
                            else
                            {
                                $objServicioTecnicoCrearEnlace = $servicioTecnicoAnterior;
                            }

                            //objeto interface elemento cliente
                            $interfaceElementoCliente  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                              ->find($objServicioTecnicoCrearEnlace->getInterfaceElementoClienteId());

                            //objeto interface elemento splitter
                            $interfaceElementoConector = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                              ->find($objServicioTecnicoCrearEnlace->getInterfaceElementoConectorId());

                            //grabar enlace nuevo - puerto del Splitter con puerto del ont
                            $enlace = new InfoEnlace();
                            $enlace->setInterfaceElementoIniId($interfaceElementoConector);
                            $enlace->setInterfaceElementoFinId($interfaceElementoCliente);
                            $enlace->setTipoMedioId($ultimaMilla);
                            $enlace->setTipoEnlace("PRINCIPAL");
                            $enlace->setEstado("Activo");
                            $enlace->setUsrCreacion($usrCreacion);
                            $enlace->setFeCreacion(new \DateTime('now'));
                            $enlace->setIpCreacion($ipCreacion);
                            $this->emInfraestructura->persist($enlace);
                            $this->emInfraestructura->flush();
                        }

                        //observacion del servicio
                        $servicio->setObservacion($observacion);
                        $this->emComercial->persist($servicio);
                        $this->emComercial->flush();

                        //actualizar ips
                        if($flagProd==1){
                            $strTipoIp = 'FIJA';

                            //Obtiene tipo de ip por el servicio (PRIVADA)
                            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                ->findOneBy(array("servicioId"  =>  $servicioTecnico->getServicioId()->getId(),
                                                                                  "tipoIp"      =>  "PRIVADA",
                                                                                  "estado"      =>  "Reservada"));
                            if (is_object($objTipoIp))
                            {
                                $strTipoIp = $objTipoIp->getTipoIp();
                            }

                            //obtener ips fijas q tiene el servicio
                            $ipsFijas = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findBy(array("servicioId" =>  $servicioTecnico->getServicioId()->getId(),
                                                               "tipoIp"     =>  $strTipoIp, 
                                                               "estado"     =>  "Reservada"));
                            for($i=0;$i<count($ipsFijas);$i++){
                                $ipFija = $ipsFijas[$i];
                                $ipFija->setEstado("Activo");
                                $this->emInfraestructura->persist($ipFija);
                                $this->emInfraestructura->flush();
                            }
                        }


                        $caractEdicionLimitada = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                      ->findOneBy(array("descripcionCaracteristica"=>"EDICION LIMITADA", "estado"=>"Activo"));
                        $planCaractEdicionLimitada = $this->emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                      ->findOneBy(array("planId"            =>$servicio->getPlanId()->getId(),
                                                                        "caracteristicaId"  =>$caractEdicionLimitada->getId(),
                                                                        "estado"            =>$servicio->getPlanId()->getEstado()));

                        if($planCaractEdicionLimitada && $modeloElemento->getNombreModeloElemento()!="MA5608T"
                            && $planCaractEdicionLimitada->getValor()=="SI" && !$objDetalleElemento)
                        {
                            $strComando = "java -jar "
                                          ."-Djava.security.egd=file:/dev/./urandom /home/telcos/src/telconet/tecnicoBundle/batch/md_sce.jar '"
                                          .$this->host."' '".$servicio->getId()."' 'activar' '".$ipsFijas[0]->getIp()."'";

                            shell_exec($strComando);
                        }

                        $mensaje = $respuestaArray[0]['mensaje'];                
                    }
                }//else
            }
            else{
                $status = "ERROR";
                $mensaje = "NO TIENE ADMINISTRACION";
            }
        } 
        catch(\Exception $e)
        {
            $status     = "ERROR";
            $mensaje    = $e->getMessage();
        }
        $respuestaArray[] = array('status'=>$status, 'mensaje'=>$mensaje, "arrayDataConfirmacionTn" => $arrayDataConfirmacionTn);
        return $respuestaArray;
    }

    
    /**
     * Funcion que sirve para activar las ips logicamente y finalizar la solicitud de planificacion
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 28-04-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 26-07-2018 Se finaliza solicitudes de planificacion de ips por traslado
     * 
     * $servicio            objeto de la info_servicio
     * $interfaceElemento   objeto de info_interface_elemento
     * $productoInternet    objeto de
     * $modeloElemento
     * $usrCreacion
     * $ipCreacion
     * $ejecutaEquipos
     * 
     * @since 1.0
     * @param $arrayParametros (servicio, servicioTecnico, producto, flagTipoOrden, usrCreacion, idEmpresa)
     * 
     */
    
    public function activarIpsAdicionalesPorPunto($servicio,$interfaceElemento,$idEmpresa,$modeloElemento, $usrCreacion, $ipCreacion, $ejecutaEquipos)
    {
        
        $productoInternet = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array("esPreferencia" => "SI",
                                                                                                    "nombreTecnico" => "INTERNET",
                                                                                                    "empresaCod"    => $idEmpresa,
                                                                                                    "estado"        => "Activo"));
        $servicioTecnicoInternet = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                     ->findOneBy(array("servicioId" => $servicio->getId()));
        
        //OBTENER SERVICIOS ADICIONALES
        $servicioAdicionales = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                    ->findBy(array( 'puntoId'   => $servicio->getPuntoId()->getId(),
                                                    'estado'    => 'PreAsignacionInfoTecnica'));
        
        if($servicioAdicionales)
        {
            for($i = 0; $i < count($servicioAdicionales); $i++)
            {
                $servicioAdicional          = $servicioAdicionales[$i];
                $servicioTecnicoAdicional   = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array("servicioId" => $servicioAdicional->getId()));
                $interfaceClienteId         = $servicioTecnicoInternet->getInterfaceElementoClienteId();
                $interfaceCliente           = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                     ->find($interfaceClienteId);

                $servicioTrasladoAd = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAdicional, "TRASLADO", $productoInternet);
                $servicioTrasladoIdAd = $servicioTrasladoAd->getValor();
                $servicioAnteriorAd = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($servicioTrasladoIdAd);
                $servicioTecnicoAnteriorAd = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                    ->findOneBy(array("servicioId" => $servicioAnteriorAd->getId()));

                if($interfaceCliente)
                {

                    if($ejecutaEquipos == 'OK')
                    {
                        //*CONFIGURAR IP FIJA --------------------------------------------------------*/
                        $scriptArrayIpFija = $this->servicioGeneral->obtenerArregloScript("configurarIpFija", $modeloElemento);
                        $idDocumentoIpFja = $scriptArrayIpFija[0]->idDocumento;
                        $usuario = $scriptArrayIpFija[0]->usuario;

                        //*----------------------------------------------------------------------*/
                        //dividir interface para obtener tarjeta y puerto pon
                        list($tarjeta, $puertoPon) = split('/', $interfaceElemento->getNombreInterfaceElemento());

                        //ont id
                        $spcIndice = $this->servicioGeneral
                            ->getServicioProductoCaracteristica($servicio, "INDICE CLIENTE", $productoInternet);

                        $arrayParametrosIpFija = array(
                            'elementoId' => $interfaceElemento->getElementoId()->getId(),
                            'idDocumento' => $idDocumentoIpFja,
                            'usuario' => $usuario,
                            'tarjeta' => $tarjeta,
                            'puertoPon' => $puertoPon,
                            'ontId' => $spcIndice->getValor(),
                            'puertoOnt' => $interfaceCliente->getNombreInterfaceElemento()
                        );
                        $resultadoJsonIpFija = $this->activarIpFijaHuawei($arrayParametrosIpFija);

                        if($resultadoJsonIpFija->status != "OK")
                        {
                            $respuestaArray[] = array('status' => 'ERROR',
                                                      'mensaje' => "Activacion Puerto Ont: " . $resultadoJsonIpFija->mensaje);
                            return $respuestaArray;
                        }
                    }
                    //Activa las Ips logicamente
                    $strListaIps = '';

                    $admiTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                        ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD PLANIFICACION',
                        'estado' => 'Activo'));
                    $detalleSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                        ->findOneBy(array('servicioId' => $servicioAdicional->getId(),
                        'tipoSolicitudId' => $admiTipoSolicitud->getId()));

                    $infoServicio = $servicioAdicional;
                    $infoServicioTecnico = $servicioTecnicoAdicional;
                    $infoServicioTrasladado = $servicioAnteriorAd;
                    $infoServicioTecnicoTrasladado = $servicioTecnicoAnteriorAd;

                    $infoServicioTecnico->setElementoId($infoServicioTecnicoTrasladado->getElementoId());
                    $infoServicioTecnico->setInterfaceElementoId($infoServicioTecnicoTrasladado->getInterfaceElementoId());
                    $infoServicioTecnico->setElementoContenedorId($infoServicioTecnicoTrasladado->getElementoContenedorId());
                    $infoServicioTecnico->setElementoConectorId($infoServicioTecnicoTrasladado->getElementoConectorId());
                    $infoServicioTecnico->setInterfaceElementoConectorId($infoServicioTecnicoTrasladado->getInterfaceElementoConectorId());
                    $infoServicioTecnico->setElementoClienteId($servicioTecnicoInternet->getElementoClienteId());
                    $infoServicioTecnico->setInterfaceElementoClienteId($servicioTecnicoInternet->getInterfaceElementoClienteId());
                    $this->emComercial->persist($infoServicioTecnico);
                    $this->emComercial->flush();

                    //copiar todas las caracteristicas del servicio trasladado
                    $servicioProdCaracts = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                        ->findBy(array("servicioId" => $infoServicioTrasladado->getId(), "estado" => 'Activo'));

                    $carac = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy(array("descripcionCaracteristica" => 'TRASLADO', "estado" => "Activo"));
                    $prodCarac = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                        ->findOneBy(array("productoId" => $productoInternet->getId(),
                        "caracteristicaId" => $carac->getId(),
                        "estado" => "Activo"));

                    foreach($servicioProdCaracts as $servicioProdCaract)
                    {
                        if($prodCarac->getId() != $servicioProdCaract->getProductoCaracterisiticaId())
                        {
                            $servicioProdCaractCopy = new InfoServicioProdCaract();
                            $servicioProdCaractCopy = clone $servicioProdCaract;
                            $servicioProdCaractCopy->setServicioId($infoServicio->getId());
                            $servicioProdCaractCopy->setFeCreacion(new \DateTime('now'));
                            $servicioProdCaractCopy->setUsrCreacion($usrCreacion);

                            $this->emComercial->persist($servicioProdCaractCopy);
                            $this->emComercial->flush();
                        }
                    }
                    //copiar todas las Ips
                    $infoIps = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                        ->findBy(array("servicioId" => $infoServicioTrasladado->getId(), "estado" => 'Activo'));
                    //se inicializa variable utilizada para llevar rastro de la ip asignada por el sistema Telco
                    $strListaIps = '';
                    foreach($infoIps as $infoIp)
                    {
                        $infoIpCopy = new InfoIp();
                        $infoIpCopy = clone $infoIp;
                        $infoIpCopy->setServicioId($infoServicio->getId());
                        $infoIpCopy->setFeCreacion(new \DateTime('now'));
                        $infoIpCopy->setUsrCreacion($usrCreacion);
                        $infoIpCopy->setIpCreacion($ipCreacion);
                        //se agrega codigo para llevar rastro de la ip asignada por el sistema Telcos
                        $strListaIps = $strListaIps . ' ' . $infoIp->getIp();
                        $this->emInfraestructura->persist($infoIpCopy);
                        $this->emInfraestructura->flush();

                        $infoIp->setEstado('Eliminado');
                        $this->emInfraestructura->persist($infoIp);
                        $this->emInfraestructura->flush();
                    }
                    //se agrega codigo para llevar rastro de la ip asignada por el sistema Telcos
                    $strListaIps = ($strListaIps ? ' Se clonaron las ips: ' . $strListaIps : "");
                    //actualizo estados
                    $detalleSolicitud->setEstado("Asignada");
                    $this->emComercial->persist($detalleSolicitud);
                    $this->emComercial->flush();

                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                    $lastDetalleSolhist = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolHist')
                        ->findOneDetalleSolicitudHistorial($detalleSolicitud->getId(), 'Planificada');

                    $entityDetalleSolHist = new InfoDetalleSolHist();
                    $entityDetalleSolHist->setDetalleSolicitudId($detalleSolicitud);
                    if($lastDetalleSolhist)
                    {
                        $entityDetalleSolHist->setFeIniPlan($lastDetalleSolhist->getFeIniPlan());
                        $entityDetalleSolHist->setFeFinPlan($lastDetalleSolhist->getFeFinPlan());
                        //se agrega codigo para llevar rastro de la ip asignada por el sistema Telcos
                        $entityDetalleSolHist->setObservacion($lastDetalleSolhist->getObservacion() . $strListaIps);
                    }
                    $entityDetalleSolHist->setIpCreacion($ipCreacion);
                    $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                    $entityDetalleSolHist->setUsrCreacion($usrCreacion);
                    $entityDetalleSolHist->setEstado('Asignada');
                    
                    $this->emComercial->persist($entityDetalleSolHist);
                    $this->emComercial->flush();
                    
                    $detalleSolicitud->setEstado("Finalizada");
                    $this->emComercial->persist($detalleSolicitud);
                    $this->emComercial->flush();

                    //crear historial para la solicitud
                    $objHistorialSolicitudPlani = new InfoDetalleSolHist();
                    $objHistorialSolicitudPlani->setDetalleSolicitudId($detalleSolicitud);
                    $objHistorialSolicitudPlani->setEstado("Finalizada");
                    $objHistorialSolicitudPlani->setObservacion("Cliente instalado");
                    $objHistorialSolicitudPlani->setUsrCreacion($usrCreacion);
                    $objHistorialSolicitudPlani->setFeCreacion(new \DateTime('now'));
                    $objHistorialSolicitudPlani->setIpCreacion($ipCreacion);
                    $this->emComercial->persist($objHistorialSolicitudPlani);
                    $this->emComercial->flush();

                    //SE ACTUALIZA EL ESTADO DEL SERVICIO
                    $infoServicio->setEstado("Activo");
                    $this->emComercial->persist($infoServicio);

                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                    $entityServicioHist = new InfoServicioHistorial();
                    $entityServicioHist->setServicioId($infoServicio);
                    $entityServicioHist->setIpCreacion($ipCreacion);
                    $entityServicioHist->setFeCreacion(new \DateTime('now'));
                    $entityServicioHist->setUsrCreacion($usrCreacion);
                    $entityServicioHist->setEstado('Activo');
                    //se agrega codigo para llevar rastro de la ip asignada por el sistema Telcos
                    $entityServicioHist->setObservacion('Se utilizaron los mismos recursos de red del servicio trasladado, al ser un ' .
                        'servicio de IP paso a estado Activo directamente ' .
                        $strListaIps);
                    $this->emComercial->persist($entityServicioHist);

                    //SE ACTUALIZA EL ESTADO DEL SERVICIO
                    $infoServicioTrasladado->setEstado("Trasladado");
                    $this->emComercial->persist($infoServicioTrasladado);

                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                    $entityServicioHistAnt = new InfoServicioHistorial();
                    $entityServicioHistAnt->setServicioId($infoServicioTrasladado);
                    $entityServicioHistAnt->setIpCreacion($ipCreacion);
                    $entityServicioHistAnt->setFeCreacion(new \DateTime('now'));
                    $entityServicioHistAnt->setUsrCreacion($usrCreacion);
                    $entityServicioHistAnt->setEstado('Trasladado');
                    //se agrega codigo para llevar rastro de la ip asignada por el sistema Telcos
                    $entityServicioHistAnt->setObservacion('Se traslado el servicio');
                    $this->emComercial->persist($entityServicioHistAnt);
                    $this->emComercial->flush();                  
                }
            }
            
            $respuestaArray[] = array('status' => 'OK', 'mensaje' => 'OK');
            return $respuestaArray;
        }
        else
        {
            $respuestaArray[] = array('status' => 'OK', 'mensaje' => 'Sin Ips Adicionales');
            return $respuestaArray;
        }
    }
    
    /**
     * Funcion que sirve para activar servicios McAfee pendientes por Punto
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 30-10-2015
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 25-05-2016   Se agrega registro de historial de activacion de servicio McAfee
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 04-08-2019   Se modifica el historial del servicio, cambiando McAfee por la descripción del producto, puesto que existirán
     *                            las licencias Kaspersky
     * 
     * @param $servicio  
     * @param $empresa   
     * @param $oficina   
     * @param $usrCreacion
     * @param $clientIp
     * 
     * @since 1.0
     */
    public function activarServiciosMcAfeePorPunto($servicio, $empresa, $oficina, $usrCreacion, $clientIp)
    {
        $servicioAdicionales = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                    ->findBy(array('puntoId' => $servicio->getPuntoId(),
                                                   'estado'  => 'Pendiente'));

        if($servicioAdicionales)
        {
            //se recorren servicios con estado Pendiente del cliente
            for($i = 0; $i < count($servicioAdicionales); $i++)
            {
                $servicioAdicional = $servicioAdicionales[$i];
                if ($servicioAdicional->getProductoId())
                {
                    $entityAdmiProducto    = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                               ->find($servicioAdicional->getProductoId());
                    $booleanValidaProducto = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTEGIDO');
                    $booleanValidaProductoProteccionTotal = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTECCION');
                    //se valida que sean productos McAfee
                    if ($booleanValidaProducto !== false || $booleanValidaProductoProteccionTotal !== false)
                    {
                        $arrayPeticiones['idServicio']  = $servicioAdicional->getId();
                        $arrayPeticiones['idEmpresa']   = $empresa;
                        $arrayPeticiones['idOficina']   = $oficina;
                        $arrayPeticiones['idAccion']    = '847';
                        $arrayPeticiones['usrCreacion'] = $usrCreacion;
                        $arrayPeticiones['clientIp']    = $clientIp;

                        $arrayRespuestaServicio = $this->activarServiciosOtros($arrayPeticiones);
                        
                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL DE EJECUCION DE SERVICO MCAFEE ENVIADOS A ACTIVAR
                        $entityServicioHist = new InfoServicioHistorial();
                        $entityServicioHist->setServicioId($servicio);
                        $entityServicioHist->setIpCreacion($clientIp);
                        $entityServicioHist->setFeCreacion(new \DateTime('now'));
                        $entityServicioHist->setUsrCreacion($usrCreacion);
                        $entityServicioHist->setEstado($servicio->getEstado());
                        $entityServicioHist->setObservacion('Se ejecuto activacion de servicio '.$entityAdmiProducto->getDescripcionProducto().': '.
                                                            'resultado:'. $arrayRespuestaServicio['status']
                                                            .' , mensaje:'.$arrayRespuestaServicio['mensaje']);
                        $this->emComercial->persist($entityServicioHist);
                        $this->emComercial->flush();
                        
                    }
                }
            }
        }
    }
    
    /**
     * Funcion que sirve para activar servicios Office365 pendientes por Punto
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 27-09-2016
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 01-12-2016 - Se crea producto NetlifeCloud en reemplazo del Office 365, se procede a cambiar el producto
     * 
     * @param $servicio  
     * @param $empresa   
     * @param $oficina   
     * @param $usrCreacion
     * @param $clientIp
     * 
     * @since 1.0
     */
    public function activarServiciosOffice365PorPunto($servicio, $empresa, $oficina, $usrCreacion, $clientIp)
    {
        $servicioAdicionales = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                    ->findBy(array('puntoId' => $servicio->getPuntoId(),
                                                   'estado'  => 'Pendiente'));

        if($servicioAdicionales)
        {
            //se recorren servicios con estado Pendiente del cliente
            for($i = 0; $i < count($servicioAdicionales); $i++)
            {
                $servicioAdicional = $servicioAdicionales[$i];
                if($servicioAdicional->getProductoId())
                {
                    $entityAdmiProducto          = $this->emComercial
                                                        ->getRepository('schemaBundle:AdmiProducto')
                                                        ->find($servicioAdicional->getProductoId());
                    
                    $booleanValidaProductoOffice = strpos($entityAdmiProducto->getDescripcionProducto(),'NetlifeCloud');
                    //se valida que sean productos NetlifeCloud
                    if($booleanValidaProductoOffice !== false)
                    {
                        $arrayPeticiones['idServicio']  = $servicioAdicional->getId();
                        $arrayPeticiones['idEmpresa']   = $empresa;
                        $arrayPeticiones['idOficina']   = $oficina;
                        $arrayPeticiones['idAccion']    = '847';
                        $arrayPeticiones['usrCreacion'] = $usrCreacion;
                        $arrayPeticiones['clientIp']    = $clientIp;

                        $arrayRespuestaServicio = $this->activarServiciosOtros($arrayPeticiones);

                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL DE EJECUCION DE SERVICO NetlifeCloud ENVIADOS A ACTIVAR
                        $entityServicioHist = new InfoServicioHistorial();
                        $entityServicioHist->setServicioId($servicio);
                        $entityServicioHist->setIpCreacion($clientIp);
                        $entityServicioHist->setFeCreacion(new \DateTime('now'));
                        $entityServicioHist->setUsrCreacion($usrCreacion);
                        $entityServicioHist->setEstado($servicio->getEstado());
                        $entityServicioHist->setObservacion('Se ejecuto activacion de servicio NetlifeCloud: resultado:' .
                                                            $arrayRespuestaServicio['status'] . ' , mensaje:' . $arrayRespuestaServicio['mensaje']);
                        $this->emComercial->persist($entityServicioHist);
                        $this->emComercial->flush();
                    }
                }
            }
        }
    }
    
    /**
     * Funcion que sirve para activar puerto por tipo de Orden Traslado y
     * cancelar el puerto anterior.
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 28-04-2015
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 10-09-2015 John Vera
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.3 28-09-2015 John Vera
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.4 13-04-2016 Se corrigen validaciones de conexion de equipos enganchados en diferentes puertos 
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.5 09-05-2016 Se agrega parametro empresa en metodo activarPuertoPorTraslado por conflictos de producto INTERNET DEDICADO
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.6 24-06-2016 Se agrega validacion en proceso de cancelación de servicios de un traslado, en caso de reprocesar el traslado
     *                         solo se cancelara el servicio si es que no a sido cancelado por una anterior ejecución.
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.7 08-03-2017 Se agrega recuperación de MAC ONT para soportar escenarios de cancelación de servicios TELLION CNR en traslados
     * @since 1.6
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.8 11-05-2017  Se modifica funcion para que se conecte al middleware de Megadatos.
     *                          Middleware de Megadatos Cancela Servicio Anterior y Activa Servicio Nuevo en los equipos de Red.
     *                          Se agrega cancelacion logica de servicio ips adicionales anteriores.
     *                          Se agrega activacion logica de servicio ips adicionales nuevas.
     *                          Se corrige identacion del codigo.
     *                          Se eliminan validaciones de equipos enganchados.
     *                          Se elimina validacion de cancelacion Tellion.
     * 
     * @author Allan Suarez   <arsuarez@telconet.ec>
     * @version 1.9 03-10-2017 Correcciones segun analisis del Jenkins
     * @since 1.8
     * 
     * @author Richard Cabrera  <rcabrera@telconet.ec>
     * @version 2.0 05-01-2018 Se regularizan cambios en caliente, se valida que el objeto ipFija exista antes de actualizar el estado
     * @since 1.9
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.1 26-07-2018 Se valida escenario de mismos olts con diferentes splitters o mismos olts, mismos splitters y diferentes interfaces
     * @since 2.0
     *  
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.2 22-02-2021 Se valida si el servicio tiene Ip Privada
     * @since 2.1
     * 
     * @param $arrayParametros [usrCreacion, ipCreacion, servicio, servicioTecnico, producto, flagTipoOrden, idEmpresa, serieOnt, macOnt, macWifi,
     *                          interfaceElemento, nombreCliente, identificaci
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 2.3 12-05-2023 - Se agrega inserLog para verificar si se ejecutan las peticiones a MIDDLEWARE
     *
     * @author Alberto Arias <farias@telconet.ec>
     * @version 2.4 07-06-2023 - Se agrega error_log para verificar si se ejecutan las peticiones a MIDDLEWARE
     */
    public function activarPuertoPorTraslado($arrayParametros)
    {
        $usrCreacion        = $arrayParametros['usrCreacion'];
        $ipCreacion         = $arrayParametros['ipCreacion'];
        $servicio           = $arrayParametros['servicio'];
        $servicioTecnico    = $arrayParametros['servicioTecnico'];
        $producto           = $arrayParametros['producto'];
        $flagTipoOrden      = $arrayParametros['flagTipoOrden'];
        $idEmpresa          = $arrayParametros['idEmpresa'];
        $serieOnt           = $arrayParametros['serieOnt'];
        $macOnt             = $arrayParametros['macOnt'];      
        $macWifi            = $arrayParametros['macWifi'];
        $idDocumentoMacOnt  = $arrayParametros['idDocumentoMacOnt'];
        $idDocumentoMacWifi = $arrayParametros['idDocumentoMacWifi'];
        $interfaceElemento  = $arrayParametros['interfaceElemento'];
        $strNombreCliente   = $arrayParametros['nombreCliente'];
        $strIdentificacion  = $arrayParametros['identificacion'];
        $flagMiddleware     = $arrayParametros['flagMiddleware'];

        $respuesta          = array();
        $flagElemento       = 0;
        $flagInterface      = 0;
        $flagIpAdicional    = 0;
        $spcIndiceCliente   = null;
        $spcSpid            = null;
        $spcMacOnt          = null;
        $spcMacWifi         = null;
        $scope              = null;
        $mensaje            = "";
        $spcTraslado        = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "TRASLADO", $producto);
        $elemento           = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());
        $ultimaMilla        = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->find($servicioTecnico->getUltimaMillaId());

        $servicioAnteriorId = "";
        if($spcTraslado)
        {
            $servicioAnteriorId = $spcTraslado->getValor();
        }
        else
        {
            $respuesta[]=array( 'status'        => "ERROR",
                                'flagTipoOrden' => -1,
                                'mensaje'       => "No existe caracteristica Traslado, No se puede continuar! <br> "
                                                 . "Favor comuniquese con el Dep. Sistemas!");
        }

        $servicioAnterior           = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($servicioAnteriorId);
        $servicioTecnicoAnterior    = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                           ->findOneBy(array( "servicioId" => $servicioAnterior->getId()));
        $interfaceElementoAnterior  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                           ->find($servicioTecnicoAnterior->getInterfaceElementoId());
        $elementoAnterior           = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                           ->find($servicioTecnicoAnterior->getElementoId());
        $planCabAnterior            = $servicioAnterior->getPlanId();
        $planDetAnterior            = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                           ->findBy(array("planId" => $planCabAnterior->getId()));
        $arrayProdIp                = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                           ->findBy(array("nombreTecnico" => "IP", "empresaCod" => $idEmpresa, "estado" => "Activo"));
        $flagProdIp                 = $this->servicioGeneral->verificarPlanTieneIp($planDetAnterior, $arrayProdIp);
        $arrServiciosAnteriores     = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->findBy(array("puntoId" => $servicioAnterior->getPuntoId()->getId(), "estado" => "Activo"));
        $arrServiciosNuevo          = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->findBy(array("puntoId" => $servicio->getPuntoId()->getId(), "estado" => "PreAsignacionInfoTecnica"));
                                
        //Verificar si el plan a cancelar es edicion limitada 100/100
        $flagEdicionLimitada = false;
        $caractEdicionLimitada = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findOneBy(array("descripcionCaracteristica" => "EDICION LIMITADA",
                                                                                        "estado" => "Activo"));

        $planCaractEdicionLimitada = $this->emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                       ->findOneBy(array(
                                                        "planId"            => $servicio->getPlanId()->getId(),
                                                        "caracteristicaId"  => $caractEdicionLimitada->getId(),
                                                        "estado"            => $servicio->getPlanId()->getEstado()));
        if($planCaractEdicionLimitada)
        {
            if($planCaractEdicionLimitada->getValor() == "SI")
            {
                $flagEdicionLimitada = true;
            }
        }
        
        //VERIFICAR ELEMENTOS DIFERENTES
        if($servicioTecnico->getElementoId() != $servicioTecnicoAnterior->getElementoId())
        {
            $flagElemento = 1;
        }
      
        //VERIFICAR INTERFACES DIFERENTES
        if($servicioTecnico->getInterfaceElementoId() != $servicioTecnicoAnterior->getInterfaceElementoId() )
        {
            $flagInterface = 1;
        }
        
        //Se obtiene la MAC ont y wifi del servicio anterior en caso de que sea un traslado de igua tecnologia
        if($serieOnt==null)
        {
            $spcMacOnt      = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", $producto);
            if($spcMacOnt)
            {
                $macOnt = $spcMacOnt->getValor();
            }
            $spcMacWifi     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC WIFI", $producto);
            if($spcMacWifi)
            {
                $macWifi = $spcMacWifi->getValor();
            }
        }
        
        if($flagMiddleware)
        {
            $prodIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                            ->findOneBy(array("nombreTecnico"=>"IP", "empresaCod"=>$idEmpresa, "estado"=>"Activo"));
            
            if(!$serieOnt)
            {
                $elementoCliente = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                     ->find($servicioTecnicoAnterior->getElementoClienteId());
                $serieOnt = $elementoCliente->getSerieFisica();
            }
            
            //RECURSOS NUEVOS
            if($flagElemento == 1 || $flagInterface == 1 )
            {
                $strTrafficTable    = '';
                $strOntId           = '';
                $strSpid            = '';
                $strGemPort         = '';
                $strLineProfile     = '';
                $strServiceProfile  = '';
                $strVlan            = '';
                $strIpNuevaPlan     = '';
                $strScopeNuevo      = '';
                $scope              = '';
                $strIpFijaAnterior  = '';
                $arrayIpCancelar    = array();
                $arrayIpActivar     = array();
                $intIpsFijasActivas = 0;
                $flagTipoOrden      = 3;
                $status             = "NA";

                if($ultimaMilla->getNombreTipoMedio() == "Fibra Optica")
                {
                    //OBTENER INDICE CLIENTE
                    $spcOntId       = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "INDICE CLIENTE", $producto);
                    if($spcOntId)
                    {
                        $strOntId = $spcOntId->getValor();
                    }
                    $strMarcaAntOlt    = $elementoAnterior->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    //obtener caracteristicas para huawei
                    if($strMarcaAntOlt == "HUAWEI")
                    {
                        //OBTENER SERVICE-PORT
                        $spcSpid        = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SPID", $producto);
                        if($spcSpid)
                        {
                            $strSpid = $spcSpid->getValor();
                        }
                        
                        //OBTENER GEM-PORT
                        $spcGemPort     = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "GEM-PORT", $producto);
                        if($spcGemPort)
                        {
                            $strGemPort = $spcGemPort->getValor();
                        }
                        
                        //OBTENER VLAN
                        $spcVlan        = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "VLAN", $producto);
                        if($spcVlan)
                        {
                            $nombreTipoNegocioPlan = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();
                            if($nombreTipoNegocioPlan == 'PRO')
                            {
                                //VERIFICAR SI PLAN TIENE IP
                                $arrayProdIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                    ->findBy(array("nombreTecnico" => "IP", "empresaCod" => $idEmpresa, "estado" => "Activo"));

                                $planDetNuevo = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->findBy(array("planId" => $servicio->getPlanId()->getId()));

                                $indiceProductoIp = $this->servicioGeneral->obtenerIndiceInternetEnPlanDet($planDetNuevo, $arrayProdIp);

                                if($indiceProductoIp != -1)
                                {                      
                                    $strVlan = "302";
                                }
                                //VERIFICAR SI EL PUNTO TIENE IPS ADICIONALES
                                else
                                {
                                    $arrayDatosIp   = $this->servicioGeneral
                                                        ->getInfoIpsFijaPunto($arrServiciosAnteriores, $arrayProdIp, 
                                                                              $servicioAnterior, 'Activo', 'Activo',$producto);

                                    //OBTENER LA CANTIDAD DE IPS ADICIONALES ACTIVAS
                                    $intIpsFijasActivas     = $arrayDatosIp['ip_fijas_activas'];
                                    if($intIpsFijasActivas > 0)
                                    {
                                        $strVlan = "302";
                                    }
                                    else
                                    {
                                        $strVlan    = $spcVlan->getValor();
                                    }
                                }
                            }//if($nombreTipoNegocioPlan == 'PRO')
                            else
                            {
                                $strVlan    = $spcVlan->getValor();
                            }
                        }//if(!$spcVlan)

                        //OBTENER LINE-PROFILE-NAME
                        $spcLineProfile     = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "LINE-PROFILE-NAME", $producto);
                        if($spcLineProfile)
                        {
                            $strLineProfile = $spcLineProfile->getValor();
                        }

                        //OBTENER TRAFFIC-TABLE
                        $spcTrafficTable    = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "TRAFFIC-TABLE", $producto);
                        if($spcTrafficTable)
                        {
                            $strTrafficTable = $spcTrafficTable->getValor();
                        }

                        //OBTENER SERVICE-PROFILE
                        $spcServiceProf = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SERVICE-PROFILE", $producto);
                        if(!is_object($spcServiceProf))
                        {
                            $elementoClienteAnterior = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                            ->find($servicioTecnicoAnterior->getElementoClienteId());
                            $this->servicioGeneral
                                 ->ingresarServicioProductoCaracteristica($servicio, $producto, "SERVICE-PROFILE",
                                                                          $elementoClienteAnterior->getModeloElementoId()->getNombreModeloElemento(),
                                                                          $usrCreacion);

                            $strServiceProfile = $elementoClienteAnterior->getModeloElementoId()->getNombreModeloElemento();
                        }
                        else
                        {
                            $this->servicioGeneral
                                 ->ingresarServicioProductoCaracteristica($servicio, $producto, "SERVICE-PROFILE",
                                                                          $spcServiceProf->getValor(), $usrCreacion);
                            $strServiceProfile = $spcServiceProf->getValor();
                        }
                    }//if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "MA5608T")
                    else if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "EP-3116")
                    {
                        //OBTENER PERFIL
                        $spcLineProfile     = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "PERFIL", $producto);
                        if($spcLineProfile)
                        {
                            $strLineProfile = $spcLineProfile->getValor();
                            $arrayPerfil    = explode("_", $strLineProfile);
                            $strLineProfile = $arrayPerfil[0]."_".$arrayPerfil[1];
                        }
                    }
                    else
                    {
                        $arrayFinal[] = array(  'status'        => "ERROR", 
                                                'flagTipoOrden' => -1,
                                                'mensaje'       => "Modelo del OLT no tiene Aprovisionamiento!");
                        return $arrayFinal;
                    }
                    
                    //obtener tipo de negocio
                    $strTipoNegocio = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();
                    
                    //OBTENER IP FIJA DEL PLAN Y SCOPE
                    if($strVlan == "302" || $strTipoNegocio == "PYME")
                    {
                        /*---------------------------SERVICIO ANTERIOR---------------------------------------------------------*/
                        //OBTENER IP FIJA
                        $objIpFijaAnterior  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneBy(array("servicioId"=>$servicioAnterior->getId(),"estado"=>"Activo"));

                        if($objIpFijaAnterior)
                        {
                            $strIpFijaAnterior  = $objIpFijaAnterior->getIp();

                            //OBTENER SCOPE ANTERIOR
                            $spcScope = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SCOPE", $prodIp);

                            if(!$spcScope)
                            {
                                //BUSCAR SCOPE
                                $arrayScopeOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                         ->getScopePorIpFija($objIpFijaAnterior->getIp(),
                                                                                             $servicioTecnicoAnterior->getElementoId());

                                if (!$arrayScopeOlt)
                                { 
                                    $arrayFinal[] = array('status'        => "ERROR", 
                                                          'flagTipoOrden' => -1,
                                                          'mensaje'       => "Ip Fija no pertenece a un Scope! <br>"
                                                                             . "Favor Comunicarse con RDA!");
                                    return $arrayFinal;
                                }

                                $scope = $arrayScopeOlt['NOMBRE_SCOPE'];
                            }
                            else
                            {
                                $scope = $spcScope->getValor();
                            }
                        }//if($objIpFijaAnterior)

                        //OBTENER IPS ADICIONALES A CANCELAR
                        $arrayDatosIpCancelar   = $this->servicioGeneral
                                                    ->getInfoIpsFijaPunto($arrServiciosAnteriores, $arrayProdIp, 
                                                                          $servicioAnterior, 'Activo', 'Activo',$producto);
                        $arrayIpCancelar        = $arrayDatosIpCancelar['valores'];

                        //OBTENER LA CANTIDAD DE IPS ADICIONALES ACTIVAS
                        $intIpsFijasActivas     = $arrayDatosIpCancelar['ip_fijas_activas'];

                        /*---------------------------SERVICIO ACTUAL---------------------------------------------------------*/
                        $strTipoIp = 'FIJA';
        
                        //Obtiene tipo de ip por el servicio (PRIVADA)
                        $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId" => $servicio->getId(),
                                                                "tipoIp"       => "PRIVADA",
                                                                "estado"       => "Reservada"));

                        if (is_object($objTipoIp))
                        {
                            $strTipoIp = $objTipoIp->getTipoIp();
                        }
                        
                        //OBTENER IP DEL PLAN
                        $objIpFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array(  "servicioId" => $servicio->getId(),
                                                                "tipoIp"     => $strTipoIp,
                                                                "estado"     => "Reservada"));
                        if($objIpFija)
                        {
                            $strIpNuevaPlan = $objIpFija->getIp();
                        }
                        
                        //OBTENER SCOPE NUEVO
                        $objCaractScope = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "SCOPE", $prodIp);
                        
                        if($objCaractScope)
                        {
                            $strScopeNuevo = $objCaractScope->getValor();
                        }

                        //OBTENER IPS ADICIONALES A ACTIVAR---------------------------------------------------------------------------------
                        $arregloIps = $this->recursosRed->getIpsDisponibleScopeOlt( $intIpsFijasActivas, 
                                                                                    $elemento->getId(), 
                                                                                    $servicio->getId(), 
                                                                                    $servicio->getPuntoId()->getId(), 
                                                                                    "SI", 
                                                                                    $servicio->getPlanId()->getId());
                        
                        if($arregloIps['error'])
                        {
                            $arrayFinal[] = array('status' => "ERROR", 'mensaje' => $arregloIps['error']);
                        }
                        
                        $arrayIps       = $arregloIps['ips'];
                        
                        //CONSTRUIR ARREGLO PARA ACTIVAR IPS ADICIONALES
                        $i = 0;
                        foreach($arrayIps as $arrIpData)
                        {
                            $objServicioIp      = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')
                                                                    ->find($arrServiciosNuevo[$i]->getId());
                            $objTrasladoIp      = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIp, "TRASLADO", $producto);
                            $objServicioIpAnt   = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')
                                                                    ->find($objTrasladoIp->getValor());
                            
                            $spcMac = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIpAnt, "MAC ONT", $producto);
                            if(!$spcMac)
                            {
                                $spcMac = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIpAnt, "MAC", $producto);
                                if(!$spcMac)
                                {
                                    $spcMac = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIpAnt, "MAC WIFI", $producto);
                                    if(!$spcMac)
                                    {
                                        $respuestaFinal[] = array(  'status' => 'ERROR', 
                                                                    'mensaje' => 'No existe Mac asociado a un Servicio, favor revisar!');
                                        return $respuestaFinal;
                                    }
                                }
                            }

                            $strMac         = $spcMac->getValor();
                            $strIp          = $arrIpData['ip'];
                            $intIdservicio  = $arrServiciosNuevo[$i]->getId();

                            $arrayIpActivar[] = array(
                                                    'mac'           => $strMac,
                                                    'ip'            => $strIp,
                                                    'id_servicio'   => $intIdservicio
                                                   );
                            
                            $i++;
                        }//foreach($arrayIps as $arrIpData)
                    }//if ($strVlan == "302")

                    //obtener la ip del olt anterior
                    $objIpElementoAnterior = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("elementoId" => $elementoAnterior->getId()));

                    //obtener la ip del olt actual
                    $objIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("elementoId" => $elemento->getId()));

                    $arrayDatos = array(
                                            'serial_ont'            => $serieOnt,
                                            'mac_ont'               => $macOnt,
                                            'nombre_olt'            => $elementoAnterior->getNombreElemento(),
                                            'ip_olt'                => $objIpElementoAnterior->getIp(),
                                            'puerto_olt'            => $interfaceElementoAnterior->getNombreInterfaceElemento(),
                                            'modelo_olt'            => $elementoAnterior->getModeloElementoId()->getNombreModeloElemento(),
                                            'gemport'               => $strGemPort,
                                            'service_profile'       => $strServiceProfile,
                                            'line_profile'          => $strLineProfile,
                                            'traffic_table'         => $strTrafficTable,
                                            'ont_id'                => $strOntId,
                                            'service_port'          => $strSpid,
                                            'vlan'                  => $strVlan,
                                            'estado_servicio'       => $servicioTecnicoAnterior->getServicioId()->getEstado(),
                                            'ip'                    => $strIpFijaAnterior,     //ip anterior
                                            'scope'                 => $scope,                  //scope anterior
                                            'estado_servicio_nuevo' => $servicio->getEstado(),
                                            'ip_olt_nuevo'          => $objIpElemento->getIp(),
                                            'modelo_olt_nuevo'      => $elemento->getModeloElementoId()->getNombreModeloElemento(),
                                            'puerto_olt_nuevo'      => $interfaceElemento->getNombreInterfaceElemento(),
                                            'ip_fijas_activas'      => $intIpsFijasActivas,
                                            'tipo_negocio_actual'   => $strTipoNegocio,
                                            'mac_wifi'              => $macWifi,
                                            'ip_nueva'              => $strIpNuevaPlan,
                                            'scope_nuevo'           => $strScopeNuevo,
                                            'ip_cancelar'           => $arrayIpCancelar,
                                            'ip_activar'            => $arrayIpActivar,
                                            'equipoOntDualBand'     => "",
                                            'tipoOrden'             => ""
                                        );
                    
                    if (isset($arrayParametros['calculoPotencia']) && !empty($arrayParametros['calculoPotencia'])) 
                    {
                        $arrayDatos['calculoPotencia'] = $arrayParametros['calculoPotencia'];
                    }

                    $arrayDatosMiddleware = array(
                                                    'nombre_cliente'        => $strNombreCliente,
                                                    'login'                 => $servicio->getPuntoId()->getLogin(),
                                                    'identificacion'        => $strIdentificacion,
                                                    'datos'                 => $arrayDatos,
                                                    'opcion'                => 'TRASLADAR',
                                                    'ejecutaComando'        => $this->ejecutaComando,
                                                    'usrCreacion'           => $usrCreacion,
                                                    'ipCreacion'            => $ipCreacion
                                                );
                    // LOG 'TRASLDAR' ENVIO
                    $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => $idEmpresa,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => 'PROCESO ANTES DE LA PETICION',
                        'status'              => 'Envio',
                        'appAction'           => 'TRASLADAR_'.$servicio->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDatosMiddleware),
                        'creationUser'        => $usrCreacion));
                    $strErrorLog = "Proceso: TrasladarServicioMD, Opción: TRASLADAR"
                    .", Login: ".$servicio->getPuntoId()->getLogin()
                    .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$usrCreacion
                    .", Status : Envio, Descripcion: PROCESO ANTES DE LA PETICION";
                    error_log($strErrorLog);
                    $arrayRespuesta = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                    // LOG 'TRASLDAR' RESPUESTA
                    $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => $idEmpresa,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => 'PROCESO DESPUES DE LA PETICION',
                        'status'              => 'Respuesta',
                        'appAction'           => 'TRASLADAR_'.$servicio->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDatosMiddleware),
                        'creationUser'        => $usrCreacion));
                    $strErrorLog = "Proceso: TrasladarServicioMD, Opción: TRASLADAR"
                    .", Login: ".$servicio->getPuntoId()->getLogin()
                    .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$usrCreacion
                    .", Status : Respuesta, Descripcion: PROCESO DESPUES DE LA PETICION";
                    error_log($strErrorLog);
                    $statusActivar  = $arrayRespuesta['status_activar'];
                    $statusCancelar = $arrayRespuesta['status_cancelar'];
                    $mensajeFinal   = '';
                    
                    if($statusActivar == "OK" && $statusCancelar == 'OK')
                    {
                        $status         = $statusActivar;
                        $mensajeFinal   = $mensajeFinal . $arrayRespuesta['mensaje_cancelar'];
                        $mensajeFinal   = $mensajeFinal . $arrayRespuesta['mensaje_activar'];
                        
                        if (isset($arrayParametros['calculoPotencia']) && !empty($arrayParametros['calculoPotencia'])
                            && isset($arrayRespuesta['potencia']) && !empty($arrayRespuesta['potencia'])
                            && $arrayParametros['calculoPotencia'] == 'S')  
                        {
                            $strObservacion = 'Potencia en nivel óptimo'.'<br> <b>Potencia: '.
                                                        $arrayRespuesta['potencia'].' dBm <b>';

                            $objInfoServicioHistorial = new InfoServicioHistorial();
                            $objInfoServicioHistorial->setEstado('AsignadoTarea');
                            $objInfoServicioHistorial->setUsrCreacion($usrCreacion);                                
                            $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioHistorial->setIpCreacion($ipCreacion);
                            $objInfoServicioHistorial->setServicioId($servicio);
                            $objInfoServicioHistorial->setObservacion($strObservacion);
                            $this->emComercial->persist($objInfoServicioHistorial);
                            $this->emComercial->flush();
                        }

                        //IP DEL PLAN E IPS ADICIONALES
                        if($strVlan == "302" || $strTipoNegocio == "PYME")
                        {
                            $strTipoIp = 'FIJA';
        
                            //Obtiene tipo de ip por el servicio (PRIVADA)
                            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneBy(array("servicioId"=> $servicioAnterior->getId(),
                                                                      "tipoIp"    => "PRIVADA",
                                                                      "estado"    => "Activo"));
                            if (is_object($objTipoIp))
                            {
                                $strTipoIp = $objTipoIp->getTipoIp();
                            }

                            //ELIMINAR IP DEL PLAN
                            $ipFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array(  "servicioId"    => $servicioAnterior->getId(),
                                                                "tipoIp"        => $strTipoIp, 
                                                                "estado"        => "Activo"));

                            if(is_object($ipFija))
                            {
                                $ipFija->setEstado("Eliminado");
                                $this->emInfraestructura->persist($ipFija);
                                $this->emInfraestructura->flush();
                            }

                            //ELIMINAR IPS ADICIONALES
                            $arrayRespuestaIpCancelar = $arrayRespuesta['ip_cancelar'];

                            foreach($arrayRespuestaIpCancelar as $ipCancelar)
                            {
                                $statusIpCancelar = $ipCancelar['status'];
                            
                                if($statusIpCancelar == 'OK')
                                {
                                    $strTipoIp = 'FIJA';
        
                                    //Obtiene tipo de ip por el servicio (PRIVADA)
                                    $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                               ->findOneBy(array("servicioId"  =>  $ipCancelar['id_servicio'],
                                                                              "tipoIp"      =>  "PRIVADA",
                                                                              "estado"      =>  "Activo"));

                                    if (is_object($objTipoIp))
                                    {
                                        $strTipoIp = $objTipoIp->getTipoIp();
                                    }
                                    
                                    //ELIMINAR IP DEL PLAN DEL SERVICIO ANTERIOR
                                    $ipFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneBy(array(  "servicioId"    => $ipCancelar['id_servicio'],
                                                                        "tipoIp"        => $strTipoIp, 
                                                                        "estado"        => "Activo"));

                                    $ipFija->setEstado("Eliminado");
                                    $this->emInfraestructura->persist($ipFija);
                                    $this->emInfraestructura->flush();

                                    //ELIMINAR CARACTERISTICAS DEL SERVICIO IP ADICIONAL ANTERIOR
                                    $arraySpcAnterior = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findBy(array( "servicioId"    => $ipCancelar['id_servicio'],
                                                                            "estado"        => "Activo"));
                                    foreach($arraySpcAnterior as $spcAnterior)
                                    {
                                        $spcAnterior->setEstado('Eliminado');
                                        $this->emComercial->persist($spcAnterior);
                                        $this->emComercial->flush();
                                    }

                                    //TRASLADAR SERVICIO IP ADICIONAL ANTERIOR
                                    $objServicioIpAnterior = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                    ->find($ipCancelar['id_servicio']);
                                    $objServicioIpAnterior->setEstado('Trasladado');
                                    $this->emComercial->persist($objServicioIpAnterior);
                                    $this->emComercial->flush();
                                }
                                
                                $mensajeFinal = $mensajeFinal . $ipCancelar['mensaje'];
                            }

                            $strTipoIp = 'FIJA';
        
                            //Obtiene tipo de ip por el servicio (PRIVADA)
                            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneBy(array("servicioId"=> $servicio->getId(),
                                                                      "tipoIp"    => "PRIVADA",
                                                                      "estado"    => "Reservada"));

                            if (is_object($objTipoIp))
                            {
                                $strTipoIp = $objTipoIp->getTipoIp();
                            }
                            
                            //ACTIVAR IP FIJA
                            $ipFijaNueva = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array(  "servicioId"    => $servicio->getId(),
                                                                "tipoIp"        => $strTipoIp, 
                                                                "estado"        => "Reservada"));

                            if(is_object($ipFijaNueva))
                            {
                                $ipFijaNueva->setEstado("Activo");
                                $this->emInfraestructura->persist($ipFijaNueva);
                                $this->emInfraestructura->flush();
                            }

                            //ACTIVAR IPS FIJAS ADICIONALES
                            $arrayRespuestaIpActivar = $arrayRespuesta['ip_activar'];

                            foreach($arrayRespuestaIpActivar as $ipActivar)
                            {
                                $strMacAdicional = '';
                                $statusIpActivar = $ipActivar['status'];
                                
                                if($statusIpActivar == 'OK')
                                {
                                    $objServIp = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')
                                                            ->find($ipActivar['id_servicio']);
                                    
                                    //ACTIVAR IP DEL PLAN DEL SERVICIO NUEVO
                                    $objIpAdicional = new InfoIp();
                                    $objIpAdicional->setIp($ipActivar['ip']);
                                    $objIpAdicional->setServicioId($ipActivar['id_servicio']);
                                    $objIpAdicional->setVersionIp("IPV4");
                                    $objIpAdicional->setTipoIp($strTipoIp);
                                    $objIpAdicional->setEstado("Activo");
                                    $objIpAdicional->setUsrCreacion($usrCreacion);
                                    $objIpAdicional->setFeCreacion(new \DateTime('now'));
                                    $objIpAdicional->setIpCreacion($ipCreacion);
                                    $this->emInfraestructura->persist($objIpAdicional);
                                    $this->emInfraestructura->flush();
                                    
                                    //GRABAR SCOPE
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServIp, 
                                                                                                    $objServIp->getProductoId(), 
                                                                                                    "SCOPE", 
                                                                                                    $strScopeNuevo, 
                                                                                                    $usrCreacion );
                                    
                                    foreach($arrayIpActivar as $ipAntesActivar)
                                    {
                                        if($ipAntesActivar['id_servicio'] == $ipActivar['id_servicio'])
                                        {
                                            $strMacAdicional = $ipAntesActivar['mac'];
                                            break;
                                        }
                                    }
                                    
                                    //GRABAR MAC
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServIp, 
                                                                                                    $producto, 
                                                                                                    "MAC", 
                                                                                                    $strMacAdicional, 
                                                                                                    $usrCreacion );                              
                                }
                                
                                $mensajeFinal = $mensajeFinal . $ipActivar['mensaje'];
                            }//foreach($arrayRespuestaIpActivar as $ipActivar)
                            
                        }//if($strVlan == "302" || $strTipoNegocio == "PYME")

                        //GRABAR INDICE-CLIENTE
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                        $producto, 
                                                                                        "INDICE CLIENTE", 
                                                                                        $arrayRespuesta['ont_id'], 
                                                                                        $usrCreacion );

                        //GRABAR SPID
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                        $producto, 
                                                                                        "SPID", 
                                                                                        $arrayRespuesta['spid'], 
                                                                                        $usrCreacion );
                    }//if($arrayRespuesta['status']=="OK")
                    else
                    {
                        if($statusCancelar == 'ERROR')
                        {
                            $status         = $statusCancelar;
                            $flagTipoOrden  = -1;
                            $mensajeFinal   = $mensajeFinal . $arrayRespuesta['mensaje_cancelar'];
                        }
                        else if($statusActivar == 'ERROR' && $statusCancelar == 'OK')
                        {
                            $status         = $statusActivar;
                            $flagTipoOrden  = -1;
                            $mensajeFinal = $mensajeFinal . $arrayRespuesta['mensaje_cancelar'];

                            if (isset($arrayParametros['calculoPotencia']) && !empty($arrayParametros['calculoPotencia'])
                                    && isset($arrayRespuesta['potencia']) && !empty($arrayRespuesta['potencia'])
                                    && $arrayParametros['calculoPotencia'] == 'S')
                            {
                                $mensajeFinal = "Potencia:".$arrayRespuesta['potencia'];
                            }

                            //IP DEL PLAN E IPS ADICIONALES
                            if($strVlan == "302")
                            {
                                //ELIMINAR IPS ADICIONALES
                                $arrayRespuestaIpCancelar = $arrayRespuesta['ip_cancelar'];

                                foreach($arrayRespuestaIpCancelar as $ipCancelar)
                                {
                                    $statusIpCancelar = $ipCancelar['status'];

                                    if($statusIpCancelar == 'OK')
                                    {
                                        $strTipoIp = 'FIJA';
        
                                        //Obtiene tipo de ip por el servicio (PRIVADA)
                                        $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                ->findOneBy(array("servicioId" => $ipCancelar['id_servicio'],
                                                                                "tipoIp"       => "PRIVADA",
                                                                                "estado"       => "Activo"));
                                        if (is_object($objTipoIp))
                                        {
                                            $strTipoIp = $objTipoIp->getTipoIp();
                                        }                                            

                                        //ELIMINAR IP DEL PLAN DEL SERVICIO ANTERIOR
                                        $ipFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                        ->findOneBy(array(  "servicioId"    => $ipCancelar['id_servicio'],
                                                                            "tipoIp"        => $strTipoIp, 
                                                                            "estado"        => "Activo"));

                                        $ipFija->setEstado("Eliminado");
                                        $this->emInfraestructura->persist($ipFija);
                                        $this->emInfraestructura->flush();

                                        //ELIMINAR CARACTERISTICAS DEL SERVICIO IP ADICIONAL ANTERIOR
                                        $arraySpcAnterior = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                ->findBy(array( "servicioId"    => $ipCancelar['id_servicio'],
                                                                                "estado"        => "Activo"));
                                        foreach($arraySpcAnterior as $spcAnterior)
                                        {
                                            $spcAnterior->setEstado('Eliminado');
                                            $this->emComercial->persist($spcAnterior);
                                            $this->emComercial->flush();
                                        }

                                        //TRASLADAR SERVICIO IP ADICIONAL ANTERIOR
                                        $objServicioIpAnterior = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->find($ipCancelar['id_servicio']);
                                        $objServicioIpAnterior->setEstado('Trasladado');
                                        $this->emComercial->persist($objServicioIpAnterior);
                                        $this->emComercial->flush();
                                    }

                                    $mensajeFinal = $mensajeFinal . $ipCancelar['mensaje'];
                                }
                            }//if($strVlan == "302")

                            $mensajeFinal = $mensajeFinal . $arrayRespuesta['mensaje_activar'];
                        }//else if($statusActivar == 'ERROR' && $statusCancelar == 'OK')
                        else
                        {
                            $status         = $statusActivar;
                            $flagTipoOrden  = -1;
                            $mensajeFinal   = "Cancelar: ".$arrayRespuesta['mensaje_cancelar'] . "Activar: ". $arrayRespuesta['mensaje_activar'];
                        }
                    }
                }//if($ultimaMilla->getNombreTipoMedio() == "Fibra Optica")
                else if($ultimaMilla->getNombreTipoMedio() == "Cobre" || $ultimaMilla->getNombreTipoMedio() == "Radio")
                {
                    $reqAprovisionamiento = $elementoAnterior->getModeloElementoId()->getReqAprovisionamiento();

                    if($reqAprovisionamiento == "SI")
                    {
                        $arrCancelarServicioAnterior = array(
                                                                'servicio'          => $servicioAnterior,
                                                                'interfaceElemento' => $interfaceElementoAnterior,
                                                                'modeloElemento'    => $elementoAnterior->getModeloElementoId(),
                                                                'producto'          => $producto
                                                            );

                        $arrResultadoCancel = $this->cancelarServicio->cancelarServicioScriptTtco($arrCancelarServicioAnterior);

                        $status  = $arrResultadoCancel[0]['status'];
                        $mensaje = $arrResultadoCancel[0]['mensaje'];
                    }
                }//else if($ultimaMilla->getNombreTipoMedio() == "Cobre" || $ultimaMilla->getNombreTipoMedio() == "Radio")
                else
                {
                    $arrayFinal[] = array(  'status'        => "ERROR", 
                                            'flagTipoOrden' => -1,
                                            'mensaje'       => "Tipo Medio no tiene Aprovisionamiento!");
                    return $arrayFinal;
                }
            }
            //MISMOS RECURSOS
            else
            {
                $flagTipoOrden  = 2;
                $status         = "OK";

                //obtener modelo elemento
                $elemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());

                //guardar ont en servicio tecnico, el mismo ont del servicio anterior
                $servicioTecnico->setElementoClienteId($servicioTecnicoAnterior->getElementoClienteId());
                $servicioTecnico->setInterfaceElementoClienteId($servicioTecnicoAnterior->getInterfaceElementoClienteId());
                $this->emComercial->persist($servicioTecnico);
                $this->emComercial->flush();

                if($ultimaMilla->getNombreTipoMedio()=="Fibra Optica")
                {
                    $servProdCaractMacOnt   = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", $producto);
                    $servProdCaractMacWifi  = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC WIFI", $producto);
                    $objServProdCaractIndice= $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "INDICE CLIENTE", $producto);

                    if($objServProdCaractIndice)
                    {
                        //servicio prod caract indice cliente
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "INDICE CLIENTE",
                                                                                       $objServProdCaractIndice->getValor(), $usrCreacion);
                    }

                    if($servProdCaractMacOnt)
                    {
                        //servicio prod caract mac ont
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC ONT",
                                                                                       $servProdCaractMacOnt->getValor(), $usrCreacion);
                    }

                    if($servProdCaractMacWifi)
                    {
                        //servicio prod caract mac wifi
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC WIFI",
                                                                                       $servProdCaractMacWifi->getValor(), $usrCreacion);
                    }

                    /*CARACTERISTICAS PARA HUAWEI*/
                    $strMarcaOlt    = $elemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    //if($elemento->getModeloElementoId()->getNombreModeloElemento()=="MA5608T")
                    if($strMarcaOlt == "HUAWEI")
                    {
                        $spcSpid         = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SPID", $producto);
                        $spcScope        = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SCOPE", $producto);

                        if($spcSpid)
                        {
                            //servicio prod caract spid
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SPID",
                                                                                           $spcSpid->getValor(), $usrCreacion);
                        }

                        if($spcScope)
                        {
                            //servicio prod caract scope
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SCOPE",
                                                                                           $spcScope->getValor(), $usrCreacion);
                        }
                    }//if($elemento->getModeloElementoId()->getNombreModeloElemento()=="MA5608T")
                }//if($ultimaMilla->getNombreTipoMedio()=="Fibra Optica")
                else if($ultimaMilla->getNombreTipoMedio()=="Cobre" || $ultimaMilla->getNombreTipoMedio()=="Radio")
                {
                    $servProdCaractMac  = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC", $producto);

                    if($servProdCaractMac)
                    {
                        //servicio prod caract mac
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC",
                                                                                       $servProdCaractMac->getValor(), $usrCreacion);
                    }
                }//else if($ultimaMilla->getNombreTipoMedio()=="Cobre" || $ultimaMilla->getNombreTipoMedio()=="Radio")

                $servProdCaractSsid     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SSID", $producto);
                $servProdCaractPassword = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "PASSWORD SSID", $producto);
                $servProdCaractNumPc    = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "NUMERO PC", $producto);
                $servProdCaractModo     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MODO OPERACION", $producto);

                /*CARACTERISTICAS DEL CLIENTE*/
                if($servProdCaractSsid)
                {
                    //servicio prod caract ssid
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SSID",
                                                                                   $servProdCaractSsid->getValor(), $usrCreacion);
                }

                if($servProdCaractPassword)
                {
                    //servicio prod caract password ssid
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "PASSWORD SSID",
                                                                                   $servProdCaractPassword->getValor(), $usrCreacion);
                }

                if($servProdCaractNumPc){
                    //servicio prod caract numero pc
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "NUMERO PC",
                                                                                   $servProdCaractNumPc->getValor(), $usrCreacion);
                }

                if($servProdCaractModo)
                {
                    //servicio prod caract modo operacion
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MODO OPERACION",
                                                                                   $servProdCaractModo->getValor(), $usrCreacion);
                }
                
                /**
                 * Validar mismos olt con misma interface y diferentes splitters o 
                 * mismos olts con misma interface y mismos splitters pero diferentes interfaces
                 */
                if( $servicioTecnico->getElementoId() === $servicioTecnicoAnterior->getElementoId()
                    && $servicioTecnico->getInterfaceElementoId() === $servicioTecnicoAnterior->getInterfaceElementoId()
                    && (($servicioTecnico->getElementoConectorId() !== $servicioTecnicoAnterior->getElementoConectorId())
                        || ($servicioTecnico->getElementoConectorId() === $servicioTecnicoAnterior->getElementoConectorId() 
                        && $servicioTecnico->getInterfaceElementoConectorId() !== $servicioTecnicoAnterior->getInterfaceElementoConectorId())))
                {
                    $flagTipoOrden = 4;
                }
            }//else
            
            $mensaje = $mensajeFinal;
        }//if($flagMiddleware)
        else
        {
            //Validacion de equipos enganchados solo los que sean de diferentes interfaces de olt

            if($elemento->getModeloElementoId()->getNombreModeloElemento() == "MA5608T" && $flagInterface == 1)
            {
                $scriptArray = $this->servicioGeneral->obtenerArregloScript("activarCliente",
                                                                            $elemento->getModeloElementoId());
                $usuario = $scriptArray[0]->usuario;


                if(!$serieOnt)
                {
                    $elementoCliente = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                         ->find($servicioTecnicoAnterior->getElementoClienteId());
                    $serieOnt = $elementoCliente->getSerieFisica();
                }

                $resultadoJsonSerial = $this->obtenerDatosPorAccion($servicioTecnico, $usuario, $serieOnt, 0, "verificarSerialOnt");
                $statusSerial = $resultadoJsonSerial->status;

                if($statusSerial != "OK")
                {
                    $respuestaFinal[] = array('status'        => $statusSerial, 
                                              'flagTipoOrden' => -1,
                                              'mensaje'       => $resultadoJsonSerial->mensaje);
                    return $respuestaFinal;
                }
                else
                {
                    //dividir interface para obtener tarjeta y puerto pon
                    list($tarjeta, $puertoPon) = split('/',$interfaceElemento->getNombreInterfaceElemento());
                    $fsp = $resultadoJsonSerial->mensaje;
                    list($frame1, $tarjeta1, $puertoPon1) = split('/',$fsp);

                    if($tarjeta!=$tarjeta1 || $puertoPon!=$puertoPon1)
                    {
                        $respuestaFinal[] = array('status'        =>"ERROR", 
                                                  'flagTipoOrden' => -1,
                                                  'mensaje'       =>"Serial no se encuentra en el Puerto Pon Correcto");
                        return $respuestaFinal;
                    }
                }
            }
            if($elemento->getModeloElementoId()->getNombreModeloElemento() == "EP-3116" && $flagInterface == 1)
            {
                //verificar mac ONT conectada
                $resultadoJsonMacOnt = $this->verificarMacOnt($servicioTecnico, $interfaceElemento, $macOnt, $idDocumentoMacOnt);
                $statusMacOnt = $resultadoJsonMacOnt->status;
                if($statusMacOnt=="ERROR")
                {
                    $respuestaFinal[] = array('status'        => $statusMacOnt, 
                                              'flagTipoOrden' => -1,
                                              'mensaje'       => $resultadoJsonMacOnt->mensaje);
                    return $respuestaFinal;
                }

                $indice = $resultadoJsonMacOnt->mensaje;
                //verificar mac WIFI conectada
                $resultadoJsonMacWifi = $this->verificarMacWifi($servicioTecnico, $interfaceElemento, $macWifi, $indice, $idDocumentoMacWifi);
                $statusMacWifi = $resultadoJsonMacWifi->status;
                if($statusMacWifi=="ERROR")
                {
                    $respuestaFinal[] = array('status'        => $statusMacWifi, 
                                              'flagTipoOrden' => -1,
                                              'mensaje'       => $resultadoJsonMacWifi->mensaje);
                    return $respuestaFinal;
                }
            }

            if($flagElemento == 1 || $flagInterface == 1 )
            {
                //RECURSOS NUEVOS
                $flagTipoOrden  = 3;
                $status         = "NA";
                //se agrega validacion de cancelación de servicio Tellion en caso de existir una ejecución previa de migración
                $srvCancelacionTllProdCaract = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, 
                                                                                                         "CANCELACION TELLION", 
                                                                                                         $producto);
                if($srvCancelacionTllProdCaract)
                {
                    $status  = "OK";
                    $mensaje = "OK";
                }
                else
                {
                    if($ultimaMilla->getNombreTipoMedio() == "Fibra Optica")
                    {
                        //CANCELAR SERVICIO ANTERIOR
                        if($flagElemento == 1)//elementos diferentes -> cancelacion completa
                        {  
                            $spcIndiceCliente = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "INDICE CLIENTE", $producto);

                            //obtener caracteristicas para huawei
                            if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "MA5608T")
                            {
                                $spcSpid        = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SPID", $producto);

                                //obtener caracteristica service-profile
                                $spcServiceProf = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SERVICE-PROFILE", $producto);
                                if(!$spcServiceProf)
                                {
                                    $elementoClienteAnterior = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                                    ->find($servicioTecnicoAnterior->getElementoClienteId());
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica($servicio, $producto, "SERVICE-PROFILE",
                                                                                  $elementoClienteAnterior->getModeloElementoId()->getNombreModeloElemento(),
                                                                                  $usrCreacion);
                                }
                                else
                                {
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica($servicio, $producto, "SERVICE-PROFILE",
                                                                                  $spcServiceProf->getValor(), $usrCreacion);
                                }

                                //si no es un plan de edicion limitada sigo con el flujo normal, porque estos planes no tienen ip y la sgt programacion
                                //requiere que tenga una ip activa
                                if (!$flagEdicionLimitada)
                                {
                                    //obtener caracteristica scope
                                    $spcScope = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SCOPE", $producto);
                                    if(!$spcScope)
                                    {
                                        //obtener ip fija
                                        $ipFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                       ->findOneBy(array("servicioId"=>$servicioAnterior->getId(),"estado"=>"Activo"));

                                        if($ipFija)
                                        {
                                            //buscar scopes
                                            $arrayScopeOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                                     ->getScopePorIpFija($ipFija->getIp(),
                                                                                                         $servicioTecnicoAnterior->getElementoId());

                                            if (!$arrayScopeOlt)
                                            { 
                                                $arrayFinal[] = array('status'        => "ERROR", 
                                                                      'flagTipoOrden' => -1,
                                                                      'mensaje'       => "Ip Fija no pertenece a un Scope! <br>"
                                                                                         . "Favor Comunicarse con el Dep. Gepon!");
                                                return $arrayFinal;
                                            }

                                            $scope = $arrayScopeOlt['NOMBRE_SCOPE'];
                                        }
                                    }
                                    else
                                    {
                                        $scope = $spcScope->getValor();
                                    }
                                }
                            }//if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "MA5608T")

                            $spcMacOnt      = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", $producto);

                            $arrCancelarServicioAnterior = array(
                                                                    'servicioTecnico'   => $servicioTecnicoAnterior,
                                                                    'interfaceElemento' => $interfaceElementoAnterior,
                                                                    'login'             => $servicio->getPuntoId()->getLogin(),
                                                                    'modeloElemento'    => $elementoAnterior->getModeloElementoId(),
                                                                    'spcIndiceCliente'  => $spcIndiceCliente,
                                                                    'spcSpid'           => $spcSpid,
                                                                    'spcMacOnt'         => $spcMacOnt,
                                                                    'scope'             => $scope,
                                                                    'producto'          => $producto,
                                                                    'idEmpresa'         => $idEmpresa,
                                                                    'ipCreacion'        => $ipCreacion,
                                                                    'usrCreacion'       => $usrCreacion
                                                                );   

                            if($flagProdIp > 0)
                            {
                                if($flagEdicionLimitada)
                                {
                                    //Se obtiene el tipo de aprovisionamiento del Olt
                                    $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                             ->findOneBy(array('elementoId'=>$elementoAnterior->getId(),
                                                                               'detalleNombre'=>'APROVISIONAMIENTO_IP'
                                                                               ));


                                    if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "MA5608T" || 
                                      ($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "EP-3116" && 
                                        $objDetalleElemento->getDetalleValor()=='CNR'))
                                    {
                                        $arrResultadoCancel = $this->cancelarServicio->cancelarServicioMdSinIp($arrCancelarServicioAnterior);
                                    }
                                    else
                                    {
                                        $arrResultadoCancel = $this->cancelarServicio->cancelarServicioMdConIp($arrCancelarServicioAnterior);

                                        $strTipoIp = 'FIJA';
        
                                        //Obtiene tipo de ip por el servicio (PRIVADA)
                                        $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                           ->findOneBy(array("servicioId" => $servicioTecnicoAnterior->getServicioId()->getId(),
                                                                             "tipoIp"     => "PRIVADA",
                                                                             "estado"     => "Activo"));
                                        if (is_object($objTipoIp))
                                        {
                                            $strTipoIp = $objTipoIp->getTipoIp();
                                        }
                                        
                                        //eliminar ip del plan
                                        $ipFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array("servicioId" => $servicioTecnicoAnterior->getServicioId()->getId(),
                                            "tipoIp" => $strTipoIp, "estado" => "Activo"));

                                        $ipFija->setEstado("Eliminado");
                                        $this->emInfraestructura->persist($ipFija);
                                        $this->emInfraestructura->flush();
                                    }
                                }
                                else
                                {
                                    $arrResultadoCancel = $this->cancelarServicio->cancelarServicioMdConIp($arrCancelarServicioAnterior);
                                    
                                    $strTipoIp = 'FIJA';
        
                                    //Obtiene tipo de ip por el servicio (PRIVADA)
                                    $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                      ->findOneBy(array("servicioId" => $servicioTecnicoAnterior->getServicioId()->getId(),
                                                                        "tipoIp"     => "PRIVADA",
                                                                        "estado"     => "Activo"));
                                    if (is_object($objTipoIp))
                                    {
                                        $strTipoIp = $objTipoIp->getTipoIp();
                                    }
                                    
                                    //eliminar ip del plan
                                    $ipFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                        ->findOneBy(array("servicioId" => $servicioTecnicoAnterior->getServicioId()->getId(),
                                        "tipoIp" => $strTipoIp, "estado" => "Activo"));

                                    $ipFija->setEstado("Eliminado");
                                    $this->emInfraestructura->persist($ipFija);
                                    $this->emInfraestructura->flush();
                                }
                            }//if($flagProdIp > 0)
                            else
                            {
                                $arrResultadoCancel = $this->cancelarServicio->cancelarServicioMdSinIp($arrCancelarServicioAnterior);
                            }

                            $statusAdicional = $arrResultadoCancel[0]['status'];

                            if($statusAdicional == "ERROR")
                            {
                                $arrayFinal[] = array('status'        => "ERROR", 
                                                      'flagTipoOrden' => -1,
                                                      'mensaje'       => $arrResultadoCancel[0]['mensaje']);
                                return $arrayFinal;
                            }


                            //verificar si existen ips adicionales
                            $flagIpAdicional = $this->servicioGeneral->verificarIpFijaEnPunto($arrServiciosAnteriores, $arrayProdIp, $servicioAnterior);

                            if($flagIpAdicional > 0)
                            {
                                //eliminar ips adicionales
                                while(true)
                                {
                                    //obtener indice del arreglo de servicios anteriores de ip adicional
                                    $indice = $this->servicioGeneral
                                                   ->obtenerIndiceIpFijaEnArrayServicios($arrServiciosAnteriores, $arrayProdIp, $servicioAnterior);

                                    if($indice == -1)
                                    {
                                        break;
                                    }

                                    $servicioAdicionalAnterior = $arrServiciosAnteriores[$indice];

                                    $spcMacAdicional = $this->servicioGeneral
                                                            ->getServicioProductoCaracteristica($servicioAdicionalAnterior,"MAC", $producto);

                                    $scopeAdicional = "";

                                    //Gestiona informacion de scope para huawei
                                    if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "MA5608T")
                                    {
                                        //obtener caracteristica scope
                                        $spcScopeAdi = $this->servicioGeneral
                                                            ->getServicioProductoCaracteristica($servicioAdicionalAnterior, "SCOPE", $producto);

                                        if(!$spcScopeAdi)
                                        {
                                            //obtener ip fija
                                            $ipFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                           ->findOneBy(array("servicioId"=>$servicioAdicionalAnterior->getId(),"estado"=>"Activo"));

                                            //buscar scopes
                                            $arrayScopeOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                  ->getScopePorIpFija($ipFija->getIp(), $servicioTecnicoAnterior->getElementoId());

                                            if (!$arrayScopeOlt)
                                            { 
                                                $arrayFinal[] = array('status'        => "ERROR", 
                                                                      'flagTipoOrden' => -1,
                                                                      'mensaje'       => "Ip Fija Adicional no pertenece a un Scope! <br>"
                                                                                                  . "Favor Comunicarse con el Dep. Gepon!");
                                                return $arrayFinal;
                                            }

                                            $scopeAdicional = $arrayScopeOlt['NOMBRE_SCOPE'];
                                        }
                                        else
                                        {
                                            $scopeAdicional = $spcScopeAdi->getValor();
                                        }                          
                                    }

                                    $nombreTipoNegocioPlan = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();

                                    if ($nombreTipoNegocioPlan == 'PRO')
                                    {
                                        $strEsAdicional = "NO";
                                    }
                                    else
                                    {
                                        $strEsAdicional = "SI";
                                    }

                                    $arrParametrosCancel = array(
                                                                    'servicioTecnico'   => $servicioTecnicoAnterior,
                                                                    'modeloElemento'    => $elementoAnterior->getModeloElementoId(),
                                                                    'interfaceElemento' => $interfaceElementoAnterior,
                                                                    'producto'          => $producto,
                                                                    'servicio'          => $servicioAdicionalAnterior,
                                                                    'spcMac'            => $spcMacAdicional,
                                                                    'scope'             => $scopeAdicional,
                                                                    'spcIndiceCliente'  => $spcIndiceCliente,
                                                                    'esAdicional'       => $strEsAdicional
                                                                );

                                    //desconfigurar la ip adicional
                                    $respuestaArrayAdicional = $this->cancelarServicio->cancelarServicioIp($arrParametrosCancel);
                                    $statusAdicional = $respuestaArrayAdicional[0]['status'];

                                    if($statusAdicional=="ERROR")
                                    {
                                        $arrayFinal[] = array('status'        => "ERROR", 
                                                              'flagTipoOrden' => -1,
                                                              'mensaje'       => $respuestaArrayAdicional[0]['mensaje']);
                                        return $arrayFinal;
                                    }
                                    else
                                    {
                                        if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "MA5608T")
                                        {
                                            //eliminar (base) ip adicional logicamente
                                            $ipAdicional = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                                   ->findOneBy(array("servicioId"   => $servicioAdicionalAnterior->getId(),
                                                                                                     "estado"       => "Activo"));
                                            if($ipAdicional)
                                            {
                                                $ipAdicional->setEstado("Eliminado");
                                                $this->emInfraestructura->persist($ipAdicional);
                                                $this->emInfraestructura->flush();
                                            }  
                                        }
                                    }

                                    //trasladar servicio adicional anterior
                                    $servicioAdicionalAnterior->setEstado("Trasladado");
                                    $this->emComercial->persist($servicioAdicionalAnterior);
                                    $this->emComercial->flush();
                                }//while(true)
                            }//if($flagIpAdicional > 0)
                        }//if($flagElemento == 1)

                        if($flagElemento == 0 && $flagInterface == 1)//mismo elemento, diferentes puertos -> cancelacion internet
                        {
                            $spcIndiceCliente = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "INDICE CLIENTE", $producto);
                            $spcSpid = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SPID", $producto);
                            $spcMacOnt = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", $producto);

                            if($elementoAnterior->getModeloElementoId()->getNombreModeloElemento() == "MA5608T")
                            {

                                //obtener caracteristica service-profile
                                $spcServiceProf = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SERVICE-PROFILE", $producto);
                                if(!$spcServiceProf)
                                {
                                    $elementoClienteAnterior = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                                    ->find($servicioTecnicoAnterior->getElementoClienteId());
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica($servicio, $producto, "SERVICE-PROFILE",
                                                                                  $elementoClienteAnterior->getModeloElementoId()->getNombreModeloElemento(),
                                                                                  $usrCreacion);
                                }
                                else
                                {
                                    $this->servicioGeneral
                                         ->ingresarServicioProductoCaracteristica($servicio, $producto, "SERVICE-PROFILE",
                                                                                  $spcServiceProf->getValor(), $usrCreacion);
                                }
                            }

                            $arrCancelarServicioAnterior = array(
                                                                    'servicioTecnico'   => $servicioTecnicoAnterior,
                                                                    'interfaceElemento' => $interfaceElementoAnterior,
                                                                    'login'             => $servicio->getPuntoId()->getLogin(),
                                                                    'modeloElemento'    => $elementoAnterior->getModeloElementoId(),
                                                                    'spcIndiceCliente'  => $spcIndiceCliente,
                                                                    'spcSpid'           => $spcSpid,
                                                                    'spcMacOnt'         => $spcMacOnt
                                                                );
                            $arrResultadoCancel = $this->cancelarServicio->cancelarServicioMdSinIp($arrCancelarServicioAnterior);
                        }
                    }//if($ultimaMilla->getNombreTipoMedio() == "Fibra Optica")
                    else if($ultimaMilla->getNombreTipoMedio() == "Cobre" || $ultimaMilla->getNombreTipoMedio() == "Radio")
                    {
                        $reqAprovisionamiento = $elementoAnterior->getModeloElementoId()->getReqAprovisionamiento();

                        if($reqAprovisionamiento == "SI")
                        {
                            $arrCancelarServicioAnterior = array(
                                                                    'servicio'          => $servicioAnterior,
                                                                    'interfaceElemento' => $interfaceElementoAnterior,
                                                                    'modeloElemento'    => $elementoAnterior->getModeloElementoId(),
                                                                    'producto'          => $producto
                                                                );

                            $arrResultadoCancel = $this->cancelarServicio->cancelarServicioScriptTtco($arrCancelarServicioAnterior);
                        }
                    }//else if($ultimaMilla->getNombreTipoMedio() == "Cobre" || $ultimaMilla->getNombreTipoMedio() == "Radio")
                    else
                    {
                        $respuesta[] = array('status' => "ERROR", 'flagTipoOrden' => -1, 'mensaje' => "Tipo Medio no tiene aprovisionamiento!");
                        return $respuesta;
                    }

                    $status  = $arrResultadoCancel[0]['status'];
                    $mensaje = $arrResultadoCancel[0]['mensaje'];
                    if ($status == "OK")
                    {
                         $this->servicioGeneral->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                         $producto, 
                                                                                         "CANCELACION TELLION", 
                                                                                         "SI", 
                                                                                         $usrCreacion );
                    }
                }
            }
            else
            {
                //MISMOS RECURSOS
                $flagTipoOrden  = 2;
                $status         = "OK";

                //obtener modelo elemento
                $elemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());

                //guardar ont en servicio tecnico, el mismo ont del servicio anterior
                $servicioTecnico->setElementoClienteId($servicioTecnicoAnterior->getElementoClienteId());
                $servicioTecnico->setInterfaceElementoClienteId($servicioTecnicoAnterior->getInterfaceElementoClienteId());
                $this->emComercial->persist($servicioTecnico);
                $this->emComercial->flush();

                if($ultimaMilla->getNombreTipoMedio()=="Fibra Optica")
                {
                    $servProdCaractMacOnt   = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC ONT", $producto);
                    $servProdCaractMacWifi  = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC WIFI", $producto);
                    $servProdCaractIndice   = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "INDICE CLIENTE", $producto);

                    if($servProdCaractIndice)
                    {
                        //servicio prod caract indice cliente
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "INDICE CLIENTE",
                                                                                       $servProdCaractIndice->getValor(), $usrCreacion);
                    }

                    if($servProdCaractMacOnt)
                    {
                        //servicio prod caract mac ont
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC ONT",
                                                                                       $servProdCaractMacOnt->getValor(), $usrCreacion);
                    }

                    if($servProdCaractMacWifi)
                    {
                        //servicio prod caract mac wifi
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC WIFI",
                                                                                       $servProdCaractMacWifi->getValor(), $usrCreacion);
                    }

                    /*CARACTERISTICAS PARA HUAWEI*/
                    if($elemento->getModeloElementoId()->getNombreModeloElemento()=="MA5608T")
                    {
                        $spcSpid         = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SPID", $producto);
                        $spcScope        = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SCOPE", $producto);

                        if($spcSpid)
                        {
                            //servicio prod caract spid
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SPID",
                                                                                           $spcSpid->getValor(), $usrCreacion);
                        }

                        if($spcScope)
                        {
                            //servicio prod caract scope
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SCOPE",
                                                                                           $spcScope->getValor(), $usrCreacion);
                        }
                    }//if($elemento->getModeloElementoId()->getNombreModeloElemento()=="MA5608T")
                }//if($ultimaMilla->getNombreTipoMedio()=="Fibra Optica")
                else if($ultimaMilla->getNombreTipoMedio()=="Cobre" || $ultimaMilla->getNombreTipoMedio()=="Radio")
                {
                    $servProdCaractMac  = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MAC", $producto);

                    if($servProdCaractMac)
                    {
                        //servicio prod caract mac
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC",
                                                                                       $servProdCaractMac->getValor(), $usrCreacion);
                    }
                }//else if($ultimaMilla->getNombreTipoMedio()=="Cobre" || $ultimaMilla->getNombreTipoMedio()=="Radio")
                else
                {
                    $respuesta[] = array('status' => "ERROR", 'flagTipoOrden' => -1, 'mensaje' => "Tipo Medio no tiene aprovisionamiento!");
                    return $respuesta;
                }

                $servProdCaractSsid     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "SSID", $producto);
                $servProdCaractPassword = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "PASSWORD SSID", $producto);
                $servProdCaractNumPc    = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "NUMERO PC", $producto);
                $servProdCaractModo     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioAnterior, "MODO OPERACION", $producto);

                /*CARACTERISTICAS DEL CLIENTE*/
                if($servProdCaractSsid)
                {
                    //servicio prod caract ssid
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "SSID",
                                                                                   $servProdCaractSsid->getValor(), $usrCreacion);
                }

                if($servProdCaractPassword)
                {
                    //servicio prod caract password ssid
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "PASSWORD SSID",
                                                                                   $servProdCaractPassword->getValor(), $usrCreacion);
                }

                if($servProdCaractNumPc){
                    //servicio prod caract numero pc
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "NUMERO PC",
                                                                                   $servProdCaractNumPc->getValor(), $usrCreacion);
                }

                if($servProdCaractModo)
                {
                    //servicio prod caract modo operacion
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MODO OPERACION",
                                                                                   $servProdCaractModo->getValor(), $usrCreacion);
                }
            }
        }//else
        
        $respuesta[] = array('status' => $status, 'flagTipoOrden' => $flagTipoOrden, 'mensaje' => $mensaje);
        
        return $respuesta;
    }
  
    /**
     * Funcion que llama a los  scripts para
     * obtener el indice, activar el cliente y activar la
     * ip del plan.
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @verion 1.1 27-03-2015
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @verion 1.2 16-06-2016   Se agrega esquema de reintentos para procesos de activaciones de servicios HW
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @verion 1.3 24-06-2016   Se agregan validaciones de configuraciones de clientes activados de manera incompleta 
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.4 22-02-2021  Se agregan validaciones para saber si el servicio tiene tipo de Ip Privada
     * 
     * @param InfoServicio              $servicio
     * @param InfoServicioTecnico       $servicioTecnico
     * @param AdmiProducto              $producto
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param AdmiModeloElemento        $modeloElemento
     * @param String                    $macOnt
     * @param String                    $macWifi
     * @param String                    $perfil
     * @param String                    $login
     * @param String                    $usrCreacion
     * 
     * @since 1.0
     * 
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     */
    public function activarClienteMdConIp($arrayParametros)
    {
        $servicio               = $arrayParametros['servicio'];
        $servicioTecnico        = $arrayParametros['servicioTecnico'];
        $interfaceElemento      = $arrayParametros['interfaceElemento'];
        $producto               = $arrayParametros['producto'];
        $modeloElemento         = $arrayParametros['modeloElemento'];
        $macOnt                 = $arrayParametros['macOnt'];
        $macWifi                = $arrayParametros['macWifi'];
        $perfil                 = $arrayParametros['perfil'];
        $login                  = $arrayParametros['login'];
        $ontLineProfile         = $arrayParametros['ontLineProfile'];
        $serviceProfile         = $arrayParametros['serviceProfile'];
        $serieOnt               = $arrayParametros['serieOnt'];
        $vlan                   = $arrayParametros['vlan'];
        $gemPort                = $arrayParametros['gemPort'];
        $trafficTable           = $arrayParametros['trafficTable'];
        $usrCreacion            = $arrayParametros['usrCreacion'];
        $boolClienteConfigurado = false;
        try{
            $strTipoIp = 'FIJA';
        
            //Obtiene tipo de ip por el servicio (PRIVADA)
            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId"  =>  $servicioTecnico->getServicioId()->getId(),
                                                                  "tipoIp"      =>  "PRIVADA",
                                                                  "estado"      =>  "Reservada"));
            if (is_object($objTipoIp))
            {
                $strTipoIp = $objTipoIp->getTipoIp();
            }

            //obtener ips fijas q tiene el servicio
            $ipsFijas = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                ->findBy(array("servicioId" => $servicioTecnico->getServicioId()->getId(),
                                               "tipoIp"     => $strTipoIp,
                                               "estado"     => "Reservada"));
            
            //obtener objeto modelo cnr
            $modeloElementoCnr = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                      ->findOneBy(array("nombreModeloElemento"  => "CNR UCS C220",
                                                        "estado"                => "Activo"));

            //obtener elemento cnr
            $elementoCnr = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                      ->findOneBy(array("modeloElementoId"=>$modeloElementoCnr->getId()));
          
            //validar que exista registros
            if(count($ipsFijas)==0)
            {
                $respuestaArray[] = array('status'  => 'ERROR',
                                          'mensaje' => 'No existe registro de Ip Fija para configurar, Favor Comunicarse con Sistemas');
                return $respuestaArray;
            }
          
            //validar que la ip no sea null
            if($ipsFijas[0]->getIp()==null || $ipsFijas[0]->getIp()=="")
            {
                $respuestaArray[] = array('status'  => 'ERROR',
                                          'mensaje' => 'Registro de Ip Fija se encuentra en null, Favor Comunicarse con Sistemas!');
                return $respuestaArray;
            }
          
            //*OBTENER SCRIPT PARA ACTIVACION DE INTERNET------------------------------------------------*/
            $scriptArray = $this->servicioGeneral->obtenerArregloScript("activarCliente",$modeloElemento);
            $idDocumento= $scriptArray[0]->idDocumento;
            $usuario= $scriptArray[0]->usuario;
            $protocolo= $scriptArray[0]->protocolo;
            //*----------------------------------------------------------------------*/
          
            if($idDocumento==0)
            {
                $respuestaArray[] = array('status'=>'ERROR', 'mensaje'=>'NO EXISTE TAREA');
                return $respuestaArray;
            }
            $strMarcaOlt    = $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
            //if($modeloElemento->getNombreModeloElemento()=="MA5608T")
            if($strMarcaOlt == "HUAWEI")
            {
                //*OBTENER SCRIPT ONT ID HUAWEI--------------------------------------------------------*/
                $scriptArrayOntId   = $this->servicioGeneral->obtenerArregloScript("obtenerOntId",$modeloElemento);
                $idDocumentoOntId   = $scriptArrayOntId[0]->idDocumento;
                $usuario            = $scriptArrayOntId[0]->usuario;
                //*----------------------------------------------------------------------*/
                
                //obtener descripcion
                $descripcion = $login;
                
                //verificar si el equipo esta ocupado
                $resultadoJsonOltOcupado = $this->servicioGeneral
                                                ->ejecutarComandoPersonalizadoMdDatos($servicioTecnico->getElementoId(), $usuario,
                                                                                      "datos", 0, "verificarOltOcupado");
                $statusOcupado = $resultadoJsonOltOcupado->status;
              
                if($statusOcupado!="OK")
                {
                    $respuestaFinal[] = array('status'=>$statusOcupado, 'mensaje'=>$resultadoJsonOltOcupado->mensaje);
                    return $respuestaFinal;
                }
                              
                //dividir interface para obtener tarjeta y puerto pon
                list($tarjeta, $puertoPon) = split('/',$interfaceElemento->getNombreInterfaceElemento());
              
                //verificar que serial exista en el puerto pon correcto
                $resultadoJsonSerial = $this->obtenerDatosPorAccion($servicioTecnico, $usuario, $serieOnt, 0, "verificarSerialOnt");
                $statusSerial = $resultadoJsonSerial->status;
              
                if($statusSerial=="OK")
                {
                    $fsp = $resultadoJsonSerial->mensaje;
                    list($frame1, $tarjeta1, $puertoPon1) = split('/',$fsp);

                    if($tarjeta!=$tarjeta1 || $puertoPon!=$puertoPon1)
                    {                      
                        $respuestaFinal[] = array('status'=>"ERROR", 'mensaje'=>"Serial no se encuentra en el Puerto Pon Correcto");
                        return $respuestaFinal;
                    }
                }
                else
                {
                    //se agrega validación para verificar que ya existe agregado la serie al login correspondiente y recuperar el Ont Id del cliente
                    $datos = $serieOnt.",".$descripcion;
                    //obtener ont id
                    $resultadoJsonOntIdConf = $this->obtenerDatosPorAccion( $servicioTecnico, 
                                                                            $usuario, 
                                                                            $datos, 
                                                                            $idDocumentoOntId, 
                                                                            "verificarSerialOntConfigurado" );
                    $statusOntIdConf    = $resultadoJsonOntIdConf->status;
                    $resultadoJsonOntId = $resultadoJsonOntIdConf;
                    if($statusOntIdConf!="OK")
                    {
                        $respuestaFinal[] = array('status'=>$statusOntIdConf, 'mensaje'=>$resultadoJsonOntIdConf->mensaje);
                        return $respuestaFinal;
                    }
                }
              
                if ($statusOntIdConf != "OK")
                {
                    //juntar variables en datos
                    $datos = $tarjeta.",".$puertoPon.",".$serieOnt.",".$ontLineProfile.",".$serviceProfile.",".$descripcion;

                    //obtener ont id
                    $resultadoJsonOntId = $this->obtenerDatosPorAccion($servicioTecnico, $usuario, $datos, $idDocumentoOntId, "obtenerIdCliente");
                    $statusOntId = $resultadoJsonOntId->status;

                    if($statusOntId!="OK")
                    {
                        $respuestaFinal[] = array('status'=>$statusOntId, 'mensaje'=>$resultadoJsonOntId->mensaje);
                        return $respuestaFinal;
                    }
                }
                
                //VALIDACION DE SERVICE PORT PREVIA CONFIGURACIÓN
              
                //se agrega validación para verificar que ya existe configurado el Service Port del cliente
                $datos = $tarjeta.",".$puertoPon.",".$resultadoJsonOntId->mensaje;

                $resultadoJsonSpIdConf = $this->obtenerDatosPorAccion( $servicioTecnico, 
                                                                       $usuario, 
                                                                       $datos, 
                                                                       $idDocumentoOntId, 
                                                                       "verificarServicePortConfigurado" );
                $statusSpIdConf = $resultadoJsonSpIdConf->status;

                if($statusSpIdConf == "OK")
                {
                    $boolClienteConfigurado = true;
                }

                $idClienteElemento = $resultadoJsonOntId->mensaje;
                //activar servicio en olt
                if(intval($idClienteElemento)>=0 && intval($idClienteElemento)<=128)
                {
                    if ($boolClienteConfigurado == false)
                    {
                        $arrayDatosActivacion=array(
                                                    'servicioTecnico'   => $servicioTecnico,
                                                    'tarjeta'           => $tarjeta,
                                                    'puertoPon'         => $puertoPon,
                                                    'ontId'             => $idClienteElemento,
                                                    'vlan'              => $vlan,
                                                    'gemPort'           => $gemPort,
                                                    'trafficTable'      => $trafficTable,
                                                    'idDocumento'       => $idDocumento,
                                                    'usuario'           => $usuario,
                                                    'protocolo'         => $protocolo
                                                    );

                        //esquema de reintentos en activación de servicios HW por problemas en concurrencia
                        for ($i = 1; $i < $this->intCantidadIntentos; $i++) 
                        {
                            $resultadJson = $this->activarClienteOltHuawei($arrayDatosActivacion);    
                            $status = $resultadJson->status;
                            if($status!="OK")
                            {
                                //esperamos N segundos parametrizados para lanzar la activación nuevamente
                                sleep($this->intSegundosSleep);
                            }
                            else
                            {
                                //si la activación finalizo correctamente se finaliza la activación
                                break;
                            }
                        }

                        if($status!="OK")
                        {
                            //eliminar ont
                            //*OBTENER SCRIPT ELIMINAR ONT ID HUAWEI--------------------------------------------------------*/
                            $scriptArrayOntId   = $this->servicioGeneral->obtenerArregloScript("eliminarOntId",$modeloElemento);
                            $idDocumentoOntId   = $scriptArrayOntId[0]->idDocumento;
                            $usuario            = $scriptArrayOntId[0]->usuario;
                            //*----------------------------------------------------------------------*/

                            $arrayDatosEliminar =array(
                                                    'servicioTecnico'   => $servicioTecnico,
                                                    'tarjeta'           => $tarjeta,
                                                    'puertoPon'         => $puertoPon,
                                                    'ontId'             => $idClienteElemento,
                                                    'idDocumento'       => $idDocumento,
                                                    'usuario'           => $usuario,
                                                    'protocolo'         => $protocolo
                                                    );
                            $resultadoJsonEliminarOntId = $this->eliminarOntIdHuawei($arrayDatosEliminar);
                            $statusEliminarOntId        = $resultadoJsonEliminarOntId->status;

                            if($statusEliminarOntId!="OK")
                            {
                                $mensaje = $mensaje." <br> Error Eliminar Ont:". $resultadoJsonEliminarOntId->mensaje;
                            }

                            $mensaje = $mensaje." <br> Error Activar Service Port:".$resultadJson->mensaje;
                            $mensaje = $mensaje." <br> Favor volver Intentar!!!";

                            throw new \Exception($mensaje);
                        }
                    }
                    else
                    {
                        $status  = "OK";
                        $mensaje = "OK";
                    }
                  
                    $mensaje = $idClienteElemento;
                    
                    //ejecutar script para control de ancho de banda en el olt
                    //*OBTENER SCRIPT CONTROL ANCHO DE BANDA HUAWEI--------------------------------------------------------*/
                    $scriptArrayControlId   = $this->servicioGeneral->obtenerArregloScript("controlAnchoBanda",$modeloElemento);
                    $idDocumentoControlId   = $scriptArrayControlId[0]->idDocumento;
                    $usuarioControl         = $scriptArrayControlId[0]->usuario;
                    $protocoloControl       = $scriptArrayControlId[0]->protocolo;
                    //*----------------------------------------------------------------------------------------------------*/

                    $arrayDatosControl = array  (
                                                    'tarjeta'           => $tarjeta,
                                                    'puertoPon'         => $puertoPon,
                                                    'ontId'             => $idClienteElemento,
                                                    'trafficTable'      => $trafficTable,
                                                    'idDocumento'       => $idDocumentoControlId,
                                                    'usuario'           => $usuarioControl,
                                                    'protocolo'         => $protocoloControl,
                                                    'servicioTecnico'   => $servicioTecnico
                                                );

                    $this->controlAnchoBandaHuawei($arrayDatosControl);
                    
                    //*OBTENER SCRIPT--------------------------------------------------------*/
                    $scriptArray = $this->servicioGeneral->obtenerArregloScript("configurarIpFija",$modeloElementoCnr);
                    $idDocumentoConfig= $scriptArray[0]->idDocumento;
                    $usuarioConfig= $scriptArray[0]->usuario;
                    $protocoloConfig= $scriptArray[0]->protocolo;
                    //*----------------------------------------------------------------------*/
                  
                    //cambiar formato de mac
                    $macOntNueva = $this->cambiarMac($macOnt);
                  
                    //activar ip fija
                    $arrayParametrosIpFija = array(
                                                    'ipFija'            => $ipsFijas[0]->getIp(),
                                                    'macOnt'            => $macOntNueva,
                                                    'idDocumento'       => $idDocumentoConfig,
                                                    'usuario'           => $usuarioConfig,
                                                    'elementoCnr'       => $elementoCnr
                                                  );
                    $resultadJsonIpFija = $this->configurarIpFijaHuawei($arrayParametrosIpFija);
                    $statusIpFija = $resultadJsonIpFija->status;
                  
                    if($statusIpFija!="OK")
                    {
                        $mensajeIpFija = $resultadJsonIpFija->mensaje;
                        throw new \Exception($mensajeIpFija);
                    }
                  
                    $respuestaFinal[] = array('status'=>$status, 'mensaje'=>$mensaje);
                    return $respuestaFinal;
                }
                else
                {
                    $respuestaFinal[] = array('status'=>'ERROR',
                                              'mensaje'=>'Error, Olt devolvio un Ont Id fuera del rango!, <br>'
                                                       . 'Favor volver a intentar!');
                    return $respuestaFinal;
                }
            }
            else if($modeloElemento->getNombreModeloElemento()=="EP-3116")
            {
                //*OBTENER SCRIPT PARA OBTENER POOL PARA IP FIJA-----------------------------------------------------*/
                $scriptArray = $this->servicioGeneral->obtenerArregloScript("obtenerPoolParaIpFija",$modeloElemento);
                $idDocumentoPool= $scriptArray[0]->idDocumento;
                $usuario= $scriptArray[0]->usuario;
                $protocolo= $scriptArray[0]->protocolo;
                //*----------------------------------------------------------------------*/
                $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '".
                               $this->host."' 'verificarIpConfigurada' '".$servicioTecnico->getElementoId()."' '".
                               $usuario."' '".$protocolo."' '".$idDocumentoPool."' '".$ipsFijas[0]->getIp()."' '".
                               $this->pathParameters."'";

                $salida= shell_exec($comando);
                $pos = strpos($salida, "{");
                $jsonObj= substr($salida, $pos);
                $resultadJsonPerfil = json_decode($jsonObj);

                $status = $resultadJsonPerfil->status;
                $macIpConf = $resultadJsonPerfil->mensaje;
                if($status=="ERROR")
                {
                    $olt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());
                    $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'Ip: <b>'.$ipsFijas[0]->getIp().
                                                                '</b> ya se encuentra configurada en <b>'.$olt->getNombreElemento().
                                                                '</b> con la mac <b>'.$macIpConf.
                                                                '</b>. Favor notificar a Sistemas.');
                    return $respuestaFinal;
                }

                //*OBTENER SCRIPT MAC ONT--------------------------------------------------------*/
                $scriptArrayMacOnt = $this->servicioGeneral->obtenerArregloScript("obtenerSubscriberMacPuerto",$modeloElemento);
                $idDocumentoMacOnt= $scriptArrayMacOnt[0]->idDocumento;
                //*----------------------------------------------------------------------*/

                //obtenemos indice cliente
                $resultadoJsonIndice = $this->verificarMacOnt($servicioTecnico, $interfaceElemento, $macOnt, $idDocumentoMacOnt);
                $statusIndice = $resultadoJsonIndice->status;
                if($statusIndice=="ERROR")
                {
                    $respuestaFinal[] = array('status'=>$statusIndice, 'mensaje'=>$resultadoJsonIndice->mensaje);
                    return $respuestaFinal;
                }

                $idClienteElemento = $resultadoJsonIndice->mensaje;

                if(intval($idClienteElemento)>0 && intval($idClienteElemento)<65){
                    //ejecutar script de activacion
                    $resultadJson = $this->activarClienteOlt($interfaceElemento, $idClienteElemento, $macOnt, $perfil, $login, $idDocumento,
                                                             $usuario, $protocolo, $servicioTecnico);
                    $status = $resultadJson->status;
                    if($status=="OK")
                    {
                        $mensaje = $idClienteElemento;
                        
                        //consultar si el olt tiene aprovisionamiento de ips en el CNR
                        $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                      ->findOneBy(array('detalleNombre' =>'APROVISIONAMIENTO_IP',
                                                                                        'detalleValor' =>'CNR',
                                                                                        'elementoId' => $interfaceElemento->getElementoId()->getId()));

                        if ($objDetalleElemento)
                        {
                            
                        
                            $parametrosActivaIp = array('ipFija'              => $ipsFijas[0]->getIp(),
                                                        'modeloElementoCnr'   => $modeloElementoCnr,
                                                        'elementoCnr'         => $elementoCnr,
                                                        'mac'                 => $macWifi);

                            $resultadJsonIpFija = $this->activarIpFijaCnr($parametrosActivaIp);

                            $statusIp  = $resultadJsonIpFija[0]['status'];
                            if($statusIp != "OK")
                            {
                                $status = "ERROR";
                                $mensaje .= " Error al activar Ip" . $resultadJsonIpFija[0]['mensaje'];
                                $arrayFinal[] = array('status' => $status, 'mensaje' => $mensaje);
                                return $arrayFinal;
                            }
                            
                        }
                        else
                        {
                             //configurar Ip fija
                            //*OBTENER SCRIPT--------------------------------------------------------*/
                            $scriptArray = $this->servicioGeneral->obtenerArregloScript("obtenerVlanParaIpFija",$modeloElemento);
                            $idDocumentoVlan= $scriptArray[0]->idDocumento;
                            $usuario= $scriptArray[0]->usuario;
                            $protocolo= $scriptArray[0]->protocolo;
                            //*----------------------------------------------------------------------*/
                            $resultadJsonVlan = $this->getVlanParaIpFija($servicioTecnico, $usuario, $interfaceElemento,
                                                                         $perfil, $idDocumentoVlan);
                            $statusVlan = $resultadJsonVlan->status;
                            if($statusVlan=="OK"){
                                $vlan = $resultadJsonVlan->mensaje;

                                //*OBTENER SCRIPT--------------------------------------------------------*/
                                $scriptArray = $this->servicioGeneral->obtenerArregloScript("obtenerPoolParaIpFija",$modeloElemento);
                                $idDocumentoPool= $scriptArray[0]->idDocumento;
                                $usuario= $scriptArray[0]->usuario;
                                $protocolo= $scriptArray[0]->protocolo;
                                //*----------------------------------------------------------------------*/
                                $resultadJsonPool = $this->getPoolParaIpFija($servicioTecnico, $usuario, $interfaceElemento, $vlan,
                                                                             $idDocumentoPool);
                                $statusPool = $resultadJsonPool->status;
                                $pool = $resultadJsonPool->mensaje;
                                if($statusPool=="OK" && $pool!=""){
                                    //cambiar formato de mac
                                    $macWifiNueva = $this->cambiarMac($macWifi);

                                    //servicio prod caract pool ip
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "POOL IP",
                                                                                                   $pool, $usrCreacion);

                                    //*OBTENER SCRIPT--------------------------------------------------------*/
                                    $scriptArray = $this->servicioGeneral->obtenerArregloScript("configurarIpFija",$modeloElemento);
                                    $idDocumentoConfig= $scriptArray[0]->idDocumento;
                                    $usuarioConfig= $scriptArray[0]->usuario;
                                    $protocoloConfig= $scriptArray[0]->protocolo;
                                    //*----------------------------------------------------------------------*/

                                    for($i=0;$i<count($ipsFijas);$i++){
                                        $ipFija = $ipsFijas[$i];
                                        $resultadJsonIp = $this->configurarIpFija($servicioTecnico, $usuario, $pool, $ipFija->getIp(),
                                                                                  $macWifiNueva, $idDocumentoConfig);
                                        $status = $resultadJsonIp->status;
                                        if($status=="ERROR"){
                                            //*OBTENER SCRIPT--------------------------------------------------------*/
                                            $scriptArray = $this->servicioGeneral->obtenerArregloScript("cancelarCliente",$modeloElemento);
                                            $idDocumentoCancel= $scriptArray[0]->idDocumento;
                                            $usuarioConfig= $scriptArray[0]->usuario;
                                            $protocoloConfig= $scriptArray[0]->protocolo;
                                            //*----------------------------------------------------------------------*/
                                            $this->cancelarServicioOlt($interfaceElemento, $idClienteElemento, $servicioTecnico,
                                                                       $idDocumentoCancel, $login);

                                            $respuestaFinal[] = array('status'=>'ERROR',
                                                                      'mensaje'=>'No pudo configurar la ip: <b>'.$ipFija->getIp().'</b>, <br>'
                                                                    . 'Favor notificar al Dep. de Gepon');
                                            return $respuestaFinal;
                                        }
                                    }
                                }
                                else{
                                    //*OBTENER SCRIPT--------------------------------------------------------*/
                                    $scriptArray = $this->servicioGeneral->obtenerArregloScript("cancelarCliente",$modeloElemento);
                                    $idDocumentoCancel= $scriptArray[0]->idDocumento;
                                    $usuarioConfig= $scriptArray[0]->usuario;
                                    $protocoloConfig= $scriptArray[0]->protocolo;
                                    //*----------------------------------------------------------------------*/
                                    $this->cancelarServicioOlt($interfaceElemento, $idClienteElemento, $servicioTecnico,
                                                               $idDocumentoCancel, $login);

                                    $respuestaFinal[] = array('status'=>'ERROR',
                                                          'mensaje'=>'No existe Pool configurado para la vlan: <b>'.$vlan.'</b>, <br>'
                                                        . 'con perfil: <b>'.$perfil.'</b>,<br>'
                                                        . 'Favor notificar al Dep. de Gepon');
                                    return $respuestaFinal;
                                }
                            }
                            else{
                                //*OBTENER SCRIPT--------------------------------------------------------*/
                                $scriptArray = $this->servicioGeneral->obtenerArregloScript("cancelarCliente",$modeloElemento);
                                $idDocumentoCancel= $scriptArray[0]->idDocumento;
                                $usuarioConfig= $scriptArray[0]->usuario;
                                $protocoloConfig= $scriptArray[0]->protocolo;
                                //*----------------------------------------------------------------------*/
                                $this->cancelarServicioOlt($interfaceElemento, $idClienteElemento, $servicioTecnico, $idDocumentoCancel, $login);

                                $respuestaFinal[] = array('status'=>'ERROR',
                                                          'mensaje'=>'No existe Vlan configurada para el perfil: <b>'.$perfil.'</b>, <br>'
                                                        . 'Favor notificar al Dep. de Gepon');
                                return $respuestaFinal;
                            }                        
                        }
                    }
                    else{
                        $mensaje = $resultadJson->mensaje;
                    }

                    $respuestaFinal[] = array('status'=>$status, 'mensaje'=>$mensaje);
                    return $respuestaFinal;
                }
                else{
                    $respuestaFinal[] = array('status'=>'ERROR',
                                              'mensaje'=>'Error al obtener el indice del cliente, en el olt!, <br>'
                                                       . 'Favor volver a intentar!');
                    return $respuestaFinal;
                }
            }
        }
        catch (\Exception $e)
        {
            $status="ERROR";
            $mensaje = "ERROR:".$e->getMessage();
            $arrayFinal[] = array('status'=>"ERROR", 'mensaje'=>$mensaje);
            return $arrayFinal;
        }
    }
  
    /**
     * Funcion que llama a los  scripts para
     * obtener el indice, activar el cliente.
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @verion 1.0
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @verion 1.2 16-06-2016   Se agrega esquema de reintentos para procesos de activaciones de servicios HW 
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @verion 1.3 24-06-2016   Se agregan validaciones de configuraciones de clientes activados de manera incompleta 
     * 
     * @param InfoServicio              $servicio
     * @param InfoServicioTecnico       $servicioTecnico
     * @param AdmiProducto              $producto
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param AdmiModeloElemento        $modeloElemento
     * @param String                    $macOnt
     * @param String                    $macWifi
     * @param String                    $perfil
     * @param String                    $login
     * @param String                    $usrCreacion
     * 
     * @since 1.0
     * 
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     */
    public function activarClienteMdSinIp($arrayParametros){
        $servicioTecnico        = $arrayParametros['servicioTecnico'];
        $interfaceElemento      = $arrayParametros['interfaceElemento'];
        $modeloElemento         = $arrayParametros['modeloElemento'];
        $macOnt                 = $arrayParametros['macOnt'];
        $perfil                 = $arrayParametros['perfil'];
        $login                  = $arrayParametros['login'];
        $ontLineProfile         = $arrayParametros['ontLineProfile'];
        $serviceProfile         = $arrayParametros['serviceProfile'];
        $serieOnt               = $arrayParametros['serieOnt'];
        $vlan                   = $arrayParametros['vlan'];
        $gemPort                = $arrayParametros['gemPort'];
        $trafficTable           = $arrayParametros['trafficTable'];
        $boolClienteConfigurado = false;
        $strUsrCreacion         = $arrayParametros['usrCreacion'];
        $strClientIp            = $arrayParametros['ipCreacion'];
        $strOntId               = $arrayParametros['ontId'];
        $strModeloElementoOlt   = $arrayParametros['strModeloElementoOlt'];
        $strIpElementoOlt       = $arrayParametros['strIpElementoOlt'];
        $strServicePort         = $arrayParametros['service_port'];
        
        try{
            //*OBTENER SCRIPT--------------------------------------------------------*/
            $scriptArray = $this->servicioGeneral->obtenerArregloScript("activarCliente",$modeloElemento);
            $idDocumento= $scriptArray[0]->idDocumento;
            $usuario= $scriptArray[0]->usuario;
            $protocolo= $scriptArray[0]->protocolo;
            //*----------------------------------------------------------------------*/

            if($idDocumento==0){
                $respuestaArray[] = array('status'=>'ERROR', 'mensaje'=>'NO EXISTE TAREA');
                return $respuestaArray;
            }
            $strMarcaOlt    = $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
            //if($modeloElemento->getNombreModeloElemento()=="MA5608T")
            if($strMarcaOlt == "HUAWEI")
            {
                //*OBTENER SCRIPT ONT ID HUAWEI--------------------------------------------------------*/
                $scriptArrayOntId   = $this->servicioGeneral->obtenerArregloScript("obtenerOntId",$modeloElemento);
                $idDocumentoOntId   = $scriptArrayOntId[0]->idDocumento;
                $usuario            = $scriptArrayOntId[0]->usuario;
                //*----------------------------------------------------------------------*/
                
                //obtener descripcion
                $descripcion = $login;

                //verificar si el equipo esta ocupado
                $resultadoJsonOltOcupado = $this->servicioGeneral
                                                ->ejecutarComandoPersonalizadoMdDatos($servicioTecnico->getElementoId(), $usuario,
                                                                                      "datos", 0, "verificarOltOcupado");
                $statusOcupado = $resultadoJsonOltOcupado->status;
              
                if($statusOcupado!="OK")
                {
                    $respuestaFinal[] = array('status'=>$statusOcupado, 'mensaje'=>$resultadoJsonOltOcupado->mensaje);
                    return $respuestaFinal;
                }

                //dividir interface para obtener tarjeta y puerto pon
                list($tarjeta, $puertoPon) = split('/',$interfaceElemento->getNombreInterfaceElemento());

                // cambiar verificarSerialOnt a llamada WS ONT_ENGANCHADO_LC
                //OBTENER NOMBRE CLIENTE
                $objPersona         = $servicioTecnico->getServicioId()->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();
                $strNombreCliente   = $objPersona->__toString();
                //OBTENER IDENTIFICACION
                $strIdentificacion      = $objPersona->getIdentificacionCliente();
                $arrayDatosONT          = array(
                                          'serial_ont'       => $serieOnt,
                                          'mac_ont'          => $macOnt,
                                          'nombre_olt'       => $strModeloElementoOlt,
                                          'ip_olt'           => $strIpElementoOlt,
                                          'modelo_olt'       => $modeloElemento->getNombreModeloElemento()
                                        );
                $arrayDatosMiddleware   = array(
                                          'datos'                 => $arrayDatosONT,
                                          'opcion'                => "ONT_ENGANCHADO_LC",
                                          'ejecutaComando'        => $this->ejecutaComando,
                                          'usrCreacion'           => $strUsrCreacion,
                                          'ipCreacion'            => $strClientIp,
                                        );

                $arrayRespuestaMiddleware   = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                $strStatusSerial               = $arrayRespuestaMiddleware['status'];
                $strMensajeMiddleware       = $arrayRespuestaMiddleware['mensaje'];
                $strOntIdNuevo              = "";
                if($strStatusSerial !== "OK")
                {
                    //verificar que serial exista en el puerto pon correcto
                    // cambiar a llamada WS VERIFICAR_ONT_LC
                    $arrayDatosONT          = array(
                                              'serial_ont'       => $serieOnt,
                                              'mac_ont'          => $macOnt,
                                              'nombre_olt'       => $strModeloElementoOlt,
                                              'ip_olt'           => $strIpElementoOlt,
                                              'puerto_olt'       => $interfaceElemento->getNombreInterfaceElemento(),
                                              'modelo_olt'       => $modeloElemento->getNombreModeloElemento(),
                                              'gemport'          => $gemPort,
                                              'estado_servicio'  => $servicioTecnico->getServicioId()->getEstado(),
                                              'service_profile'  => $serviceProfile,
                                              'line_profile'     => $ontLineProfile,
                                              'traffic_table'    => $trafficTable,
                                              'ont_id'           => $strOntId,
                                            );
                    $arrayDatosMiddleware   = array(
                                              'nombre_cliente'        => $strNombreCliente,
                                              'login'                 => $login,
                                              'identificacion'        => $strIdentificacion,
                                              'datos'                 => $arrayDatosONT,
                                              'opcion'                => "VERIFICAR_ONT_LC",
                                              'ejecutaComando'        => $this->ejecutaComando,
                                              'usrCreacion'           => $strUsrCreacion,
                                              'ipCreacion'            => $strClientIp,
                                            );
                    $arrayRespuestaMiddleware   = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                    $strStatusOntIdConf         = $arrayRespuestaMiddleware['status'];
                    $strMensajeMiddleware       = $arrayRespuestaMiddleware['mensaje'];
                    $strOntIdNuevo              = $arrayRespuestaMiddleware['ont_id'];
                    if($strStatusOntIdConf !== "OK")
                    {
                        $respuestaFinal[] = array('status'=>$strStatusOntIdConf, 'mensaje'=>$strMensajeMiddleware);
                        return $respuestaFinal;
                    }
                }

                if($strStatusOntIdConf !== "OK")
                {
                    // cambiar a llamada WS ACTIVAR_ONT_ID_LC
                    $arrayDatosONT        = array(
                                              'serial_ont'       => $serieOnt,
                                              'mac_ont'          => $macOnt,
                                              'nombre_olt'       => $strModeloElementoOlt,
                                              'ip_olt'           => $strIpElementoOlt,
                                              'puerto_olt'       => $interfaceElemento->getNombreInterfaceElemento(),
                                              'modelo_olt'       => $modeloElemento->getNombreModeloElemento(),
                                              'gemport'          => $gemPort,
                                              'estado_servicio'  => $servicioTecnico->getServicioId()->getEstado(),
                                              'service_profile'  => $serviceProfile,
                                              'line_profile'     => $ontLineProfile,
                                              'traffic_table'    => $trafficTable,
                                              'ont_id'           => $strOntId,
                                          );
                    $arrayDatosMiddleware   = array(
                                              'nombre_cliente'        => $strNombreCliente,
                                              'login'                 => $login,
                                              'identificacion'        => $strIdentificacion,
                                              'datos'                 => $arrayDatosONT,
                                              'opcion'                => "ACTIVAR_ONT_ID_LC",
                                              'ejecutaComando'        => $this->ejecutaComando,
                                              'usrCreacion'           => $strUsrCreacion,
                                              'ipCreacion'            => $strClientIp,
                                        );
                    $arrayJsonOntId             = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                    $strStatusMiddleware        = $arrayJsonOntId['status'];
                    $strMensajeMiddleware       = $arrayJsonOntId['mensaje'];
                    $strOntIdNuevo              = $arrayJsonOntId['ont_id'];
                    if($strStatusMiddleware !== "OK")
                    {
                        $respuestaFinal[] = array('status'=>$strStatusMiddleware, 'mensaje'=>$strMensajeMiddleware);
                        return $respuestaFinal;
                    }
                }

                $strOntId             = $strOntIdNuevo;
                //VALIDACION DE SERVICE PORT PREVIA CONFIGURACIÓN
                //se agrega validación para verificar que ya existe configurado el Service Port del cliente
                // cambiar a llamada WS SERVICE_PORT_LC
                $arrayDatosONT        = array(
                                              'serial_ont'       => $serieOnt,
                                              'mac_ont'          => $macOnt,
                                              'nombre_olt'       => $strModeloElementoOlt,
                                              'ip_olt'           => $strIpElementoOlt,
                                              'puerto_olt'       => $interfaceElemento->getNombreInterfaceElemento(),
                                              'modelo_olt'       => $modeloElemento->getNombreModeloElemento(),
                                              'gemport'          => $gemPort,
                                              'estado_servicio'  => $servicioTecnico->getServicioId()->getEstado(),
                                              'service_profile'  => $serviceProfile,
                                              'line_profile'     => $ontLineProfile,
                                              'traffic_table'    => $trafficTable,
                                              'ont_id'           => $strOntId,
                                              'service_port'     => $strServicePort
                                          );
                $arrayDatosMiddleware   = array(
                                              'nombre_cliente'        => $strNombreCliente,
                                              'login'                 => $login,
                                              'identificacion'        => $strIdentificacion,
                                              'datos'                 => $arrayDatosONT,
                                              'opcion'                => "SERVICE_PORT_LC",
                                              'ejecutaComando'        => $this->ejecutaComando,
                                              'usrCreacion'           => $strUsrCreacion,
                                              'ipCreacion'            => $strClientIp,
                                          );
                $arrayRespuestaMiddleware   = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                $strStatusSpIdConf          = $arrayRespuestaMiddleware['status'];
                $strMensajeMiddleware       = $arrayRespuestaMiddleware['mensaje'];

                if($strStatusSpIdConf == "OK")
                {
                    $boolClienteConfigurado = true;
                }

                //$idClienteElemento = $resultadoJsonOntId->mensaje;
                //activar servicio en olt
                if(intval($strOntId)>=0 && intval($strOntId)<=128)
                {
                    if ($boolClienteConfigurado == false)
                    {
                        // cambiar a llamada WS ACTIVAR_SERVICE_PORT_LC
                        $arrayDatosONT        = array(
                                                'serial_ont'       => $serieOnt,
                                                'mac_ont'          => $macOnt,
                                                'nombre_olt'       => $strModeloElementoOlt,
                                                'ip_olt'           => $strIpElementoOlt,
                                                'puerto_olt'       => $interfaceElemento->getNombreInterfaceElemento(),
                                                'modelo_olt'       => $modeloElemento->getNombreModeloElemento(),
                                                'gemport'          => $gemPort,
                                                'vlan'             => $vlan,
                                                'estado_servicio'  => $servicioTecnico->getServicioId()->getEstado(),
                                                'service_profile'  => $serviceProfile,
                                                'line_profile'     => $ontLineProfile,
                                                'traffic_table'    => $trafficTable,
                                                'ont_id'           => $strOntId,
                                                'service_port'     => $strServicePort
                                              );
                        $arrayDatosMiddleware   = array(
                                                'nombre_cliente'        => $strNombreCliente,
                                                'login'                 => $login,
                                                'identificacion'        => $strIdentificacion,
                                                'datos'                 => $arrayDatosONT,
                                                'opcion'                => "ACTIVAR_SERVICE_PORT_LC",
                                                'ejecutaComando'        => $this->ejecutaComando,
                                                'usrCreacion'           => $strUsrCreacion,
                                                'ipCreacion'            => $strClientIp,
                                              );

                        //esquema de reintentos en activación de servicios HW por problemas en concurrencia
                        for ($i = 1; $i < $this->intCantidadIntentos; $i++) 
                        {
                            $arrayRespuestaMiddleware   = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                            $strStatusActivar        = $arrayRespuestaMiddleware['status'];
                            $strMensajeActivar       = $arrayRespuestaMiddleware['mensaje'];

                            if($strStatusActivar!="OK")
                            {
                                //esperamos N segundos parametrizados para lanzar la activación nuevamente
                                sleep($this->intSegundosSleep);
                            }
                            else
                            {
                                //si la activación finalizo correctamente se finaliza la activación
                                break;
                            }
                        }

                        if($strStatusActivar != "OK")
                        {
                            //eliminar ont
                            //*OBTENER SCRIPT ELIMINAR ONT ID HUAWEI--------------------------------------------------------*/
                            $scriptArrayOntId   = $this->servicioGeneral->obtenerArregloScript("eliminarOntId",$modeloElemento);
                            $idDocumentoOntId   = $scriptArrayOntId[0]->idDocumento;
                            $usuario            = $scriptArrayOntId[0]->usuario;
                            //*----------------------------------------------------------------------*/

                            $arrayDatosEliminar =array(
                                                    'servicioTecnico'   => $servicioTecnico,
                                                    'tarjeta'           => $tarjeta,
                                                    'puertoPon'         => $puertoPon,
                                                    'ontId'             => $strOntId,
                                                    'idDocumento'       => $idDocumento,
                                                    'usuario'           => $usuario,
                                                    'protocolo'         => $protocolo
                                                    );
                            $resultadoJsonEliminarOntId = $this->eliminarOntIdHuawei($arrayDatosEliminar);
                            $statusEliminarOntId        = $resultadoJsonEliminarOntId->status;

                            if($statusEliminarOntId!="OK")
                            {
                                $mensaje = $mensaje." <br> Error Eliminar Ont:". $resultadoJsonEliminarOntId->mensaje;
                            }
                            $mensaje = $mensaje." <br> Error Activar Service Port:".$strMensajeActivar;
                            $mensaje = $mensaje." <br> Favor volver Intentar!!!";
                        }
                    }
                    else
                    {
                        $strStatusActivar  = "OK";
                        $strMensajeActivar = "OK";
                        $mensaje           = "OK";
                    }
                    if($strStatusActivar == "OK")
                    {
                        //ejecutar script para control de ancho de banda en el olt
                        //*OBTENER SCRIPT CONTROL ANCHO DE BANDA HUAWEI--------------------------------------------------------*/
                        $scriptArrayControlId   = $this->servicioGeneral->obtenerArregloScript("controlAnchoBanda",$modeloElemento);
                        $idDocumentoControlId   = $scriptArrayControlId[0]->idDocumento;
                        $usuarioControl         = $scriptArrayControlId[0]->usuario;
                        $protocoloControl       = $scriptArrayControlId[0]->protocolo;
                        //*----------------------------------------------------------------------------------------------------*/

                        $arrayDatosControl = array  (
                                                        'tarjeta'           => $tarjeta,
                                                        'puertoPon'        => $puertoPon,
                                                        'ontId'             => $strOntId,
                                                        'trafficTable'      => $trafficTable,
                                                        'idDocumento'       => $idDocumentoControlId,
                                                        'usuario'           => $usuarioControl,
                                                        'protocolo'         => $protocoloControl,
                                                        'servicioTecnico'   => $servicioTecnico
                                                    );

                        $this->controlAnchoBandaHuawei($arrayDatosControl);
                    }
                    $respuestaFinal[] = array('status'=>$strStatusActivar, 'mensaje'=>$mensaje, 'ont_id' => $strOntIdNuevo);
                    return $respuestaFinal;
                }
                else
                {
                    $respuestaFinal[] = array('status'=>'ERROR',
                                              'mensaje'=>'Error, Olt devolvio un Ont Id fuera del rango!, <br>'
                                                       . 'Favor volver a intentar!');
                    return $respuestaFinal;
                }
            }//if($modeloElemento->getNombreModeloElemento()=="MA5608T")
            else if($modeloElemento->getNombreModeloElemento()=="EP-3116")
            {
                //*OBTENER SCRIPT MAC ONT--------------------------------------------------------*/
                $scriptArrayMacOnt = $this->servicioGeneral->obtenerArregloScript("obtenerSubscriberMacPuerto",$modeloElemento);
                $idDocumentoMacOnt= $scriptArrayMacOnt[0]->idDocumento;
                //*----------------------------------------------------------------------*/

                //obtenemos indice
                $resultadoJsonIndice = $this->verificarMacOnt($servicioTecnico, $interfaceElemento, $macOnt, $idDocumentoMacOnt);
                $statusIndice = $resultadoJsonIndice->status;
                if($statusIndice=="ERROR")
                {
                    $respuestaFinal[] = array('status'=>$statusIndice, 'mensaje'=>$resultadoJsonIndice->mensaje);
                    return $respuestaFinal;
                }

                $intIdClienteElemento = $resultadoJsonIndice->mensaje;

                if(intval($intIdClienteElemento)>0 && intval($intIdClienteElemento)<65)
                {
                    //ejecutar script de activacion
                    $objJsonResultadJson = $this->activarClienteOlt($interfaceElemento, $intIdClienteElemento, $macOnt, $perfil, $login, $idDocumento,
                                                             $usuario, $protocolo, $servicioTecnico);
                    $strStatus = $objJsonResultadJson->status;
                    if($strStatus=="OK")
                    {
                        $mensaje = $intIdClienteElemento;
                    }
                    else{
                        $mensaje = $objJsonResultadJson->mensaje;
                    }

                    $respuestaFinal[] = array('status'=>$strStatus, 'mensaje'=>$mensaje);
                    return $respuestaFinal;
                }
                else{
                    $respuestaFinal[] = array('status'=>'ERROR',
                                              'mensaje'=>'Error al obtener el indice del cliente, en el olt!, <br>'
                                                       . 'Favor volver a intentar!');
                    return $respuestaFinal;
                }
            }//else if($modeloElemento->getNombreModeloElemento()=="EP-3116")
        }
        catch (\Exception $e) {
            $strStatus="ERROR";
            $mensaje = "ERROR";
            $arrayFinal[] = array('status'=>"ERROR", 'mensaje'=>$mensaje);
            return $arrayFinal;
        }
    }
    
    /**
     * Función que activa la IP del servicio 
     *
     * @author Creado: Antonio Ayala <afayala@telconet.ec>
     * @verion 1.0
     * 
     * 
     * @param InfoServicio              $servicio
     * @param InfoServicioTecnico       $servicioTecnico
     * @param AdmiProducto              $producto
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param AdmiModeloElemento        $modeloElemento
     * 
     * @since 1.0
     * 
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     */
    public function activarServicioIp($servicio, $servicioTecnico, $producto, $interfaceElemento, $modeloElemento){
        try{
            $strTipoIp = 'FIJA';
        
            //Obtiene tipo de ip por el servicio (PRIVADA)
            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId"  =>  $servicio->getId(),
                                                                  "tipoIp"      =>  "PRIVADA",
                                                                  "estado"      =>  "Reservada"));

            if (is_object($objTipoIp))
            {
                $strTipoIp = $objTipoIp->getTipoIp();
            }

            //obtener ips fijas q tiene el servicio
            $ipsFijas = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                ->findBy(array("servicioId"=>$servicio->getId(),"tipoIp"=>$strTipoIp, "estado"=>"Reservada"));           
            
            //obtener mac wifi
            $servProdCaracMacWifi = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "MAC", $producto);
            if($servProdCaracMacWifi){
                //cambiar formato de la mac
                $macWifiNueva = $this->cambiarMac($servProdCaracMacWifi->getValor());
            }
            else{
                //obtener mac wifi
                $servProdCaracMacWifi = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "MAC WIFI", $producto);

                if($servProdCaracMacWifi){
                    //cambiar formato de la mac
                    $macWifiNueva = $this->cambiarMac($servProdCaracMacWifi->getValor());
                }
                else{
                    $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'NO EXISTE MAC DEL CLIENTE,'.$servicio->getId());
                    return $respuestaFinal;
                }
            }
            
            //consultar si el olt tiene aprovisionamiento de ips en el CNR
            $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                          ->findOneBy(array('detalleNombre' =>'APROVISIONAMIENTO_IP',
                                                                            'detalleValor' =>'CNR',
                                                                            'elementoId' => $interfaceElemento->getElementoId()->getId()));
            if ($objDetalleElemento)
            {

                
                //obtener objeto modelo cnr
                $modeloElementoCnr = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                          ->findOneBy(array("nombreModeloElemento"  => "CNR UCS C220",
                                                        "estado"                => "Activo"));
                //obtener elemento cnr
                $elementoCnr = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                          ->findOneBy(array("modeloElementoId"=>$modeloElementoCnr->getId()));
                
                $parametrosActivaIp = array('ipFija'              => $ipsFijas[0]->getIp(),
                                            'modeloElementoCnr'   => $modeloElementoCnr,
                                            'elementoCnr'         => $elementoCnr,
                                            'mac'                 => $servProdCaracMacWifi->getValor());
                
                $resultadJsonIpFija = $this->activarIpFijaCnr($parametrosActivaIp);
              
                $status     = $resultadJsonIpFija[0]['status'];
                $mensaje    = $resultadJsonIpFija[0]['mensaje'];
                if($status != "OK")
                {
                    $status = "ERROR";
                    $mensaje .= " Error al activar Ip" . $resultadJsonIpFija[0]['mensaje'];
                    $arrayFinal[] = array('status' => $status, 'mensaje' => $mensaje);
                    return $arrayFinal;
                }
                else
                {
                    $ipsFijas[0]->setEstado("Activo");
                    $this->emInfraestructura->persist($ipsFijas[0]);
                    $this->emInfraestructura->flush();
                }
            }
            else
            {
                //obtener indice cliente
                $servProdCaracPool = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "POOL IP", $producto);

                if($servProdCaracPool){
                    $pool = $servProdCaracPool->getValor();
                }
                else{
                    //obtener perfil
                    $servProdCaracPerfil = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "PERFIL", $producto);

                    if($servProdCaracPerfil){
                        $perfil = $servProdCaracPerfil->getValor();
                    }
                    else{
                        //buscar perfil
                        $perfil = $this->emComercial->getRepository("schemaBundle:InfoPlanCab")
                                                    ->getPerfilByPlanIdAndPuntoId("no", "", $servicio->getPuntoId()->getId());
                    }
                    if($perfil){
                        //configurar Ip fija
                        //*OBTENER SCRIPT--------------------------------------------------------*/
                        $scriptArray = $this->servicioGeneral->obtenerArregloScript("obtenerVlanParaIpFija",$modeloElemento);
                        $idDocumentoVlan= $scriptArray[0]->idDocumento;
                        $usuario= $scriptArray[0]->usuario;
                        $protocolo= $scriptArray[0]->protocolo;
                        //*----------------------------------------------------------------------*/
                        $resultadJsonVlan = $this->getVlanParaIpFija($servicioTecnico, $usuario, $interfaceElemento, $perfil, $idDocumentoVlan);
                        $statusVlan = $resultadJsonVlan->status;
                        if($statusVlan=="OK"){
                            $vlan = $resultadJsonVlan->mensaje;

                            //*OBTENER SCRIPT--------------------------------------------------------*/
                            $scriptArray = $this->servicioGeneral->obtenerArregloScript("obtenerPoolParaIpFija",$modeloElemento);
                            $idDocumentoPool= $scriptArray[0]->idDocumento;
                            $usuario= $scriptArray[0]->usuario;
                            $protocolo= $scriptArray[0]->protocolo;
                            //*----------------------------------------------------------------------*/
                            $resultadJsonPool = $this->getPoolParaIpFija($servicioTecnico, $usuario, $interfaceElemento, $vlan, $idDocumentoPool);
                            $statusPool = $resultadJsonPool->status;
                            $pool = $resultadJsonPool->mensaje;
                            if($pool==""){
                                $respuestaFinal[] = array('status'=>'ERROR', 
                                                          'mensaje'=>'NO EXISTE POOL PARA SERVICIO ADICIONAL, Favor notificar al Dep. de Gepon');
                                return $respuestaFinal;
                            }
                        }
                        else{
                            $respuestaFinal[] = array('status'=>'ERROR', 
                                                      'mensaje'=>'NO EXISTE VLAN PARA SERVICIO ADICIONAL, Favor notificar al Dep. de Gepon');
                            return $respuestaFinal;
                        }
                    }
                    else{
                        $respuestaFinal[] = array('status'=>'ERROR', 
                                                  'mensaje'=>'NO EXISTE PERFIL PARA SERVICIO ADICIONAL, Favor notificar al Dep. de Gepon');
                        return $respuestaFinal;
                    }
                }

                //desconfigurar Ip fija
                //*OBTENER SCRIPT--------------------------------------------------------*/
                $scriptArray = $this->servicioGeneral->obtenerArregloScript("configurarIpFija",$modeloElemento);
                $idDocumentoConfig = $scriptArray[0]->idDocumento;
                $usuario= $scriptArray[0]->usuario;
                $protocolo= $scriptArray[0]->protocolo;
                //*----------------------------------------------------------------------*/

                for($i=0;$i<count($ipsFijas);$i++){
                    $ipFija = $ipsFijas[$i];
                    $resultadJsonIp = $this->configurarIpFija($servicioTecnico, $usuario, $pool, $ipFija->getIp(), $macWifiNueva, $idDocumentoConfig);
                    $status = $resultadJsonIp->status;
                    if($status=="OK"){
                        $respuestaFinal[] = array('status'=>'OK', 'mensaje'=>$pool);

                        $ipFija->setEstado("Activo");
                        $this->emInfraestructura->persist($ipFija);
                        $this->emInfraestructura->flush();

                        $mensaje = $resultadJsonIp->mensaje;
                    }
                    else{
                        $respuestaFinal[] = array('status'=>'ERROR', 'mensaje'=>'NO SE DESCONFIGURO IP FIJA PARA SERVICIO ADICIONAL');
                        return $respuestaFinal;
                    }
                }
            }
            $respuestaFinal[] = array('status'=>$status, 'mensaje'=>$mensaje);
            return $respuestaFinal;
        }
        catch (\Exception $e) {
            $status="ERROR";
            $mensaje = "ERROR,".$e->getMessage();
            $arrayFinal[] = array('status'=>"ERROR", 'mensaje'=>$mensaje);
            return $arrayFinal;
        }
    }
  
    /**
     * Funcion que sirve para activar ips adicionales por medio del middleware
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.0 27-06-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 26-04-2018 Se realiza flujo para activaciones de Ip Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 21-05-2018 Se realizan las modificaciones necesarias para permitir el flujo de ips con olt TELLION 
     * 
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 21-06-2018 Se envía a una función la validación del cpe wifi para servicios Small Business Tellion 
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 10-07-2018 Se agrega programación para activación de ips en servicios con nueva tecnología ZTE 
     * @since 1.3
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 27-07-2018 Se agrega parámetro tipoError para validar la activación de ips por reverso en cancelación por traslado de un 
     *                         servicio Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 11-02-2018 Se agregan validaciones para servicios TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 02-05-2020 Se agrega invocación a la función obtenerParametrosProductosTnGpon por reestructuración de servicios Small Business
     *                          y así se obtiene los parámetros strNombreTecnicoInternet y strNombreTecnicoIP. 
     *                          Adicional, se envía parámetro strDescripcionProdPref a la función validarCpeWifiTellionSB y se elimina validaciones
     *                          de TELCOHOME ya que es un producto que no consta de IP
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 16-05-2020 Se modifican las validaciones por marca y no por modelo para los olts ZTE
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.9 15-11-2020 Se agrega envío de nuevos parámetros al middleware en caso de clientes PYME (ip_fija_wan, tipo_plan_actual)
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 11-07-2022 Se agrega la validación de la caracteristica del servicio principal INTERNET VPNoGPON,
     *                         para obtener los servicios de las ip asociadas al servicio principal.
     * 
     * @param $parametros [ servicio, servicioInternet, servicioTecnico, interfaceElemento, producto, ipFija, idEmpresa, usrCreacion, ipCreacion,
     *                      tieneIpFijaActiva, controlIpFija]
     */
    public function activarIpFijaAdicional($parametros)
    {
        $servicio           = $parametros['servicio'];
        $servicioInternet   = $parametros['servicioInternet'];
        $servicioTecnico    = $parametros['servicioTecnico'];
        $interfaceElemento  = $parametros['interfaceElemento'];
        $producto           = $parametros['producto'];
        $objIpFija          = $parametros['ipFija'];
        $macIpFija          = $parametros['macIpFija'];
        $idEmpresa          = $parametros['idEmpresa'];
        $usrCreacion        = $parametros['usrCreacion'];
        $ipCreacion         = $parametros['ipCreacion'];
        $tieneIpFijaActiva  = $parametros['tieneIpFijaActiva'];
        $controlIpFija      = $parametros['controlIpFija'];
        $strCapacidad1      = "";
        $strCapacidad2      = "";
        $strTipoError       = $parametros["tipoError"] ? $parametros["tipoError"] : "";
        
        $strPrefijoEmpresa          = $parametros['strPrefijoEmpresa'];
        $strNombreTecnicoInternet   = "";
        $strNombreTecnicoIP         = "";
        $strDescripcionProdInternet = "";
        $strTipoProcesoMiddleware   = "ACTIVAR_IP_FIJA";
        $boolValidarWifiTellion     = false;
        $arrayProdIp                = array();
        $strMacOnt          = "";
        $strGemPort         = "";
        $strServiceProfile  = "";
        $strLineProfile     = "";
        $strTraffic         = "";
        $strIndiceCliente   = "";
        $strSpid            = "";
        $strVlan            = "";
        $strMacWifi         = "";
        
        if($strPrefijoEmpresa === "TN" || $strPrefijoEmpresa === "TNP")
        {
            if(is_object($servicioInternet) && is_object($servicioInternet->getProductoId()))
            {
                $objProdInternet            = $servicioInternet->getProductoId();
                $strNombreTecnicoInternet   = $objProdInternet->getNombreTecnico();
                $strDescripcionProdInternet = $objProdInternet->getDescripcionProducto();
                $arrayParamsInfoProds       = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                    "strCodEmpresa"                 => $idEmpresa,
                                                    "intIdProductoInternet"         => $objProdInternet->getId());
                $arrayInfoMapeoProds        = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->obtenerParametrosProductosTnGpon($arrayParamsInfoProds);
                if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds))
                {
                    foreach($arrayInfoMapeoProds as $arrayInfoProd)
                    {
                        $intIdProductoIp    = $arrayInfoProd["intIdProdIp"];
                        $strCaractRelProdIp = $arrayInfoProd["strCaractRelProdIp"];
                        $strNombreTecnicoIP = $arrayInfoProd["strNombreTecnicoProdIp"];
                        $objProdIPSB        = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProductoIp);
                        $arrayProdIp[]      = $objProdIPSB;
                    }
                }
            }
        }
        else
        {
            $arrayProdIp        = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                    ->findBy(array( "nombreTecnico" => "IP", 
                                                                    "empresaCod"    => $idEmpresa, 
                                                                    "estado"        => "Activo"));
        }
        
        //OBTENER SERVICIOS DEL PUNTO
        if(isset($strCaractRelProdIp) && !empty($strCaractRelProdIp) &&
           isset($intIdProductoIp) && !empty($intIdProductoIp))
        {
            $arrayServicios     = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                ->createQueryBuilder('s')
                ->innerJoin('schemaBundle:InfoServicioProdCaract', 'car', 'WITH', 'car.servicioId = s.id')
                ->innerJoin('schemaBundle:AdmiProductoCaracteristica', 'pc', 'WITH',
                        'pc.id = car.productoCaracterisiticaId')
                ->innerJoin('schemaBundle:AdmiCaracteristica', 'c', 'WITH', 'c.id = pc.caracteristicaId')
                ->where('s.puntoId = :puntoId')
                ->andWhere("s.productoId = :productoId")
                ->andWhere("car.valor = :idServioInt")
                ->andWhere("c.descripcionCaracteristica = :desCaracteristica")
                ->andWhere("car.estado = :estadoActivo")
                ->andWhere("c.estado = :estadoServicio")
                ->setParameter('puntoId', $servicioInternet->getPuntoId()->getId())
                ->setParameter('productoId', $intIdProductoIp)
                ->setParameter('idServioInt', $servicioInternet->getId())
                ->setParameter('desCaracteristica', $strCaractRelProdIp)
                ->setParameter('estadoActivo', 'Activo')
                ->setParameter('estadoServicio', 'Activo')
                ->getQuery()
                ->getResult();
            $arrayServicios[]   = $servicioInternet;
        }
        else
        {
            $arrayServicios     = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                    ->findBy(array("puntoId" => $servicioInternet->getPuntoId()->getId(), "estado" => "Activo"));
        }
        
        $strTipoNegocio     = $servicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();
        $elemento           = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());
        $objIpElemento      = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                    ->findOneBy(array('elementoId' => $elemento->getId(), 'estado' => 'Activo'));
        $modeloElemento     = $elemento->getModeloElementoId();
        $strMarcaOlt        = $modeloElemento->getMarcaElementoId()->getNombreMarcaElemento();

        //OBTENER NOMBRE CLIENTE
        $objPersona             = $servicio->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();
        $strNombreCliente       = $objPersona->__toString();

        //OBTENER IDENTIFICACION
        $strIdentificacion      = $objPersona->getIdentificacionCliente();

        //OBTENER LOGIN
        $strLogin               = $servicio->getPuntoId()->getLogin();

        //OBTENER INDICE CLIENTE
        $spcIndiceCliente       = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "INDICE CLIENTE", $producto);
        if($spcIndiceCliente)
        {
            $strIndiceCliente   = $spcIndiceCliente->getValor();
        }

        //OBTENER SERIE ONT
        $elementoCliente    = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                    ->find($servicioTecnico->getElementoClienteId());
        $strSerieOnt        = $elementoCliente->getSerieFisica();

        //obtener scope
        $objCaractScope = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "SCOPE", $servicio->getProductoId());
        
        if($strMarcaOlt == "TELLION")
        {
            $boolValidarWifiTellion     = true;
            //OBTENER MAC ADICIONAL
            $strMacWifi = $macIpFija;

            $spcMacOnt = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "MAC ONT", $producto);
            if($spcMacOnt)
            {
                $macIpFija = $spcMacOnt->getValor();
            }
            
            //OBTENER PERFIL
            $spcLineProfile = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "PERFIL", $producto);
            if(is_object($spcLineProfile))
            {
                $strLineProfile = $spcLineProfile->getValor();
                $arrayPerfil    = explode("_", $strLineProfile);
                if($strNombreTecnicoInternet === "INTERNET SMALL BUSINESS")
                {
                    $strLineProfile = $arrayPerfil[0]."_".$arrayPerfil[1]."_".$arrayPerfil[2];
                    
                }
                else
                {
                    $strLineProfile = $arrayPerfil[0]."_".$arrayPerfil[1];
                }
            }
        }
        else if($strMarcaOlt == "HUAWEI")
        {
            //OBTENER SERVICE-PORT
            $spcSpid        = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "SPID", $producto);
            if($spcSpid)
            {
                $strSpid    = $spcSpid->getValor();
            }

            //OBTENER SERVICE PROFILE
            $spcServiceProfile = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "SERVICE-PROFILE", $producto);
            if($spcServiceProfile)
            {
                $strServiceProfile = $spcServiceProfile->getValor();
            }

            //OBTENER LINE PROFILE NAME
            $spcLineProfile = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "LINE-PROFILE-NAME", $producto);
            if($spcLineProfile)
            {
                $strLineProfile = $spcLineProfile->getValor();
            }

            //OBTENER VLAN
            $spcVlan        = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "VLAN", $producto);
            if($spcVlan)
            {
                $strVlan    = $spcVlan->getValor();
            }

            //OBTENER GEM-PORT
            $spcGemPort     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "GEM-PORT", $producto);
            if($spcGemPort)
            {
                $strGemPort = $spcGemPort->getValor();
            }

            //OBTENER TRAFFIC-TABLE
            $spcTraffic     = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "TRAFFIC-TABLE", $producto);
            if($spcTraffic)
            {
                $strTraffic = $spcTraffic->getValor();
            }
        }
        else if($strMarcaOlt == "ZTE")
        {
            $spcServiceProfile = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "SERVICE-PROFILE", $producto);
            if($spcServiceProfile)
            {
                $strServiceProfile = $spcServiceProfile->getValor();
            }

            //OBTENER SERVICE-PORT
            $spcSpid        = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "SPID", $producto);
            if($spcSpid)
            {
                $strSpid    = $spcSpid->getValor();
            }

            //OBTENER CAPACIDAD1
            $objCapacidad1 = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "CAPACIDAD1", $producto);
            if(is_object($objCapacidad1))
            {
                $strCapacidad1 = $objCapacidad1->getValor();
            }

            //OBTENER CAPACIDAD2
            $objCapacidad2 = $this->servicioGeneral->getServicioProductoCaracteristica($servicioInternet, "CAPACIDAD2", $producto);
            if(is_object($objCapacidad2))
            {
                $strCapacidad2 = $objCapacidad2->getValor();
            }
        }
        else
        {
            $respuesta = array('status' => "ERROR", 'mensaje' => "Modelo Elemento no tiene aprovisionamiento!");
            return $respuesta;
        }
        
        if($strTipoError === "ERROR TRASLADO IPSB")
        {
            $strEstadoServicio  = "Asignada";
            $intIpsFijasActivas = $parametros["ip_fijas_activas"] ? $parametros["ip_fijas_activas"] : 0;
        }
        else
        {
            $strEstadoServicio  = $servicio->getEstado();
            //OBTENER IPS ADICIONALES 
            $arrayDatosIp       = $this->servicioGeneral
                                    ->getInfoIpsFijaPunto(  $arrayServicios, $arrayProdIp, 
                                                            $servicioInternet, 'Activo', 'Activo', $producto);

            //OBTENER LA CANTIDAD DE IPS ADICIONALES ACTIVAS
            $intIpsFijasActivas = $arrayDatosIp['ip_fijas_activas'];
        }
        
        if($strNombreTecnicoInternet === "INTERNET SMALL BUSINESS")
        {
            $strTipoNegocio = "PYME";
            if($boolValidarWifiTellion)
            {
                $arrayValidacionCpeWifiIsb  = $this->validarCpeWifiTellionSB(array( "objServicioTecnicoIsb" => $servicioTecnico,
                                                                                    "strCodEmpresa"         => $idEmpresa,
                                                                                    "strTipoBusqueda"       => "CON_IP",
                                                                                    "strProdBusqueda"       => $strNombreTecnicoIP,
                                                                                    "strAccion"             => "ACTIVAR",
                                                                                    "strDescripcionProdPref"=> $strDescripcionProdInternet
                                                                                    ));
                if($arrayValidacionCpeWifiIsb["strStatus"] !== "OK")
                {
                    return array('status' => $arrayValidacionCpeWifiIsb["strStatus"], 'mensaje' => $arrayValidacionCpeWifiIsb["strMensaje"]);
                }
            }
        }
        $arrayDatos = array(
                                'serial_ont'            => $strSerieOnt,
                                'mac_ont'               => $macIpFija,
                                'nombre_olt'            => $elemento->getNombreElemento(),
                                'ip_olt'                => $objIpElemento->getIp(),
                                'puerto_olt'            => $interfaceElemento->getNombreInterfaceElemento(),
                                'modelo_olt'            => $modeloElemento->getNombreModeloElemento(),
                                'gemport'               => $strGemPort,
                                'service_profile'       => $strServiceProfile,
                                'line_profile'          => $strLineProfile,
                                'traffic_table'         => $strTraffic,
                                'ont_id'                => $strIndiceCliente,
                                'service_port'          => $strSpid,
                                'vlan'                  => $strVlan,
                                'estado_servicio'       => $strEstadoServicio,
                                'mac_wifi'              => $strMacWifi,
                                'tipo_negocio_actual'   => $strTipoNegocio,
                                'ip_fijas_activas'      => $intIpsFijasActivas,
                                'ip'                    => $objIpFija->getIp(),
                                'scope'                 => $objCaractScope->getValor(),
                                'capacidad_up'          => $strCapacidad1,
                                'capacidad_down'        => $strCapacidad2
                            );

        if($strTipoNegocio === "PYME" && is_object($servicio->getProductoId()))
        {
            $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $servicio->getProductoId()->getId(),
                                                     'strDescCaracteristica' => 'IP WAN',
                                                     'strEstado'             => 'Activo' );
            $strExisteIpWan = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
            if ($strExisteIpWan === 'S')
            {
                $strTipoProcesoMiddleware       = "ACTIVAR_IP_FIJA_WAN";
                $arrayDatos['ip_fija_wan']      = '0';
                $arrayDatos['tipo_plan_actual'] = 'sin_ip';
            }
        }
        $arrayDatosMiddleware = array(
                                        'empresa'               => $strPrefijoEmpresa,
                                        'nombre_cliente'        => $strNombreCliente,
                                        'login'                 => $strLogin,
                                        'identificacion'        => $strIdentificacion,
                                        'datos'                 => $arrayDatos,
                                        'opcion'                => $strTipoProcesoMiddleware,
                                        'ejecutaComando'        => $this->ejecutaComando,
                                        'usrCreacion'           => $usrCreacion,
                                        'ipCreacion'            => $ipCreacion
                                    );

        $arrayFinal = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));

        return $arrayFinal;
    }
    
    /**
     * Funcion que sirve para configurar ips fijas adicionales
     * en elemento cnr
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 15-03-2015
     */
    public function activarIpFijaCnr($parametros)
    {
        $ipFija             = $parametros['ipFija'];
        $modeloElementoCnr  = $parametros['modeloElementoCnr'];
        $elementoCnr        = $parametros['elementoCnr'];
        $mac                = $parametros['mac'];
      
        //*OBTENER SCRIPT--------------------------------------------------------*/
        $scriptArray = $this->servicioGeneral->obtenerArregloScript("configurarIpFija",$modeloElementoCnr);
        $idDocumentoConfig= $scriptArray[0]->idDocumento;
        $usuarioConfig= $scriptArray[0]->usuario;
        //*----------------------------------------------------------------------*/

        //cambiar formato de mac
        $macNueva = $this->cambiarMac($mac);

        //activar ip fija
        $arrayParametrosIpFija = array(
                                        'ipFija'            => $ipFija,
                                        'macOnt'            => $macNueva,
                                        'idDocumento'       => $idDocumentoConfig,
                                        'usuario'           => $usuarioConfig,
                                        'elementoCnr'       => $elementoCnr
                                      );
        $resultadJsonIpFija = $this->configurarIpFijaHuawei($arrayParametrosIpFija);
        $statusIpFija = $resultadJsonIpFija->status;
        $mensaje = $resultadJsonIpFija->mensaje;
      
        $arrayFinal[] = array('status'=>$statusIpFija, 'mensaje'=>$mensaje);
        return $arrayFinal;
    }
  
    /**
     * Funcion que sirve para configurar ips fijas adicionales
     * en elemento huawei
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 24-03-2015
     */
    public function activarIpFijaHuawei($parametros)
    {
        $elementoId     = $parametros['elementoId'];
        $idDocumento    = $parametros['idDocumento'];
        $usuario        = $parametros['usuario'];
        $tarjeta        = $parametros['tarjeta'];
        $puertoPon      = $parametros['puertoPon'];
        $ontId          = $parametros['ontId'];
        $puertoOnt      = $parametros['puertoOnt'];
      
        $datos = $tarjeta.",".$puertoPon.",".$ontId.",".$puertoOnt;
        
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".
            $this->host."' '".$idDocumento."' '".$usuario."' 'SSH' '".$elementoId."' '".
            $datos."' '".$this->pathParameters."'";
        $salida1= shell_exec($comando);
        $pos1 = strpos($salida1, "{");
        $jsonObj1= substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);
      
        return $resultadJson1;
    }
  
    /**
     * Funcion que activa la ip en el olt, solo ejecucion
     * de scripts y busca de parametros (vlan y pool)
     *
     * @author Creado: Kenneth Jimenez <kjimenez@telconet.ec>
     * @author Modificado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 4-05-2014
     *
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 23-12-2015 Se agregaron parametros para configuración de clientes Tellion Pro CNR
     * 
     * @author Modificado: Antonio Ayala <afayala@telconet.ec>
     * @version 1.2 22-02-2021 Se agrega consulta de IP Privada por servicio
     * 
     * @param Array $parametros arreglo de parametros necesarios para activar ip fija adicional
     * 
     */
    public function activarIpsFijas($parametros)
    {
        $tieneIpFijaActiva = $parametros['tieneIpFijaActiva'];
        $servicio          = $parametros['servicio'];
        $servicioTecnico   = $parametros['servicioTecnico'];
        $producto          = $parametros['producto'];
        $interfaceElemento = $parametros['interfaceElemento'];
        $modeloElemento    = $parametros['modeloElemento'];
        $macWifi           = $parametros['macWifi'];
        $indiceCliente     = $parametros['indice'];
        $perfil            = $parametros['perfil'];
        $controlIpFija     = $parametros['controlIpFija'];
        $usrCreacion       = $parametros['usrCreacion'];
        $strTipoNegocio    = $parametros['tipoNegocio'];
      
        try
        {
            //obtener ips fijas q tiene el servicio
            $estadoServicio = $servicio->getEstado() ;
            $estadoIps      = "Reservada";

            if($estadoServicio=="Asignada")
            {
                $estadoIps = "Reservada";
            }
            else if($estadoServicio=="Activo")
            {
                $estadoIps = "Activo";
            }
          
            $strTipoIp = 'FIJA';
        
            //Obtiene tipo de ip por el servicio (PRIVADA)
            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId"  =>  $servicio->getId(),
                                                                  "tipoIp"      =>  "PRIVADA",
                                                                  "estado"      =>  $estadoIps));

            if (is_object($objTipoIp))
            {
                $strTipoIp = $objTipoIp->getTipoIp();
            }
            
            $ipsFijas = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                             ->findBy(array("servicioId"=>$servicio->getId(),"tipoIp"=>$strTipoIp, "estado"=>$estadoIps));
          
            if($ipsFijas)
            {
                //validacion si el perfil controla ip fijas
                if(($tieneIpFijaActiva && $controlIpFija) || ($strTipoNegocio == "PRO")) 
                {
                    if ($strTipoNegocio == "PRO")
                    {
                        $nuevoPerfil = $perfil;
                    }
                    else
                    {
                        $nuevoPerfil = substr($perfil,0,strlen($perfil)-2)."_5";
                    }

                    $lineaPon    = $interfaceElemento->getNombreInterfaceElemento();                  
                    //*OBTENER SCRIPT--------------------------------------------------------*/
                    $scriptArray = $this->servicioGeneral->obtenerArregloScript("cambioPlanCliente",$modeloElemento);
                    $idDocumento = $scriptArray[0]->idDocumento;
                    $usuario     = $scriptArray[0]->usuario;
                    $protocolo   = $scriptArray[0]->protocolo;
                    $datos       = $lineaPon.",".$indiceCliente.",".$indiceCliente.",".$nuevoPerfil;
                    //*----------------------------------------------------------------------*/
                    
                    $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".
                               $this->host."' '".$idDocumento."' '".$usuario."' '".$protocolo."' '".
                               $servicioTecnico->getElementoId()."' '".$datos."' '".$this->pathParameters."'";
                    $salida             = shell_exec($comando);
                    $pos                = strpos($salida, "{");
                    $jsonObj            = substr($salida, $pos);
                    $resultadJsonPerfil = json_decode($jsonObj);

                    $status = $resultadJsonPerfil->status;
                    $mensaje = $resultadJsonPerfil->mensaje;
                    if($status=="ERROR")
                    {
                        $respuestaFinal[] = array('status'=>'ERROR',
                                                  'mensaje'=>'No se pudo configurar el nuevo perfil '.$nuevoPerfil.' '
                                                            .'para la activacion de la Ip(s) Fija(s)');
                        return $respuestaFinal;
                    }
                  
                    //obtener servicio referencial
                    $objServicioRef = $servicioTecnico->getServicioId();
                  
                    //eliminar caracteristica perfil
                    $objServProdCaracPerfil = $this->servicioGeneral
                                                   ->getServicioProductoCaracteristica($objServicioRef, "PERFIL", $producto);
                    $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objServProdCaracPerfil, "Eliminado");
                  
                    //ingresar caracteristica nueva perfil
                    $this->servicioGeneral
                         ->ingresarServicioProductoCaracteristica($objServicioRef, $producto, "PERFIL", $nuevoPerfil, $usrCreacion);
                }
                ///////////////////////////////////////////
                
                //consultar si el olt tiene aprovisionamiento de ips en el CNR
                $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                              ->findOneBy(array('detalleNombre' =>'APROVISIONAMIENTO_IP',
                                                                                'detalleValor' =>'CNR',
                                                                                'elementoId' => $interfaceElemento->getElementoId()->getId()));
                if ($objDetalleElemento)
                {                            
                    //obtener objeto modelo cnr
                    $modeloElementoCnr = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                              ->findOneBy(array("nombreModeloElemento"  => "CNR UCS C220",
                                                                "estado"                => "Activo"));
                    //obtener elemento cnr
                    $elementoCnr = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                        ->findOneBy(array("modeloElementoId"=>$modeloElementoCnr->getId()));

                    $parametrosActivaIp = array('ipFija'              => $ipsFijas[0]->getIp(),
                                                'modeloElementoCnr'   => $modeloElementoCnr,
                                                'elementoCnr'         => $elementoCnr,
                                                'mac'                 => $macWifi);
                
                    $resultadJsonIpFija = $this->activarIpFijaCnr($parametrosActivaIp);

                    $statusIp   = $resultadJsonIpFija[0]['status'];
                    $mensajeIp  = $resultadJsonIpFija[0]['mensaje'];
                    if($statusIp != "OK")
                    {
                        $status       = "ERROR";
                        $mensaje     .= " Error al activar Ip" . $resultadJsonIpFija[0]['mensaje'];
                        $arrayFinal[] = array('status' => $status, 'mensaje' => $mensaje);
                        return $arrayFinal;
                    }
                    else
                    {                    
                        $ipsFijas[0]->setEstado("Activo");
                        $this->emInfraestructura->persist($ipsFijas[0]);
                        $this->emInfraestructura->flush();
                        
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC", $macWifi, $usrCreacion);
                    }                
                    $respuestaFinal[] = array('status'=>$statusIp, 'mensaje'=>$mensajeIp);
                    return $respuestaFinal;                
                }
                else
                {             
                    //configurar Ip fija
                    //*OBTENER SCRIPT--------------------------------------------------------*/
                    $scriptArray     = $this->servicioGeneral->obtenerArregloScript("obtenerVlanParaIpFija",$modeloElemento);
                    $idDocumentoVlan = $scriptArray[0]->idDocumento;
                    $usuario         = $scriptArray[0]->usuario;
                    $protocolo       = $scriptArray[0]->protocolo;
                    //*----------------------------------------------------------------------*/
                    $resultadJsonVlan = $this->getVlanParaIpFija($servicioTecnico, $usuario, $interfaceElemento, $perfil, $idDocumentoVlan);
                    $statusVlan       = $resultadJsonVlan->status;
    
                    if($statusVlan=="OK")
                    {
                        $vlan = $resultadJsonVlan->mensaje;

                        //*OBTENER SCRIPT--------------------------------------------------------*/
                        $scriptArray     = $this->servicioGeneral->obtenerArregloScript("obtenerPoolParaIpFija",$modeloElemento);
                        $idDocumentoPool = $scriptArray[0]->idDocumento;
                        $usuario         = $scriptArray[0]->usuario;
                        $protocolo       = $scriptArray[0]->protocolo;
                        //*----------------------------------------------------------------------*/
                        $resultadJsonPool = $this->getPoolParaIpFija($servicioTecnico, $usuario, $interfaceElemento, $vlan, $idDocumentoPool);
                        $statusPool       = $resultadJsonPool->status;
                        $pool             = $resultadJsonPool->mensaje;

                        if($statusPool=="OK" && $pool!="")
                        {
                            //cambiar formato de mac
                            $macWifiNueva = $this->cambiarMac($macWifi);

                            //servicio prod caract pool ip
                            $servProdCaracPool = $this->servicioGeneral->getServicioProductoCaracteristica($servicio, "POOL IP", $producto);
                            if(!$servProdCaracPool)
                            {
                                $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "POOL IP", $pool, $usrCreacion);
                            }

                            //servicio prod caract mac
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio, $producto, "MAC", $macWifi, $usrCreacion);

                            //*OBTENER SCRIPT--------------------------------------------------------*/
                            $scriptArray       = $this->servicioGeneral->obtenerArregloScript("configurarIpFija",$modeloElemento);
                            $idDocumentoConfig = $scriptArray[0]->idDocumento;
                            $usuarioConfig     = $scriptArray[0]->usuario;
                            $protocoloConfig   = $scriptArray[0]->protocolo;
                            //*----------------------------------------------------------------------*/
                            if($idDocumentoConfig==0)
                            {
                                $respuestaArray[] = array('status'=>'ERROR', 'mensaje'=>'NO EXISTE TAREA DE CONF DE IP FIJA');
                                return $respuestaArray;
                            }

                            for($i=0;$i<count($ipsFijas);$i++)
                            {
                                $ipFija = $ipsFijas[$i];
                                //validacion de existencia de IP
                                    $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos
                                                ."telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '".
                                            $this->host."' 'verificarIpConfigurada' '".$servicioTecnico->getElementoId()."' '".
                                            $usuario."' '".$protocolo."' '".$idDocumentoPool."' '".$ipFija->getIp()."' '".
                                            $this->pathParameters."'";
                                $salida             = shell_exec($comando);
                                $pos                = strpos($salida, "{");
                                $jsonObj            = substr($salida, $pos);
                                $resultadJsonPerfil = json_decode($jsonObj);

                                $status    = $resultadJsonPerfil->status;
                                $macIpConf = $resultadJsonPerfil->mensaje;

                                if($status=="ERROR")
                                {
                                    $olt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                ->find($servicioTecnico->getElementoId());
                                    $respuestaFinal[] = array('status'  => 'ERROR',
                                                              'mensaje' => 'Ip: <b>'.$ipFija->getIp().'</b> ya se encuentra '
                                                                          .'configurada en <b>'.$olt->getNombreElemento().'</b> '
                                                                          .'con la mac <b>'.$macIpConf.'</b>. Favor notificar a Sistemas.');
                                    return $respuestaFinal;
                                }//if($status=="ERROR")
                                else
                                {
                                    //configuracion de Ip Fija
                                    $resultadJsonIp = $this->configurarIpFija($servicioTecnico, $usuario, $pool,
                                                                              $ipFija->getIp(), $macWifiNueva, $idDocumentoConfig);
                                    $status = $resultadJsonIp->status;
                                    $mensaje = $resultadJsonIp->mensaje;

                                    if($status=="ERROR")
                                    {
                                        $respuestaFinal[] = array('status'=>'ERROR',
                                                                  'mensaje'=>'NO SE CONFIGURO IP FIJA: '.$ipFija->getIp());
                                        return $respuestaFinal;
                                    }
                                }
                            }//for($i=0;$i<count($ipsFijas);$i++)

                            $respuestaFinal[] = array('status'=>$status, 'mensaje'=>$mensaje);
                            return $respuestaFinal;
                        }//if($statusPool=="OK" && $pool!="")
                        else
                        {
                            $olt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                        ->find($servicioTecnico->getElementoId());
                            $respuestaFinal[] = array('status' => 'ERROR',
                                                      'mensaje' => 'No Existe Pool para el Perfil <b>'.$perfil.'</b> '
                                                                  .'en <b>'.$olt->getNombreElemento().'</b>. '
                                                                  .'Favor Notificar a <b>GEPON</b>');
                            return $respuestaFinal;
                        }
                    }//if($statusVlan=="OK")
                    else
                    {
                        $olt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                    ->find($servicioTecnico->getElementoId());
                        $respuestaFinal[] = array('status'  => 'ERROR',
                                                  'mensaje' => 'No existe Vlan para el Perfil <b>'.$perfil.'</b> '
                                                              .'en <b>'.$olt->getNombreElemento().'</b>. '
                                                              .'Favor Notificar a <b>GEPON</b>');
                        return $respuestaFinal;
                    }
                }
            }
            else{
                $arrayFinal[] = array('status'  => "ERROR",
                                      'mensaje' => "No existe(n) Ip(s) en estado <b>'$estadoIps'</b> "
                                                  ."para poder Configurar IP. Estado Servicio <b>'$estadoServicio'</b>"
                                                  ."Favor notificar a Sistemas.");
                return $arrayFinal;
            }  
        }//if($ipsFijas)
        catch (\Exception $e)
        {
            $status       = "ERROR";
            $mensaje      = "ERROR,".$e->getMessage();
            $arrayFinal[] = array('status'=>"ERROR", 'mensaje'=>$mensaje);
            return $arrayFinal;
        }
    }
  
    //MEGADATOS
    /**
     * Funcion que ejecuta un script para controlar el ancho de banda en el olt
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 17-3-2015
     * @param Array $arrayParametros
     */
    public function controlAnchoBandaHuawei($arrayParametros)
    {
        $trafficTable       = $arrayParametros['trafficTable'];
        $idDocumento        = $arrayParametros['idDocumento'];
        $usuario            = $arrayParametros['usuario'];
        $servicioTecnico    = $arrayParametros['servicioTecnico'];
        $protocolo          = $arrayParametros['protocolo'];
        $tarjeta            = $arrayParametros['tarjeta'];
        $ontId              = $arrayParametros['ontId'];
        $puertoPon          = $arrayParametros['puertoPon'];
      
        //unir variables
        $datos = $tarjeta.",".$puertoPon.",".$ontId.",".$trafficTable;
      
        //ejecutar script
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".$this->host."' '".
            $idDocumento."' '".$usuario."' '".$protocolo."' '".$servicioTecnico->getElementoId()."' '".
            $datos."' '".$this->pathParameters."'";
        $salida= shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);
      
        return $resultadJson;
    }
  
    /**
     * Funcion que ejecuta un script para configurar
     * una ip en el cnr
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 8-3-2015
     * @param Array       $arrayParametros
     */
    public function configurarIpFijaHuawei($arrayParametros)
    {
        $ipFija             = $arrayParametros['ipFija'];
        $macOnt             = $arrayParametros['macOnt'];
        $idDocumento        = $arrayParametros['idDocumento'];
        $usuario            = $arrayParametros['usuario'];
        $elementoCnr        = $arrayParametros['elementoCnr'];
      
        $datos = $ipFija.",".$macOnt.",".$ipFija;
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".
            $this->host."' '".$idDocumento."' '".$usuario."' 'SSH' '".$elementoCnr->getId()."' '".
            $datos."' '".$this->pathParameters."'";
        $salida1= shell_exec($comando);
        $pos1 = strpos($salida1, "{");
        $jsonObj1= substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);
      
        return $resultadJson1;
    }
    
    /**
     * configurarIpFijaTellion, envia a configurar las Ip's al CNR para TELLION
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 11-11-2015
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 05-02-2015
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.2 18-02-2016 Se aumento el nombre del elemento OLT al final de la cadena que contiene las ips's
     * @since 1.1
     * 
     * @param array $arrayParametros[
     *                              strConfigurarIp => Recibe las [Ip,Mac,Ip]
     *                              strAccion       => Recibe la accion con la cual se envia a ejecutar el metodo en el script md_datos
     *                              ]
     * @return json $resultadJson [
     *                            status  => Status retornado por el script al terminar lo procesado
     *                            mensaje => Mensaje retornado por el script al terminar lo procesado
     *                            ]
     */
    public function configurarIpFijaTellion($arrayParametros)
    {
        //Obtener objeto modelo cnr
        $entityAdmiModeloElemento = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                         ->findOneBy(array("nombreModeloElemento" => "CNR UCS C220", "estado" => "Activo"));

        //Obtener elemento cnr
        $entityInfoElemento       = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                         ->findOneBy(array("modeloElementoId" => $entityAdmiModeloElemento->getId()));
        
        //*OBTENER SCRIPT--------------------------------------------------------*/
        $scriptArray           = $this->servicioGeneral->obtenerArregloScript("configurarIpFija", $entityAdmiModeloElemento);
        $intIdDocumentoConfig  = $scriptArray[0]->idDocumento;
        $strUsuarioConfig      = $scriptArray[0]->usuario;
        //*----------------------------------------------------------------------*/

        $strDatos                 = $arrayParametros['strConfigurarIp'];
        $strAccion                = $arrayParametros['strAccion'];
        
        $comando = "nohup java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . 
                   "telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '" .
                   $this->host . "' '" . $strAccion . "' '" . $entityInfoElemento->getId() . "' '" . $strUsuarioConfig . "' 'puerto' "
                   . "'" . $intIdDocumentoConfig . "' '" . $strDatos . "|". $arrayParametros['strNombreElemento'] . "|". $this->pathTelcos . "' '" 
                   . $this->pathParameters . "' > " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/configuracionIpLog" 
                   . $arrayParametros['strNombreElementoOutput'] . ".txt 2>&1 &";

        $salida         = shell_exec($comando);
        $pos            = strpos($salida, "{");
        $jsonObj        = substr($salida, $pos);
        $jsonResultado  = json_decode($jsonObj);
      
        return $jsonResultado;
        
        
        
    }
    /**
     * Funcion que sirve para obtener el service port id en un elemento huawei
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 17-04-2015
     * @param Array       $arrayParametros (modeloElemento, interfaceElemento, ontId, servicioTecnico)
     */
    public function obtenerServicePortId($arrayParametros)
    {
        $modeloElemento     = $arrayParametros['modeloElemento'];
        $interfaceElemento  = $arrayParametros['interfaceElemento'];
        $ontId              = $arrayParametros['ontId'];
        $servicioTecnico    = $arrayParametros['servicioTecnico'];
      
        //*OBTENER SCRIPT SPID --------------------------------------------------------*/
        $scriptArraySpid   = $this->servicioGeneral->obtenerArregloScript("obtenerSpid",$modeloElemento);
        $idDocumentoSpid   = $scriptArraySpid[0]->idDocumento;
        $usuario           = $scriptArraySpid[0]->usuario;
        //*----------------------------------------------------------------------*/

        //dividir interface para obtener tarjeta y puerto pon
        list($tarjeta, $puertoPon) = split('/',$interfaceElemento->getNombreInterfaceElemento());

        //variables datos
        $datos = $tarjeta.",".$puertoPon.",".$ontId;

        $resultadoJsonSpid  = $this->obtenerDatosPorAccion($servicioTecnico, $usuario, $datos, $idDocumentoSpid, "obtenerSpid");
      
        return $resultadoJsonSpid;      
    }
  
    /**
     * Funcion que sirve para obtener datos especificos de un olt huawei
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 6-3-2015
     * @param InfoServicioTecnico       $servicioTecnico
     * @param String                    $usuario
     * @param String                    $datos
     * @param int                       $idDocumento
     * @param String                    $accion
     */
    public function obtenerDatosPorAccion($servicioTecnico, $usuario, $datos, $idDocumento, $accion)
    {
        if ($accion == 'verificarSerialOnt')
        {
            error_log("Cliente: verificarSerialOnt : ".$servicioTecnico->getServicioId()->getPuntoId()->getLogin());
        }
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '".
            $this->host."' '".$accion."' '".$servicioTecnico->getElementoId()."' '".$usuario."' 'puerto' "
                       . "'".$idDocumento."' '".$datos."' '".$this->pathParameters."'";

        $salida         = shell_exec($comando);
        $pos            = strpos($salida, "{");
        $jsonObj        = substr($salida, $pos);
        $resultadJson   = json_decode($jsonObj);
        if ($accion == 'verificarSerialOnt')
        {
            error_log("Cliente: verificarSerialOnt : ".$servicioTecnico->getServicioId()->getPuntoId()->getLogin()." Status : ".
                      $resultadJson->status." "."Mensaje : ".$resultadJson->mensaje);
        }
        return $resultadJson;
    }
      
    /**
     * Funcion que ejecuta un script para activar un servicio de internet en el olt huawei
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 5-3-2015
     * @param Array       $arrayParametros
     */
    public function activarClienteOltHuawei($arrayParametros)
    {
        $vlan               = $arrayParametros['vlan'];
        $gemPort            = $arrayParametros['gemPort'];
        $trafficTable       = $arrayParametros['trafficTable'];
        $idDocumento        = $arrayParametros['idDocumento'];
        $usuario            = $arrayParametros['usuario'];
        $servicioTecnico    = $arrayParametros['servicioTecnico'];
        $protocolo          = $arrayParametros['protocolo'];
        $tarjeta            = $arrayParametros['tarjeta'];
        $ontId              = $arrayParametros['ontId'];
        $puertoPon          = $arrayParametros['puertoPon'];
      
        //unir variables
        $datos = $vlan.",".$tarjeta.",".$puertoPon.",".$ontId.",".$gemPort.",".$trafficTable.",".$trafficTable;
        error_log("Cliente: activarClienteHw : ".$servicioTecnico->getServicioId()->getPuntoId()->getLogin());
        //ejecutar script
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".$this->host."' '".
            $idDocumento."' '".$usuario."' '".$protocolo."' '".$servicioTecnico->getElementoId()."' '".
            $datos."' '".$this->pathParameters."'";
        $salida= shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);              
        error_log("Cliente: activarClienteHw : ".$servicioTecnico->getServicioId()->getPuntoId()->getLogin()." Status : ".$resultadJson->status." ".
                  "Mensaje : ".$resultadJson->mensaje);
        return $resultadJson;
    }
  
    /**
     * Funcion que sirve para eliminar el ont id del olt
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 12-3-2015
     * @param Array       $arrayParametros
     */
    public function eliminarOntIdHuawei($arrayParametros)
    {
        $ontId              = $arrayParametros['ontId'];
        $idDocumento        = $arrayParametros['idDocumento'];
        $usuario            = $arrayParametros['usuario'];
        $servicioTecnico    = $arrayParametros['servicioTecnico'];
        $protocolo          = $arrayParametros['protocolo'];
        $tarjeta            = $arrayParametros['tarjeta'];
        $puertoPon          = $arrayParametros['puertoPon'];
      
        //unir variables
        $datos = $tarjeta.",".$puertoPon.",".$ontId;
      
        //ejecutar script
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".$this->host."' '".
            $idDocumento."' '".$usuario."' '".$protocolo."' '".$servicioTecnico->getElementoId()."' '".
            $datos."' '".$this->pathParameters."'";
        $salida= shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);
      
        return $resultadJson;
    }
  
    /**
     * Funcion que sirve para eliminar el spid del olt
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 15-3-2015
     * @param Array       $arrayParametros
     */
    public function eliminarSpidHuawei($arrayParametros)
    {
        $idDocumento    = $arrayParametros['idDocumento'];
        $usuario        = $arrayParametros['usuario'];
        $spid           = $arrayParametros['spid'];
        $elementoId     = $arrayParametros['elementoId'];
        $protocolo      = $arrayParametros['protocolo'];
      
        //unir variables
        $datos = $spid;
      
        //ejecutar script
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".$this->host."' '".
            $idDocumento."' '".$usuario."' '".$protocolo."' '".$elementoId."' '".
            $datos."' '".$this->pathParameters."'";
        $salida= shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);
      
        return $resultadJson;
    }
 
    /**
     * Funcion que ejecuta un script de verificacion de si
     * la mac del ont se encuentra conectada al puerto correcto.
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 6-08-2014
     * @param InfoServicioTecnico       $servicioTecnico
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param String                    $macOnt
     * @param int                       $idDocumento
     */
    public function verificarMacOnt($servicioTecnico, $interfaceElemento, $macOnt, $idDocumento)
    {
        error_log("Cliente: Verificar Mac Ont : ".$servicioTecnico->getServicioId()->getPuntoId()->getLogin());
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '".
            $this->host."' 'verificarSubscriberMacOnt' '".$servicioTecnico->getElementoId()."' '".$macOnt."' '".
            $interfaceElemento->getNombreInterfaceElemento()."' '".$idDocumento."' '' '".$this->pathParameters."'";
        $salida1= shell_exec($comando);
        $pos1 = strpos($salida1, "{");
        $jsonObj1= substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1); 
        error_log("Cliente: Verificar Mac Ont : ".$servicioTecnico->getServicioId()->getPuntoId()->getLogin()." Status : ".
                  $resultadJson1->status." "."Mensaje : ".$resultadJson1->mensaje);
      
        return $resultadJson1;
    }
  
    /**
     * Funcion que ejecuta un script de verificacion de si
     * la mac del wifi se encuentra conectada al puerto e indice
     * correcto.
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 6-08-2014
     * @param InfoServicioTecnico       $servicioTecnico
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param String                    $macWifi
     * @param int                       $idDocumento
     */
    public function verificarMacWifi($servicioTecnico, $interfaceElemento, $macWifi, $indice, $idDocumento)
    {
        $datos = $interfaceElemento->getNombreInterfaceElemento().",".$indice;
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '".
            $this->host."' 'verificarMacWifi' '".$servicioTecnico->getElementoId()."' '".$macWifi."' '".
            $interfaceElemento->getNombreInterfaceElemento()."' '".$idDocumento."' '".$datos."' '".$this->pathParameters."'";
        $salida1= shell_exec($comando);
        $pos1 = strpos($salida1, "{");
        $jsonObj1= substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);
      
        return $resultadJson1;
    }
  
    /**
     * Funcion que ejecuta un script para configurar la ip
     * fija del cliente
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 6-08-2014
     * @param InfoServicioTecnico       $servicioTecnico
     * @param String                    $usuario
     * @param String                    $pool
     * @param String                    $ip
     * @param String                    $mac
     * @param int                       $idDocumento
     */
    public function configurarIpFija($servicioTecnico, $usuario, $pool, $ip, $mac, $idDocumento)
    {
        $datos = $pool.",".$ip.",".$mac;
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".
            $this->host."' '".$idDocumento."' '".$usuario."' 'SSH' '".$servicioTecnico->getElementoId()."' '".
            $datos."' '".$this->pathParameters."'";
        $salida1= shell_exec($comando);
        $pos1 = strpos($salida1, "{");
        $jsonObj1= substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);
      
        return $resultadJson1;
    }
  
    /**
     * Funcion que ejecuta un script para obtener el pool
     * de ips por medio de la vlan
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 6-08-2014
     * @param InfoServicioTecnico       $servicioTecnico
     * @param String                    $usuario
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param String                    $vlan
     * @param int                       $idDocumento
     */
    public function getPoolParaIpFija($servicioTecnico, $usuario, $interfaceElemento, $vlan, $idDocumento)
    {
        $datos = $vlan;
        
        $comando1 = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '".
            $this->host."' 'obtenerPoolParaIpFija' '".$servicioTecnico->getElementoId()."' '".$usuario."' '".
            $interfaceElemento->getNombreInterfaceElemento()."' '".$idDocumento."' '".$datos."' '".$this->pathParameters."'";
        $salida1= shell_exec($comando1);
        $pos1 = strpos($salida1, "{");
        $jsonObj1= substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);
      
        return $resultadJson1;
    }
  
    /**
     * Funcion que ejecuta un script para obtener la vlan
     * por medio del perfil de internet
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 6-08-2014
     * @param InfoServicioTecnico       $servicioTecnico
     * @param String                    $usuario
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param String                    $perfil
     * @param int                       $idDocumento
     */
    public function getVlanParaIpFija($servicioTecnico, $usuario, $interfaceElemento, $perfil, $idDocumento)
    {
        $datos = $perfil;
        $comando1 = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '".
            $this->host."' 'obtenerVlanParaIpFija' '".$servicioTecnico->getElementoId()."' '".$usuario."' '".
            $interfaceElemento->getNombreInterfaceElemento()."' '".$idDocumento."' '".$datos."' '".$this->pathParameters."'";
        $salida1= shell_exec($comando1);
        $pos1 = strpos($salida1, "{");
        $jsonObj1= substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);
      
        return $resultadJson1;
    }
  
    /**
     * Funcion que ejecuta un script para activar el
     * puerto del cliente
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 6-08-2014
     *
     * @param InfoInterfaceElemento     $interfaceElemento
     * @param int                       $idClienteElemento
     * @param String                    $macOnt
     * @param String                    $perfil
     * @param String                    $login
     * @param int                       $idDocumento
     * @param String                    $usuario
     * @param String                    $protocolo
     * @param InfoServicioTecnico       $servicioTecnico
     */
    public function activarClienteOlt($interfaceElemento, $idClienteElemento, $macOnt, $perfil, $login,
                                      $idDocumento, $usuario, $protocolo, $servicioTecnico)
    {
        $loginTrunk = substr($login, 0, 17);
        $datos = $interfaceElemento->getNombreInterfaceElemento().",".$idClienteElemento.",".$macOnt.","
                .$idClienteElemento.",".$perfil.",".$idClienteElemento.",".$loginTrunk;
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".$this->host."' '".
            $idDocumento."' '".$usuario."' '".$protocolo."' '".$servicioTecnico->getElementoId()."' '".
            $datos."' '".$this->pathParameters."'";
        $salida= shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);
        
        return $resultadJson;
    }
  
    public function activarClienteOltCambioPuerto($interfaceElemento, $idClienteElemento, $macOnt, $perfil, $login,
                                      $idDocumento, $usuario, $protocolo, $elemento){
        $datos = $interfaceElemento->getNombreInterfaceElemento().",".$idClienteElemento.",".$macOnt.",".$idClienteElemento.",".$perfil.",".$idClienteElemento.",".$login;
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".$this->host."' '".$idDocumento."' '".$usuario."' '".$protocolo."' '".$elemento->getId()."' '".$datos."'";
        $salida= shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);
      
        return $resultadJson;
    }
  
    public function cancelarServicioOlt($interfaceElemento,$indiceCliente,$servicioTecnico,$idDocumento,$login){
        $loginTrunk = substr($login, 0, 17);
        $datos = $interfaceElemento->getNombreInterfaceElemento().",".$indiceCliente.",".$indiceCliente;
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom ".$this->pathTelcos."telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '".
            $this->host."' '".$idDocumento."' 'usuario' 'SSH' '".$servicioTecnico->getElementoId()."' '".$datos."' '".
            $this->pathParameters."'";
        $salida= shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);
      
        return $resultadJson;
    }
  
    public function cambiarMac($macWifi){
        $macWifi = trim($macWifi);
        $macWifiNueva = "";
        $arr2 = explode(".",$macWifi);
            for($i=0;$i<count($arr2);$i++){
            $arr1 = str_split($arr2[$i]);
            for($j=0;$j<count($arr1);$j++){
                if($j==1 || $j==3 && ($i+1)!=count($arr1)-1){
                    $macWifiNueva = $macWifiNueva.$arr1[$j].":";
                }
                else{
                    $macWifiNueva = $macWifiNueva.$arr1[$j]."";
                }
            }
        }
        return $macWifiNueva;
    }

  
    /**
     * Funcion que sirve para activar servicios de Cobre y Radio
     *
     * @author Francisco Adum <fadum@ŧelconet.ec>
     * @version 1.1 4-05-2015
     * @version 1.2 18-07-2015 John Vera
     * @since 1.0
     * @param array $arrayParametros (servicio, servicioTecnico, plan, ultimaMilla, producto, modeloElemento, interfaceElemento, mac,
     *                                login, perfil, ipCpeRadio, capacidad1, capacidad2, usrCreacion, ipCreacion, prefijoEmpresa, idEmpresa)
     */
    public function activarClienteTtco($arrayParametros)
    {
        $servicio           = $arrayParametros['servicio'];
        $servicioTecnico    = $arrayParametros['servicioTecnico'];
        $plan               = $arrayParametros['plan'];
        $ultimaMilla        = $arrayParametros['ultimaMilla'];
        $producto           = $arrayParametros['producto'];
        $modeloElemento     = $arrayParametros['modeloElemento'];
        $interfaceElemento  = $arrayParametros['interfaceElemento'];
        $mac                = $arrayParametros['mac'];
        $login              = $arrayParametros['login'];
        $perfil             = $arrayParametros['perfil'];
        $ipCpeRadio         = $arrayParametros['ipCpeRadio'];
        $capacidad1         = $arrayParametros['capacidad1'];
        $capacidad2         = $arrayParametros['capacidad2'];
        $usrCreacion        = $arrayParametros['usrCreacion'];
        $ipCreacion         = $arrayParametros['ipCreacion'];
        $prefijoEmpresa     = $arrayParametros['prefijoEmpresa'];
        $idEmpresa          = $arrayParametros['idEmpresa'];
        
        //*DECLARACION DE VARIABLES----------------------------------------------*/
        $respuestaFinal = array();
        $tipoOrden = $servicio->getTipoOrden();
        $punto = $servicio->getPuntoId();
        $flagTipoOrden=0;
        $status="NA";
        $mensaje="NA";
        //*----------------------------------------------------------------------*/
      
        //DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
      
        //*LOGICA DE NEGOCIO-----------------------------------------------------*/
        try{
            if($modeloElemento->getNombreModeloElemento()=="TERCERIZADO"){
                $tipoOrden = "TERCERIZADO";
                $status="OK";
            }
            if($tipoOrden=='R'){
                $respuestaArray = $this->activarPuertoPorReubicacion($flagTipoOrden);
                $status=$respuestaArray[0]['status'];
                $flagTipoOrden=$respuestaArray[0]['flagTipoOrden'];
            }

            else if($tipoOrden=='T')
            {
                $arrParamTraslado = array   (
                                                'servicio'          => $servicio,
                                                'servicioTecnico'   => $servicioTecnico,
                                                'producto'          => $producto,
                                                'flagTipoOrden'     => $flagTipoOrden,
                                                'usrCreacion'       => $usrCreacion,
                                                'idEmpresa'         => $idEmpresa
                                            );
              
                $respuestaArray = $this->activarPuertoPorTraslado($arrParamTraslado);
                $status=$respuestaArray[0]['status'];
                $flagTipoOrden=$respuestaArray[0]['flagTipoOrden'];
            }
          
            if($tipoOrden=='N' || $flagTipoOrden==3){
                $respuestaArray = $this->activarPuertoPorNuevaTtco($servicio, $producto, $plan, $ultimaMilla, $modeloElemento, $interfaceElemento, $mac,
                                                           $ipCpeRadio, $usrCreacion, $ipCreacion, $login, $perfil,$capacidad1, $capacidad2);
                    $status = $respuestaArray[0]['status'];
                    $mensaje = $respuestaArray[0]['mensaje'];
                }
                    
            if($status=="OK"){
                $servicio->setEstado("EnVerificacion");
                $servicioTecnico->setInterfaceElementoId($interfaceElemento->getId());

                if($servicio->getPuntoFacturacionId()==null || $servicio->getPuntoFacturacionId()==""){
                    $servicio->setPuntoFacturacionId($punto);
                    //punto de facturacion
                    $puntoAdicional = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')->findOneBy(array( "puntoId" => $punto->getId()));
                    $puntoAdicional->setEsPadreFacturacion("S");
                    $this->emComercial->persist($puntoAdicional);
                    $this->emComercial->flush();
                }

                $this->emComercial->persist($servicio);
                $this->emComercial->persist($servicioTecnico);

                //historial del servicio
                $servicioHistorial = new InfoServicioHistorial();
                $servicioHistorial->setServicioId($servicio);

                if($flagTipoOrden==1){
                    $servicioHistorial->setObservacion("Sin ejecucion de Script por REUBICACION");
                }
                else if($flagTipoOrden==2){
                    $servicioHistorial->setObservacion("Sin ejecucion de Script por TRASLADO");
                }
                else if($flagTipoOrden==3){
                    $servicioHistorial->setObservacion("Se ejecuto el Script por TRASLADO");
                }
                else{
                    $servicioHistorial->setObservacion("Se activo el puerto");
                }

                $servicioHistorial->setEstado("EnVerificacion");
                $servicioHistorial->setUsrCreacion($usrCreacion);
                $servicioHistorial->setFeCreacion(new \DateTime('now'));
                $servicioHistorial->setIpCreacion($ipCreacion);
                $this->emComercial->persist($servicioHistorial);
                $this->emComercial->flush();
                
                //enviar notificacion
                $this->servicioGeneral->enviarMailActivarCliente($usrCreacion, $ipCreacion, $servicio, $servicioHistorial, $interfaceElemento->getElementoId(), $interfaceElemento->getNombreInterfaceElemento(),$prefijoEmpresa);
            }
        }
        catch (\Exception $e) {
            if ($this->emInfraestructura->getConnection()->isTransactionActive()){
                $this->emInfraestructura->getConnection()->rollback();
            }
          
            if ($this->emComercial->getConnection()->isTransactionActive()){
                $this->emComercial->getConnection()->rollback();
            }
            $status="ERROR";
            $mensaje = "ERROR EN LA LOGICA DE NEGOCIO, ".$e->getMessage();
            $respuestaFinal[] = array('status'=>$status, 'mensaje'=>$mensaje);
            return $respuestaFinal;
          
        }
        //*----------------------------------------------------------------------*/
      
      
        //*DECLARACION DE COMMITS*/
        if ($this->emInfraestructura->getConnection()->isTransactionActive()){
            $this->emInfraestructura->getConnection()->commit();
        }

        if ($this->emComercial->getConnection()->isTransactionActive()){
            $this->emComercial->getConnection()->commit();
        }
      
        $this->emInfraestructura->getConnection()->close();
        $this->emComercial->getConnection()->close();
        //*----------------------------------------------------------------------*/
      
        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal[] = array('status'=>$status, 'mensaje'=>$mensaje);
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
    }
  
    public function activarPuertoPorNuevaTtco($servicio, $producto, $plan, $ultimaMilla, $modeloElemento, $interfaceElemento, $mac, $ipCpeRadio,
                                              $usrCreacion, $ipCreacion, $login, $perfil, $capacidad1, $capacidad2){
        /*DECLARACION DE VARIABLES----------------------------------------------*/
        $respuestaArray = array();
        $mensaje = "NA";
        $flagSCE=0;
        $reqAprovisionamiento = $modeloElemento->getReqAprovisionamiento();
        $nombreModeloElemento = $modeloElemento->getNombreModeloElemento();
        $nombreInterfaceElemento = $interfaceElemento->getNombreInterfaceElemento();
        /*----------------------------------------------------------------------*/
      
        /*OBTENER SCRIPT--------------------------------------------------------*/
        $scriptArray = $this->servicioGeneral->obtenerArregloScript("activarCliente",$modeloElemento);
        $idDocumento= $scriptArray[0]->idDocumento;
        $usuario= $scriptArray[0]->usuario;
        $protocolo= $scriptArray[0]->protocolo;
        /*----------------------------------------------------------------------*/
      
        /*LOGICA DE NEGOCIO-----------------------------------------------------*/
        if(stristr($plan, "VDSL") === FALSE) {
            $flagSCE=0;
        }
        else{
            $flagSCE=1;
        }
        if($ultimaMilla=="Radio"){
            //activacion de la mac en la base de radio
            if($reqAprovisionamiento=="SI"){
                $datos = $mac.",".$nombreInterfaceElemento;
                $resultadJson= $this->activarClienteIPTECOM($idDocumento, $usuario, "radio", $interfaceElemento->getElementoId(), $datos);
                $status=$resultadJson->status;
            }
            else{
                $status="OK";
            }

            if($status=="OK"){
                //grabar caracteristica
                $caracteristicaMac = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                          ->findBy(array( "descripcionCaracteristica" => "MAC", "estado"=>"Activo"));
                if(count($caracteristicaMac)>0){
                    $pcMac = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                               ->findBy(array( "productoId" => $producto->getId(), "caracteristicaId"=>$caracteristicaMac[0]->getId()));
                    if(count($pcMac)>0){
                        $spcMac = new InfoServicioProdCaract();
                        $spcMac->setServicioId($servicio->getId());
                        $spcMac->setProductoCaracterisiticaId($pcMac[0]->getId());
                        $spcMac->setValor($mac);
                        $spcMac->setEstado("Activo");
                        $spcMac->setUsrCreacion($usrCreacion);
                        $spcMac->setFeCreacion(new \DateTime('now'));
                        $spcMac->setUsrUltMod($usrCreacion);
                        $spcMac->setFeUltMod(new \DateTime('now'));
                        $this->emComercial->persist($spcMac);
                        $this->emComercial->flush();
                    }
                }

                //crear InfoIp
                $infoIp = new InfoIp();
                $infoIp->setIp($ipCpeRadio);
                $infoIp->setEstado("Activo");
                $infoIp->setTipoIp("RADIO");
                $infoIp->setVersionIp("IPV4");
                $infoIp->setServicioId($servicio->getId());
                $infoIp->setUsrCreacion($usrCreacion);
                $infoIp->setFeCreacion(new \DateTime('now'));
                $infoIp->setIpCreacion($ipCreacion);
                $this->emInfraestructura->persist($infoIp);
                $this->emInfraestructura->flush();
            }
            else{
                $status="ERROR";
            }

        }
        else{
            //ultima milla: cobre
            $caracteristicaVci = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findBy(array( "descripcionCaracteristica" => "VCI", "estado"=>"Activo"));
            $pcVci = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                       ->findBy(array( "productoId" => $producto->getId(), "caracteristicaId"=>$caracteristicaVci[0]->getId()));
            $ispcVci = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                         ->findBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId"=>$pcVci[0]->getId()));


            if($ispcVci[0]->getValor()>31 && $ispcVci[0]->getValor()<=100)
                $vciValor = "0/".$ispcVci[0]->getValor();
            else
                $vciValor = "0/35";

            if($reqAprovisionamiento=="SI"){ // si requieren aprovisionamiento
                  if($nombreModeloElemento=="A2024"){
                      $caracteristicaVlan = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                              ->findBy(array( "descripcionCaracteristica" => "VLAN", "estado"=>"Activo"));
                      $pcVlan = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                  ->findBy(array( "productoId" => $producto->getId(), "caracteristicaId"=>$caracteristicaVlan[0]->getId()));
                      $ispcVlan = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->findBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId"=>$pcVlan[0]->getId()));

                      $datos = $nombreInterfaceElemento.",".$perfil.",".$login.",".$vciValor.", 1";

                      $resultadJson= $this->activarClienteA2024($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);
                  }
                  else if($nombreModeloElemento=="A2048"){
                      $caracteristicaVlan = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findBy(array( "descripcionCaracteristica" => "VLAN", "estado"=>"Activo"));
                      $pcVlan = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                  ->findBy(array( "productoId" => $producto->getId(), "caracteristicaId"=>$caracteristicaVlan[0]->getId()));
                      $ispcVlan = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->findBy(array( "servicioId" => $servicio->getId(), "productoCaracterisiticaId"=>$pcVlan[0]->getId()));

                      $datos = $nombreInterfaceElemento.",".$perfil.",".$login.",".$vciValor.", 1";

                      $resultadJson= $this->activarClienteA2048($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);
                  }
                  else if($nombreModeloElemento=="R1AD24A"){
                      $ptoFormateado = $nombreInterfaceElemento.".1";
                      $datos = $nombreInterfaceElemento.",".$nombreInterfaceElemento.",".$login.",".$ptoFormateado.",".$ptoFormateado.",".
                               $vciValor.",".$ptoFormateado.",".$nombreInterfaceElemento.",".$capacidad2.",".$capacidad1;
                    
                      $resultadJson= $this->activarClienteR1AD24A($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);

                  }
                  else if($nombreModeloElemento=="R1AD48A"){
                      $ptoFormateado = $nombreInterfaceElemento.".1";
                      $datos = $nombreInterfaceElemento.",".$nombreInterfaceElemento.",".$login.",".$ptoFormateado.",".$ptoFormateado.",".
                               $vciValor.",".$ptoFormateado.",".$nombreInterfaceElemento.",".$capacidad2.",".$capacidad1;

                      $resultadJson= $this->activarClienteR1AD48A($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);
                  }
                  else if($nombreModeloElemento=="6524"){
                      $datos = $nombreInterfaceElemento.",".$nombreInterfaceElemento.",".$capacidad2.",".$capacidad1.",".$nombreInterfaceElemento.",".
                               $login.",".$nombreInterfaceElemento.",".$vciValor;
                    
                      $resultadJson= $this->activarCliente6524($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);
                  }
                  else if($nombreModeloElemento=="7224"){
                      $datos = $nombreInterfaceElemento.",".$nombreInterfaceElemento.",".$vciValor.",".$nombreInterfaceElemento.",".
                               $nombreInterfaceElemento.",".$nombreInterfaceElemento.",".$nombreInterfaceElemento.",".$vciValor.",".
                               $nombreInterfaceElemento.",".$capacidad2.",".$capacidad1.",".$nombreInterfaceElemento.",".$login;

                      $resultadJson= $this->activarCliente7224($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);
                  }
                  else if($nombreModeloElemento=="MEA1"){
                      $datos = $nombreInterfaceElemento.",".$perfil.",".$vciValor.",".$vciValor.",".$login;

                      $resultadJson = $this->activarClienteMea1($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);
                  }
                  else if($nombreModeloElemento=="MEA3"){
                      $datos = $nombreInterfaceElemento.",".$perfil.",".$vciValor.",".$vciValor.",".$login;
                      $resultadJson = $this->activarClienteMea3($idDocumento, $usuario, $protocolo, $interfaceElemento->getElementoId(), $datos);
                  }
                  $status=$resultadJson->status;
                  $mensaje = $resultadJson->mensaje;
            }
            else{
                $status="OK";
            }

        }
      
        if($status=="OK"){
            if($flagSCE==1){
                if($reqAprovisionamiento=="SI"){
                    $resultadJsonSce = $this->activarClienteSCE($servicio->getId(), "activar");
                    $statusSce = $resultadJsonSce->status;
                }
                else{
                    $status="OK";
                }

                if($statusSce=="OK"){
                    $status="OK";
                }
                else if($statusSce=="ERROR"){
                    $status="ERROR SCE";
                }
            }
        }
        /*----------------------------------------------------------------------*/
        $respuestaArray[] = array('status'=>$status, 'mensaje'=>$mensaje);
        return $respuestaArray;
    }
  
    public function activarPuertoPorReubicacion($flagTipoOrden){
        $respuesta = array();
      
        $status="OK";
        $flagTipoOrden=1;
        $respuesta[]=array('status'=>$status, 'flagTipoOrden'=>$flagTipoOrden);
      
        return $respuesta;
    }

    //TRANSTELCO
    /**
     * Funcion que sirve para activar clientes vdsl en el sce
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteSCE($idServicio, $accion)
    {
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/ttco_sce.jar '" . $this->host . "' '" .
            $idServicio . "' '" . $accion . "' '" . $this->pathParameters . "'";
        $salida = shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo A2024
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteA2024($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo A2048
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteA2048($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo R1AD24A
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteR1AD24A($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo R1AD48A
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteR1AD48A($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo 7224
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarCliente7224($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo 6524
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarCliente6524($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un radio de marca IPTECOM
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteIPTECOM($idDocumento, $usuario, $tipo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoRadio($idDocumento, $usuario, $tipo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo MEA1
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteMea1($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para activar clientes que se encuentran
     * en un dslam modelo MEA3
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-11-2014
     */
    public function activarClienteMea3($idDocumento, $usuario, $protocolo, $elementoId, $datos)
    {
        $salida = $this->servicioGeneral->ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $elementoId->getId(), $datos);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    public function scriptsTTCO($ipDslam, $modelo,$accion,$login, $responsable_ejecucion, $email_responsable, $parametrosTecnicos,$parametroVci){
       $respuesta = new Response();
        $respuesta->headers->set('Content-Type', 'text/plain');
        // echo("holaa"); die();
          $fecha= date("Y-m-d");
         //$comando = "nohup java -jar -Djava.security.egd=file:/dev/./urandom /home/telcos/src/telconet/tecnicoBundle/batch/scriptsTTCO.jar '".$ipDslam."' '".$modelo."' '".$accion."' '".$login."' '".$responsable_ejecucion."' '".$email_responsable."' '".$parametrosTecnicos."' '".$parametroVci."'   >> /home/telcos/src/telconet/tecnicoBundle/batch/scriptsTTCO-$fecha.txt & ";
      
        /*$salida= shell_exec($comando);
          $pos = strpos($salida, "{");
        $jsonObj= substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);*/
          return $respuesta->setContent("OK");
    }
    //----- TRANSTELCO
    
    /*
     * ******************************************************
     * FUNCIONES PARA CACTI
     * ******************************************************
     */
    /**
     * Funcion que sirve para crear el elemento cpe en el cacti
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 14-06-2016
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.1 2016-08-10 Se genera clave para cacti y se registra en BD como Característica CACTI_PASSWORD
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 2016-09-05 Se quita filtro de tipo de ip luego de confirmar con QA que no debe ser aplicado en esa consulta,
     *                         debido que, esta ocasionando problemas al generar CACTI de servicios en los cuales tienen registradas
     *                         las ips de tipo PUBLICA
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 2016-09-15 Se agrega programación para recuperar elemento CPE para servicios con um radio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 2016-11-01 Se agrega cambio para que soporte servicios que son migrados y no tienen data de GIS, cambio ayuda
     *                         a obtener información de CPE del cliente
     * 
     * @param $arrayParametros [idServicio, idPersonaEmpresaRol, idEmpresa, usrCreacion, ipCreacion]
     */
    public function crearCacti($arrayParametros)
    {
        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emComercial->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
        
        try
        {
            $servicio        = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['idServicio']);
            $servicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                    ->findOneBy(array('servicioId' => $arrayParametros['idServicio']));
            $objTipoMedio    = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                    ->find($servicioTecnico->getUltimaMillaId());
                                        
            $boolEsFibraRuta = false;
        
            //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
            $objServProdCaractTipoFact = $this->servicioGeneral->getServicioProductoCaracteristica( $servicio,
                                                                                                    'TIPO_FACTIBILIDAD',
                                                                                                    $servicio->getProductoId() );
            
            if(!is_object($servicioTecnico))            
            {
                throw new \Exception("No existe información técnica vinculado al Servicio!");
            }
            
            if($objTipoMedio->getNombreTipoMedio() == "Fibra Optica")
            {
                if($objServProdCaractTipoFact)
                {
                    if($objServProdCaractTipoFact->getValor() == 'RUTA')
                    {
                        $boolEsFibraRuta = true;
                    }            
                }
                else
                { 
                    if($servicioTecnico->getElementoConectorId())
                    {
                        $boolEsFibraRuta = true;
                    }
                }
            }
        
            $punto                 = $servicio->getPuntoId();
            
            //ciudad
            $strCanton             = $punto->getSectorId()->getParroquiaId()->getCantonId()->getNombreCanton();
            
            //jurisdiccion 
            $strNombreJurisdiccion = "";
            $objJurisdiccion       = $this->emInfraestructura->getRepository('schemaBundle:AdmiJurisdiccion')
                                                             ->find($punto->getPuntoCoberturaId());
            if(is_object($objJurisdiccion))
            {
                $strNombreJurisdiccion = $objJurisdiccion->getNombreJurisdiccion();
            }
            else
            {
                throw new \Exception("Punto no tiene Punto de Cobertura, Favor Revisar!");
            }

            //ip del servicio
            $objIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                             ->findOneBy(array('servicioId' => $arrayParametros['idServicio'],
                                                               'estado'     => "Activo"));
            
            $strIp = "";
            if(is_object($objIp))
            {
                $strIp = $objIp->getIp();
            }
            else
            {
                throw new \Exception("Servicio no tiene Ip, Favor Revisar!");
            }
            
            //elemento sw
            $objElementoSw = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($servicioTecnico->getElementoId());
            if(is_object($objElementoSw))
            {
                $strNombreElementoSw = $objElementoSw->getNombreElemento();
            }
            else
            {
                throw new \Exception("Servicio no tiene Elemento Switch, Favor Revisar!");
            }
            
            //puerto sw
            $objPuertoSw = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                ->find($servicioTecnico->getInterfaceElementoId());
            if(is_object($objPuertoSw))
            {
                $strNombrePuertoSw = $objPuertoSw->getNombreInterfaceElemento();
            }
            else
            {
                throw new \Exception("Servicio no tiene Puerto Switch asociado, Favor Revisar!");
            }

            //elemento cpe
            $objElementoCpe = null;
            if($objTipoMedio->getNombreTipoMedio() == "Fibra Optica")
            {
                if($boolEsFibraRuta)
                {
                    $interfaceElementoConectorId = $servicioTecnico->getInterfaceElementoConectorId();
                }
                else
                {
                    $interfaceElementoConectorId = $servicioTecnico->getInterfaceElementoClienteId();
                }
                
                $objElementoCliente = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                              ->find($servicioTecnico->getElementoClienteId());
                
                if(!is_object($objElementoCliente))
                {
                    throw new \Exception("No existe Información Equipo de Cliente ligado al Servicio!");
                }
                
                $strTipoElementoCliente = $objElementoCliente->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
                
                //Servicios migrados sin data de GIS
                if($strTipoElementoCliente == 'CPE' || $strTipoElementoCliente == 'ROUTER')
                {
                    $objElementoCpe = $objElementoCliente;
                }
                else
                {
                    $arrayParametrosCpe = array('interfaceElementoConectorId'   => $interfaceElementoConectorId,
                                                'tipoElemento'                  => "CPE");
                    $arrayRespuestaCpe  = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                               ->getElementoClienteByTipoElemento($arrayParametrosCpe);

                    if(isset($arrayRespuestaCpe['msg']) && $arrayRespuestaCpe['msg'] == "FOUND")
                    {                                               
                        $objElementoCpe = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                  ->find($arrayRespuestaCpe['idElemento']);
                    }
                    else
                    {
                        $arrayParametrosCpe = array('interfaceElementoConectorId'   => $interfaceElementoConectorId,
                                                    'tipoElemento'                  => "ROUTER");
                        
                        $arrayRespuestaCpe  = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                               ->getElementoClienteByTipoElemento($arrayParametrosCpe);
                        
                        if(isset($arrayRespuestaCpe['msg']) && $arrayRespuestaCpe['msg'] == "FOUND")
                        {                                               
                            $objElementoCpe = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                      ->find($arrayRespuestaCpe['idElemento']);
                        }
                    }
                }
            }
            else
            {
                //se agrega recuperación de elemento CPE para servicios con um radio
                if ($objTipoMedio->getNombreTipoMedio() == "Radio")
                {
                    $interfaceElementoConectorId = $servicioTecnico->getInterfaceElementoClienteId();
                
                    $arrayParametrosCpe = array('interfaceElementoConectorId'   => $interfaceElementoConectorId,
                                                'tipoElemento'                  => "CPE");
                    $arrayRespuestaCpe  = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                               ->getElementoClienteByTipoElemento($arrayParametrosCpe);

                    if($arrayRespuestaCpe['msg'] == "FOUND")
                    {
                        $objElementoCpe = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($arrayRespuestaCpe['idElemento']);
                    }
                }
                else
                {
                    $objElementoCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                            ->find($servicioTecnico->getElementoClienteId());
                }
            }
            
            $nombreElementoCpe = "";
            if(is_object($objElementoCpe))
            {
                $nombreElementoCpe = $objElementoCpe->getNombreElemento();
                $hostname          = explode(".", $nombreElementoCpe);
            }
            else
            {
                throw new \Exception("Servicio no tiene Elemento CPE, Favor Revisar!");
            }

            //detalle elemento - propiedad
            $detalleCpe = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                  ->findOneBy(array( 'elementoId'    => $objElementoCpe->getId(),
                                                                     'detalleNombre' => "PROPIEDAD",
                                                                     'estado'        => "Activo"));
            $strDetallePropiedad = "";
            if(is_object($detalleCpe))
            {
                $strDetallePropiedad = $detalleCpe->getDetalleValor();
            }
            else
            {
                throw new \Exception("Elemento CPE no tiene característica de PROPIEDAD, Favor Revisar!");
            }
            
            //obtener contacto tecnico
            $arrayParametrosContacto = array(
                                                'idPersonaEmpresaRol' => $arrayParametros['idPersonaEmpresaRol'],
                                                'estado'              => "Activo",
                                                'idEmpresa'           => $arrayParametros['idEmpresa'],
                                                'strDescFormaContacto'=> "Correo Electronico",
                                                'strContactoTecnico'  => "Contacto Tecnico"
                                            );
            $arrayRespuestaContacto  = $this->emComercial->getRepository('schemaBundle:InfoPersonaContacto')
                                            ->getValorFormaContactoTecnico($arrayParametrosContacto);
            
            $strContactoTecnico = "";
            if(count($arrayRespuestaContacto) > 0)
            {
                $strContactoTecnico = $arrayRespuestaContacto['formaContacto'];
            }
            
            //generar passwd
            $passwd = $this->servicioGeneral->generarClave(10);
            
            $arrayParametrosCacti = array();
            $arrayParametrosCacti['accion']                  = "crear";
            $arrayParametrosCacti['url']                     = "ejecutarCacti";
            $arrayParametrosCacti['login_aux']               = $servicio->getLoginAux();
            $arrayParametrosCacti['login_master']            = $punto->getLogin();
            $arrayParametrosCacti['password_master']         = $passwd;
            $arrayParametrosCacti['city']                    = $strCanton;
            $arrayParametrosCacti['email_contacto_tecnico']  = $strContactoTecnico;
            $arrayParametrosCacti['hostname']                = $hostname[0];
            $arrayParametrosCacti['ip']                      = $strIp;
            $arrayParametrosCacti['sw']                      = $strNombreElementoSw;
            $arrayParametrosCacti['pto']                     = $strNombrePuertoSw;
            $arrayParametrosCacti['propiedad_cpe']           = $strDetallePropiedad;
            $arrayParametrosCacti['servicio']                = $servicio->getProductoId()->getNombreTecnico();
            $arrayParametrosCacti['user_name']               = $arrayParametros['usrCreacion'];
            $arrayParametrosCacti['user_ip']                 = $arrayParametros['ipCreacion'];
            
            //Ejecucion del metodo via WS 
            $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayParametrosCacti);
            
            $status  = $arrayRespuesta['status'];
            $mensaje = $arrayRespuesta['mensaje'];
            
            if($status == "OK")
            {
                //historial del servicio
                $this->servicioGeneral->ingresarServicioHistorial( $servicio, 
                                                                   $servicio->getEstado(), 
                                                                   "Se genero el cacti", 
                                                                   $arrayParametros['usrCreacion'], 
                                                                   $arrayParametros['ipCreacion'] );
                
                $this->servicioGeneral->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                $servicio->getProductoId(), 
                                                                                "CACTI", 
                                                                                "SI", 
                                                                                $arrayParametros['usrCreacion'] );

                $this->servicioGeneral->ingresarServicioProductoCaracteristica( $servicio, 
                                                                                $servicio->getProductoId(), 
                                                                                "CACTI_PASSWORD", 
                                                                                $passwd, 
                                                                                $arrayParametros['usrCreacion'] );
            }
            else
            {
                throw new \Exception($mensaje);
            }
            
            //*DECLARACION DE COMMITS*/
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->commit();
            }
            $arrayFinal   = array('status' => "OK", 'mensaje' => "OK", 'statusCode' => 500);
        }
        catch(\Exception $e)
        {            
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
                        
            $status         = "ERROR";
            $mensaje        = "ERROR EN LA LOGICA DE NEGOCIO:<br> ".$e->getMessage();
            $arrayFinal     = array('status' => "ERROR", 'mensaje' => $mensaje, 'statusCode' => 500);
            return $arrayFinal;
        }
                
        $this->emInfraestructura->getConnection()->close();
        $this->emComercial->getConnection()->close();
        $this->emSoporte->getConnection()->close();
        //*----------------------------------------------------------------------*/
        
        return $arrayFinal;
    }
    
    /*
     * ******************************************************
     * FUNCIONES PARA PRODUCTO OTROS
     * ******************************************************
     */
    
    /**
     * Funcion que genera la activacion de servicios OTROS
     * 
     * @author  Creado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 22-10-2015
     * 
     * @author  Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 22-01-2016 Se corrige validacion de servicios de Internet Dedicado al momento de solicitar activacion de servicios McAfee
     * 
     * @author  Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 04-04-2016 Se agregan estados de servicios de internet permitidos en la activacion de servicios McAfee
     * 
     * 
     * @author  Modificado: Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.3 12-09-2016 Se implementa logica para que soporte la activacion de Licencia Office
     * 
     * @author  Modificado: Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 01-12-2016 - Se crea producto NetlifeCloud en reemplazo del Office 365, se procede a cambiar el producto
     *
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.5 21-06-2017 Se envia false como parametro a la función getDatosClientePorIdServicio.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 19-04-2018 Se cambian nombres de métodos de activación de nuevas suscripciones netlifecloud por
     *                         cambios en ws de Intcomex
     * @since 1.5
     *
     * Se agrega el flujo de notificación para el servicio FOX PREMIUM
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.7
     * @since 26-06-2018
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 16-12-2018 Se modifica el envío de parámetros a las funciones obtenerInformacionClienteMcAffe 
     *                         y guardaServicioProductoCaracteristicaPorServicio
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.8 02-04-2019 Se agrega log de errores y envío de notificación a clientes referente a la suscripción del 
     *                         servicio mcafee contratado
     * @since 1.7
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.10 14-08-2019 Se quita close por problemas en transacciones, para migraciones mcafee no se escribe el campo acción
     *                          según lo indicado por Xavier Moreano
     * @since 1.9
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 04-08-2019 Se agrega validaciones para permitir el flujo nuevo de licencias KASPERSKY para el producto I. PROTEGIDO MULTI PAID
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.10 23-08-2019 Se modifica el mensaje de error enviado a la gestión de licencias y se agrega el envío de la orden de trabajo
     *                           para que no se vuelva a crear la orden de trabajo de los servicios por migración de tecnología de McAfee a Kaspersky
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.0 21-11-2019 - Se agrega el proceso para notificar la Activación del servicio a konibit
     *                           mediante GDA en caso de aplicar.
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 2.1 12-10-2020 - Se agrega el flujo de Activacion para el servicio PARAMOUNT Y NOGGIN cuando estan en estado pendiente
     *                         - Se agrega flujo de creacion de caracteristicas si es por tipo de orden Traslado
     *
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 2.2 01-12-2020 - Se agrega origen de petición para establecer el estado del servicio.
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 2.3 09-08-2021 - Se agrega el flujo para los productos de tv cuando son activados por Movil
     * 
     * 
     * @author Jessenia Piloso <jpiloso@telconet.ec>
     * @version 2.4 27-07-2022 - Se agrega el ingreso y la actualizacion de las caracteristicas para productos konibit, es decir,
     *                           si el producto konibit se activa y ya existe la caracteristica se actualiza, si no existe se ingresa.
     *  
     * @param  $array $arrayParametrosActivacion
     * 
    */
    public function activarServiciosOtros($arrayParametrosActivacion)
    {
        $intIdServicio                                = $arrayParametrosActivacion['idServicio'];
        $strCodEmpresa                                = $arrayParametrosActivacion['idEmpresa'];
        $intIdOficina                                 = $arrayParametrosActivacion['idOficina'];
        $intIdAccion                                  = $arrayParametrosActivacion['idAccion'];
        $strUsrCreacion                               = $arrayParametrosActivacion['usrCreacion'];
        $strClientIp                                  = $arrayParametrosActivacion['clientIp'];
        $entityOrdenDeTrabajo                         = is_object($arrayParametrosActivacion['objOrdenTrabajo']) 
                                                        ? $arrayParametrosActivacion['objOrdenTrabajo'] : null;
        $strMsjHistorial                              = $arrayParametrosActivacion['strMsjHistorial'] 
                                                        ? $arrayParametrosActivacion['strMsjHistorial'] : "Otros: Se confirmo el servicio";
        $strValorAntivirus                            = "";
        $arrayParametros                              = array();
        $arrayRespuestaServicio                       = array();
        $strTipoProducto                              = "";
        $booleanValidaProductoMulti                   = false;
        $booleanValidaProductoTotal                   = false;
        $booleanEnvioDeCorreo                         = false;
        $boolEsProdIProtegMultiPaid                   = false;
        $boolFalse                                    = false;

        $em                                           = $this->emComercial;
        $emSeguridad                                  = $this->emSeguridad;
        
        $objRepoPuntoFormaContacto                    = $em->getRepository('schemaBundle:InfoPuntoFormaContacto');
        $arrayContactosTelefonosMovilClaroPuntoSMS    = array();
        $arrayContactosTelefonosMovilMovistarPuntoSMS = array();
        $arrayContactosTelefonosMovilCntPuntoSMS      = array();
        $arrayContactosCorreosPuntoMail               = array();
        $em->getConnection()->beginTransaction();
        $strOrigenProceso                             = !empty($arrayParametrosActivacion['strOrigen'])?$arrayParametrosActivacion['strOrigen']:"WEB";
        $strEstadoServicio                            = "Activo";

        try
        {
            
            $servicio = $em->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objLogin = $servicio->getPuntoId()->getLogin();
            $accion   = $emSeguridad->getRepository('schemaBundle:SistAccion')->find($intIdAccion);

            if ($servicio->getProductoId())
            {
                $entityAdmiProducto = $em->getRepository('schemaBundle:AdmiProducto')->find($servicio->getProductoId());
            }
            
            $servicioInternet = $em->getRepository('schemaBundle:InfoServicio')->obtieneProductoInternetxPunto($servicio->getPuntoId()->getId());
            if($servicioInternet == null)
            {
                $arrayRespuestaServicio['status'] = 'ERROR';
                throw new \Exception("El punto no tiene un servicio de Internet en estado Activo");
            }
            else
            {
                if ($servicioInternet->getEstado()!='Activo' && 
                    $servicioInternet->getEstado()!='EnVerificacion' && 
                    $servicioInternet->getEstado()!='EnPruebas')
                {
                    $arrayRespuestaServicio['status'] = 'ERROR';
                    throw new \Exception("El punto no tiene un servicio de Internet en estado Activo");
                }
            }
            
            //verificar si el servicio tiene solo producto
            if($entityAdmiProducto)
            {
                $boolEsProdIProtegMultiPaid = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTEGIDO MULTI PAID');
                $booleanValidaProducto = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTEGIDO');
                $booleanValidaProductoProteccionTotal = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTECCION');
                $booleanValidaProductoOffice          = strpos($entityAdmiProducto->getDescripcionProducto(), 'NetlifeCloud');

                if($boolEsProdIProtegMultiPaid !== $boolFalse)
                {
                    $arrayValidaFlujoAntivirus  = $this->serviceLicenciasKaspersky->validaFlujoAntivirus(array( 
                                                                                                                "intIdPunto"        => 
                                                                                                                $servicio->getPuntoId()->getId(),
                                                                                                                "strCodEmpresa"     => $strCodEmpresa
                                                                                                                ));
                    $strFlujoAntivirus          = $arrayValidaFlujoAntivirus["strFlujoAntivirus"];
                    $strValorAntivirus          = $arrayValidaFlujoAntivirus["strValorAntivirus"];
                }
                else
                {
                    $strFlujoAntivirus          = "ANTERIOR";
                }
                if($strFlujoAntivirus === "NUEVO")
                {
                    $strMsjHistorial                = "Se activó el servicio ".$entityAdmiProducto->getDescripcionProducto().
                                                      " con tecnología ".$strValorAntivirus;
                    $arrayParamsLicencias           = array("strProceso"                => "ACTIVACION_ANTIVIRUS",
                                                            "strEscenario"              => "ACTIVACION_PROD_ADICIONAL",
                                                            "objServicio"               => $servicio,
                                                            "objPunto"                  => $servicio->getPuntoId(),
                                                            "strCodEmpresa"             => $strCodEmpresa,
                                                            "intIdOficina"              => $intIdOficina,
                                                            "objProductoIPMP"           => null,
                                                            "strUsrCreacion"            => $strUsrCreacion,
                                                            "strIpCreacion"             => $strClientIp,
                                                            "strEstadoServicioInicial"  => $servicio->getEstado(),
                                                            "strMsjErrorAdicHtml"       => "No se ha podido activar el servicio ".
                                                                                           $entityAdmiProducto->getDescripcionProducto(),
                                                            "objOrdenTrabajo"           => $entityOrdenDeTrabajo
                                                            );
                    $arrayRespuestaGestionLicencias = $this->serviceLicenciasKaspersky->gestionarLicencias($arrayParamsLicencias);
                    

                    $strStatusGestionLicencias      = $arrayRespuestaGestionLicencias["status"];
                    $strMensajeGestionLicencias     = $arrayRespuestaGestionLicencias["mensaje"];
                    $entityOrdenDeTrabajo           = $arrayRespuestaGestionLicencias["objOrdenTrabajo"];
                    $arrayRespuestaWs               = $arrayRespuestaGestionLicencias["arrayRespuestaWs"];
                    if($strStatusGestionLicencias === "ERROR")
                    {
                        $arrayRespuestaServicio['status'] = "ERROR";
                        throw new \Exception($strMensajeGestionLicencias);
                    }
                    else if(isset($arrayRespuestaWs) && !empty($arrayRespuestaWs) && $arrayRespuestaWs["status"] !== "OK")
                    {
                        $arrayRespuestaServicio['status']  = 'ERROR';
                        $arrayRespuestaServicio['mensaje'] = $arrayRespuestaWs["mensaje"];
                        return $arrayRespuestaServicio;
                    }
                    
                    /**
                     * Envío de correo a cliente indicando a cual de todos sus contactos le llegará la notificación de I. Protegido Multi Paid
                     * con la información de sus licencias contratadas
                     */
                    $objPuntoServicio   = $servicio->getPuntoId();
                    $objPerServicio     = $objPuntoServicio->getPersonaEmpresaRolId();
                    $objPersonaServicio = $objPerServicio->getPersonaId();
                    $strNombreCliente   = sprintf("%s",$objPersonaServicio);

                    $arrayParamsCorreosSplit    = array("intIdPunto"        => $servicio->getPuntoId()->getId(),
                                                        "strUsrCreacion"    => $strUsrCreacion,
                                                        "strIpCreacion"     => $strClientIp);
                    $arrayCorreosCliente   = $this->serviceLicenciasKaspersky->getCorreosSplitLicencias($arrayParamsCorreosSplit);
                    
                    $arrayParamsGetSpcCorreo    = array("objServicio"       => $servicio,
                                                        "strCaracteristica" => "CORREO ELECTRONICO");
                    $arrayRespuestaSpcCorreo    = $this->serviceLicenciasKaspersky
                                                       ->obtenerValorServicioProductoCaracteristica($arrayParamsGetSpcCorreo);
                    if(isset($arrayRespuestaSpcCorreo["objServicioProdCaract"]) && !empty($arrayRespuestaSpcCorreo["objServicioProdCaract"]) 
                        && is_object($arrayRespuestaSpcCorreo["objServicioProdCaract"]))
                    {
                        $strCorreoSuscripcion   = $arrayRespuestaSpcCorreo["objServicioProdCaract"]->getValor();
                        $arrayCorreosCliente[]  = $strCorreoSuscripcion;
                    }
                    else
                    {
                        $strCorreoSuscripcion = "";
                    }
                    
                    // Enviamos correo
                    $arrayParametrosEnvio   = array('nombreCliente' => $strNombreCliente,
                                                    'correo'        => $strCorreoSuscripcion);
                    try
                    {
                        $this->envioPlantilla->generarEnvioPlantilla(   'Bienvenido a NetlifeDefense, el sistema de '.
                                                                        'seguridad informática para proteger tu vida digital.', 
                                                                        $arrayCorreosCliente, 
                                                                        'ACTIVAIPMP', 
                                                                        $arrayParametrosEnvio, 
                                                                        '','','', null, false,
                                                                        'notificacionesnetlife@netlife.info.ec');
                    }
                    catch (\Exception $e)
                    {
                        error_log("No se ha podido enviar el correo con código ACTIVAIPMP ".$e->getMessage());
                    }
                }
                else if ($booleanValidaProducto !== false || $booleanValidaProductoProteccionTotal !== false)
                {
                    $respuesta = $this->licenciasMcAfee->generaOrdenDeTrabajo($em, $strCodEmpresa, $intIdOficina, $servicio->getPuntoId(),
                                                                              $strClientIp, $strUsrCreacion);
                    if ($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }
                    $entityOrdenDeTrabajo = $respuesta["mensaje"];
                    //--SE GRABARAN LAS CARACTERISTICAS EN EL SERVICIO
                    
                    $datosCliente = $em->getRepository("schemaBundle:InfoPersona")->getDatosClientePorIdServicio($servicio->getId(),"esProducto");
                    
                    if (!$datosCliente['ID_PERSONA'])
                    {
                        $datosCliente = $em->getRepository("schemaBundle:InfoPersona")->getDatosClientePorIdServicio($servicio->getId(),false);
                    }

                    $arrayParametros = $this->licenciasMcAfee
                                            ->obtenerInformacionClienteMcAffe(array("intIdPersona"      => $datosCliente['ID_PERSONA'],
                                                                                    "intIdServicio"     => $servicio->getId(),
                                                                                    "strNombrePlan"     => "",
                                                                                    "strEsActivacion"   => "SI"));
                    $arrayParametros["strTipoTransaccion"] = 'Activacion';
                    if ($arrayParametros["strError"] == 'true')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception("problemas al obtener informacion del cliente");
                    }
                    
                    $arrayParamsGuardarSpc = array( "objServicio"       => $servicio,
                                                    "strUsrCreacion"    => $strUsrCreacion);

                    $booleanValidaProductoMulti = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTEGIDO MULTI');
                    $booleanValidaProductoTotal = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTECCION TOTAL');
                    if ($booleanValidaProductoMulti !== false || $booleanValidaProductoTotal !== false)
                    {
                        $booleanValidaProductoMultiTrial = strpos($entityAdmiProducto->getDescripcionProducto(), 'TRIAL');
                        $booleanValidaProductoTotalTrial = strpos($entityAdmiProducto->getDescripcionProducto(), 'TRIAL');

                        //verificar si el producto es TRIAL o PAID
                        if ($booleanValidaProductoMultiTrial !== false || $booleanValidaProductoTotalTrial !== false)
                        {
                            $strTipoProducto = "TRIAL";
                            $respuesta = $this->licenciasMcAfee->generaSolicitudDescuentoMcAfee($em, $servicio, $strUsrCreacion);
                            if ($respuesta["status"] == 'ERROR')
                            {
                                $arrayRespuestaServicio['status'] = 'ERROR';
                                throw new \Exception($respuesta["mensaje"]);
                            }
                        }
                        else
                        {
                            $strTipoProducto = "PAID";
                        }

                        //setear parametros para producto I. PROTEGIDO MULTI
                        if ($booleanValidaProductoMulti !== false)
                        {
                            $entityAdmiParametroDet = $em->getRepository('schemaBundle:AdmiParametroDet')
                                    ->findOneBy(array("descripcion" => "I. PROTEGIDO MULTI",
                                "estado" => "Activo",
                                "valor1" => $strTipoProducto
                                    )
                            );

                            if (!$entityAdmiParametroDet)
                            {
                                $arrayRespuestaServicio['status'] = 'ERROR';
                                throw new \Exception("problemas al obtener informacion del producto McAfee.");
                            }

                            $arrayParametros["strSKU"] = $entityAdmiParametroDet->getValor2();
                            $arrayParametros["strMetodo"] = 'CrearSuscripcionMultidispositivo';
                            $arrayParametros["intLIC_QTY"] = $arrayParametros["strCantidadDispositivos"];
                            $arrayParametros["intQTY"] = 1;
                        }
                        //setear parametros para producto I. PROTECCION TOTAL
                        else if ($booleanValidaProductoTotal !== false)
                        {
                            $entityAdmiParametroDet = $em->getRepository('schemaBundle:AdmiParametroDet')
                                    ->findOneBy(array("descripcion" => "I. PROTECCION TOTAL",
                                "estado" => "Activo",
                                "valor1" => $strTipoProducto
                                    )
                            );

                            if (!$entityAdmiParametroDet)
                            {
                                $arrayRespuestaServicio['status'] = 'ERROR';
                                throw new \Exception("problemas al obtener informacion del producto McAfee.");
                            }
                            $arrayParametros["strSKU"] = $entityAdmiParametroDet->getValor2();
                            $arrayParametros["strMetodo"] = 'CrearNuevaSuscripcion';
                            $arrayParametros["intLIC_QTY"] = 0;
                            $arrayParametros["intQTY"] = 1;
                        }
                        else
                        {
                            $arrayRespuestaServicio['status'] = 'ERROR';
                            throw new \Exception("No existe definición para el producto PAID");
                        }
                    }//if($booleanValidaProductoMulti !== false || $booleanValidaProductoTotal !== false)
                    else
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception("No existe definición para el producto");
                    }

                    $respuestaServicio = $this->licenciasMcAfee->operacionesSuscripcionCliente($arrayParametros);
                    if ($respuestaServicio["procesoExitoso"] == "false")
                    {
                        if ($em->getConnection()->isTransactionActive())
                        {
                            $em->getConnection()->rollback();
                        }
                        $em->getConnection()->beginTransaction();
                        //historial del servicio
                        $objServicioHistorial = new InfoServicioHistorial();
                        $objServicioHistorial->setServicioId($servicio);
                        $objServicioHistorial->setObservacion("No se ha podido activar el servicio ".$entityAdmiProducto->getDescripcionProducto().
                                                              " con tecnología MCAFEE<br>".$respuestaServicio["mensajeRespuesta"]);
                        $objServicioHistorial->setEstado($servicio->getEstado());
                        $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objServicioHistorial->setIpCreacion($strClientIp);
                        $em->persist($objServicioHistorial);
                        $em->flush();
                        $em->getConnection()->commit();
                        
                        $arrayRespuestaServicio['status']  = 'ERROR';
                        $arrayRespuestaServicio['mensaje'] = $respuestaServicio["mensajeRespuesta"];
                        return $arrayRespuestaServicio;
                    }
                    
                    //grabar caracteristica PASSWORD
                    $arrayParamsGuardarSpc["strCaracteristica"] = "PASSWORD";
                    $arrayParamsGuardarSpc["strValor"]          = $arrayParametros["strPassword"];
                    $respuesta = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                    if ($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }

                    //grabar caracteristica PARTNERREF
                    $arrayParamsGuardarSpc["strCaracteristica"] = "PARTNERREF";
                    $arrayParamsGuardarSpc["strValor"]          = $arrayParametros["strPartnerRef"];
                    $respuesta = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                    if ($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }

                    //grabar caracteristica CUSTOMERCONTEXTID
                    $arrayParamsGuardarSpc["strCaracteristica"] = "CUSTOMERCONTEXTID";
                    $arrayParamsGuardarSpc["strValor"]          = $arrayParametros["strCustomerContextId"];
                    $respuesta = $this->licenciasMcAfee
                            ->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                    if ($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }
                    
                    //grabar caracteristica SKU
                    $arrayParamsGuardarSpc["strCaracteristica"] = "SKU";
                    $arrayParamsGuardarSpc["strValor"]          = $arrayParametros["strSKU"];
                    $respuesta = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                    if ($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }
                    
                    //grabar caracteristica REFERENCIA
                    $arrayParamsGuardarSpc["strCaracteristica"] = "REFERENCIA";
                    $arrayParamsGuardarSpc["strValor"]          = $respuestaServicio["referencia"];
                    $respuesta = $this->licenciasMcAfee->guardaServicioProductoCaracteristicaPorServicio($arrayParamsGuardarSpc);
                    if($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }
                    
                    /* envío de correo a cliente indicando a cual de todos sus contactos le llegará la notificación de McAfee
                      con la información de sus licencias contratadas */
                    $objPuntoServicio   = $servicio->getPuntoId();
                    $objPerServicio     = $objPuntoServicio->getPersonaEmpresaRolId();
                    $objPersonaServicio = $objPerServicio->getPersonaId();
                    $strNombreCliente   = sprintf("%s",$objPersonaServicio);
                    $arrayParametrosCorreoMcAfee = array();
                    $arrayParametrosCorreoMcAfee['intIdPunto']     = $servicio->getPuntoId()->getId();
                    $arrayParametrosCorreoMcAfee['strUsrCreacion'] = $strUsrCreacion;
                    $arrayParametrosCorreoMcAfee['strIpCreacion']  = $strClientIp;
                    $arrayCorreosCliente   = $this->servicioGeneral->getCorreosMcAfee($arrayParametrosCorreoMcAfee);
                    $arrayCorreosCliente[] = $arrayParametros["strCorreo"];
                    // Enviamos correo
                    $arrayParametrosEnvio   = array('nombreCliente' => $strNombreCliente,
                                                    'correo'        => $arrayParametros["strCorreo"]);
                    try
                    {
                        $this->envioPlantilla->generarEnvioPlantilla(   'Bienvenido a NetlifeDefense, el sistema de '.
                                                                        'seguridad informática para proteger tu vida digital.', 
                                                                        $arrayCorreosCliente, 
                                                                        'ACT_MCAFEE', 
                                                                        $arrayParametrosEnvio, 
                                                                        '','','', null, false,
                                                                        'notificacionesnetlife@netlife.info.ec');
                    }
                    catch (\Exception $e)
                    {
                        error_log("No se ha podido enviar el correo con código ACT_MCAFEE ".$e->getMessage());
                    }
                }
                //==============================[INI] NetlifeCloud==============================
                else if($booleanValidaProductoOffice !== false)
                {
                    $arrayGuardarProdCarac                   = array();
                    $arrayGuardarProdCarac['servicio']       = $servicio;
                    $arrayGuardarProdCarac['strUser']        = $strUsrCreacion;
                    $arrayGuardarProdCarac['strIpClient']    = $strClientIp;
                    
                    $arrayGeneraOrdTrabajo                   = array();
                    $arrayGeneraOrdTrabajo['strCodEmpresa']  = $strCodEmpresa;
                    $arrayGeneraOrdTrabajo['intIdOficina']   = $intIdOficina;
                    $arrayGeneraOrdTrabajo['entityPunto']    = $servicio->getPuntoId();
                    $arrayGeneraOrdTrabajo['strIpClient']    = $strClientIp;
                    $arrayGeneraOrdTrabajo['strUser']        = $strUsrCreacion;
                    
                    $arrayObtenerInformacion                 = array();
                    
                    $respuesta                               = $this->licenciasOffice365->generaOrdenDeTrabajo($arrayGeneraOrdTrabajo);
                    if($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }
                    $entityOrdenDeTrabajo = $respuesta["mensaje"];
                    //--SE GRABARAN LAS CARACTERISTICAS EN EL SERVICIO

                    $datosCliente         = $em->getRepository("schemaBundle:InfoPersona")
                                               ->getDatosClientePorIdServicio($servicio->getId(),
                                                                              "esProducto");

                    if(!$datosCliente['ID_PERSONA'])
                    {
                        $datosCliente = $em->getRepository("schemaBundle:InfoPersona")
                                           ->getDatosClientePorIdServicio($servicio->getId(),false);
                    }                    
                    $arrayObtenerInformacion["intIdPersona"]  = $datosCliente['ID_PERSONA'];
                    $arrayObtenerInformacion["intIdServicio"] = $servicio->getId();
                    $arrayObtenerInformacion["strUser"]       = $strUsrCreacion;
                    $arrayObtenerInformacion["strIpClient"]   = $strClientIp;
                    $arrayParametros = $this->licenciasOffice365
                                            ->obtenerInformacionClienteOffice365($arrayObtenerInformacion);

                    $arrayParametros["strMetodo"] = 'placeorder';
                    if($arrayParametros["strError"] == 'true')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception("Problemas al obtener informacion del cliente");
                    }
                    $arrayParametros["strUser"]     = $strUsrCreacion;
                    $arrayParametros["strIpClient"] = $strClientIp;
                    $respuestaServicio              = $this->licenciasOffice365->operacionesSuscripcionCliente($arrayParametros);                  
                    if(!$respuestaServicio["procesoExitoso"])
                    {
                        if($em->getConnection()->isTransactionActive())
                        {
                            $em->getConnection()->rollback();
                        }
                        $arrayRespuestaServicio['status']  = 'ERROR';
                        $arrayRespuestaServicio['mensaje'] = $respuestaServicio["mensajeRespuesta"];
                        return $arrayRespuestaServicio;
                    }

                    //grabar caracteristica ORDERNUMBER
                    $arrayGuardarProdCarac['nombreCaracteristica'] = "ORDERNUMBER";
                    $arrayGuardarProdCarac['valor']                = $respuestaServicio["OrderNumber"];
                    
                    $respuesta      = $this->licenciasOffice365
                                           ->guardaServicioProductoCaracteristicaPorServicio($arrayGuardarProdCarac);

                    if($respuesta["status"] == 'ERROR')
                    {
                        $arrayRespuestaServicio['status'] = 'ERROR';
                        throw new \Exception($respuesta["mensaje"]);
                    }

                    //Buscar el product key en base al ordernumber
                    $arrayParametros["strMetodo"]   = 'purchaseesdproducts';
                    $arrayParametros["orderNumber"] = $respuestaServicio["OrderNumber"];
                    
                    if($arrayParametros["orderNumber"])
                    {
                        $arrayParametros["strUser"]     = $strUsrCreacion;
                        $arrayParametros["strIpClient"] = $strClientIp;
                        $respuestaServicio = $this->licenciasOffice365->operacionesSuscripcionCliente($arrayParametros);
                        if(!$respuestaServicio["procesoExitoso"])
                        {
                            $booleanEnvioDeCorreo = false;
                            if($em->getConnection()->isTransactionActive())
                            {
                                $em->getConnection()->rollback();
                            }
                            $arrayRespuestaServicio['status']  = 'ERROR';
                            $arrayRespuestaServicio['mensaje'] = $respuestaServicio["mensajeRespuesta"];
                            return $arrayRespuestaServicio;
                        } 
                        // Clave del Producto NetlifeCloud
                        $strSuccesfulKeyProduct = $respuestaServicio[0]['EsdFulfillmentStatus'];
                        
                        // Descripción del producto que se compra
                        $strDescripcion         = $respuestaServicio[0]['Description'];
                        if((strtoupper($strSuccesfulKeyProduct) != 'OK') && (strtoupper($strSuccesfulKeyProduct) != 'ORDERQUANTITYALREADYFULFILLED'))
                        {
                            $arrayRespuestaServicio['status'] = 'ERROR';
                            $respuesta["mensaje"]             = 'No se ha podido activar el servicio problemas de conexión con WebService '
                                                                . 'informar a sistema';
                            throw new \Exception($respuesta["mensaje"]);
                        }
                        else
                        {
                            $strKeyProduct           = $respuestaServicio[0]['EsdFulfillments'][0]['Products'][0]['Tokens'][0]['ProductKey'];
                            $strUrlDownLoadProduct   = $respuestaServicio[0]['EsdFulfillments'][0]['Products'][0]['Links'][0]['Uri'];
                            $booleanEnvioDeCorreo    = true;
                        }
                        
                    }
                    else
                    {
                        $arrayRespuestaServicio['status']  = 'ERROR';
                        $arrayRespuestaServicio['mensaje'] = 'No existe un número de orden generado, reportar a sistema.';
                        return $arrayRespuestaServicio;
                    }

                    //grabar caracteristica PRODUCTKEY
                    if($booleanEnvioDeCorreo)
                    {
                        //Grabar la clave del producto
                        $arrayGuardarProdCarac['nombreCaracteristica'] = "PRODUCTKEY";
                        $arrayGuardarProdCarac['valor']                = $strKeyProduct;
                        
                        $respuesta      = $this->licenciasOffice365
                                               ->guardaServicioProductoCaracteristicaPorServicio($arrayGuardarProdCarac);                        

                        if($respuesta["status"] == 'ERROR')
                        {
                            $arrayRespuestaServicio['status'] = 'ERROR';
                            throw new \Exception($respuesta["mensaje"]);
                        }
                        
                        //Grabar la descripcion del producto
                        $arrayGuardarProdCarac['nombreCaracteristica'] = "DESCRIPCIONOFFICE";
                        $arrayGuardarProdCarac['valor']                = $strDescripcion;
                        
                        $respuesta      = $this->licenciasOffice365
                                               ->guardaServicioProductoCaracteristicaPorServicio($arrayGuardarProdCarac); 
                        
                        if($respuesta["status"] == 'ERROR')
                        {
                            $arrayRespuestaServicio['status'] = 'ERROR';
                            throw new \Exception($respuesta["mensaje"]);
                        }
                        
                        //Grabar la url del producto
                        $arrayGuardarProdCarac['nombreCaracteristica'] = "URLOFFICE";
                        $arrayGuardarProdCarac['valor']                = $strUrlDownLoadProduct;
                        
                        $respuesta      = $this->licenciasOffice365
                                               ->guardaServicioProductoCaracteristicaPorServicio($arrayGuardarProdCarac); 
                        
                        if($respuesta["status"] == 'ERROR')
                        {
                            $arrayRespuestaServicio['status'] = 'ERROR';
                            throw new \Exception($respuesta["mensaje"]);
                        }
                        
                        
                        //Obtenemos los datos de contacto del cliente al cual se enviaran las notificaciones
        
                        $arrayContactosTelefonosMovilClaroPunto    = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                                      'Telefono Movil Claro');
                        $arrayContactosTelefonosMovilMovistarPunto = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                                      'Telefono Movil Movistar');
                        $arrayContactosTelefonosMovilCntPunto      = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                                      'Telefono Movil CNT');
                        $arrayContactosCorreosPunto                = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                                      'Correo Electronico');
                        
                        //Generamos los arreglos con la informacion de conctacto con el cliente
                        foreach ($arrayContactosTelefonosMovilClaroPunto as $contacto1) 
                        {
                            $arrayContactosTelefonosMovilClaroPuntoSMS[]    = array('value'=>$contacto1['valor'],
                                                                                    'smsbox'=>0);
                        }

                        foreach ($arrayContactosTelefonosMovilMovistarPunto as $contacto2) 
                        {
                            $arrayContactosTelefonosMovilMovistarPuntoSMS[] = array('value'=>$contacto2['valor'],
                                                                                    'smsbox'=>1);
                        }

                        foreach ($arrayContactosTelefonosMovilCntPunto as $contacto3) 
                        {
                            $arrayContactosTelefonosMovilCntPuntoSMS[]      = array('value'=>$contacto3['valor'],
                                                                                    'smsbox'=>1);
                        }

                        foreach ($arrayContactosCorreosPunto as $contacto4) 
                        {
                            $arrayContactosCorreosPuntoMail[]               = $contacto4['valor'];
                        }
                        

                        /** ****************************************************************
                          USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS
                         * **************************************************************** */

                        $strCliente           = $datosCliente['NOMBRES'];
                        $arrayParametrosTarea = array('cliente'      => $strCliente,
                                                      'descripcion'  => $strDescripcion,
                                                      'keyproduct'   => $strKeyProduct,
                                                      'urlproduct'   => $strUrlDownLoadProduct);
                        
                        $this->envioPlantilla->generarEnvioPlantilla("Licencia NetlifeCloud ",
                                                                      $arrayContactosCorreosPuntoMail,
                                                                      'office365',
                                                                      $arrayParametrosTarea,
                                                                      $strCodEmpresa,
                                                                      '',
                                                                      null,
                                                                      '',
                                                                      false,
                                                                      'notificacionesnetlife@netlife.info.ec');
                        
                        /** ****************************************************************
                          USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE SMS
                         * **************************************************************** */

                        $strMensaje             = "Se ha contratado su servicio de NetlifeCloud. La clave del producto es: ".$strKeyProduct.
                                                  " , favor revise su correo para activar el producto ";
                        $strRespSendSMSClaro    = $this->envioSMS->sendSMS($strMensaje, $arrayContactosTelefonosMovilClaroPuntoSMS, 3, 5);
                        $strRespSendSMSMovistar = $this->envioSMS->sendSMS($strMensaje, $arrayContactosTelefonosMovilMovistarPuntoSMS, 3, 5);
                        $strRespSendSMSCNT      = $this->envioSMS->sendSMS($strMensaje, $arrayContactosTelefonosMovilCntPuntoSMS, 3, 5);
                    }
                }
                //==============================[FIN] NetlifeCloud==============================
            }

            //servicio
            if ($entityOrdenDeTrabajo)
            {
                $servicio->setOrdenTrabajoId($entityOrdenDeTrabajo);
            }
            
            if($strOrigenProceso == "MOVIL")
            {
                $strEstadoServicio = "EnVerificacion";
            }
            
            // Validamos si es un producto konibit antes de activar
            $strProdKonibit = "NO";
            $strStatKonibit = "OK";
            $objProdServicio = $servicio->getProductoId();
            if (!empty($objProdServicio)) 
            {
                $arrayListadoServicios = array();
                $arrayListadoServicios = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                'Lista de productos adicionales automaticos',
                                                '','','','','',$strCodEmpresa);
                foreach($arrayListadoServicios as $objListado)
                {
                    // Activacion primero en Konibit si el productos tiene esa caracteristica
                    if ($objProdServicio->getId() == $objListado['valor1'] && 
                        $objListado['valor3'] == "SI")
                    {
                        $strProdKonibit = "SI";
                        break;
                    }
                }
            }
            
            if ($strProdKonibit == "SI")
            {
                // Obtenemos la cantidad de reintentos permitidos
                $intMaxIntentos = 1;
                $arrayParamIntentos = array();
                $arrayParamIntentos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                'Reintentos y delay para los productos incluidos',
                                                '','','','','',$strCodEmpresa);
                if(is_array($arrayParamIntentos) && !empty($arrayParamIntentos))
                {
                    $arrayIntentos = $arrayParamIntentos[0];
                    $intMaxIntentos = $arrayIntentos['valor1'];
                }
                $arrayResKonibit = array();
                $intContError = 0;
                $strMensajeCorreo = "";
                for ($intIntento = 1; $intIntento <= $intMaxIntentos; $intIntento++) 
                {
                    $arrayResKonibit = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                            ->notificarKonibit(array ('intIdServicio'  => $servicio->getId(),
                                                                    'strTipoProceso' => 'ACTIVAR',
                                                                    'strTipoTrx'     => 'INDIVIDUAL',
                                                                    'strUsuario'     => $strUsrCreacion,
                                                                    'strIp'          => $strClientIp,
                                                                    'objUtilService' => $this->serviceUtil));
                    $strKonibit = $arrayResKonibit['status'];
                    if ((!empty($strKonibit) && $strKonibit == "ok"))
                    {
                        $strObsProdAdicional = "Se activa producto en konibit y en telcos";
                        $servicio->setPuntoFacturacionId($servicioInternet->getPuntoFacturacionId());
                        $servicio->setEstado($strEstadoServicio);
                        $em->persist($servicio);

                        //historial del servicio
                        $servicioHistorial = new InfoServicioHistorial();
                        $servicioHistorial->setServicioId($servicio);
                        $servicioHistorial->setObservacion($strObsProdAdicional);
                        $servicioHistorial->setEstado($strEstadoServicio);
                        $servicioHistorial->setUsrCreacion($strUsrCreacion);
                        $servicioHistorial->setFeCreacion(new \DateTime('now'));
                        $servicioHistorial->setIpCreacion($strClientIp);
                        $this->emComercial->persist($servicioHistorial);
                        $this->emComercial->flush();

                        //Se obtiene el registro de la caracteristica del producto 
                        $objProdCaractKonibit = $this->servicioGeneral
                                                ->getServicioProductoCaracteristica(
                                                                        $servicio,
                                                                        'ACTIVO KONIBIT',
                                                                        $servicio->getProductoId());    

                        if (is_object($objProdCaractKonibit) && $objProdCaractKonibit->getValor() != "SI") 
                        {
                            //Se actualiza la caracteristica "ACTIVO KONIBIT SI" luego que el producto adicional se activa    
                            $this->serviceLicenciasKaspersky
                            ->actualizarServicioProductoCaracteristica(
                                                        array("objServicio" => $servicio,
                                                        "strUsrCreacion"    => $strUsrCreacion,
                                                        "objProducto"       => $entityAdmiProducto,
                                                        "strCaracteristica" => "ACTIVO KONIBIT",
                                                        "strValorNuevo"     => "SI"));   
                            
                        } 
                        else if (!is_object($objProdCaractKonibit))
                        {
                            //Se guarda la caracteristica "ACTIVO KONIBIT SI" en caso que no exista  
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio,
                                                                                           $entityAdmiProducto,
                                                                                           "ACTIVO KONIBIT",
                                                                                           "SI",
                                                                                           $strUsrCreacion);
                        }
                    }
                    else
                    {
                        $objServHistKonibit = new InfoServicioHistorial();
                        $objServHistKonibit->setServicioId($servicio);
                        $objServHistKonibit->setObservacion(" El producto adicional no se activó en Konibit ".$intIntento.
                                                            " intento, motivo: ".$arrayResKonibit['message']);
                        $objServHistKonibit->setEstado("Pendiente");
                        $objServHistKonibit->setUsrCreacion($strUsrCreacion);
                        $objServHistKonibit->setFeCreacion(new \DateTime('now'));
                        $objServHistKonibit->setIpCreacion($strClientIp);
                        $this->emComercial->persist($objServHistKonibit);
                        $this->emComercial->flush();
                        
                        //Se obtiene el registro de la caracteristica del producto
                        $objProdCaractKonibit = $this->servicioGeneral
                                                ->getServicioProductoCaracteristica
                                                ($servicio,
                                                'ACTIVO KONIBIT',
                                                $servicio->getProductoId());                                                      
                           
                        if (is_object($objProdCaractKonibit) && $objProdCaractKonibit->getValor() != "NO")
                        {
                             //Se actualiza la caracteristica "ACTIVO KONIBIT a NO" luego que el producto adicional no se activa    
                             $this->serviceLicenciasKaspersky
                            ->actualizarServicioProductoCaracteristica(
                                                        array("objServicio" => $servicio,
                                                        "strUsrCreacion"    => $strUsrCreacion,
                                                        "objProducto"       => $entityAdmiProducto,
                                                        "strCaracteristica" => "ACTIVO KONIBIT",
                                                        "strValorNuevo"          => "NO"));   
                            
                        } 
                        else if (!is_object($objProdCaractKonibit))
                        { 
                            //Se guarda la caracteristica "ACTIVO KONIBIT NO" en caso que no exista
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($servicio,
                                                                                           $entityAdmiProducto,
                                                                                           "ACTIVO KONIBIT",
                                                                                           "NO",
                                                                                           $strUsrCreacion);
                        } 

                        $intContError++;
                        $strRegitro = date('d-m-Y h:i:s a', time()).' - '.$arrayResKonibit['message'];
                        $strMensajeCorreo = $strMensajeCorreo.'<tr>'.'<td>'.$strRegitro.'</td>'.'</tr>';
                        if ($intContError == $intMaxIntentos)
                        {
                            // Confirma los fallos para el rollback y se envia el correo
                            $strStatKonibit = "ERROR";
                            $objPunto = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                ->findOneById($servicio->getPuntoId()->getId());
                            $strAsunto = "Error al activar el producto ".$objProdServicio->getDescripcionProducto();
                            $arrayDestinatarios = null;
                            $arrayValoresParametros = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                    'Lista de correos a enviar para error en konibit',
                                                    '','','','','',$strCodEmpresa);
                            if(is_array($arrayValoresParametros) && !empty($arrayValoresParametros))
                            {
                                $arrayDestinatarios = $this->serviceUtil->obtenerValoresParametro($arrayValoresParametros);
                            }
                            // Enviamos correo para incluir el error
                            $arrayParamClientes = array(
                                'idServicio'        => $servicio->getId(),
                                'booleanEsProducto' => true
                            );
                            $objCliente = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                    ->getDatosClienteDelPuntoPorIdServicio($arrayParamClientes);
                            $strCliente = $objCliente['NOMBRES']. " con identificacion ".$objCliente['IDENTIFICACION_CLIENTE'];
                            $arrayParametrosMail = array(
                                "cliente"  => $strCliente,
                                "login"    => $objPunto->getLogin(),
                                "producto" => $objProdServicio->getDescripcionProducto(),
                                "mensaje"  => $strMensajeCorreo
                            );

                            $this->envioPlantilla->generarEnvioPlantilla(
                                $strAsunto,
                                $arrayDestinatarios,
                                'NOT_ERR_KON',
                                $arrayParametrosMail,
                                $strCodEmpresa,
                                '',
                                '',
                                null,
                                false,
                                'notificaciones_telcos@telconet.ec'
                            );
                            // Se da commit en comercial para que se guarde el historial por error y se reinicia la conexion
                            $this->emComercial->flush();
                            $this->emComercial->commit();
                            $this->emComercial->beginTransaction();
                        }
                    }
                }

            }
            else
            {
                $servicio->setPuntoFacturacionId($servicioInternet->getPuntoFacturacionId());
                $servicio->setEstado($strEstadoServicio);
                $em->persist($servicio);

                //historial del servicio
                $servicioHistorial = new InfoServicioHistorial();
                $servicioHistorial->setServicioId($servicio);
                $servicioHistorial->setObservacion($strMsjHistorial);
                $servicioHistorial->setEstado($strEstadoServicio);
                $servicioHistorial->setUsrCreacion($strUsrCreacion);
                $servicioHistorial->setFeCreacion(new \DateTime('now'));
                $servicioHistorial->setIpCreacion($strClientIp);

                if ($strUsrCreacion !== "MigraMcAfee")
                {
                    $servicioHistorial->setAccion($accion->getNombreAccion());
                }
                $em->persist($servicioHistorial);
            }

            $arrayNombresTecnicoTv   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('PRODUCTOS_TV',//nombre parametro cab
                                                            'COMERCIAL', //modulo cab
                                                            'OBTENER_NOMBRE_TECNICO_PROD_TV',//proceso cab
                                                            'PRODUCTOS_TV', //descripcion det
                                                            $entityAdmiProducto->getNombreTecnico(),'','','','',
                                                            $strCodEmpresa); //empresa
            //Realiza el flujo de tareas para activación FOX PREMIUM, PARAMOUNT Y NOGGIN
            if (is_array($arrayNombresTecnicoTv) && !empty($arrayNombresTecnicoTv))
            {
                    //historial del servicio
                    $servicioHistorial = new InfoServicioHistorial();
                    $servicioHistorial->setServicioId($servicio);
                    $servicioHistorial->setObservacion($arrayNombresTecnicoTv['valor7']);
                    $servicioHistorial->setEstado($strEstadoServicio);
                    $servicioHistorial->setUsrCreacion($strUsrCreacion);
                    $servicioHistorial->setFeCreacion(new \DateTime('now'));
                    $servicioHistorial->setIpCreacion($strClientIp);
                    $em->persist($servicioHistorial);
            }
            else
            {
                //historial del servicio
                $servicioHistorial = new InfoServicioHistorial();
                $servicioHistorial->setServicioId($servicio);
                $servicioHistorial->setObservacion($strMsjHistorial);
                $servicioHistorial->setEstado($strEstadoServicio);
                $servicioHistorial->setUsrCreacion($strUsrCreacion);
                $servicioHistorial->setFeCreacion(new \DateTime('now'));
                $servicioHistorial->setIpCreacion($strClientIp);
                if ($strUsrCreacion !== "MigraMcAfee")
                {
                    $servicioHistorial->setAccion($accion->getNombreAccion());
                }
                $em->persist($servicioHistorial);
            }

            if ($strStatKonibit == "OK")
            {
                $arrayRespuestaServicio['status']  = 'OK';
                $arrayRespuestaServicio['mensaje'] = '';
                $em->flush();
                $em->getConnection()->commit();
            }
            else
            {
                $arrayRespuestaServicio['status']  = 'ERROR';
                $arrayRespuestaServicio['mensaje'] = '';
                $em->getConnection()->rollback();
            }
        }
        catch (\Exception $ex)
        {
            if($em->getConnection()->isTransactionActive())
            {
                $em->getConnection()->rollback();
            }

            if ($arrayRespuestaServicio['status']  == 'ERROR')
            {
                $arrayRespuestaServicio['mensaje'] = $ex->getMessage();    
            }
            else
            {
                $arrayRespuestaServicio['status']  = 'ERROR';
                $arrayRespuestaServicio['mensaje'] = '';  
            }
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activarServiciosOtros',
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp);
        }

        return $arrayRespuestaServicio;
    
    }
    
    
    
    /**
     * getParametrosLineas
     *
     * Metodo que obtiene los parámetros de las linea telefonicas, numero y clave
     *
     * @return $arrayParametros[strMensaje, strNumeroTelefono, strContrasena]
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 16-02-2017
     */    
    
    
    public function getParametrosLineas()
    {
        $strMensaje         = 'OK';
        $strNumeroTelefono  = '';
        //consulto el elemento segun el nombre
        $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->findOneByNombreElemento('softswitch');
        if(is_object($objElemento))
        {
            $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                          ->findOneBy(array('elementoId'      => $objElemento->getId(),
                                                                            'detalleNombre'   => 'NUMERO TELEFONICO',
                                                                            'estado'          => 'Disponible'));
            
            if(is_object($objDetalleElemento))
            {
                $strNumeroTelefono = $objDetalleElemento->getDetalleValor();
            }
            else
            {
                $strMensaje = 'No hay numero disponibles.';
            }
        }

        //genero contraseña
        $strPass = substr(MD5(rand(5, 100) . microtime()), 0, 8);

        
        $arrayParametros[] = array('strMensaje'        => $strMensaje,
                                   'strNumeroTelefono' => $strNumeroTelefono,
                                   'strContrasena'     => $strPass);
       
        
        return $arrayParametros;
    }

    /**
     * asignarLinea
     *
     * Metodo que asigna la linea telefonica y la reserva
     *
     * $arrayPeticiones[ intIdServicio, strDominio, strUser, strIpClient ]
     * @return $arrayResult [status, mensaje, strTelefono, strContrasena ]
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 16-02-2017
     */    
    
    public function asignarLinea($arrayPeticiones)
    {

        $intIdServicio  = $arrayPeticiones['intIdServicio'];
        $strDominio     = $arrayPeticiones['strDominio'];
        $strUser        = $arrayPeticiones['strUser'];
        $strIpClient    = $arrayPeticiones['strIpClient'];
        
        $strContrasena  = '';
        $strTelefono    = '';
        
        $this->emComercial->getConnection()->beginTransaction();

        try
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            
            if(is_object($objServicio))
            {
                //obtengo numero y contraseña
                $arrayResultado = $this->getParametrosLineas();

                if($arrayResultado[0]['strMensaje'] == 'OK')
                {
                    $strContrasena  = $arrayResultado[0]['strContrasena'] ;
                    $strTelefono    = $arrayResultado[0]['strNumeroTelefono'] ;
                }
                else
                {
                    $arrayResult[] = array("status" => "ERROR", "mensaje" => $arrayResultado[0]['strMensaje']);
                    return $arrayResult;    
                }
                

                $objProducto = $objServicio->getProductoId();
                
                if(!is_object($objProducto))
                {
                    $arrayResult[] = array("status" => "ERROR", "mensaje" => "No existe el producto del servicio.");
                    return $arrayResult;                    
                }
                
                //compruebo si la linea sigue aún disponible
                $objDetalleElemento = $this->emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                                                        ->findOneBy(array('detalleValor'    => $strTelefono,
                                                                          'detalleNombre'   => 'NUMERO TELEFONICO',
                                                                          'estado'          => 'Disponible'));
            
                if(is_object($objDetalleElemento))
                {
                    $objDetalleElemento->setEstado('Reservado');
                    $this->emComercial->persist($objDetalleElemento);
                    $this->emComercial->flush($objDetalleElemento);
                }
                else
                {
                    $arrayResult[] = array("status" => "ERROR", "mensaje" => "El número ya no está Disponible, favor volver a intentar.");
                    return $arrayResult;     
                }
                
                if($strContrasena)
                {

                    $objSpcClave = $this->servicioGeneral
                                        ->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "CLAVE", $strContrasena, $strUser);
                    if(!is_object($objSpcClave))
                    {
                        $arrayResult[] = array("status" => "ERROR", "mensaje" => "No se ingresó la Clave.");
                        return $arrayResult;   
                    }
                }
                
                if($strDominio)
                {

                    $objSpcDominio = $this->servicioGeneral
                                          ->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "DOMINIO", $strDominio, $strUser);
                    if(!is_object($objSpcDominio))
                    {
                        $arrayResult[] = array("status" => "ERROR", "mensaje" => "No se ingresó el dominio.");
                        return $arrayResult;   
                    }                    
                }
                
                if($strTelefono)
                {

                    $objSpcTelefono = $this->servicioGeneral
                                           ->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "NUMERO", $strTelefono, $strUser);
                    if(!is_object($objSpcTelefono))
                    {
                        $arrayResult[] = array("status" => "ERROR", "mensaje" => "No se ingresó el telefono.");
                        return $arrayResult;   
                    }                    
                }
                
            }
            else
            {
                $arrayResult[] = array("status" => "ERROR", "mensaje" => "No existe el servicio.");
                return $arrayResult;
            }           
            $this->emComercial->getConnection()->commit();
            $arrayResult[] = array("status" => "OK", "mensaje" => "OK", "strTelefono" => $strTelefono, "strContrasena" => $strContrasena);
            
        }
        catch(\Exception $ex)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
            $this->emComercial->getConnection()->close();
            $arrayResult[] = array("status" => "ERROR", "mensaje" => $ex->getMessage());
            
            $this->serviceUtil->insertError('Telcos+', 
                                            'asignarLinea', 
                                            $ex->getMessage(), 
                                            $strUser, 
                                            $strIpClient);    
        }
        
        
        return $arrayResult;
    }
    
    
    /**
     * activarLinea
     *
     * Metodo que obtiene los datos de las lineas telefonicas
     *
     * $arrayPeticiones[ intIdServicio, strTelefono, strDominio, strUser, strIpClient ]
     * 
     * @return $arrayResult [status, mensaje]
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 16-02-2017
     */   
    
    public function activarLinea($arrayPeticiones)
    {

        $intIdServicio  = $arrayPeticiones['intIdServicio'];
        $strTelefono    = $arrayPeticiones['strTelefono'];
        $strDominio     = $arrayPeticiones['strDominio'];
        $strUser        = $arrayPeticiones['strUser'];
        $strIpClient    = $arrayPeticiones['strIpClient'];        
        
        $this->emComercial->getConnection()->beginTransaction();

        try
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            
            if(is_object($objServicio))
            {
                
                //compruebo si la linea sigue aún disponible
                $objDetalleElemento = $this->emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                                                        ->findOneBy(array('detalleValor'    => $strTelefono,
                                                                          'detalleNombre'   => 'NUMERO TELEFONICO',
                                                                          'estado'          => 'Reservado'));
            
                if(is_object($objDetalleElemento))
                {
                    $objDetalleElemento->setEstado('Ocupado');
                    $this->emComercial->persist($objDetalleElemento);
                    $this->emComercial->flush($objDetalleElemento);
                }
                else
                {
                    $arrayResult[] = array("status" => "ERROR", "mensaje" => "El número ya no está Reservado, favor volver a intentar.");
                    return $arrayResult;     
                }          
                
            }
            else
            {
                $arrayResult[] = array("status" => "ERROR", "mensaje" => "No existe el servicio.");
                return $arrayResult;
            }           

            //actualizo el servicio
            $objServicio->setEstado('Activo');
            $objServicio->setObservacion('Se activo el servicio');
            $this->emComercial->persist($objServicio);
            $this->emComercial->flush();

            //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setIpCreacion($strIpClient);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setUsrCreacion($strUser);
            $objServicioHistorial->setEstado('Activo');
            $objServicioHistorial->setObservacion('Se activo el Servicio.<br>Teléfono: '.$strTelefono.' <br>Dominio: ' .$strDominio);
            $this->emComercial->persist($objServicioHistorial);
            $this->emComercial->flush();

            $arrayResult[] = array("status" => "OK", "mensaje" => "OK");
            
            $this->emComercial->getConnection()->commit();          
        }
        catch(\Exception $ex)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
            $this->emComercial->getConnection()->close();
            $arrayResult[] = array("status" => "ERROR", "mensaje" => $ex->getMessage());
            
            $this->serviceUtil->insertError('Telcos+', 
                                            'activarLinea', 
                                            $ex->getMessage(), 
                                            $strUser, 
                                            $strIpClient);    
        }        

        return $arrayResult;
    }
    


/**
     * Funcion que reenvia la informacion de la compra de la licencia del office 365
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 31-08-2016
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 01-12-2016 - Se crea producto NetlifeCloud en reemplazo del Office 365, se procede a cambiar el producto
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.2 26-03-2020 - Se solicita el reenvio de credenciales de NetlifeCloud en planes contratados MD.
     *
     * @param $array $arrayParametrosReenvio ['idDepartamento'] int:    Id del departamento
     *                                       ['idServicio']     int:    Id del servicio          
     * 
     * @return $array Información de la respuesta del envio de la información de la licencia.
     */
    
    public function reenviarInformacionOffice($arrayParametrosReenvio)
    {
        $objRepoPuntoFormaContacto                    = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto');
        $arrayContactosTelefonosMovilClaroPuntoSMS    = array();
        $arrayContactosTelefonosMovilMovistarPuntoSMS = array();
        $arrayContactosTelefonosMovilCntPuntoSMS      = array();
        $arrayContactosCorreosPuntoMail               = array();
        try
        {
            $objServicio       = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametrosReenvio['idServicio']);
            $objLogin          = $objServicio->getPuntoId()->getLogin();
            $arrayDatosCliente = $this->emComercial->getRepository("schemaBundle:InfoPersona")->getDatosClientePorIdServicio($objServicio->getId(),
                                                                                                         "esProducto");
            if(!empty($arrayParametrosReenvio['intProductoId']))
            {
                $objProdNetlifeCloud = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                         ->findOneById($arrayParametrosReenvio['intProductoId']);
                $arrayDatosCliente   = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                         ->getDatosClientePorIdServicio($arrayParametrosReenvio['idServicio'],
                                                                                        false);
            }
            //Obtenemos los datos de contacto del cliente al cual se enviaran las notificaciones

            $arrayContactosTelefonosMovilClaroPunto    = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                          'Telefono Movil Claro');
            $arrayContactosTelefonosMovilMovistarPunto = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                          'Telefono Movil Movistar');
            $arrayContactosTelefonosMovilCntPunto      = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                          'Telefono Movil CNT');
            $arrayContactosCorreosPunto                = $objRepoPuntoFormaContacto->findContactosByPunto($objLogin ,
                                                                                                          'Correo Electronico');            

            //Generamos los arreglos con la informacion de conctacto con el cliente
            foreach ($arrayContactosTelefonosMovilClaroPunto as $contacto1) 
            {
                $arrayContactosTelefonosMovilClaroPuntoSMS[]    = array('value'=>$contacto1['valor'],'smsbox'=>0);
            }

            foreach ($arrayContactosTelefonosMovilMovistarPunto as $contacto2) 
            {
                $arrayContactosTelefonosMovilMovistarPuntoSMS[] = array('value'=>$contacto2['valor'],'smsbox'=>1);
            }

            foreach ($arrayContactosTelefonosMovilCntPunto as $contacto3) 
            {
                $arrayContactosTelefonosMovilCntPuntoSMS[]      = array('value'=>$contacto3['valor'],'smsbox'=>1);
            }

            foreach ($arrayContactosCorreosPunto as $contacto4) 
            {
                $arrayContactosCorreosPuntoMail[]               = $contacto4['valor'];
            }


            /** ****************************************************************
              USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS
             * **************************************************************** */

            $objDepartamento = $this->emComercial->getRepository('schemaBundle:AdmiDepartamento')
                                                 ->find($arrayParametrosReenvio['idDepartamento']);
            
            

            if($objDepartamento)
            {
                $strCodEmpresa    = $objDepartamento->getEmpresaCod();
            }
            $objServicioNetlCloud = is_object($objServicio->getProductoId()) ? $objServicio->getProductoId() : $objProdNetlifeCloud;
            if(!is_object($objServicioNetlCloud))
            {
                throw new \Exception('El producto '.$arrayParametrosReenvio['strNombreProducto'].' no soporta NETLIFE CLOUD');
            }
            $objResultado         = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                      ->getByServicioCaracteristicaAndProducto($arrayParametrosReenvio['idServicio'],
                                                                                               'DESCRIPCIONOFFICE',
                                                                                               $objServicioNetlCloud->getId(),
                                                                                               '',
                                                                                               '');
            $strDescripcion       = $objResultado["data"][0]["nombre"];
            
            $objResultado         = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                      ->getByServicioCaracteristicaAndProducto($arrayParametrosReenvio['idServicio'],
                                                                                               'PRODUCTKEY',
                                                                                               $objServicioNetlCloud->getId(),
                                                                                               '',
                                                                                               '');
            $strKeyproduct        = $objResultado["data"][0]["nombre"];
            
            $objResultado         = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                      ->getByServicioCaracteristicaAndProducto($arrayParametrosReenvio['idServicio'],
                                                                                               'URLOFFICE',
                                                                                               $objServicioNetlCloud->getId(),
                                                                                               '',
                                                                                               '');
            $strUrlDownLoadProd   = $objResultado["data"][0]["nombre"];          

            $strCliente           = trim($arrayDatosCliente['NOMBRES'].' '.$arrayDatosCliente['RAZON_SOCIAL']);
            $arrayParametrosTarea = array('cliente'      => $strCliente,
                                          'descripcion'  => $strDescripcion,
                                          'keyproduct'   => $strKeyproduct,
                                          'urlproduct'   => $strUrlDownLoadProd,
                                         );                        

            $this->envioPlantilla->generarEnvioPlantilla("Licencia NetlifeCloud ",
                                                         $arrayContactosCorreosPuntoMail,
                                                         'office365',
                                                         $arrayParametrosTarea,
                                                         $strCodEmpresa,
                                                         '',
                                                         null,
                                                         '',
                                                         false,
                                                         'notificacionesnetlife@netlife.info.ec');

            /** ****************************************************************
              USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE SMS
             * **************************************************************** */
            $strMensaje                        = "Se ha contratado su servicio de NetlifeCloud. La clave del producto es: ".$strKeyproduct.
                                                 " , favor revise su correo para activar el producto ";
            $strRespSendSMSClaro               = $this->envioSMS->sendSMS($strMensaje, $arrayContactosTelefonosMovilClaroPuntoSMS, 3, 5);
            $strRespSendSMSMovistar            = $this->envioSMS->sendSMS($strMensaje, $arrayContactosTelefonosMovilMovistarPuntoSMS, 3, 5);
            $strRespSendSMSCNT                 = $this->envioSMS->sendSMS($strMensaje, $arrayContactosTelefonosMovilCntPuntoSMS, 3, 5);
            $arrayRespuestaServicio['status']  = 'OK';
            $arrayRespuestaServicio['mensaje'] = 'Informacion Enviada Exitosamente!!!';
        }
        catch(\Exception $ex)
        {
            $arrayRespuestaServicio['status']  = 'ERROR';
            $arrayRespuestaServicio['mensaje'] = 'No se Envio la información al usuario';
            $this->serviceUtil->insertError('Telcos+', 
                                            'InfoActivarPuertoService->reenviarInformacionOffice',
                                            $ex->getMessage(),
                                            $arrayParametrosReenvio["strUsrCreacion"],
                                            $arrayParametrosReenvio["strIpClient"]);
        }
        return $arrayRespuestaServicio;
    }
    
    /**
     * Función que activa el cliente con un servicio Internet Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 12-12-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 16-05-2018 Se elimina la restricción para activación sólo para servicios con OLTs HUAWEI y se agrega la obtención de los 
     *                         parámetros perfil e información del ont wifi para la activación con OLT TELLION
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 08-02-2019 Se parametrizan los nombres técnicos para que se realice correctamente el flujo para servicios
     *                          Internet Small Business y TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 12-03-2019 Se valida el modelo del cpe para tecnología tellion sólo cuando sea un servicio Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 15-03-2019 Se considera producto TelcoHome sin ips adicionales para validar el equipo cpe wifi permitido
     * 
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.5 06-06-2019 Se agrega lógica para el producto SMALL BUSINESS CENTROS COMERCIALES.
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.6 17-07-2019 Se agrega lógica para el producto SMALL BUSINESS RAZÓN SOCIAL.
     *
     * @author David León  <mdleon@telconet.ec>
     * @version 1.7 18-10-2019 Se recupera y agrega las capacidades para equipos ZTE.
     * 
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.8 08-11-2019 Se agrega descripción de producto en la búsqueda de la función findOneBy, ya que actualmente
     *                          para el producto INTERNET SMALL BUSINESS existen n registros con el mismo nombre tecnico.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.9 12-11-2019 Se agrega lógica para que la búsqueda del producto sea dinámico tanto para MD como para TN.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.10 26-02-2020 Se elimina envío de variables que ya estarán asociadas al servicio como valores de características
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.11 19-02-2020 Si el producto tiene la marca de activación simultánea el estado del producto pasa a
     *                         "Asignada".  
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.12 04-05-2020 Se elimina la función obtenerInfoMapeoProdPrefYProdsAsociados y en su lugar se usa obtenerParametrosProductosTnGpon,
     *                           debido a los cambios realizados por la reestructuración de servicios Small Business
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.13 25-10-2021 Agregar el parámetro de session para agregar ip adicional.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 11-07-2022 Se agrega la validación de la caracteristica del servicio principal INTERNET VPNoGPON,
     *                         para obtener las ip asociadas al servicio principal.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.1 01-08-2022 - En la activación del servicio INTERNET VPNoGPON con cámaras safecity,
     *                           se asignan los recursos de red de los servicios adicionales SAFE ANALYTICS CAM.
     *
     * @param array $arrayPeticiones
     * 
     * @return array $arrayRespuestaFinal[  'strStatus'     => indica OK/ERROR, 
     *                                      'strMensaje'    => indica el mensaje mostrado para el usuario ]
     */
    public function activarClienteInternetLite($arrayPeticiones)
    {
        $strCodEmpresa                  = $arrayPeticiones['idEmpresa'];
        $strPrefijoEmpresa              = $arrayPeticiones['prefijoEmpresa'];
        $intIdServicio                  = $arrayPeticiones['idServicio'];
        $intIdInterfaceElementoOlt      = $arrayPeticiones['interfaceElementoId'];
        $strInterfaceElementoSplitter   = $arrayPeticiones['interfaceElementoSplitterId'];
        $strUltimaMilla                 = $arrayPeticiones['ultimaMilla'];
        $strLogin                       = $arrayPeticiones['login'];
        $strMacOnt                      = $arrayPeticiones['macOnt'] ? $arrayPeticiones['macOnt'] : "";
        $strSerieOnt                    = $arrayPeticiones['serieOnt'] ? strtoupper($arrayPeticiones['serieOnt']) : "";
        $strModeloOnt                   = $arrayPeticiones['modeloOnt'] ? $arrayPeticiones['modeloOnt'] : "";
        $strSsid                        = $arrayPeticiones['ssid'];
        $strPassword                    = $arrayPeticiones['password'];
        $strNumeroPc                    = $arrayPeticiones['numeroPc'];
        $strModoOperacion               = $arrayPeticiones['modoOperacion'];
        $strObservacion                 = $arrayPeticiones['observacion'];
        $strUsrCreacion                 = $arrayPeticiones['usrCreacion'];
        $strIpCreacion                  = $arrayPeticiones['ipCreacion'];
        $intIdOficina                   = $arrayPeticiones['idOficina'];
        $strPerfil                      = $arrayPeticiones['perfil'];
        $strMacWifi                     = $arrayPeticiones['macWifi'] ? strtolower($arrayPeticiones['macWifi']) : "";
        $strSerieWifi                   = $arrayPeticiones['serieWifi'];
        $strModeloWifi                  = $arrayPeticiones['modeloWifi'];
        $intIdCouSim                    = $arrayPeticiones['intIdServCou'];
        $objSession                     = $arrayPeticiones['objSession'];
        $strStatus                      = "ERROR";
        $strMensaje                     = "";
        $boolFlujoMiddleware            = false;
        $boolEsTrasladoTelcoHome        = false;
        $this->emComercial->beginTransaction();
        $this->emInfraestructura->beginTransaction();
        $this->emNaf->beginTransaction();
        try
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio))
            {
                $objProdPreferencial = $objServicio->getProductoId();
                if(!is_object($objProdPreferencial))
                {
                    throw new \Exception("No existe flujo definido para un plan");
                }
                
                $strDescripcionProdPref     = $objProdPreferencial->getDescripcionProducto();
                $strNombreTecnicoProdPref   = $objProdPreferencial->getNombreTecnico();
                $objPunto                   = $objServicio->getPuntoId();
                $objServicioTecnico         = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneByServicioId($intIdServicio);
                if(is_object($objServicioTecnico) && is_object($objPunto))
                {
                    $objPersonaEmpresaRol         = $objPunto->getPersonaEmpresaRolId();
                    $intIdPunto                   = $objPunto->getId();
                    $intIdElementoOlt             = $objServicioTecnico->getElementoId();
                    $intIdElementoSplitter        = $objServicioTecnico->getElementoConectorId();
                    if(isset($intIdElementoOlt) && !empty($intIdElementoOlt) && $intIdElementoOlt > 0
                        && isset($intIdElementoSplitter) && !empty($intIdElementoSplitter) && $intIdElementoSplitter > 0
                        && isset($intIdInterfaceElementoOlt) && !empty($intIdInterfaceElementoOlt) && $intIdInterfaceElementoOlt > 0 )
                    {
                        $objElementoOlt               = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                ->find($intIdElementoOlt);
                        $objInterfaceElementoOlt      = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                ->find($intIdInterfaceElementoOlt);
                        $objInterfaceElementoSplitter = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                ->findOneBy(array(  "elementoId"                => 
                                                                                                    $intIdElementoSplitter,
                                                                                                    "nombreInterfaceElemento"   => 
                                                                                                    $strInterfaceElementoSplitter));
                        if(is_object($objElementoOlt) && is_object($objInterfaceElementoSplitter))
                        {
                            $intIdInterfaceElementoSplitter = $objInterfaceElementoSplitter->getId();
                            $objModeloElementoOlt           = $objElementoOlt->getModeloElementoId();
                            
                            $objDetalleMiddlewareOlt    = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                    ->findOneBy(array("elementoId"   => $intIdElementoOlt,
                                                                                                      "detalleNombre"=> 'MIDDLEWARE',
                                                                                                      "estado"       => 'Activo'));
                            if(is_object($objDetalleMiddlewareOlt) && $objDetalleMiddlewareOlt->getDetalleValor() === 'SI' )
                            {
                                $boolFlujoMiddleware = true;
                            }
                            if(!$boolFlujoMiddleware)
                            {
                                throw new \Exception("No existe un flujo para la activación con un OLT sin MIDDLEWARE");
                            }
                            if($objServicio->getTipoOrden() === "T" && is_object($objServicio->getProductoId())
                                && $objServicio->getProductoId()->getNombreTecnico() === "TELCOHOME" )
                            {
                                $boolEsTrasladoTelcoHome= true;
                            }
                            
                            if($objModeloElementoOlt->getNombreModeloElemento() === "EP-3116" 
                                && ($strNombreTecnicoProdPref === "INTERNET SMALL BUSINESS" || $strNombreTecnicoProdPref === "TELCOHOME")
                                && !$boolEsTrasladoTelcoHome)
                            {
                                if($strNombreTecnicoProdPref === "INTERNET SMALL BUSINESS")
                                {
                                    $boolSbConIp            = false;
                                    $arrayParamsInfoProds   = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                                    "strCodEmpresa"                 => $strCodEmpresa,
                                                                    "intIdProductoInternet"         => $objProdPreferencial->getId());
                                    $arrayInfoMapeoProds    = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                                ->obtenerParametrosProductosTnGpon($arrayParamsInfoProds);
                                    if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds))
                                    {
                                        foreach($arrayInfoMapeoProds as $arrayInfoProd)
                                        {
                                            $intIdProductoIp            = $arrayInfoProd["intIdProdIp"];
                                            $strCaractRelProdIp         = $arrayInfoProd["strCaractRelProdIp"];
                                            $objProdIPSB                = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                                            ->find($intIdProductoIp);
                                            if(isset($strCaractRelProdIp) && !empty($strCaractRelProdIp))
                                            {
                                                $arrayServiciosPuntoIPSB = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                    ->createQueryBuilder('s')
                                                    ->innerJoin('schemaBundle:InfoServicioProdCaract', 'car', 'WITH', 'car.servicioId = s.id')
                                                    ->innerJoin('schemaBundle:AdmiProductoCaracteristica', 'pc', 'WITH',
                                                            'pc.id = car.productoCaracterisiticaId')
                                                    ->innerJoin('schemaBundle:AdmiCaracteristica', 'c', 'WITH', 'c.id = pc.caracteristicaId')
                                                    ->where('s.puntoId = :puntoId')
                                                    ->andWhere("s.productoId = :productoId")
                                                    ->andWhere("car.valor = :idServioInt")
                                                    ->andWhere("c.descripcionCaracteristica = :desCaracteristica")
                                                    ->andWhere("car.estado = :estadoActivo")
                                                    ->andWhere("s.estado IN (:estadosServicio)")
                                                    ->setParameter('puntoId', $objPunto->getId())
                                                    ->setParameter('productoId', $objProdIPSB->getId())
                                                    ->setParameter('idServioInt', $objServicio->getId())
                                                    ->setParameter('desCaracteristica', $strCaractRelProdIp)
                                                    ->setParameter('estadoActivo', 'Activo')
                                                    ->setParameter('estadosServicio', array("PreAsignacionInfoTecnica","Asignada"))
                                                    ->getQuery()
                                                    ->getResult();
                                            }
                                            else
                                            {
                                                $arrayServiciosPuntoIPSB    = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                                                ->findBy(array( "puntoId"       => $objPunto,
                                                                                                                "productoId"    => $objProdIPSB,
                                                                                                                "estado"        => 
                                                                                                                array(  "PreAsignacionInfoTecnica",
                                                                                                                        "Asignada")
                                                                                                       ));
                                            }
                                            if(isset($arrayServiciosPuntoIPSB) && !empty($arrayServiciosPuntoIPSB))
                                            {
                                                $boolSbConIp = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        $strMensaje = "No se ha podido obtener el correcto mapeo del servicio con la ip respectiva";
                                        throw new \Exception($strMensaje);
                                    }
                                    
                                    if($boolSbConIp)
                                    {
                                        $strTipoIp = "CON_IP";
                                    }
                                    else
                                    {
                                        $strTipoIp = "SIN_IP";
                                    }
                                }
                                else
                                {
                                    $strTipoIp = "SIN_IP";
                                }
                                $arrayParamsValidarCpeWifi  = array("strModeloCpeWifi"          => $strModeloWifi,
                                                                    "strMacCpeWifi"             => $strMacWifi,
                                                                    "strCodEmpresa"             => $strCodEmpresa,
                                                                    "strTipoBusqueda"           => $strTipoIp,
                                                                    "strProdBusqueda"           => $strNombreTecnicoProdPref,
                                                                    "strAccion"                 => "ACTIVAR",
                                                                    "strDescripcionProdPref"    => $strDescripcionProdPref);
                                $arrayValidacionCpeWifiIsb  = $this->validarCpeWifiTellionSB($arrayParamsValidarCpeWifi);
                                if($arrayValidacionCpeWifiIsb["strStatus"] !== "OK")
                                {
                                    throw new \Exception($arrayValidacionCpeWifiIsb["strMensaje"]);
                                }
                            }
                            
                            $strIdentificacion  = "";
                            $strNombreCliente   = "";
                            if(is_object($objPersonaEmpresaRol))
                            {
                                $objPersona = $objPersonaEmpresaRol->getPersonaId();
                                if(is_object($objPersona))
                                {
                                    $strIdentificacion  = $objPersona->getIdentificacionCliente();
                                    $strNombreCliente   = $objPersona->__toString();
                                }
                            }
                            
                            if($boolEsTrasladoTelcoHome)
                            {
                                $arrayRespuestaTraslado = $this->activarClienteMdPorTraslado(
                                                                                              array( 
                                                                                                    'servicio'                  => $objServicio,
                                                                                                    'servicioTecnico'           => 
                                                                                                    $objServicioTecnico,
                                                                                                    'producto'                  =>
                                                                                                    $objServicio->getProductoId(),
                                                                                                    'usrCreacion'               => $strUsrCreacion,
                                                                                                    'ipCreacion'                => $strIpCreacion,
                                                                                                    'idEmpresa'                 => $strCodEmpresa,
                                                                                                    'serieOnt'                  => $strSerieOnt,
                                                                                                    'macOnt'                    => $strMacOnt,
                                                                                                    'modeloOnt'                 => $strModeloOnt,
                                                                                                    'macWifi'                   => $strMacWifi,
                                                                                                    'interfaceElemento'         =>
                                                                                                    $objInterfaceElementoOlt,
                                                                                                    'interfaceSplitter'         =>
                                                                                                    $objInterfaceElementoSplitter,
                                                                                                    'nombreCliente'             => $strNombreCliente,
                                                                                                    'identificacion'            => $strIdentificacion,
                                                                                                    'strNombreTecnicoProdPref'  =>
                                                                                                    $strNombreTecnicoProdPref,
                                                                                                    'strPrefijoEmpresa'         => $strPrefijoEmpresa
                                                                                                  ));
                                $strStatus  = $arrayRespuestaTraslado["status"];
                                $strMensaje = $arrayRespuestaTraslado["mensaje"];
                            }
                            else
                            {
                                $arrayParamsActivarPuerto = array(
                                                                    'objServicio'                  => $objServicio,
                                                                    'objServicioTecnico'           => $objServicioTecnico,
                                                                    'objInterfaceElementoOlt'      => $objInterfaceElementoOlt,
                                                                    'objInterfaceElementoSplitter' => $objInterfaceElementoSplitter,
                                                                    'objModeloElementoOlt'         => $objModeloElementoOlt,
                                                                    'strUltimaMilla'               => $strUltimaMilla,
                                                                    'strMacOnt'                    => $strMacOnt,
                                                                    'strSerieOnt'                  => $strSerieOnt,
                                                                    'strModeloOnt'                 => $strModeloOnt,
                                                                    'strLogin'                     => $strLogin,
                                                                    'strObservacion'               => $strObservacion,
                                                                    'strSsid'                      => $strSsid,
                                                                    'strNumeroPc'                  => $strNumeroPc,
                                                                    'strPassword'                  => $strPassword,
                                                                    'strModoOperacion'             => $strModoOperacion,
                                                                    'strUsrCreacion'               => $strUsrCreacion,
                                                                    'strIpCreacion'                => $strIpCreacion,
                                                                    'strCodEmpresa'                => $strCodEmpresa,
                                                                    'strPrefijoEmpresa'            => $strPrefijoEmpresa,
                                                                    'intIdOficina'                 => $intIdOficina,
                                                                    'strPerfil'                    => $strPerfil,
                                                                    'strMacWifi'                   => $strMacWifi,
                                                                    'strSerieWifi'                 => $strSerieWifi,
                                                                    'strModeloWifi'                => $strModeloWifi,
                                                                    'strNombreTecnicoProdPref'     => $strNombreTecnicoProdPref,
                                                                    'objSession'                   => $objSession
                                                                );
                                $arrayParamsActivarPuerto["strMensaje"]             = "NA";
                                $arrayParamsActivarPuerto["strNombreCliente"]       = $strNombreCliente;
                                $arrayParamsActivarPuerto["strIdentificacion"]      = $strIdentificacion;
                                $arrayParamsActivarPuerto["boolFlujoMiddleware"]    = $boolFlujoMiddleware;

                                $arrayRespuestaActivarPuerto = $this->activarPuertoInternetLiteMD($arrayParamsActivarPuerto);

                                $strStatus  = $arrayRespuestaActivarPuerto['strStatus'];
                                $strMensaje = $arrayRespuestaActivarPuerto['strMensaje'];
                            }
                            
                            if($strStatus === "OK")
                            {
                                if(!$boolEsTrasladoTelcoHome)
                                {
                                    $objServicio->setEstado("EnVerificacion");
                                    $objPunto->setEstado("Activo");
                                    $this->emComercial->persist($objPunto);

                                    $objServicioTecnico->setInterfaceElementoId($intIdInterfaceElementoOlt);
                                    $objServicioTecnico->setInterfaceElementoConectorId($intIdInterfaceElementoSplitter);

                                    $objInterfaceElementoSplitter->setEstado("connected");
                                    $this->emInfraestructura->persist($objInterfaceElementoSplitter);

                                    $objPuntoFacturacion = $objServicio->getPuntoFacturacionId();

                                    if(!is_object($objPuntoFacturacion))
                                    {
                                        $objServicio->setPuntoFacturacionId($objPunto);
                                        $objPuntoAdicional  = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                                                                ->findOneBy(array( "puntoId" => $intIdPunto));
                                        if(is_object($objPuntoAdicional))
                                        {
                                            $objPuntoAdicional->setEsPadreFacturacion("S");
                                            $this->emComercial->persist($objPuntoAdicional);
                                            $this->emComercial->flush();
                                        }
                                    }

                                    $this->emComercial->persist($objServicio);
                                    $this->emComercial->persist($objServicioTecnico);

                                    $this->servicioGeneral->ingresarServicioHistorial(  $objServicio, 
                                                                                        "EnVerificacion", 
                                                                                        $strObservacion, 
                                                                                        $strUsrCreacion, 
                                                                                        $strIpCreacion);
                                }
                                //Preguntamos si tenemos producto con marca de activación simultánea
                                if($intIdCouSim !== null || $intIdCouSim !== "")
                                {
                                    $objServicioSimultanea    = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')
                                                                    ->findOneBy(array( "id"            => $intIdCouSim,
                                                                                       "estado"        => "AsignadaSimultanea"));
                                    if(is_object($objServicioSimultanea))
                                    {
                                        $objServicioSimultanea->setEstado("Asignada");
                                        $this->emInfraestructura->persist($objServicioSimultanea);
                                        $this->emInfraestructura->flush();
                                    }
                                }

                                //asignar recursos a servicios adicionales safecity
                                if(is_object($objServicio) && is_object($objServicio->getProductoId()))
                                {
                                    $arrayParDetGpon = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                         'INFRAESTRUCTURA',
                                                         'PARAMETROS',
                                                         'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                         '',
                                                         $objServicio->getProductoId()->getId(),
                                                         '',
                                                         '',
                                                         '',
                                                         $strCodEmpresa);
                                    if(isset($arrayParDetGpon) && !empty($arrayParDetGpon)
                                       && is_array($arrayParDetGpon) && count($arrayParDetGpon) > 0)
                                    {
                                        $arrayParAsignarAdd = array(
                                            "objServicio"               => $objServicio,
                                            "peticion"                  => $arrayPeticiones['peticion'],
                                            "booleanSerInternetVpnGpon" => true,
                                            "strCodEmpresa"             => $strCodEmpresa,
                                            "strUsrCreacion"            => $strUsrCreacion,
                                            "strIpCreacion"             => $strIpCreacion,
                                        );
                                        $arrayResAsignarAdd = $this->asignarServiciosAdicionalesSafeCityTNGpon($arrayParAsignarAdd);
                                        if($arrayResAsignarAdd["status"] == "OK" && !empty($arrayResAsignarAdd["mensaje"]))
                                        {
                                            $strMensaje = $strMensaje . $arrayResAsignarAdd["mensaje"];
                                        }
                                    }
                                }

                                $this->emInfraestructura->commit();
                                $this->emComercial->commit();
                                $this->emNaf->commit();

                                //Envío al ldap
                                $mixJsonLdap = $this->servicioGeneral->ejecutarComandoLdap("N", $objServicio->getId(), $strPrefijoEmpresa);
                                if($mixJsonLdap->status !== "OK")
                                {
                                    $strMensaje = $strMensaje . "<br>" . $mixJsonLdap->mensaje;
                                }
                            }
                            else
                            {
                                throw new \Exception($strMensaje);
                            }
                            
                        }
                        else
                        {
                            throw new \Exception("No se pudieron obtener los objetos relacionados a la data del servicio técnico asociado");
                        }
                    }
                    else
                    {
                        throw new \Exception("No se pudieron obtener de manera correcta los datos del servicio técnico asociado");
                    }
                }
                else
                {
                    throw new \Exception("No se pudo obtener el servicio técnico asociado al servicio o no se pudo obtener el punto");
                }
            }
            else
            {
                throw new \Exception("No se pudo obtener el servicio");
            }
        } 
        catch (\Exception $e) 
        {
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->rollback();
            }
          
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }
            
            if ($this->emNaf->getConnection()->isTransactionActive())
            {
                $this->emNaf->rollback();  
            }
            
            $this->emInfraestructura->close();
            $this->emComercial->close();
            $this->emNaf->close();
            
            $strMensaje  = $e->getMessage();
            
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->activarClienteInternetLite",
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );

        }
        
        $arrayRespuestaFinal = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }
    
    /**
     * activarClienteTnp
     * 
     * Función que activa el cliente con un servicio Internet Telconet Panamá
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 13-11-2018
     * 
     * @param array $arrayPeticiones
     * 
     * @return array $arrayRespuestaFinal[  'strStatus'     => indica OK/ERROR, 
     *                                      'strMensaje'    => indica el mensaje mostrado para el usuario ]
     */
    public function activarClienteTnp($arrayPeticiones)
    {
        $strCodEmpresa                  = $arrayPeticiones['idEmpresa'];
        $strPrefijoEmpresa              = $arrayPeticiones['prefijoEmpresa'];
        $intIdServicio                  = $arrayPeticiones['idServicio'];
        $intIdInterfaceElementoOlt      = $arrayPeticiones['interfaceElementoId'];
        $strInterfaceElementoSplitter   = $arrayPeticiones['interfaceElementoSplitterId'];
        $strUltimaMilla                 = $arrayPeticiones['ultimaMilla'];
        $strLogin                       = $arrayPeticiones['login'];
        $strMacOnt                      = $arrayPeticiones['macOnt'] ? $arrayPeticiones['macOnt'] : "";
        $strSerieOnt                    = $arrayPeticiones['serieOnt'] ? strtoupper($arrayPeticiones['serieOnt']) : "";
        $strModeloOnt                   = $arrayPeticiones['modeloOnt'] ? $arrayPeticiones['modeloOnt'] : "";
        $strSsid                        = $arrayPeticiones['ssid'];
        $strPassword                    = $arrayPeticiones['password'];
        $strNumeroPc                    = $arrayPeticiones['numeroPc'];
        $strModoOperacion               = $arrayPeticiones['modoOperacion'];
        $strObservacion                 = $arrayPeticiones['observacion'];
        $strUsrCreacion                 = $arrayPeticiones['usrCreacion'];
        $strIpCreacion                  = $arrayPeticiones['ipCreacion'];
        $intIdOficina                   = $arrayPeticiones['idOficina'];
        $strPerfil                      = $arrayPeticiones['perfil'];
        $strMacWifi                     = $arrayPeticiones['macWifi'] ? strtolower($arrayPeticiones['macWifi']) : "";
        $strSerieWifi                   = $arrayPeticiones['serieWifi'];
        $strModeloWifi                  = $arrayPeticiones['modeloWifi'];
        $strStatus                      = "ERROR";
        $strMensaje                     = "";
        $boolFlujoMiddleware            = false;
        
        $this->emComercial->beginTransaction();
        $this->emInfraestructura->beginTransaction();
        $this->emNaf->beginTransaction();
        try
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicio))
            {
                $objPunto           = $objServicio->getPuntoId();
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
                if(is_object($objServicioTecnico) && is_object($objPunto))
                {
                    $objPersonaEmpresaRol         = $objPunto->getPersonaEmpresaRolId();
                    $intIdPunto                   = $objPunto->getId();
                    $intIdElementoOlt             = $objServicioTecnico->getElementoId();
                    $intIdElementoSplitter        = $objServicioTecnico->getElementoConectorId();
                    if(isset($intIdElementoOlt) && !empty($intIdElementoOlt) && $intIdElementoOlt > 0
                        && isset($intIdElementoSplitter) && !empty($intIdElementoSplitter) && $intIdElementoSplitter > 0
                        && isset($intIdInterfaceElementoOlt) && !empty($intIdInterfaceElementoOlt) && $intIdInterfaceElementoOlt > 0 )
                    {
                        $objElementoOlt               = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                ->find($intIdElementoOlt);
                        $objInterfaceElementoOlt      = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                ->find($intIdInterfaceElementoOlt);
                        $objInterfaceElementoSplitter = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                ->findOneBy(array(  "elementoId"                => 
                                                                                                    $intIdElementoSplitter,
                                                                                                    "nombreInterfaceElemento"   => 
                                                                                                    $strInterfaceElementoSplitter));
                        if(is_object($objElementoOlt) && is_object($objInterfaceElementoSplitter))
                        {
                            $intIdInterfaceElementoSplitter = $objInterfaceElementoSplitter->getId();
                            $objModeloElementoOlt           = $objElementoOlt->getModeloElementoId();
                            
                            $objDetalleMiddlewareOlt    = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                    ->findOneBy(array("elementoId"   => $intIdElementoOlt,
                                                                                                      "detalleNombre"=> 'MIDDLEWARE',
                                                                                                      "estado"       => 'Activo'));
                            if(is_object($objDetalleMiddlewareOlt) && $objDetalleMiddlewareOlt->getDetalleValor() === 'SI' )
                            {
                                $boolFlujoMiddleware = true;
                            }
                            
                            $arrayParamsActivarPuerto = array(
                                                                'objServicio'                  => $objServicio,
                                                                'objServicioTecnico'           => $objServicioTecnico,
                                                                'objInterfaceElementoOlt'      => $objInterfaceElementoOlt,
                                                                'objInterfaceElementoSplitter' => $objInterfaceElementoSplitter,
                                                                'objModeloElementoOlt'         => $objModeloElementoOlt,
                                                                'strUltimaMilla'               => $strUltimaMilla,
                                                                'strMacOnt'                    => $strMacOnt,
                                                                'strSerieOnt'                  => $strSerieOnt,
                                                                'strModeloOnt'                 => $strModeloOnt,
                                                                'strLogin'                     => $strLogin,
                                                                'strObservacion'               => $strObservacion,
                                                                'strSsid'                      => $strSsid,
                                                                'strNumeroPc'                  => $strNumeroPc,
                                                                'strPassword'                  => $strPassword,
                                                                'strModoOperacion'             => $strModoOperacion,
                                                                'strUsrCreacion'               => $strUsrCreacion,
                                                                'strIpCreacion'                => $strIpCreacion,
                                                                'strCodEmpresa'                => $strCodEmpresa,
                                                                'strPrefijoEmpresa'            => $strPrefijoEmpresa,
                                                                'intIdOficina'                 => $intIdOficina,
                                                                'strPerfil'                    => $strPerfil,
                                                                'strMacWifi'                   => $strMacWifi,
                                                                'strSerieWifi'                 => $strSerieWifi,
                                                                'strModeloWifi'                => $strModeloWifi
                                                            );
                            if($boolFlujoMiddleware)
                            {
                                if(is_object($objPersonaEmpresaRol))
                                {
                                    $objPersona = $objPersonaEmpresaRol->getPersonaId();
                                    if(is_object($objPersona))
                                    {
                                        $strIdentificacion  = $objPersona->getIdentificacionCliente();
                                        $strNombreCliente   = $objPersona->__toString();
                                    }
                                }
                                $arrayParamsActivarPuerto["strMensaje"]             = "NA";
                                $arrayParamsActivarPuerto["strNombreCliente"]       = $strNombreCliente;
                                $arrayParamsActivarPuerto["strIdentificacion"]      = $strIdentificacion;
                                $arrayParamsActivarPuerto["boolFlujoMiddleware"]    = $boolFlujoMiddleware;
                            }
                            else
                            {
                                throw new \Exception("No existe un flujo para la activación con un OLT sin MIDDLEWARE");
                            }
                            
                            $arrayRespuestaActivarPuerto = $this->activarPuertoTnpMD($arrayParamsActivarPuerto);

                            $strStatus  = $arrayRespuestaActivarPuerto['strStatus'];
                            $strMensaje = $arrayRespuestaActivarPuerto['strMensaje'];
                            
                            if($strStatus === "OK")
                            {
                                $objServicio->setEstado("EnVerificacion");
                                $objPunto->setEstado("Activo");
                                $this->emComercial->persist($objPunto);
                                
                                $objServicioTecnico->setInterfaceElementoId($intIdInterfaceElementoOlt);
                                $objServicioTecnico->setInterfaceElementoConectorId($intIdInterfaceElementoSplitter);
                                
                                $objInterfaceElementoSplitter->setEstado("connected");
                                $this->emInfraestructura->persist($objInterfaceElementoSplitter);
                                
                                $objPuntoFacturacion = $objServicio->getPuntoFacturacionId();
                                
                                if(!is_object($objPuntoFacturacion))
                                {
                                    $objServicio->setPuntoFacturacionId($objPunto);
                                    $objPuntoAdicional  = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                                                            ->findOneBy(array( "puntoId" => $intIdPunto));
                                    if(is_object($objPuntoAdicional))
                                    {
                                        $objPuntoAdicional->setEsPadreFacturacion("S");
                                        $this->emComercial->persist($objPuntoAdicional);
                                        $this->emComercial->flush();
                                    }
                                }

                                $this->emComercial->persist($objServicio);
                                $this->emComercial->persist($objServicioTecnico);
                                
                                $this->servicioGeneral->ingresarServicioHistorial(  $objServicio, 
                                                                                    "EnVerificacion", 
                                                                                    $strObservacion, 
                                                                                    $strUsrCreacion, 
                                                                                    $strIpCreacion);
                                $this->emInfraestructura->commit();
                                $this->emComercial->commit();
                                $this->emNaf->commit();
     
                                //Envío al ldap
                                $mixJsonLdap = $this->servicioGeneral->ejecutarComandoLdap("N", $objServicio->getId(), $strPrefijoEmpresa);
                                if($mixJsonLdap->status !== "OK")
                                {
                                    $strMensaje = $strMensaje . "<br>" . $mixJsonLdap->mensaje;
                                }
                            }
                            else
                            {
                                throw new \Exception($strMensaje);
                            }
                            
                        }
                        else
                        {
                            throw new \Exception("No se pudieron obtener los objetos relacionados a la data del servicio técnico asociado");
                        }
                    }
                    else
                    {
                        throw new \Exception("No se pudieron obtener de manera correcta los datos del servicio técnico asociado");
                    }
                }
                else
                {
                    throw new \Exception("No se pudo obtener el servicio técnico asociado al servicio o no se pudo obtener el punto");
                }
            }
            else
            {
                throw new \Exception("No se pudo obtener el servicio");
            }
        } 
        catch (\Exception $e) 
        {
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->rollback();
            }
          
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }
            
            if ($this->emNaf->getConnection()->isTransactionActive())
            {
                $this->emNaf->rollback();  
            }
            
            $this->emInfraestructura->close();
            $this->emComercial->close();
            $this->emNaf->close();
            
            $strMensaje  = $e->getMessage();
            
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->activarClienteInternetLite",
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );

        }
        
        $arrayRespuestaFinal = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }
    
    
    /**
     * Función que realiza la activación del servicio de Internet Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 12-12-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 15-03-2018 Se modifica la empresa en que se ingresa el ont
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 17-05-2018 Se agrega flujo para activación de servicios con OLTs TELLION
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 09-07-2018 Se valida que la característica SPID sólo se guarde cuando el servicio Small Business tenga factibilidad 
     *                         con un olt Huawei 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 08-03-2019 Se agregan validaciones para que servicios TelcoHome no verifiquen información correspondiente a la ip fija,
     *                          ya que estos servicios generará una ip dinámica y no una ip fija, así como también se trabajará como un servicio
     *                          HOME y no PYME como se había definido inicialmente
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.5 06-06-2019 Se agrega logica para la instalación del producto SMALL BUSINESS CENTROS COMERCIALES.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.6 17-07-2019 Se agrega logica para la instalación del producto SMALL BUSINESS RAZÓN SOCIAL.
     * 
     * @author David León  <mdleon@telconet.ec>
     * @version 1.7 18-10-2019 Se recupera y agrega las capacidades para equipos ZTE.
     *                         Se obtiene y registra las caracteristicas devueltas por Rda,
     *                         para su posterior registro para equipos ZTE.
     *
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 1.8 13-01-2020 - Se agrega lógica para la instalación de los productos:
     *                         - INTERNET SMALL BUSINESS.
     *                         - INTERNET SMALL BUSINESS CENTROS COMERCIALES.
     *                         - INTERNET SMALL BUSINESS RAZÓN SOCIAL.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 26-02-2020 Se modifican validaciones erróneas para la activación de Small Business con tecnología ZTE y 
     *                          se obtienen las capacidades necesarias para ZTE
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.10 11-05-2020 Se unifica las validaciones por marca y no por modelo de olt
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.11 01-12-2020 Se agrega verificación de equipo en NAF de acuerdo a validaciones existentes en AFK_PROCESOS.IN_P_PROCESA_INSTALACION,
     *                          antes de enviar el request a middleware, para evitar errores por NAF que obliguen la eliminación de línea pon
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.12 22-02-2021 Se agrega validación si la Ip del servicio es Privada para cambiar el estado a "Activo"
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.13 22-10-2021 Se agrega validación si el servicio es de traslado consultar si tiene servicios adicionales
     *
     * @param array $arrayParametros
     *
     * @return array $arrayRespuestaFinal[ 'strStatus'     => indica OK/ERROR, 
     *                                      'strMensaje'    => indica el mensaje a presentar en caso de ERROR ]
     */
    public function activarPuertoInternetLiteMD($arrayParametros)
    {    
        $objServicio                    = $arrayParametros['objServicio'];
        $objServicioTecnico             = $arrayParametros['objServicioTecnico'];
        $objInterfaceElementoOlt        = $arrayParametros['objInterfaceElementoOlt'];
        $objModeloElementoOlt           = $arrayParametros['objModeloElementoOlt'];
        $strUltimaMilla                 = $arrayParametros['strUltimaMilla'];
        $strMacOnt                      = $arrayParametros['strMacOnt'];
        $strSerieOnt                    = trim(strtoupper($arrayParametros['strSerieOnt']));
        $strModeloOnt                   = $arrayParametros['strModeloOnt'];
        $strLogin                       = $arrayParametros['strLogin'];
        $strObservacion                 = $arrayParametros['strObservacion'];
        $strSsid                        = $arrayParametros['strSsid'];
        $strNumeroPc                    = $arrayParametros['strNumeroPc'];
        $strPassword                    = $arrayParametros['strPassword'];
        $strModoOperacion               = $arrayParametros['strModoOperacion'];
        $strUsrCreacion                 = $arrayParametros['strUsrCreacion'];
        $strIpCreacion                  = $arrayParametros['strIpCreacion'];
        $intIdOficina                   = $arrayParametros['intIdOficina'];
        $strCodEmpresa                  = $arrayParametros['strCodEmpresa'];
        $objInterfaceElementoSplitter   = $arrayParametros['objInterfaceElementoSplitter'];
        $strNombreCliente               = $arrayParametros['strNombreCliente'];
        $strIdentificacion              = $arrayParametros['strIdentificacion'];
        $boolFlujoMiddleware            = $arrayParametros['boolFlujoMiddleware'];
        $strPrefijoEmpresa              = $arrayParametros['strPrefijoEmpresa'];
        $strPerfil                      = $arrayParametros['strPerfil'];
        $strMacWifi                     = $arrayParametros['strMacWifi'];
        $strSerieWifi                   = trim(strtoupper($arrayParametros['strSerieWifi']));
        $strModeloWifi                  = $arrayParametros['strModeloWifi'];
        $strNombreTecnicoProdPref       = $arrayParametros['strNombreTecnicoProdPref'];
        $objSession                     = $arrayParametros['objSession'];
        $strStatus                      = "ERROR";
        $strMensaje                     = "";
        $arrayRespuesta                 = array();
        $strTipoArticulo                = "AF";
        $strIdentificacionCliente       = "";
        $strValorOntLineProfile         = "";
        $strValorServiceProfile         = "";
        $strValorVlan                   = "";
        $strValorGemPort                = "";
        $strValorTrafficTable           = "";
        $strIpFijaProd                  = "";
        $strScopeProd                   = "";
        $strValorSpcCapacidad1          = "";
        $strValorSpcCapacidad2          = "";
        try
        {
            $intIdServicio              = $objServicio->getId();
            $objElementoOlt             = $objInterfaceElementoOlt->getElementoId();
            $intIdElementoOlt           = $objElementoOlt->getId();
            $objIpOlt                   = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                  ->findOneBy(array("elementoId"    => $intIdElementoOlt, 
                                                                                    "estado"        => "Activo"));
            if((is_object($objServicio) && !empty($objServicio)) && is_object($objServicio->getProductoId()))
            {
                $objProdInternetLite = $objServicio->getProductoId();
            }
            else
            {
                throw new \Exception("No existe producto asociado al servicio con la descripción enviada por parámetro.");
            }
            $strModeloElementoOlt       = $objModeloElementoOlt->getNombreModeloElemento();
            $strReqAprovisionamiento    = $objModeloElementoOlt->getReqAprovisionamiento();
            $strMarcaOlt                = $objModeloElementoOlt->getMarcaElementoId()->getNombreMarcaElemento();
            if($strReqAprovisionamiento === "SI")
            {
                $objServProdCaracTipoNegocio = $this->servicioGeneral->getServicioProductoCaracteristica(   $objServicio,
                                                                                                            "Grupo Negocio",
                                                                                                            $objProdInternetLite);
                if(is_object($objServProdCaracTipoNegocio))
                {
                    $strValorTipoNegocioProd = $objServProdCaracTipoNegocio->getValor();
                    list($strTipoNegocioProd) = explode($strPrefijoEmpresa,$strValorTipoNegocioProd);
                }
                else
                {
                    throw new \Exception("No existe Caracteristica Grupo Negocio");
                }
                if($strMarcaOlt === "HUAWEI")
                {
                    //Se obtienen las características para los olt HUAWEI
                    $objServProdCaractLineProfile = $this->servicioGeneral->getServicioProductoCaracteristica(  $objServicio, 
                                                                                                                "LINE-PROFILE-NAME", 
                                                                                                                $objProdInternetLite);

                    if(is_object($objServProdCaractLineProfile))
                    {
                        $strValorOntLineProfile = $objServProdCaractLineProfile->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica LINE-PROFILE-NAME");
                    }                  

                    $objServProdServiceProfile = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicio, 
                                                                                                            "SERVICE-PROFILE", 
                                                                                                            $objProdInternetLite);
                    if(is_object($objServProdServiceProfile))
                    {
                        $strValorServiceProfile = $objServProdServiceProfile->getValor();
                    }
                    else
                    {
                        $objDetalleServiceProfileNameOlt    = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                   ->findOneBy(array(   "detalleNombre" => "SERVICE-PROFILE-NAME",
                                                                                        "detalleValor"  => $strModeloOnt,
                                                                                        "elementoId"    => $intIdElementoOlt
                                                                                     )
                                                                               );
                        if(is_object($objDetalleServiceProfileNameOlt))
                        {
                            $strValorServiceProfile = $objDetalleServiceProfileNameOlt->getDetalleValor();
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                            $objProdInternetLite, 
                                                                                            "SERVICE-PROFILE", 
                                                                                            $strValorServiceProfile, 
                                                                                            $strUsrCreacion);
                        }
                        else
                        {
                            throw new \Exception("No existe Caracteristica SERVICE-PROFILE-NAME en el elemento");
                        }
                    }
                    
                    $objServProdCaractVlan = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio, "VLAN", $objProdInternetLite);
                    if(is_object($objServProdCaractVlan))
                    {
                        $strValorVlan = $objServProdCaractVlan->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica VLAN");
                    }
                    
                    $objServProdCaractGemPort = $this->servicioGeneral->getServicioProductoCaracteristica(  $objServicio, 
                                                                                                            "GEM-PORT", 
                                                                                                            $objProdInternetLite);
                    if(is_object($objServProdCaractGemPort))
                    {
                        $strValorGemPort = $objServProdCaractGemPort->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica GEM-PORT");
                    }

                    $objServProdCaractTrafficTable = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicio, 
                                                                                                                "TRAFFIC-TABLE", 
                                                                                                                $objProdInternetLite);
                    if(is_object($objServProdCaractTrafficTable))
                    {
                        $strValorTrafficTable = $objServProdCaractTrafficTable->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica TRAFFIC-TABLE");
                    }
                }
                else if($strMarcaOlt === "ZTE")
                {
                    $objServProdCaractCapacidad1    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio, 
                                                                                                                "CAPACIDAD1", 
                                                                                                                $objProdInternetLite);

                    if(is_object($objServProdCaractCapacidad1))
                    {
                        $strValorSpcCapacidad1  = $objServProdCaractCapacidad1->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica CAPACIDAD1 asociado al servicio");
                    }
                    
                    $objServProdCaractCapacidad2    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio, 
                                                                                                                "CAPACIDAD2", 
                                                                                                                $objProdInternetLite);

                    if(is_object($objServProdCaractCapacidad2))
                    {
                        $strValorSpcCapacidad2  = $objServProdCaractCapacidad2->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica CAPACIDAD2 asociado al servicio");
                    }
                    
                    if(isset($strModeloOnt) && !empty($strModeloOnt))
                    {
                        $strValorServiceProfile = $strModeloOnt;
                    }
                    else
                    {
                        throw new \Exception("No se ha podido obtener el modelo del ONT para tecnología ZTE");
                    }
                }
                else
                {
                    $arrayPerfil            = explode("_", $strPerfil);
                    $strValorOntLineProfile = $arrayPerfil[0]."_".$arrayPerfil[1]."_".$arrayPerfil[2];
                }

                /**
                 * Se valida si el OLT tiene el detalle del middleware para definir si se necesita utilizar middleware 
                 * o si se necesita utilizar el flujo tradicional
                 */
                if($boolFlujoMiddleware)
                {
                    if($strNombreTecnicoProdPref === "INTERNET SMALL BUSINESS")
                    {
                        $strTipoIp = 'FIJA';
        
                        //Obtiene tipo de ip por el servicio (PRIVADA)
                        $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                             ->findOneBy(array("servicioId"  =>  $intIdServicio,
                                                                               "tipoIp"      =>  "PRIVADA",
                                                                               "estado"      =>  "Reservada"));
                        if (is_object($objTipoIp))
                        {
                            $strTipoIp = $objTipoIp->getTipoIp();
                        }

                        //Se obtiene la IP del servicio que se encuentra reservada
                        $objIpFija                      = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                                  ->findOneBy(array("servicioId" => $intIdServicio,
                                                                                                    "tipoIp"     => $strTipoIp,
                                                                                                    "estado"     => "Reservada"));
                        if(is_object($objIpFija))
                        {
                            $strIpFijaProd = $objIpFija->getIp();
                        }
                        
                        //Se obtiene el Scope
                        $objServProdCaractScope         = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio, 
                                                                                                                    "SCOPE", 
                                                                                                                    $objProdInternetLite);
                        if(is_object($objServProdCaractScope))
                        {
                            $strScopeProd   = $objServProdCaractScope->getValor();
                        }
                    }
                    
                    $arrayVerifOntNaf   = $this->servicioGeneral->buscarEquipoEnNafPorParametros(array( "serieEquipo"           => $strSerieOnt,
                                                                                                        "estadoEquipo"          => "PI",
                                                                                                        "tipoArticuloEquipo"    => "AF",
                                                                                                        "modeloEquipo"          => $strModeloOnt));
                    if($arrayVerifOntNaf["status"] === "ERROR")
                    {
                        throw new \Exception($arrayVerifOntNaf["mensaje"]);
                    }
                    
                    if(!empty($strSerieWifi) && !empty($strModeloWifi))
                    {
                        $arrayVerifWifiNaf  = $this->servicioGeneral->buscarEquipoEnNafPorParametros(array( "serieEquipo"           => $strSerieWifi,
                                                                                                            "estadoEquipo"          => "PI",
                                                                                                            "tipoArticuloEquipo"    => "AF",
                                                                                                            "modeloEquipo"          => $strModeloWifi
                                                                                                    ));
                        if($arrayVerifWifiNaf["status"] === "ERROR")
                        {
                            throw new \Exception($arrayVerifWifiNaf["mensaje"]);
                        }
                    }
                    
                    $arrayDatos = array(
                                        'serial_ont'            => $strSerieOnt,
                                        'mac_ont'               => $strMacOnt,
                                        'nombre_olt'            => $objElementoOlt->getNombreElemento(),
                                        'ip_olt'                => $objIpOlt->getIp(),
                                        'puerto_olt'            => $objInterfaceElementoOlt->getNombreInterfaceElemento(),
                                        'modelo_olt'            => $strModeloElementoOlt,
                                        'gemport'               => $strValorGemPort,
                                        'service_profile'       => $strValorServiceProfile,
                                        'line_profile'          => $strValorOntLineProfile,
                                        'traffic_table'         => $strValorTrafficTable,
                                        'vlan'                  => $strValorVlan,
                                        'estado_servicio'       => $objServicio->getEstado(),
                                        'ip'                    => $strIpFijaProd,
                                        'ip_fijas_activas'      => 0,
                                        'tipo_negocio_actual'   => $strTipoNegocioProd,
                                        'mac_wifi'              => $strMacWifi,
                                        'scope'                 => $strScopeProd,
                                        'capacidad_up'          => $strValorSpcCapacidad1,
                                        'capacidad_down'        => $strValorSpcCapacidad2,
                                    );
                    
                    $arrayDatosMiddleware = array(
                                                    'empresa'           => $strPrefijoEmpresa,
                                                    'nombre_cliente'    => $strNombreCliente,
                                                    'login'             => $strLogin,
                                                    'identificacion'    => $strIdentificacion,
                                                    'datos'             => $arrayDatos,
                                                    'opcion'            => $this->opcion,
                                                    'ejecutaComando'    => $this->ejecutaComando,
                                                    'usrCreacion'       => $strUsrCreacion,
                                                    'ipCreacion'        => $strIpCreacion
                    );

                    $arrayRespuesta = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                    $strStatus      = $arrayRespuesta['status'];
                    $strMensaje     = $arrayRespuesta['mensaje']; 
                }
                else
                {
                    throw new \Exception("No existe un flujo para la activación con un OLT sin MIDDLEWARE");
                }
                
                if($strStatus === "OK")
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                    $objProdInternetLite, 
                                                                                    "INDICE CLIENTE", 
                                                                                    $arrayRespuesta['ont_id'], 
                                                                                    $strUsrCreacion);
                    if($strMarcaOlt === "HUAWEI" || $strMarcaOlt === "ZTE")
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                        $objProdInternetLite, 
                                                                                        "SPID", 
                                                                                        $arrayRespuesta['spid'], 
                                                                                        $strUsrCreacion);
                    }
                    
                    //realizamos registro de datos para zte
                    if ($strMarcaOlt == "ZTE")
                    {
                        //GRABAMOS VLAN
                        $this->servicioGeneral
                             ->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                       $objProdInternetLite, 
                                                                       "VLAN", 
                                                                       $arrayRespuesta['vlan'], 
                                                                       $strUsrCreacion );

                        //GRABAMOS CLIENT CLASS
                        $this->servicioGeneral
                             ->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                       $objProdInternetLite, 
                                                                       "CLIENT CLASS", 
                                                                       $arrayRespuesta['client_class'], 
                                                                       $strUsrCreacion );

                        //GRABAMOS PCKID
                        $this->servicioGeneral
                             ->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                       $objProdInternetLite, 
                                                                       "PACKAGE ID", 
                                                                       $arrayRespuesta['pckid'], 
                                                                       $strUsrCreacion );

                        //GRABAMOS LINE PROFILE NAME
                        $this->servicioGeneral
                             ->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                       $objProdInternetLite, 
                                                                       "LINE-PROFILE-NAME", 
                                                                       $arrayRespuesta['line_profile'], 
                                                                       $strUsrCreacion );

                        //GRABAMOS SERVICE-PROFILE
                        $this->servicioGeneral
                             ->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                       $objProdInternetLite, 
                                                                       "SERVICE-PROFILE", 
                                                                       $strValorServiceProfile, 
                                                                       $strUsrCreacion );
                    }
                    //fin de registro zte
                    
                    //Si el producto es Internet Small Business y si la ip es publica, consultar si tiene producto adicional, caso contrario
                    //agregar un servicio adicional (IP Small Business)
                    $boolIsb      = false;
                    if ($strPrefijoEmpresa === "TN")
                    {
                        $arrayParametrosCaract    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                         ->getOne("IP_PRIVADA_GPON_CARACTERISTICAS",
                                                                  "COMERCIAL",
                                                                  "",
                                                                  "",
                                                                  $objServicio->getProductoId()->getDescripcionProducto(),
                                                                  "",
                                                                  "",
                                                                  "",
                                                                  "",
                                                                  $strCodEmpresa);
                        if(isset($arrayParametrosCaract['valor2']) && !empty($arrayParametrosCaract['valor2']))
                        {
                            $strCaractIsb = $arrayParametrosCaract['valor2'];
                            $boolIsb      = true;
                        }
                    }
                                        
                    if ($objServicio->getTipoOrden() === "T" && $strNombreTecnicoProdPref === "INTERNET SMALL BUSINESS" 
                                                           && $strPrefijoEmpresa ==="TN"
                                                           && $boolIsb)
                    {
                        //Consulta el servicio que esta relacionado por el traslado
                        $objSpcTrasladoServicioInternet = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio, 
                                                                                                        "TRASLADO", 
                                                                                                        $objProdInternetLite);
                        if(is_object($objSpcTrasladoServicioInternet))
                        {
                            $intIdServicioOrigen    = $objSpcTrasladoServicioInternet->getValor();
                            $objServicioOrigen      = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioOrigen);
                            if(!is_object($objServicioOrigen))
                            {
                                throw new \Exception("No existe servicio de origen");
                            }
                            //Obtiene tipo de ip por el servicio
                            $objTipoIpOrigen = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                       ->findOneBy(array("servicioId"  =>  $intIdServicioOrigen,
                                                                                         "tipoIp"      =>  "FIJA",
                                                                                         "estado"      =>  "Activo"));
                            if (is_object($objTipoIpOrigen))
                            {
                                $strTipoIpOrigen = $objTipoIpOrigen->getTipoIp();
                            }
                        }
                        
                        if ($strTipoIpOrigen === "FIJA")
                        {
                            $strTieneIps = "NO";
                            
                            $arrayProdIp                = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->findBy(array( "descripcionProducto" => "IP Small Business",
                                                                                "nombreTecnico"       => "IPSB", 
                                                                                "empresaCod"          => "10",
                                                                                "estado"              => "Activo"));
                            if(empty($arrayProdIp))
                            {
                                throw new \Exception("No existe el objeto del producto IP");
                            }
                            
                            //arreglo de los estados de los servicios permitidos
                            $arrayEstadosServiciosPermitidos = array();
                            //obtengo la cabecera de los estados de los servicios permitidos
                            $objAdmiParametroCabEstadosServ  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')->findOneBy(
                                                                    array('nombreParametro' => 'ESTADOS_SERVICIOS_ISB_CAMBIO_PUERTO',
                                                                          'estado'          => 'Activo'));
                            if( is_object($objAdmiParametroCabEstadosServ) )
                            {
                                $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findBy(
                                                                    array(  "parametroId" => $objAdmiParametroCabEstadosServ->getId(),
                                                                            "estado"      => "Activo"));
                                foreach($arrayParametrosDet as $objParametro)
                                {
                                    $arrayEstadosServiciosPermitidos[] = $objParametro->getValor1();
                                }
                            }
                            
                            $objProductoOrigen          = $objServicioOrigen->getProductoId();
                            $arrayServiciosPuntoOrigen  = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->findBy(array( "puntoId" => $objServicioOrigen->getPuntoId()->getId(), 
                                                                                "estado"  => $arrayEstadosServiciosPermitidos));
                            
                            //Consultamos si tiene ips adicionales el servicio de origen
                            $arrayParametrosIsb = array("arrayServicios"              => $arrayServiciosPuntoOrigen,
                                                    "arrayProdIp"                     => $arrayProdIp,
                                                    "servicio"                        => $objTipoIpOrigen,
                                                    "objProductoInternet"             => $objProductoOrigen,
                                                    "estadoIp"                        => 'Activo',
                                                    "arrayEstadosServiciosPermitidos" => $arrayEstadosServiciosPermitidos
                                                    );
                            
                            $arrayDatosIpPyme   = $this->servicioGeneral->getInfoIpsFijaPuntoIsb($arrayParametrosIsb);
                            //Obtener la cantidad de ips adicionales
                            $intIpsFijasActivasPyme = $arrayDatosIpPyme['ip_fijas_activas'];
                            if($intIpsFijasActivasPyme > 0)
                            {
                                $strTieneIps = "SI";
                            }
                            
                            if ($strTieneIps === "NO")
                            {
                                $objProductoIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                            ->findOneBy(array(  "descripcionProducto"   => "IP Small Business",
                                                                                "empresaCod"            => $strCodEmpresa,
                                                                                "estado"                => "Activo"));
                                $intIdProdIp             = $objProductoIp->getId();
                                $strDescripcionProdIp    = $objProductoIp->getDescripcionProducto();
                                $strLoginVendedor        = $objServicio->getUsrVendedor();
                                
                                $objInfoPersona          = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                                ->findOneBy(array('login'=>$strLoginVendedor));
                                $strVendedor             = "";

                                if(is_object($objInfoPersona))
                                {
                                    $strNombres   = ucwords(strtolower($objInfoPersona->getNombres()));
                                    $strApellidos = ucwords(strtolower($objInfoPersona->getApellidos()));
                                    $strVendedor  = $strNombres.' '.$strApellidos;
                                    $intIdPersona = $objInfoPersona->getId();
                                }
                                
                                $objPersonaEmpresaRol   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                        ->findBy(array(
                                                                                "personaId" => $intIdPersona
                                                                            ));
                            
                                $intIdPersonaRol = '';                                                    
                                foreach($objPersonaEmpresaRol as $objParametroRol)
                                {
                                    $intIdEmpresaRol    = $objParametroRol->getEmpresaRolId()->getId();
                                    //Consultamos si el id de la empresa_rol es de TN
                                    $objEmpresaRol   = $this->emComercial->getRepository('schemaBundle:InfoEmpresaRol')
                                                                       ->findOneBy(array(
                                                                                        "id"         => $intIdEmpresaRol,
                                                                                        "empresaCod" => $strCodEmpresa
                                                                                    ));
                                    if (is_object($objEmpresaRol))
                                    {
                                        $intIdPersonaRol = $intIdEmpresaRol;
                                        break;
                                    }

                                }

                                if(empty($intIdPersonaRol))
                                {
                                    throw new \Exception("el Id de la empresa rol no pertenece a la empresa TN");
                                }
                                
                                $objCaractVelocidad      = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica" => 'VELOCIDAD', "estado" => "Activo"));
                                $objProdCaracVelocidad   = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                            ->findOneBy(array(  "productoId"        => $objServicio->getProductoId(),
                                                                                "caracteristicaId"  => $objCaractVelocidad->getId(),
                                                                                "estado"            => "Activo"));
                                $objSpcServicioVelocidad = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                   ->findOneBy(array(   "servicioId"                => 
                                                                                        $objServicio->getId(),
                                                                                        "productoCaracterisiticaId" =>
                                                                                        $objProdCaracVelocidad->getId(),
                                                                                        "estado"        => "Activo"));
                                $strVelocidad            = $objSpcServicioVelocidad->getValor();
                                $arrayProductoCaracteristicasValores['VELOCIDAD'] = $strVelocidad;
                                $strFuncionPrecio        = $objProductoIp->getFuncionPrecio();
                                $strPrecioVelocidad      = $this->evaluarFuncionPrecio($strFuncionPrecio, $arrayProductoCaracteristicasValores);
                                
                                $arrayPlantillaProductos  = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                               ->getResultadoComisionPlantilla( array('intIdProducto' => $intIdProdIp,
                                                                                                      'strCodEmpresa' => $strCodEmpresa) );
                                if (isset($arrayPlantillaProductos['objRegistros']) && !empty($arrayPlantillaProductos['objRegistros']))
                                {
                                    foreach($arrayPlantillaProductos['objRegistros'] as $arrayItem)
                                    {
                                        if (isset($arrayItem['idComisionDet']) && !empty($arrayItem['idComisionDet']))
                                        {
                                            $intIdComisionDet = (isset($arrayItem['idComisionDet']) && !empty($arrayItem['idComisionDet']))
                                                                ? $arrayItem['idComisionDet'] : 0;
                                        }
                                    }
                                }
                                
                                $strPlantillaComisionista = $intIdComisionDet.'---'.$intIdPersonaRol;
                                
                                //Se crea el servicio adicional para este producto
                                $arrayServicios = array();
                                $arrayServicios[0]['hijo']                          = 0;
                                $arrayServicios[0]['servicio']                      = 0;
                                $arrayServicios[0]['codigo']                        = $intIdProdIp;
                                $arrayServicios[0]['producto']                      = $strDescripcionProdIp.' '.$strVelocidad.' 0';
                                $arrayServicios[0]['cantidad']                      = '1';
                                $arrayServicios[0]['frecuencia']                    = '1';
                                $arrayServicios[0]['precio']                        = $strPrecioVelocidad;
                                $arrayServicios[0]['precio_total']                  = $strPrecioVelocidad;
                                $arrayServicios[0]['info']                          = 'C';
                                $arrayServicios[0]['caracteristicasProducto']       = $strCaractIsb;
                                $arrayServicios[0]['caractCodigoPromoIns']          = '';
                                $arrayServicios[0]['nombrePromoIns']                = '';
                                $arrayServicios[0]['idTipoPromoIns']                = '';
                                $arrayServicios[0]['caractCodigoPromo']             = '';
                                $arrayServicios[0]['nombrePromo']                   = '';
                                $arrayServicios[0]['idTipoPromo']                   = '';
                                $arrayServicios[0]['caractCodigoPromoBw']           = '';
                                $arrayServicios[0]['nombrePromoBw']                 = '';
                                $arrayServicios[0]['idTipoPromoBw']                 = '';
                                $arrayServicios[0]['strServiciosMix']               = '';
                                $arrayServicios[0]['tipoMedio']                     = '';
                                $arrayServicios[0]['backupDesc']                    = '';
                                $arrayServicios[0]['fecha']                         = '';
                                $arrayServicios[0]['precio_venta']                  = $strPrecioVelocidad;
                                $arrayServicios[0]['precio_instalacion']            = '0';
                                $arrayServicios[0]['descripcion_producto']          = $strDescripcionProdIp.' '.$strVelocidad.' 0';
                                $arrayServicios[0]['precio_instalacion_pactado']    = '0';
                                $arrayServicios[0]['ultimaMilla']                   = '107';
                                $arrayServicios[0]['um_desc']                       = 'FTTx';
                                $arrayServicios[0]['login_vendedor']                = $strLoginVendedor;
                                $arrayServicios[0]['nombre_vendedor']               = $strVendedor;
                                $arrayServicios[0]['strPlantillaComisionista']      = $strPlantillaComisionista;
                                $arrayServicios[0]['cotizacion']                    = '';
                                $arrayServicios[0]['cot_desc']                      = 'Ninguna';
                                $arrayServicios[0]['intIdPropuesta']                = '';
                                $arrayServicios[0]['strPropuesta']                  = '';
                                
                                $objPuntoDestino = $this->emComercial->getRepository('schemaBundle:InfoPunto')->find($objServicio
                                                                                                              ->getPuntoId()->getId());
                                $objRol   = null;

                                if (is_object($objPuntoDestino))
                                {
                                    $objRol = $this->emComercial->getRepository('schemaBundle:AdmiRol')
                                                          ->find($objPuntoDestino->getPersonaEmpresaRolId()->getEmpresaRolId()->getRolId());
                                }
                                $arrayParamsServicio = array(   "codEmpresa"            => $strCodEmpresa,
                                                    "idOficina"             => $intIdOficina,
                                                    "entityPunto"           => $objPuntoDestino,
                                                    "entityRol"             => $objRol,
                                                    "usrCreacion"           => $strUsrCreacion,
                                                    "clientIp"              => $strIpCreacion,
                                                    "tipoOrden"             => 'N',
                                                    "ultimaMillaId"         => null,
                                                    "servicios"             => $arrayServicios,
                                                    "strPrefijoEmpresa"     => $strPrefijoEmpresa,
                                                    "session"               => $objSession,
                                                    "intIdSolFlujoPP"       => $objSession->get('idSolFlujoPrePlanificacion') 
                                                                               ? $objSession->get('idSolFlujoPrePlanificacion') : 0
                                            );
                                $this->serviceServicioComercial->crearServicio($arrayParamsServicio);
                            }
                        }
                    }
                    
                    $arrayOntNaf            = $this->servicioGeneral->buscarElementoEnNaf($strSerieOnt, $strModeloOnt, "PI", "ActivarServicio");
                    $strStatusOntNaf        = $arrayOntNaf[0]['status'];
                    $strCodigoArticuloOnt   = "";

                    if($strStatusOntNaf === "OK")
                    {
                        $objInterfaceOnt = $this->servicioGeneral->ingresarElementoCliente($strLogin, $strSerieOnt, $strModeloOnt, "-ont",
                                                                                           $objInterfaceElementoSplitter, $strUltimaMilla, 
                                                                                           $objServicio, $strUsrCreacion, 
                                                                                           $strIpCreacion, "18");

                        $strMensajeError    = str_repeat(' ', 1000);                                                                  
                        $strSql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                            . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                            . ":cantidad, :pv_mensajeerror); END;";
                        $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                        $objStmt->bindParam('codigoEmpresaNaf', $strCodEmpresa);
                        $objStmt->bindParam('codigoArticulo', $strCodigoArticuloOnt);
                        $objStmt->bindParam('tipoArticulo',$strTipoArticulo);
                        $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                        $objStmt->bindParam('serieCpe', $strSerieOnt);
                        $objStmt->bindParam('cantidad', intval(1));
                        $objStmt->bindParam('pv_mensajeerror', $strMensajeError);
                        $objStmt->execute();

                        if(strlen(trim($strMensajeError))>0)
                        {
                            throw new \Exception("ERROR ONT NAF: ".$strMensajeError);
                        }
                    }
                    else
                    {
                        $strCodigoArticuloOnt  = $arrayOntNaf[0]['mensaje'];
                        throw new \Exception($strCodigoArticuloOnt);
                    }
                    
                    
                    if(!empty($strSerieWifi) && !empty($strModeloWifi))
                    {
                        //ingresar elemento wifi
                        $arrayWifiNaf           = $this->servicioGeneral->buscarElementoEnNaf($strSerieWifi, $strModeloWifi, "PI", "ActivarServicio");
                        $strStatusWifiNaf       = $arrayWifiNaf[0]['status'];
                        $strCodigoArticuloWifi  = "";
                        if($strStatusWifiNaf == "OK")
                        {
                            $this->servicioGeneral->ingresarElementoCliente($strLogin, $strSerieWifi, $strModeloWifi, "-wifi",
                                                                            $objInterfaceOnt, $strUltimaMilla, 
                                                                            $objServicio, $strUsrCreacion, 
                                                                            $strIpCreacion, "18");
                            
                            $strMensajeError    = str_repeat(' ', 1000);                                                                  
                            $strSql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                                . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                                . ":cantidad, :pv_mensajeerror); END;";
                            $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                            $objStmt->bindParam('codigoEmpresaNaf', $strCodEmpresa);
                            $objStmt->bindParam('codigoArticulo', $strCodigoArticuloWifi);
                            $objStmt->bindParam('tipoArticulo',$strTipoArticulo);
                            $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                            $objStmt->bindParam('serieCpe', $strSerieWifi);
                            $objStmt->bindParam('cantidad', intval(1));
                            $objStmt->bindParam('pv_mensajeerror', $strMensajeError);
                            $objStmt->execute();

                            if(strlen(trim($strMensajeError))>0)
                            {
                                throw new \Exception("ERROR WIFI NAF: ".$strMensajeError);
                            }
                        }
                        else
                        {
                            $strCodigoArticuloWifi  = $arrayWifiNaf[0]['mensaje'];
                            throw new \Exception($strCodigoArticuloOnt);
                        }
                    }
                    
                    if(isset($strSsid) && !empty($strSsid))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternetLite, "SSID", 
                                                                                        $strSsid, $strUsrCreacion);
                    }

                    if(isset($strPassword) && !empty($strPassword))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternetLite, "PASSWORD SSID",
                                                                                        $strPassword, $strUsrCreacion);
                    }

                    if(isset($strNumeroPc) && !empty($strNumeroPc))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternetLite, "NUMERO PC", 
                                                                                        $strNumeroPc, $strUsrCreacion);
                    }

                    if(isset($strModoOperacion) && !empty($strModoOperacion))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternetLite, "MODO OPERACION", 
                                                                                        $strModoOperacion, $strUsrCreacion);
                    }

                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternetLite, "MAC ONT", 
                                                                                    $strMacOnt, $strUsrCreacion);
                    
                    if(!empty($strMacWifi))
                    {
                        //servicio prod caract mac wifi
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternetLite, "MAC WIFI", 
                                                                                        $strMacWifi, $strUsrCreacion);
                    }

                    //Guardar ont en servicio técnico
                    $objServicioTecnico->setElementoClienteId($objInterfaceOnt->getElementoId()->getId());
                    $objServicioTecnico->setInterfaceElementoClienteId($objInterfaceOnt->getId());
                    $this->emComercial->persist($objServicioTecnico);
                    $this->emComercial->flush();
                    
                    $objServicio->setObservacion($strObservacion);
                    $this->emComercial->persist($objServicio);
                    $this->emComercial->flush();
                    
                    if($strNombreTecnicoProdPref === "INTERNET SMALL BUSINESS")
                    {
                        $strTipoIp = 'FIJA';
        
                        //Obtiene tipo de ip por el servicio (PRIVADA)
                        $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                             ->findOneBy(array("servicioId"  =>  $intIdServicio,
                                                                               "tipoIp"      =>  "PRIVADA",
                                                                               "estado"      =>  "Reservada"));
                        if (is_object($objTipoIp))
                        {
                            $strTipoIp = $objTipoIp->getTipoIp();
                        }

                        //Obtener ips fijas q tiene el servicio
                        $arrayIpsFijas    = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                    ->findBy(array( "servicioId"    => $intIdServicio,
                                                                                    "tipoIp"        => $strTipoIp, 
                                                                                    "estado"        => "Reservada"));
                        foreach($arrayIpsFijas as $objIpFija)
                        {
                            $objIpFija->setEstado("Activo");
                            $this->emInfraestructura->persist($objIpFija);
                            $this->emInfraestructura->flush();
                        }
                    }
                }
                else
                {
                    throw new \Exception($arrayRespuesta['mensaje']);
                }
            }
            else
            {
                $strMensaje = "No tiene administración";
            }
        } 
        catch (\Exception $e) 
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuestaFinal = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }
    
    /**
     * Función que realiza la activación del servicio de Internet Small Business
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 12-11-2018
     * @since 1.0
     */
    public function activarPuertoTnpMD($arrayParametros)
    {
        $objServicio                    = $arrayParametros['objServicio'];
        $objServicioTecnico             = $arrayParametros['objServicioTecnico'];
        $objInterfaceElementoOlt        = $arrayParametros['objInterfaceElementoOlt'];
        $objModeloElementoOlt           = $arrayParametros['objModeloElementoOlt'];
        $strUltimaMilla                 = $arrayParametros['strUltimaMilla'];
        $strMacOnt                      = $arrayParametros['strMacOnt'];
        $strSerieOnt                    = trim(strtoupper($arrayParametros['strSerieOnt']));
        $strModeloOnt                   = $arrayParametros['strModeloOnt'];
        $strLogin                       = $arrayParametros['strLogin'];
        $strObservacion                 = $arrayParametros['strObservacion'];
        $strSsid                        = $arrayParametros['strSsid'];
        $strNumeroPc                    = $arrayParametros['strNumeroPc'];
        $strPassword                    = $arrayParametros['strPassword'];
        $strModoOperacion               = $arrayParametros['strModoOperacion'];
        $strUsrCreacion                 = $arrayParametros['strUsrCreacion'];
        $strIpCreacion                  = $arrayParametros['strIpCreacion'];
        $strCodEmpresa                  = $arrayParametros['strCodEmpresa'];
        $objInterfaceElementoSplitter   = $arrayParametros['objInterfaceElementoSplitter'];
        $strNombreCliente               = $arrayParametros['strNombreCliente'];
        $strIdentificacion              = $arrayParametros['strIdentificacion'];
        $boolFlujoMiddleware            = $arrayParametros['boolFlujoMiddleware'];
        $strPrefijoEmpresa              = $arrayParametros['strPrefijoEmpresa'];
        $strStatus                      = "ERROR";
        $strMensaje                     = "";
        $arrayRespuesta                 = array();
        $strTipoArticulo                = "AF";
        $strIdentificacionCliente       = "";
        $strValorOntLineProfile         = "";
        $strValorServiceProfile         = "";
        $strValorVlan                   = "";
        $strValorGemPort                = "";
        $strValorTrafficTable           = "";

        try
        {
            $objElementoOlt             = $objInterfaceElementoOlt->getElementoId();
            $intIdElementoOlt           = $objElementoOlt->getId();
            $objIpOlt                   = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                  ->findOneBy(array("elementoId"    => $intIdElementoOlt, 
                                                                                    "estado"        => "Activo"));
            $objProdInternet            = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                            ->findOneBy(array(  "empresaCod"          => $strCodEmpresa, 
                                                                                "nombreTecnico"       => "INTERNET", 
                                                                                "estado"              => "Activo"));
            
            $strModeloElementoOlt       = $objModeloElementoOlt->getNombreModeloElemento();
            $strReqAprovisionamiento    = $objModeloElementoOlt->getReqAprovisionamiento();
            if($strReqAprovisionamiento === "SI")
            {
                if($strModeloElementoOlt === "MA5608T")
                {
                    //Se obtienen las características para los olt HUAWEI
                    $objServProdCaractLineProfile = $this->servicioGeneral->getServicioProductoCaracteristica(  $objServicio, 
                                                                                                                "LINE-PROFILE-NAME", 
                                                                                                                $objProdInternet);

                    if(is_object($objServProdCaractLineProfile))
                    {
                        $strValorOntLineProfile = $objServProdCaractLineProfile->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica LINE-PROFILE-NAME");
                    }                  

                    $objServProdServiceProfile = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicio, 
                                                                                                            "SERVICE-PROFILE", 
                                                                                                            $objProdInternet);
                    if(is_object($objServProdServiceProfile))
                    {
                        $strValorServiceProfile = $objServProdServiceProfile->getValor();
                    }
                    else
                    {
                        $objDetalleServiceProfileNameOlt    = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                   ->findOneBy(array(   "detalleNombre" => "SERVICE-PROFILE-NAME",
                                                                                        "detalleValor"  => $strModeloOnt,
                                                                                        "elementoId"    => $intIdElementoOlt
                                                                                     )
                                                                               );
                        if(is_object($objDetalleServiceProfileNameOlt))
                        {
                            $strValorServiceProfile = $objDetalleServiceProfileNameOlt->getDetalleValor();
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                            $objProdInternet, 
                                                                                            "SERVICE-PROFILE", 
                                                                                            $strValorServiceProfile, 
                                                                                            $strUsrCreacion);
                        }
                        else
                        {
                            throw new \Exception("No existe Caracteristica SERVICE-PROFILE-NAME en el elemento");
                        }
                    }
                    
                    $objServProdCaractVlan = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio, "VLAN", $objProdInternet);
                    if(is_object($objServProdCaractVlan))
                    {
                        $strValorVlan = $objServProdCaractVlan->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica VLAN");
                    }
                    
                    $objServProdCaractGemPort = $this->servicioGeneral->getServicioProductoCaracteristica(  $objServicio, 
                                                                                                            "GEM-PORT", 
                                                                                                            $objProdInternet);
                    if(is_object($objServProdCaractGemPort))
                    {
                        $strValorGemPort = $objServProdCaractGemPort->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica GEM-PORT");
                    }

                    $objServProdCaractTrafficTable = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicio, 
                                                                                                                "TRAFFIC-TABLE", 
                                                                                                                $objProdInternet);
                    if(is_object($objServProdCaractTrafficTable))
                    {
                        $strValorTrafficTable = $objServProdCaractTrafficTable->getValor();
                    }
                    else
                    {
                        throw new \Exception("No existe Caracteristica TRAFFIC-TABLE");
                    }
                }
                
                /**
                 * Se valida si el OLT tiene el detalle del middleware para definir si se necesita utilizar middleware 
                 * o si se necesita utilizar el flujo tradicional
                 */
                if($boolFlujoMiddleware)
                {
                    $arrayDatos = array(
                                        'serial_ont'            => $strSerieOnt,
                                        'mac_ont'               => $strMacOnt,
                                        'nombre_olt'            => $objElementoOlt->getNombreElemento(),
                                        'ip_olt'                => $objIpOlt->getIp(),
                                        'puerto_olt'            => $objInterfaceElementoOlt->getNombreInterfaceElemento(),
                                        'modelo_olt'            => $strModeloElementoOlt,
                                        'gemport'               => $strValorGemPort,
                                        'service_profile'       => $strValorServiceProfile,
                                        'line_profile'          => $strValorOntLineProfile,
                                        'traffic_table'         => $strValorTrafficTable,
                                        'vlan'                  => $strValorVlan,
                                        'estado_servicio'       => $objServicio->getEstado(),
                                        'ip'                    => '',
                                        'ip_fijas_activas'      => 0,
                                        'tipo_negocio_actual'   => "HOME",
                                        'mac_wifi'              => '',
                                        'scope'                 => ''
                                    );

                    $arrayDatosMiddleware = array(
                                                    'empresa'           => $strPrefijoEmpresa,
                                                    'nombre_cliente'    => $strNombreCliente,
                                                    'login'             => $strLogin,
                                                    'identificacion'    => $strIdentificacion,
                                                    'datos'             => $arrayDatos,
                                                    'opcion'            => $this->opcion,
                                                    'ejecutaComando'    => $this->ejecutaComando,
                                                    'usrCreacion'       => $strUsrCreacion,
                                                    'ipCreacion'        => $strIpCreacion
                    );

                    $arrayRespuesta = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                    $strStatus      = $arrayRespuesta['status'];
                    $strMensaje     = $arrayRespuesta['mensaje']; 
                }
                else
                {
                    throw new \Exception("No existe un flujo para la activación con un OLT sin MIDDLEWARE");
                }
                
                if($strStatus === "OK")
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                    $objProdInternet, 
                                                                                    "INDICE CLIENTE", 
                                                                                    $arrayRespuesta['ont_id'], 
                                                                                    $strUsrCreacion);
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, 
                                                                                    $objProdInternet, 
                                                                                    "SPID", 
                                                                                    $arrayRespuesta['spid'], 
                                                                                    $strUsrCreacion);

                    $arrayOntNaf            = $this->servicioGeneral->buscarElementoEnNaf($strSerieOnt, $strModeloOnt, "PI", "ActivarServicio");
                    $strStatusOntNaf        = $arrayOntNaf[0]['status'];
                    $strCodigoArticuloOnt   = "";

                    if($strStatusOntNaf === "OK")
                    {
                        $objInterfaceOnt = $this->servicioGeneral->ingresarElementoCliente($strLogin, $strSerieOnt, $strModeloOnt, "-ont",
                                                                                           $objInterfaceElementoSplitter, $strUltimaMilla, 
                                                                                           $objServicio, $strUsrCreacion, 
                                                                                           $strIpCreacion, "18");

                        $strMensajeError    = str_repeat(' ', 1000);                                                                  
                        $strSql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                            . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                            . ":cantidad, :pv_mensajeerror); END;";
                        $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                        $objStmt->bindParam('codigoEmpresaNaf', $strCodEmpresa);
                        $objStmt->bindParam('codigoArticulo', $strCodigoArticuloOnt);
                        $objStmt->bindParam('tipoArticulo',$strTipoArticulo);
                        $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                        $objStmt->bindParam('serieCpe', $strSerieOnt);
                        $objStmt->bindParam('cantidad', intval(1));
                        $objStmt->bindParam('pv_mensajeerror', $strMensajeError);
                        $objStmt->execute();

                        if(strlen(trim($strMensajeError))>0)
                        {
                            throw new \Exception("ERROR ONT NAF: ".$strMensajeError);
                        }
                    }
                    else
                    {
                        $strCodigoArticuloOnt  = $arrayOntNaf[0]['mensaje'];
                        throw new \Exception($strCodigoArticuloOnt);
                    }
                    
                    if(isset($strSsid) && !empty($strSsid))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternet, "SSID", 
                                                                                        $strSsid, $strUsrCreacion);
                    }

                    if(isset($strPassword) && !empty($strPassword))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternet, "PASSWORD SSID",
                                                                                        $strPassword, $strUsrCreacion);
                    }

                    if(isset($strNumeroPc) && !empty($strNumeroPc))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternet, "NUMERO PC", 
                                                                                        $strNumeroPc, $strUsrCreacion);
                    }

                    if(isset($strModoOperacion) && !empty($strModoOperacion))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternet, "MODO OPERACION", 
                                                                                        $strModoOperacion, $strUsrCreacion);
                    }

                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProdInternet, "MAC ONT", 
                                                                                    $strMacOnt, $strUsrCreacion);
                    
                    //Guardar ont en servicio técnico
                    $objServicioTecnico->setElementoClienteId($objInterfaceOnt->getElementoId()->getId());
                    $objServicioTecnico->setInterfaceElementoClienteId($objInterfaceOnt->getId());
                    $this->emComercial->persist($objServicioTecnico);
                    $this->emComercial->flush();
                    
                    $objServicio->setObservacion($strObservacion);
                    $this->emComercial->persist($objServicio);
                    $this->emComercial->flush();
                }
                else
                {
                    throw new \Exception($arrayRespuesta['mensaje']);
                }
            }
            else
            {
                $strMensaje = "No tiene administración";
            }
        } 
        catch (\Exception $e) 
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuestaFinal = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }
    
    /**
     * Función que realiza la validación de modelos de cpe wifi para servicios Ip Small Business 
     * 
     * @param array $arrayParametros [  "objServicioTecnicoIsb" => objeto del servicio técnico del Small Business Activo
     *                                  "strCodEmpresa"         => id de la empresa,
     *                                  "strTipoBusqueda"       => CON_IP o SIN_IP,
     *                                  "strProdBusqueda"       => nombre técnico del producto
     *                                  "strModeloCpeWifi"      => modelo del cpe wifi
     *                                  "strMacCpeWifi"         => mac del cpe wifi,
     *                                  "strAccion"             => acción a ejecutar
     * 
     * @return array $arrayRespuestaFinal[  'strStatus'     => indica OK/ERROR, 
     *                                      'strMensaje'    => indica el mensaje a presentar en caso de ERROR ]
     * 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 08-02-2019 Se agregan los nombres técnicos en las validaciones, para que se valide correctamente el cpe wifi usado en servicios
     *                          Internet Small Business y TelcoHome con tecnología Tellion
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 15-03-2019 Se agrega validación para mostrar mensaje diferenciado para los servicios TelcoHome cuando el modelo del equipo
     *                          CPE WIFI no sea un E900
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 04-05-2020 Se envía por parámetro la descripción del producto Small Business eliminando la invocación de la función 
     *                          obtenerInfoMapeoProdPrefYProdsAsociados. Además, se elimina la programación para el producto IP TELCOHOME,
     *                          ya que es un producto sin flujo
     * 
     */
    public function validarCpeWifiTellionSB($arrayParametros)
    {   
        $objServicioTecnicoIsb  = $arrayParametros["objServicioTecnicoIsb"] ? $arrayParametros["objServicioTecnicoIsb"] : null;
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"] ? $arrayParametros["strCodEmpresa"] : "";
        $strTipoBusqueda        = $arrayParametros["strTipoBusqueda"] ? $arrayParametros["strTipoBusqueda"] : "";
        $strProdBusqueda        = $arrayParametros["strProdBusqueda"] ? $arrayParametros["strProdBusqueda"] : "";
        $strModeloCpeWifi       = $arrayParametros["strModeloCpeWifi"] ? $arrayParametros["strModeloCpeWifi"] : "";
        $strMacCpeWifi          = $arrayParametros["strMacCpeWifi"] ? $arrayParametros["strMacCpeWifi"] : "";
        $strAccion              = $arrayParametros["strAccion"] ? $arrayParametros["strAccion"] : "";
        $strDescripcionProdPref = $arrayParametros["strDescripcionProdPref"] ? $arrayParametros["strDescripcionProdPref"] : "";
        $strMensaje             = "";
        try
        {
            if(empty($strTipoBusqueda) || empty($strProdBusqueda) || empty($strCodEmpresa) || empty($strAccion) || empty($strDescripcionProdPref))
            {
                throw new \Exception("No se han enviado correctamente los parámetros para validar modelo del cpe wifi");
            }
            if($strProdBusqueda === "IPSB" && is_object($objServicioTecnicoIsb))
            {
                $objEnlaceCliente   = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                              ->findOneBy(array("interfaceElementoIniId" => 
                                                                                $objServicioTecnicoIsb->getInterfaceElementoClienteId(),
                                                                                "estado"                 => 'Activo'));

                if(!is_object($objEnlaceCliente))
                {
                    throw new \Exception("No existe el enlace con el cpe wifi!");
                }
                $objInterfaceElementoClienteWifi   = $objEnlaceCliente->getInterfaceElementoFinId();
                if(!is_object($objInterfaceElementoClienteWifi))
                {
                    throw new \Exception("No existe la interface del cpe wifi!");
                }
                $objElementoClienteWifi = $objInterfaceElementoClienteWifi->getElementoId();
                if(!is_object($objElementoClienteWifi))
                {
                    throw new \Exception("No existe el cpe wifi!");
                }
                $strModeloCpeWifi       = $objElementoClienteWifi->getModeloElementoId()->getNombreModeloElemento();
            }
            else if($strProdBusqueda === "INTERNET SMALL BUSINESS" || $strProdBusqueda === "TELCOHOME")
            {
                if(empty($strModeloCpeWifi))
                {
                    throw new \Exception("No se ha enviado el modelo del cpe wifi!");
                }
                
                if($strTipoBusqueda === "SIN_IP" && empty($strMacCpeWifi))
                {
                    throw new \Exception("No se ha enviado la mac del cpe wifi!");
                }
            }
            
            $arrayVerifModeloCpeWifiPermitido   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('MODELOS_CPE_WIFI_ACTIVACION_SB_TELLION', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strTipoBusqueda, 
                                                                        $strModeloCpeWifi, 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strCodEmpresa);
            $strModelosPermitidos   = "";
            if(empty($arrayVerifModeloCpeWifiPermitido))
            {
                $arrayModelosCpeWifiPermitidos  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('MODELOS_CPE_WIFI_ACTIVACION_SB_TELLION', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strTipoBusqueda, 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strCodEmpresa,
                                                                        'valor2');
                $intContadorModelosWifi = 0;
                foreach($arrayModelosCpeWifiPermitidos as $arrayModeloCpeWifiPermitido)
                {
                    $intContadorModelosWifi++;
                    if(empty($strModelosPermitidos))
                    {
                        $strModelosPermitidos = $arrayModeloCpeWifiPermitido["valor2"];
                    }
                    else
                    {
                        $strModelosPermitidos = $strModelosPermitidos.", ".$arrayModeloCpeWifiPermitido["valor2"];
                    }
                }
                
                if($strAccion === "ACTIVAR" && $strProdBusqueda === "INTERNET SMALL BUSINESS")
                {
                    $strObservacionModeloWifi = "Servicio ".$strDescripcionProdPref." "
                                                ."<b>".strtolower(str_replace("_", " ", $strTipoBusqueda))." adicional</b>,"
                                                ."<br>favor ingresar "
                                                . ($intContadorModelosWifi === 1  ? "el siguiente modelo" : "alguno de los siguientes modelos")
                                                ." de CPE WIFI:<br>".$strModelosPermitidos."<br>";
                    $boolValidaCambioEquipo   = false;
                }
                else if($strAccion === "ACTIVAR" && $strProdBusqueda === "TELCOHOME")
                {
                    $strObservacionModeloWifi = "Servicio ".$strDescripcionProdPref." "
                                                ."<br>sólo permite "
                                                . ($intContadorModelosWifi === 1  ? "el siguiente modelo" : "alguno de los siguientes modelos")
                                                ." de CPE WIFI:<br>".$strModelosPermitidos."<br>";
                    $boolValidaCambioEquipo   = false;
                }
                else if(($strAccion === "ACTIVAR" && $strProdBusqueda === "IPSB")
                        || ($strAccion === "CREAR" && $strProdBusqueda === "IPSB"))
                {
                    $strObservacionModeloWifi = "Se informa que para la activación de ips adicionales es necesario tener instalado"
                                                ." un servicio ".$strDescripcionProdPref." con alguno de los siguientes modelos de CPE WIFI: "
                                                .$strModelosPermitidos." <br>El modelo actual del servicio ".$strDescripcionProdPref." es "
                                                .$strModeloCpeWifi." <br>";
                    $boolValidaCambioEquipo   = true;
                }
                else
                {
                    throw new \Exception("No existe observación definida para el producto ".$strProdBusqueda." y la acción ".$strAccion);
                }
                $boolSolCambioEquipoCreada  = false;
                if($boolValidaCambioEquipo && is_object($objServicioTecnicoIsb))
                {
                    $objServicioIsb = $objServicioTecnicoIsb->getServicioId();

                    $objTipoSolicitudCambioEquipo = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                      ->findOneByDescripcionSolicitud("SOLICITUD CAMBIO DE MODEM INMEDIATO");

                    $arrayDetalleSolicitudCambioEquipo  = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                            ->findBy(array( "servicioId"      => $objServicioIsb->getId(),
                                                                                            "tipoSolicitudId" => 
                                                                                            $objTipoSolicitudCambioEquipo->getId(),
                                                                                            "estado"          => 'AsignadoTarea'));
                    foreach($arrayDetalleSolicitudCambioEquipo as $objDetalleSolicitudCambioEquipo)
                    {
                        $objCaracteristicaElementoCliente   = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                ->findOneByDescripcionCaracteristica("ELEMENTO CLIENTE");
                        $objDetalleSolCaractElementoCliente = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                                ->findOneBy(array(
                                                                                                    "detalleSolicitudId"    => 
                                                                                                    $objDetalleSolicitudCambioEquipo,
                                                                                                    "caracteristicaId"      => 
                                                                                                    $objCaracteristicaElementoCliente,
                                                                                                    "valor"                 =>
                                                                                                    $objElementoClienteWifi->getId(),
                                                                                                    "estado"                => 'AsignadoTarea'
                                                                                                    )
                                                                                            );
                        if(is_object($objDetalleSolCaractElementoCliente))
                        {
                            $boolSolCambioEquipoCreada = true;
                            break;
                        }
                    }

                    if($boolSolCambioEquipoCreada)
                    {
                        $strObservacionModeloWifi .= "La solicitud de cambio de equipo ya está creada, favor realice el cambio de equipo";
                    }
                    else
                    {
                        $strObservacionModeloWifi .= "Por favor crear una solicitud de cambio de equipo en el servicio ".$strDescripcionProdPref;
                    }
                }
                throw new \Exception($strObservacionModeloWifi);
            }
            else if($strTipoBusqueda === "SIN_IP")
            {
                $arrayVerifOuiPermitido     = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->get('OUI_MAC_CPE_WIFI_ACTIVACION_SB_TELLION', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    $strModeloCpeWifi, 
                                                                    substr($strMacCpeWifi,0,7), 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    $strCodEmpresa);
                if(empty($arrayVerifOuiPermitido))
                {
                    $arrayOuiPermitidos     = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->get('OUI_MAC_CPE_WIFI_ACTIVACION_SB_TELLION', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    $strModeloCpeWifi, 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    $strCodEmpresa);
                    $strOuiPermitidos = "";
                    foreach($arrayOuiPermitidos as $arrayOuiPermitido)
                    {
                        if(empty($strOuiPermitidos))
                        {
                            $strOuiPermitidos = $arrayOuiPermitido["valor2"];
                        }
                        else
                        {
                            $strOuiPermitidos = $strOuiPermitidos."..., ".$arrayOuiPermitido["valor2"];
                        }
                    }
                    throw new \Exception("El formato de la mac del CPE WIFI está incorrecto.<br>"
                                         ."Favor ingresar cualquiera de los siguientes formatos:<br>".$strOuiPermitidos."...");
                }
            }
            $strStatus = "OK";
        } 
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuestaFinal = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }
    
    /**
     * 
     * Función que realiza el traslado de servicios con factibilidad sobre olts con middleware 
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 28-02-2019 - Se agregan validaciones para procesar traslados de servicios de nuevos planes MD
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 19-03-2019 - Se considera traslado de servicios Telcohome como un traslado de un plan Home de MD
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 20-06-2019 - Se realiza el traslado del equipo WIFI DUAL BAND cuando exista dentro de los servicios del cliente pendientes a trasladar
     * @since 1.2
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 16-09-2019 - Se agrega retorno de servicio origen de traslado necesario para procesar promociones por traslado de servicios
     * @since 1.3
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 05-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * @since 1.4
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 11-05-2020 Se unifica las validaciones por marca y no por modelo de olt
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 22-05-2020 Se modifica la restricción por modelos diferentes y en su lugar se valida por marca, ya que se agregó el modelo titán
     *                          de marca ZTE
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.8 04-06-2020 Se agrega registro de historial con fecha de activación mínima del servicio origen. 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 22-07-2020 Se modifican la programación para validar la existencia de solicitudes de agregar equipo para la creación de la
     *                         característica TRASLADAR EXTENDER DUAL BAND
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 22-09-2020 Se realizan validaciones por medio de nueva función implementada y no a través de la obtención directa del producto
     *                         por nombre técnico 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 15-10-2020 Se corrige la variable obtenida de los servicios extenders, para que se les pueda realizar la sincronización de 
     *                         dichos equipos
     *
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 1.10 07-12-2020 -Se modifica metodo determinarProducto() para los productos Paramount y Noggin
     *                          -Se agrega envio de parametros intIdServicio y NombreProducto en los metodos Notifica correo y sms.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.10 15-11-2020 Se agrega envío de nuevos parámetros al middleware en caso de clientes PYME (ip_fija_wan, tipo_plan_actual)
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.10 29-12-2020 Se agrega validación para enviar la variable $strTieneIps = SI cuando un plan PYME incluye el producto IP 
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.11 12-04-2021 - Se invoca a proceso que permite cambiar el estado de las solicitudes de CE por traslado.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.12 04-05-2021  Se agregan validaciones para saber si el servicio tiene tipo de Ip Privada
     * 
     * @author Daniel Reyes Peñafiel <djreyes@telconet.ec>
     * @version 1.13 17-05-2021 - Se anexa validacion para que al activar un servicio de internet por traslado, se activen
     *                          tambien los servicios adicionales validando que primero se activen en konibit
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.14 12-11-2021 Se construye el arreglo con la información que se enviará al web service para confirmación de opción 
     *                          de Tn a Middleware
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.15 10-04-2022 Se agrega programación para procesar traslados en diferente tecnologías
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.9 25-11-2022 - Se agrega variable calculoPotencia para consultar la potencia en los traslados del mismo OLT.
     *
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 1.16 26-08-2022 - Se agrega consumo a MS por productos Konibit.
     * 
     * @author Luis Farro <jcandelario@telconet.ec>
     * @version 3.31 23-02-2023 - Se modifica el envio de productos. Se envia un solo array con todos los productos Konibit.
     * 
     * @author Emmanuel Martillo Siavichay <emartillo@telconet.ec> 
     * @version 2.0 14-03-2023 - Se agrega bandera de Prefijo Empresa EN para Ecuanet flujo  activacion y traslado.
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 2.1 12-05-2023 - Se agrega inserLog para verificar si se ejecutan las peticiones a MIDDLEWARE
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 2.2 07-06-2023 - Se agrega validación NAF para comprobar si la serie se encuentra dispoble
     * 
     * @param array $arrayParametros [
     *                                  "servicio"          => objeto del servicio del punto destino
     *                                  "servicioTecnico"   => objeto del servicio técnico del punto destino
     *                                  "producto"          => objeto del producto Internet
     *                                  "usrCreacion"       => usuario de creación
     *                                  "ipCreacion"        => ip de creación
     *                                  "idEmpresa"         => código de la empresa
     *                                  "serieOnt"          => serie del cpe ont
     *                                  "macOnt"            => mac del cpe ont
     *                                  "modeloOnt"         => modelo del cpe ont
     *                                  "macWifi"           => mac del wifi
     *                                  "interfaceElemento" => objeto de la interface del olt del servicio en el punto destino
     *                                  "interfaceSplitter" => objeto de la interface del splitter del servicio en el punto destino
     *                                  "nombreCliente"     => nombre del cliente
     *                                  "identificacion"    => identificación  del cliente
     *                                  "observacion"       => observación del cliente
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => mensaje de error 
     *                               ]
     */
    public function activarClienteMdPorTraslado($arrayParametros)
    {
        try
        {
            $objServicioDestino             = $arrayParametros['servicio'];
            $objServicioTecnicoDestino      = $arrayParametros['servicioTecnico'];
            $objProductoInternet            = $arrayParametros['producto'];
            $strUsrCreacion                 = $arrayParametros['usrCreacion'];
            $strIpCreacion                  = $arrayParametros['ipCreacion'];
            $strCodEmpresa                  = $arrayParametros['idEmpresa'];
            $strSerieOntDestino             = $arrayParametros['serieOnt'];
            $strMacOntDestino               = $arrayParametros['macOnt'];
            $strModeloOntDestino            = $arrayParametros['modeloOnt'];
            $strMacWifiDestino              = $arrayParametros['macWifi'];
            $objInterfaceOltDestino         = $arrayParametros['interfaceElemento'];
            $objInterfaceSplitterDestino    = $arrayParametros['interfaceSplitter'];
            $strNombreCliente               = $arrayParametros['nombreCliente'];
            $strIdentificacion              = $arrayParametros['identificacion'];
            $strNombreTecnicoProdPref       = $arrayParametros['strNombreTecnicoProdPref'] ? $arrayParametros['strNombreTecnicoProdPref'] : "";
            $strPrefijoEmpresa              = $arrayParametros['strPrefijoEmpresa'] ? $arrayParametros['strPrefijoEmpresa'] : "MD";
            $boolDiferenteLineaPon          = false;
            $strGestionarIpsMidd            = "SI";
            $strScopeDestino                = "";
            $strIpDestino                   = "";
            $arrayIpsActivarParamMidd       = array();
            $arrayRespuestaMiddleware       = array();
            $arrayInfoIpWan                 = array();
            $strTieneIps                    = "NO";
            $strTieneIpWan                  = "NO";
            $arrayDataConfirmacionTn        = array();
            $intIdPuntoOrigen               = null;
            $strMensaje                     = "";
            $strIndiceClienteRespuestaMidd  = "";
            $strSpidRespuestaMidd           = "";
            $strVlanRespuestaMidd           = "";
            $strClientClassRespuestaMidd    = "";
            $strPckIdRespuestaMidd          = "";
            $strLineProfileRespuestaMidd    = "";
            $intIdServicioIpWanDestino      = "";
            $intIdServicioIpWanOrigen       = "";
            $objSpcTrasladoDifTecnologia    = null;
            $strSerieOntOrigen              = null;
            $strMacOntOrigen                = null;
            $boolEjecucionNaf               = false;

            // ALAMACENA DE PRODUCTOS KONIBIT
            $arrayListProdKon      = array();
            $arrayListProdKon      = [];

            //ALMACENA EL LOGIN ORIGEN
            $strLoginOrigenKon     = '';

            //ALMACENA EL COMPANY CODE ORIGEN
            $intCompCodeKon        = 0;

            $objUltimaMillaDestino          = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                      ->find($objServicioTecnicoDestino->getUltimaMillaId());
            if(!is_object($objUltimaMillaDestino))
            {
                throw new \Exception("No se ha podido obtener la última milla del servicio en el punto destino");
            }
            
            /**
             * Se verifica que la interface del splitter del servicio destino pertenece al splitter actual de la 
             * información técnica del servicio del punto destino
             */
            if(intval($objServicioTecnicoDestino->getElementoConectorId()) !== intval($objInterfaceSplitterDestino->getElementoId()->getId()))
            {
                throw new \Exception("Data del servicio técnico del punto destino inconsistente. Por favor revisar la información del splitter");
            }
            $intIdInterfaceSplitterDestinoServTec = $objServicioTecnicoDestino->getInterfaceElementoConectorId();
            
            $objPuntoDestino                = $objServicioDestino->getPuntoId();
            $objSpcTrasladoServicioInternet = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                        "TRASLADO", 
                                                                                                        $objProductoInternet);
            if(!is_object($objSpcTrasladoServicioInternet))
            {
                throw new \Exception("No existe la característica de Traslado para el servicio actual");
            }

            if($strPrefijoEmpresa === 'MD' || $strPrefijoEmpresa === 'EN')
            {
                $objSpcTrasladoDifTecnologia  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                          "DIFERENTE TECNOLOGIA FACTIBILIDAD", 
                                                                                                          $objProductoInternet);
            }
            
            $intIdServicioOrigen        = $objSpcTrasladoServicioInternet->getValor();
            $objServicioOrigen          = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioOrigen);
            if(!is_object($objServicioOrigen))
            {
                throw new \Exception("No se ha podido obtener el servicio en el punto origen del servicio que se desea trasladar");
            }
            $intIdPuntoOrigen           = $objServicioOrigen->getPuntoId()->getId();
            $objServicioTecnicoOrigen   = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array( "servicioId" => $intIdServicioOrigen));
            if(!is_object($objServicioTecnicoOrigen) 
                || !($objServicioTecnicoOrigen->getElementoId() > 0) || !($objServicioTecnicoOrigen->getInterfaceElementoId() > 0) 
                || !($objServicioTecnicoOrigen->getElementoConectorId() > 0) || !($objServicioTecnicoOrigen->getInterfaceElementoConectorId() > 0)
                || !($objServicioTecnicoOrigen->getElementoClienteId() > 0) || !($objServicioTecnicoOrigen->getInterfaceElementoClienteId() > 0))
            {
                throw new \Exception("El servicio técnico del servicio en el punto origen no tiene la información técnica completa");
            }
            $objInterfaceOltOrigen      = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                  ->find($objServicioTecnicoOrigen->getInterfaceElementoId());
            
            //Se verifica si los servicios técnicos están en diferentes olts o si los servicios técnicos están en diferentes interfaces de olts
            if($objServicioTecnicoDestino->getElementoId() !== $objServicioTecnicoOrigen->getElementoId() 
                || $objServicioTecnicoDestino->getInterfaceElementoId() !== $objServicioTecnicoOrigen->getInterfaceElementoId())
            {
                $boolDiferenteLineaPon = true;
            }
            
            if($objServicioTecnicoDestino->getElementoId() === $objServicioTecnicoOrigen->getElementoId())
            {
                $strGestionarIpsMidd = "NO";
            }
            
            $objElementoOltOrigen   = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnicoOrigen->getElementoId());
            $objModeloOltOrigen     = $objElementoOltOrigen->getModeloElementoId();
            $strModeloOltOrigen     = $objModeloOltOrigen->getNombreModeloElemento();
            $strMarcaOltOrigen      = $objModeloOltOrigen->getMarcaElementoId()->getNombreMarcaElemento();
            
            
            $objElementoOltDestino  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnicoDestino->getElementoId());
            $objModeloOltDestino    = $objElementoOltDestino->getModeloElementoId();
            $strModeloOltDestino    = $objModeloOltDestino->getNombreModeloElemento();
            $strMarcaOltDestino     = $objModeloOltDestino->getMarcaElementoId()->getNombreMarcaElemento();

            $objSpcMacOnt   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "MAC ONT", $objProductoInternet);
            
            //Se obtiene la MAC ont y MAC wifi del servicio origen en caso de que sea un traslado de igual tecnología
            if($strMarcaOltOrigen === $strMarcaOltDestino)
            {
                if(is_object($objSpcMacOnt))
                {
                    $strMacOntDestino = $objSpcMacOnt->getValor();
                }
                $objSpcMacWifi  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "MAC WIFI", $objProductoInternet);
                if(is_object($objSpcMacWifi))
                {
                    $strMacWifiDestino = $objSpcMacWifi->getValor();
                }
            }

            $objElementoCpeOntOrigen    = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                            ->find($objServicioTecnicoOrigen->getElementoClienteId());
            if(!is_object($objElementoCpeOntOrigen))
            {
                throw new \Exception("Por favor solicitar a Sistemas regularizar la data, ya que no existe elemento Cpe Ont para este servicio");
            }
            if(empty($strSerieOntDestino))
            {
                $strSerieOntDestino = $objElementoCpeOntOrigen->getSerieFisica();
            }
            if(empty($strModeloOntDestino))
            {
                $strModeloOntDestino = $objElementoCpeOntOrigen->getModeloElementoId()->getNombreModeloElemento();
            }
            
            if($strNombreTecnicoProdPref === "TELCOHOME")
            {
                $arrayProdIp                    = array();
                $strTieneIps                    = "NO";
                $strGestionarIpsMidd            = "NO";
                $objServProdCaracTipoNegocio    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino,
                                                                                                            "Grupo Negocio",
                                                                                                            $objProductoInternet);
                if(is_object($objServProdCaracTipoNegocio))
                {
                    $strTipoNegocioPuntoDestino = $objServProdCaracTipoNegocio->getValor();
                }
                else
                {
                    throw new \Exception("No existe Característica Grupo Negocio asociado al servicio");
                }
                $arrayServiciosPuntoOrigen  = array();
                $arrayServiciosPuntoDestino = array();
            }
            else
            {
                $strTipoNegocioPuntoDestino = $objServicioDestino->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();
                $arrayProdIp                = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->findBy(array( "nombreTecnico" => "IP", 
                                                                                "empresaCod"    => $strCodEmpresa, 
                                                                                "estado"        => "Activo"));
                if(empty($arrayProdIp))
                {
                    throw new \Exception("No existe el objeto del producto IP");
                }
                
                $arrayServiciosPuntoOrigen  = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->findBy(array( "puntoId" => $objServicioOrigen->getPuntoId()->getId(), 
                                                                                "estado" => "Activo"));

                $arrayServiciosPuntoDestino = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->findBy(array( "puntoId" => $objServicioDestino->getPuntoId()->getId(), 
                                                                                "estado" => "PreAsignacionInfoTecnica"));
            }
            
            if($strTipoNegocioPuntoDestino === 'PRO')
            {
                //Verificar si existe la ip dentro del plan
                $objPlanDetNuevo        = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                            ->findBy(array("planId" => $objServicioDestino->getPlanId()->getId()));
                $intIndiceProductoIp    = $this->servicioGeneral->obtenerIndiceInternetEnPlanDet($objPlanDetNuevo, $arrayProdIp);

                if($intIndiceProductoIp !== -1)
                {
                    $strTieneIps = "SI";
                }
                //Verificar si el punto tiene ips adicionales
                else
                {
                    $arrayDatosIp   = $this->servicioGeneral->getInfoIpsFijaPunto(  $arrayServiciosPuntoOrigen, $arrayProdIp, 
                                                                                    $objServicioOrigen, 'Activo', 
                                                                                    'Activo', $objProductoInternet);
                    //Obtener la cantidad de ips adicionales
                    $intIpsFijasActivas     = $arrayDatosIp['ip_fijas_activas'];
                    if($intIpsFijasActivas > 0)
                    {
                        $strTieneIps = "SI";
                    }
                }
            }
            else if($strTipoNegocioPuntoDestino === 'PYME')
            {
                if(is_object($objServicioOrigen->getPlanId()))
                {
                    $arrayRespuestaIpEnPlanOrigen   = $this->servicioGeneral->obtieneProductoEnPlan( array( "intIdPlan" => 
                                                                                                            $objServicioOrigen->getPlanId()->getId(),
                                                                                    "strNombreTecnicoProducto"  =>  "IP"));
                    $strProductoIpEnPlanOrigen      = $arrayRespuestaIpEnPlanOrigen["strProductoEnPlan"];
                    if($strProductoIpEnPlanOrigen === "SI")
                    {
                        $strTieneIps   = "SI";
                    }
                }
                
                $arrayParametrosIpWan = array('objPunto'       => $objServicioOrigen->getPuntoId(),
                                              'strEmpresaCod'  => $strCodEmpresa,
                                              'strUsrCreacion' => $strUsrCreacion,
                                              'strIpCreacion'  => $strIpCreacion);
                $arrayDatosIpWan      = $this->servicioGeneral
                                             ->getIpFijaWan($arrayParametrosIpWan);
                if (isset($arrayDatosIpWan['strStatus']) && !empty($arrayDatosIpWan['strStatus']) && 
                    $arrayDatosIpWan['strStatus'] === 'OK' && isset($arrayDatosIpWan['strExisteIpWan']) &&
                    !empty($arrayDatosIpWan['strExisteIpWan']) &&  $arrayDatosIpWan['strExisteIpWan'] === 'SI')
                {
                    $strIpFijaWanOrigen       = $arrayDatosIpWan['arrayInfoIp']['strIp'];
                    $strScopeWanOrigen        = $arrayDatosIpWan['arrayInfoIp']['strScope'];
                    $intIdServicioIpWanOrigen = $arrayDatosIpWan['arrayInfoIp']['intIdServicioIp'];
                    $objIpWanOrigen           = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                     ->findOneBy(array("servicioId" => $arrayDatosIpWan['arrayInfoIp']['intIdServicioIp'],
                                                                       "estado"     => "Activo"));
                    $strTieneIps   = "SI";
                    $strTieneIpWan = "SI";
                    $arrayParametrosIpWan = array('objPunto'          => $objServicioDestino->getPuntoId(),
                                                  'strEmpresaCod'     => $strCodEmpresa,
                                                  'strUsrCreacion'    => $strUsrCreacion,
                                                  'strIpCreacion'     => $strIpCreacion,
                                                  'strEstadoServicio' => 'PreAsignacionInfoTecnica');
                    $arrayDatosIpWan      = $this->servicioGeneral
                                                 ->getIpFijaWan($arrayParametrosIpWan);
                    $intIdServicioIpWanDestino =  $arrayDatosIpWan['arrayInfoIp']['intIdServicioIp'];
                    $arrayInfoIpWan = array("strIpFijaWanOrigen" => $strIpFijaWanOrigen,
                                            "strScopeWanOrigen"  => $strScopeWanOrigen,
                                            "objIpWanOrigen"     => $objIpWanOrigen,
                                            "intIdServicioIp"    => $intIdServicioIpWanDestino);
                    $intIdx = 0;
                    foreach($arrayServiciosPuntoDestino as $objServicioIpItem)
                    {
                        if ($objServicioIpItem->getId() === $intIdServicioIpWanDestino)
                        {
                            break;
                        }
                        $intIdx++;
                    }
                    array_splice($arrayServiciosPuntoDestino,$intIdx,1);
                }
                if ($strTieneIps !== "SI")
                {
                    $arrayDatosIpPyme   = $this->servicioGeneral->getInfoIpsFijaPunto(  $arrayServiciosPuntoOrigen, $arrayProdIp, 
                                                                                        $objServicioOrigen, 'Activo', 
                                                                                        'Activo', $objProductoInternet);
                    //Obtener la cantidad de ips adicionales
                    $intIpsFijasActivasPyme = $arrayDatosIpPyme['ip_fijas_activas'];
                    if($intIpsFijasActivasPyme > 0)
                    {
                        $strTieneIps = "SI";
                    }
                }
            }

            if (is_object($objSpcTrasladoDifTecnologia))
            {
                $strSerieOntOrigen = $objElementoCpeOntOrigen->getSerieFisica();
                if(is_object($objSpcMacOnt))
                {
                    $strMacOntOrigen = $objSpcMacOnt->getValor();
                }
            }
            
            if($boolDiferenteLineaPon)
            {
                if($objUltimaMillaDestino->getNombreTipoMedio() === "Fibra Optica" || $objUltimaMillaDestino->getNombreTipoMedio() === "FTTx")
                {
                    if(is_object($objSpcTrasladoDifTecnologia))
                    {
                        $arrayVerifOntNaf   = $this->servicioGeneral->buscarEquipoEnNafPorParametros(
                          array( "serieEquipo"        =>   $strSerieOntDestino,
                                 "estadoEquipo"       => "PI",
                                 "tipoArticuloEquipo" => "AF",
                                "modeloEquipo"        => $strModeloOntDestino));
                        if($arrayVerifOntNaf["status"] === "ERROR")
                        {
                            throw new \Exception($arrayVerifOntNaf["mensaje"]);
                        }
                    }
                    //Se obtienen los parámetros para el envío del json correspondiente al middleware
                    $arrayParamsDiferenteLineaPon       = array(            
                                                                "objProductoInternet"           => $objProductoInternet,
                                                                "arrayProdIp"                   => $arrayProdIp,
                                                                "strTipoNegocioPuntoDestino"    => $strTipoNegocioPuntoDestino,
                                                                "objServicioOrigen"             => $objServicioOrigen,
                                                                "objServicioDestino"            => $objServicioDestino,
                                                                "objServicioTecnicoOrigen"      => $objServicioTecnicoOrigen,
                                                                "arrayServiciosPuntoOrigen"     => $arrayServiciosPuntoOrigen,
                                                                "arrayServiciosPuntoDestino"    => $arrayServiciosPuntoDestino,
                                                                "objElementoOltOrigen"          => $objElementoOltOrigen,
                                                                "strModeloOltOrigen"            => $strModeloOltOrigen,
                                                                "strMarcaOltOrigen"             => $strMarcaOltOrigen,
                                                                "strMarcaOltDestino"            => $strMarcaOltDestino,
                                                                "objInterfaceOltOrigen"         => $objInterfaceOltOrigen,
                                                                "objElementoOltDestino"         => $objElementoOltDestino,
                                                                "strModeloOltDestino"           => $strModeloOltDestino,
                                                                "objInterfaceOltDestino"        => $objInterfaceOltDestino,
                                                                "objElementoCpeOntOrigen"       => $objElementoCpeOntOrigen,
                                                                "strSerieOnt"                   => $strSerieOntDestino,
                                                                "strMacOnt"                     => $strMacOntDestino,
                                                                "strModeloOntDestino"           => $strModeloOntDestino,
                                                                "strMacWifi"                    => $strMacWifiDestino,
                                                                "strNombreCliente"              => $strNombreCliente,
                                                                "strIdentificacion"             => $strIdentificacion,
                                                                "strIpCreacion"                 => $strIpCreacion,
                                                                "strUsrCreacion"                => $strUsrCreacion,
                                                                "strTieneIps"                   => $strTieneIps,
                                                                "strGestionarIpsMidd"           => $strGestionarIpsMidd,
                                                                "strNombreTecnicoProdPref"      => $strNombreTecnicoProdPref,
                                                                "strTieneIpWan"                 => $strTieneIpWan,
                                                                "arrayInfoIpWan"                => $arrayInfoIpWan,
                                                                "strPrefijoEmpresa"             => $strPrefijoEmpresa,
                                                                "objSpcTrasladoDifTecnologia"   => $objSpcTrasladoDifTecnologia,
                                                                "strSerieOntOrigen"             => $strSerieOntOrigen,
                                                                "strMacOntOrigen"               => $strMacOntOrigen,
                                                         );
                    if (isset($arrayParametros['calculoPotencia']) && !empty($arrayParametros['calculoPotencia'])) 
                    {
                        $arrayParamsDiferenteLineaPon['calculoPotencia'] = $arrayParametros['calculoPotencia'];
                    }
                    $arrayRespuestaDiferenteLineaPon    = $this->trasladoDiferenteLineaPonFOMd($arrayParamsDiferenteLineaPon);
                    $strStatusDiferenteLineaPon         = $arrayRespuestaDiferenteLineaPon["status"];
                    $strMensajeRespuestaMiddleware      = "";
                    if($strStatusDiferenteLineaPon === "OK")
                    {
                        $arrayRespuestaMiddleware       = $arrayRespuestaDiferenteLineaPon["arrayRespuestaMiddleware"];
                        $strStatusActivar               = $arrayRespuestaMiddleware['status_activar'];
                        $strStatusCancelar              = $arrayRespuestaMiddleware['status_cancelar'];
                        if($strStatusCancelar === "OK" && $strStatusActivar === "OK")
                        {
                            $arrayDataConfirmacionTn                                    = $arrayRespuestaDiferenteLineaPon["arrayDataConfirmacionTn"];
                            $arrayDataConfirmacionTn['statusMiddleware']                = "OK";
                            $arrayDataConfirmacionTn['datos']['respuesta_confirmacion'] = "OK";
                            $strStatus                      = "OK";
                            $strMensaje                     = "Cancelar: ".$arrayRespuestaMiddleware['mensaje_cancelar']
                                                              ." Activar: ".$arrayRespuestaMiddleware['mensaje_activar'];
                            $strScopeDestino                = $arrayRespuestaDiferenteLineaPon["strScopeDestino"];
                            $strIpDestino                   = $arrayRespuestaDiferenteLineaPon["strIpDestino"];
                            $arrayIpsActivarParamMidd       = $arrayRespuestaDiferenteLineaPon["arrayIpsActivar"];
                            $strIndiceClienteRespuestaMidd  = $arrayRespuestaMiddleware['ont_id'];
                            $strSpidRespuestaMidd           = $arrayRespuestaMiddleware['spid'];
                            if(isset($arrayRespuestaMiddleware['potencia'])  && !empty($arrayRespuestaMiddleware['potencia']) 
                               && isset($arrayParametros['calculoPotencia']) && $arrayParametros['calculoPotencia'] == 'S')
                            {
                                $strObservacion = 'Potencia en nivel óptimo'.'<br> <b>Potencia: '.$arrayRespuestaMiddleware['potencia'].' dBm <b>';

                                $objInfoServicioHistorial = new InfoServicioHistorial();
                                $objInfoServicioHistorial->setEstado('AsignadoTarea');
                                $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);                                
                                $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                                $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                                $objInfoServicioHistorial->setServicioId($objServicioDestino);
                                $objInfoServicioHistorial->setObservacion($strObservacion);
                                $this->emComercial->persist($objInfoServicioHistorial);
                                $this->emComercial->flush();
                            }
                            if ($strMarcaOltDestino === "ZTE" && is_object($objSpcTrasladoDifTecnologia))
                            {
                                $strVlanRespuestaMidd           = $arrayRespuestaMiddleware['vlan'];
                                $strClientClassRespuestaMidd    = $arrayRespuestaMiddleware['client_class'];
                                $strPckIdRespuestaMidd          = $arrayRespuestaMiddleware['pckid'];
                                $strLineProfileRespuestaMidd    = $arrayRespuestaMiddleware['line_profile'];
                            }
                        }else if($strStatusCancelar === "OK" && $strStatusActivar !== "OK" && isset($arrayRespuestaMiddleware['potencia'])
                            && isset($arrayParametros['calculoPotencia']) && $arrayParametros['calculoPotencia'] == 'S')
                        {
                            $strMensajeRespuestaMiddleware = "Potencia: ".$arrayRespuestaMiddleware['potencia'];
                        }else
                        {
                            $strMensajeRespuestaMiddleware  = "Cancelar: ".$arrayRespuestaMiddleware['mensaje_cancelar'];
                            if($strStatusCancelar === 'OK' && $strStatusActivar === "ERROR"
                                && $strTieneIps === "SI" && isset($arrayRespuestaMiddleware['ip_cancelar'])
                                    && !empty($arrayRespuestaMiddleware['ip_cancelar']))
                            {
                                $strMensajeRespuestaMiddleware = $strMensajeRespuestaMiddleware ." Ips Cancelar: ";
                                $arrayRespuestaIpsCancelarMidd = $arrayRespuestaMiddleware['ip_cancelar'];
                                foreach($arrayRespuestaIpsCancelarMidd as $arrayRespuestaIpCancelarMidd)
                                {
                                    $strMensajeRespuestaMiddleware  = $strMensajeRespuestaMiddleware 
                                                                      . $arrayRespuestaIpCancelarMidd['mensaje']. " ";
                                }
                            }
                            $strMensajeRespuestaMiddleware = $strMensajeRespuestaMiddleware
                                                             ." Activar: ".$arrayRespuestaMiddleware['mensaje_activar'];
                        }
                    }
                    else
                    {
                        throw new \Exception($arrayRespuestaDiferenteLineaPon["mensaje"]);
                    }
                    
                    if(!empty($strMensajeRespuestaMiddleware))
                    {
                        throw new \Exception($strMensajeRespuestaMiddleware);
                    }
                }
                else if($objUltimaMillaDestino->getNombreTipoMedio() == "Cobre" || $objUltimaMillaDestino->getNombreTipoMedio() == "Radio")
                {
                    $strReqAprovisionamiento = $objElementoOltOrigen->getModeloElementoId()->getReqAprovisionamiento();
                    if($strReqAprovisionamiento === "SI")
                    {
                        $arrayCancelarServicioAnterior  = array(
                                                                'servicio'          => $objServicioOrigen,
                                                                'interfaceElemento' => $objInterfaceOltOrigen,
                                                                'modeloElemento'    => $objElementoOltOrigen->getModeloElementoId(),
                                                                'producto'          => $objProductoInternet
                                                          );
                        $arrayResultadoCancel   = $this->cancelarServicio->cancelarServicioScriptTtco($arrayCancelarServicioAnterior);
                        $strStatus              = $arrayResultadoCancel[0]['status'];
                        $strMensaje             = $arrayResultadoCancel[0]['mensaje'];
                    }
                }
                else
                {
                    throw new \Exception("Tipo Medio no tiene Aprovisionamiento!");
                }
                $strObservacionHistorial = "Se ejecuto el Script por TRASLADO";
            }
            else
            {
                $strObservacionHistorial = "Sin ejecucion de Script por TRASLADO";
                if($objUltimaMillaDestino->getNombreTipoMedio() === "Fibra Optica" || $objUltimaMillaDestino->getNombreTipoMedio() === "FTTx")
                {
                    $objSpcIndiceClienteOrigen = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioOrigen, "INDICE CLIENTE",
                                                                                                            $objProductoInternet);
                    if(is_object($objSpcIndiceClienteOrigen))
                    {
                        $strIndiceClienteRespuestaMidd = $objSpcIndiceClienteOrigen->getValor();
                    }
                    
                    if($strMarcaOltDestino !== "TELLION")
                    {
                        $objSpcSpidOrigen = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "SPID", 
                                                                                                      $objProductoInternet);
                        if(is_object($objSpcSpidOrigen))
                        {
                            $strSpidRespuestaMidd = $objSpcSpidOrigen->getValor();
                        }
                    }
                }
                else if($objUltimaMillaDestino->getNombreTipoMedio() === "Cobre" || $objUltimaMillaDestino->getNombreTipoMedio() === "Radio")
                {
                    $objSpcMacOrigen  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "MAC", $objProductoInternet);
                    if(is_object($objSpcMacOrigen))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDestino, $objProductoInternet, "MAC",
                                                                                       $objSpcMacOrigen->getValor(), $strUsrCreacion);
                    }
                }
            }
            
            
            if($objUltimaMillaDestino->getNombreTipoMedio() === "Fibra Optica" || $objUltimaMillaDestino->getNombreTipoMedio() === "FTTx")
            {
                $objSpcIndiceClienteDestino  = $this->servicioGeneral->getServicioProductoCaracteristica(   $objServicioDestino, "INDICE CLIENTE",
                                                                                                            $objProductoInternet);
                
                if(is_object($objSpcIndiceClienteDestino))
                {
                    $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcIndiceClienteDestino, 'Eliminado');
                }
                //GRABAR INDICE-CLIENTE
                $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioDestino, 
                                                                                $objProductoInternet, 
                                                                                "INDICE CLIENTE", 
                                                                                $strIndiceClienteRespuestaMidd, 
                                                                                $strUsrCreacion );
                if($strMarcaOltDestino !== "TELLION")
                {
                    $objSpcSpidDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, "SPID",
                                                                                                    $objProductoInternet);
                    if(is_object($objSpcSpidDestino))
                    {
                        $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcSpidDestino, 'Eliminado');
                    }
                    //GRABAR SPID
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioDestino, 
                                                                                    $objProductoInternet, 
                                                                                    "SPID", 
                                                                                    $strSpidRespuestaMidd, 
                                                                                    $strUsrCreacion );
                    $objSpcServiceProfileDestino    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                                "SERVICE-PROFILE",
                                                                                                                $objProductoInternet);
                    if(is_object($objSpcServiceProfileDestino))
                    {
                        $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcServiceProfileDestino, 'Eliminado');
                    }
                    //GRABAMOS SERVICE-PROFILE
                    if (is_object($objSpcTrasladoDifTecnologia))
                    {
                        $strModeloCpeOntGuardar = $strModeloOntDestino;
                    }
                    else
                    {
                        $strModeloCpeOntGuardar  = $objElementoCpeOntOrigen->getModeloElementoId()->getNombreModeloElemento();
                    }
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioDestino, 
                                                                                    $objProductoInternet, 
                                                                                    "SERVICE-PROFILE", 
                                                                                    $strModeloCpeOntGuardar, 
                                                                                    $strUsrCreacion );
                    if ($strMarcaOltDestino === "ZTE")
                    {
                        $objSpcVlanDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, "VLAN",
                                                                                                        $objProductoInternet);
                        if(is_object($objSpcVlanDestino))
                        {
                            $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcVlanDestino, 'Eliminado');
                        }

                        $objSpcClientClassDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, "CLIENT CLASS",
                                                                                                        $objProductoInternet);
                        if(is_object($objSpcClientClassDestino))
                        {
                            $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcClientClassDestino, 'Eliminado');
                        }

                        $objSpcPackageIdDestino = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, "PACKAGE ID",
                                                                                                            $objProductoInternet);
                        if(is_object($objSpcPackageIdDestino))
                        {
                            $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcPackageIdDestino, 'Eliminado');
                        }

                        $objSpcLineProfileDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                                "LINE-PROFILE-NAME",
                                                                                                                $objProductoInternet);
                        if(is_object($objSpcLineProfileDestino))
                        {
                            $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcLineProfileDestino, 'Eliminado');
                        }

                        if (!is_object($objSpcTrasladoDifTecnologia))
                        {
                            $objSpcVlanOrigen = $this->servicioGeneral
                                                     ->getServicioProductoCaracteristica($objServicioOrigen, "VLAN", $objProductoInternet);
                            if(is_object($objSpcVlanOrigen))
                            {
                                $strVlanRespuestaMidd = $objSpcVlanOrigen->getValor();
                            }

                            $objSpcClientClassOrigen = $this->servicioGeneral
                                                            ->getServicioProductoCaracteristica($objServicioOrigen,
                                                                                                "CLIENT CLASS",
                                                                                                $objProductoInternet);
                            if(is_object($objSpcClientClassOrigen))
                            {
                                $strClientClassRespuestaMidd = $objSpcClientClassOrigen->getValor();
                            }

                            $objSpcPckIdOrigen = $this->servicioGeneral
                                                      ->getServicioProductoCaracteristica($objServicioOrigen, "PACKAGE ID", $objProductoInternet);
                            if(is_object($objSpcPckIdOrigen))
                            {
                                $strPckIdRespuestaMidd = $objSpcPckIdOrigen->getValor();
                            }

                            $objSpcLineProfileOrigen = $this->servicioGeneral
                                                            ->getServicioProductoCaracteristica($objServicioOrigen,
                                                                                                "LINE-PROFILE-NAME",
                                                                                                $objProductoInternet);
                            if(is_object($objSpcLineProfileOrigen))
                            {
                                $strLineProfileRespuestaMidd = $objSpcLineProfileOrigen->getValor();
                            }
                        }
                        
                        //GRABAMOS VLAN
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioDestino, 
                                                                                        $objProductoInternet, 
                                                                                        "VLAN", 
                                                                                        $strVlanRespuestaMidd, 
                                                                                        $strUsrCreacion );
                        //GRABAMOS CLIENT CLASS
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioDestino, 
                                                                                        $objProductoInternet, 
                                                                                        "CLIENT CLASS", 
                                                                                        $strClientClassRespuestaMidd, 
                                                                                        $strUsrCreacion );
                        //GRABAMOS PCKID
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioDestino, 
                                                                                        $objProductoInternet, 
                                                                                        "PACKAGE ID", 
                                                                                        $strPckIdRespuestaMidd, 
                                                                                        $strUsrCreacion );
                        //GRABAMOS LINE PROFILE NAME
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioDestino, 
                                                                                        $objProductoInternet, 
                                                                                        "LINE-PROFILE-NAME", 
                                                                                        $strLineProfileRespuestaMidd, 
                                                                                        $strUsrCreacion );
                    }
                }
            }

            $objSpcMacOntDestino   = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioDestino, 
                                                                                                "MAC ONT",
                                                                                                $objProductoInternet);
            if(is_object($objSpcMacOntDestino))
            {
                $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcMacOntDestino, 'Eliminado');
            }
            $objSpcMacOntOrigen   = $this->servicioGeneral->getServicioProductoCaracteristica(  $objServicioOrigen, "MAC ONT", 
                                                                                                $objProductoInternet);
            if(is_object($objSpcMacOntOrigen))
            {
                $strSpcMacOntRegistrar = $objSpcMacOntOrigen->getValor();
                if (is_object($objSpcTrasladoDifTecnologia))
                {
                    $strSpcMacOntRegistrar = $strMacOntDestino;
                }
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDestino, $objProductoInternet, "MAC ONT",
                                                                               $strSpcMacOntRegistrar, $strUsrCreacion);
            }

            $objSpcMacWifiDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                "MAC WIFI",
                                                                                                $objProductoInternet);
            if(is_object($objSpcMacWifiDestino))
            {
                $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcMacWifiDestino, 'Eliminado');
            }
            $objSpcMacWifiOrigen  = $this->servicioGeneral->getServicioProductoCaracteristica(  $objServicioOrigen, "MAC WIFI",
                                                                                                $objProductoInternet);
            if(is_object($objSpcMacWifiOrigen) && !is_object($objSpcTrasladoDifTecnologia))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDestino, $objProductoInternet, "MAC WIFI",
                                                                               $objSpcMacWifiOrigen->getValor(), $strUsrCreacion);
            }
            
            $objSpcSsidDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                            "SSID",
                                                                                            $objProductoInternet);
            if(is_object($objSpcSsidDestino))
            {
                $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcSsidDestino, 'Eliminado');
            }
            $objSpcSsidOrigen = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "SSID", $objProductoInternet);
            if(is_object($objSpcSsidOrigen) && !is_object($objSpcTrasladoDifTecnologia))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDestino, $objProductoInternet, "SSID",
                                                                               $objSpcSsidOrigen->getValor(), $strUsrCreacion);
            }
            
            $objSpcPasswSsidDestino = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                "PASSWORD SSID",
                                                                                                $objProductoInternet);
            if(is_object($objSpcPasswSsidDestino))
            {
                $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcPasswSsidDestino, 'Eliminado');
            }
            $objSpcPasswordOrigen = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "PASSWORD SSID", 
                                                                                              $objProductoInternet);
            if(is_object($objSpcPasswordOrigen) && !is_object($objSpcTrasladoDifTecnologia))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDestino, $objProductoInternet, "PASSWORD SSID",
                                                                               $objSpcPasswordOrigen->getValor(), $strUsrCreacion);
            }

            $objSpcNumPcDestino = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                            "NUMERO PC",
                                                                                            $objProductoInternet);
            if(is_object($objSpcNumPcDestino))
            {
                $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcNumPcDestino, 'Eliminado');
            }
            $objSpcNumeroPcOrigen   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "NUMERO PC", 
                                                                                                $objProductoInternet);
            if(is_object($objSpcNumeroPcOrigen) && !is_object($objSpcTrasladoDifTecnologia))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDestino, $objProductoInternet, "NUMERO PC",
                                                                               $objSpcNumeroPcOrigen->getValor(), $strUsrCreacion);
            }

            $objSpcModoOperacionDestino = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                    "MODO OPERACION",
                                                                                                    $objProductoInternet);
            if(is_object($objSpcModoOperacionDestino))
            {
                $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcModoOperacionDestino, 'Eliminado');
            }
            $objSpcModoOperacionOrigen  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "MODO OPERACION", 
                                                                                                    $objProductoInternet);
            if(is_object($objSpcModoOperacionOrigen) && !is_object($objSpcTrasladoDifTecnologia))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioDestino, $objProductoInternet, "MODO OPERACION",
                                                                               $objSpcModoOperacionOrigen->getValor(), $strUsrCreacion);
            }

            /**
             * Se actualiza el estado del servicio de Internet del punto origen y el estado del punto origen a Trasladado 
             * y se crea el respectivo historial del servicio
             */
            $objServicioOrigen->setEstado("Trasladado");
            $this->emComercial->persist($objServicioOrigen);
            $this->emComercial->flush();
            
            $this->servicioGeneral->ingresarServicioHistorial($objServicioOrigen, "Trasladado", "Se Traslado el Servicio", 
                                                              $strUsrCreacion, $strIpCreacion);
            
            $objPuntoOrigen = $objServicioOrigen->getPuntoId();
            $objPuntoOrigen->setEstado("Trasladado");
            $this->emComercial->persist($objPuntoOrigen);
            $this->emComercial->flush();

            $objPlanServicio = $objServicioOrigen->getPlanId();
            if(is_object($objPlanServicio))
            {
                if(is_object($objSpcTrasladoDifTecnologia))
                {
                    // Actualizamos todos los productos adicionales que posee el punto origen
                    $arrayDatPuntOrigen = array(
                        "intIdPuntoOrigen"     => $objServicioOrigen->getPuntoId()->getId(),
                        "intIdPuntoDestino"    => $objServicioDestino->getPuntoId()->getId(),
                        "intIdServicioOrigen"  => $objServicioOrigen->getId(),
                        "intIdServicioDestino" => $objServicioDestino->getId(),
                        "strIpCreacion"        => $strIpCreacion,
                        "strUsrCreacion"       => $strUsrCreacion,
                        "strCodEmpresa"        => $strCodEmpresa,
                        "intIdPerEmpresaRol"   => $arrayParametros['idPersonaEmpresaRol']
                    );

                    //en traslados de diferente tecnología se deben cancelar los servicios que incluyen externers, netlifecam
                    $this->actualizaProduAdicManualesDifTecnologia($arrayDatPuntOrigen);
                }
                else
                {
                    // Actualizamos todos los productos adicionales que posee el punto origen
                    $arrayDatPuntOrigen = array(
                        "intIdPunto"     => $objServicioOrigen->getPuntoId()->getId(),
                        "intIdServicio"  => $objServicioOrigen->getId(),
                        "strIpCreacion"  => $strIpCreacion,
                        "strUsrCreacion" => $strUsrCreacion,
                        "strCodEmpresa"  => $strCodEmpresa,
                        "intIdPerEmpresaRol" => $arrayParametros['idPersonaEmpresaRol']
                    );

                    $this->actualizaProduAdicManuales($arrayDatPuntOrigen);    
                }
                
                // Eliminamos el boton de konibit en caso de tener el servicio
                $arrayDatosServOrigen = array(
                    "objServicio"     => $objServicioOrigen,
                    "intCodEmpresa"   => $strCodEmpresa,
                    "strIpCreacion"   => $strIpCreacion,
                    "strUserCreacion" => $strUsrCreacion
                );
                $this->cancelaBotKonibitTraslado($arrayDatosServOrigen);
            }
            
            /**
             * Se verifica si tiene el olt tiene aprovisionamiento CNR para proceder con la eliminación de su respectivo ldap 
             */
            $objDetAprovisionamientoOltOrigen   = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                          ->findOneBy(array("elementoId"    => 
                                                                                            $objElementoOltOrigen->getId(), 
                                                                                            "detalleNombre" => "APROVISIONAMIENTO_IP"));
            if(is_object($objDetAprovisionamientoOltOrigen))
            {
                $strTipoAprovisionamientoOltOrigen = $objDetAprovisionamientoOltOrigen->getDetalleValor();
                if($strTipoAprovisionamientoOltOrigen === "CNR")
                {
                    $mixResultadoJsonLdap = $this->servicioGeneral->ejecutarComandoLdap("E", $objServicioOrigen->getId(), $strPrefijoEmpresa);
                    if($mixResultadoJsonLdap->status != "OK")
                    {
                        $strMensaje = $strMensaje . "<br>" . $mixResultadoJsonLdap->mensaje;
                    }
                }
            }

            /**
             * Se eliminan todos los enlaces que tengan con interface inicial a la interface del splitter del servicio origen
             */
            $arrayEnlacesServicioOrigen = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                  ->findBy(array("interfaceElementoIniId"   => 
                                                                                 $objServicioTecnicoOrigen->getInterfaceElementoConectorId(),
                                                                                 "estado"                   => "Activo"));

            foreach($arrayEnlacesServicioOrigen as $objEnlaceServicioOrigen)
            {
                $objEnlaceServicioOrigen->setEstado("Eliminado");
                $this->emInfraestructura->persist($objEnlaceServicioOrigen);
                $this->emInfraestructura->flush();
            }
            
            /**
             * Se desconecta la interface del splitter del servicio origen
             */
            $objInterfaceSplitterServicioOrigen = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                          ->find($objServicioTecnicoOrigen->getInterfaceElementoConectorId());
            $objInterfaceSplitterServicioOrigen->setEstado("not connect");
            $this->emInfraestructura->persist($objInterfaceSplitterServicioOrigen);
            $this->emInfraestructura->flush();              
            
            /**
             * Se actualiza el estado del servicio de Internet del punto destino y el punto destino a Activo
             * y se crean los respectivos historiales del servicio
             */
            $objServicioDestino->setEstado("Activo");
            $objServicioDestino->setObservacion("Se Activo el Servicio Traslado");
            if($objServicioDestino->getPuntoFacturacionId()==null || $objServicioDestino->getPuntoFacturacionId()=="")
            {
                $objServicioDestino->setPuntoFacturacionId($objPuntoDestino);
                $objPuntoAdicionalDestino   = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                                                ->findOneBy(array( "puntoId" => $objPuntoDestino->getId()));
                $objPuntoAdicionalDestino->setEsPadreFacturacion("S");
                $this->emComercial->persist($objPuntoAdicionalDestino);
                $this->emComercial->flush();
            }
            $this->emComercial->persist($objServicioDestino);
            $this->emComercial->flush();

            // Activamos los servicios adicionales automaticos cuando es activacion de internet
            $objPlanService = $objServicioDestino->getPlanId();

            $arrayProductoParam = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('VALIDA_PROD_ADICIONAL', 
                                                    'COMERCIAL', '',
                                                    'Verifica Producto Internet',
                                                    '','','','','',$strCodEmpresa);
            if (is_array($arrayProductoParam) && !empty($arrayProductoParam))
            {
                $objProdParametro = $arrayProductoParam[0];
            }
            if (!empty($objPlanService) && 
                $objProductoInternet->getDescripcionProducto() == $objProdParametro['valor3'])
            {
                // Acivamos los servicios adicionales
                $arrayDatosParametros = array(
                    "intIdPunto"      => $objServicioDestino->getPuntoId()->getId(),
                    "intCodEmpresa"   => $strCodEmpresa,
                    "strIpCreacion"   => $strIpCreacion,
                    "strUserCreacion" => $strUsrCreacion,
                    "strAccion"       => 'confirmarServicio'
                );
                
                $this->servicioConfirmar->activarProductosAdicionales($arrayDatosParametros);

                // Activamos los servicios incluidos de konibit si no se activaron en el origen
                $intIdPlanKon          = $objPlanService->getId();
                //INI VALIDACIONES KONIBIT
                $strLoginOrigen        = $objServicioOrigen->getPuntoId()->getLogin();
                $intIdPuntoOrigen      = $objServicioOrigen->getPuntoId()->getId();
                $strLoginOrigenKon     = $objServicioOrigen->getPuntoId()->getLogin();
                $intCompCodeKon        = $objServicioOrigen->getPuntoId()->getId();
                $strTelefono           = "";
                $strCorreo             = "";
                $arrayListadoServicios = array();
                $arrayTokenCas         = array();
                $arrayEnvioKonibit     = array();
                $arrayContratoProd     = array();
                $arrayKonibit          = array();
                $intIdProdKon          = 0;
                $intContProdKon        = 0;
                if (isset($intIdPlanKon) && !empty($intIdPlanKon))
                {
                    $arrayDetPlanesKon  = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->getPlanIdYEstados($intIdPlanKon);       
                    if(is_array($arrayDetPlanesKon) && !empty($arrayDetPlanesKon))
                    {
                         $arrayParametroKnb    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                 ->getOne('INVOCACION_KONIBIT_ACTUALIZACION', 
                                                                          'TECNICO', 
                                                                          'DEBITOS',
                                                                          'WS_KONIBIT', 
                                                                          '','','','','',$strCodEmpresa);
                        $arrayListadoServicios = array();
                        $arrayListadoServicios = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                        'Lista de productos adicionales automaticos',
                                                        '','','','','',$strCodEmpresa);
                        foreach($arrayDetPlanesKon as $objDetPlanKon)
                        {
                            $objProducto  = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                              ->find($objDetPlanKon->getProductoId());
                            $intIdProdKon = $objDetPlanKon->getProductoId();
                            foreach($arrayListadoServicios as $objListado)
                            {
                                // Si encuentra un producto konibit procede pasar la caracteristica
                                if ($intIdProdKon == $objListado['valor1'] && $objListado['valor3'] == "SI")
                                {
                                    //DATA
                                    $intContProdKon             = $intContProdKon + 1;
                                    if ($intContProdKon > 1)
                                    {
                                        $strLoginOrigen   = $objPuntoDestino->getLogin();
                                        $intIdPuntoOrigen = $objPuntoDestino->getId();
                                    }
                                    $arrayContratoProd          = array();
                                    $arrayTokenCas              = $this->serviceTokenCas->generarTokenCas();
                                    $arrayCorreoPto             = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                                                    ->findContactosByPunto($objPuntoDestino->getLogin(), 
                                                                                                           'Correo Electronico');
                                    foreach ($arrayCorreoPto as $arrayCorreo) 
                                    {
                                        $strCorreo = $arrayCorreo['valor'];
                                        break;
                                    }
                                    $arrayFpTelf                = array("Telefono Movil", 
                                                                        "Telefono Movil Claro", 
                                                                        "Telefono Movil Movistar", 
                                                                        "Telefono Movil CNT");
                                    foreach ($arrayFpTelf as $strFp)
                                    {
                                        $arrayContactosTelf     = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                                                    ->findContactosByPunto($objPuntoDestino->getLogin(), 
                                                                                                           $strFp);
                                        foreach ($arrayContactosTelf as $arrayContactoT) 
                                        {
                                            $strTelefono = $arrayContactoT['valor'];
                                            break;
                                        }
                                        if ($strTelefono)
                                        {
                                            break;
                                        }
                                    }
                                    //PRODUCTOS
                                    $objProductos               = array('orderID'      => $objServicioOrigen->getId(),
                                                                        'productSKU'   => $objProducto->getCodigoProducto(),
                                                                        'productName'  => $objProducto->getDescripcionProducto(),
                                                                        'quantity'     => '1',
                                                                        'included'     => true,
                                                                        'productoId'   => $intIdProdKon,
                                                                        'migrateTo'    => $objServicioDestino->getId(),
                                                                        'status'       => 'active'
                                                                       );

                                    $arrayContratoProd[]        = $objProductos;
                                    // AGREGO MIS PRODUCTOS A MI ARREGLO
                                    array_push($arrayListProdKon, $objProductos);

                                    //DATA
                                    $objDataProductos           = array('companyName'   => $objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                           ->getPersonaId()
                                                                                                           ->getRazonSocial() ?
                                                                                           $objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                           ->getPersonaId()
                                                                                                           ->getRazonSocial() :
                                                                                           $objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                           ->getPersonaId()
                                                                                                           ->getNombres().
                                                                                           ' '.$objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()
                                                                                                               ->getApellidos(),
                                                                        'companyCode'   => $objPuntoDestino->getId(),
                                                                        'companyID'     => $objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                           ->getPersonaId()
                                                                                                           ->getIdentificacionCliente(),
                                                                        'contactName'   => $objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                           ->getPersonaId()
                                                                                                           ->getRazonSocial() ?
                                                                                           $objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                           ->getPersonaId()
                                                                                                           ->getRazonSocial() :
                                                                                           $objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                           ->getPersonaId()
                                                                                                           ->getNombres().
                                                                                           ' '.$objPuntoDestino->getPersonaEmpresaRolId()
                                                                                                               ->getPersonaId()
                                                                                                               ->getApellidos(),
                                                                        'email'         => $strCorreo,
                                                                        'phone'         => $strTelefono,
                                                                        'login'         => $objPuntoDestino->getLogin(),
                                                                        'plan'          => $objServicioOrigen->getPlanId()->getNombrePlan(),
                                                                        'address'       => $objPuntoDestino->getDireccion(),
                                                                        'city'          => $objPuntoDestino->getPuntoCoberturaId()
                                                                                                            ->getNombreJurisdiccion(),
                                                                        'sector'        => $objPuntoDestino->getSectorId()->getNombreSector(),
                                                                        'status'        => 'active',
                                                                        'products'      => $arrayContratoProd
                                                                       );
                                    //DATA
                                    $arrayData                  = array('action'        => ( isset($arrayParametroKnb["valor5"]) && 
                                                                                             !empty($arrayParametroKnb["valor5"]) )
                                                                                             ? $arrayParametroKnb["valor5"] : "",
                                                                        'partnerID'     => (isset($arrayParametroKnb["valor7"]) &&
                                                                                            !empty($arrayParametroKnb["valor7"]) )
                                                                                            ? $arrayParametroKnb["valor7"] : "001",
                                                                        'companyCode'   => $intCompCodeKon,
                                                                        'companyID'     => $objServicioOrigen->getPuntoId()
                                                                                                             ->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()
                                                                                                             ->getIdentificacionCliente(),
                                                                        'contactName'   => $objServicioOrigen->getPuntoId()
                                                                                                             ->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()
                                                                                                             ->getRazonSocial() ?
                                                                                           $objServicioOrigen->getPuntoId()
                                                                                                             ->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()
                                                                                                             ->getRazonSocial() :
                                                                                           $objServicioOrigen->getPuntoId()
                                                                                                             ->getPersonaEmpresaRolId()
                                                                                                             ->getPersonaId()
                                                                                                             ->getNombres().
                                                                                           ' '.$objServicioOrigen->getPuntoId()
                                                                                                                 ->getPersonaEmpresaRolId()
                                                                                                                 ->getPersonaId()
                                                                                                                 ->getApellidos(),
                                                                        'login'         => $strLoginOrigenKon,
                                                                        'data'          => $objDataProductos,
                                                                        'requestNumber' => '1',
                                                                        'timestamp'     => ''
                                                                        );

                                    $arrayKonibit               = array('identifier'    => $objServicioDestino->getId(),
                                                                        'type'          => ( isset($arrayParametroKnb["valor4"]) && 
                                                                                             !empty($arrayParametroKnb["valor4"]) )
                                                                                             ? $arrayParametroKnb["valor4"] : "",
                                                                        'retryRequered' => true,
                                                                        'process'       => ( isset($arrayParametroKnb["valor6"]) && 
                                                                                             !empty($arrayParametroKnb["valor6"]) )
                                                                                             ? $arrayParametroKnb["valor6"] : "",
                                                                        'origin'        => ( isset($arrayParametroKnb["valor2"]) && 
                                                                                             !empty($arrayParametroKnb["valor2"]) )
                                                                                             ? $arrayParametroKnb["valor2"] : "",
                                                                        'user'          => $strUsrCreacion,
                                                                        'uri'           => ( isset($arrayParametroKnb["valor1"]) && 
                                                                                             !empty($arrayParametroKnb["valor1"]) )
                                                                                             ? $arrayParametroKnb["valor1"] : "",
                                                                        'executionIp'   => $strIpCreacion,
                                                                        'data'          => $arrayData
                                                                        );


                                    $arrayEnvioKonibit          = array('strToken'         => $arrayTokenCas['strToken'],
                                                                        'strUser'          => $strUsrCreacion,
                                                                        'strIp'            => $strIpCreacion,
                                                                        'arrayPropiedades' => $arrayKonibit);
                                                                        
                                }
                            }
                        }
                        // Envio a Konibit
                        if(!empty($arrayEnvioKonibit))
                        {
                            $arrayEnvioKonibit['arrayPropiedades']['data']['data']['products'] = $arrayListProdKon;
                            $arrayEnvKonibit = array();
                            array_push( $arrayEnvKonibit,$arrayEnvioKonibit );
                            

                            foreach($arrayEnvKonibit as $envkon)
                            {
                                $this->serviceKonibit->envioAKonibit($envkon);
                            }

                        }
                    }
                }

                // Actualizamos los servicios adicionales activos
                $arrayDatosParametrosAct = array(
                    "intIdPunto"       => $objServicioDestino->getPuntoId()->getId(),
                    "intCodEmpresa"    => $strCodEmpresa,
                    "strIpCreacion"    => $strIpCreacion,
                    "strUserCreacion"  => $strUsrCreacion,
                    "strAccion"        => 'confirmarServicio',
                    "strLoginOrigen"   => $strLoginOrigenKon,
                    "intIdPuntoOrigen" => $intCompCodeKon,
                    "intContProdKon"   => $intContProdKon
                );
                $this->servicioConfirmar->activarProductosAdicionalesActivos($arrayDatosParametrosAct);
            }

            /////////////
            
            $this->servicioGeneral->ingresarServicioHistorial(  $objServicioDestino, "EnVerificacion", $strObservacionHistorial, 
                                                                $strUsrCreacion, $strIpCreacion);
            $this->servicioGeneral->ingresarServicioHistorial(  $objServicioDestino, "EnPruebas", 
                                                                "Se actualiza estado del Servicio Por Tipo de Orden: T", 
                                                                $strUsrCreacion, $strIpCreacion);
            $this->servicioGeneral->ingresarServicioHistorial(  $objServicioDestino, "Activo", 
                                                                "Se Activo el Servicio Traslado", 
                                                                $strUsrCreacion, $strIpCreacion);
            
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($objServicioDestino->getId());
            //Se determina si el plan contiene Paramount, Noggin o Fox
            $arrayPlan = $this->emcom->getRepository('schemaBundle:InfoPlanDet')
                                        ->findBy(array('planId' => $objServicio->getPlanId()));
            if(!empty($arrayPlan))
            {
                foreach($arrayPlan as $objProducto)
                {
                    $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                ->findOneById($objProducto->getProductoId());
                    
                    if (is_object($objProducto) &&
                        ($objProducto->getNombreTecnico() == $this->strSmsNombreTecnicoFoxPremium ||
                        $objProducto->getNombreTecnico() == $this->strSmsNombreTecnicoParamount   ||
                        $objProducto->getNombreTecnico() == $this->strSmsNombreTecnicoNoggin))
                    {
                        $arrayProducto = $this->serviceFoxPremium->determinarProducto(array('intIdProducto' => $objProducto->getId()));
                        if($arrayProducto['Status']=='OK')
                        {
                            //Obtenemos caracteristicas del Servicio
                            $arrayServicioFox = $this->serviceFoxPremium->obtieneArrayCaracteristicas(
                                                        array('intIdServicio' => $objServicio->getId()));
                            $objServProdCaracContrasenia = $arrayServicioFox[$arrayProducto['strPass']];
                            $objServProdCaracUsuario     = $arrayServicioFox[$arrayProducto['strUser']];
                            $strContraseniaActual        = $this->serviceCrypt->descencriptar($objServProdCaracContrasenia->getValor());
                            $arrayParamHistorial         = array('strUsrCreacion'  => $objServicio->getUsrCreacion(), 
                                'strClientIp'     => $objServicio->getIpCreacion(), 
                                'objInfoServicio' => $objServicio,
                                'strTipoAccion'   => $arrayProducto['strAccionActivo'],
                                'strMensaje'      => $arrayProducto['strMensaje']);
                            //Notificación al cliente por Correo y SMS
                            $this->serviceFoxPremium->notificaCorreoServicioFox(array(
                            "strDescripcionAsunto"   => $arrayProducto['strAsuntoNuevo'],
                            "strCodigoPlantilla"     => $arrayProducto['strCodPlantNuevo'],
                            "strEmpresaCod"          => $strCodEmpresa,
                            "intPuntoId"             => $objServicio->getPuntoId()->getId(),
                            "intIdServicio"          => $objServicio->getId(),
                            "strEsPlan"              => 'SI',
                            "strNombreTecnico"       => $arrayProducto['strNombreTecnico'],
                            "intPersonaEmpresaRolId" => $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId(),
                            "arrayParametros"        => array("contrasenia" => $strContraseniaActual,
                            "usuario"                => $objServProdCaracUsuario->getValor()),
                            "arrayParamHistorial"    => $arrayParamHistorial));
                
                            //Se reemplaza la contraseña del mensaje del parámetro
                            $strMensajeSMS = str_replace("{{USUARIO}}",
                            $objServProdCaracUsuario->getValor(),
                            str_replace("{{CONTRASENIA}}",
                            $strContraseniaActual,
                            $arrayProducto['strSmsNuevo']));
                
                            $this->serviceFoxPremium->notificaSMSServicioFox(array(
                            "strMensaje"             => $strMensajeSMS,
                            "strTipoEvento"          => "enviar_infobip",
                            "strEmpresaCod"          => $strCodEmpresa,
                            "intPuntoId"             => $objServicio->getPuntoId()->getId(),
                            "intPersonaEmpresaRolId" => $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId(),
                            "arrayParamHistorial"    => $arrayParamHistorial,
                            "strNombreTecnico"       => $arrayProducto['strNombreTecnico']));
                        }
                    }
                }
            }
            else 
            {   
                //Se determina si el producto contiene Paramount, Noggin o Fox
                $arrayProducto = $this->serviceFoxPremium->determinarProducto(array('intIdServicio' => $objServicio->getId()));
                if($arrayProducto['Status']=='OK')
                {
                    
                    //Obtenemos caracteristicas del Servicio
                    $arrayServicioFox = $this->serviceFoxPremium->obtieneArrayCaracteristicas(
                                                array('intIdServicio' => $objServicio->getId()));
                    $objServProdCaracContrasenia = $arrayServicioFox[$arrayProducto['strPass']];
                    $objServProdCaracUsuario     = $arrayServicioFox[$arrayProducto['strUser']];
                    $strContraseniaActual        = $this->serviceCrypt->descencriptar($objServProdCaracContrasenia->getValor());
                    $arrayParamHistorial         = array('strUsrCreacion'  => $objServicio->getUsrCreacion(), 
                        'strClientIp'     => $objServicio->getIpCreacion(), 
                        'objInfoServicio' => $objServicio,
                        'strTipoAccion'   => $arrayProducto['strAccionActivo'],
                        'strMensaje'      => $arrayProducto['strMensaje']);
                    //Notificación al cliente por Correo y SMS
                    $this->serviceFoxPremium->notificaCorreoServicioFox(array(
                    "strDescripcionAsunto"   => $arrayProducto['strAsuntoNuevo'],
                    "strCodigoPlantilla"     => $arrayProducto['strCodPlantNuevo'],
                    "strEmpresaCod"          => $strCodEmpresa,
                    "intPuntoId"             => $objServicio->getPuntoId()->getId(),
                    "intIdServicio"          => $objServicio->getId(),
                    "strNombreTecnico"       => $arrayProducto['strNombreTecnico'],
                    "intPersonaEmpresaRolId" => $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId(),
                    "arrayParametros"        => array("contrasenia" => $strContraseniaActual,
                                                      "usuario"                => $objServProdCaracUsuario->getValor()),
                    "arrayParamHistorial"    => $arrayParamHistorial));
        
                    //Se reemplaza la contraseña del mensaje del parámetro
                    $strMensajeSMS = str_replace("{{USUARIO}}",
                    $objServProdCaracUsuario->getValor(),
                    str_replace("{{CONTRASENIA}}",
                    $strContraseniaActual,
                    $arrayProducto['strSmsNuevo']));
        
                    $this->serviceFoxPremium->notificaSMSServicioFox(array(
                    "strMensaje"             => $strMensajeSMS,
                    "strTipoEvento"          => "enviar_infobip",
                    "strEmpresaCod"          => $strCodEmpresa,
                    "intPuntoId"             => $objServicio->getPuntoId()->getId(),
                    "intPersonaEmpresaRolId" => $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId(),
                    "arrayParamHistorial"    => $arrayParamHistorial,
                    "strNombreTecnico"       => $arrayProducto['strNombreTecnico']));
                }
            }

            $arrayParametrosFechaAct = array('emFinanciero'  => $this->emFinanciero,
                                             'intIdServicio' => $objServicioOrigen->getId()
                                             );            
            if($strPrefijoEmpresa === 'MD')
            {
                // Registro de historial con feActivacion de servicio origen
                $objAdmiParametroCab = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                       ->findOneBy(array('nombreParametro' => 'CAMBIO FORMA PAGO', 
                                                                         'estado'          => 'Activo'));
                if(is_object($objAdmiParametroCab))
                {              
                    $objAdmiParametroDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                           ->findOneBy(array('parametroId' => $objAdmiParametroCab,
                                                                             'descripcion' => 'FECHA ACTIVACION ORIGEN',
                                                                             'valor1'      => 'TRASLADAR SERVICIO',
                                                                             'empresaCod'  => $strCodEmpresa,
                                                                             'estado'      => 'Activo'));

                    $strFechaActivacionOrigen = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                     ->getFechaActivacionServicioOrigen($arrayParametrosFechaAct); 
                   
                    if(is_object($objAdmiParametroDet))
                    {
                        $strAccionHistOrigen = $objAdmiParametroDet->getValor2();

                        if(isset($strAccionHistOrigen) && !empty($strFechaActivacionOrigen))
                        {
                            $objServicioHistorial = new InfoServicioHistorial();
                            $objServicioHistorial->setServicioId($objServicioDestino);
                            $objServicioHistorial->setFeCreacion(new \DateTime($strFechaActivacionOrigen));
                            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                            $objServicioHistorial->setEstado($objServicioDestino->getEstado());
                            $objServicioHistorial->setAccion($strAccionHistOrigen);
                            $objServicioHistorial->setObservacion('Fecha inicial de servicio trasladado.');
                            $this->emComercial->persist($objServicioHistorial);
                        }                            
                    }
                }                                    
            }             
            
            $objPuntoDestino->setEstado("Activo");
            $this->emComercial->persist($objPuntoDestino);

            /**
             * Se conecta el puerto del splitter del servicio destino
             */
            $objInterfaceSplitterDestino->setEstado("connected");
            $this->emInfraestructura->persist($objInterfaceSplitterDestino);
            $this->emComercial->flush();
            
            //Se desconecta puerto de splitter destino en caso de que al activar se haya cambiado dicho puerto
            if($intIdInterfaceSplitterDestinoServTec > 0 
                && intval($intIdInterfaceSplitterDestinoServTec) !== intval($objInterfaceSplitterDestino->getId()))
            {
                $objInterfaceSplitterDestinoServTec = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                              ->find($intIdInterfaceSplitterDestinoServTec);
                if(is_object($objInterfaceSplitterDestinoServTec))
                {
                    $objInterfaceSplitterDestinoServTec->setEstado("not connect");
                    $this->emInfraestructura->persist($objInterfaceSplitterDestinoServTec);
                    $this->emComercial->flush();
                }
            }
            
            if (is_object($objSpcTrasladoDifTecnologia))
            {
                $strCodigoArticuloOnt     = "";
                $strTipoArticulo          = "AF";
                $strIdentificacionCliente = "";
                $objInterfaceOnt = $this->servicioGeneral
                                        ->ingresarElementoCliente( $objServicioDestino->getPuntoId()->getLogin(),
                                                                   $strSerieOntDestino,
                                                                   $strModeloOntDestino,
                                                                   "-ont",
                                                                   $objInterfaceSplitterDestino,
                                                                   $objUltimaMillaDestino->getNombreTipoMedio(),
                                                                   $objServicioDestino,
                                                                   $strUsrCreacion,
                                                                   $strIpCreacion,
                                                                   $strCodEmpresa);

                //actualizamos registro en el naf ont
                $strMensajeError = str_repeat(' ', 1000);                                                                  
                $strSql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                . ":cantidad, :pv_mensajeerror); END;";
                $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                $objStmt->bindParam('codigoEmpresaNaf', $strCodEmpresa);
                $objStmt->bindParam('codigoArticulo', $strCodigoArticuloOnt);
                $objStmt->bindParam('tipoArticulo',$strTipoArticulo);
                $objStmt->bindParam('identificacionCliente', $identificacionCliente);
                $objStmt->bindParam('serieCpe', $strSerieOntDestino);
                $objStmt->bindParam('cantidad', intval(1));
                $objStmt->bindParam('pv_mensajeerror', $strMensajeError);
                $objStmt->execute();

                if(strlen(trim($strMensajeError))>0) 
                {
                    throw new \Exception("ERROR ONT NAF: ".$strMensajeError);
                }
                $boolEjecucionNaf = true;

                /**
                 * Se crea el enlace entre el splitter y el cpe ont del servicio en el punto destino
                 */
                $objEnlaceSplitterOntServicioDestino = new InfoEnlace();
                $objEnlaceSplitterOntServicioDestino->setInterfaceElementoIniId($objInterfaceSplitterDestino);
                $objEnlaceSplitterOntServicioDestino->setInterfaceElementoFinId($objInterfaceOnt);
                $objEnlaceSplitterOntServicioDestino->setTipoMedioId($objUltimaMillaDestino);
                $objEnlaceSplitterOntServicioDestino->setTipoEnlace("PRINCIPAL");
                $objEnlaceSplitterOntServicioDestino->setEstado("Activo");
                $objEnlaceSplitterOntServicioDestino->setUsrCreacion($strUsrCreacion);
                $objEnlaceSplitterOntServicioDestino->setFeCreacion(new \DateTime('now'));
                $objEnlaceSplitterOntServicioDestino->setIpCreacion($strIpCreacion);
                $this->emInfraestructura->persist($objEnlaceSplitterOntServicioDestino);
                $this->emInfraestructura->flush();

                // $objInterfaceIniSmartWifi = $interfaceOnt;
                //buscar enlace local y eliminar elemento enlazado
                $objServicioTecnicoValida = $this->emComercial
                                                 ->getRepository('schemaBundle:InfoServicioTecnico')
                                                 ->findOneBy(array( "servicioId" => $objServicioDestino->getId()));
                if (is_object($objServicioTecnicoValida))
                {
                    $objEnlaceClienteValida = $this->emInfraestructura
                                                   ->getRepository('schemaBundle:InfoEnlace')
                                                   ->findOneBy(array("interfaceElementoIniId" =>
                                                                     $objServicioTecnicoValida->getInterfaceElementoClienteId(),
                                                                     "estado"                 => "Activo"));

                    //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
                    if(is_object($objEnlaceClienteValida))
                    {
                        //elimino enlace
                        $objEnlaceClienteValida->setEstado("Eliminado");
                        $this->emInfraestructura->persist($objEnlaceClienteValida);
                        $this->emInfraestructura->flush(); 

                        $objEnlaceNuevo = new InfoEnlace();
                        $objEnlaceNuevo->setInterfaceElementoIniId($objInterfaceOnt);
                        $objEnlaceNuevo->setInterfaceElementoFinId($objEnlaceClienteValida->getInterfaceElementoFinId());
                        $objEnlaceNuevo->setTipoMedioId($objEnlaceClienteValida->getTipoMedioId());
                        $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                        $objEnlaceNuevo->setEstado("Activo");
                        $objEnlaceNuevo->setUsrCreacion($strUsrCreacion);
                        $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                        $objEnlaceNuevo->setIpCreacion($strIpCreacion);
                        $this->emInfraestructura->persist($objEnlaceNuevo);
                        $this->emInfraestructura->flush();
                    }
                }

                /**
                 * Se actualiza la información técnica del servicio en el punto destino
                 */        
                $objServicioTecnicoDestino->setInterfaceElementoId($objInterfaceOltDestino->getId());
                $objServicioTecnicoDestino->setInterfaceElementoConectorId($objInterfaceSplitterDestino->getId());  
                $objServicioTecnicoDestino->setElementoClienteId($objInterfaceOnt->getElementoId()->getId());
                $objServicioTecnicoDestino->setInterfaceElementoClienteId($objInterfaceOnt->getId());
                $this->emComercial->persist($objServicioTecnicoDestino);
                $this->emComercial->flush();
            }
            else
            {
                /**
                 * Se crea el enlace entre el splitter y el cpe ont del servicio en el punto destino
                 */
                $objInterfaceOntServicioOrigen  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                          ->find($objServicioTecnicoOrigen->getInterfaceElementoClienteId());
                $objEnlaceSplitterOntServicioDestino = new InfoEnlace();
                $objEnlaceSplitterOntServicioDestino->setInterfaceElementoIniId($objInterfaceSplitterDestino);
                $objEnlaceSplitterOntServicioDestino->setInterfaceElementoFinId($objInterfaceOntServicioOrigen);
                $objEnlaceSplitterOntServicioDestino->setTipoMedioId($objUltimaMillaDestino);
                $objEnlaceSplitterOntServicioDestino->setTipoEnlace("PRINCIPAL");
                $objEnlaceSplitterOntServicioDestino->setEstado("Activo");
                $objEnlaceSplitterOntServicioDestino->setUsrCreacion($strUsrCreacion);
                $objEnlaceSplitterOntServicioDestino->setFeCreacion(new \DateTime('now'));
                $objEnlaceSplitterOntServicioDestino->setIpCreacion($strIpCreacion);
                $this->emInfraestructura->persist($objEnlaceSplitterOntServicioDestino);
                $this->emInfraestructura->flush();

                /**
                 * Se actualiza la información técnica del servicio en el punto destino
                 */        
                $objServicioTecnicoDestino->setInterfaceElementoId($objInterfaceOltDestino->getId());
                $objServicioTecnicoDestino->setInterfaceElementoConectorId($objInterfaceSplitterDestino->getId());  
                $objServicioTecnicoDestino->setElementoClienteId($objServicioTecnicoOrigen->getElementoClienteId());
                $objServicioTecnicoDestino->setInterfaceElementoClienteId($objServicioTecnicoOrigen->getInterfaceElementoClienteId());
                $this->emComercial->persist($objServicioTecnicoDestino);
                $this->emComercial->flush();
            }
            
            /**
             * Se elimina característica de traslado asociada al servicio de Internet del punto destino 
             */
            $objSpcTrasladoServicioDestino = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioDestino, 
                                                                                                        "TRASLADO", 
                                                                                                        $objProductoInternet);
            if(is_object($objSpcTrasladoServicioDestino))
            {
                $objSpcTrasladoServicioDestino->setEstado('Eliminado');
                $this->emComercial->persist($objSpcTrasladoServicioDestino);
                $this->emComercial->flush();
            }
            if($strTieneIps === "SI" && $objUltimaMillaDestino->getNombreTipoMedio() === "Fibra Optica")
            {
                if($strGestionarIpsMidd === "NO")
                {
                    $arrayIpsActivarMiddleware              = array();
                    $arrayIpsCancelarMiddleware             = array();
                    $arrayServiciosIpsAdicionalesDestino    = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                                ->findBy(array( 'puntoId'   => $objPuntoDestino->getId(),
                                                                                                'estado'    => 'PreAsignacionInfoTecnica'));
                    foreach($arrayServiciosIpsAdicionalesDestino as $objServicioIpAdicionalDestino)
                    {
                        $objSpcTrasladoIp   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIpAdicionalDestino, 
                                                                                                        "TRASLADO", 
                                                                                                        $objProductoInternet);
                        if(is_object($objSpcTrasladoIp))
                        {
                            $objServicioIpAdicionalOrigen   = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                                ->find($objSpcTrasladoIp->getValor());
                            if(is_object($objServicioIpAdicionalOrigen))
                            {
                                $strTipoIp = 'FIJA';
        
                                //Obtiene tipo de ip por el servicio (PRIVADA)
                                $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                    ->findOneBy(array("servicioId"  =>  $objServicioIpAdicionalOrigen->getId(),
                                                                                    "tipoIp"      =>  "PRIVADA",
                                                                                    "estado"      =>  "Activo"));
                                if (is_object($objTipoIp))
                                {
                                    $strTipoIp = $objTipoIp->getTipoIp();
                                }
                                
                                $objIpAdicionalOrigen = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                                ->findOneBy(array(  "servicioId" => 
                                                                                                    $objServicioIpAdicionalOrigen->getId(),
                                                                                                    "tipoIp"     => $strTipoIp,
                                                                                                    "estado"     => "Activo"));
                                if(is_object($objIpAdicionalOrigen))
                                {
                                    $objSpcMacIpOrigen  = $this->servicioGeneral
                                                               ->getServicioProductoCaracteristica( $objServicioIpAdicionalOrigen,
                                                                                                    "MAC ONT",
                                                                                                    $objProductoInternet);
                                    if(!is_object($objSpcMacIpOrigen))
                                    {
                                        $objSpcMacIpOrigen  = $this->servicioGeneral
                                                                   ->getServicioProductoCaracteristica( $objServicioIpAdicionalOrigen, 
                                                                                                        "MAC", 
                                                                                                        $objProductoInternet);
                                        if(!is_object($objSpcMacIpOrigen))
                                        {
                                            $objSpcMacIpOrigen  = $this->servicioGeneral
                                                                       ->getServicioProductoCaracteristica( $objServicioIpAdicionalOrigen,
                                                                                                            "MAC WIFI", 
                                                                                                            $objProductoInternet);
                                            if(!is_object($objSpcMacIpOrigen))
                                            {
                                                throw new \Exception("No existe Mac asociado a un Servicio, favor revisar!");
                                            }
                                        }
                                    }
                                    $strScopeOrigen = "";
                                    $objSpcScopeIpOrigen  = $this->servicioGeneral
                                                                 ->getServicioProductoCaracteristica( $objServicioIpAdicionalOrigen,
                                                                                                      "SCOPE",
                                                                                                      $objServicioIpAdicionalOrigen->getProductoId());
                                    if(is_object($objSpcScopeIpOrigen))
                                    {
                                        $strScopeOrigen = $objSpcScopeIpOrigen->getValor();
                                    }


                                    $arrayIpsActivarMiddleware[]    = array("status"        => "OK",
                                                                            "id_servicio"   => $objServicioIpAdicionalDestino->getId(),
                                                                            "ip"            => $objIpAdicionalOrigen->getIp(),
                                                                            "mensaje"       => "");

                                    $arrayIpsCancelarMiddleware[]   = array("status"        => "OK",
                                                                            "id_servicio"   => $objServicioIpAdicionalOrigen->getId(),
                                                                            "mensaje"       => "");

                                    $arrayIpsActivarParamMidd[]     = array("id_servicio"   => $objServicioIpAdicionalDestino->getId(),
                                                                            "mac"           => $objSpcMacIpOrigen->getValor(),
                                                                            "scope"         => $strScopeOrigen
                                                                           );
                                }
                            }
                        }
                    }
                    $arrayRespuestaMiddleware   = array("ip_activar"    => $arrayIpsActivarMiddleware,
                                                        "ip_cancelar"   => $arrayIpsCancelarMiddleware);
                    $objSpcScopeDestino = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, "SCOPE", $arrayProdIp[0]);
                    if(is_object($objSpcScopeDestino))
                    {
                        $strScopeDestino = $objSpcScopeDestino->getValor();
                    }
                }
                else
                {
                    if ($strTieneIpWan === "SI")
                    {
                        $arrayRespuestaMiddleware['ip_activar'][] = array("status"        => "OK",
                                                                          "id_servicio"   => $intIdServicioIpWanDestino,
                                                                          "ip"            => $strIpDestino,
                                                                          "scope"         => $strScopeDestino,
                                                                          "mensaje"       => "");
                        $arrayRespuestaMiddleware['ip_cancelar'][] = array("status"      => "OK",
                                                                           "id_servicio" => $intIdServicioIpWanOrigen,
                                                                           "mensaje"     => "");
                    }
                }
                $arrayParamsCancelarActivarIps      = array("objServicioOrigen"         => $objServicioOrigen,
                                                            "objServicioDestino"        => $objServicioDestino,
                                                            "arrayRespuestaMiddleware"  => $arrayRespuestaMiddleware,
                                                            "strUsrCreacion"            => $strUsrCreacion,
                                                            "strIpCreacion"             => $strIpCreacion,
                                                            "objProductoInternet"       => $objProductoInternet,
                                                            "strScopeDestino"           => $strScopeDestino,
                                                            "arrayIpsActivar"           => $arrayIpsActivarParamMidd,
                                                            "objServicioTecnicoDestino" => $objServicioTecnicoDestino);
                $arrayRespuestaCancelarActivarIps   = $this->cancelarActivarIpsTrasladoMd($arrayParamsCancelarActivarIps);
                if($arrayRespuestaCancelarActivarIps["status"] !== "OK")
                {
                    throw new \Exception($arrayRespuestaCancelarActivarIps["mensaje"]);
                }
            }
            if($strNombreTecnicoProdPref !== "TELCOHOME")
            {
                $arrayRespuestaVerifIProtegido  = $this->servicioGeneral->obtieneInfoInternetProtegido(array(   "intIdServicio"     => 
                                                                                                                $objServicioDestino->getId(),
                                                                                                                "strCodEmpresa"   => 
                                                                                                                $strCodEmpresa));
                //validaciones para trasladar cliente que tenga nuevos planes MD y que incluyan McAfee/Kaspersky
                if($arrayRespuestaVerifIProtegido["strTieneAntivirusEnPlan"] == "SI")
                {
                    $arrayActivarTrasladoMcafeeMd   = array("objServicioOrigen"         => $objServicioOrigen,
                                                            "objServicioDestino"        => $objServicioDestino,
                                                            "strEmpresaCod"             => $strCodEmpresa,
                                                            "strUsrCreacion"            => $strUsrCreacion,
                                                            "strIpCreacion"             => $strIpCreacion);
                    $arrayRespuestaTrasladoMcAfee   = $this->activarTrasladoMcafeeEnPlanMd($arrayActivarTrasladoMcafeeMd);
                    if($arrayRespuestaTrasladoMcAfee["strStatus"] !== "OK")
                    {
                        $this->servicioGeneral
                             ->ingresarServicioHistorial($objServicioDestino, $objServicioDestino->getEstado(), 
                                                         "Se presentaron problemas al trasladar las caracteristicas del producto McAfee.", 
                                                         $strUsrCreacion, $strIpCreacion);
                    }
                }
                $arrayActivarTrasladoMcafeeAdicionalMd = array("objServicioPunto" => $objServicioDestino,
                                                               "objProdInternet"  => $objProductoInternet,
                                                               "strUsrCreacion"   => $strUsrCreacion,
                                                               "strIpCreacion"    => $strIpCreacion
                                                              );
                $arrayRespuestaTrasladoMcAfee   = $this->activarTrasladoMcaffeAdicionalesMd($arrayActivarTrasladoMcafeeAdicionalMd);
                if($arrayRespuestaTrasladoMcAfee["strStatus"] !== "OK")
                {
                    $this->servicioGeneral
                         ->ingresarServicioHistorial($objServicioDestino, $objServicioDestino->getEstado(), 
                                                     "Se presentaron problemas al trasladar las caracteristicas de los productos adicionales McAfee.", 
                                                     $strUsrCreacion, $strIpCreacion);
                }
                
                $objPuntoServicio = $objServicioDestino->getPuntoId();
                if(is_object($objPuntoServicio))
                {
                    $arrayRespuestaServiciosWdb = $this->servicioGeneral
                                                       ->obtenerServiciosPorProducto(
                                                                                    array(  "intIdPunto"                  => 
                                                                                            $objPuntoServicio->getId(),
                                                                                            "arrayNombresTecnicoProducto" => array("WIFI_DUAL_BAND"),
                                                                                            "strCodEmpresa"               => $strCodEmpresa,
                                                                                            "arrayEstadosServicioABuscar" => array("Pendiente")));
                    $arrayServiciosWdb          = $arrayRespuestaServiciosWdb["arrayServiciosPorProducto"];
                    if(isset($arrayServiciosWdb) && !empty($arrayServiciosWdb))
                    {
                        $objServicioWifiDualBand = $arrayServiciosWdb[0];
                        if(is_object($objServicioWifiDualBand))
                        {
                            //obtener características TRASLADO para actualizar la información de los servicios
                            $objSpcTrasServDestinoWifiDualBand = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioWifiDualBand, 
                                                                                                                            "TRASLADO", 
                                                                                                                            $objProductoInternet);
                            if (is_object($objSpcTrasServDestinoWifiDualBand))
                            {
                                $objServicioOrigTrasWifiDB = $this->emComercial
                                                                  ->getRepository('schemaBundle:InfoServicio')
                                                                  ->find($objSpcTrasServDestinoWifiDualBand->getValor());
                                if (is_object($objServicioOrigTrasWifiDB))
                                {
                                    $objServicioOrigTrasWifiDB->setEstado('Trasladado');
                                    $this->emComercial->persist($objServicioOrigTrasWifiDB);
                                    $this->emComercial->flush();
                                    $objServicioHistEx = new InfoServicioHistorial();
                                    $objServicioHistEx->setServicioId($objServicioOrigTrasWifiDB);
                                    $objServicioHistEx->setObservacion('Se trasladó el servicio');
                                    $objServicioHistEx->setIpCreacion($strIpCreacion);
                                    $objServicioHistEx->setFeCreacion(new \DateTime('now'));
                                    $objServicioHistEx->setUsrCreacion($strUsrCreacion);
                                    $objServicioHistEx->setEstado('Trasladado');
                                    $this->emComercial->persist($objServicioHistEx);
                                    $this->emComercial->flush();
                                }

                                $objSpcTrasServDestinoWifiDualBand->setEstado("Eliminado");
                                $this->emComercial->persist($objSpcTrasServDestinoWifiDualBand);
                                $this->emComercial->flush();
                            }

                            $strObservacionHistorial = "Se trasladó el equipo wifi dual band";

                            $objServicioWifiDualBand->setEstado("Activo");
                            $this->emComercial->persist($objServicioWifiDualBand);
                            $this->emComercial->flush();

                            //historial del servicio
                            $objServicioHistorial = new InfoServicioHistorial();
                            $objServicioHistorial->setServicioId($objServicioWifiDualBand);
                            $objServicioHistorial->setObservacion($strObservacionHistorial);
                            $objServicioHistorial->setEstado($objServicioWifiDualBand->getEstado());
                            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $objServicioHistorial->setIpCreacion($strIpCreacion);
                            $this->emComercial->persist($objServicioHistorial);
                            $this->emComercial->flush();
                        }
                    }
                }
            }
            //Se eliminan las características asociadas al servicio de Internet del punto origen
            $arraySpcServicioOrigen = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findBy(array( "servicioId"    => $objServicioOrigen->getId()));

            foreach($arraySpcServicioOrigen as $objSpcServicioOrigen)
            {
                $arrayServicios = array('Activo','Pendiente');
                if(in_array($objSpcServicioOrigen->getEstado(),$arrayServicios))   
                {
                    $objSpcServicioOrigen->setEstado('Eliminado');
                    $objSpcServicioOrigen->setUsrUltMod($strUsrCreacion);
                    $objSpcServicioOrigen->setFeUltMod(new \DateTime('now'));
                    $this->emComercial->persist($objSpcServicioOrigen);
                    $this->emComercial->flush();
                }
            }
                                                                       
            if($strNombreTecnicoProdPref !== "TELCOHOME" && !is_object($objSpcTrasladoDifTecnologia))
            {
                //validar si existe una solicitud de agregar equipo pendiente de gestionar en el punto origen
                $strSolicitudAgregarEquipoPendiente = 'NO';
                $objTipoSolicitud = $this->emComercial
                                         ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                         ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD AGREGAR EQUIPO',
                                                           'estado'               => 'Activo'));
                
                $arrayEstadosVerificaSolAgregarEquipo   = array();
                $arrayEstadosAbiertosSolAgregarEquipo   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                          ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                                '', 
                                                                                '', 
                                                                                '',
                                                                                'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                                'SOLICITUD AGREGAR EQUIPO',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                $strCodEmpresa);
                if(is_array($arrayEstadosAbiertosSolAgregarEquipo) && count($arrayEstadosAbiertosSolAgregarEquipo) > 0)
                {
                    foreach($arrayEstadosAbiertosSolAgregarEquipo as $arrayEstadoAbiertoSolAgregarEquipo)
                    {   
                        $arrayEstadosVerificaSolAgregarEquipo[] = $arrayEstadoAbiertoSolAgregarEquipo['valor3'];
                    }
                }

                if(is_object($objTipoSolicitud) && !empty($arrayEstadosVerificaSolAgregarEquipo))
                {
                    $objSolAgregarEquipoAbierta = $this->emComercial
                                                       ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                       ->findOneBy(array(   'servicioId'        => $objServicioDestino->getId(),
                                                                            'tipoSolicitudId'   => $objTipoSolicitud->getId(),
                                                                            'estado'            => $arrayEstadosVerificaSolAgregarEquipo));
                    if(is_object($objSolAgregarEquipoAbierta))
                    {
                        $strSolicitudAgregarEquipoPendiente = 'SI';
                    }
                }
                
                if($strSolicitudAgregarEquipoPendiente === "NO")
                {
                    $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                          ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD AGREGAR EQUIPO MASIVO',
                                                                            'estado'               => 'Activo'));
                    
                    $arrayEstadosVerificaSolAgregarEquipoMasivo = array();
                    $arrayEstadosAbiertosSolAgregarEquipoMasivo = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                                        '', 
                                                                                        '', 
                                                                                        '',
                                                                                        'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                                        'SOLICITUD AGREGAR EQUIPO MASIVO',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        $strCodEmpresa);
                    if(is_array($arrayEstadosAbiertosSolAgregarEquipoMasivo) && count($arrayEstadosAbiertosSolAgregarEquipoMasivo) > 0)
                    {
                        foreach($arrayEstadosAbiertosSolAgregarEquipoMasivo as $arrayEstadoAbiertoSolAgregarEquipoMasivo)
                        {   
                            $arrayEstadosVerificaSolAgregarEquipoMasivo[] = $arrayEstadoAbiertoSolAgregarEquipoMasivo['valor3'];
                        }
                    }
                    
                    if(is_object($objTipoSolicitud) && !empty($arrayEstadosVerificaSolAgregarEquipoMasivo))
                    {
                        $objSolAgregarEquipoMasivoAbierta   = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                                ->findOneBy(array(  'servicioId'        => 
                                                                                                    $objServicioDestino->getId(),
                                                                                                    'tipoSolicitudId'   => $objTipoSolicitud->getId(),
                                                                                                    'estado'            => 
                                                                                                    $arrayEstadosVerificaSolAgregarEquipoMasivo));
                        if(is_object($objSolAgregarEquipoMasivoAbierta))
                        {
                            $strSolicitudAgregarEquipoPendiente = 'SI';
                        }
                    }
                }

                $strExtenderDualBandEnPlan      = "NO";
                if(is_object($objServicioDestino->getPlanId()))
                {
                    $arrayObtieneInfoTecnologiaDualBand = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                          ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    'MODELOS_OLT_EQUIPOS_DUAL_BAND',
                                                                                    $strMarcaOltDestino,
                                                                                    $strModeloOltDestino,
                                                                                    '',
                                                                                    '',
                                                                                    $strCodEmpresa);
                    if(isset($arrayObtieneInfoTecnologiaDualBand) && !empty($arrayObtieneInfoTecnologiaDualBand))
                    {
                        $strEsPermitidoWYExtenderEnPlanes = $arrayObtieneInfoTecnologiaDualBand['valor4'];
                        if($strEsPermitidoWYExtenderEnPlanes === "SI")
                        {
                            $arrayRespuestaVerifProdEnPlan  = $this->servicioGeneral
                                                                   ->obtieneProductoEnPlan(array("intIdPlan"                 => 
                                                                                                 $objServicioDestino->getPlanId()->getId(),
                                                                                                 "strNombreTecnicoProducto"  => "EXTENDER_DUAL_BAND"
                                                                                                ));
                            if($arrayRespuestaVerifProdEnPlan["strProductoEnPlan"] === "SI")
                            {
                                $strExtenderDualBandEnPlan = "SI";
                            }
                        }
                    }
                }
                
                if ($strSolicitudAgregarEquipoPendiente == 'NO')
                {
                    $arrayServiciosExtenderDualBand   = array();
                    $strTieneExtenderAdicional        = "NO";
                    
                    $objPuntoServicio = $objServicioDestino->getPuntoId();
                    if(is_object($objPuntoServicio))
                    {
                        $arrayRespuestaServiciosEdb = $this->servicioGeneral
                                                           ->obtenerServiciosPorProducto(array( "intIdPunto"                  => 
                                                                                                $objPuntoServicio->getId(),
                                                                                                "arrayNombresTecnicoProducto" => 
                                                                                                array("EXTENDER_DUAL_BAND"),
                                                                                                "strCodEmpresa"               => 
                                                                                                $strCodEmpresa,
                                                                                                "arrayEstadosServicioABuscar" =>
                                                                                                array("Pendiente")));
                        $arrayServiciosExtenderDualBand = $arrayRespuestaServiciosEdb["arrayServiciosPorProducto"];
                        if(isset($arrayServiciosExtenderDualBand) && !empty($arrayServiciosExtenderDualBand))
                        {
                            $strTieneExtenderAdicional = "SI";
                        }
                    }

                    if ($strExtenderDualBandEnPlan == 'SI')
                    {
                        //crear caracteristica para mostrar botón de traslado de Extender Dual Band
                        $this->servicioGeneral
                             ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                                      $objProductoInternet,
                                                                      "TRASLADAR EXTENDER DUAL BAND",
                                                                      $objServicioOrigen->getId(),
                                                                      $strUsrCreacion);
                    }
                    
                    if($strTieneExtenderAdicional == "SI")
                    {
                        foreach($arrayServiciosExtenderDualBand as $objSpcServicioExtender)
                        {
                            $objSpcTrasladoServicioExt = $this->servicioGeneral
                                                              ->getServicioProductoCaracteristica( $objSpcServicioExtender, 
                                                                                                   "TRASLADO", 
                                                                                                   $objProductoInternet);
                            if(is_object($objSpcTrasladoServicioExt))
                            {
                                //crear caracteristica para mostrar botón de traslado de Extender Dual Band
                                $this->servicioGeneral
                                     ->ingresarServicioProductoCaracteristica($objSpcServicioExtender, 
                                                                              $objProductoInternet,
                                                                              "TRASLADAR EXTENDER DUAL BAND",
                                                                              $objSpcTrasladoServicioExt->getValor(),
                                                                              $strUsrCreacion);
                                $objSpcTrasladoServicioExt->setEstado('Eliminado');
                                $objSpcTrasladoServicioExt->setUsrUltMod($strUsrCreacion);
                                $objSpcTrasladoServicioExt->setFeUltMod(new \DateTime('now'));
                                $this->emComercial->persist($objSpcTrasladoServicioExt);
                                $this->emComercial->flush();
                            }
                        }
                    }
                }
            }
            if(is_object($objSpcTrasladoDifTecnologia) && $strPrefijoEmpresa === "MD")
            {
                $arrayParametrosFactura = array();
                $arrayParametrosFactura["strUsrCreacion"]     = $strUsrCreacion;
                $arrayParametrosFactura["strIpCreacion"]      = $strIpCreacion;
                $arrayParametrosFactura["objServicioDestino"] = $objServicioDestino;
                $arrayParametrosFactura["objServicioOrigen"]  = $objServicioOrigen;
                $arrayParametrosFactura["strCodEmpresa"]      = $strCodEmpresa;
                $arrayParametrosFactura["strPrefijoEmpresa"]  = $strPrefijoEmpresa;
                $arrayParametrosFactura["intIdPersonaEmpresaRol"] = $arrayParametros['idPersonaEmpresaRol'];
                $this->generarFacturaEquiposNoEntregadosMd($arrayParametrosFactura);
            }
            $strStatus = "OK";
            $arrayDataConfirmacionTn['datos']['respuesta_confirmacion'] = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $arrayDataConfirmacionTn['datos']['respuesta_confirmacion'] = "ERROR";
            $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => $strCodEmpresa,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => $strMensaje,
                        'status'              => 'Error',
                        'appAction'           => "TRASLADAR_".$objServicioDestino->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($e),
                        'creationUser'        => $strUsrCreacion));
            $strErrorLog = "Proceso: TrasladarServicioMD, Opción: TRASLADAR, Login: ".$objServicioDestino->getPuntoId()->getLogin()
                          .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$strUsrCreacion
                          .", Status : ".$strStatus.", Mensaje: ".$strMensaje;
            error_log($strErrorLog);
            if (is_object($objSpcTrasladoDifTecnologia) && $boolEjecucionNaf === true)
            {
                try 
                {
                      $arrayOntNaf = array("numeroSerie"  => $strSerieOntDestino,
                                             "tipoArticulo" => "AF",
                                             "estado" => "IN",
                                             "modelo"       => $strModeloOntDestino);
                      $objEquipoEncontradoNaf  = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')->findOneBy($arrayOntNaf);

                      if(!is_object($objEquipoEncontradoNaf))
                      {
                          throw new \Exception("No se ha podido consultar el equipo en el repositorio de NAF");
                      }
                      $objEquipoEncontradoNaf->setSaldo(intval(1));
                      $objEquipoEncontradoNaf->setEstado("PI");
                      $objEquipoEncontradoNaf->setUsrUltMod($strUsrCreacion);
                      $objEquipoEncontradoNaf->setFeUltMod(new \DateTime('now'));
                      $this->emNaf->persist($objEquipoEncontradoNaf);
                      $this->emNaf->flush();
                } catch (\Exception $objExp) 
                {
                    $strErrorLog = "Proceso: TrasladarServicioMD, Opción: TRASLADAR"
                                  .", Login: ".$objServicioDestino->getPuntoId()->getLogin()
                                  .", Status: ".$strStatus.", Mensaje: ".$objExp->getMessage().", creationUser: ".$strUsrCreacion;
                    error_log($strErrorLog);
                }
            }
        }
        
        $arrayRespuestaFinal = array("status"   => $strStatus,
                                     "mensaje"  => $strMensaje,
                                     "strIdServicioOrigen" => $intIdServicioOrigen,
                                     "intIdPuntoOrigen"    => $intIdPuntoOrigen,
                                     "arrayDataConfirmacionTn"  => $arrayDataConfirmacionTn);
        return $arrayRespuestaFinal;
    }

    /**
     * generarFacturaEquiposNoEntregadosMd
     * 
     * Función que sirve para trasladar la información del producto mcafee del cliente origen del traslado
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 01-03-2022
     * @since 1.0
     * 
     * @param Array $arrayParametros [
     *                                 - strUsrCreacion         Cadena de caracteres que indica el usuario de creación a utilizar
     *                                 - strIpCreacion          Cadena de caracteres que indica la ip de creación a utilizar
     *                                 - objServicioDestino     Objeto de servicio Destino del traslado
     *                                 - objServicioOrigen      Objeto de servicio Origen del traslado
     *                                 - strCodEmpresa          Cadena de caracteres que indica la empresa a utilizar
     *                                 - strPrefijoEmpresa      Cadena de caracteres que indica la empresa a utilizar
     *                                 - intIdPersonaEmpresaRol Identificador de la persona empresa rol en sesión
     *                               ]
     */
    public function generarFacturaEquiposNoEntregadosMd($arrayParametrosFactura)
    {
        $strUsrCreacion         = !empty($arrayParametrosFactura['strUsrCreacion'])?$arrayParametrosFactura['strUsrCreacion']:"";
        $strIpCreacion          = !empty($arrayParametrosFactura['strIpCreacion'])?$arrayParametrosFactura['strIpCreacion']:"";
        $objServicioDestino     = !empty($arrayParametrosFactura['objServicioDestino'])?$arrayParametrosFactura['objServicioDestino']:null;
        $objServicioOrigen      = !empty($arrayParametrosFactura['objServicioOrigen'])?$arrayParametrosFactura['objServicioOrigen']:null;
        $strCodEmpresa          = !empty($arrayParametrosFactura['strCodEmpresa'])?$arrayParametrosFactura['strCodEmpresa']:"";
        $strPrefijoEmpresa      = !empty($arrayParametrosFactura['strPrefijoEmpresa'])?$arrayParametrosFactura['strPrefijoEmpresa']:"";
        $intIdPersonaEmpresaRol = !empty($arrayParametrosFactura['intIdPersonaEmpresaRol'])?$arrayParametrosFactura['intIdPersonaEmpresaRol']:"";
        $booleanFalse           = false;
        try            
        {
            $arrayParametros                           = array();
            $arrayParametros['intServicioId']          = $objServicioOrigen->getId();          
            $arrayParametros['strEmpresaCod']          = $strCodEmpresa;
            $arrayParametros['serviceSolicitud']       = $this->serviceSolicitudes;  
            $arrayParametros['intPtoSessionId']        = $objServicioOrigen->getPuntoId()->getId();
            $arrayParametros['descripcionProducto']    = 'INTERNET'; 
            $arrayParametros['strParametro']           = 'RETIRO_EQUIPOS_SOPORTE';
            $arrayParametros['strProceso']             = 'FACTURACION_RETIRO_EQUIPOS';
            $arrayParametros['strModulo']              = 'FINANCIERO';
            $objJson   = $this->emComercial
                              ->getRepository('schemaBundle:InfoServicioTecnico')
                              ->getJsonEquiposFacturar($arrayParametros); 
            $arrayJsonEquipos = json_decode($objJson, true);
            $arrayParametros  = array();
            $arrayParametros["strIpCreacion"]  = $strIpCreacion;
            $arrayParametros["strUsrCreacion"] = $strUsrCreacion;
            $arrayParametros["strCodEmpresa"]  = $strCodEmpresa;
            $arrayParametros["intIdServicio"]  = $objServicioDestino->getId();
            $arrayParametros["strProceso"]     = "ActivaTraslado";
            $arrayRespuestaElementosNoEntregados = $this->serviceServicioComercial->obtenerValidaElementosOrigenTraslados($arrayParametros);
            $strEstadoConsultaEle       = $arrayRespuestaElementosNoEntregados['strEstado'];
            $arrayElementosNoEntregados = $arrayRespuestaElementosNoEntregados['arrayElementosNoEntregados'];
            $arrayElementosFacturar     = array();
            if ($strEstadoConsultaEle === "OK")
            {
                $strProcesoEquipo = "";
                foreach($arrayElementosNoEntregados as $arrayElementoNoEntregado)
                {
                    $strProcesoEquipo = "NO";
                    foreach($arrayJsonEquipos["equipos"] as $arrayJsonEquipo)
                    {
                        if (strpos($arrayJsonEquipo['descripcion'], $arrayElementoNoEntregado['tipoElemento']) !== $booleanFalse)
                        {
                            if (count($arrayElementosFacturar) > 0)
                            {
                                $arrayElementosFacturarTemp = array();
                                $strEncontroElemento        = "NO";
                                foreach($arrayElementosFacturar as $arrayElementosFacturarItem)
                                {
                                    if ($arrayElementosFacturarItem["id"] === $arrayJsonEquipo["id"])
                                    {
                                        $arrayElementoFacturar = array();
                                        $arrayElementoFacturar["id"]       = $arrayElementosFacturarItem['id'];
                                        $arrayElementoFacturar["precio"]   = $arrayElementosFacturarItem['precio'];
                                        $arrayElementoFacturar["cantidad"] = $arrayElementosFacturarItem['cantidad'] + $arrayJsonEquipo["cantidad"];
                                        $arrayElementosFacturarTemp[]      = $arrayElementoFacturar;
                                        $strEncontroElemento               = "SI";
                                        $strProcesoEquipo                  = "SI";
                                    }
                                    else
                                    {
                                        $arrayElementosFacturarTemp[] = $arrayElementosFacturarItem;
                                    }
                                }
                                if ($strEncontroElemento === "NO")
                                {
                                    $arrayElementoFacturar = array();
                                    $arrayElementoFacturar["id"]       = $arrayJsonEquipo["id"];
                                    $arrayElementoFacturar["precio"]   = $arrayJsonEquipo["precio"];
                                    $arrayElementoFacturar["cantidad"] = $arrayJsonEquipo["cantidad"];
                                    $arrayElementosFacturarTemp[]      = $arrayElementoFacturar;
                                    $strProcesoEquipo                  = "SI";
                                }
                                $arrayElementosFacturar = $arrayElementosFacturarTemp;
                            }
                            else
                            {
                                $arrayElementoFacturar             = array();
                                $arrayElementoFacturar["id"]       = $arrayJsonEquipo['id'];
                                $arrayElementoFacturar["precio"]   = $arrayJsonEquipo['precio'];
                                $arrayElementoFacturar["cantidad"] = $arrayJsonEquipo['cantidad'];
                                $arrayElementosFacturar[]          = $arrayElementoFacturar;
                                $strProcesoEquipo                  = "SI";
                            }
                        }
                        if ($strProcesoEquipo === "SI")
                        {
                            break;
                        }
                    }
                }
                if (count($arrayElementosFacturar) > 0)
                {
                    $floatSubtotal      = 0;
                    $floatEquipos       = 0;
                    $strCaracteristicas = "";
                    foreach($arrayElementosFacturar as $arrayElementosFacturarItem)
                    {
                        if ($strCaracteristicas === "")
                        {
                            $strCaracteristicas = $arrayElementosFacturarItem['id'] . "/" .
                                                    $arrayElementosFacturarItem['cantidad'] . "/" .
                                                    $arrayElementosFacturarItem['precio'];
                        }
                        else
                        {
                            $strCaracteristicas = $strCaracteristicas . "-" .
                                                    $arrayElementosFacturarItem['id'] . "/" .
                                                    $arrayElementosFacturarItem['cantidad'] . "/" .
                                                    $arrayElementosFacturarItem['precio'];
                        }
                        $floatEquipos = $floatEquipos + ($arrayElementosFacturarItem['precio'] * $arrayElementosFacturarItem['cantidad']);
                    }
                    $floatSubtotal = $floatEquipos;
                    $arrayParamsFacturarion = array('intIdServicio'           => $objServicioDestino->getId(),
                                                    'floatSubtotal'           => $floatSubtotal,
                                                    'floatEquipos'            => $floatEquipos,
                                                    'floatDescuento'          => 0,
                                                    'floatDescuentoAdicional' => 0,
                                                    'floatDescuentoNetlifecam'=> 0,
                                                    'floatInstalacion'        => 0,
                                                    'floatSubtotalnc'         => 0,
                                                    'floatPorcDescuento'      => 0,
                                                    'floatPorcInstalacion'    => 0,
                                                    'floatNetlifeCloud'       => 0,
                                                    'floadNetlifeAssistance'  => 0,
                                                    'strCaracteristicas'      => $strCaracteristicas,
                                                    'strIpCliente'            => $strIpCreacion,
                                                    'strEmpresaCod'           => $strCodEmpresa,
                                                    'strUsrCreacion'          => "telcosTraslada",
                                                    'strPrefijoEmpresa'       => $strPrefijoEmpresa,
                                                    'intIdPersonaEmpresaRol'  => $intIdPersonaEmpresaRol,
                                                    'serviceUtil'             => $this->serviceUtil,
                                                    'floatSubtotalNDI'        => 0,
                                                    'floatElCanaldelfutbol'   => 0
                                                );
                    $this->serviceCancelarServicio->ejecutarFacturacionCancelacion($arrayParamsFacturarion);
                    //se busca el servicio destino nuevamente por las actualizaciones que se realizan al momento de facturar
                    $objServicioDestinoAct = $this->emComercial
                                                  ->getRepository('schemaBundle:InfoServicio')
                                                  ->find($objServicioDestino->getId());
                    $strObservacionDetalleFact = "Factura generada por perdida/no entrega de Equipos del login origen: ".
                                                 $objServicioOrigen->getPuntoId()->getLogin().
                                                 " Direccion: ".$objServicioOrigen->getPuntoId()->getDireccion().
                                                 " Jurisdicción: ".$objServicioOrigen->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion();
                    //Inicializacion de parametros para consultar comprobantes
                    $arrayPuntos = array();
                    $arrayPuntos[] = $objServicioDestinoAct->getPuntoFacturacionId()->getId();
                    $arrayParametrosFact = array();
                    $arrayParametrosFact["strCodigosTipoDocumento"] = array("FAC");
                    $arrayParametrosFact["arrayEstados"]              = array("Pendiente");
                    $arrayParametrosFact["strIdEmpresa"]            = $strCodEmpresa;
                    $arrayParametrosFact["arrayPuntos"]               = $arrayPuntos;
                    $arrayParametrosFact["strIdOficina"]            = "";
                    //consulta de comprobantes
                    $arrayComprobantesElectronicos = $this->emFinanciero
                                                          ->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                          ->findFacturasPorPunto($arrayParametrosFact);
                    //Si existen comprobantes
                    if(count($arrayComprobantesElectronicos) > 0)
                    {
                        foreach($arrayComprobantesElectronicos as $arrayComprobanteElectronico)
                        {        
                            if ($arrayComprobanteElectronico['usrCreacion'] === "telcosTraslada")
                            {
                                $arrayFacturaDetalle =  $this->emFinanciero
                                                             ->getRepository('schemaBundle:InfoDocumentoFinancieroDet')
                                                             ->findBy(array('documentoId' => $arrayComprobanteElectronico['idDocumento']));
                                if(count($arrayFacturaDetalle) > 0)
                                {
                                    foreach($arrayFacturaDetalle as $objFacturaDetalle)
                                    {
                                        $objFacturaDetalle->setObservacionesFacturaDetalle($strObservacionDetalleFact);         
                                        $this->emFinanciero->persist($objFacturaDetalle);
                                        $this->emFinanciero->flush();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->generarFacturaEquiposNoEntregadosMd',
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion);
        }
    }
    
    /**
     * activarTrasladoMcafeeMd
     * 
     * Función que sirve para trasladar la información del producto mcafee del cliente origen del traslado
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 21-02-2019
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 07-04-2020 Se agrega el traspaso de las características de licencias de Internet Protegido con tecnología kaspersky 
     *                          del servicio origen al destino
     * 
     * @param Array $arrayParametros [
     *                                 - strUsrCreacion         Cadena de caracteres que indica el usuario de creación a utilizar
     *                                 - strIpCreacion          Cadena de caracteres que indica la ip de creación a utilizar
     *                                 - objServicioOrigen      Objeto de servicio Origen del traslado
     *                                 - objServicioDestino     Objeto de servicio destino del traslado
     *                                 - strEmpresaCod          Cadena de caracteres que indica la empresa a utilizar
     *                               ]
     * @return array $arrayRespuesta [
     *                                 - strStatus   Estado de la transacción ejecutada
     *                                 - strMensaje  Mensaje de la transacción ejecutada
     *                               ]
     */
    public function activarTrasladoMcafeeEnPlanMd($arrayParametros)
    {
        $strUsrCreacion        = !empty($arrayParametros['strUsrCreacion'])?$arrayParametros['strUsrCreacion']:"";
        $strIpCreacion         = !empty($arrayParametros['strIpCreacion'])?$arrayParametros['strIpCreacion']:"";
        $strEmpresaCod         = !empty($arrayParametros['strEmpresaCod'])?$arrayParametros['strEmpresaCod']:"";
        $objServicioOrigen     = !empty($arrayParametros['objServicioOrigen'])?$arrayParametros['objServicioOrigen']:null;
        $objServicioDestino    = !empty($arrayParametros['objServicioDestino'])?$arrayParametros['objServicioDestino']:null;
        
        try            
        {
            if (!is_object($objServicioOrigen))
            {
                throw new \Exception("No se encontró información acerca del servicio origen del traslado que se está procesando");
            }
            
            if (!is_object($objServicioDestino))
            {
                throw new \Exception("No se encontró información acerca del servicio destino del traslado que se está procesando");
            }
            $objProductoMcAfeeEnPlan    = null;
            $arrayProdMcAfee            = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                             ->findBy(array( "descripcionProducto" => "I. PROTEGIDO MULTI PAID",
                                                                             "empresaCod"    => $strEmpresaCod, 
                                                                             "estado"        => "Activo"));
            
            $arrayDetallesPlan  = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->findBy(array("planId" => $objServicioOrigen->getPlanId()->getId()));
            for($intContDetallePlan=0; $intContDetallePlan < count($arrayDetallesPlan); $intContDetallePlan++)
            {
                for($intContProdMcAfee = 0; $intContProdMcAfee < count($arrayProdMcAfee); $intContProdMcAfee++)
                {
                    if($arrayDetallesPlan[$intContDetallePlan]->getProductoId() === $arrayProdMcAfee[$intContProdMcAfee]->getId())
                    {
                        $objProductoMcAfeeEnPlan = $arrayProdMcAfee[$intContProdMcAfee];
                        break;
                    }
                }
            }
            if(!is_object($objProductoMcAfeeEnPlan))
            {
                throw new \Exception("No se ha podido obtener el producto de Internet Protegido dentro del plan");
            }
            
            $objSpcCantDisp   = $this->servicioGeneral
                                           ->getServicioProductoCaracteristica($objServicioOrigen, "CANTIDAD DISPOSITIVOS", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcCantDisp))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "CANTIDAD DISPOSITIVOS",
                                                              $objSpcCantDisp->getValor(),
                                                              $strUsrCreacion);
            }
            $objSpcCorreo = $this->servicioGeneral
                                 ->getServicioProductoCaracteristica($objServicioOrigen, "CORREO ELECTRONICO", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcCorreo))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "CORREO ELECTRONICO",
                                                              $objSpcCorreo->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcCustomer = $this->servicioGeneral
                                   ->getServicioProductoCaracteristica($objServicioOrigen, "CUSTOMERCONTEXTID", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcCustomer))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "CUSTOMERCONTEXTID",
                                                              $objSpcCustomer->getValor(),
                                                              $strUsrCreacion);
            }
            $objSpcPartner = $this->servicioGeneral
                                  ->getServicioProductoCaracteristica($objServicioOrigen, "PARTNERREF", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcPartner))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "PARTNERREF",
                                                              $objSpcPartner->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcPassword = $this->servicioGeneral
                                   ->getServicioProductoCaracteristica($objServicioOrigen, "PASSWORD", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcPassword))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "PASSWORD",
                                                              $objSpcPassword->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcReferencia = $this->servicioGeneral
                                     ->getServicioProductoCaracteristica($objServicioOrigen, "REFERENCIA", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcReferencia))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "REFERENCIA",
                                                              $objSpcReferencia->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcSku = $this->servicioGeneral
                              ->getServicioProductoCaracteristica($objServicioOrigen, "SKU", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcSku))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "SKU",
                                                              $objSpcSku->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcTieneInternet   = $this->servicioGeneral
                                          ->getServicioProductoCaracteristica($objServicioOrigen, "TIENE INTERNET", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcTieneInternet))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "TIENE INTERNET",
                                                              $objSpcTieneInternet->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcSuscriberId  = $this->servicioGeneral
                                       ->getServicioProductoCaracteristica($objServicioOrigen, "SUSCRIBER_ID", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcSuscriberId))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "SUSCRIBER_ID",
                                                              $objSpcSuscriberId->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcCodigoProducto   = $this->servicioGeneral
                                           ->getServicioProductoCaracteristica($objServicioOrigen, "CODIGO_PRODUCTO", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcCodigoProducto))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "CODIGO_PRODUCTO",
                                                              $objSpcCodigoProducto->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcAntivirus    = $this->servicioGeneral
                                       ->getServicioProductoCaracteristica($objServicioOrigen, "ANTIVIRUS", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcAntivirus))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "ANTIVIRUS",
                                                              $objSpcAntivirus->getValor(),
                                                              $strUsrCreacion);
            }
            
            $objSpcNumReintentos    = $this->servicioGeneral
                                           ->getServicioProductoCaracteristica($objServicioOrigen, "NUMERO REINTENTOS", $objProductoMcAfeeEnPlan);
            if(is_object($objSpcNumReintentos))
            {
                $this->servicioGeneral
                     ->ingresarServicioProductoCaracteristica($objServicioDestino, 
                                                              $objProductoMcAfeeEnPlan,
                                                              "NUMERO REINTENTOS",
                                                              $objSpcNumReintentos->getValor(),
                                                              $strUsrCreacion);
            }
            
            //historial del servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicioDestino);
            $objServicioHistorial->setObservacion("Se trasladó el producto internet protegido del servicio.");
            $objServicioHistorial->setEstado($objServicioDestino->getEstado());
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioHistorial);
            $this->emComercial->flush();
            
            $strStatus  = "OK";

        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activarTrasladoMcafeeMd',
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion);
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje);
        return $arrayRespuesta;
    }
    
    /**
     * activarTrasladoMcaffeAdicionalesMd
     * 
     * Función que sirve para trasladar la información de productos adicionales mcafee del cliente origen del traslado
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 22-02-2019
     * @since 1.0
     * 
     * @param Array $arrayParametros [
     *                                 - strUsrCreacion         Cadena de caracteres que indica el usuario de creación a utilizar
     *                                 - objServicioPunto       Objeto de servicio del punto a procesar
     *                                 - objProdInternet        Objeto de servicio del punto a procesar
     *                                 - strIpCreacion          Ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                 - strStatus   Estado de la transacción ejecutada
     *                                 - strMensaje  Mensaje de la transacción ejecutada
     *                               ]
     */
    public function activarTrasladoMcaffeAdicionalesMd($arrayParametros)
    {
        $arrayRespuestaTrasladoMcAfee = array();
        $objServicioPunto = $arrayParametros["objServicioPunto"];
        $objProdInternet  = $arrayParametros["objProdInternet"];
        $strUsrCreacion   = $arrayParametros["strUsrCreacion"];
        $strIpCreacion    = $arrayParametros["strIpCreacion"];
        try
        {
            if (is_object($objServicioPunto) && is_object($objProdInternet))
            {
                //Eliminar las caracteristicas de los servicios origen que pertenecen al producto McAfee
                $arrayServicioAdicionales = $this->emComercial
                                                 ->getRepository('schemaBundle:InfoServicio')
                                                 ->findBy(array('puntoId'   => $objServicioPunto->getPuntoId(),
                                                                'estado'    => 'Activo',
                                                                'tipoOrden' => 'T'));

                if(is_array($arrayServicioAdicionales))
                {
                    //se recorren servicios con estado Pendiente del cliente
                    for($i = 0; $i < count($arrayServicioAdicionales); $i++)
                    {
                        $objServicioAdicional = $arrayServicioAdicionales[$i];
                        if (is_object($objServicioAdicional->getProductoId()))
                        {
                            $objAdmiProductoServ = $this->emComercial
                                                        ->getRepository('schemaBundle:AdmiProducto')
                                                        ->find($objServicioAdicional->getProductoId());
                            $booleanValidaProducto = strpos($objAdmiProductoServ->getDescripcionProducto(), 'I. PROTEGIDO');
                            //se valida que sean productos McAfee
                            if ($booleanValidaProducto !== false )
                            {
                                $objSpcTrasladoServicioDestino = $this->servicioGeneral
                                                                      ->getServicioProductoCaracteristica( $objServicioAdicional, 
                                                                                                           "TRASLADO", 
                                                                                                           $objProdInternet);
                                if(is_object($objSpcTrasladoServicioDestino))
                                {
                                    $objServicioMcAfee  = $this->emComercial
                                                               ->getRepository('schemaBundle:InfoServicio')
                                                               ->find($objSpcTrasladoServicioDestino->getValor());
                                    if (is_object($objServicioMcAfee))
                                    {
                                        ///Se eliminan las características asociadas al servicio de Internet del punto origen
                                        $arraySpcServicioOrigen = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                                    ->findBy(array( "servicioId"    => $objServicioMcAfee->getId(),
                                                                                                    "estado"        => "Activo"));
                                        foreach($arraySpcServicioOrigen as $objSpcServicioOrigen)
                                        {
                                            $objSpcServicioOrigen->setEstado('Eliminado');
                                            $objSpcServicioOrigen->setUsrUltMod($strUsrCreacion);
                                            $objSpcServicioOrigen->setFeUltMod(new \DateTime('now'));
                                            $this->emComercial->persist($objSpcServicioOrigen);
                                            $this->emComercial->flush();
                                        }
                                    }
                                    $objSpcTrasladoServicioDestino->setEstado('Eliminado');
                                    $this->emComercial->persist($objSpcTrasladoServicioDestino);
                                    $this->emComercial->flush();
                                }
                            }
                        }
                    }
                }
            }
            $arrayRespuestaTrasladoMcAfee["strStatus"] = "OK";
            $arrayRespuestaTrasladoMcAfee["strMensaje"] = "Información de productos adicionales McAfee fue trasladada con éxito.";
        }
        catch (\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = $objEx->getMessage();
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activarTrasladoMcafeeMd',
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion);
            $arrayRespuestaTrasladoMcAfee["strStatus"]  = $strStatus;
            $arrayRespuestaTrasladoMcAfee["strMensaje"] = $strMensaje;
        }
        return $arrayRespuestaTrasladoMcAfee;
    }
    
    /**
     * trasladarExtenderDualBand
     * 
     * Función que sirve para trasladar el Equipo Extender Dual Band
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 20-02-2019
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 11-11-2020 Se agrega restricción para evitar errores por no poder obtener el servicio de Internet
     * 
     * @param Array $arrayParametros [
     *                                 - intIdServicio          Objeto de servicio 
     *                                 - intIdServicioInternet  Objeto de información técnica del servicio
     *                                 - strSerieElemento       Serie del elemento extender dual band
     *                                 - strMacElemento         Mac del elemento extender dual band
     *                                 - strUsrCreacion         Cadena de caracteres que indica el usuario de creación a utilizar
     *                                 - strIpCreacion          Cadena de caracteres que indica la ip de creación a utilizar
     *                                 - strEmpresaCod          Cadena de caracteres que indica la empresa a utilizar
     *                               ]
     * @return array $arrayRespuesta [
     *                                 - strStatus          Estado de la transacción ejecutada
     *                                 - strMensaje         Mensaje de la transacción ejecutada
     *                                 - strMostrarMensaje  Bandera para verificar si el mensaje devuelto por la función puede ser 
     *                                                      mostrado al usuario directamente
     *                               ]
     */
    public function trasladarExtenderDualBand($arrayParametros)
    {
        $intIdServicio         = !empty($arrayParametros['intIdServicio'])?$arrayParametros['intIdServicio']:null;
        $intIdServicioInternet = !empty($arrayParametros['intIdServicioInternet'])?$arrayParametros['intIdServicioInternet']:null;
        $strSerieElemento      = !empty($arrayParametros['strSerieElemento'])?$arrayParametros['strSerieElemento']:"";
        $strMacElemento        = !empty($arrayParametros['strMacElemento'])?$arrayParametros['strMacElemento']:"";
        $strUsrCreacion        = !empty($arrayParametros['strUsrCreacion'])?$arrayParametros['strUsrCreacion']:"";
        $strIpCreacion         = !empty($arrayParametros['strIpCreacion'])?$arrayParametros['strIpCreacion']:"";
        $strEmpresaCod         = !empty($arrayParametros['strEmpresaCod'])?$arrayParametros['strEmpresaCod']:"";
        $strMostrarMensaje     = "NO";
        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        try            
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontró información acerca del servicio que se está procesando");
            }
            
            if(is_object($objServicio->getPlanId()) && $intIdServicioInternet == 0)
            {
                $intIdServicioInternet = $objServicio->getId();
            }
            if(!isset($intIdServicioInternet) || empty($intIdServicioInternet))
            {
                throw new \Exception("No se encontró el ID del servicio de Internet");
            }
            $objServicioInternet = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioInternet);
            if (!is_object($objServicioInternet))
            {
                throw new \Exception("No se encontró el servicio de Internet");
            }
            $objPunto = $objServicioInternet->getPuntoId();
            $objServicioTecnicoInternet = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array( "servicioId" => $intIdServicioInternet));
            if(!is_object($objServicioTecnicoInternet))
            {
                throw new \Exception("No se ha podido obtener la información técnica del servicio de Internet");
            }
            
            if(!is_object($objServicioInternet->getPlanId()))
            {
                throw new \Exception("No se ha podido obtener el plan asociado al servicio de Internet");
            }
            
            $objProductoInternetEnPlan  = null;
            $arrayProdInternet          = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                            ->findBy(array( "nombreTecnico" => "INTERNET",
                                                                            "empresaCod"    => $strEmpresaCod, 
                                                                            "estado"        => "Activo"));
            
            $arrayDetallesPlan  = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->findBy(array("planId" => $objServicioInternet->getPlanId()->getId()));
            for($intContDetallePlan=0; $intContDetallePlan < count($arrayDetallesPlan); $intContDetallePlan++)
            {
                for($intContProdInternet = 0; $intContProdInternet < count($arrayProdInternet); $intContProdInternet++)
                {
                    if($arrayDetallesPlan[$intContDetallePlan]->getProductoId() === $arrayProdInternet[$intContProdInternet]->getId())
                    {
                        $objProductoInternetEnPlan = $arrayProdInternet[$intContProdInternet];
                        break;
                    }
                }
            }
            if(!is_object($objProductoInternetEnPlan))
            {
                throw new \Exception("No se ha podido obtener el producto de Internet dentro del plan");
            }
            $strServiceProfile      = "";
            $objSpcServiceProfile   = $this->servicioGeneral
                                           ->getServicioProductoCaracteristica($objServicioInternet, "SERVICE-PROFILE", $objProductoInternetEnPlan);
            if(is_object($objSpcServiceProfile))
            {
                $strServiceProfile = $objSpcServiceProfile->getValor();
            }
            $strModeloElementoOlt   = "";
            $strIpElementoOlt       = "";
            $intIdElementoOlt       = $objServicioTecnicoInternet->getElementoId();
            $intIdInterfaceOlt      = $objServicioTecnicoInternet->getInterfaceElementoId();
            $objElementoOlt         = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoOlt);
            $objInterfaceOlt        = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($intIdInterfaceOlt);
            if(is_object($objElementoOlt))
            {
                $strModeloElementoOlt   = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
            }
            $objIpElementoOlt   = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                          ->findOneBy(array("elementoId" => $intIdElementoOlt));
            if(is_object($objIpElementoOlt))
            {
                $strIpElementoOlt = $objIpElementoOlt->getIp();
            }
            
            $objPersonaEmpresaRol           = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->find($objPunto->getPersonaEmpresaRolId()->getId());
            $objPersona                     = $objPersonaEmpresaRol->getPersonaId();
            $strIdentificacion              = $objPersona->getIdentificacionCliente();
            $strNombreCliente               = $objPersona->__toString();
            $strTipoNegocio                 = $objPunto->getTipoNegocioId()->getNombreTipoNegocio();
            
            $objSpcIndiceCliente            = $this->servicioGeneral
                                                   ->getServicioProductoCaracteristica( $objServicioInternet, 
                                                                                        "INDICE CLIENTE", 
                                                                                        $objProductoInternetEnPlan);
            $strIndiceCliente   = "";
            if(is_object($objSpcIndiceCliente))
            {
                $strIndiceCliente = $objSpcIndiceCliente->getValor();
            }
            $arrayParams['intInterfaceElementoConectorId'] = $objServicioTecnicoInternet->getInterfaceElementoClienteId();
            $arrayParams['strTipoSmartWifi']               = 'ExtenderDualBand';
            $arrayParams['arrayData']                      = array();
            $arrayElementosExtenderDualBand                = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                     ->getElementosSmartWifiByInterface($arrayParams);
            $arrayDatosExtender     = array(
                                        'serie_extender'        => $strSerieElemento,
                                        'mac_extender'          => $strMacElemento,
                                        'estado_servicio'       => $objServicioInternet->getEstado(),
                                        'ip_olt'                => $strIpElementoOlt,
                                        'tipo_negocio_actual'   => $strTipoNegocio,
                                        'numero_de_extender'    => count($arrayElementosExtenderDualBand),
                                        'puerto_olt'            => $objInterfaceOlt->getNombreInterfaceElemento(),
                                        'ont_id'                => $strIndiceCliente,
                                        'service_profile'       => $strServiceProfile,
                                        'modelo_olt'            => $strModeloElementoOlt
                                    );

            $arrayDatosMiddleware   = array(
                                            'nombre_cliente'        => $strNombreCliente,
                                            'login'                 => $objPunto->getLogin(),
                                            'identificacion'        => $strIdentificacion,
                                            'datos'                 => $arrayDatosExtender,
                                            'opcion'                => "TRASLADAR_EXTENDER",
                                            'ejecutaComando'        => $this->ejecutaComando,
                                            'usrCreacion'           => $strUsrCreacion,
                                            'ipCreacion'            => $strIpCreacion
                                        );
            $arrayRespuestaMiddleware   = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
            $strStatusMiddleware        = $arrayRespuestaMiddleware['status'];
            $strMensajeMiddleware       = $arrayRespuestaMiddleware['mensaje'];
            if($strStatusMiddleware !== "OK")
            {
                $strMostrarMensaje = "SI";
                throw new \Exception($strMensajeMiddleware);
            }
            $strObservacionHistorial = "Se trasladó el equipo extender dual band";
            $strMensajeUsr           = "Se trasladó el equipo extender dual band correctamente";
            if(is_object($objServicio->getProductoId()))
            {
                $strExtenderEnPlan  = "NO";
                $objServicio->setEstado("Activo");
                $this->emComercial->persist($objServicio);
                $this->emComercial->flush();
            }
            else if(is_object($objServicio->getPlanId()) && ($objServicioInternet->getId() === $objServicio->getId()))
            {
                $strExtenderEnPlan = "SI";
            }
            else
            {
                throw new \Exception("No se ha podido verificar el servicio");
            }
            //historial del servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($strObservacionHistorial);
            $objServicioHistorial->setEstado($objServicio->getEstado());
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioHistorial);
            $this->emComercial->flush();
            $objSpcTrasladarEDB = $this->servicioGeneral
                                       ->getServicioProductoCaracteristica($objServicio, "TRASLADAR EXTENDER DUAL BAND", $objProductoInternetEnPlan);
            if(is_object($objSpcTrasladarEDB))
            {
                if ($strExtenderEnPlan == "NO")
                {
                    $objServicioOrigTrasExt = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($objSpcTrasladarEDB->getValor());
                    if (is_object($objServicioOrigTrasExt))
                    {
                        $objServicioOrigTrasExt->setEstado('Trasladado');
                        $this->emComercial->persist($objServicioOrigTrasExt);
                        $this->emComercial->flush();
                        $objServicioHistEx = new InfoServicioHistorial();
                        $objServicioHistEx->setServicioId($objServicioOrigTrasExt);
                        $objServicioHistEx->setObservacion('Se trasladó el servicio');
                        $objServicioHistEx->setIpCreacion($strIpCreacion);
                        $objServicioHistEx->setFeCreacion(new \DateTime('now'));
                        $objServicioHistEx->setUsrCreacion($strUsrCreacion);
                        $objServicioHistEx->setEstado('Trasladado');
                        $this->emComercial->persist($objServicioHistEx);
                        $this->emComercial->flush();
                        $objSpcTrasladarMac = $this->servicioGeneral
                                                   ->getServicioProductoCaracteristica($objServicioOrigTrasExt, 
                                                                                       "MAC", 
                                                                                       $objServicio->getProductoId());
                        if(is_object($objSpcTrasladarMac))
                        {
                            $objSpcTrasladarMac->setEstado("Eliminado");
                            $this->emComercial->persist($objSpcTrasladarMac);
                            $this->emComercial->flush();
                            $this->servicioGeneral
                                 ->ingresarServicioProductoCaracteristica($objServicio, 
                                                                          $objServicio->getProductoId(),
                                                                          "MAC",
                                                                          $objSpcTrasladarMac->getValor(),
                                                                          $strUsrCreacion);
                            
                        }
                    }
                    
                }
                $objSpcTrasladarEDB->setEstado("Eliminado");
                $this->emComercial->persist($objSpcTrasladarEDB);
                $this->emComercial->flush();
            }
            
            $this->emComercial->getConnection()->commit();
            $this->emInfraestructura->getConnection()->commit();
            $strStatus  = "OK";
            $strMensaje = $strMensajeUsr;

        }
        catch (\Exception $objEx)
        {
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
             if($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->rollback();
            }
            
            $strStatus  = "ERROR";
            $strMensaje = $objEx->getMessage();
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->trasladarExtenderDualBand',
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion);
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje, "strMostrarMensaje" => $strMostrarMensaje);
        return $arrayRespuesta;
    }
    
    /**
     * sincronizarExtenderDualBand
     * 
     * Función que sirve para trasladar el Equipo Extender Dual Band
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 20-02-2019
     * @since 1.0
     * 
     * @param Array $arrayParametros [
     *                                 - intIdServicio          Objeto de servicio 
     *                                 - intIdServicioInternet  Objeto de información técnica del servicio
     *                                 - strSerieElemento       Serie del elemento extender dual band
     *                                 - strMacElemento         Mac del elemento extender dual band
     *                                 - strUsrCreacion         Cadena de caracteres que indica el usuario de creación a utilizar
     *                                 - strIpCreacion          Cadena de caracteres que indica la ip de creación a utilizar
     *                                 - strEmpresaCod          Cadena de caracteres que indica la empresa a utilizar
     *                               ]
     * @return array $arrayRespuesta [
     *                                 - strStatus          Estado de la transacción ejecutada
     *                                 - strMensaje         Mensaje de la transacción ejecutada
     *                                 - strMostrarMensaje  Bandera para verificar si el mensaje devuelto por la función puede ser 
     *                                                      mostrado al usuario directamente
     *                               ]
     */
    public function sincronizarExtenderDualBand($arrayParametros)
    {
        $intIdServicio         = !empty($arrayParametros['intIdServicio'])?$arrayParametros['intIdServicio']:null;
        $intIdServicioInternet = !empty($arrayParametros['intIdServicioInternet'])?$arrayParametros['intIdServicioInternet']:null;
        $strSerieElemento      = !empty($arrayParametros['strSerieElemento'])?$arrayParametros['strSerieElemento']:"";
        $strMacElemento        = !empty($arrayParametros['strMacElemento'])?$arrayParametros['strMacElemento']:"";
        $strUsrCreacion        = !empty($arrayParametros['strUsrCreacion'])?$arrayParametros['strUsrCreacion']:"";
        $strIpCreacion         = !empty($arrayParametros['strIpCreacion'])?$arrayParametros['strIpCreacion']:"";
        $strEmpresaCod         = !empty($arrayParametros['strEmpresaCod'])?$arrayParametros['strEmpresaCod']:"";
        $strMostrarMensaje     = "NO";
        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        try            
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objServicio))
            {
                throw new \Exception("No se encontró información acerca del servicio que se está procesando");
            }
            
            if(is_object($objServicio->getPlanId()) && $intIdServicioInternet == 0)
            {
                $intIdServicioInternet = $objServicio->getId();
            }
            $objServicioInternet = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioInternet);
            if (!is_object($objServicioInternet))
            {
                throw new \Exception("No se encontró el servicio de Internet");
            }
            $objPunto = $objServicioInternet->getPuntoId();
            $objServicioTecnicoInternet = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array( "servicioId" => $intIdServicioInternet));
            if(!is_object($objServicioTecnicoInternet))
            {
                throw new \Exception("No se ha podido obtener la información técnica del servicio de Internet");
            }
            
            if(!is_object($objServicioInternet->getPlanId()))
            {
                throw new \Exception("No se ha podido obtener el plan asociado al servicio de Internet");
            }
            
            $objProductoInternetEnPlan  = null;
            $arrayProdInternet          = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                            ->findBy(array( "nombreTecnico" => "INTERNET",
                                                                            "empresaCod"    => $strEmpresaCod, 
                                                                            "estado"        => "Activo"));
            
            $arrayDetallesPlan  = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->findBy(array("planId" => $objServicioInternet->getPlanId()->getId()));
            for($intContDetallePlan=0; $intContDetallePlan < count($arrayDetallesPlan); $intContDetallePlan++)
            {
                for($intContProdInternet = 0; $intContProdInternet < count($arrayProdInternet); $intContProdInternet++)
                {
                    if($arrayDetallesPlan[$intContDetallePlan]->getProductoId() === $arrayProdInternet[$intContProdInternet]->getId())
                    {
                        $objProductoInternetEnPlan = $arrayProdInternet[$intContProdInternet];
                        break;
                    }
                }
            }
            if(!is_object($objProductoInternetEnPlan))
            {
                throw new \Exception("No se ha podido obtener el producto de Internet dentro del plan");
            }
            $strServiceProfile      = "";
            $objSpcServiceProfile   = $this->servicioGeneral
                                           ->getServicioProductoCaracteristica($objServicioInternet, "SERVICE-PROFILE", $objProductoInternetEnPlan);
            if(is_object($objSpcServiceProfile))
            {
                $strServiceProfile = $objSpcServiceProfile->getValor();
            }
            $strModeloElementoOlt   = "";
            $strIpElementoOlt       = "";
            $intIdElementoOlt       = $objServicioTecnicoInternet->getElementoId();
            $intIdInterfaceOlt      = $objServicioTecnicoInternet->getInterfaceElementoId();
            $objElementoOlt         = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoOlt);
            $objInterfaceOlt        = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($intIdInterfaceOlt);
            if(is_object($objElementoOlt))
            {
                $strModeloElementoOlt   = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
            }
            $objIpElementoOlt   = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                          ->findOneBy(array("elementoId" => $intIdElementoOlt));
            if(is_object($objIpElementoOlt))
            {
                $strIpElementoOlt = $objIpElementoOlt->getIp();
            }
            
            $objPersonaEmpresaRol           = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->find($objPunto->getPersonaEmpresaRolId()->getId());
            $objPersona                     = $objPersonaEmpresaRol->getPersonaId();
            $strIdentificacion              = $objPersona->getIdentificacionCliente();
            $strNombreCliente               = $objPersona->__toString();
            $strTipoNegocio                 = $objPunto->getTipoNegocioId()->getNombreTipoNegocio();
            
            $objSpcIndiceCliente            = $this->servicioGeneral
                                                   ->getServicioProductoCaracteristica( $objServicioInternet, 
                                                                                        "INDICE CLIENTE", 
                                                                                        $objProductoInternetEnPlan);
            $strIndiceCliente   = "";
            if(is_object($objSpcIndiceCliente))
            {
                $strIndiceCliente = $objSpcIndiceCliente->getValor();
            }
            $arrayParams['intInterfaceElementoConectorId'] = $objServicioTecnicoInternet->getInterfaceElementoClienteId();
            $arrayParams['strTipoSmartWifi']               = 'ExtenderDualBand';
            $arrayParams['arrayData']                      = array();
            $arrayElementosExtenderDualBand                = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                     ->getElementosSmartWifiByInterface($arrayParams);
            $arrayDatosExtender     = array(
                                        'serie_extender'        => $strSerieElemento,
                                        'mac_extender'          => $strMacElemento,
                                        'estado_servicio'       => $objServicioInternet->getEstado(),
                                        'ip_olt'                => $strIpElementoOlt,
                                        'tipo_negocio_actual'   => $strTipoNegocio,
                                        'numero_de_extender'    => count($arrayElementosExtenderDualBand),
                                        'puerto_olt'            => $objInterfaceOlt->getNombreInterfaceElemento(),
                                        'ont_id'                => $strIndiceCliente,
                                        'service_profile'       => $strServiceProfile,
                                        'modelo_olt'            => $strModeloElementoOlt
                                    );

            $arrayDatosMiddleware   = array(
                                            'nombre_cliente'        => $strNombreCliente,
                                            'login'                 => $objPunto->getLogin(),
                                            'identificacion'        => $strIdentificacion,
                                            'datos'                 => $arrayDatosExtender,
                                            'opcion'                => "TRASLADAR_EXTENDER",
                                            'ejecutaComando'        => $this->ejecutaComando,
                                            'usrCreacion'           => $strUsrCreacion,
                                            'ipCreacion'            => $strIpCreacion
                                        );
            $arrayRespuestaMiddleware   = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
            $strStatusMiddleware        = $arrayRespuestaMiddleware['status'];
            $strMensajeMiddleware       = $arrayRespuestaMiddleware['mensaje'];
            if($strStatusMiddleware !== "OK")
            {
                $strMostrarMensaje = "SI";
                throw new \Exception($strMensajeMiddleware);
            }
            $strObservacionHistorial = "Se sincronizó el equipo extender dual band";
            $strMensajeUsr           = "Se sincronizó el equipo extender dual band correctamente";
            if(is_object($objServicio->getProductoId()))
            {
                $objServicio->setEstado("Activo");
                $this->emComercial->persist($objServicio);
                $this->emComercial->flush();
            }
            
            //historial del servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion($strObservacionHistorial);
            $objServicioHistorial->setEstado($objServicio->getEstado());
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioHistorial);
            $this->emComercial->flush();
            $objSpcSincronizarEDB = $this->servicioGeneral
                                       ->getServicioProductoCaracteristica($objServicio, "SINCRONIZAR EXTENDER DUAL BAND", $objProductoInternetEnPlan);
            if(is_object($objSpcSincronizarEDB))
            {
                $objSpcSincronizarEDB->setEstado("Eliminado");
                $this->emComercial->persist($objSpcSincronizarEDB);
                $this->emComercial->flush();
            }
            
            $this->emComercial->getConnection()->commit();
            $this->emInfraestructura->getConnection()->commit();
            $strStatus  = "OK";
            $strMensaje = $strMensajeUsr;

        }
        catch (\Exception $objEx)
        {
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
             if($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->rollback();
            }
            
            $strStatus  = "ERROR";
            $strMensaje = $objEx->getMessage();
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->sincronizarExtenderDualBand',
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion);
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje, "strMostrarMensaje" => $strMostrarMensaje);
        return $arrayRespuesta;
    }

    /**
     * Función que sirve para obtener la información de las ips que se enviarán al middleware
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 29-08-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 25-11-2020  Se agregan validaciones adicionales para soportar traslados de clientes con IP FIJA WAN
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.2 22-02-2021  Se agregan validaciones para saber si el servicio tiene tipo de Ip Privada
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 07-07-2022  Se agrega seteo de scope en ips adicionales a retornar
     * 
     * @param array $arrayParametros [
     *                                  "objProdIp"                     => objeto producto ip
     *                                  "objServicioOrigen"             => objeto del servicio de Internet del punto origen
     *                                  "objServicioTecnicoOrigen"      => objeto del servicio técnico de Internet del punto origen
     *                                  "arrayServiciosPuntoOrigen"     => arreglo con los servicios del punto origen 
     *                                  "arrayProdIp"                   => arreglo del producto ip
     *                                  "objProductoInternet"           => objeto del producto Internet
     *                                  "objServicioDestino"            => objeto del servicio de Internet del punto destino
     *                                  "objElementoOltDestino"         => objeto del olt del servicio de Internet del punto destino
     *                                  "arrayServiciosPuntoDestino"    => arreglo con los servicios del punto destino
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"                    => OK o ERROR
     *                                  "mensaje"                   => mensaje de error 
     *                                  "scopeOrigen"               => scope del punto origen
     *                                  "scopeDestino"              => scope del punto destino
     *                                  "ipPlanOrigen"              => ip del plan del servicio en el punto origen
     *                                  "ipPlanDestino"             => ip del plan del servicio en el punto destino
     *                                  "ipsActivar"                => arreglo de ips adicionales que se desean activar
     *                                  "ipsCancelar"               => arreglo de ips adicionales que se desean cancelar
     *                                  "numIpsActivasAdicOrigen"   => número de ips adicionales activas en el punto origen
     *                               ]
     * 
     */
    public function obtenerDatosIpsTrasladoMd($arrayParametros)
    {
        try
        {
            $strMensaje                 = "";
            $strIpFijaPlanOrigen        = "";
            $strIpFijaPlanDestino       = "";
            $strScopeOrigen             = "";
            $strScopeDestino            = "";
            $arrayIpsAdicionalesDestino = array();
            $objProdIp                  = $arrayParametros["objProdIp"];
            $objServicioOrigen          = $arrayParametros["objServicioOrigen"];
            $objServicioTecnicoOrigen   = $arrayParametros["objServicioTecnicoOrigen"];
            $arrayServiciosPuntoOrigen  = $arrayParametros["arrayServiciosPuntoOrigen"];
            $arrayProdIp                = $arrayParametros["arrayProdIp"];
            $objProductoInternet        = $arrayParametros["objProductoInternet"];
            $objServicioDestino         = $arrayParametros["objServicioDestino"];
            $objElementoOltDestino      = $arrayParametros["objElementoOltDestino"];
            $arrayServiciosPuntoDestino = $arrayParametros["arrayServiciosPuntoDestino"];
            $strGestionarIpsMidd        = $arrayParametros["strGestionarIpsMidd"];
            $strTieneIpWan              = $arrayParametros["strTieneIpWan"];
            
            //Se obtiene la ip del plan asociada al punto origen
            $objInfoIpPlanOrigen    = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("servicioId"    => $objServicioOrigen->getId(),
                                                                                "estado"        => "Activo"));
            if(is_object($objInfoIpPlanOrigen))
            {
                $strIpFijaPlanOrigen    = $objInfoIpPlanOrigen->getIp();
                $objSpcScopeOrigen      = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, "SCOPE", $objProdIp);

                if(!is_object($objSpcScopeOrigen))
                {
                    //BUSCAR SCOPE
                    $arrayScopeOltOrigen    = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                      ->getScopePorIpFija($objInfoIpPlanOrigen->getIp(),
                                                                                          $objServicioTecnicoOrigen->getElementoId());

                    if(empty($arrayScopeOltOrigen))
                    {
                        throw new \Exception("Ip Fija no pertenece a un Scope! <br>Favor Comunicarse con RDA!");
                    }
                    $strScopeOrigen = $arrayScopeOltOrigen['NOMBRE_SCOPE'];
                }
                else
                {
                    $strScopeOrigen = $objSpcScopeOrigen->getValor();
                }
            }

            //Se obtienen las ips adicionales asociadas al punto origen
            $arrayDatosIpsCancelarOrigen    = $this->servicioGeneral->getInfoIpsFijaPunto(  $arrayServiciosPuntoOrigen, $arrayProdIp, 
                                                                                            $objServicioOrigen, 'Activo', 'Activo', 
                                                                                            $objProductoInternet);
            $arrayIpsAdicionalesOrigen      = $arrayDatosIpsCancelarOrigen['valores'];
            $intIpsActivasAdicionalesOrigen = $arrayDatosIpsCancelarOrigen['ip_fijas_activas'];
            
            if ($strTieneIpWan == "SI")
            {
                $intIpsActivasAdicionalesOrigen = $intIpsActivasAdicionalesOrigen + 1;
            }
            
            $strTipoIp = 'FIJA';
        
            //Obtiene tipo de ip por el servicio (PRIVADA)
            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId"  =>  $objServicioDestino->getId(),
                                                                  "tipoIp"      =>  "PRIVADA",
                                                                  "estado"      =>  "Reservada"));
            if (is_object($objTipoIp))
            {
                $strTipoIp = $objTipoIp->getTipoIp();
            }
            
            //Se obtiene la ip asociada al plan del servicio destino
            $objInfoIpPlanDestino   = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                ->findOneBy(array(  "servicioId" => $objServicioDestino->getId(),
                                                                                    "tipoIp"     => $strTipoIp,
                                                                                    "estado"     => "Reservada"));
            if(is_object($objInfoIpPlanDestino))
            {
                $strIpFijaPlanDestino = $objInfoIpPlanDestino->getIp();
            }

            //OBTENER SCOPE NUEVO
            $objSpcScopeDestino = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, "SCOPE", $objProdIp);

            if(is_object($objSpcScopeDestino))
            {
                $strScopeDestino = $objSpcScopeDestino->getValor();
            }
            
            if($intIpsActivasAdicionalesOrigen > 0 && $strGestionarIpsMidd === "NO")
            {
                $arrayIpsAdicionalesDestino = $arrayIpsAdicionalesOrigen;
            }
            else if($intIpsActivasAdicionalesOrigen > 0 && $strGestionarIpsMidd === "SI")
            {
                //Obtener ips adicionales que se activarán en el punto destino
                $arrayIpsAdicionalesPorActivarDestino   = $this->recursosRed->getIpsDisponibleScopeOlt( $intIpsActivasAdicionalesOrigen, 
                                                                                                        $objElementoOltDestino->getId(), 
                                                                                                        $objServicioDestino->getId(), 
                                                                                                        $objServicioDestino->getPuntoId()->getId(), 
                                                                                                        "SI", 
                                                                                                        $objServicioDestino->getPlanId()->getId());

                if(isset($arrayIpsAdicionalesPorActivarDestino['error']) && !empty($arrayIpsAdicionalesPorActivarDestino['error']))
                {
                    throw new \Exception($arrayIpsAdicionalesPorActivarDestino['error']);
                }

                $arrayIpsPorActivarDestino = $arrayIpsAdicionalesPorActivarDestino['ips'];
                //Construir arreglo para activar ips adicionales
                $intIndice          = 0;
                if ($strTieneIpWan == "SI")
                {
                    $strIpFijaPlanDestino = $arrayIpsPorActivarDestino[0]['ip'];
                    $strScopeDestino      = $arrayIpsPorActivarDestino[0]['scope'];
                    unset($arrayIpsPorActivarDestino[0]);
                }
                foreach($arrayIpsPorActivarDestino as $arrayIpPorActivarDestino)
                {
                    $objServicioIpDestino   = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')
                                                                      ->find($arrayServiciosPuntoDestino[$intIndice]->getId());
                    $objSpcTrasladoIp       = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIpDestino, "TRASLADO", 
                                                                                                        $objProductoInternet);
                    $intIdServicioIpOrigen  = $objSpcTrasladoIp->getValor();
                    $objServicioIpOrigen    = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')->find($intIdServicioIpOrigen);

                    $objSpcMacIpOrigen = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioIpOrigen, 
                                                                                                    "MAC ONT", 
                                                                                                    $objProductoInternet);
                    if(!is_object($objSpcMacIpOrigen))
                    {
                        $objSpcMacIpOrigen = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioIpOrigen, 
                                                                                                        "MAC", 
                                                                                                        $objProductoInternet);
                        if(!is_object($objSpcMacIpOrigen))
                        {
                            $objSpcMacIpOrigen = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioIpOrigen, 
                                                                                                            "MAC WIFI", 
                                                                                                            $objProductoInternet);
                            if(!is_object($objSpcMacIpOrigen))
                            {
                                throw new \Exception("No existe Mac asociado a un Servicio, favor revisar!");
                            }
                        }
                    }

                    $strMacIpOrigen                 = $objSpcMacIpOrigen->getValor();
                    $strIpOrigen                    = $arrayIpPorActivarDestino['ip'];
                    $intIdservicioOrigen            = $arrayServiciosPuntoDestino[$intIndice]->getId();
                    $arrayIpsAdicionalesDestino[]   = array(
                                                            'mac'           => $strMacIpOrigen,
                                                            'ip'            => $strIpOrigen,
                                                            'id_servicio'   => $intIdservicioOrigen,
                                                            'scope'         => $arrayIpPorActivarDestino['scope']
                                                           );
                    $intIndice++;
                }
            }
            $strStatus = "OK";
        } 
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuesta = array("status"                    => $strStatus, 
                                "mensaje"                   => $strMensaje,
                                "scopeOrigen"               => $strScopeOrigen,
                                "scopeDestino"              => $strScopeDestino,
                                "ipPlanOrigen"              => $strIpFijaPlanOrigen,
                                "ipPlanDestino"             => $strIpFijaPlanDestino,
                                "ipsActivar"                => $arrayIpsAdicionalesDestino,
                                "ipsCancelar"               => $arrayIpsAdicionalesOrigen,
                                "numIpsActivasAdicOrigen"   => $intIpsActivasAdicionalesOrigen
        );
        return $arrayRespuesta;
    }

    /**
     * Función que realiza el llamado al middleware cuando se realiza un traslado con diferentes olts 
     * o con mismos olts y diferente interface de olt
     * 
     * @param type $arrayParametros [
     *                                  "objProductoInternet"           => objeto del producto Internet
     *                                  "arrayProdIp"                   => arreglo del producto Ip
     *                                  "strTipoNegocioPuntoDestino"    => tipo de negocio del punto destino
     *                                  "objServicioOrigen"             => objeto del servicio de Internet del punto origen
     *                                  "objServicioDestino"            => objeto del servicio de Internet del punto destino
     *                                  "objServicioTecnicoOrigen"      => objeto del servicio técnico del punto origen
     *                                  "arrayServiciosPuntoOrigen"     => arreglo de servicios del punto origen
     *                                  "arrayServiciosPuntoDestino"    => arreglo de servicios del punto destino
     *                                  "objElementoOltOrigen"          => objeto del olt del servicio en el punto origen
     *                                  "objInterfaceOltOrigen"         => objeto de la interface del olt del servicio en el punto origen
     *                                  "strModeloOltOrigen"            => modelo del olt del servicio de Internet del punto origen
     *                                  "objElementoOltDestino"         => objeto del olt del servicio de Internet del punto destino
     *                                  "strModeloOltDestino"           => modelo del olt del servicio de Internet del punto destino
     *                                  "objInterfaceOltDestino"        => objeto de la interface
     *                                  "objElementoCpeOntOrigen"       => objeto del cpe ont del servicio de Internet del punto origen
     *                                  "strSerieOnt"                   => serie del cpe ont
     *                                  "strMacOnt"                     => mac del cpe ont
     *                                  "strMacWifi"                    => mac del wifi
     *                                  "strNombreCliente"              => nombre del cliente
     *                                  "strIdentificacion"             => identificacion del cliente
     *                                  "strIpCreacion"                 => ip de creación
     *                                  "strUsrCreacion"                => usuario de creación
     *                                  "strTieneIps"                   => SI o NO dependiendo si el servicio de Internet tiene ip dentro del plan
     *                                                                     o si el punto tiene ips adicionales 
     *                              ]
     * @return array $arrayRespuesta [
     *                                  "status"                    => OK o ERROR 
     *                                  "mensaje"                   => mensaje de error
     *                                  "arrayRespuestaMiddleware"  => respuesta del middleware
     *                                  "strScopeDestino"           => scope del servicio en el punto destino
     *                                  "arrayIpsActivar"           => arreglo de ip que se activarán 
     *                               ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 19-03-2019 - Se agregan validaciones para procesar traslados de servicios TelcoHome con diferente línea pon
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 11-05-2020 Se unifica las validaciones por marca y no por modelo de olt
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 15-11-2020 Se agregar programación para enviar nuevos parámetros al middleware en clientes PYME MD
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 11-11-2021 Se modifica función para obtener correctamente el arreglo $arrayDataConfirmacionTn necesario para la 
     *                         confirmación de transacciones de Tn a middleware
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.5 11-04-2022 Se agregan validaciones para procesar traslados en diferente tecnología
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.6 06-01-2023 Se setea variable calculoPotencia en N cuando se ejecute la activacion desde telcos web
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 1.7 18-03-2023 - Se agrega envio de prefijo empresa al llamar al middleware para activar servicios en Ecuanet.
     *
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.8 12-05-2023 - Se agrega inserLog para verificar si se ejecutan las peticiones a MIDDLEWARE
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.9 07-06-2023 - Se agrega validación NAF para comprobar si la serie se encuentra dispoble
     */
    public function trasladoDiferenteLineaPonFOMd($arrayParametros)
    {
        $arrayDataConfirmacionTn    = array();
        try
        {
            $objProductoInternet        = $arrayParametros["objProductoInternet"];
            $arrayProdIp                = $arrayParametros["arrayProdIp"];
            $strTipoNegocioPuntoDestino = $arrayParametros["strTipoNegocioPuntoDestino"];
            $objServicioOrigen          = $arrayParametros["objServicioOrigen"];
            $objServicioDestino         = $arrayParametros["objServicioDestino"];
            $objServicioTecnicoOrigen   = $arrayParametros["objServicioTecnicoOrigen"];
            $arrayServiciosPuntoOrigen  = $arrayParametros["arrayServiciosPuntoOrigen"];
            $arrayServiciosPuntoDestino = $arrayParametros["arrayServiciosPuntoDestino"];
            $objElementoOltOrigen       = $arrayParametros["objElementoOltOrigen"];
            $strModeloOltOrigen         = $arrayParametros["strModeloOltOrigen"];
            $strMarcaOltOrigen          = $arrayParametros["strMarcaOltOrigen"];
            $strMarcaOltDestino         = $arrayParametros["strMarcaOltDestino"];
            $objInterfaceOltOrigen      = $arrayParametros["objInterfaceOltOrigen"];
            $objElementoOltDestino      = $arrayParametros["objElementoOltDestino"];
            $strModeloOltDestino        = $arrayParametros["strModeloOltDestino"];
            $objInterfaceOltDestino     = $arrayParametros["objInterfaceOltDestino"];
            $objElementoCpeOntOrigen    = $arrayParametros["objElementoCpeOntOrigen"];
            $strSerieOntDestino         = $arrayParametros["strSerieOnt"];
            $strMacOntDestino           = $arrayParametros["strMacOnt"];
            $strModeloOntDestino        = $arrayParametros["strModeloOntDestino"];
            $strMacWifiDestino          = $arrayParametros["strMacWifi"];
            $strNombreCliente           = $arrayParametros["strNombreCliente"];
            $strIdentificacion          = $arrayParametros["strIdentificacion"];
            $strIpCreacion              = $arrayParametros["strIpCreacion"];
            $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
            $strTieneIps                = $arrayParametros["strTieneIps"];
            $strGestionarIpsMidd        = $arrayParametros["strGestionarIpsMidd"];
            $strTieneIpWan              = $arrayParametros["strTieneIpWan"];
            $arrayInfoIpWan             = $arrayParametros["arrayInfoIpWan"];
            $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
            $strNombreTecnicoProdPref   = $arrayParametros["strNombreTecnicoProdPref"] ? $arrayParametros["strNombreTecnicoProdPref"] : "";
            $strIndiceClienteOrigen     = "";
            $strSpidOrigen              = "";
            $strGemPortDestino          = "";
            $strVlanDestino             = "";
            $strLineProfileDestino      = "";
            $strTrafficTableDestino     = "";
            $strServiceProfileOrigen    = "";
            $strMensaje                 = "";
            $strIpPlanOrigen            = "";
            $strIpPlanDestino           = "";
            $arrayIpsActivar            = array();
            $arrayIpsCancelar           = array();
            $strScopeOrigen             = "";
            $strScopeDestino            = "";
            $intIpsAdicOrigen           = 0;
            $strCapacidad1Origen        = "";
            $strCapacidad2Origen        = "";
            $arrayInfoDifTecnologia     = null;
            $objSpcTrasladoDifTecnologia = $arrayParametros["objSpcTrasladoDifTecnologia"];
            $strSerieOntOrigen           = $arrayParametros["strSerieOntOrigen"];
            $strMacOntOrigen             = $arrayParametros["strMacOntOrigen"];
            
            //Se obtienen los parámetros para el envío al middleware
            $objSpcIndiceCliente    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                "INDICE CLIENTE", 
                                                                                                $objProductoInternet);
            if(is_object($objSpcIndiceCliente))
            {
                $strIndiceClienteOrigen = $objSpcIndiceCliente->getValor();
            }
            if ($strMarcaOltOrigen === $strMarcaOltDestino)
            {
                if($strMarcaOltOrigen === "HUAWEI")
                {
                    //OBTENER SERVICE-PORT
                    $objSpcSpidOrigen   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                    "SPID", 
                                                                                                    $objProductoInternet);
                    if(is_object($objSpcSpidOrigen))
                    {
                        $strSpidOrigen = $objSpcSpidOrigen->getValor();
                    }
    
                    //OBTENER GEM-PORT
                    $objSpcGemPortDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                        "GEM-PORT", 
                                                                                                        $objProductoInternet);
                    if(is_object($objSpcGemPortDestino))
                    {
                        $strGemPortDestino = $objSpcGemPortDestino->getValor();
                    }
    
                    //OBTENER VLAN
                    $objSpcVlanDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                    "VLAN", 
                                                                                                    $objProductoInternet);
                    if(is_object($objSpcVlanDestino))
                    {
                        $strVlanDestino = $objSpcVlanDestino->getValor();
                    }
                    
                    if($strTipoNegocioPuntoDestino === "PRO" && $strTieneIps === "SI")
                    {
                        $strVlanDestino = "302";
                    }
                    
                    //OBTENER LINE-PROFILE-NAME
                    $objSpcLineProfileDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                            "LINE-PROFILE-NAME", 
                                                                                                            $objProductoInternet);
                    if(is_object($objSpcLineProfileDestino))
                    {
                        $strLineProfileDestino  = $objSpcLineProfileDestino->getValor();
                    }
    
                    //OBTENER TRAFFIC-TABLE
                    $objSpcTrafficTableDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                            "TRAFFIC-TABLE", 
                                                                                                            $objProductoInternet);
                    if($objSpcTrafficTableDestino)
                    {
                        $strTrafficTableDestino = $objSpcTrafficTableDestino->getValor();
                    }
    
                    //OBTENER SERVICE-PROFILE
                    $objSpcServiceProfileOrigen = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                            "SERVICE-PROFILE", 
                                                                                                            $objProductoInternet);
                    if(!is_object($objSpcServiceProfileOrigen))
                    {
                        $strModeloCpeOntOrigen  = $objElementoCpeOntOrigen->getModeloElementoId()->getNombreModeloElemento();
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioOrigen, $objProductoInternet, 
                                                                                        "SERVICE-PROFILE", $strModeloCpeOntOrigen, 
                                                                                        $strUsrCreacion);
                        $strServiceProfileOrigen = $strModeloCpeOntOrigen;
                    }
                    else
                    {
                        $strServiceProfileOrigen = $objSpcServiceProfileOrigen->getValor();
                    }
                }
                else if($strMarcaOltOrigen === "TELLION")
                {
                    //OBTENER PERFIL
                    $objSpcLineProfileDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                            "PERFIL", 
                                                                                                            $objProductoInternet);
                    if(is_object($objSpcLineProfileDestino))
                    {
                        $strLineProfile         = $objSpcLineProfileDestino->getValor();
                        $arrayPerfil            = explode("_", $strLineProfile);
                        if($strNombreTecnicoProdPref === "TELCOHOME")
                        {
                            $strLineProfileDestino  = $arrayPerfil[0]."_".$arrayPerfil[1]."_".$arrayPerfil[2];
                        }
                        else
                        {
                            $strLineProfileDestino  = $arrayPerfil[0]."_".$arrayPerfil[1];
                        }
                    }
                }
                else if($strMarcaOltOrigen === "ZTE")
                {
                    //OBTENER SERVICE-PROFILE
                    $objSpcServiceProfileOrigen = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                            "SERVICE-PROFILE", 
                                                                                                            $objProductoInternet);
                    if(!is_object($objSpcServiceProfileOrigen))
                    {
                        $strModeloCpeOntOrigen  = $objElementoCpeOntOrigen->getModeloElementoId()->getNombreModeloElemento();
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioOrigen, $objProductoInternet, 
                                                                                        "SERVICE-PROFILE", $strModeloCpeOntOrigen, 
                                                                                        $strUsrCreacion);
                        $strServiceProfileOrigen = $strModeloCpeOntOrigen;
                    }
                    else
                    {
                        $strServiceProfileOrigen = $objSpcServiceProfileOrigen->getValor();
                    }
    
                    //OBTENER SERVICE-PORT
                    $objSpcSpidOrigen   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                    "SPID", 
                                                                                                    $objProductoInternet);
                    if(is_object($objSpcSpidOrigen))
                    {
                        $strSpidOrigen = $objSpcSpidOrigen->getValor();
                    }
    
                    //OBTENER CAPACIDAD1
                    $objCapacidad1Origen    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                        "CAPACIDAD1", 
                                                                                                        $objProductoInternet);
                    if(is_object($objCapacidad1Origen))
                    {
                        $strCapacidad1Origen = $objCapacidad1Origen->getValor();
                    }
    
                    //OBTENER CAPACIDAD2
                    $objCapacidad2Origen    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                        "CAPACIDAD2",
                                                                                                        $objProductoInternet);
                    if(is_object($objCapacidad2Origen))
                    {
                        $strCapacidad2Origen = $objCapacidad2Origen->getValor();
                    }
                }
                else
                {
                    throw new \Exception("Modelo del OLT no tiene Aprovisionamiento!");
                }
            }
            else
            {
                if (is_object($objSpcTrasladoDifTecnologia))
                {
                    $arrayInfoDifTecnologia['strSerieOntOrigen'] = $strSerieOntOrigen;
                    $arrayInfoDifTecnologia['strMacOntOrigen']   = $strMacOntOrigen;
                    if($strMarcaOltOrigen === "HUAWEI")
                    {
                        //OBTENER SERVICE-PORT
                        $objSpcSpidOrigen   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                        "SPID", 
                                                                                                        $objProductoInternet);
                        if(is_object($objSpcSpidOrigen))
                        {
                            $strSpidOrigen = $objSpcSpidOrigen->getValor();
                        }
    
                        //OBTENER GEM-PORT
                        $objSpcGemPortDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                            "GEM-PORT", 
                                                                                                            $objProductoInternet);
                        if(is_object($objSpcGemPortDestino))
                        {
                            $strGemPortDestino = $objSpcGemPortDestino->getValor();
                        }
    
                        //OBTENER VLAN
                        $objSpcVlanDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                        "VLAN", 
                                                                                                        $objProductoInternet);
                        if(is_object($objSpcVlanDestino))
                        {
                            $strVlanDestino = $objSpcVlanDestino->getValor();
                        }
                        
                        if($strTipoNegocioPuntoDestino === "PRO" && $strTieneIps === "SI")
                        {
                            $strVlanDestino = "302";
                        }
                        
                        //OBTENER LINE-PROFILE-NAME
                        $objSpcLineProfileDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                                "LINE-PROFILE-NAME", 
                                                                                                                $objProductoInternet);
                        if(is_object($objSpcLineProfileDestino))
                        {
                            $strLineProfileDestino  = $objSpcLineProfileDestino->getValor();
                        }
    
                        //OBTENER TRAFFIC-TABLE
                        $objSpcTrafficTableDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                                "TRAFFIC-TABLE", 
                                                                                                                $objProductoInternet);
                        if($objSpcTrafficTableDestino)
                        {
                            $strTrafficTableDestino = $objSpcTrafficTableDestino->getValor();
                        }
                    }
                    else if($strMarcaOltOrigen === "ZTE")
                    {
                        //OBTENER SERVICE-PORT
                        $objSpcSpidOrigen   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                        "SPID", 
                                                                                                        $objProductoInternet);
                        if(is_object($objSpcSpidOrigen))
                        {
                            $strSpidOrigen = $objSpcSpidOrigen->getValor();
                        }
    
                        //OBTENER CAPACIDAD1
                        $objCapacidad1Origen    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                            "CAPACIDAD1", 
                                                                                                            $objProductoInternet);
                        if(is_object($objCapacidad1Origen))
                        {
                            $strCapacidad1Origen = $objCapacidad1Origen->getValor();
                        }
    
                        //OBTENER CAPACIDAD2
                        $objCapacidad2Origen    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioOrigen, 
                                                                                                            "CAPACIDAD2",
                                                                                                            $objProductoInternet);
                        if(is_object($objCapacidad2Origen))
                        {
                            $strCapacidad2Origen = $objCapacidad2Origen->getValor();
                        }
                    }
                    $strServiceProfileOrigen = $strModeloOntDestino;
                    if($strMarcaOltDestino === "HUAWEI")
                    {
                        //OBTENER GEM-PORT
                        $objSpcGemPortDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                            "GEM-PORT", 
                                                                                                            $objProductoInternet);
                        if(is_object($objSpcGemPortDestino))
                        {
                            $strGemPortDestino = $objSpcGemPortDestino->getValor();
                        }
    
                        //OBTENER VLAN
                        $objSpcVlanDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                        "VLAN", 
                                                                                                        $objProductoInternet);
                        if(is_object($objSpcVlanDestino))
                        {
                            $strVlanDestino = $objSpcVlanDestino->getValor();
                        }
                        
                        if($strTipoNegocioPuntoDestino === "PRO" && $strTieneIps === "SI")
                        {
                            $strVlanDestino = "302";
                        }
                        
                        //OBTENER LINE-PROFILE-NAME
                        $objSpcLineProfileDestino   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                                "LINE-PROFILE-NAME", 
                                                                                                                $objProductoInternet);
                        if(is_object($objSpcLineProfileDestino))
                        {
                            $strLineProfileDestino  = $objSpcLineProfileDestino->getValor();
                        }
    
                        //OBTENER TRAFFIC-TABLE
                        $objSpcTrafficTableDestino  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                                "TRAFFIC-TABLE", 
                                                                                                                $objProductoInternet);
                        if($objSpcTrafficTableDestino)
                        {
                            $strTrafficTableDestino = $objSpcTrafficTableDestino->getValor();
                        }
    
                        
                    }
                    else if($strMarcaOltDestino === "ZTE")
                    {
                        //OBTENER CAPACIDAD1
                        $objCapacidad1Origen    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                            "CAPACIDAD1", 
                                                                                                            $objProductoInternet);
                        if(is_object($objCapacidad1Origen))
                        {
                            $strCapacidad1Origen = $objCapacidad1Origen->getValor();
                        }
    
                        //OBTENER CAPACIDAD2
                        $objCapacidad2Origen    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioDestino, 
                                                                                                            "CAPACIDAD2",
                                                                                                            $objProductoInternet);
                        if(is_object($objCapacidad2Origen))
                        {
                            $strCapacidad2Origen = $objCapacidad2Origen->getValor();
                        }
                    }
                }
            }

            if($strTieneIps === "SI")
            {
                $arrayRespuestaIpsTraslado  = $this->obtenerDatosIpsTrasladoMd(array(
                                                                                    "objProdIp"                     => $arrayProdIp[0],
                                                                                    "objServicioOrigen"             => $objServicioOrigen,
                                                                                    "objServicioTecnicoOrigen"      => $objServicioTecnicoOrigen,
                                                                                    "arrayServiciosPuntoOrigen"     => $arrayServiciosPuntoOrigen,
                                                                                    "arrayProdIp"                   => $arrayProdIp,
                                                                                    "objProductoInternet"           => $objProductoInternet,
                                                                                    "objServicioDestino"            => $objServicioDestino,
                                                                                    "objElementoOltDestino"         => $objElementoOltDestino,
                                                                                    "arrayServiciosPuntoDestino"    => $arrayServiciosPuntoDestino,
                                                                                    "strGestionarIpsMidd"           => $strGestionarIpsMidd,
                                                                                    "strTieneIpWan"                 => $strTieneIpWan
                                                                                    ));
                if(isset($arrayRespuestaIpsTraslado["status"]) && !empty($arrayRespuestaIpsTraslado["status"])
                    && ($arrayRespuestaIpsTraslado["status"] === "ERROR"))
                {
                    throw new \Exception($arrayRespuestaIpsTraslado["mensaje"]);
                }                
                $strIpPlanOrigen    = $strTieneIpWan === "SI" ? $arrayInfoIpWan['strIpFijaWanOrigen'] : $arrayRespuestaIpsTraslado["ipPlanOrigen"];
                $strIpPlanDestino   = $arrayRespuestaIpsTraslado["ipPlanDestino"];
                $arrayIpsActivar    = $arrayRespuestaIpsTraslado["ipsActivar"];
                $arrayIpsCancelar   = $arrayRespuestaIpsTraslado["ipsCancelar"];
                $strScopeOrigen     = $strTieneIpWan === "SI" ? $arrayInfoIpWan['strScopeWanOrigen'] : $arrayRespuestaIpsTraslado["scopeOrigen"];
                $strScopeDestino    = $arrayRespuestaIpsTraslado["scopeDestino"];
                $intIpsAdicOrigen   = $strTieneIpWan === "SI" ? 
                                      $arrayRespuestaIpsTraslado['numIpsActivasAdicOrigen'] - 1 :
                                      $arrayRespuestaIpsTraslado["numIpsActivasAdicOrigen"];
            }

            //Se obtiene la ip del olt anterior
            $objIpElementoOltOrigen = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("elementoId" => $objElementoOltOrigen->getId()));

            //obtener la ip del olt actual
            $objIpElementoOltDestino = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                               ->findOneBy(array("elementoId" => $objElementoOltDestino->getId()));

            if($strNombreTecnicoProdPref === "TELCOHOME")
            {
                $strTipoNegocioPuntoDestino = "HOME";
            }
            $arrayDatos = array(
                                    'serial_ont'            => $strSerieOntDestino,
                                    'mac_ont'               => $strMacOntDestino,
                                    'nombre_olt'            => $objElementoOltOrigen->getNombreElemento(),
                                    'ip_olt'                => $objIpElementoOltOrigen->getIp(),
                                    'puerto_olt'            => $objInterfaceOltOrigen->getNombreInterfaceElemento(),
                                    'modelo_olt'            => $strModeloOltOrigen,
                                    'gemport'               => $strGemPortDestino,
                                    'service_profile'       => $strServiceProfileOrigen,
                                    'line_profile'          => $strLineProfileDestino,
                                    'traffic_table'         => $strTrafficTableDestino,
                                    'ont_id'                => $strIndiceClienteOrigen,
                                    'service_port'          => $strSpidOrigen,
                                    'vlan'                  => $strVlanDestino,
                                    'estado_servicio'       => $objServicioTecnicoOrigen->getServicioId()->getEstado(),
                                    'ip'                    => $strIpPlanOrigen,
                                    'scope'                 => $strScopeOrigen,
                                    'estado_servicio_nuevo' => $objServicioDestino->getEstado(),
                                    'ip_olt_nuevo'          => $objIpElementoOltDestino->getIp(),
                                    'modelo_olt_nuevo'      => $strModeloOltDestino,
                                    'puerto_olt_nuevo'      => $objInterfaceOltDestino->getNombreInterfaceElemento(),
                                    'ip_fijas_activas'      => $intIpsAdicOrigen,
                                    'tipo_negocio_actual'   => $strTipoNegocioPuntoDestino,
                                    'mac_wifi'              => $strMacWifiDestino,
                                    'ip_nueva'              => $strIpPlanDestino,
                                    'scope_nuevo'           => $strScopeDestino,
                                    'ip_cancelar'           => $arrayIpsCancelar,
                                    'ip_activar'            => $arrayIpsActivar,
                                    'capacidad_up'          => $strCapacidad1Origen,
                                    'capacidad_down'        => $strCapacidad2Origen,
                                    'equipoOntDualBand'     => "",
                                    'tipoOrden'             => ""
                                );

            if(isset($arrayParametros['calculoPotencia']) && !empty($arrayParametros['calculoPotencia'])) 
            {
                $arrayDatos['calculoPotencia'] = $arrayParametros['calculoPotencia'];
            }else if(!isset($arrayParametros['calculoPotencia']) && 
                    $objIpElementoOltOrigen->getIp() == $objIpElementoOltDestino->getIp())
            {
                $arrayDatos['calculoPotencia'] = 'N';
            }

            if ($strPrefijoEmpresa === 'MD')
            {
                $arrayRespuestaSeteaInfo = $this->servicioGeneral
                                                ->seteaInformacionPlanesPyme(array("intIdPlan"         => $objServicioDestino->getPlanId()->getId(),
                                                                                   "intIdPunto"        => $objServicioOrigen->getPuntoId()->getId(),
                                                                                   "strConservarIp"    => "",
                                                                                   "strTipoNegocio"    => $strTipoNegocioPuntoDestino,
                                                                                   "strPrefijoEmpresa" => $strPrefijoEmpresa,
                                                                                   "strUsrCreacion"    => $strUsrCreacion,
                                                                                   "strIpCreacion"     => $strIpCreacion,
                                                                                   "strTipoProceso"    => "TRASLADAR_PLAN",
                                                                                   "arrayInformacion"  => $arrayDatos,
                                                                                   "arrayInfoDifTecnologia" => $arrayInfoDifTecnologia));
                if($arrayRespuestaSeteaInfo["strStatus"]  === "OK")
                {
                    $arrayDatos = $arrayRespuestaSeteaInfo["arrayInformacion"];
                }
                else
                {
                    throw new \Exception("Existieron problemas al recuperar información necesaria ".
                                         "para ejecutar proceso, favor notifique a Sistemas.");
                }
            }
            $strPrefijoEmp = ($strPrefijoEmpresa  == 'EN')? $strPrefijoEmpresa: null;
            $arrayDatosMiddleware = array(
                                            'nombre_cliente'        => $strNombreCliente,
                                            'login'                 => $objServicioDestino->getPuntoId()->getLogin(),
                                            'identificacion'        => $strIdentificacion,
                                            'datos'                 => $arrayDatos,
                                            'opcion'                => 'TRASLADAR',
                                            'ejecutaComando'        => $this->ejecutaComando,
                                            'usrCreacion'           => $strUsrCreacion,
                                            'ipCreacion'            => $strIpCreacion,
                                            'empresa'               => $strPrefijoEmp
                                        );
            // LOG 'TRASLADAR' ENVIO
            $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => 18,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => 'PROCESO ANTES DE LA PETICION',
                        'status'              => 'Envio',
                        'appAction'           => 'TRASLADAR_'.$objServicioDestino->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDatosMiddleware),
                        'creationUser'        => $strUsrCreacion));
            $strErrorLog = "Proceso: TrasladarServicioMD, Opción: TRASLADAR, Login: ".$objServicioDestino->getPuntoId()->getLogin()
                          .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$strUsrCreacion
                          .", Descripcion: PROCESO ANTES DE LA PETICION";
            error_log($strErrorLog);
            $arrayRespuestaMiddleware   = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
            // LOG 'TRASLADAR' RESPUESTA
            $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => 18,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => 'PROCESO DESPUES DE LA PETICION',
                        'status'              => 'Respuesta',
                        'appAction'           => 'TRASLADAR_'.$objServicioDestino->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayRespuestaMiddleware),
                        'creationUser'        => $strUsrCreacion));
            $strErrorLog = "Proceso: TrasladarServicioMD, Opción: TRASLADAR, Login: ".$objServicioDestino->getPuntoId()->getLogin()
                          .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$strUsrCreacion
                          .", Descripcion: PROCESO DESPUES DE LA PETICION";
            error_log($strErrorLog);
            $strStatus                  = "OK";
            $arrayDatosConfirmacionTn                           = $arrayDatos;
            $arrayDatosConfirmacionTn['opcion_confirmacion']    = 'TRASLADAR';
            $arrayDatosConfirmacionTn['respuesta_confirmacion'] = 'ERROR';
            $arrayDataConfirmacionTn    = array('nombre_cliente'    => $strNombreCliente,
                                                'login'             => $objServicioDestino->getPuntoId()->getLogin(),
                                                'identificacion'    => $strIdentificacion,
                                                'datos'             => $arrayDatosConfirmacionTn,
                                                'opcion'            => $this->strConfirmacionTNMiddleware,
                                                'ejecutaComando'    => $this->ejecutaComando,
                                                'usrCreacion'       => $strUsrCreacion,
                                                'ipCreacion'        => $strIpCreacion,
                                                'empresa'           => $strPrefijoEmpresa,
                                                'statusMiddleware'  => "ERROR");
            if ($strTieneIpWan === "SI")
            {
                $arrayIpsActivar[]   = array(
                                              'mac'           => $strMacOntDestino,
                                              'ip'            => $strIpPlanDestino,
                                              'id_servicio'   => $arrayInfoIpWan['intIdServicioIp'],
                                              'scope'         => $strScopeDestino
                                            );
            }
        } 
        catch (\Exception $e)
        {
            $strStatus          = "ERROR";
            $strMensaje         = $e->getMessage();
            // LOG 'TRASLADAR' ERROR
            $this->serviceUtil->insertLog(array(
                        'enterpriseCode'      => 18,
                        'logType'             => 1,
                        'logOrigin'           => 'TELCOS',
                        'application'         => 'TELCOS',
                        'appClass'            => basename(__CLASS__),
                        'appMethod'           => basename(__FUNCTION__),
                        'descriptionError'    => $strMensaje,
                        'status'              => 'ErrorTrasladar',
                        'appAction'           => 'TRASLADAR_'.$objServicioDestino->getPuntoId()->getLogin(),
                        'inParameters'        => json_encode($arrayDatosMiddleware),
                        'creationUser'        => $strUsrCreacion));
            $strErrorLog = "Proceso: TrasladarServicioMD, Opción: TRASLADAR, Login: ".$objServicioDestino->getPuntoId()->getLogin()
                          .", appClass: ".basename(__CLASS__).", appMethod: ".basename(__FUNCTION__). ", creationUser: ".$strUsrCreacion
                          .", Status : ".$strStatus.", Mensaje: ".$strMensaje;
            error_log($strErrorLog);
        }
           
        $arrayRespuesta = array("status"                    => $strStatus,
                                "mensaje"                   => $strMensaje,
                                "arrayRespuestaMiddleware"  => $arrayRespuestaMiddleware,
                                "arrayDataConfirmacionTn"   => $arrayDataConfirmacionTn,
                                "strScopeDestino"           => $strScopeDestino,
                                "arrayIpsActivar"           => $arrayIpsActivar,
                                "strIpDestino"              => $strIpPlanDestino,
                            );
        
        return $arrayRespuesta;
    }

    /**
     * Función que elimina la ip del plan del servicio en el punto origen en caso de existir, elimina las ips adicionales del punto origen,
     * elimina las características asociadas a cada servicio ip y traslada el servicio de ip adicional
     * También activa la ip del plan del servicio en el punto destino en caso de existir, crea y activa las ips adicionales en el punto destino,
     * clona las características de los servicios ips adicionales del punto origen y las asocia a cada nuevo servicio ip del punto destino,
     * actualiza la información técnica de cada servicio de ip adicional y finaliza la solicitud de planificación asociada a cada servicio 
     * ip adicional del punto destino
     * Además elimina la característica de traslado de cada servicio ip adicional del punto destino
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 22-02-2021  Se agregan validaciones para saber si el servicio tiene tipo de Ip Privada
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 07-07-2022  Se agregan validaciones para setear SCOPE de cada ip procesada
     * 
     * @param array $arrayParametros [
     *                                  "objServicioOrigen"         => objeto del servicio origen
     *                                  "objServicioDestino"        => objeto del servicio destino
     *                                  "arrayRespuestaMiddleware"  => arreglo de respuesta del middleware
     *                                  "strUsrCreacion"            => usuario de creación
     *                                  "strIpCreacion"             => ip de creación
     *                                  "objProductoInternet"       => objeto del producto Internet
     *                                  "strScopeDestino"           => scope del servicio del punto destino
     *                                  "arrayIpsActivar"           => arrelgo de ips que se activaron
     *                                  "objServicioTecnicoDestino" => objeto del servicio técnico del punto destino 
     *                               ]
     * @return array $arrayRespuestaFinal [
     *                                      "status"    => OK o ERROR
     *                                      "mensaje"   => mensaje de error  
     *                                    ]
     */
    public function cancelarActivarIpsTrasladoMd($arrayParametros) 
    {
        try
        {
            $objServicioOrigen          = $arrayParametros["objServicioOrigen"];
            $objServicioDestino         = $arrayParametros["objServicioDestino"];
            $arrayRespuestaMiddleware   = $arrayParametros["arrayRespuestaMiddleware"];
            $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
            $strIpCreacion              = $arrayParametros["strIpCreacion"];
            $objProductoInternet        = $arrayParametros["objProductoInternet"];
            $strScopeDestino            = $arrayParametros["strScopeDestino"];
            $arrayParamIpsActivarMidd   = $arrayParametros["arrayIpsActivar"];
            $objServicioTecnicoDestino  = $arrayParametros["objServicioTecnicoDestino"];
            $strMensaje                 = "";
            $strScopeDestinoItem        = "";
            
            $objTipoSolicitudPlanif     = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                            ->findOneBy(array(  'descripcionSolicitud'  => 'SOLICITUD PLANIFICACION',
                                                                                'estado'                => 'Activo'));
            $objCaractTraslado          = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica" => 'TRASLADO', "estado" => "Activo"));
            $objProdCaracTraslado       = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                            ->findOneBy(array(  "productoId"        => $objProductoInternet->getId(),
                                                                                "caracteristicaId"  => $objCaractTraslado->getId(),
                                                                                "estado"            => "Activo"));
            
            $strTipoIp = 'FIJA';
        
            //Obtiene tipo de ip por el servicio (PRIVADA)
            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId"  =>  $objServicioOrigen->getId(),
                                                                  "tipoIp"      =>  "PRIVADA",
                                                                  "estado"      =>  "Activo"));
            if (is_object($objTipoIp))
            {
                $strTipoIp = $objTipoIp->getTipoIp();
            }

            //Se elimina ip del plan del servicio origen
            $objIpFijaPlanOrigen    = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("servicioId"    => $objServicioOrigen->getId(),
                                                                                "tipoIp"        => $strTipoIp, 
                                                                                "estado"        => "Activo"));
            if(is_object($objIpFijaPlanOrigen))
            {
                $objIpFijaPlanOrigen->setEstado("Eliminado");
                $this->emInfraestructura->persist($objIpFijaPlanOrigen);
                $this->emInfraestructura->flush();
            }
            
            //Se eliminan ips adicionales del punto origen
            $arrayRespuestaIpsCancelar = $arrayRespuestaMiddleware['ip_cancelar'];
            foreach($arrayRespuestaIpsCancelar as $arrayRespuestaIpCancelar)
            {
                $strStatusIpCancelar = $arrayRespuestaIpCancelar['status'];
                if($strStatusIpCancelar === 'OK')
                {
                    $strTipoIp = 'FIJA';
        
                    //Obtiene tipo de ip por el servicio (PRIVADA)
                    $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                        ->findOneBy(array("servicioId"  =>  $arrayRespuestaIpCancelar['id_servicio'],
                                                                          "tipoIp"      =>  "PRIVADA",
                                                                          "estado"      =>  "Activo"));
                    if (is_object($objTipoIp))
                    {
                        $strTipoIp = $objTipoIp->getTipoIp();
                    }

                    //Se elimina ip adicional del punto origen
                    $objIpFijaAdicionalOrigen   = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                          ->findOneBy(array("servicioId"    => 
                                                                                            $arrayRespuestaIpCancelar['id_servicio'],
                                                                                            "tipoIp"        => $strTipoIp, 
                                                                                            "estado"        => "Activo"));
                    if(is_object($objIpFijaAdicionalOrigen))
                    {
                        $objIpFijaAdicionalOrigen->setEstado("Eliminado");
                        $this->emInfraestructura->persist($objIpFijaAdicionalOrigen);
                        $this->emInfraestructura->flush();
                        
                    }
                    
                    //Se actualiza el estado del servicio ip adicional del punto origen
                    $objServicioIpAdicionalOrigen   = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->find($arrayRespuestaIpCancelar['id_servicio']);
                    $objServicioIpAdicionalOrigen->setEstado('Trasladado');
                    $this->emComercial->persist($objServicioIpAdicionalOrigen);
                    $this->emComercial->flush();

                    $objServicioHistIpAdicionalOrigen = new InfoServicioHistorial();
                    $objServicioHistIpAdicionalOrigen->setServicioId($objServicioIpAdicionalOrigen);
                    $objServicioHistIpAdicionalOrigen->setIpCreacion($strIpCreacion);
                    $objServicioHistIpAdicionalOrigen->setFeCreacion(new \DateTime('now'));
                    $objServicioHistIpAdicionalOrigen->setUsrCreacion($strUsrCreacion);
                    $objServicioHistIpAdicionalOrigen->setEstado('Trasladado');
                    $objServicioHistIpAdicionalOrigen->setObservacion('Se traslado el servicio');
                    $this->emComercial->persist($objServicioHistIpAdicionalOrigen);
                    $this->emComercial->flush();
                }
                $strMensaje = $strMensaje . $arrayRespuestaIpCancelar['mensaje'];
            }
            
            $strTipoIp = 'FIJA';
        
            //Obtiene tipo de ip por el servicio (PRIVADA)
            $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                ->findOneBy(array("servicioId"  =>  $objServicioDestino->getId(),
                                                                  "tipoIp"      =>  "PRIVADA",
                                                                  "estado"      =>  "Reservada"));
            if (is_object($objTipoIp))
            {
                $strTipoIp = $objTipoIp->getTipoIp();
            }
            
            $objIpFijaPlanDestino   = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array("servicioId"    => $objServicioDestino->getId(),
                                                                                "tipoIp"        => $strTipoIp, 
                                                                                "estado"        => "Reservada"));
            if(is_object($objIpFijaPlanDestino))
            {
                $objIpFijaPlanDestino->setEstado("Activo");
                $this->emInfraestructura->persist($objIpFijaPlanDestino);
                $this->emInfraestructura->flush();
            }
            //Se activan ips adicionales del punto destino
            $arrayRespuestaIpsActivar = $arrayRespuestaMiddleware['ip_activar'];
            foreach($arrayRespuestaIpsActivar as $arrayRespuestaIpActivar)
            {
                $strMacAdicional     = '';
                $strScopeDestinoItem = '';
                $strStatusIpActivar = $arrayRespuestaIpActivar['status'];
                if($strStatusIpActivar === 'OK')
                {
                    $objServicioIpAdicionalDestino  = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->find($arrayRespuestaIpActivar['id_servicio']);
                    $objIpAdicionalDestino = new InfoIp();
                    $objIpAdicionalDestino->setIp($arrayRespuestaIpActivar['ip']);
                    $objIpAdicionalDestino->setServicioId($arrayRespuestaIpActivar['id_servicio']);
                    $objIpAdicionalDestino->setVersionIp("IPV4");
                    $objIpAdicionalDestino->setTipoIp($strTipoIp);
                    $objIpAdicionalDestino->setEstado("Activo");
                    $objIpAdicionalDestino->setUsrCreacion($strUsrCreacion);
                    $objIpAdicionalDestino->setFeCreacion(new \DateTime('now'));
                    $objIpAdicionalDestino->setIpCreacion($strIpCreacion);
                    $this->emInfraestructura->persist($objIpAdicionalDestino);
                    $this->emInfraestructura->flush();

                    foreach($arrayParamIpsActivarMidd as $arrayParamIpActivarMidd)
                    {
                        if($arrayParamIpActivarMidd['id_servicio'] == $arrayRespuestaIpActivar['id_servicio'])
                        {
                            $strMacAdicional     = $arrayParamIpActivarMidd['mac'];
                            $strScopeDestinoItem = $arrayParamIpActivarMidd['scope'];
                            break;
                        }
                    }

                    //Se graba el scope como característica de la nueva ip adicional
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioIpAdicionalDestino, 
                                                                                    $objServicioIpAdicionalDestino->getProductoId(), 
                                                                                    "SCOPE", 
                                                                                    $strScopeDestinoItem, 
                                                                                    $strUsrCreacion );

                    if(!empty($strMacAdicional))
                    {
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioIpAdicionalDestino, 
                                                                                        $objProductoInternet, 
                                                                                        "MAC", 
                                                                                        $strMacAdicional, 
                                                                                        $strUsrCreacion );
                    }
                    
                    /**
                     * Se actualiza la información técnica de las ips adicionales del punto destino con la información 
                     * del servicio técnico de Internet del punto destino
                     */
                    $objServicioTecnicoIpDestino = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneByServicioId($objServicioIpAdicionalDestino->getId());
                    if(!is_object($objServicioTecnicoIpDestino))
                    {                    
                        $objServicioTecnicoIpDestino = new InfoServicioTecnico();
                        $objServicioTecnicoIpDestino->setServicioId($objServicioIpAdicionalDestino);
                    }
                    $objServicioTecnicoIpDestino->setElementoId($objServicioTecnicoDestino->getElementoId());
                    $objServicioTecnicoIpDestino->setInterfaceElementoId($objServicioTecnicoDestino->getInterfaceElementoId());
                    $objServicioTecnicoIpDestino->setElementoContenedorId($objServicioTecnicoDestino->getElementoContenedorId());
                    $objServicioTecnicoIpDestino->setElementoConectorId($objServicioTecnicoDestino->getElementoConectorId());
                    $objServicioTecnicoIpDestino->setInterfaceElementoConectorId($objServicioTecnicoDestino->getInterfaceElementoConectorId());
                    $objServicioTecnicoIpDestino->setElementoClienteId(null);
                    $objServicioTecnicoIpDestino->setInterfaceElementoClienteId(null);
                    $objServicioTecnicoIpDestino->setUltimaMillaId($objServicioTecnicoDestino->getUltimaMillaId());
                    $this->emComercial->persist($objServicioTecnicoIpDestino);
                    $this->emComercial->flush();
                    
                    //Se elimina la característica de traslado del servicio de ip adicional del punto destino
                    $objServicioIpOrigen        = null;
                    $objSpcTrasladoServicioIp   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIpAdicionalDestino, 
                                                                                                            "TRASLADO", 
                                                                                                            $objProductoInternet);
                    if(is_object($objSpcTrasladoServicioIp))
                    {
                        $intIdServicioIpAdicionalOrigen = $objSpcTrasladoServicioIp->getValor();
                        $objServicioIpOrigen            = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                            ->find($intIdServicioIpAdicionalOrigen);
                        if(is_object($objServicioIpOrigen))
                        {
                            /**
                             * Se clonan las características de los servicios de ips adicionales del punto origen 
                             * a los servicios de ips adicionales del punto destino
                             * y se eliminan características del servicio ip adicional origen 
                             */
                            $arraySpcIpAdicionalOrigen  = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                            ->findBy(array( "servicioId"    => $objServicioIpOrigen->getId(),
                                                                                            "estado"        => "Activo"));
                            foreach($arraySpcIpAdicionalOrigen as $objSpcIpAdicionalOrigen)
                            {
                                $objSpcServicioIpDestino    = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                   ->findOneBy(array(   "servicioId"                => 
                                                                                        $objServicioIpAdicionalDestino->getId(),
                                                                                        "productoCaracterisiticaId" =>
                                                                                        $objSpcIpAdicionalOrigen->getProductoCaracterisiticaId(),
                                                                                        "estado"        => "Activo"));
                                if(!is_object($objSpcServicioIpDestino) 
                                    && $objProdCaracTraslado->getId() !== $objSpcIpAdicionalOrigen->getProductoCaracterisiticaId())
                                {
                                    $objSpcIpAdicionalDestino = new InfoServicioProdCaract();
                                    $objSpcIpAdicionalDestino = clone $objSpcIpAdicionalOrigen;
                                    $objSpcIpAdicionalDestino->setServicioId($objServicioIpAdicionalDestino->getId());
                                    $objSpcIpAdicionalDestino->setFeCreacion(new \DateTime('now'));
                                    $objSpcIpAdicionalDestino->setUsrCreacion($strUsrCreacion);
                                    $this->emComercial->persist($objSpcIpAdicionalDestino);
                                    $this->emComercial->flush();
                                }
                                $objSpcIpAdicionalOrigen->setEstado('Eliminado');
                                $objSpcIpAdicionalOrigen->setUsrUltMod($strUsrCreacion);
                                $objSpcIpAdicionalOrigen->setFeUltMod(new \DateTime('now'));
                                $this->emComercial->persist($objSpcIpAdicionalOrigen);
                                $this->emComercial->flush();
                            }
                        }
                        $objSpcTrasladoServicioIp->setEstado('Eliminado');
                        $objSpcTrasladoServicioIp->setUsrUltMod($strUsrCreacion);
                        $objSpcTrasladoServicioIp->setFeUltMod(new \DateTime('now'));
                        $this->emComercial->persist($objSpcTrasladoServicioIp);
                        $this->emComercial->flush();
                    }
                    
                    //Se finaliza la solicitud de planificación asociada al servicio ip
                    $objDetSolServicioIpDestino = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                    ->findOneBy(array(  'servicioId'      => $objServicioIpAdicionalDestino->getId(),
                                                                                        'tipoSolicitudId' => $objTipoSolicitudPlanif->getId()));
                    if(is_object($objDetSolServicioIpDestino))
                    {
                        $objDetSolServicioIpDestino->setEstado("Asignada");
                        $this->emComercial->persist($objDetSolServicioIpDestino);
                        $this->emComercial->flush();

                        $objDetalleSolHistIpAsignada = new InfoDetalleSolHist();
                        $objDetalleSolHistIpAsignada->setDetalleSolicitudId($objDetSolServicioIpDestino);
                        $objUltimoDetSolPlanifHist  = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolHist')
                                                                        ->findOneDetalleSolicitudHistorial( $objDetSolServicioIpDestino->getId(), 
                                                                                                            'Planificada');
                        if(is_object($objUltimoDetSolPlanifHist))
                        {
                            $objDetalleSolHistIpAsignada->setFeIniPlan($objUltimoDetSolPlanifHist->getFeIniPlan());
                            $objDetalleSolHistIpAsignada->setFeFinPlan($objUltimoDetSolPlanifHist->getFeFinPlan());
                            $objDetalleSolHistIpAsignada->setObservacion($objUltimoDetSolPlanifHist->getObservacion()
                                                                        . ' Se clonaron las ips: ' . $arrayRespuestaIpActivar['ip'] );
                        }
                        $objDetalleSolHistIpAsignada->setIpCreacion($strIpCreacion);
                        $objDetalleSolHistIpAsignada->setFeCreacion(new \DateTime('now'));
                        $objDetalleSolHistIpAsignada->setUsrCreacion($strUsrCreacion);
                        $objDetalleSolHistIpAsignada->setEstado('Asignada');
                        $this->emComercial->persist($objDetalleSolHistIpAsignada);
                        $this->emComercial->flush();

                        $objDetSolServicioIpDestino->setEstado("Finalizada");
                        $this->emComercial->persist($objDetSolServicioIpDestino);
                        $this->emComercial->flush();

                        //crear historial para la solicitud
                        $objDetalleSolHistIpFinalizada = new InfoDetalleSolHist();
                        $objDetalleSolHistIpFinalizada->setDetalleSolicitudId($objDetSolServicioIpDestino);
                        $objDetalleSolHistIpFinalizada->setEstado("Finalizada");
                        $objDetalleSolHistIpFinalizada->setObservacion("Cliente instalado");
                        $objDetalleSolHistIpFinalizada->setUsrCreacion($strUsrCreacion);
                        $objDetalleSolHistIpFinalizada->setFeCreacion(new \DateTime('now'));
                        $objDetalleSolHistIpFinalizada->setIpCreacion($strIpCreacion);
                        $this->emComercial->persist($objDetalleSolHistIpFinalizada);
                        $this->emComercial->flush();
                    }
                    
                    //Se actualiza el estado del servicio ip adicional del punto dentino
                    $objServicioIpAdicionalDestino->setEstado("Activo");
                    $this->emComercial->persist($objServicioIpAdicionalDestino);
                    $this->emComercial->flush();
                    
                    $objServicioHistIpAdicionalDestino = new InfoServicioHistorial();
                    $objServicioHistIpAdicionalDestino->setServicioId($objServicioIpAdicionalDestino);
                    $objServicioHistIpAdicionalDestino->setIpCreacion($strIpCreacion);
                    $objServicioHistIpAdicionalDestino->setFeCreacion(new \DateTime('now'));
                    $objServicioHistIpAdicionalDestino->setUsrCreacion($strUsrCreacion);
                    $objServicioHistIpAdicionalDestino->setEstado('Activo');
                    //se agrega codigo para llevar rastro de la ip asignada por el sistema Telcos
                    $objServicioHistIpAdicionalDestino->setObservacion( 'Se utilizaron los mismos recursos de red del servicio trasladado,  ' .
                                                                        'al ser un servicio de IP paso a estado Activo directamente ' .
                                                                        $arrayRespuestaIpActivar['ip']);
                    $this->emComercial->persist($objServicioHistIpAdicionalDestino);
                    $this->emComercial->flush();
                }
                $strMensaje = $strMensaje . $arrayRespuestaIpActivar['mensaje'];
            }
            $strStatus  = "OK";
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuestaFinal = array("status"   => $strStatus,
                                     "mensaje"  => $strMensaje);
        return $arrayRespuestaFinal;
    }
    
    /**
     * Funcion encargada de armar el request y consumir el web service usado para el enrutamiento de productos GPON
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 27-05-2021
     *
     * @param $arrayParametros: [ objServicio           => objeto del servicio,
     *                            intIdEmpresa          => ip de creacion,
     *                            strPrefijoEmpresa     => codigo de la empresa,
     *                            strUsrCreacion        => usuario de creacion,
     *                            strIpCreacion         => prefijo de la empresa,
     *
     * @return $arrayRespuesta  => [ strStatus  => OK u ERROR
     *                               strMensaje => mensaje de respuesta ]
     */
    public function llamadaWsEnrutamientoGPON($arrayParametros)
    {
        $strPrefijoEmpresa      = $arrayParametros["strPrefijoEmpresa"];        
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $strIpCreacion          = $arrayParametros["strIpCreacion"];        
                
        $strTipoEnrutamiento    = $arrayParametros["strTipoEnrutamiento"];        
        $strOpcion              = $arrayParametros["strOpcion"];
        $objServicio            = $arrayParametros["objServicio"];
        $objProducto            = $arrayParametros["objProducto"];
        $strIpOlt               = $arrayParametros["strIpOlt"];
        $strModulo              = $arrayParametros["strModulo"];
        $strOpcionEnrutamiento  = $arrayParametros["strOpcionEnrutamiento"];
        $strAccion              = $arrayParametros["strAccion"];
        $strVrf                 = $arrayParametros["strVrf"];
        
        //Dinamico
        $strIpBgp               = $arrayParametros["strIpBGP"];
        $strAsPrivado           = $arrayParametros["strAsPrivado"];
        $strGateway             = $arrayParametros["strGateway"];
        $strNombreSessionBgp    = $arrayParametros["strNombreSesionBgp"];
        $strDefaultGW           = $arrayParametros["strDefaultGw"];
        $strProtocolo           = $arrayParametros["strProtocolo"];
        $strTipoEnlace          = $arrayParametros["strTipoEnlace"];
        $strBanderaBravco       = $arrayParametros["strBanderaBravco"];
        $strRazonSocial         = $arrayParametros["strRazonSocial"];  
        
        //Estatico         
        $strNameRoute           = $arrayParametros["strNameRoute"];                  
        $strNetLan              = $arrayParametros["strNetLan"]; 
        $strMaskLan             = $arrayParametros["strMaskLan"];
        $strIpDestino           = $arrayParametros["strIpDestino"];
        $strDistanceAdmin       = $arrayParametros["strDistanceAdmin"];
        
        $strIdentificacion      = "";
        $strNombreCliente       = "";
        $strStatus              = "";
        $strMensaje             = "";
        $strLogin               = "";
        $strLoginAux            = "";
        $strNombreTecnico       = "";        
                
        try
        {      
            if(is_object($objServicio) && is_object($objProducto))
            {
                $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                              ->find($objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
                if(is_object($objInfoPersonaEmpresaRol))
                {
                    $strIdentificacion = $objInfoPersonaEmpresaRol->getPersonaId()->getIdentificacionCliente();
                    $strNombreCliente  = $objInfoPersonaEmpresaRol->getPersonaId()->__toString();
                }                
                
                $strLogin         = $objServicio->getPuntoId()->getLogin();     
                $strLoginAux      = $objServicio->getLoginAux();
                $strNombreTecnico = $objProducto->getNombreTecnico();                               
            }
            
            // ------------------------------------------------------------------------------------
            // call al WebService RDA Middleware
            // ------------------------------------------------------------------------------------
            $arrayParametrosDatos                        = array();
            $arrayParametrosDatos['ip_olt']              = $strIpOlt;
            $arrayParametrosDatos['modulo']              = $strModulo;
            $arrayParametrosDatos['bandEjecuta']         = $this->rdaBandEjecuta;
            $arrayParametrosDatos['opcion_enrutamiento'] = $strOpcionEnrutamiento;
            $arrayParametrosDatos['accion']              = $strAccion;
            $arrayParametrosDatos['servicio']            = $strNombreTecnico;
            $arrayParametrosDatos['vrf']                 = $strVrf;
            
            if($strTipoEnrutamiento == "DINAMICO")
            {            
                $arrayParametrosDatos['ip_bgp']            = $strIpBgp;
                $arrayParametrosDatos['asprivado']         = $strAsPrivado;               
                $arrayParametrosDatos['gateway']           = $strGateway;
                $arrayParametrosDatos['nombre_sesion_bgp'] = $strNombreSessionBgp;
                $arrayParametrosDatos['default_gw']        = $strDefaultGW;
                $arrayParametrosDatos['protocolo']         = $strProtocolo;
                $arrayParametrosDatos['tipo_enlace']       = $strTipoEnlace;
                $arrayParametrosDatos['banderaBravco']     = $strBanderaBravco;
                $arrayParametrosDatos['razon_social']      = $strRazonSocial; 
            }

            if($strTipoEnrutamiento == "ESTATICO")
            {            
                $arrayParametrosDatos['name_route']     = $strNameRoute;
                $arrayParametrosDatos['net_lan']        = $strNetLan;               
                $arrayParametrosDatos['mask_lan']       = $strMaskLan;
                $arrayParametrosDatos['ip_destino']     = $strIpDestino;
                $arrayParametrosDatos['distance_admin'] = $strDistanceAdmin;
            }            
            
            $arrayParametrosDatos['login_aux']           = $strLoginAux;                       
            
            $arrayDatosMiddleware = array('nombre_cliente'       => $strNombreCliente,
                                          'login'                => $strLogin,
                                          'identificacion'       => $strIdentificacion,
                                          'datos'                => $arrayParametrosDatos,
                                          'opcion'               => $strOpcion,
                                          'ejecutaComando'       => $this->ejecutaComando,
                                          'usrCreacion'          => $strUsrCreacion,
                                          'ipCreacion'           => $strIpCreacion,
                                          'comandoConfiguracion' => $this->ejecutaComando,
                                          'empresa'              => $strPrefijoEmpresa,
            );
            //se ejecuta ws de RDA
            $arrayRespuesta = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
            
            $strStatus      = $arrayRespuesta['status'];
            $strMensaje     = $arrayRespuesta['mensaje'];               
        }
        catch(\Exception $ex)
        {            
            $strStatus      = "ERROR";
            $strMensaje     = "ERROR";
        }
        
        $arrayRespuesta["strStatus"]  = $strStatus;
        $arrayRespuesta["strMensaje"] = $strMensaje;
        
        return $arrayRespuesta;
    }       
    
    
    
    /**
     * Funcion encargada de armar el request y consumir el web service usado para la activacion de la SAFE VIDEO ANALYTICS CAM
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 25-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 18-10-2021 - Se agrega las validación para la activación de los servicios WIFI
     * 
     * @author Jenniffer Mujica <jmujica@telconet.ec>
     * @version 1.2 05-02-2023 - Se agrega validación por activación de servicios GPON_MPLS con olt zte 
     *
     * @param $arrayParametros: [
     *                            booleanActivarOnt     => para servicios SAFE VIDEO ANALYTICS CAM si se activan en el ONT
     *                            strEsCamaraSafeCity   => bandera que identifica si es un servicio SAFE VIDEO ANALYTICS CAM
     *                            strEsWifiSafecity     => bandera que identifica si es un servicio WIFI GPON
     *                            objServicio           => objeto del servicio,
     *                            intIdOnt              => id del ONT registro en Telcos,
     *                            strSerieOnt           => serie del ONT del producto DATOS SAFECITY, 
     *                            strMacOnt             => mac del ONT,
     *                            strModeloOnt          => modelo del ONT,
     *                            strPuertoOnt          => puerto del ONT donde va conectada la camara
     *                            strTieneCpe           => bandera usada para identificar si tiene CPE
     *                            strVlan               => vlan asignada,
     *                            strVrf                => vrf asignada,
     *                            strIpServicio         => ip asinado para el servicio,
     *                            strSubredServicio     => subred del servicio,
     *                            strGatewayServicio    => gateway de la subred del servcio,
     *                            strNombreParametroRda => nombre del parametro,
     *                            intIdEmpresa          => ip de creacion,
     *                            strPrefijoEmpresa     => codigo de la empresa,
     *                            strUsrCreacion        => usuario de creacion,
     *                            strIpCreacion         => prefijo de la empresa
     *                          ]
     *
     * @return $arrayRespuesta  => [ strStatus  => OK u ERROR
     *                               strMensaje => mensaje de respuesta ]
     */
    public function llamadaWsActivarProductosGPON($arrayParametros)
    {
        $strIdentificacion      = "";
        $strNombreCliente       = "";
        $booleanActivarOnt      = isset($arrayParametros["booleanActivarOnt"]) ? $arrayParametros["booleanActivarOnt"] : true;
        $strEsCamaraSafeCity    = $arrayParametros["strEsCamaraSafeCity"];
        $strEsWifiSafecity      = $arrayParametros["strEsWifiSafecity"];
        $objServicio            = $arrayParametros["objServicio"];
        $intIdOnt               = $arrayParametros["intIdOnt"];
        $strSerieOnt            = $arrayParametros["strSerieOnt"];
        $strMacOnt              = $arrayParametros["strMacOnt"];
        $strModeloOnt           = $arrayParametros["strModeloOnt"];
        $strPuertoOnt           = $arrayParametros["strPuertoOnt"];
        $strTieneCpe            = $arrayParametros["strTieneCpe"];
        $strVlan                = $arrayParametros["strVlan"];
        $strVrfServicio         = $arrayParametros['strVrf'];
        $strVlanAdmin           = $arrayParametros["strVlanAdmin"];
        $strVrfAdmin            = $arrayParametros['strVrfAdmin'];
        $strIpServicio          = $arrayParametros["strIpServicio"]; 
        $strSubredServicio      = $arrayParametros["strSubredServicio"]; 
        $strGatewayServicio     = $arrayParametros["strGatewayServicio"];          
        $strNombreParametroRda  = $arrayParametros["strNombreParametroRda"];
        $intIdEmpresa           = $arrayParametros["intIdEmpresa"]; 
        $strPrefijoEmpresa      = $arrayParametros["strPrefijoEmpresa"];
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $strIpCreacion          = $arrayParametros["strIpCreacion"];
        
        try
        {
            //obtengo el punto
            $objPunto               = $objServicio->getPuntoId();
            //obtengo la persona empresa rol
            $objInfoPersonaEmpresaRol   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($objPunto->getPersonaEmpresaRolId()->getId());
            if(is_object($objInfoPersonaEmpresaRol))
            {
                $strIdentificacion = $objInfoPersonaEmpresaRol->getPersonaId()->getIdentificacionCliente();
                $strNombreCliente  = $objInfoPersonaEmpresaRol->getPersonaId()->__toString();
            }
            //obtengo el producto
            $objProducto            = $objServicio->getProductoId();
            //obtengo el servicio tecnico
            $objServicioTecnico     = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                   ->findOneByServicioId($objServicio->getId());
            //obtengo la interface elemento
            $objInterfaceElemento   = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoId());
            //obtengo el elemento
            $objElemento            = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                    ->find($objServicioTecnico->getElementoId());
            //marca del olt
            $strMarcaElemento       = $objElemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();

            //obtengo la ip del elemento
            $objInfoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId" => $objElemento->getId(),
                                                                                                         "estado"     => "Activo"));
            if(is_object($objInfoIp))
            {
                $strIpOlt   = $objInfoIp->getIp();
            }
            else
            {
                throw new \Exception("No se encontró la Ip del elemento ".$objElemento->getNombreElemento()." para tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }

            //verifico si están vacía la subred
            if($strEsWifiSafecity != "S" && (empty($strIpServicio) || empty($strSubredServicio) || empty($strGatewayServicio)) )
            {
                $strEstadoIpServicio = "Activo";
                if($strEsCamaraSafeCity == "S")
                {
                    $strEstadoIpServicio = "Reservada";
                }
                //obtengo la ip del servicio
                $objIpServicio  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                        ->findOneBy(array("servicioId" => $objServicio->getId(),
                                                                          "estado"     => $strEstadoIpServicio));
                if(is_object($objIpServicio))
                {
                    $strIpServicio = $objIpServicio->getIp();
                    $objSubredSer  = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objIpServicio->getSubredId());
                    if(is_object($objSubredSer))
                    {
                        $strSubredServicio  = $objSubredSer->getSubred();
                        $strGatewayServicio = $objSubredSer->getGateway();
                    }
                }
            }
            //verificar si el servicio es WIFI
            $strSubredAdminServicio  = "";
            $strGatewayAdminServicio = "";
            if($strEsWifiSafecity == "S")
            {
                $strUsoSubredSsidServicio  = "";
                $strUsoSubredAdminServicio = "";
                $strMascaraSubred          = "";
                $strEstadoSubredServicio   = "Activo";
                $arrayParUsoSubredWifi     = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne("NUEVA_RED_GPON_TN",
                                                                    "COMERCIAL",
                                                                    "",
                                                                    "PARAMETRO USO SUBRED PARA SERVICIOS ADICIONALES SAFECITY",
                                                                    $objProducto->getId(),
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "");
                if(isset($arrayParUsoSubredWifi) && !empty($arrayParUsoSubredWifi)
                   && isset($arrayParUsoSubredWifi['valor2']) && !empty($arrayParUsoSubredWifi['valor2'])
                   && isset($arrayParUsoSubredWifi['valor3']) && !empty($arrayParUsoSubredWifi['valor3']))
                {
                    $strUsoSubredSsidServicio  = $arrayParUsoSubredWifi['valor2'];
                    $strUsoSubredAdminServicio = $arrayParUsoSubredWifi['valor3'];
                    $strMascaraSubred          = $arrayParUsoSubredWifi['valor4'];
                    $strEstadoSubredServicio   = $arrayParUsoSubredWifi['valor5'] ? $arrayParUsoSubredWifi['valor5'] : "Activo";
                }
                else
                {
                    throw new \Exception("No se ha podido obtener el uso de subred del producto ".$objProducto->getDescripcionProducto().
                                         ", por favor notificar a Sistemas.");
                }
                //obtengo la subred ssid
                $objSubredSsidServicio = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                        ->findOneBy(array("elementoId" => $objElemento->getId(),
                                                                          "uso"        => $strUsoSubredSsidServicio,
                                                                          "mascara"    => $strMascaraSubred,
                                                                          "estado"     => $strEstadoSubredServicio));
                if(is_object($objSubredSsidServicio))
                {
                    $strSubredServicio  = $objSubredSsidServicio->getSubred();
                    $strGatewayServicio = $objSubredSsidServicio->getGateway();
                }
                //obtengo la subred admin
                $objSubredAdminServicio = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                        ->findOneBy(array("elementoId" => $objElemento->getId(),
                                                                          "uso"        => $strUsoSubredAdminServicio,
                                                                          "mascara"    => $strMascaraSubred,
                                                                          "estado"     => $strEstadoSubredServicio));
                if(is_object($objSubredAdminServicio))
                {
                    $strSubredAdminServicio  = $objSubredAdminServicio->getSubred();
                    $strGatewayAdminServicio = $objSubredAdminServicio->getGateway();
                }
            }

            //obtengo la vrf del servicio
            $strTipoCaractVrf = "VRF";
            if($strEsWifiSafecity == "S")
            {
                $strTipoCaractVrf = "VRF SSID";
            }
            $objServProdCaractVrf   = $this->servicioGeneral
                                              ->getServicioProductoCaracteristica($objServicio,$strTipoCaractVrf,$objServicio->getProductoId());
            if(!is_object($objServProdCaractVrf))
            {
                throw new \Exception("No se encontró la $strTipoCaractVrf en la característica del servicio, por favor notificar a Sistemas.");
            }
            $objVrfServicio         = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                        ->find($objServProdCaractVrf->getValor());
            if(!is_object($objVrfServicio))
            {
                throw new \Exception("No se encontró la $strTipoCaractVrf en la característica del cliente, por favor notificar a Sistemas.");
            }
            //verifico si está vacía la vrf
            if(empty($strVrfServicio))
            {
                $strVrfServicio = $objVrfServicio->getValor();
            }
            //obtener vrf admin del servicio
            $objVrfAdminServicio = null;
            if($strEsWifiSafecity == "S")
            {
                $objServProdCaractVrfAdmin = $this->servicioGeneral
                                             ->getServicioProductoCaracteristica($objServicio,"VRF ADMIN",$objServicio->getProductoId());
                if(!is_object($objServProdCaractVrfAdmin))
                {
                    throw new \Exception("No se encontró la VRF ADMIN en la característica del servicio, por favor notificar a Sistemas.");
                }
                $objVrfAdminServicio       = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                          ->find($objServProdCaractVrfAdmin->getValor());
                if(!is_object($objVrfAdminServicio))
                {
                    throw new \Exception("No se encontró la VRF ADMIN en la característica del cliente, por favor notificar a Sistemas.");
                }
                //verifico si está vacía la vrf
                if(empty($strVrfAdmin))
                {
                    $strVrfAdmin = $objVrfAdminServicio->getValor();
                }
            }

            //verifico si está vacía la vlan
            if(empty($strVlan))
            {
                $strTipoCaractVlan = "VLAN";
                if($strEsWifiSafecity == "S")
                {
                    $strTipoCaractVlan = "VLAN SSID";
                }
                //obtengo la vlan del servicio
                $objServProdCaractVlan      = $this->servicioGeneral
                                                  ->getServicioProductoCaracteristica($objServicio,$strTipoCaractVlan,$objServicio->getProductoId());
                if(!is_object($objServProdCaractVlan))
                {
                    throw new \Exception("No se encontró la $strTipoCaractVlan en la característica del servicio, por favor notificar a Sistemas.");
                }
                //verificar producto
                if($objProducto->getNombreTecnico() === "L3MPLS")
                {
                    $objServProdCaractVlan  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                            ->find($objServProdCaractVlan->getValor());
                    if(!is_object($objServProdCaractVlan))
                    {
                        throw new \Exception("No se encontró la VLAN en la característica del cliente, por favor notificar a Sistemas.");
                    }
                }
                $objDetalleVlanServicio     = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                            ->find($objServProdCaractVlan->getValor());
                if(is_object($objDetalleVlanServicio))
                {
                    $strVlan = $objDetalleVlanServicio->getDetalleValor();
                }
                else
                {
                    throw new \Exception("No se encontró la $strTipoCaractVlan del cliente en el detalle del elemento, ".
                                         "por favor notificar a Sistemas.");
                }
            }
            //obtener vlan admin del servicio
            if($strEsWifiSafecity == "S" && empty($strVlanAdmin))
            {
                //obtengo la vlan del servicio
                $objServProdCaractVlan      = $this->servicioGeneral
                                                  ->getServicioProductoCaracteristica($objServicio,'VLAN ADMIN',$objServicio->getProductoId());
                if(!is_object($objServProdCaractVlan))
                {
                    throw new \Exception("No se encontró la VLAN ADMIN en la característica del servicio, por favor notificar a Sistemas.");
                }
                $objDetalleVlanServicio     = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                            ->find($objServProdCaractVlan->getValor());
                if(is_object($objDetalleVlanServicio))
                {
                    $strVlanAdmin = $objDetalleVlanServicio->getDetalleValor();
                }
                else
                {
                    throw new \Exception("No se encontró la VLAN ADMIN del cliente en el detalle del elemento, por favor notificar a Sistemas.");
                }
            }

            //obtengo la capacidad del servicio
            $objServProdCaractCapacidad = $this->servicioGeneral
                                              ->getServicioProductoCaracteristica($objServicio,'VELOCIDAD_GPON',$objServicio->getProductoId());
            if(!is_object($objServProdCaractCapacidad))
            {
                throw new \Exception("No se encontró la velocidad GPON en la característica del servicio, por favor notificar a Sistemas.");
            }
            $strCapacidadServicio = $objServProdCaractCapacidad->getValor();

            //opción para la activación
            $strOpcionActivar                             = "";
            //arreglos de parametros
            $arrayParametrosDatos                         = array();
            $arrayDatosActivar                            = array();
            $arrayDatosAdminActivar                       = array();
            $arrayDatosNetworking                         = array();
            $arrayDatosAdminNetworking                    = array();
            $arrayParametrosDatos['login_aux']            = $objServicio->getLoginAux();
            $arrayParametrosDatos['serial_ont']           = $strSerieOnt;
            $arrayParametrosDatos['mac_ont']              = $strMacOnt;
            $arrayParametrosDatos['ont_id']               = $intIdOnt;
            $arrayParametrosDatos['nombre_olt']           = $objElemento->getNombreElemento();
            $arrayParametrosDatos['ip_olt']               = $strIpOlt;
            $arrayParametrosDatos['puerto_olt']           = $objInterfaceElemento->getNombreInterfaceElemento();
            $arrayParametrosDatos['modelo_olt']           = $objElemento->getModeloElementoId()->getNombreModeloElemento();
            $arrayParametrosDatos['estado_servicio']      = $objServicio->getEstado();
            $arrayParametrosDatos['tiene_cpe']            = $strTieneCpe;
            $arrayParametrosDatos['puerto_ethernet']      = preg_replace('/[^0-9]/', '', $strPuertoOnt);
            if($objProducto->getNombreTecnico() === 'SAFECITYWIFI')
            {
                $arrayParametrosDatos['numero_datos_activar'] = 2;
                $arrayParametrosDatos['vlan_ethernet']        = $strVlanAdmin;
            }
            else
            {
                $arrayParametrosDatos['numero_datos_activar'] = 1;
                $arrayParametrosDatos['vlan_ethernet']        = $strVlan;
            }
            //obtengo el service-profile
            $objDetalleServiceProfileNameOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                       ->findOneBy(array("detalleNombre" => "SERVICE-PROFILE-NAME",
                                                                         "detalleValor"  => $strModeloOnt,
                                                                         "elementoId"    => $objElemento->getId()));
            if(is_object($objDetalleServiceProfileNameOlt))
            {
                $strFormatoServiceProfile     = $strModeloOnt;
                //parametro modelo service profile
                $arrayParametroServiceProfile = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne("NUEVA_RED_GPON_TN",
                                                                        "COMERCIAL",
                                                                        "",
                                                                        "REEMPLAZAR_FORMATO_SERVICE_PROFILE",
                                                                        $strModeloOnt,
                                                                        "",
                                                                        "",
                                                                        "",
                                                                        "",
                                                                        $intIdEmpresa);
                if(!isset($arrayParametroServiceProfile) || empty($arrayParametroServiceProfile))
                {
                    //parametro general service profile
                    $arrayParametroServiceProfile = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne("NUEVA_RED_GPON_TN",
                                                                            "COMERCIAL",
                                                                            "",
                                                                            "REEMPLAZAR_FORMATO_SERVICE_PROFILE",
                                                                            "FORMATO_GENERAL",
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            $intIdEmpresa);
                }
                //verificar parametro
                if(isset($arrayParametroServiceProfile) && !empty($arrayParametroServiceProfile) && isset($arrayParametroServiceProfile['valor2']))
                {
                    $strFormatoServiceProfile = $arrayParametroServiceProfile['valor2'];
                }
                $arrayParametrosDatos['service_profile'] = str_replace("XXXXX", $strModeloOnt, $strFormatoServiceProfile);
            }
            else
            {
                throw new \Exception("No se encontró el SERVICE-PROFILE-NAME en el elemento ".$objElemento->getNombreElemento().
                                     " con el modelo Ont ".$strModeloOnt." para tipo de red GPON, por favor notificar a Sistemas.");
            }
            //parametros configuración rda
            $intTContInicial        = "";
            $intTContAdmin          = "";
            $intTContFinal          = "";
            $arrayParametrosConfRda = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne("NUEVA_RED_GPON_TN",
                                                                                                           "COMERCIAL",
                                                                                                           "",
                                                                                                           $strNombreParametroRda,
                                                                                                           "CONFIG_RDA",
                                                                                                           "",
                                                                                                           "",
                                                                                                           "",
                                                                                                           "",
                                                                                                           $intIdEmpresa);
            if(isset($arrayParametrosConfRda['valor2']) && !empty($arrayParametrosConfRda['valor2'])
               && !empty($arrayParametrosConfRda['valor3']) && !empty($arrayParametrosConfRda['valor4'])
               && !empty($arrayParametrosConfRda['valor6']) && !empty($arrayParametrosConfRda['valor7']))
            {
                //seteo la opcion de activacion
                if($objProducto->getNombreTecnico() === "L3MPLS" || $objProducto->getNombreTecnico() === 'SAFECITYDATOS'
                   || $objProducto->getNombreTecnico() === 'SAFECITYWIFI')
                {
                    $strOpcionActivar   = $arrayParametrosConfRda['valor3'];
                }
                else
                {
                    $strOpcionActivar   = $arrayParametrosConfRda['valor2'];
                }
                //seteo el tipo negocio
                $arrayParametrosDatos['tipo_negocio_actual'] = $arrayParametrosConfRda['valor4'];
                //seteo el puerto ethernet
                if(empty($arrayParametrosDatos['puerto_ethernet']) && isset($arrayParametrosConfRda['valor5'])
                   && $arrayParametrosConfRda['valor5'] != null)
                {
                    $arrayParametrosDatos['puerto_ethernet'] = $arrayParametrosConfRda['valor5'];
                }
                //seteo el rango de t cont de los servicios
                $intTContInicial = $arrayParametrosConfRda['valor6'];
                $intTContAdmin   = $intTContInicial + 1;
                $intTContFinal   = $arrayParametrosConfRda['valor7'];
            }
            else
            {
                throw new \Exception("No se encontró los datos de configuración RDA para tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //parametros rda monitoreo
            $arrayParametrosRdaMonitoreo = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne("NUEVA_RED_GPON_TN",
                                                                                                           "COMERCIAL",
                                                                                                           "",
                                                                                                           $strNombreParametroRda,
                                                                                                           "ACTIVAR_MONITOREO",
                                                                                                           "",
                                                                                                           "",
                                                                                                           "",
                                                                                                           "",
                                                                                                           $intIdEmpresa);
            if(isset($arrayParametrosRdaMonitoreo['valor1']) && !empty($arrayParametrosRdaMonitoreo['valor1']))
            {
                //parametro para traffic-table del servicio
                $arrayParametrosTraffic = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne("MAPEO_VELOCIDAD_TRAFFIC_TABLE_GPON",
                                                                        "TECNICO",
                                                                        "",
                                                                        "MAPEO_VELOCIDAD_TRAFFIC_TABLE_GPON",
                                                                        $arrayParametrosRdaMonitoreo['valor3'],
                                                                        "",
                                                                        "",
                                                                        "",
                                                                        "",
                                                                        $intIdEmpresa);
                if(!isset($arrayParametrosTraffic) || empty($arrayParametrosTraffic['valor2'])
                    || empty($arrayParametrosTraffic['valor3']))
                {
                    throw new \Exception("No se encontró el traffic-table del servicio con tipo de red GPON, ".
                                         "por favor notificar a Sistemas.");
                }
                //se setea datos por marca de olt zte
                if($strMarcaElemento === 'ZTE')
                {
                    $arrayParametrosDatos['traffic_table_monitoreo'] = $arrayParametrosTraffic['valor3'];
                    $arrayParametrosDatos['gemport_monitoreo']       = $arrayParametrosRdaMonitoreo['valor4'];
                }
                else
                {
                    $arrayParametrosDatos['traffic_table_monitoreo'] = $arrayParametrosRdaMonitoreo['valor3'];
                    $arrayParametrosDatos['gemport_monitoreo']       = $arrayParametrosRdaMonitoreo['valor2'];
                }
                $arrayParametrosDatos['t_cont_monitoreo']        = $arrayParametrosRdaMonitoreo['valor4'];
                $arrayParametrosDatos['id_mapping_monitoreo']    = $arrayParametrosRdaMonitoreo['valor5'];
                $arrayParametrosDatos['vlan_monitoreo']          = $arrayParametrosRdaMonitoreo['valor6'];
            }
            else
            {
                throw new \Exception("No se encontró los datos de configuración del RDA de Monitoreo con tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //parametros activación internet
            $arrayParametrosDatos['gemport_internet']       = "";
            $arrayParametrosDatos['traffic_table_internet'] = "";
            $arrayParametrosDatos['t_cont_internet']        = "";
            $arrayParametrosDatos['id_mapping_internet']    = "";
            $arrayParametrosDatos['vlan_internet']          = "";
            //parametro para traffic-table del servicio
            $arrayParametrosTraffic = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                    ->getOne("MAPEO_VELOCIDAD_TRAFFIC_TABLE_GPON",
                                                                                            "TECNICO",
                                                                                            "",
                                                                                            "MAPEO_VELOCIDAD_TRAFFIC_TABLE_GPON",
                                                                                            $strCapacidadServicio,
                                                                                            "",
                                                                                            "",
                                                                                            "",
                                                                                            "",
                                                                                            $intIdEmpresa);
            if(!isset($arrayParametrosTraffic) || empty($arrayParametrosTraffic['valor2'])
                || empty($arrayParametrosTraffic['valor3']))
            {
                throw new \Exception("No se encontró el traffic-table del servicio con tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }

            //se setea los datos por tipo de servicio
            if($objProducto->getNombreTecnico() === "L3MPLS" || $objProducto->getNombreTecnico() === 'SAFECITYDATOS'
               || $objProducto->getNombreTecnico() === 'SAFECITYWIFI')
            {
                //verificar subred servicio
                if(empty($strSubredServicio))
                {
                    throw new \Exception("No se encontró la subred del servicio ".$objServicio->getLoginAux()." para tipo de red GPON, ".
                                         "por favor notificar a Sistemas.");
                }
                //verificar gateway servicio
                if(empty($strGatewayServicio))
                {
                    throw new \Exception("No se encontró el gateway del servicio ".$objServicio->getLoginAux()." para tipo de red GPON, ".
                                         "por favor notificar a Sistemas.");
                }

                //se setea datos por marca de olt
                if($strMarcaElemento === 'ZTE')
                {
                    //datos activar
                    $arrayDatosActivar['traffic_table_datos']   = $arrayParametrosTraffic['valor3'];
                    $arrayDatosActivar['gemport_datos']         = $intTContInicial;
                    //datos activar admin
                    $arrayDatosAdminActivar['traffic_table_datos'] = $arrayParametrosTraffic['valor3'];
                    $arrayDatosAdminActivar['gemport_datos']       = $intTContAdmin;
                }
                else
                {
                    //datos activar
                    $arrayDatosActivar['traffic_table_datos']   = $arrayParametrosTraffic['valor2'];
                    $arrayDatosActivar['gemport_datos']         = $strVlan;
                    //datos activar admin
                    $arrayDatosAdminActivar['traffic_table_datos'] = $arrayParametrosTraffic['valor2'];
                    $arrayDatosAdminActivar['gemport_datos']       = $strVlanAdmin;
                }
                //se configura datos activar
                $arrayDatosActivar['vlan_datos']        = $strVlan;
                $arrayDatosActivar['t_cont_datos']      = $intTContInicial;
                //se configura datos activar admin
                $arrayDatosAdminActivar['vlan_datos']   = $strVlanAdmin;
                $arrayDatosAdminActivar['t_cont_datos'] = $intTContAdmin;
                //parametro de datos
                $arrayParametrosRdaDatos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne("NUEVA_RED_GPON_TN",
                                                                                                               "COMERCIAL",
                                                                                                               "",
                                                                                                               $strNombreParametroRda,
                                                                                                               "ACTIVAR_DATOS",
                                                                                                               "",
                                                                                                               "",
                                                                                                               "",
                                                                                                               "",
                                                                                                               $intIdEmpresa);
                if(isset($arrayParametrosRdaDatos['valor2']) && isset($arrayParametrosRdaDatos['valor3'])
                   && isset($arrayParametrosRdaDatos['valor4']) && isset($arrayParametrosRdaDatos['valor5'])
                   && isset($arrayParametrosRdaDatos['valor6']) && isset($arrayParametrosRdaDatos['valor7']))
                {
                    $arrayDatosActivar['id_mapping_datos'] = $arrayParametrosRdaDatos['valor2'];
                    $arrayDatosAdminActivar['id_mapping_datos'] = $arrayParametrosRdaDatos['valor2'];
                    //seteo datos networking
                    $arrayDatosNetworking['opcion_NW']     = $arrayParametrosRdaDatos['valor3'];
                    $arrayDatosNetworking['opcion']        = $arrayParametrosRdaDatos['valor4'];
                    $arrayDatosNetworking['accion']        = $arrayParametrosRdaDatos['valor5'];
                    $arrayDatosNetworking['modulo']        = $arrayParametrosRdaDatos['valor6'];
                    $arrayDatosNetworking['esquema']       = $arrayParametrosRdaDatos['valor7'];
                    //seteo datos admin networking
                    $arrayDatosAdminNetworking['opcion_NW'] = $arrayParametrosRdaDatos['valor3'];
                    $arrayDatosAdminNetworking['opcion']    = $arrayParametrosRdaDatos['valor4'];
                    $arrayDatosAdminNetworking['accion']    = $arrayParametrosRdaDatos['valor5'];
                    $arrayDatosAdminNetworking['modulo']    = $arrayParametrosRdaDatos['valor6'];
                    $arrayDatosAdminNetworking['esquema']   = $arrayParametrosRdaDatos['valor7'];
                }
                else
                {
                    throw new \Exception("No se encontró los datos de configuración del RDA para el servicio DATOS con tipo de red GPON, ".
                                         "por favor notificar a Sistemas.");
                }
                //obtener vpn
                $objVpn               = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                    ->find($objVrfServicio->getPersonaEmpresaRolCaracId());
                if(!is_object($objVpn))
                {
                    throw new \Exception("No se encontró la VPN en la característica del cliente, por favor notificar a Sistemas.");
                }
                //obtner el rd-id
                $objCaractRdId        = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy(array("descripcionCaracteristica" => "RD_ID"));
                $objRdId              = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                            ->findOneBy(array("caracteristicaId"          => $objCaractRdId,
                                                              "estado"                    => "Activo",
                                                              "personaEmpresaRolCaracId"  => $objVpn->getId()));
                if(!is_object($objRdId))
                {
                    throw new \Exception("No se encontró el RD-ID en la característica del cliente, por favor notificar a Sistemas.");
                }
                //se configura datos networking
                $arrayDatosNetworking['bandEjecuta'] = $this->rdaBandEjecuta;
                $arrayDatosNetworking['servicio']    = $objProducto->getNombreTecnico();
                $arrayDatosNetworking['ambiente']    = $this->rdaTipoEjecucion;
                $arrayDatosNetworking['vrf']         = $strVrfServicio;
                $arrayDatosNetworking['rd']          = $objRdId->getValor();
                $arrayDatosNetworking['vlan']        = $strVlan;
                $arrayDatosNetworking['subred']      = $strSubredServicio;
                $arrayDatosNetworking['gateway']     = $strGatewayServicio;
                //se verifica si el servicio es WIFI
                if($objProducto->getNombreTecnico() === 'SAFECITYWIFI')
                {
                    //verificar subred admin servicio
                    if(empty($strSubredAdminServicio))
                    {
                        throw new \Exception("No se encontró la subred admin del servicio ".$objServicio->getLoginAux()." para tipo de red GPON, ".
                                             "por favor notificar a Sistemas.");
                    }
                    //verificar gateway admin servicio
                    if(empty($strGatewayAdminServicio))
                    {
                        throw new \Exception("No se encontró el gateway admin del servicio ".$objServicio->getLoginAux()." para tipo de red GPON, ".
                                             "por favor notificar a Sistemas.");
                    }
                    //obtener vpn
                    $objVpnAdmin  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                        ->find($objVrfAdminServicio->getPersonaEmpresaRolCaracId());
                    if(!is_object($objVpnAdmin))
                    {
                        throw new \Exception("No se encontró la VPN en la característica del cliente, por favor notificar a Sistemas.");
                    }
                    //obtner el rd-id
                    $objRdIdAdmin = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                ->findOneBy(array("caracteristicaId"          => $objCaractRdId,
                                                                  "estado"                    => "Activo",
                                                                  "personaEmpresaRolCaracId"  => $objVpnAdmin->getId()));
                    if(!is_object($objRdIdAdmin))
                    {
                        throw new \Exception("No se encontró el RD-ID en la característica del cliente, por favor notificar a Sistemas.");
                    }
                    //se configura datos admin networking
                    $arrayDatosAdminNetworking['bandEjecuta'] = $this->rdaBandEjecuta;
                    $arrayDatosAdminNetworking['servicio']    = $objProducto->getNombreTecnico();
                    $arrayDatosAdminNetworking['ambiente']    = $this->rdaTipoEjecucion;
                    $arrayDatosAdminNetworking['vrf']         = $strVrfAdmin;
                    $arrayDatosAdminNetworking['rd']          = $objRdIdAdmin->getValor();
                    $arrayDatosAdminNetworking['vlan']        = $strVlanAdmin;
                    $arrayDatosAdminNetworking['subred']      = $strSubredAdminServicio;
                    $arrayDatosAdminNetworking['gateway']     = $strGatewayAdminServicio;
                }
            }
            else
            {
                //se setea datos por marca de olt zte
                if($strMarcaElemento === 'ZTE')
                {
                    //parametro de internet
                    $arrayParametrosDatos['traffic_table_internet'] = $arrayParametrosTraffic['valor3'];
                }
                else
                {
                    $arrayParametrosDatos['traffic_table_internet'] = $arrayParametrosTraffic['valor2'];
                }
                //parametro de internet
                $arrayParametrosDatos['vlan_internet']          = $strVlan;
                $arrayParametrosDatos['t_cont_internet']        = $intTContInicial;
            }
            //obtengo los servicio del punto
            $booleanNuevoDatos      = true;
            $objServicioPuntoTemp   = null;
            $intCantServiciosInt    = 0;
            $intCantServiciosDatos  = 0;
            $intTContNuevo          = $intTContInicial;
            $intTContAdminNuevo     = $intTContAdmin;
            $intTContServicio       = $intTContInicial;
            $intTContCamara         = null;
            $intTContWifi           = null;
            $intTContWifiAdmin      = null;
            $arrayNombresTecnico    = array("L3MPLS","SAFECITYDATOS","SAFECITYWIFI","INTERNET","INTMPLS");
            $arrayServiciosPunto    = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                            ->createQueryBuilder('s')
                                                            ->join("s.productoId", "p")
                                                            ->join("s.puntoId", "pu")
                                                            ->where("pu.id       = :puntoId")
                                                            ->andWhere("s.estado = :estado")
                                                            ->andWhere("p.nombreTecnico IN (:nombresTecnico)")
                                                            ->setParameter('puntoId', $objServicio->getPuntoId()->getId())
                                                            ->setParameter('estado',  "Activo")
                                                            ->setParameter('nombresTecnico', array_values($arrayNombresTecnico))
                                                            ->orderBy('s.id', 'ASC')
                                                            ->getQuery()
                                                            ->getResult();
            foreach($arrayServiciosPunto as $objServicioPunto)
            {
                //verificar productos
                $objProductoPunto = $objServicioPunto->getProductoId();
                $objCaractTipoRed = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,
                                                                                              'TIPO_RED',
                                                                                              $objServicioPunto->getProductoId());
                $objCaractTContPun  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,
                                                                                                'T-CONT',
                                                                                                $objProductoPunto);
                $objCaractTContAdminPun  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,
                                                                                                    'T-CONT-ADMIN',
                                                                                                     $objProductoPunto);
                $objCaractMacOntPun = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,
                                                                                                'MAC ONT',
                                                                                                $objProductoPunto);
                //verificar si el servicio es tipo red GPON
                $booleanTipoRedGponPun = false;
                if(is_object($objCaractTipoRed))
                {
                    $arrayParVerTipoRedPun = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                            ->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $objCaractTipoRed->getValor(),
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
                    if(isset($arrayParVerTipoRedPun) && !empty($arrayParVerTipoRedPun))
                    {
                        $booleanTipoRedGponPun = true;
                    }
                }
                if($booleanTipoRedGponPun && is_object($objCaractMacOntPun) && $objCaractMacOntPun->getValor() == $strMacOnt)
                {
                    if($objProductoPunto->getNombreTecnico() === "L3MPLS" || $objProductoPunto->getNombreTecnico() === 'SAFECITYDATOS'
                       || $objProductoPunto->getNombreTecnico() === 'SAFECITYWIFI')
                    {
                        $booleanNuevoDatos     =  false;
                        $intCantServiciosDatos += 1;
                        //se setea el servicio temporal
                        if(!is_object($objServicioPuntoTemp))
                        {
                            $objServicioPuntoTemp = $objServicioPunto;
                        }
                    }
                    else
                    {
                        $intCantServiciosInt   += 1;
                        //se setea el servicio temporal
                        if(!is_object($objServicioPuntoTemp) || ($objServicioPuntoTemp->getProductoId()->getNombreTecnico() === "L3MPLS"
                            || $objServicioPuntoTemp->getProductoId()->getNombreTecnico() === "SAFECITYDATOS"
                            || $objServicioPuntoTemp->getProductoId()->getNombreTecnico() === "SAFECITYWIFI"))
                        {
                            $objServicioPuntoTemp = $objServicioPunto;
                        }
                    }
                    //verificar t cont
                    if(is_object($objCaractTContPun))
                    {
                        $intTContPunto = intval($objCaractTContPun->getValor());
                        if($objProductoPunto->getNombreTecnico() === 'SAFECITYDATOS')
                        {
                            $intTContCamara = $intTContPunto;
                        }
                        elseif($objProductoPunto->getNombreTecnico() === 'SAFECITYWIFI')
                        {
                            $intTContWifi      = $intTContPunto;
                            $intTContWifiAdmin = $intTContPunto;
                            if(is_object($objCaractTContAdminPun))
                            {
                                $intTContWifiAdmin = intval($objCaractTContAdminPun->getValor());
                            }
                        }
                        if($intTContPunto >= $intTContNuevo)
                        {
                            $intTContNuevo  = $intTContPunto + 1;
                            if(is_object($objCaractTContAdminPun))
                            {
                                $intTContPunto = intval($objCaractTContAdminPun->getValor());
                                if($intTContPunto >= $intTContNuevo)
                                {
                                    $intTContNuevo  = $intTContPunto + 1;
                                }
                            }
                            $intTContAdminNuevo = $intTContNuevo + 1;
                        }
                    }
                }
            }
            //verificar si existe servicio anterior
            if(is_object($objServicioPuntoTemp))
            {
                //actualizo t cont del servicio
                if($objProducto->getNombreTecnico() === "L3MPLS")
                {
                    $intTContServicio                  = $intTContNuevo;
                    $arrayDatosActivar['t_cont_datos'] = $intTContNuevo;
                    //se setea datos por marca de olt
                    if($strMarcaElemento === 'ZTE')
                    {
                        $arrayDatosActivar['gemport_datos'] = $arrayDatosActivar['t_cont_datos'];
                    }
                }
                else if($objProducto->getNombreTecnico() === "SAFECITYDATOS")
                {
                    $intTContServicio                  = $intTContCamara ? $intTContCamara : $intTContNuevo;
                    $arrayDatosActivar['t_cont_datos'] = $intTContCamara ? $intTContCamara : $intTContNuevo;
                    //se setea datos por marca de olt
                    if($strMarcaElemento === 'ZTE')
                    {
                        $arrayDatosActivar['gemport_datos'] = $arrayDatosActivar['t_cont_datos'];
                    }
                }
                else if($objProducto->getNombreTecnico() === "SAFECITYWIFI")
                {
                    $arrayDatosActivar['t_cont_datos']       = $intTContWifi ? $intTContWifi : $intTContNuevo;
                    $arrayDatosAdminActivar['t_cont_datos']  = $intTContWifiAdmin ? $intTContWifiAdmin : $intTContAdminNuevo;
                    $intTContServicio                        = $arrayDatosAdminActivar['t_cont_datos'];
                    //se setea datos por marca de olt
                    if($strMarcaElemento === 'ZTE')
                    {
                        $arrayDatosActivar['gemport_datos']      = $arrayDatosActivar['t_cont_datos'];
                        $arrayDatosAdminActivar['gemport_datos'] = $arrayDatosAdminActivar['t_cont_datos'];
                    }
                }
                else
                {
                    $intTContServicio                        = $intTContNuevo;
                    $arrayParametrosDatos['t_cont_internet'] = $intTContNuevo;
                    //se setea datos por marca de olt
                    if($strMarcaElemento === 'ZTE')
                    {
                        $arrayParametrosDatos['gemport_internet'] = $arrayParametrosDatos['t_cont_internet'];
                    }
                }
                //obtengo indice cliente
                $objCaractIndiceCliente = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoTemp,
                                                                                                    'INDICE CLIENTE',
                                                                                                    $objServicioPuntoTemp->getProductoId());
                if($arrayParametrosDatos['ont_id'] == "" && is_object($objCaractIndiceCliente))
                {
                    $arrayParametrosDatos['ont_id']       = $objCaractIndiceCliente->getValor();
                }
                //obtengo line profile
                $objCaractLineProfile   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoTemp,
                                                                                                    'LINE-PROFILE-NAME',
                                                                                                    $objServicioPuntoTemp->getProductoId());
                if(is_object($objCaractLineProfile))
                {
                    $arrayParametrosDatos['line_profile'] = $objCaractLineProfile->getValor();
                }
                //verifico si es internet
                if( ($objProducto->getNombreTecnico() === "L3MPLS" || $objProducto->getNombreTecnico() === 'SAFECITYDATOS'
                     || $objProducto->getNombreTecnico() === 'SAFECITYWIFI') &&
                    ($objServicioPuntoTemp->getProductoId()->getNombreTecnico() === "INTERNET" ||
                     $objServicioPuntoTemp->getProductoId()->getNombreTecnico() === "INTMPLS") )
                {
                    //obtengo la vlan internet
                    $objCaractVlanInt = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoTemp,
                                                                                                  'VLAN',
                                                                                                  $objServicioPuntoTemp->getProductoId());
                    if(is_object($objCaractVlanInt))
                    {
                        $objDetalleVlanInt = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                                    ->find($objCaractVlanInt->getValor());
                        if(is_object($objDetalleVlanInt))
                        {
                            $arrayParametrosDatos['vlan_internet'] = $objDetalleVlanInt->getDetalleValor();
                        }
                    }
                    //obtengo la traffic table internet
                    $objCaractTrafficTableInt = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoTemp,
                                                                                                          'TRAFFIC-TABLE',
                                                                                                          $objServicioPuntoTemp->getProductoId());
                    if(is_object($objCaractTrafficTableInt))
                    {
                        $arrayParametrosDatos['traffic_table_internet'] = $objCaractTrafficTableInt->getValor();
                    }
                    //obtengo la t cont internet
                    $objCaractTContInt = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoTemp,
                                                                                                   'T-CONT',
                                                                                                   $objServicioPuntoTemp->getProductoId());
                    if(is_object($objCaractTContInt))
                    {
                        $arrayParametrosDatos['t_cont_internet'] = $objCaractTContInt->getValor();
                    }
                }
            }
            //verificar maximo t cont
            if($intTContServicio > $intTContFinal)
            {
                throw new \Exception("El T-CONT($intTContServicio) del servicio para tipo de red GPON es mayor a $intTContFinal, ".
                                     "por favor notificar a Sistemas.");
            }
            //cantidad de servicios
            $arrayParametrosDatos['tiene_datos']    = $intCantServiciosDatos > 0 ? "S" : "N";
            $arrayParametrosDatos['tiene_internet'] = $intCantServiciosInt > 0 ? "S" : "N";
            //verifico si esta seteada el line profile
            if(!isset($arrayParametrosDatos['line_profile']) || empty($arrayParametrosDatos['line_profile']))
            {
                if($objProducto->getNombreTecnico() === "L3MPLS" || $objProducto->getNombreTecnico() === 'SAFECITYDATOS'
                   || $objProducto->getNombreTecnico() === 'SAFECITYWIFI')
                {
                    $arrayParametrosDatos['line_profile'] = $strVlan."_".$objPunto->getLogin();
                }
                else
                {
                    //obtengo el perfil mapeo
                    $strPerfilMapeo = "";
                    $arrayMapeoVelocidadPerfil  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->getOne( 'MAPEO_VELOCIDAD_PERFIL',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $strCapacidadServicio,
                                                                            '',
                                                                            $objProducto->getNombreTecnico(),
                                                                            '',
                                                                            '',
                                                                            $intIdEmpresa);
                    if( isset($arrayMapeoVelocidadPerfil['valor2']) && !empty($arrayMapeoVelocidadPerfil['valor2']) )
                    {
                        $strPerfilMapeo = $arrayMapeoVelocidadPerfil['valor2'];
                    }
                    else
                    {
                        throw new \Exception("No se ha mapeado un perfil para la velocidad del servicio con tipo de red GPON, ".
                                             "por favor notificar a Sistemas.");
                    }
                    //obtener perfil equivalente
                    $strMarcaElementoOlt = $objElemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    $strAprovisionamiento                             = $this->recursosRed->geTipoAprovisionamiento($objElemento->getId());
                    $arrayParamsPerfilEquiv                           = array();
                    $arrayParamsPerfilEquiv['elementoOltId']          = $objElemento->getId();
                    $arrayParamsPerfilEquiv['idPlan']                 = null;
                    $arrayParamsPerfilEquiv['valorPerfil']            = $strPerfilMapeo;
                    $arrayParamsPerfilEquiv['tipoAprovisionamiento']  = $strAprovisionamiento;
                    $arrayParamsPerfilEquiv['marca']                  = $strMarcaElementoOlt;
                    $arrayParamsPerfilEquiv['empresaCod']             = $intIdEmpresa;
                    $arrayParamsPerfilEquiv['tipoNegocio']            = 'CORPORATIVO';
                    $arrayParamsPerfilEquiv['tipoEjecucion']          = 'FLUJO';
                    $strPerfilEquivalente = $this->recursosRed->getPerfilPlanEquivalente($arrayParamsPerfilEquiv);
                    //verificar parametro
                    if(isset($strPerfilEquivalente) && !empty($strPerfilEquivalente))
                    {
                        $arrayParametrosDatos['line_profile'] = $strPerfilEquivalente;
                    }
                    else
                    {
                        throw new \Exception("No se encontró perfil equivalente del servicio para el tipo de red GPON, ".
                                             "por favor notificar a Sistemas.");
                    }
                }
            }
            //parametros activación internet
            if( ($objProducto->getNombreTecnico() != "L3MPLS" && $objProducto->getNombreTecnico() != 'SAFECITYDATOS'
                 && $objProducto->getNombreTecnico() != 'SAFECITYWIFI')
                || $arrayParametrosDatos['tiene_internet'] == "S" )
            {
                //se configura internet activar
                $arrayParametrosRdaInternet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne("NUEVA_RED_GPON_TN",
                                                                                                               "COMERCIAL",
                                                                                                               "",
                                                                                                               $strNombreParametroRda,
                                                                                                               "ACTIVAR_INTERNET",
                                                                                                               "",
                                                                                                               "",
                                                                                                               "",
                                                                                                               "",
                                                                                                               $intIdEmpresa);
                if(isset($arrayParametrosRdaInternet['valor1']) && !empty($arrayParametrosRdaInternet['valor1'])
                   && isset($arrayParametrosRdaInternet['valor3']) && isset($arrayParametrosRdaInternet['valor4']))
                {
                    $arrayParametrosDatos['gemport_internet']    = $arrayParametrosRdaInternet['valor3'];
                    $arrayParametrosDatos['id_mapping_internet'] = $arrayParametrosRdaInternet['valor4'];
                    //se setea datos por marca de olt
                    if($strMarcaElemento === 'ZTE')
                    {
                        $arrayParametrosDatos['gemport_internet'] = $arrayParametrosDatos['t_cont_internet'];
                    }
                }
                else
                {
                    throw new \Exception("No se encontró los datos de configuración del RDA para el servicio INTERNET con tipo de red GPON, ".
                                         "por favor notificar a Sistemas.");
                }
            }

            //verificar servicio wifi
            if($objProducto->getNombreTecnico() === 'SAFECITYWIFI')
            {
                //se setea el datos admin activar
                $arrayParametrosDatos['datos_activar'][] = $arrayDatosAdminActivar;
                //se setea el datos admin networking
                $arrayParametrosDatos['datos_NW'][]      = $arrayDatosAdminNetworking;
            }
            //se setea el datos activar
            $arrayParametrosDatos['datos_activar'][] = $arrayDatosActivar;
            //se setea el datos networking
            $arrayParametrosDatos['datos_NW'][]      = $arrayDatosNetworking;
            //datos ws
            $arrayDatosMiddleware = array(
                'nombre_cliente'       => $strNombreCliente,
                'login'                => $objPunto->getLogin(),
                'identificacion'       => $strIdentificacion,
                'datos'                => $arrayParametrosDatos,
                'opcion'               => $strOpcionActivar,
                'ejecutaComando'       => $this->ejecutaComando,
                'usrCreacion'          => $strUsrCreacion,
                'ipCreacion'           => $strIpCreacion,
                'comandoConfiguracion' => $this->ejecutaComando,
                'empresa'              => $strPrefijoEmpresa,
            );
            //verificar si se activa en el ONT
            if($booleanActivarOnt)
            {
                //se ejecuta ws de RDA
                $arrayRespuesta = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
            }
            else
            {
                $arrayRespuesta['status']  = "OK";
                $arrayRespuesta['mensaje'] = "OK";
            }
            $arrayRespuesta['status']               = strtoupper($arrayRespuesta['status']);
            $arrayRespuesta['booleanServicioNuevo'] = $booleanNuevoDatos;
            $arrayRespuesta['objServicioPunto']     = $objServicioPuntoTemp;
            $arrayRespuesta['arrayDatosMiddleware'] = $arrayDatosMiddleware;
        }
        catch(\Exception $e)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->llamadaWsActivarProductosGPON',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            $arrayRespuesta["status"]  = "ERROR";
            $arrayRespuesta["mensaje"] = $e->getMessage();
        }

        return $arrayRespuesta;
    }

    /**
     * Método que activa ips adicionales Small Business al realizar un traslado
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 13-07-2018
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 27-02-2019 Se modifica el mensaje en caso de error para identificar si es un servicio Ip Small Business o Ip TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 04-05-2020 Se modifica la función para activar nuevas Ips Small Business de acuerdo a los Ids de las ips y no en base
     *                          al nombre técnico
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.3 22-02-2021  Se agregan validaciones para saber si el servicio tiene tipo de Ip Privada
     * 
     * @param Array $arrayParametros [
     *                                  "strCodEmpresa"             => código de la empresa
     *                                  "strPrefijoEmpresa"         => prefijo de la empresa
     *                                  "objServicioSB"             => objeto del servicio Small Business del punto destino
     *                                  "objServicioTecnicoSB"      => objeto del servicio técnico Small Business del punto destino
     *                                  "objElementoOlt"            => objeto del olt del servicio Small Business del punto destino
     *                                  "strMarcaOlt"               => marca del olt del servicio Small Business del punto destino
     *                                  "objInterfaceElementoOlt"   => objeto de la interface del olt del servicio Small Business del punto destino
     *                                  "objProductoSB"             => objeto del producto Small Business
     *                                  "strUsrCreacion"            => usuario de creación
     *                                  "strIpCreacion"             => ip de creación
     *                                  "strNombreTecnicoInternet"  => nombre técnico del servicio Small Business
     *                                  "strNombreTecnicoIP"        => nombre técnico de las ips adicionales Small Business
     *                                  "intIpsServiciosAnterior"   => número de ips por activar
     *                                  "arrayProdIpSb"             => array de producto Ip
     *                               ]
     * @return Array $arrayRespuestaFinal [
     *                                      "strStatus"  => estado del proceso ejecutado
     *                                      "strMensaje" => mensaje del proceso ejecutado
     *                                    ]
     *
     */
    public function activarIpsTrasladoSB($arrayParametros)
    {
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
        $objServicioSB              = $arrayParametros["objServicioSB"];
        $objServicioTecnicoSB       = $arrayParametros["objServicioTecnicoSB"];
        $objElementoOlt             = $arrayParametros["objElementoOlt"];
        $strMarcaOlt                = $arrayParametros["strMarcaOlt"];
        $objInterfaceElementoOlt    = $arrayParametros["objInterfaceElementoOlt"];
        $objProductoSB              = $arrayParametros["objProductoSB"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strIpCreacion              = $arrayParametros["strIpCreacion"];
        $intIpsServiciosAnterior    = $arrayParametros["intIpsServiciosAnterior"];
        $arrayProdIpSb              = $arrayParametros["arrayProdIpSb"];
        $strMensaje                 = "";
        $strStatus                  = "";
        try
        {
            $objTipoSolicitud       = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                        ->findOneBy(array(  'descripcionSolicitud'  => 'SOLICITUD PLANIFICACION',
                                                                            'estado'                => 'Activo'));
            if(!is_object($objTipoSolicitud))
            {
                throw new \Exception("No existe el tipo de solicitud de planificación");
            }
            $objPuntoNuevo      = $objServicioSB->getPuntoId();
            $arrayResultadoIpsAdicionalesNuevas = $this->recursosRed->getIpsDisponibleScopeOlt( $intIpsServiciosAnterior, 
                                                                                                $objElementoOlt->getId(), 
                                                                                                $objServicioSB->getId(), 
                                                                                                $objPuntoNuevo->getId(), 
                                                                                                "SI", 
                                                                                                0);
            if($arrayResultadoIpsAdicionalesNuevas['error'])
            {
                throw new \Exception($arrayResultadoIpsAdicionalesNuevas['error']);
            }
            $arrayIpsAdicionalesNuevas = $arrayResultadoIpsAdicionalesNuevas['ips'];
            
            $arrayServiciosIpsNuevos    = array();
            foreach($arrayProdIpSb as $objProdIpSb)
            {
                $arrayServiciosForIpsNuevos = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->findBy(array( "puntoId"       => $objPuntoNuevo->getId(),
                                                                                "productoId"    => $objProdIpSb,
                                                                                "estado"        => "PreAsignacionInfoTecnica"));
                
                $arrayServiciosIpsNuevos    = array_merge($arrayServiciosIpsNuevos, $arrayServiciosForIpsNuevos);
            }
            $intIndex                   = 0;
            foreach($arrayIpsAdicionalesNuevas as $arrayIpNueva)
            {
                $this->emComercial->beginTransaction();
                $this->emInfraestructura->beginTransaction();
                try
                {
                    $objServicioIp          = $arrayServiciosIpsNuevos[$intIndex];
                    $objDetalleSolicitudIp  = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                ->findOneBy(array(  "servicioId"        => $objServicioIp->getId(),
                                                                                    "tipoSolicitudId"   => $objTipoSolicitud->getId(),
                                                                                    "estado"            => 'PreAsignacionInfoTecnica'));
                    if(!is_object($objDetalleSolicitudIp))
                    {
                        throw new \Exception("No se generó de manera correcta la solicitud del servicio");
                    }
                    
                    //Consulta si el producto tiene IP Privada
                    $strTipoIp                  = 'FIJA';
                    
                    $objCaracteristicaIpPrivada = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                          ->findOneBy(array( "descripcionCaracteristica" => "TIPO_ENRUTAMIENTO"));
                    if(is_object($objCaracteristicaIpPrivada))
                    {
                        $objProductoIp = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                           ->find($objServicioIp->getProductoId()->getId());

                        $objProdCaracteristicaIpPrivada = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                    ->findOneBy(array( "productoId"       => $objProductoIp->getId(), 
                                                                                       "caracteristicaId" => $objCaracteristicaIpPrivada->getId()
                                                                                    )
                                                                                );
                        if(is_object($objProdCaracteristicaIpPrivada))
                        {
                            $objInfoServicioProdCaractIpPrivada = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findOneBy(array("servicioId"                => $objServicioIp->getId(), 
                                                                              "productoCaracterisiticaId" => $objProdCaracteristicaIpPrivada->getId()
                                                                         )
                                                                   );
                            if (is_object($objInfoServicioProdCaractIpPrivada))
                            {
                                $strIpPrivada = ($objInfoServicioProdCaractIpPrivada)?$objInfoServicioProdCaractIpPrivada->getValor():"";
                                $strTipoIp = strtoupper($strIpPrivada);
                            }
                        }
                    }
                    
                    $arrayDatosIps              = array("tipo"      => $strTipoIp,
                                                        "ip"        => $arrayIpNueva['ip'],
                                                        "mascara"   => "",
                                                        "gateway"   => "",
                                                        "scope"     => $arrayIpNueva['scope']);
                    $arrayAsignarRecursosRedIp  = array(
                                                        'idDetSolPlanif'        => $objDetalleSolicitudIp->getId(),
                                                        'idSplitter'            => 0,
                                                        'idInterfaceSplitter'   => 0,
                                                        'strTipoAccion'         => 'TRASLADO',
                                                        'datosIps'              => json_encode(array("caracteristicas"  => array($arrayDatosIps))),
                                                        'marcaOlt'              => $strMarcaOlt,
                                                        'nombreTecnico'         => $objServicioIp->getProductoId()->getNombreTecnico(),
                                                        'idEmpresa'             => $strCodEmpresa,
                                                        'prefijoEmpresa'        => $strPrefijoEmpresa,
                                                        'usrCreacion'           => $strUsrCreacion,
                                                        'ipCreacion'            => $strIpCreacion
                                                    );
                    $arrayRespuestaAsignarRed   = $this->recursosRed->asignarRecursosRedInternetLite($arrayAsignarRecursosRedIp);
                    if($arrayRespuestaAsignarRed["status"] !== "OK")
                    {
                        throw new \Exception("No se ha podido asignar ip al servicio ");
                    }

                    $strTipoIp = 'FIJA';
        
                    //Obtiene tipo de ip por el servicio (PRIVADA)
                    $objTipoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                        ->findOneBy(array("servicioId"  =>  $objServicioIp->getId(),
                                                                          "tipoIp"      =>  "PRIVADA",
                                                                          "estado"      =>  "Reservada"));
                    if (is_object($objTipoIp))
                    {
                        $strTipoIp = $objTipoIp->getTipoIp();
                    }
                    
                    $objInfoIpServicio  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                  ->findOneBy(array("servicioId"   => $objServicioIp->getId(), 
                                                                                    "tipoIp"       => $strTipoIp, 
                                                                                    "estado"       => "Reservada"));
                    if(!is_object($objInfoIpServicio))
                    {
                        throw new \Exception("No se ha podido obtener la ip reservada para el servicio ");
                    }
                    $objServicioTecnicoIp   = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneByServicioId($objServicioIp->getId());
                    if(!is_object($objServicioTecnicoIp))
                    {
                        throw new \Exception("No se ha podido obtener el servicio técnico de la ip que se desea trasladar");
                    }
                    $objSpcTrasladoIp   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIp, 
                                                                                                    "TRASLADO", 
                                                                                                    $objServicioIp->getProductoId());
                    if(!is_object($objSpcTrasladoIp))
                    {
                        throw new \Exception("No se ha podido obtener el servicio técnico de la ip que se desea trasladar");
                    }
                    $objServicioIpAnterior  = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')
                                                                      ->find($objSpcTrasladoIp->getValor());
                    $objSpcMacAnterior      = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioIpAnterior, 
                                                                                                        "MAC ONT", 
                                                                                                        $objProductoSB);
                    if(!is_object($objSpcMacAnterior))
                    {
                        $objSpcMacAnterior = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioIpAnterior, 
                                                                                                        "MAC", 
                                                                                                        $objProductoSB);
                        if(!is_object($objSpcMacAnterior))
                        {
                            $objSpcMacAnterior = $this->servicioGeneral->getServicioProductoCaracteristica( $objServicioIpAnterior, 
                                                                                                            "MAC WIFI", 
                                                                                                            $objProductoSB);
                            if(!is_object($objSpcMacAnterior))
                            {
                                throw new \Exception('No existe Mac asociado a un Servicio Ip, favor revisar!');
                            }
                        }
                    }
                    $arrayDatosIpNueva = array(    
                                                'servicio'                  => $objServicioIp,
                                                'servicioInternet'          => $objServicioSB,
                                                'servicioTecnico'           => $objServicioTecnicoSB,
                                                'interfaceElemento'         => $objInterfaceElementoOlt,
                                                'producto'                  => $objProductoSB,
                                                'ipFija'                    => $objInfoIpServicio,
                                                'macIpFija'                 => $objSpcMacAnterior->getValor(),
                                                'idEmpresa'                 => $strCodEmpresa,
                                                'tieneIpFijaActiva'         => "",
                                                'controlIpFija'             => "",
                                                'usrCreacion'               => $strUsrCreacion,
                                                'ipCreacion'                => $strIpCreacion,
                                                'strPrefijoEmpresa'         => $strPrefijoEmpresa);
                    $arrayRespuestaActivacionIp = $this->activarIpFijaAdicional($arrayDatosIpNueva);
                    if($arrayRespuestaActivacionIp["status"] !== "OK")
                    {
                        throw new \Exception("No se ha podido activar el servicio - ID: ".$objServicioIp->getId().", ".
                                             "IP: ".$objInfoIpServicio->getIp().", ".
                                             "MAC: ".$objSpcMacAnterior->getValor().", "
                                             ."Error Middleware: ".$arrayRespuestaActivacionIp["mensaje"]);
                    }
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioIp, $objProductoSB, "MAC", 
                                                                                    $objSpcMacAnterior->getValor(), $strUsrCreacion);


                    $this->servicioGeneral->ingresarServicioHistorial(  $objServicioIp, 
                                                                        $objServicioIp->getEstado(), 
                                                                        "Se configuró Ip Fija:".$objInfoIpServicio->getIp()
                                                                        ." con Mac:".$objSpcMacAnterior->getValor(), 
                                                                        $strUsrCreacion, 
                                                                        $strIpCreacion
                                                                    );

                    if($strMarcaOlt !== "HUAWEI")
                    {
                        $objSpcPerfil = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioSB, "PERFIL", $objProductoSB);
                        if(is_object($objSpcPerfil) && count($arrayRespuestaActivacionIp) > 3 
                            && ($objSpcPerfil->getValor() != $arrayRespuestaActivacionIp['perfil']))
                        {
                            $this->servicioGeneral->setEstadoServicioProductoCaracteristica($objSpcPerfil, "Eliminado");
                            $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicioSB, 
                                                                                            $objProductoSB, 
                                                                                            "PERFIL", 
                                                                                            $arrayRespuestaActivacionIp['perfil'], 
                                                                                            $strUsrCreacion);
                        }
                    }

                    $arraySpcServicioIpAnterior = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findBy(array( "servicioId"    => $objServicioIpAnterior->getId(),
                                                                                    "estado"        => "Activo"));
                    foreach($arraySpcServicioIpAnterior as $objSpcServicioIpAnterior)
                    {
                        $objSpcServicioIpAnterior->setEstado('Eliminado');
                        $this->emComercial->persist($objSpcServicioIpAnterior);
                        $this->emComercial->flush();
                    }
                    $objServicioIp->setEstado("Activo");
                    $this->emComercial->persist($objServicioIp);
                    $this->emComercial->flush();

                    $objServicioIpHistorial = new InfoServicioHistorial();
                    $objServicioIpHistorial->setServicioId($objServicioIp);
                    $objServicioIpHistorial->setIpCreacion($strIpCreacion);
                    $objServicioIpHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioIpHistorial->setUsrCreacion($strUsrCreacion);
                    $objServicioIpHistorial->setEstado("Activo");
                    $objServicioIpHistorial->setObservacion("Se activaron la(s) Ip(s) Fija(s)");
                    $this->emComercial->persist($objServicioIpHistorial);
                    $this->emComercial->flush();

                    $objInfoIpServicio->setEstado("Activo");
                    $this->emInfraestructura->persist($objInfoIpServicio);
                    $this->emInfraestructura->flush();

                    $this->emInfraestructura->commit();
                    $this->emComercial->commit();
                    $intIndex++;
                }
                catch(\Exception $ex)
                {
                    $strMensaje = "no se han podido activar todas las ips Small Business. Por favor notificar a Sistemas!";
                    $strStatus  = "ERROR";
                    if ($this->emInfraestructura->getConnection()->isTransactionActive())
                    {
                        $this->emInfraestructura->rollback();
                    }

                    if ($this->emComercial->getConnection()->isTransactionActive())
                    {
                        $this->emComercial->rollback();
                    }
                    $this->emInfraestructura->close();
                    $this->emComercial->close();
                    $this->serviceUtil->insertError(   "Telcos+",
                                                        "InfoActivarPuertoService->activarIpsPorTrasladoSB",
                                                        $ex->getMessage(),
                                                        $strUsrCreacion,
                                                        $strIpCreacion
                                                       );
                }
            }
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "no se han podido activar las ips. Por favor notificar a Sistemas!";
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->activarIpsPorTrasladoSB",
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        if(empty($strStatus))
        {
            $strStatus = "OK";
        }
        $arrayRespuestaFinal = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }

    /**
     * Funcion que actualiza el estado de las solicitudes de cableado ethernet empaquetado o adicional
     *
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.0 12-04-2021 - Version Inicial.
     *
     * @param $arrayDatosCableado -> Contiene todos los datos del punto trasladado y el estado final
     * 
    */
    public function actualizaEstadoCableado($arrayDatosCableado)
    {
        // Obtenemos los parametros para producto adicional de Cableado ethernet
        $arrayParametroTipos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->get('VALIDA_PROD_ADICIONAL','COMERCIAL','',
                'Solicitud cableado ethernet','','','','','','18');
        if (is_array($arrayParametroTipos) && !empty($arrayParametroTipos))
        {
            $objCableParametro = $arrayParametroTipos[0];
        }
        // Obtenemos los valores de los estados permitidos parametrizados
        $arrayEstadosPermitidos = array();
        $arrayEstadosValor = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('VALIDA_PROD_ADICIONAL', 
                                                  'COMERCIAL','',
                                                  'Estados permitidos para CE en traslado',
                                                  '','','','','','18');
        if(is_array($arrayEstadosValor) && !empty($arrayEstadosValor))
        {
            foreach($arrayEstadosValor as $estadoValor)
            {
                if ($estadoValor['valor1'] != null )
                {
                    array_push($arrayEstadosPermitidos, $estadoValor['valor1']);
                }
                if ($estadoValor['valor2'] != null )
                {
                    array_push($arrayEstadosPermitidos, $estadoValor['valor2']);
                }
                if ($estadoValor['valor3'] != null )
                {
                    array_push($arrayEstadosPermitidos, $estadoValor['valor3']);
                }
                if ($estadoValor['valor4'] != null )
                {
                    array_push($arrayEstadosPermitidos, $estadoValor['valor4']);
                }
                if ($estadoValor['valor5'] != null )
                {
                    array_push($arrayEstadosPermitidos, $estadoValor['valor5']);
                }
                if ($estadoValor['valor6'] != null )
                {
                    array_push($arrayEstadosPermitidos, $estadoValor['valor6']);
                }
                if ($estadoValor['valor7'] != null )
                {
                    array_push($arrayEstadosPermitidos, $estadoValor['valor7']);
                }
            }
        }
        // Verificamos si posee servicios de CE adicionales
        $arrayServicios = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                        ->findServiciosByPuntoAndEstado($arrayDatosCableado['intIdPunto'], null, null);
        foreach($arrayServicios['registros'] as $servicio)
        {
            $strAdicional = "NO";
            $strProducto = $servicio->getProductoId();
            // Actualizamos el estado de los servicios adicionales de cableado ethernet
            if (!empty($strProducto) && $strProducto->getId() == $objCableParametro['valor1'] &&
                $servicio->getId() != $arrayDatosCableado['intIdServicio'])
            {
                $strAdicional = "SI";
                $entityServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                            ->findOneById($servicio->getId());
                if (in_array($entityServicio->getEstado(), $arrayEstadosPermitidos))
                {
                    $entityServicio->setEstado($arrayDatosCableado['strEstado']);
                    $this->emComercial->persist($entityServicio);
                    $this->emComercial->flush();
                    // Actualizamos el historial del servicio
                    $entityServicioHist = new InfoServicioHistorial();
                    $entityServicioHist->setServicioId($entityServicio);
                    $entityServicioHist->setObservacion('Se trasladó el servicio');
                    $entityServicioHist->setIpCreacion($arrayDatosCableado['strIpCreacion']);
                    $entityServicioHist->setFeCreacion(new \DateTime('now'));
                    $entityServicioHist->setUsrCreacion($arrayDatosCableado['strUsrCreacion']);
                    $entityServicioHist->setEstado($arrayDatosCableado['strEstado']);
                    $this->emComercial->persist($entityServicioHist);
                    $this->emComercial->flush();
                }
                else if ($entityServicio->getEstado() == 'Activo')
                {
                    $entityServicio->setEstado('Rechazada');
                    $this->emComercial->persist($entityServicio);
                    $this->emComercial->flush();
                    // Actualizamos el historial del servicio
                    $entityServicioHist = new InfoServicioHistorial();
                    $entityServicioHist->setServicioId($entityServicio);
                    $entityServicioHist->setObservacion('Se Rechazo el servicio por traslado');
                    $entityServicioHist->setIpCreacion($arrayDatosCableado['strIpCreacion']);
                    $entityServicioHist->setFeCreacion(new \DateTime('now'));
                    $entityServicioHist->setUsrCreacion($arrayDatosCableado['strUsrCreacion']);
                    $entityServicioHist->setEstado('Rechazada');
                    $this->emComercial->persist($entityServicioHist);
                    $this->emComercial->flush();
                }
            }
            // Actualizamos los estados de los detalles de la solicitud seleccionada
            $arrayDetalles = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                ->findByParameters(array('servicioId' => $servicio->getId()));
            foreach($arrayDetalles as $detalle)
            {
                $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneById($detalle['tipoSolicitudId']);
                if ($objTipoSolicitud->getDescripcionSolicitud() == $objCableParametro['valor2'])
                {
                    $entityDetSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                    ->findOneById($detalle['id']);
                    // Cambiamos el estado de las solicitudes
                    if (in_array($entityDetSolicitud->getEstado(), $arrayEstadosPermitidos))
                    {
                        $entityDetSolicitud->setEstado($arrayDatosCableado['strEstado']);
                        $this->emComercial->persist($entityDetSolicitud);
                        $this->emComercial->flush();
                    }
                    else if ($entityDetSolicitud->getEstado() == 'Activo' && $strAdicional == "SI")
                    {
                        $entityDetSolicitud->setEstado('Rechazada');
                        $this->emComercial->persist($entityDetSolicitud);
                        $this->emComercial->flush();
                    }
                    else if ($entityDetSolicitud->getEstado() == 'Activo' && $strAdicional == "NO")
                    {
                        $entityDetSolicitud->setEstado('Trasladado');
                        $this->emComercial->persist($entityDetSolicitud);
                        $this->emComercial->flush();
                    }
                }
            }
        }
    }

    /**
     * Funcion que sirve para activar servicios de la empresa TN bajo la red GPON
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 03-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 18-10-2021 - Se agrega los métodos para las activaciones de los servicios Switch PoE y migración de cámaras.
     *
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.2 11-10-2022 - Se realiza la finalizacion de la tarea para el servicio DATOS SAFECITY
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 2.0 17-1-2023 - Se agrega arreglos elemento adicionales clente y nodo para servicios safe city.
     * 
     * @param Array $arrayParametros
     *
     * @return Array $arrayRessultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'mensaje'   => mensaje de la operación o de error
     *                               ]
     *
     */
    public function activarClienteTNGpon($arrayParametros)
    {
        $intIdServicio     = $arrayParametros['idServicio'];
        $strUsrCreacion    = $arrayParametros['usrCreacion'];
        $strIpCreacion     = $arrayParametros['ipCreacion'];

        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        $this->emNaf->getConnection()->beginTransaction();
        try
        {
            //obtengo el servicio
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }
            //obtengo el producto
            $objProducto = $objServicio->getProductoId();
            //validar emsoporte
            if($objProducto->getNombreTecnico() === "DATOS SAFECITY" || $objProducto->getNombreTecnico() === "SAFECITYSWPOE")
            {
                $this->emSoporte->getConnection()->beginTransaction();
            }
            //validar producto
            if($objProducto->getNombreTecnico() === "L3MPLS" || $objProducto->getNombreTecnico() === "INTERNET"
               || $objProducto->getNombreTecnico() === "INTMPLS")
            {
                $arrayRespuesta = $this->activarClienteNuevaTNGpon($arrayParametros);
                $strStatus      = $arrayRespuesta["status"];
                $strMensaje     = $arrayRespuesta["mensaje"];
            }
            else if($objProducto->getNombreTecnico() === "DATOS SAFECITY")
            {
                $arrayRespuesta = $this->activarClienteDatosSafecityGpon($arrayParametros);
                $strStatus      = $arrayRespuesta["status"];
                $strMensaje     = $arrayRespuesta["mensaje"];
            }
            else if($objProducto->getNombreTecnico() === "SAFECITYSWPOE")
            {
                $arrayRespuesta = $this->activarServicioSwPoeTNGpon($arrayParametros);
                $strStatus      = $arrayRespuesta["status"];
                $strMensaje     = $arrayRespuesta["mensaje"];
            }
            else if($objProducto->getNombreTecnico() === "SAFECITYDATOS")
            {
                $arrayRespuesta = $this->activarMigracionCamaraTNGpon($arrayParametros);
                $strStatus      = $arrayRespuesta["status"];
                $strMensaje     = $arrayRespuesta["mensaje"];
            }
            //verificar
            if($strStatus != "OK")
            {
                throw new \Exception($strMensaje);
            }
            //se guardan los cambios
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->commit();
                $this->emInfraestructura->getConnection()->close();
            }
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->commit();
                $this->emComercial->getConnection()->close();
            }
            if ($this->emNaf->getConnection()->isTransactionActive())
            {
                $this->emNaf->getConnection()->commit();
                $this->emNaf->getConnection()->close();
            }
            //validar producto y emsoporte
            if( ($objProducto->getNombreTecnico() === "DATOS SAFECITY" || $objProducto->getNombreTecnico() === "SAFECITYSWPOE")
                && $this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
                $this->emSoporte->getConnection()->close();
            }
            /*validar que el servicio sea SW POE y que se debe finalizar la tarea o que el servicio sea DATOS SAFECITY  */
            if($objProducto->getNombreTecnico() === "SAFECITYSWPOE" && $arrayParametros['booleanFinalizarTareaGpon']
               ||$objProducto->getNombreTecnico() === "DATOS SAFECITY")
            {
                //obtengo el id detalle de la tarea
                $objCaractIdDetalle = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                    'ID_DETALLE_TAREA_INSTALACION',$objServicio->getProductoId());
                if(!is_object($objCaractIdDetalle))
                {
                    $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                            ->findOneBy(array("descripcionSolicitud"=>"SOLICITUD PLANIFICACION",
                                                                              "estado"=>"Activo"));
                    $objCaractIdDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                           ->findOneBy(array("servicioId"=>$objServicio->getId(),
                                                                             "tipoSolicitudId"=>$objTipoSolicitud->getId()));
                    $objDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                  ->findOneBy(array("detalleSolicitudId"=>$objCaractIdDetalle->getId()));
                }
                if(is_object($objCaractIdDetalle))
                {
                    //obtengo el info detalle
                    $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                      ->find($objDetalle?$objDetalle->getId():$objCaractIdDetalle->getValor());
                    if(is_object($objInfoDetalle))
                    {
                        /*Armamos el parametro para realizar la peticion.*/
                        $arrayParametrosFinTarea = array(
                            'idEmpresa'               => $arrayParametros['idEmpresa'],
                            'prefijoEmpresa'          => $arrayParametros['prefijoEmpresa'],
                            'idDetalle'               => $objInfoDetalle->getId(),
                            'idAsignado'              => null,
                            'observacion'             => 'Se finaliza tarea de forma automatica.',
                            'usrCreacion'             => $strUsrCreacion,
                            'ipCreacion'              => $strIpCreacion,
                            'accionTarea'             => 'finalizada'
                        );
                        /*Ejecutamos la petición de cerrar tarea.*/
                        $arrayRespTareaFin = $this->serviceSoporte->finalizarTarea($arrayParametrosFinTarea);
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->rollback();
                $this->emInfraestructura->getConnection()->close();
            }
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
                $this->emComercial->getConnection()->close();
            }
            if ($this->emNaf->getConnection()->isTransactionActive())
            {
                $this->emNaf->getConnection()->rollback();
                $this->emNaf->getConnection()->close();
            }
            if($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
                $this->emSoporte->getConnection()->close();
            }
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activarClienteTNGpon',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            $strMensaje = $e->getMessage();
            $strStatus  = "ERROR";
        }
        //respuesta
        $arrayRessultado[] = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRessultado;
    }

    /**
     * Funcion que sirve para activar servicios de DATOS e INTERNET de la empresa TN bajo la red GPON
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 03-05-2021
     *
     * @param Array $arrayParametros
     *
     * @return Array $arrayRessultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'mensaje'   => mensaje de la operación o de error
     *                               ]
     *
     */
    public function activarClienteNuevaTNGpon($arrayParametros)
    {
        $intIdServicio     = $arrayParametros['idServicio'];
        $intIdEmpresa      = $arrayParametros['idEmpresa'];
        $strPrefijoEmpresa = $arrayParametros['prefijoEmpresa'];
        $strUsrCreacion    = $arrayParametros['usrCreacion'];
        $strIpCreacion     = $arrayParametros['ipCreacion'];

        try
        {
            $strVrfServicio         = $arrayParametros['vrf'];
            $strIpServicio          = $arrayParametros['ipServicio'];
            $strSubredServicio      = $arrayParametros['subredServicio'];
            $strGatewayServicio     = $arrayParametros['gwSubredServicio'];
            $booleanUmExistente     = false;
            $strCodigoArticulo      = "";
            $strTipoArticulo        = "AF";
            $strIdentificacionCliente = "";
            $strMacElementoCliente  = "";
            $strNombreOnt           = "";
            $intIdOnt               = "";

            //datos
            $strVlan                = $arrayParametros['vlan'];
            $strMacOnt              = $arrayParametros['macOnt'];
            $strSerieOnt            = trim(strtoupper($arrayParametros['serieOnt']));
            $strModeloOnt           = $arrayParametros['modeloOnt'];
            $strUltimaMilla         = $arrayParametros['ultimaMilla'];

            //datos cpe
            $strFlagCpe             = $arrayParametros['flagCpe'];
            $strNombreNuevoCpe      = $arrayParametros['nombreNuevoCpe'];
            $strSerieNuevoCpe       = $arrayParametros['serieNuevoCpe'];
            $strModeloNuevoCpe      = $arrayParametros['modeloNuevoCpe'];
            $strMacNuevoCpe         = $arrayParametros['macNuevoCpe'];
            $strPropiedadNuevoCpe   = $arrayParametros['propiedadNuevoCpe'];
            $strIosNuevoCpe         = $arrayParametros['iosNuevoCpe'];
            $strGestionNuevoCpe     = $arrayParametros['gestionNuevoCpe'];
            $strAdministraNuevoCpe  = $arrayParametros['administraNuevoCpe'];

            //datos cpe existente
            $strEsCpeExistente      = $arrayParametros['strEsCpeExistente'];
            $strMacCpeExistente     = $arrayParametros['macCpeExistente'];
            $strSerieCpeExistente   = $arrayParametros['serieExisteCpe'];
            $intServicioIdExisteCpe = $arrayParametros['idServicioExisteCpe'];
            $strPropiedadExisteCpe  = $arrayParametros['propiedadExisteCpe'];
            $strNombreExisteCpe     = $arrayParametros['nombreExisteCpe'];
            $strModeloExisteCpe     = $arrayParametros['modeloExisteCpe'];
            $strIosExisteCpe        = $arrayParametros['iosExisteCpe'];
            $strGestionExisteCpe    = $arrayParametros['gestionExisteCpe'];
            $strAdministraExisteCpe = $arrayParametros['administraExisteCpe'];

            $intIdInterfaceCpeExistente = $arrayParametros['interfaceCpeExistente'];

            $arrayParametrosAuditoria = array();

            //obtengo el servicio
            $objServicio  = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }
            //obtengo el punto
            $objPunto               = $objServicio->getPuntoId();
            //obtengo el producto
            $objProducto            = $objServicio->getProductoId();
            //obtengo el servicio tecnico
            $objServicioTecnico     = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                   ->findOneByServicioId($objServicio->getId());
            //obtengo la interface elemento
            $objInterfaceElemento   = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoId());
            //obtengo ultima milla
            $objUltimaMilla                 = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                ->find($objServicioTecnico->getUltimaMillaId());
            //obtengo los datos tecnicos
            $objInterfaceElementoConector   = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                ->find($objServicioTecnico->getInterfaceElementoConectorId());
            //se setea la interface del cliente
            $objInterfaceElementoVecinoOut  = $objInterfaceElementoConector;
            //Se obtiene caracteristica si servicio se activa con ultima milla existente
            $objServProdCaractMismaUM   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                   'SERVICIO_MISMA_ULTIMA_MILLA',
                                                                                   $objProducto);
            if(is_object($objServProdCaractMismaUM))
            {
                $booleanUmExistente = true;
            }
            //obtiene la capacidad uno
            $objCaractCapacidadUno = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,'CAPACIDAD1',$objProducto);
            if(!is_object($objCaractCapacidadUno))
            {
                throw new \Exception("No se encontró la capacidad uno en la característica del servicio, por favor notificar a Sistemas.");
            }
            //obtiene la capacidad uno
            $objCaractCapacidadDos = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,'CAPACIDAD2',$objProducto);
            if(!is_object($objCaractCapacidadDos))
            {
                throw new \Exception("No se encontró la capacidad dos en la característica del servicio, por favor notificar a Sistemas.");
            }

            //verificar ont
            if(!$booleanUmExistente && $strFlagCpe == "nuevo")
            {
                $arrayVerifOntNaf   = $this->servicioGeneral->buscarEquipoEnNafPorParametros(array( "serieEquipo"           => $strSerieOnt,
                                                                                                    "estadoEquipo"          => "PI",
                                                                                                    "tipoArticuloEquipo"    => "AF",
                                                                                                    "modeloEquipo"          => $strModeloOnt));
                if($arrayVerifOntNaf["status"] === "ERROR")
                {
                    throw new \Exception($arrayVerifOntNaf["mensaje"]);
                }
                //validar tipo elemento cpe ont
                $arrayValidModeloElementoOnt = $this->emInfraestructura->getRepository("schemaBundle:AdmiModeloElemento")
                                                                ->createQueryBuilder('s')
                                                                ->join("s.tipoElementoId", "t")
                                                                ->where("t.nombreTipoElemento      = :nombreTipoElemento")
                                                                ->andWhere("s.nombreModeloElemento = :nombreModeloElemento")
                                                                ->andWhere("s.estado               = :estado")
                                                                ->setParameter('nombreTipoElemento',   "CPE ONT")
                                                                ->setParameter('nombreModeloElemento', $strModeloOnt)
                                                                ->setParameter('estado',               "Activo")
                                                                ->orderBy('s.id', 'ASC')
                                                                ->getQuery()
                                                                ->getResult();
                if(!isset($arrayValidModeloElementoOnt) || empty($arrayValidModeloElementoOnt) || !is_array($arrayValidModeloElementoOnt))
                {
                    throw new \Exception("ERROR ONT: El elemento ingresado no es de tipo CPE ONT, favor verificar.");
                }
            }
            else
            {
                //obtengo el servicio
                $objServicioCpeExiste = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioIdExisteCpe);
                //obtengo el servicio tecnico del servicio misma um
                $objSerTeCpeExiste    = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                         ->findOneBy(array("servicioId" => $intServicioIdExisteCpe));
                if(is_object($objServicioCpeExiste) && is_object($objSerTeCpeExiste))
                {
                    //obtengo la mac del ont
                    $objServProdCaractMac = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioCpeExiste,'MAC ONT',
                                                                                                      $objServicioCpeExiste->getProductoId());
                    if(is_object($objServProdCaractMac))
                    {
                        $strMacOnt = $objServProdCaractMac->getValor();
                    }
                    //obtengo el indice del cliente
                    $objServProdCaractIndice = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioCpeExiste,'INDICE CLIENTE',
                                                                                                         $objServicioCpeExiste->getProductoId());
                    if(is_object($objServProdCaractIndice))
                    {
                        $intIdOnt = $objServProdCaractIndice->getValor();
                    }
                    //obtengo el enlace del ont
                    $objInfoEnlaceOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                        ->findOneBy(array( "interfaceElementoFinId" => $objSerTeCpeExiste->getInterfaceElementoClienteId(), 
                                                           "estado"                 => "Activo"));
                    if(is_object($objInfoEnlaceOnt))
                    {
                        //obtengo la interface del ont
                        $objInterfaceOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                    ->find($objInfoEnlaceOnt->getInterfaceElementoIniId());
                        if(is_object($objInterfaceOnt))
                        {
                            //se obtiene el elemento
                            $objElementoOnt = $objInterfaceOnt->getElementoId();
                            //se setea el modelo
                            $strModeloOnt   = $objElementoOnt->getModeloElementoId()->getNombreModeloElemento();
                            //se setea la serie
                            $strSerieOnt    = $objElementoOnt->getSerieFisica();
                            //se setea la interface del cliente
                            $objInterfaceElementoVecinoOut  = $objInterfaceOnt;
                        }
                        else
                        {
                            throw new \Exception("No se encontró la interface del elemento del ONT, por favor notificar a Sistemas.");
                        }
                    }
                    else
                    {
                        throw new \Exception("No se encontró el enlace del CPE con el ONT, por favor notificar a Sistemas.");
                    }
                }
                else
                {
                    throw new \Exception("No se encontró el servicio técnico del servicio con la misma última milla, ".
                                         "por favor notificar a Sistemas.");
                }
            }
            //verificar cpe
            if(!$booleanUmExistente && $strPropiedadNuevoCpe == "TELCONET" && $strEsCpeExistente != "SI")
            {
                $arrayElementoClienteCpe = $this->servicioGeneral->buscarElementoEnNaf($strSerieNuevoCpe, $strModeloNuevoCpe,
                                                                                       "PI", "ActivarServicio");
                if($arrayElementoClienteCpe[0]["status"] === "ERROR")
                {
                    throw new \Exception("ERROR CPE NAF: ".$arrayElementoClienteCpe[0]["mensaje"]);
                }
                //validar tipo elemento cpe
                $arrayValidModeloElementoCpe = $this->emInfraestructura->getRepository("schemaBundle:AdmiModeloElemento")
                                                                ->createQueryBuilder('s')
                                                                ->join("s.tipoElementoId", "t")
                                                                ->where("t.nombreTipoElemento      = :nombreTipoElemento")
                                                                ->andWhere("s.nombreModeloElemento = :nombreModeloElemento")
                                                                ->andWhere("s.estado               = :estado")
                                                                ->setParameter('nombreTipoElemento',   "CPE")
                                                                ->setParameter('nombreModeloElemento', $strModeloNuevoCpe)
                                                                ->setParameter('estado',               "Activo")
                                                                ->orderBy('s.id', 'ASC')
                                                                ->getQuery()
                                                                ->getResult();
                if(!isset($arrayValidModeloElementoCpe) || empty($arrayValidModeloElementoCpe) || !is_array($arrayValidModeloElementoCpe))
                {
                    throw new \Exception("ERROR CPE: El elemento seleccionado no es un tipo elemento CPE, por favor notificar a Sistemas.");
                }
            }

            $arrayParametrosWsGpon                          = array();
            $arrayParametrosWsGpon["strEsCamaraSafeCity"]    = "N";
            $arrayParametrosWsGpon["objServicio"]            = $objServicio;
            $arrayParametrosWsGpon["intIdOnt"]               = $intIdOnt;
            $arrayParametrosWsGpon["strSerieOnt"]            = $strSerieOnt;
            $arrayParametrosWsGpon["strMacOnt"]              = $strMacOnt;
            $arrayParametrosWsGpon["strModeloOnt"]           = $strModeloOnt;
            $arrayParametrosWsGpon["strPuertoOnt"]           = "";
            $arrayParametrosWsGpon["strTieneCpe"]            = "S";
            $arrayParametrosWsGpon["strVlan"]                = $strVlan;
            $arrayParametrosWsGpon["strVrf"]                 = $strVrfServicio;
            $arrayParametrosWsGpon["strIpServicio"]          = $strIpServicio;
            $arrayParametrosWsGpon["strSubredServicio"]      = $strSubredServicio;     
            $arrayParametrosWsGpon["strGatewayServicio"]     = $strGatewayServicio;
            $arrayParametrosWsGpon["strNombreParametroRda"]  = "PARAMETROS PARA WS de RDA - Activacion";
            $arrayParametrosWsGpon["intIdEmpresa"]           = $intIdEmpresa;
            $arrayParametrosWsGpon["strPrefijoEmpresa"]      = $strPrefijoEmpresa;
            $arrayParametrosWsGpon["strUsrCreacion"]         = $strUsrCreacion;
            $arrayParametrosWsGpon["strIpCreacion"]          = $strIpCreacion;
            //ejecuto método de activación de servicios GPON
            $arrayRespuesta = $this->llamadaWsActivarProductosGPON($arrayParametrosWsGpon);
            $strStatus      = $arrayRespuesta['status'];
            $strMensaje     = $arrayRespuesta['mensaje'];
            if($strStatus != "OK")
            {
                throw new \Exception($strMensaje);
            }

            //actualizar concentrador
            if($objProducto->getNombreTecnico() === "L3MPLS")
            {
                //verificar si tiene enlace datos
                $objSpcEnlaceDatos = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio, "ENLACE_DATOS", $objProducto);
                //Se realiza validacion para que solo ejecute recalculo de BW para Servicios con tipo de enlace PRINCIPAL
                $strValidaEnlace = ($objServicioTecnico->getTipoEnlace() !== null) ?
                                   substr($objServicioTecnico->getTipoEnlace(), 0, 9):$objServicioTecnico->getTipoEnlace();
                if($strValidaEnlace == 'PRINCIPAL' && is_object($objSpcEnlaceDatos))
                {
                    //subir bw del concentrador por activacion de nuevo servicio
                    $arrayParametrosBw = array(
                                                "objServicio"       => $objServicio,
                                                "usrCreacion"       => $strUsrCreacion,
                                                "ipCreacion"        => $strIpCreacion,
                                                "capacidadUnoNueva" => intval($objCaractCapacidadUno->getValor()),
                                                "capacidadDosNueva" => intval($objCaractCapacidadDos->getValor()),
                                                "operacion"         => "+",
                                                "accion"            => "Se actualiza Capacidades por Activación de "
                                                                       . "Servicio : <b>".$objServicio->getLoginAux()."<b>"
                                            );
                    //Se actualiza las capacidades del Concentrador
                    $this->servicioGeneral->actualizarCapacidadesEnConcentrador($arrayParametrosBw);
                }
            }

            //seteo las variables
            $arrayParametrosDatos = $arrayRespuesta['arrayDatosMiddleware']['datos'];
            $arrayDatosActivar    = $arrayParametrosDatos['datos_activar'][0];
            $booleanServicioNuevo = $arrayRespuesta['booleanServicioNuevo'];
            $objServicioPuntoAnt  = $arrayRespuesta['objServicioPunto'];

            //se ingresa indice del cliente
            if(isset($arrayRespuesta['ontId']))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                               $objProducto,
                                                                               "INDICE CLIENTE",
                                                                               $arrayRespuesta['ontId'],
                                                                               $strUsrCreacion);
            }
            else
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                               $objProducto,
                                                                               "INDICE CLIENTE",
                                                                               $arrayParametrosDatos['ont_id'],
                                                                               $strUsrCreacion);
            }
            //se ingresa spid monitoreo
            if(isset($arrayRespuesta['spId_Monitoreo']) && !empty($arrayRespuesta['spId_Monitoreo']) && !is_array($arrayRespuesta['spId_Monitoreo']))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                               $objProducto,
                                                                               "SPID MONITOREO",
                                                                               $arrayRespuesta['spId_Monitoreo'],
                                                                               $strUsrCreacion);
            }
            else if(is_object($objServicioPuntoAnt))
            {
                $objCaractSpidMonitoreo = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoAnt,
                                                                                                    'SPID MONITOREO',
                                                                                                    $objServicioPuntoAnt->getProductoId());
                if(is_object($objCaractSpidMonitoreo))
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                   $objProducto,
                                                                                   "SPID MONITOREO",
                                                                                   $objCaractSpidMonitoreo->getValor(),
                                                                                   $strUsrCreacion);
                }
            }
            //se ingresa spid
            if(isset($arrayRespuesta['spId_Internet']) && !is_array($arrayRespuesta['spId_Internet']))
            {
                //se ingresa spid internet
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                               $objProducto,
                                                                               "SPID",
                                                                               $arrayRespuesta['spId_Internet'],
                                                                               $strUsrCreacion);
            }
            else if(isset($arrayRespuesta['spId_Datos']) && !empty($arrayRespuesta['spId_Datos']))
            {
                //se ingresa spid datos
                if(is_array($arrayRespuesta['spId_Datos']))
                {
                    $strSpIdDatos = $arrayRespuesta['spId_Datos'][0];
                }
                else
                {
                    $strSpIdDatos = $arrayRespuesta['spId_Datos'];
                }
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                               $objProducto,
                                                                               "SPID",
                                                                               $strSpIdDatos,
                                                                               $strUsrCreacion);
            }
            else if(is_object($objServicioPuntoAnt))
            {
                $objCaractSpid = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPuntoAnt,
                                                                                           'SPID',
                                                                                           $objServicioPuntoAnt->getProductoId());
                if(is_object($objCaractSpid))
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                                   $objProducto,
                                                                                   "SPID",
                                                                                   $objCaractSpid->getValor(),
                                                                                   $strUsrCreacion);
                }
            }
            //seteo la line-profile-name
            $strLineProfileName = $arrayParametrosDatos['line_profile'];
            //verifico si es el primer servicio para el punto y que sea un datos
            if( $booleanServicioNuevo && $objProducto->getNombreTecnico() === "L3MPLS"
                && isset($arrayRespuesta['LINE_PROFILE']) && !empty($arrayRespuesta['LINE_PROFILE']) )
            {
                $strLineProfileName = $arrayRespuesta['LINE_PROFILE'];
                //actualizar line profile al resto de servicios
                $arrayNombresTecnico    = array("L3MPLS","SAFECITYDATOS","SAFECITYWIFI","INTERNET","INTMPLS");
                $arrayServiciosPunto    = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                                ->createQueryBuilder('s')
                                                                ->join("s.productoId", "p")
                                                                ->join("s.puntoId", "pu")
                                                                ->where("pu.id       = :puntoId")
                                                                ->andWhere("s.estado = :estado")
                                                                ->andWhere("p.nombreTecnico IN (:nombresTecnico)")
                                                                ->setParameter('puntoId', $objServicio->getPuntoId()->getId())
                                                                ->setParameter('estado',  "Activo")
                                                                ->setParameter('nombresTecnico', array_values($arrayNombresTecnico))
                                                                ->orderBy('s.id', 'ASC')
                                                                ->getQuery()
                                                                ->getResult();
                foreach($arrayServiciosPunto as $objServicioPunto)
                {
                    //verificar productos
                    $objProductoPunto = $objServicioPunto->getProductoId();
                    $objCaractTipoRed = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,
                                                                                                  'TIPO_RED',
                                                                                                  $objServicioPunto->getProductoId());
                    $objCaractMacOntPun = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,'MAC ONT',$objProductoPunto);
                    //verificar si el servicio es tipo red GPON
                    $booleanTipoRedGponPun = false;
                    if(is_object($objCaractTipoRed))
                    {
                        $arrayParVerTipoRedPun = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $objCaractTipoRed->getValor(),
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                        if(isset($arrayParVerTipoRedPun) && !empty($arrayParVerTipoRedPun))
                        {
                            $booleanTipoRedGponPun = true;
                        }
                    }
                    if(is_object($objCaractTipoRed) && $booleanTipoRedGponPun
                       && is_object($objCaractMacOntPun) && $objCaractMacOntPun->getValor() == $strMacOnt)
                    {
                        $objCaractLineProfilePun = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioPunto,"LINE-PROFILE-NAME",
                                                                                                             $objProductoPunto);
                        if(is_object($objCaractLineProfilePun))
                        {
                            $objCaractLineProfilePun->setEstado('Eliminado');
                            $this->emComercial->persist($objCaractLineProfilePun);
                            $this->emComercial->flush();
                        }
                        //se ingresa la característica line profile name
                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioPunto,$objProductoPunto,"LINE-PROFILE-NAME",
                                                                                       $strLineProfileName,$strUsrCreacion);
                    }
                }
            }
            //se ingresa la característica line profile name
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"LINE-PROFILE-NAME",
                                                                           $strLineProfileName,$strUsrCreacion);
            //se ingresa la característica service-profile-name
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"SERVICE-PROFILE",
                                                                           $arrayParametrosDatos['service_profile'],$strUsrCreacion);
            //se ingresa las características de monitoreo
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"GEM-PORT-MONITOREO",
                                                                           $arrayParametrosDatos['gemport_monitoreo'],$strUsrCreacion);
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"TRAFFIC-TABLE-MONITOREO",
                                                                           $arrayParametrosDatos['traffic_table_monitoreo'],$strUsrCreacion);
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"T-CONT-MONITOREO",
                                                                           $arrayParametrosDatos['t_cont_monitoreo'],$strUsrCreacion);
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"ID-MAPPING-MONITOREO",
                                                                           $arrayParametrosDatos['id_mapping_monitoreo'],$strUsrCreacion);
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"VLAN-MONITOREO",
                                                                           $arrayParametrosDatos['vlan_monitoreo'],$strUsrCreacion);
            //verfico si es datos
            if($objProducto->getNombreTecnico() === "L3MPLS")
            {
                //se ingresa las características
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"GEM-PORT",
                                                                               $arrayDatosActivar['gemport_datos'],$strUsrCreacion);
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"TRAFFIC-TABLE",
                                                                               $arrayDatosActivar['traffic_table_datos'],$strUsrCreacion);
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"T-CONT",
                                                                               $arrayDatosActivar['t_cont_datos'],$strUsrCreacion);
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"ID-MAPPING",
                                                                               $arrayDatosActivar['id_mapping_datos'],$strUsrCreacion);
            }
            else
            {
                //se ingresa las características
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"GEM-PORT",
                                                                               $arrayParametrosDatos['gemport_internet'],$strUsrCreacion);
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"TRAFFIC-TABLE",
                                                                               $arrayParametrosDatos['traffic_table_internet'],$strUsrCreacion);
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"T-CONT",
                                                                               $arrayParametrosDatos['t_cont_internet'],$strUsrCreacion);
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"ID-MAPPING",
                                                                               $arrayParametrosDatos['id_mapping_internet'],$strUsrCreacion);
            }

            //se verifica si no es misma milla
            if(!$booleanUmExistente && $strFlagCpe == "nuevo")
            {
                //registrar ont
                $arrayOntNaf    = $this->servicioGeneral->buscarElementoEnNaf($strSerieOnt, $strModeloOnt, "PI", "ActivarServicio");
                if( isset($arrayOntNaf[0]['status']) && $arrayOntNaf[0]['status'] == "OK")
                {
                    $objInterfaceOnt = $this->servicioGeneral->ingresarElementoCliente($objPunto->getLogin(), $strSerieOnt, $strModeloOnt, "-ont",
                                                                   $objInterfaceElementoConector, $strUltimaMilla, $objServicio, $strUsrCreacion,
                                                                   $strIpCreacion, $intIdEmpresa);
                    $strNombreOnt    = $objInterfaceOnt->getElementoId()->getNombreElemento();
                    $objInterfaceElementoVecinoOut = $objInterfaceOnt;
                    //actualizamos registro en el naf ont
                    $strMensajeError = str_repeat(' ', 1000);
                    $strSql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                    . ":cantidad, :pv_mensajeerror); END;";
                    $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                    $objStmt->bindParam('codigoEmpresaNaf', $intIdEmpresa);
                    $objStmt->bindParam('codigoArticulo', $strCodigoArticulo);
                    $objStmt->bindParam('tipoArticulo',$strTipoArticulo);
                    $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                    $objStmt->bindParam('serieCpe', $strSerieOnt);
                    $objStmt->bindParam('cantidad', intval(1));
                    $objStmt->bindParam('pv_mensajeerror', $strMensajeError);
                    $objStmt->execute();
                    //verifico si hay error
                    if(strlen(trim($strMensajeError))>0)
                    {
                        throw new \Exception("ERROR ONT NAF: ".$strMensajeError);
                    }
                }
                else
                {
                    throw new \Exception($arrayOntNaf[0]['mensaje']);
                }
            }

            //Si el servicio utiliza una ULTIMA MILLA NUEVA
            if(!$booleanUmExistente)
            {
                //se valida que si se escogio nuevo CPE ( se proceda a realizar el flujo normal )
                if($strFlagCpe == "nuevo")
                {
                    $arrayParametrosCpe = array(
                                                'nombreElementoCliente'         => $objServicio->getLoginAux(),
                                                'nombreModeloElementoCliente'   => $strModeloNuevoCpe,
                                                'serieElementoCliente'          => $strSerieNuevoCpe,
                                                'objInterfaceElementoVecinoOut' => $objInterfaceElementoVecinoOut,
                                                'objUltimaMilla'                => $objUltimaMilla,
                                                'objServicio'                   => $objServicio,
                                                'intIdEmpresa'                  => $intIdEmpresa,
                                                'usrCreacion'                   => $strUsrCreacion,
                                                'ipCreacion'                    => $strIpCreacion,
                                                'esServicioNuevo'               => "SI",
                                                'strTipoOrden'                  => $objServicio->getTipoOrden(),
                                                'strTipoEnlace'                 => $objServicioTecnico->getTipoEnlace()
                                            );
                    $objInterfaceElementoCliente = $this->servicioGeneral->ingresarElementoClienteTN($arrayParametrosCpe,"CPE");
                    //se actualiza registro en el NAF
                    if($strPropiedadNuevoCpe == "TELCONET" && $strEsCpeExistente == "NO")
                    {
                        //actualizamos registro en el naf cpe
                        $strMensajeError = str_repeat(' ', 1000);
                        $strSql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                        . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                        . ":cantidad, :pv_mensajeerror); END;";
                        $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                        $objStmt->bindParam('codigoEmpresaNaf',        $intIdEmpresa);
                        $objStmt->bindParam('codigoArticulo',          $strCodigoArticulo);
                        $objStmt->bindParam('tipoArticulo',            $strTipoArticulo);
                        $objStmt->bindParam('identificacionCliente',   $strIdentificacionCliente);
                        $objStmt->bindParam('serieCpe',                $strSerieNuevoCpe);
                        $objStmt->bindParam('cantidad',                intval(1));
                        $objStmt->bindParam('pv_mensajeerror',         $strMensajeError);
                        $objStmt->execute();
                        if(strlen(trim($strMensajeError)) > 0)
                        {
                            throw new \Exception("ERROR CPE NAF: ".$strMensajeError);
                        }
                    }
                    $objElementoCliente = $objInterfaceElementoCliente->getElementoId();
                    //info_detalle_elemento propiedad
                    $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "PROPIEDAD", "ELEMENTO PROPIEDAD DE",
                                                                    $strPropiedadNuevoCpe, $strUsrCreacion, $strIpCreacion);
                    //info_detalle_elemento gestion remota
                    $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "GESTION REMOTA", "ELEMENTO GESTION REMOTA",
                                                                    $strGestionNuevoCpe, $strUsrCreacion, $strIpCreacion);
                    //info_detalle_elemento administra
                    $this->servicioGeneral->ingresarDetalleElemento($objElementoCliente, "ADMINISTRA", "ELEMENTO ES ADMINISTRADO POR",
                                                                    $strAdministraNuevoCpe, $strUsrCreacion, $strIpCreacion);
                    //info_elemento ios
                    $objElementoCliente->setVersionOs($strIosNuevoCpe);
                    $this->emInfraestructura->persist($objElementoCliente);
                    $this->emInfraestructura->flush();
                }
                else
                {
                    //Se obtiene la informacion del CPE existente y su respectivo puerto
                    $objInterfaceElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                           ->find($intIdInterfaceCpeExistente);
                    //Enlazar puerto del Tx al puerto disponible del CPE existente
                    $objEnlace = new InfoEnlace();
                    $objEnlace->setInterfaceElementoIniId($objInterfaceElementoVecinoOut);
                    $objEnlace->setInterfaceElementoFinId($objInterfaceElementoCliente);
                    $objEnlace->setTipoMedioId($objUltimaMilla);
                    $objEnlace->setTipoEnlace($objServicioTecnico->getTipoEnlace());
                    $objEnlace->setEstado("Activo");
                    $objEnlace->setUsrCreacion($strUsrCreacion);
                    $objEnlace->setFeCreacion(new \DateTime('now'));
                    $objEnlace->setIpCreacion($strIpCreacion);
                    $this->emInfraestructura->persist($objEnlace);
                    //conectar interface in del puerto disponible del cpe existente
                    $objInterfaceElementoCliente->setEstado("connected");
                    $this->emInfraestructura->persist($objInterfaceElementoCliente);
                    $this->emInfraestructura->flush();
                    //SE REGISTRA EL TRACKING DEL ELEMENTO
                    $arrayParametrosAuditoria["strNumeroSerie"]  = $strSerieCpeExistente;
                    $arrayParametrosAuditoria["strEstadoTelcos"] = 'Activo';
                    $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
                    $arrayParametrosAuditoria["strEstadoActivo"] = 'Activo';
                    $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
                    $arrayParametrosAuditoria["strCodEmpresa"]   = $intIdEmpresa;
                    $arrayParametrosAuditoria["strTransaccion"]  = 'Activacion Cliente';
                    $arrayParametrosAuditoria["intOficinaId"]    = 0;
                    $arrayParametrosAuditoria["strLogin"]        = $objPunto->getLogin();
                    $arrayParametrosAuditoria["strUsrCreacion"]  = $strUsrCreacion;
                    //ingreso auditoria
                    $this->serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
                }
                //Determinar primero si existe CPE
                $objInterfaceElementoCliente->setMacInterfaceElemento($strMacNuevoCpe);
                $this->emInfraestructura->persist($objInterfaceElementoCliente);
                $this->emInfraestructura->flush();
                //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                $objInfoDetalleInterface = new InfoDetalleInterface();
                $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCliente);
                $objInfoDetalleInterface->setDetalleNombre("servicio");
                $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                $this->emInfraestructura->persist($objInfoDetalleInterface);
                $this->emInfraestructura->flush();
                //guardar cpe en servicio tecnico
                $objServicioTecnico->setElementoClienteId($objInterfaceElementoCliente->getElementoId()->getId());
                $objServicioTecnico->setInterfaceElementoClienteId($objInterfaceElementoCliente->getId());
                $this->emComercial->persist($objServicioTecnico);
                $this->emComercial->flush();
                //seteo mac cliente
                $strMacElementoCliente = $strMacNuevoCpe;
            }
            else
            {
                //Interface escogida del mismo CPE para enganchar la nueva MAC del servicio a Activar
                $objInterfaceElementoCpeExistente = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                            ->find($intIdInterfaceCpeExistente);

                if(is_object($objInterfaceElementoCpeExistente))
                {
                    //Se setea el puerto del CPE con al informacion del Servicio configurado y se cambia a estado "connected"
                    //En caso de estar ya conectada la interface se continua a agregar el servicio a la referencia de la interface
                    $objInterfaceElementoCpeExistente->setMacInterfaceElemento($strMacCpeExistente);
                    $objInterfaceElementoCpeExistente->setEstado("connected");
                    $this->emInfraestructura->persist($objInterfaceElementoCpeExistente);
                    $this->emInfraestructura->flush();
                    //Se guarda referencia en la detalle interface del servicio relacionado a este puerto y mac
                    $objInfoDetalleInterface = new InfoDetalleInterface();
                    $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoCpeExistente);
                    $objInfoDetalleInterface->setDetalleNombre("servicio");
                    $objInfoDetalleInterface->setDetalleValor($objServicio->getId());
                    $objInfoDetalleInterface->setUsrCreacion($strUsrCreacion);
                    $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
                    $objInfoDetalleInterface->setIpCreacion($strIpCreacion);
                    $this->emInfraestructura->persist($objInfoDetalleInterface);
                    $this->emInfraestructura->flush();
                }
                //Se obtiene la data tecnica del servicio del cual se esta referenciando
                $objServicioTecnicoCpeExiste  = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                     ->findOneBy(array("servicioId" => $intServicioIdExisteCpe));
                //guardar cpe/roseta/radio en servicio tecnico
                if(is_object($objServicioTecnicoCpeExiste))
                {
                    $objServicioTecnico->setElementoClienteId($objServicioTecnicoCpeExiste->getElementoClienteId());
                    $objServicioTecnico->setInterfaceElementoClienteId($objServicioTecnicoCpeExiste->getInterfaceElementoClienteId());
                    $this->emComercial->persist($objServicioTecnico);
                    $this->emComercial->flush();
                }
                //SE REGISTRA EL TRACKING DEL ELEMENTO
                $arrayParametrosAuditoria["strNumeroSerie"]  = $strSerieCpeExistente;
                $arrayParametrosAuditoria["strEstadoTelcos"] = 'Activo';
                $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
                $arrayParametrosAuditoria["strEstadoActivo"] = 'Activo';
                $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
                $arrayParametrosAuditoria["strCodEmpresa"]   = '10';
                $arrayParametrosAuditoria["strTransaccion"]  = 'Activacion Cliente';
                $arrayParametrosAuditoria["intOficinaId"]    = 0;
                $arrayParametrosAuditoria["strLogin"]        = $objPunto->getLogin();
                $arrayParametrosAuditoria["strUsrCreacion"]  = $strUsrCreacion;
                //ingreso auditoria
                $this->serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
                //seteo mac cliente
                $strMacElementoCliente = $strMacCpeExistente;
            }

            //verifico y ingreso la mac cliente
            if(!empty($strMacElementoCliente))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"MAC CLIENTE",
                                                                               $strMacElementoCliente,$strUsrCreacion);
            }
            //verifico y ingreso mac ont
            if(!empty($strMacOnt))
            {
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objProducto,"MAC ONT",$strMacOnt,$strUsrCreacion);
            }

            //setear estado del servicio
            $objServicio->setEstado("EnPruebas");
            //conectar puerto del splitter
            $objInterfaceElemento->setEstado("connected");
            $this->emInfraestructura->persist($objInterfaceElemento);
            $this->emInfraestructura->flush();
            //setear estado del punto
            $objPunto->setEstado("Activo");
            $this->emComercial->persist($objPunto);
            $this->emComercial->flush();
            //seteo punto facturacion
            if($objServicio->getPuntoFacturacionId() == null || $objServicio->getPuntoFacturacionId() == "")
            {
                $objServicio->setPuntoFacturacionId($objPunto);
                //punto de facturacion
                $objPuntoAdicional = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                       ->findOneBy(array( "puntoId" => $objPunto->getId()));
                $objPuntoAdicional->setEsPadreFacturacion("S");
                $this->emComercial->persist($objPuntoAdicional);
                $this->emComercial->flush();
            }
            //guardar cambios servicio
            $this->emComercial->persist($objServicio);
            $this->emComercial->flush();

            //finalizar solicitud planificacion
            $objTipoSolicitudPlanficacion = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                  "estado"               => "Activo"));
            $objSolicitudPlanficacion     = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->findOneBy(array("servicioId"      => $objServicio->getId(),
                                                                  "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                  "estado"          => "AsignadoTarea"));
            if(is_object($objSolicitudPlanficacion))
            {
                $objSolicitudPlanficacion->setEstado("Finalizada");
                $this->emComercial->persist($objSolicitudPlanficacion);
                $this->emComercial->flush();
            }

            //historial del servicio cpe
            $strObservacionServicio = "Informaci&oacute;n de los Elementos del Cliente<br/>";
            if($strFlagCpe == "nuevo")
            {
                //Nuevo Ont
                $strObservacionServicioOnt = "Informaci&oacute;n del Elemento ONT<br/>";
                $strObservacionServicioOnt .= "Nuevo Ont <br/>";
                $strObservacionServicioOnt .= "Nombre Ont: ".$strNombreOnt."<br/>";
                $strObservacionServicioOnt .= "Serie Ont: ".$strSerieOnt."<br/>";
                $strObservacionServicioOnt .= "Modelo Ont: ".$strModeloOnt."<br/>";
                $strObservacionServicioOnt .= "Mac Ont: ".$strMacOnt."<br/>";
                //ingreso historial
                $this->servicioGeneral->ingresarServicioHistorial($objServicio, "EnVerificacion", $strObservacionServicioOnt,
                                                                  $strUsrCreacion, $strIpCreacion);
                //Nuevo Cpe
                $strObservacionServicio .= "Nuevo Cpe <br/>";
                $strObservacionServicio .= "Propiedad de: ".$strPropiedadNuevoCpe."<br/>";
                $strObservacionServicio .= "Nombre Cpe: ".$strNombreNuevoCpe."<br/>";
                $strObservacionServicio .= "Serie Cpe: ".$strSerieNuevoCpe."<br/>";
                $strObservacionServicio .= "Modelo Cpe: ".$strModeloNuevoCpe."<br/>";
                $strObservacionServicio .= "Mac: ".$strMacNuevoCpe."<br/>";
                $strObservacionServicio .= "Versi&oacute;n IOS Cpe: ".$strIosNuevoCpe."<br/>";
                $strObservacionServicio .= "Gestion Remota Cpe: ".$strGestionNuevoCpe."<br/>";
                $strObservacionServicio .= "Administra Cpe: ".$strAdministraNuevoCpe."<br/><br/>";
            }
            else
            {
                //Cpe Existente
                $strObservacionServicio .= "Cpe Existente de Punto<br/>";
                $strObservacionServicio .= "Propiedad de: ".$strPropiedadExisteCpe."<br/>";
                $strObservacionServicio .= "Nombre Cpe: ".$strNombreExisteCpe."<br/>";
                $strObservacionServicio .= "Serie Cpe: ".$strSerieCpeExistente."<br/>";
                $strObservacionServicio .= "Modelo Cpe: ".$strModeloExisteCpe."<br/>";
                $strObservacionServicio .= "Mac Cpe: ".$strMacCpeExistente."<br/>";
                $strObservacionServicio .= "Versi&oacute;n IOS Cpe: ".$strIosExisteCpe."<br/>";
                $strObservacionServicio .= "Gestion Remota Cpe: ".$strGestionExisteCpe."<br/>";
                $strObservacionServicio .= "Administra Cpe: ".$strAdministraExisteCpe."<br/>";
            }
            //ingreso historial
            $this->servicioGeneral->ingresarServicioHistorial($objServicio, "EnVerificacion", $strObservacionServicio,
                                                              $strUsrCreacion, $strIpCreacion);
            //ingreso historial
            $this->servicioGeneral->ingresarServicioHistorial($objServicio, "EnPruebas", "",
                                                              $strUsrCreacion, $strIpCreacion);

            //Si el servicio pasa a estado EnPruebas o Activo se verifica si no tiene login aux para poder crearlo
            if($objServicio->getEstado()=="EnPruebas" || $objServicio->getEstado()=="Activo")
            {
                //Generacion de Login Auxiliar al Servicio
                $this->servicioGeneral->generarLoginAuxiliar($objServicio->getId());
            }

            //Generar informacion en enlace BACKUP referencia de que Servicio Principal este es creado
            if(is_object($objServicioTecnico) && $objServicioTecnico->getTipoEnlace() == 'BACKUP')
            {
                $objServCaractPrincipal = $this->servicioGeneral
                                               ->getServicioProductoCaracteristica($objServicio,'ES_BACKUP',$objServicio->getProductoId());

                if(is_object($objServCaractPrincipal))
                {
                    $objServicioPrincipal = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                 ->find($objServCaractPrincipal->getValor());

                    if(is_object($objServicioPrincipal))
                    {
                        $strLoginAux = $objServicioPrincipal->getLoginAux();
                        if(!empty($strLoginAux))
                        {
                            $strObservacionServicio = "Se creó Servicio <b>BACKUP</b> referente a Servicio Principal : <b>".
                                                   $objServicioPrincipal->getLoginAux().'</b>';
                            $this->servicioGeneral->ingresarServicioHistorial($objServicio,
                                                                              $objServicio->getEstado(),
                                                                              $strObservacionServicio,
                                                                              $strUsrCreacion,
                                                                              $strIpCreacion);
                        }
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoActivarPuertoService->activarClienteNuevaTNGpon',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            $strMensaje = $e->getMessage();
            $strStatus  = "ERROR";
        }
        //respuesta
        $arrayRessultado = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRessultado;
    }
    
    /**
     * Función que activa el cliente con un servicio Datos Safe City
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 03-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 06-08-2021 - Se obtiene la vlan, vrf y ip de los servicios adicionales por producto
     * 
     * @author Jenniffer Mujica <jmujica@telconet.ec>
     * @version 1.2 05-02-2023 - Se valida tipo de olt y modelo de ont para tecnologia zte 
     *
     * @param Array $arrayPeticiones
     *
     * @return Array $arrayRespuestaFinal [
     *                                      'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                      'mensaje'   => mensaje de la operación o de error
     *                                   ]
     */
    public function activarClienteDatosSafecityGpon($arrayPeticiones)
    {
        $strCodEmpresa           = $arrayPeticiones['idEmpresa'];
        $intIdServicio           = $arrayPeticiones['idServicio'];
        $strUltimaMilla          = $arrayPeticiones['ultimaMilla'];
        $strMacOnt               = $arrayPeticiones['macOnt'];
        $strSerieOnt             = strtoupper($arrayPeticiones['serieOnt']);
        $strModeloOnt            = $arrayPeticiones['modeloOnt'];
        $strUsrCreacion          = $arrayPeticiones['usrCreacion'];
        $strIpCreacion           = $arrayPeticiones['ipCreacion'];
        $strObservacion          = $arrayPeticiones['observacionCliente'];
        $strSsid                 = $arrayPeticiones['ssid'];
        $strPassword             = $arrayPeticiones['password'];
        $strNumeroPc             = $arrayPeticiones['numeroPc'];
        $arrayDipositivosNodo    = $arrayPeticiones['arrayDipositivosNodo'];
        $arrayDipositivosCliente = $arrayPeticiones['arrayDipositivosCliente'];
        $strModoOperacion        = $arrayPeticiones['modoOperacion'];
        $strInterfaceElementoSplitter = isset($arrayPeticiones['interfaceElementoSplitterId'])
                                        && !empty($arrayPeticiones['interfaceElementoSplitterId'])
                                        ? $arrayPeticiones['interfaceElementoSplitterId'] : null;

        try
        {
            //obtengo el servicio
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha podido obtener el servicio, por favor notificar a Sistemas.");
            }
            //obtengo los datos del servicio
            $objProducto        = $objServicio->getProductoId();
            $objPunto           = $objServicio->getPuntoId();
            $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneByServicioId($objServicio->getId());

            //elemento olt
            $objElementoOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                        ->findOneById($objServicioTecnico->getElementoId());
                                            
            if(!is_object($objElementoOlt))
            {
                throw new \Exception("No se ha podido obtener el elemento olt, por favor notificar a Sistemas.");
            }

            //modelo ont
            $objAdmiModeloOnt = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                                             ->findOneBy(array("nombreModeloElemento" => $strModeloOnt,
                                                                                "estado" => 'Activo'));

            if(!is_object($objAdmiModeloOnt))
            {
                throw new \Exception("No se ha podido obtener el modelo del ont, por favor notificar a Sistemas.");
            }

            //obtengo el elemento splitter
            $objElementoSplitter = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                            ->find($objServicioTecnico->getElementoConectorId());
            if(!is_object($objElementoSplitter))
            {
                throw new \Exception("No se ha podido obtener el elemento splitter, por favor notificar a Sistemas.");
            }
            //obtengo la interface elemento splitter
            $objInterfaceElementoSplitterAnt = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                            ->find($objServicioTecnico->getInterfaceElementoConectorId());
            if(!is_object($objInterfaceElementoSplitterAnt))
            {
                throw new \Exception("No se ha podido obtener la interface elemento splitter, por favor notificar a Sistemas.");
            }
            //validar interface anterior y nueva
            if($objInterfaceElementoSplitterAnt->getNombreInterfaceElemento() != $strInterfaceElementoSplitter
               && !empty($strInterfaceElementoSplitter))
            {
                //obtengo la interface elemento splitter
                $objInterfaceElementoSplitter = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                            ->findOneBy(array("elementoId"              => $objElementoSplitter->getId(),
                                                                              "nombreInterfaceElemento" => $strInterfaceElementoSplitter,
                                                                              "estado"                  => "not connect"));
                if(!is_object($objInterfaceElementoSplitter))
                {
                    throw new \Exception("No se ha podido obtener la interface elemento splitter nuevo, por favor notificar a Sistemas.");
                }
            }
            else
            {
                $objInterfaceElementoSplitter = $objInterfaceElementoSplitterAnt;
            }
            $intIdInterfaceSplitterAnt = $objServicioTecnico->getInterfaceElementoConectorId();
            if ($intIdInterfaceSplitterAnt != intval($objInterfaceElementoSplitter->getId()))
            {
                $objInterfaceElementoSplitterAnt->setEstado("not connect");
                $this->emInfraestructura->persist($objInterfaceElementoSplitterAnt);
                $this->emInfraestructura->flush();
            }
            //se conecta el puerto
            $objInterfaceElementoSplitter->setEstado("reserved");
            $this->emInfraestructura->persist($objInterfaceElementoSplitter);
            $this->emInfraestructura->flush();
            //seteo la interface y elemento conector
            $objServicioTecnico->setElementoConectorId($objElementoSplitter->getId());
            $objServicioTecnico->setInterfaceElementoConectorId($objInterfaceElementoSplitter->getId());
            $this->emComercial->persist($objServicioTecnico);
            $this->emComercial->flush();

            //verificar ont
            $arrayVerifOntNaf   = $this->servicioGeneral->buscarEquipoEnNafPorParametros(array( "serieEquipo"           => $strSerieOnt,
                                                                                                "estadoEquipo"          => "PI",
                                                                                                "tipoArticuloEquipo"    => "AF",
                                                                                                "modeloEquipo"          => $strModeloOnt));
            if($arrayVerifOntNaf["status"] === "ERROR")
            {
                throw new \Exception($arrayVerifOntNaf["mensaje"]);
            }
            //validar tipo elemento cpe ont
            $arrayValidModeloElementoOnt = $this->emInfraestructura->getRepository("schemaBundle:AdmiModeloElemento")
                                                            ->createQueryBuilder('s')
                                                            ->join("s.tipoElementoId", "t")
                                                            ->where("t.nombreTipoElemento      = :nombreTipoElemento")
                                                            ->andWhere("s.nombreModeloElemento = :nombreModeloElemento")
                                                            ->andWhere("s.estado               = :estado")
                                                            ->setParameter('nombreTipoElemento',   "CPE ONT")
                                                            ->setParameter('nombreModeloElemento', $strModeloOnt)
                                                            ->setParameter('estado',               "Activo")
                                                            ->orderBy('s.id', 'ASC')
                                                            ->getQuery()
                                                            ->getResult();
            if(!isset($arrayValidModeloElementoOnt) || empty($arrayValidModeloElementoOnt) || !is_array($arrayValidModeloElementoOnt))
            {
                throw new \Exception("ERROR ONT: El elemento ingresado no es de tipo CPE ONT, favor verificar.");
            } 
        
            //*********VALIDACION MODELO ONT ZTE */
            //parametro modelo ont zte
            $arrayModelosPermitidos = array();
            
            $arrayParametroModelos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get('NUEVA_RED_GPON_TN',
                                                            'COMERCIAL',
                                                            '',
                                                            '',
                                                            'MODELO_ONT_ZTE',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $strCodEmpresa);

            if(empty($arrayParametroModelos) || !is_array($arrayParametroModelos))
            {
                throw new \Exception("No se ha podido obtener el modelo permitido del Ont Zte, por favor notificar a Sistemas.");
            }

            foreach($arrayParametroModelos as $arrayModelos)
            {
                $arrayModelosPermitidos[] = $arrayModelos['valor2'];
            }

            //se valida tecnologia, marca y modelo
            $strMarcaOlt = $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
    
            $strMarcaOnt = $objAdmiModeloOnt->getMarcaElementoId()->getNombreMarcaElemento();

            if($strMarcaOlt === 'ZTE' && (!in_array($strModeloOnt, $arrayModelosPermitidos)))
            {
                //validar modelo zte
                throw new \Exception("ERROR ONT: El elemento ingresado no corresponde al modelo permitido, favor verificar.");

            }

            if($strMarcaOlt === 'HUAWEI' && $strMarcaOnt != $strMarcaOlt)
            {
                throw new \Exception("ERROR ONT: El elemento ingresado no corresponde a la misma tecnologia, favor verificar.");
            }
            //******************************* */

            //verificar ont
            $arrayOntNaf = $this->servicioGeneral->buscarElementoEnNaf($strSerieOnt, $strModeloOnt, "PI", "ActivarServicio");
            $strStatus   = $arrayOntNaf[0]['status'];
            $strMensaje  = $arrayOntNaf[0]['mensaje'];
            if($strStatus === "OK")
            {
                if((is_array($arrayDipositivosNodo)  || is_array($arrayDipositivosCliente)) && 
                   (is_object($objServicio) && $objServicio->getProductoId()->getNombreTecnico() === "DATOS SAFECITY"))
                {
                    $arrayDipositivos = array('arrayDipositivosNodo'    => $arrayDipositivosNodo,
                                              'arrayDipositivosCliente' => $arrayDipositivosCliente,
                                              'idTecnicoEncargado'      => $arrayPeticiones['idTecnicoEncargado'],
                                              'objServicio'             => $objServicio,
                                              'strUsrCreacion'          => $strUsrCreacion,          
                                              'strIpCreacion'           => $strIpCreacion);

                    $arrayResponseGenerica = $this->agregarElemntosAdicionalesClienteNodo($arrayDipositivos);

                    if(isset($arrayResponseGenerica['status']) && !empty($arrayResponseGenerica['status']) &&
                             $arrayResponseGenerica['status'] === "ERROR")
                    {
                        throw new \Exception($arrayResponseGenerica['mensaje']);
                    }
                }

                //almacenamos la serie del dispositivo cpe y el id de control para realizar la carga y descarga.
                $arrayEquipos    = array();
                $arrayInfoActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                        ->obtenerEquiposAsignados(array('strIdEmpresa'   => $strCodEmpresa,
                                                        'intIdPersona'   => (!isset($arrayPeticiones['idTecnicoEncargado']) ? 
                                                                                     $arrayPeticiones['idTecnicoEncargado'] : null),
                                                        'strNumeroSerie' => $strSerieOnt,
                                                        'booleanRedGponMpls' => true));
                if ($arrayInfoActivo['status'])
                {
                    if(!isset($arrayPeticiones['idTecnicoEncargado']) || empty($arrayPeticiones['idTecnicoEncargado']))
                    {
                        $arrayPeticiones['idTecnicoEncargado'] = $arrayInfoActivo["result"][0]['idPersona'];
                    }
                    $arrayEquipos[] = array('strNumeroSerie'  => $strSerieOnt,
                                            'intIdControl'    => $arrayInfoActivo["result"][0]['idControl'],
                                            'intCantidadEnt'  => 1,
                                            'intCantidadRec'  => 1,
                                            'strTipoArticulo' => 'Equipos');
                }
                //verificar si esta vacío
                if(empty($arrayEquipos))
                {
                    throw new \Exception("DISPOSITIVOS CLIENTE: No se encontró el equipo asignado con serie del elemento $strSerieOnt.");
                }

                //registrar ont
                $strCodigoArticuloOnt     = "";
                $strTipoArticulo          = "AF";
                $strIdentificacionCliente = "";
                $objInterfaceOnt = $this->servicioGeneral->ingresarElementoCliente($objPunto->getLogin(), $strSerieOnt, $strModeloOnt, "-ont",
                                                                                   $objInterfaceElementoSplitter, $strUltimaMilla,
                                                                                   $objServicio, $strUsrCreacion,
                                                                                   $strIpCreacion, $strCodEmpresa);
                $strNombreOnt    = $objInterfaceOnt->getElementoId()->getNombreElemento();

                //ingresar características
                if(isset($strSsid) && !empty($strSsid))
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProducto, "SSID", 
                                                                                    $strSsid, $strUsrCreacion);
                }
                if(isset($strPassword) && !empty($strPassword))
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProducto, "PASSWORD SSID",
                                                                                    $strPassword, $strUsrCreacion);
                }
                if(isset($strNumeroPc) && !empty($strNumeroPc))
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProducto, "NUMERO PC", 
                                                                                    $strNumeroPc, $strUsrCreacion);
                }
                if(isset($strModoOperacion) && !empty($strModoOperacion))
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica( $objServicio, $objProducto, "MODO OPERACION", 
                                                                                    $strModoOperacion, $strUsrCreacion);
                }
                //ingresamos la mac del ont
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "MAC ONT", 
                                                                               $strMacOnt, $strUsrCreacion);

                //actualizo el estado del ont
                $objInterfaceOnt->setEstado("not connect");
                $this->emInfraestructura->persist($objInterfaceOnt);
                $this->emInfraestructura->flush();
                //actualizo el estado de la interface
                $objInterfaceElementoSplitter->setEstado("connected");
                $this->emInfraestructura->persist($objInterfaceElementoSplitter);
                $this->emInfraestructura->flush();
                //guardar ont en servicio técnico
                $objServicioTecnico->setElementoClienteId($objInterfaceOnt->getElementoId()->getId());
                $objServicioTecnico->setInterfaceElementoClienteId($objInterfaceOnt->getId());
                $this->emComercial->persist($objServicioTecnico);
                $this->emComercial->flush();

                //actualizo el estado del servicio
                $objServicio->setEstado("Activo");
                $objServicio->setObservacion($strObservacion);
                $this->emComercial->persist($objServicio);
                $this->emComercial->flush();
                //actualizo el estado del punto
                $objPunto->setEstado("Activo");
                $this->emComercial->persist($objPunto);
                $this->emComercial->flush();
                //ingreso historial
                $strObservacionServicioOnt = "Informaci&oacute;n del Elemento ONT<br/>";
                $strObservacionServicioOnt .= "Nuevo Ont <br/>";
                $strObservacionServicioOnt .= "Nombre Ont: ".$strNombreOnt."<br/>";
                $strObservacionServicioOnt .= "Serie Ont: ".$strSerieOnt."<br/>";
                $strObservacionServicioOnt .= "Modelo Ont: ".$strModeloOnt."<br/>";
                $strObservacionServicioOnt .= "Mac Ont: ".$strMacOnt."<br/>";
                $this->servicioGeneral->ingresarServicioHistorial($objServicio, "Activo", $strObservacionServicioOnt,
                                                                  $strUsrCreacion, $strIpCreacion);

                //obtengo la accion
                $objAccion  = $this->emSeguridad->getRepository('schemaBundle:SistAccion')->find(847);
                //historial del servicio
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strObservacion);
                $objServicioHistorial->setEstado("Activo");
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strIpCreacion);
                $objServicioHistorial->setAccion($objAccion->getNombreAccion());
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();

                //seteo punto facturacion
                $objPuntoFacturacion = $objServicio->getPuntoFacturacionId();
                if(!is_object($objPuntoFacturacion))
                {
                    $objServicio->setPuntoFacturacionId($objPunto);
                    $objPuntoAdicional  = $this->emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                                            ->findOneBy(array( "puntoId" => $objPunto->getId()));
                    if(is_object($objPuntoAdicional))
                    {
                        $objPuntoAdicional->setEsPadreFacturacion("S");
                        $this->emComercial->persist($objPuntoAdicional);
                        $this->emComercial->flush();
                    }
                }

                /**FIN ASIGNACION RECURSOS DE LOS SERVICIOS ADICIONALES DEL DATOS SAFECITY**/
                $arrayParAsignarAdd = array(
                    "objServicio"        => $objServicio,
                    "objServicioTecnico" => $objServicioTecnico,
                    "peticion"           => $arrayPeticiones['peticion'],
                    "strCodEmpresa"      => $strCodEmpresa,
                    "strUsrCreacion"     => $strUsrCreacion,
                    "strIpCreacion"      => $strIpCreacion,
                );
                $arrayResultadoAsignarAdd = $this->asignarServiciosAdicionalesSafeCityTNGpon($arrayParAsignarAdd);
                $strMensaje .= $arrayResultadoAsignarAdd['mensaje'];
                /**FIN ASIGNACION RECURSOS DE LOS SERVICIOS ADICIONALES DEL DATOS SAFECITY**/

                //ingresar ont
                $strMensajeError    = str_repeat(' ', 1000);
                $strSql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                    . ":cantidad, :pv_mensajeerror); END;";
                $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                $objStmt->bindParam('codigoEmpresaNaf', $strCodEmpresa);
                $objStmt->bindParam('codigoArticulo', $strCodigoArticuloOnt);
                $objStmt->bindParam('tipoArticulo',$strTipoArticulo);
                $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                $objStmt->bindParam('serieCpe', $strSerieOnt);
                $objStmt->bindParam('cantidad', intval(1));
                $objStmt->bindParam('pv_mensajeerror', $strMensajeError);
                $objStmt->execute();
                if(strlen(trim($strMensajeError))>0)
                {
                    throw new \Exception("ERROR ONT NAF: ".$strMensajeError);
                }

                //LLAMADA AL SERVICE PARA REALIZAR LA CARGA Y DESCARGA DEL ACTIVO.
                if (!empty($arrayEquipos) && count($arrayEquipos) > 0)
                {
                    $arrayCargaDescarga['strUsuario']              =  $strUsrCreacion;
                    $arrayCargaDescarga['strIpUsuario']            =  $strIpCreacion;
                    $arrayCargaDescarga['strTipoRecibe']           = 'Cliente';
                    $arrayCargaDescarga['intIdServicio']           =  $objServicio->getId();
                    $arrayCargaDescarga['intIdEmpleado']           =  $arrayPeticiones['idTecnicoEncargado'];
                    $arrayCargaDescarga['intIdEmpresa']            =  $strCodEmpresa;
                    $arrayCargaDescarga['strTipoActividad']        = 'Instalacion';
                    $arrayCargaDescarga['strTipoTransaccion']      = 'Nuevo';
                    $arrayCargaDescarga['strObservacion']          = 'Instalacion del servicio';
                    $arrayCargaDescarga['arrayEquipos']            =  $arrayEquipos;
                    $arrayCargaDescarga['strEstadoSolicitud']      = 'Asignada';
                    $arrayCargaDescarga['strDescripcionSolicitud'] = 'SOLICITUD PLANIFICACION';
                    $arrayResCarDes = $this->serviceInfoElemento->cargaDescargaActivos($arrayCargaDescarga);
                }
            }
            else
            {
                throw new \Exception($strMensaje);
            }
        }
        catch (\Exception $e) 
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->activarClienteDatosSafecityGpon",
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );

        }

        $arrayRespuestaFinal = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }

    /**
     * Función agregar elemento adicionales sin enlace tanto
     * de lado del cliente como en el nodo para servicios Safe City
     *
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.0 25-12-2022
     *
     *
     * @param Array $arrayEquipoAddNodo, $arrayEquipoAddNodo
     *
     * @return Array $arrayRespuestaFinal [
     *                                      'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                      'mensaje'   => mensaje de la operación o de error
     *                                   ]
     */
    public function agregarElemntosAdicionalesClienteNodo($arrayDipositivos)
    {
        try
        { 
            $arrayEquipoAddNodo       = $arrayDipositivos['arrayDipositivosNodo']; 
            $arrayEquipoAddCliente    = $arrayDipositivos['arrayDipositivosCliente'];
            $strIdTecnicoEncargado    = $arrayDipositivos['idTecnicoEncargado'];
            $objServicio              = $arrayDipositivos['objServicio'];
            $objProducto              = $objServicio->getProductoId();
            $objPunto                 = $objServicio->getPuntoId();
            $strUsrCreacion           = $arrayDipositivos['strUsrCreacion'];
            $strIpCreacion            = $arrayDipositivos['strIpCreacion'];
            $booleanEsServicioSafecity= true;
            $intIdEmpresa             = 10;
            $intIdx                   = 0;
            $intIterador              = 0;
            $intNumeroTarea           = 0;
            $intIdElementoNodo        = '';
            $strObservacionServicioOnt= '';
            $strEstadoSolicitud       = 'Asignada';
            $strDescripcionSolicitud  = 'SOLICITUD PLANIFICACION';
            $intIdServicio            = '';
            $strObservacion           = '';
            $strNombreCaracteristica  = '';
            $strMensaje               = 'Realizado con exito';
            $strStatus                = 'OK';
            $strPerteneceElemento     = '';
            $intIdElemento            = '';

            if(is_object($objServicio))
            {
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneBy(array( "servicioId" => $objServicio->getId()));
                
                if(is_object($objServicioTecnico))
                {
                    $intIdElementoNodo = $objServicioTecnico->getElementoContenedorId();

                    $objInfoElementoNodo = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                        ->find($intIdElementoNodo);
                }
                else
                {
                    //ingreso historial
                    $strObservacion = 'No se pudo obtener la caja para agregar elementos en el nodo
                                        , por favor notificar a Sistemas.';
                    $this->servicioGeneral->ingresarServicioHistorial($objServicio, "Activo", $strObservacionServicioOnt,
                                                                    $strUsrCreacion, $strIpCreacion);
                }                                                  
            }

            //REGISTRAMOS LOS EQUIPOS EN EL CLIENTE Y EN EL NODO.
            if ((is_array($arrayEquipoAddNodo) || is_array($arrayEquipoAddCliente)) &&
                isset($strIdTecnicoEncargado) && !empty($strIdTecnicoEncargado))
            {
                $arrayElementoAdd = array('arrayEquipoAddCliente' => $arrayEquipoAddCliente,
                                          'arrayEquipoAddNodo'    => $arrayEquipoAddNodo);

                foreach ($arrayElementoAdd as $arrayDipositivoAdd)
                {
                    $intIterador ++;
                    $arrayEquipos            = array();
                    $arrayCargaDescarga      = array();
                    $arrayDipositivoAdicional= array();
                    $strPerteneceElemento    = '';
                    foreach ($arrayDipositivoAdd as $intIdx => $arrayDipositivoAdicional)
                    {
                        //Almacenamos la serie de los dispositivo en nodo y el id de control para realizar la carga y descarga.
                        $strMacDispositivo         = 'NA';
                        $strPerteneceElemento      = $intIterador == 1 ? 'Cliente' : 'Nodo';
                        $boolPerteneceElementoNodo = $intIterador == 2 ? true : false;
                        $arrayInfoActivos  = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                                ->getElementosAdicionalesClienteNodo(array('strIdEmpresa'          => $intIdEmpresa,
                                                                           'intIdPersona'          => $strIdTecnicoEncargado,
                                                                           'boolPerteneceElemento' => $intIterador == 1 ? true : false,
                                                                           'strNumeroSerie'        => $arrayDipositivoAdicional['serieElemento']));

                        if ($arrayInfoActivos['status'])
                        {
                            $arrayInfoActivo   = $arrayInfoActivos['result'][0];
                            $strMacDispositivo = $arrayInfoActivo['macElemento'];
                            $intIdControl      = $arrayInfoActivo['idControl'];
                            $strTipoElemento   = $arrayInfoActivo['tipoElemento'];
                            $arrayEquipos[]    = array('strNumeroSerie'  => $arrayDipositivoAdicional['serieElemento'],
                                                    'intIdControl'    => $intIdControl,
                                                    'intCantidadEnt'  => 1,
                                                    'intCantidadRec'  => 1,
                                                    'strTipoArticulo' => 'Equipos');
                        }
                        else
                        {
                            $strRespuesta = 'No se ha podido obtener el elemento adicional en '.$strPerteneceElemento. ' con serie '
                            .$arrayDipositivoAdicional['serieElemento'].', por favor notificar a Sistemas.';
                            throw new \Exception($strRespuesta);
                        }

                        $intContador       = $intIdx + 1;
                        $strNombre         = strtolower($strPerteneceElemento)."-".strtolower($strTipoElemento)."-".$intContador."-"
                                             .$objServicio->getLoginAux();

                        if($boolPerteneceElementoNodo)
                        {
                            $arrayParametrosCpe = array('nombreElementoCliente'       => $strNombre,
                                                        'nombreModeloElementoCliente' => $arrayDipositivoAdicional['modeloElemento'],
                                                        'serieElementoCliente'        => $arrayDipositivoAdicional['serieElemento'],
                                                        'boolEsUbicacionNodo'         => $boolPerteneceElementoNodo,
                                                        'strMacDispositivo'           => $strMacDispositivo,
                                                        'objServicio'                 => $objServicio,
                                                        'intIdEmpresa'                => $intIdEmpresa,
                                                        'usrCreacion'                 => $strUsrCreacion,
                                                        'ipCreacion'                  => $strIpCreacion);
                        
                            $this->servicioGeneral->ingresarElementoClienteTN($arrayParametrosCpe); 

                        }
                        else
                        {
                            $arrayParametrosCpe = array('strLogin'                      => $objPunto->getLogin(),
                                                        'nombreElementoCliente'         => $strNombre,
                                                        'modeloElementoNuevo'           => $arrayDipositivoAdicional['modeloElemento'],
                                                        'serieElementoNuevo'            => $arrayDipositivoAdicional['serieElemento'],
                                                        'tipoElementoNuevo'             => $strTipoElemento,
                                                        'macElementoNuevo'              => $strMacDispositivo,
                                                        'objServicio'                   => $objServicio,
                                                        'idEmpresa'                     => $intIdEmpresa,
                                                        'usrCreacion'                   => $strUsrCreacion,
                                                        'ipCreacion'                    => $strIpCreacion); 

                            $objElementoCliente = $this->servicioGeneral->ingresarElementoClienteTNSinEnlace($arrayParametrosCpe); 

                        }
                
                        if (!is_object($objElementoCliente) && !$boolPerteneceElementoNodo)
                        {
                            $strRespuesta = 'No se ha podido ingresar el elemento adicional en '.$strPerteneceElemento.' con serie '
                            .$arrayDipositivoAdicional['serieElemento'].', por favor notificar a Sistemas.';
                            throw new \Exception($strRespuesta);
                        } 
                        
                        //Actualizamos el dispositivo en el Naf.
                        $strCodigoArticulo        = '';
                        $strTipoArticulo          = 'AF';
                        $strIdentificacionCliente = '';
                        $strMensajeError          = str_repeat(' ',1000);

                        $strSql = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf,"
                                                                            . ":codigoArticulo,"
                                                                            . ":tipoArticulo,"
                                                                            . ":identificacionCliente,"
                                                                            . ":serieCpe,"
                                                                            . ":cantidad,"
                                                                            . ":pv_mensajeerror); END;";

                        $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                        $objStmt->bindParam('codigoEmpresaNaf'     , $intIdEmpresa);
                        $objStmt->bindParam('codigoArticulo'       , $strCodigoArticulo);
                        $objStmt->bindParam('tipoArticulo'         , $strTipoArticulo);
                        $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                        $objStmt->bindParam('serieCpe'             , $arrayDipositivoAdicional['serieElemento']);
                        $objStmt->bindParam('cantidad'             , intval(1));
                        $objStmt->bindParam('pv_mensajeerror'      , $strMensajeError);
                        $objStmt->execute();

                        if (strlen(trim($strMensajeError)) > 0)
                        {
                            throw new \Exception("DISPOSITIVO: ".$strMensajeError);
                        } 

                        if((is_object($objServicio) && is_object($objProducto) && 
                           (is_object($objElementoCliente) || $boolPerteneceElementoNodo)) &&
                           (isset($strUsrCreacion) && !empty($strUsrCreacion)))
                        {

                            if($intIterador === 1)
                            {
                                $strNombreCaracteristica = "ELEMENTO_ADD_CLIENTE_ID";
                                $intIdElemento = $objElementoCliente->getId();
                            }
                            else
                            {
                                $strNombreCaracteristica = "ELEMENTO_ADD_NODO_ID";
                                
                                $objElementoNodo = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                                   ->findOneByNombreElemento($strNombre);
                                if(is_object($objElementoNodo))
                                {
                                    $intIdElemento = $objElementoNodo->getId();
                                }
                            }

                            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio, $objProducto, $strNombreCaracteristica, 
                                                                                           $intIdElemento, $strUsrCreacion);
                        }

                        //ingreso historial
                        $strObservacionServicioOnt = "<b>Informaci&oacute;n del Elemento adicional en " .$strPerteneceElemento. "</b><br/>";
                        $strObservacionServicioOnt .= "<b>Nombre Elemento: </b>".$strNombre."<br/>";
                        $strObservacionServicioOnt .= "<b>Serie Elemento: </b>".$arrayDipositivoAdicional['serieElemento']."<br/>";
                        $strObservacionServicioOnt .= "<b>Modelo Elemento: </b>".$arrayDipositivoAdicional['modeloElemento']."<br/>";
                        $strObservacionServicioOnt .= "<b>Mac Elemento: </b>".$strMacDispositivo."<br/>";
                        $this->servicioGeneral->ingresarServicioHistorial($objServicio, "Activo", $strObservacionServicioOnt,
                                                                        $strUsrCreacion, $strIpCreacion);
                    }

                        //LLAMADA AL SERVICE PARA REALIZAR LA CARGA Y DESCARGA DEL ACTIVO.
                        if (is_array($arrayEquipos) && count($arrayEquipos) > 0)
                        {
                            if(isset($strPerteneceElemento) && !empty($strPerteneceElemento) && $strPerteneceElemento === 'Nodo')
                            {

                                $arrayTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                ->obtenerTareaSolicitudServicio(array('serviceUtil'             => $serviceUtil,
                                                                      'strUsuario'              => $strUsrCreacion,
                                                                      'strIpUsuario'            => $strIpCreacion,
                                                                      'intIdServicio'           => $objServicio->getId(),
                                                                      'strEstadoSolicitud'      => $strEstadoSolicitud,
                                                                      'strDescripcionSolicitud' => $strDescripcionSolicitud));
                                $intNumeroTarea    = $arrayTarea["result"][0]['idComunicacion'];

                                $arrayCargaDescarga['intNumeroTarea']           =  $intNumeroTarea;
                                $arrayCargaDescarga['intIdEmpresa']             =  $intIdEmpresa;
                                $arrayCargaDescarga['strTipoRecibe']            =  $strPerteneceElemento;
                                $arrayCargaDescarga['intIdElementoNodo']        =  $intIdElementoNodo;
                                $arrayCargaDescarga['intIdEmpleado']            =  $strIdTecnicoEncargado;
                                $arrayCargaDescarga['strTipoTransaccion']       = 'Instalacion';
                                $arrayCargaDescarga['strTipoActividad']         = 'InstalacionNodo';
                                $arrayCargaDescarga['strObservacion']           = 'Instalacion de nuevo elemento en nodo';
                                $arrayCargaDescarga['arrayEquipos']             =  $arrayEquipos;
                                $arrayCargaDescarga['strUsuario']               =  $strUsrCreacion;
                                $arrayCargaDescarga['strIpUsuario']             =  $strIpCreacion;
                                $arrayCargaDescarga['boolRegistrarTraking']     =  false; 
                            }
                            else
                            {
                                $arrayCargaDescarga['strUsuario']              =  $strUsrCreacion;
                                $arrayCargaDescarga['strIpUsuario']            =  $strIpCreacion;
                                $arrayCargaDescarga['strTipoRecibe']           =  $strPerteneceElemento;
                                $arrayCargaDescarga['intIdServicio']           =  $objServicio->getId();
                                $arrayCargaDescarga['intIdEmpleado']           =  $strIdTecnicoEncargado;
                                $arrayCargaDescarga['intIdEmpresa']            =  $intIdEmpresa;
                                $arrayCargaDescarga['strTipoActividad']        = 'Instalacion';
                                $arrayCargaDescarga['strTipoTransaccion']      = 'Nuevo';
                                $arrayCargaDescarga['strObservacion']          = 'Instalacion del servicio';
                                $arrayCargaDescarga['arrayEquipos']            =  $arrayEquipos;
                                $arrayCargaDescarga['strEstadoSolicitud']      =  $strEstadoSolicitud;
                                $arrayCargaDescarga['strDescripcionSolicitud'] =  $strDescripcionSolicitud;
                                $arrayCargaDescarga['booleanServicioSafecity'] =  $booleanEsServicioSafecity;
                                $arrayCargaDescarga['intIdPerEmpRolCamara']    =  $intIdPerEmpRolCamara;
                                $arrayCargaDescarga['boolRegistrarTraking']    =  false;

                            }

                            $arrayResCarDes = $this->serviceInfoElemento->cargaDescargaActivos($arrayCargaDescarga);
                        
                            if (!$arrayResCarDes['status'])
                            {
                                throw new \Exception("DISPOSITIVOS: ".$arrayResCarDes['message']);
                            }
                        }
                }
            }
            else
            {
                $strRespuesta = "Error al ingreso de los datos, por favor notificar a Sistemas.";
                throw new \Exception($strRespuesta);
            }
        }
        catch (\Exception $e) 
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->agregarElemntosAdicionalesSafeCity",
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion);

        }

        $arrayRespuestaFinal = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRespuestaFinal;                          
	}

    /*
    * actualizaProduAdicManualesDifTecnologia
    *
    * Función que permite cambiar los estados de los servicios adicionales en el punto de origen
    * cuando se trata de traslados en diferente tecnología
    *
    * @author Jesús Bozada <jbozada@telconet.ec>
    * @version 1.0 28-02-2022 - Version Inicial.
    *
    * @param $arrayDatPuntOrigen -> Contiene datos necesarios para ejecutar el proceso
    * 
    */
    public function actualizaProduAdicManualesDifTecnologia($arrayDatPuntOrigen)
    {
        $intIdPuntoOrigen     = $arrayDatPuntOrigen["intIdPuntoOrigen"];
        $intIdPuntoDestino    = $arrayDatPuntOrigen["intIdPuntoDestino"];
        $intIdServicioOrigen  = $arrayDatPuntOrigen["intIdServicioOrigen"];
        $intIdServicioDestino = $arrayDatPuntOrigen["intIdServicioDestino"];
        $strIpCreacion        = $arrayDatPuntOrigen["strIpCreacion"];
        $strUsrCreacion       = $arrayDatPuntOrigen["strUsrCreacion"];
        $strCodEmpresa        = $arrayDatPuntOrigen["strCodEmpresa"];
        $intIdPerEmpresaRol   = $arrayDatPuntOrigen["intIdPerEmpresaRol"];
        $strEstado            = "Cancelado";
        $strEstadoSolicitud   = "Anulado";
        
        // Obtendremos los productos adicionales manuales que se deben cancelar
        $arrayProducAdicioManuales = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES DIFERENTE TECNOLOGIA','COMERCIAL','',
                                    'Productos manuales que cambian estado en origen','','','',
                                    '','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayProducAdicioManuales = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos los estados que no cambiaran despues del traslado
        $arrayEstadosNoCambian = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES DIFERENTE TECNOLOGIA','COMERCIAL','',
                                    'Estados en origen que no cambiaran a trasladado',
                                    '','','','','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayEstadosNoCambian = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos los tipos de solicitudes permitidos para esos productos manuales
        $arrayTiposSolicitudes = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES DIFERENTE TECNOLOGIA','COMERCIAL','',
                                    'Solicitudes anexas a los servicios adicionales manuales',
                                    '','','','','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayTiposSolicitudes = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos los estados de las solicitudes que no cancelaron tareas con el traslado
        $arrayEstTareasSolicitudes = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES DIFERENTE TECNOLOGIA','COMERCIAL','',
                                    'Estado de solicitudes que no cancelaron tareas en traslado',
                                    '','','','','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayEstTareasSolicitudes = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos todos los servicios adicionales del punto origen
        $arrayServPuntoOrigen = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                        ->findServiciosByPuntoAndEstado($intIdPuntoOrigen, null, null);
        foreach($arrayServPuntoOrigen['registros'] as $objServiPunto)
        {
            $strProducto = $objServiPunto->getProductoId();
            // Actualizamos el estado de los servicios adicionales de cableado ethernet
            if (!empty($strProducto) && $objServiPunto->getId() !== $intIdServicioOrigen &&
                in_array($strProducto->getId(), $arrayProducAdicioManuales) &&
                !in_array($objServiPunto->getEstado(), $arrayEstadosNoCambian))
            {
                $objServiPunto->setEstado($strEstado);
                $this->emComercial->persist($objServiPunto);
                $this->emComercial->flush();
                // Actualizamos el historial del servicio
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServiPunto);
                $objServicioHistorial->setObservacion('Se cancelar el servicio por traslado de diferente tecnología');
                $objServicioHistorial->setIpCreacion($strIpCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setEstado($strEstado);
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();
                //buscar enlace local y eliminar elemento enlazado
                $objServicioTecnico = $this->emComercial
                                           ->getRepository('schemaBundle:InfoServicioTecnico')
                                           ->findOneBy(array( "servicioId" => $objServiPunto->getId()));
                if (is_object($objServicioTecnico))
                {
                    $objEnlaceCliente = $this->emInfraestructura
                                             ->getRepository('schemaBundle:InfoEnlace')
                                             ->findOneBy(array("interfaceElementoFinId" => $objServicioTecnico->getInterfaceElementoClienteId(),
                                                               "estado"                 => "Activo"));

                    //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
                    if(is_object($objEnlaceCliente))
                    {
                        //elimino enlace
                        $objEnlaceCliente->setEstado("Eliminado");
                        $this->emInfraestructura->persist($objEnlaceCliente);
                        $this->emInfraestructura->flush(); 

                        //crear las caract para la solicitud de retiro de equipo
                        $objEnlaceClienteSiguiente = $this->emInfraestructura
                                                          ->getRepository('schemaBundle:InfoEnlace')
                                                          ->findOneBy(array("interfaceElementoIniId" =>
                                                                            $objServicioTecnico->getInterfaceElementoClienteId(),
                                                                            "estado"                 => "Activo"));

                        //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
                        if(is_object($objEnlaceClienteSiguiente))
                        {
                            //elimino enlace
                            $objEnlaceClienteSiguiente->setEstado("Eliminado");
                            $this->emInfraestructura->persist($objEnlaceClienteSiguiente);
                            $this->emInfraestructura->flush(); 

                            $objEnlaceNuevo = new InfoEnlace();
                            $objEnlaceNuevo->setInterfaceElementoIniId($objEnlaceCliente->getInterfaceElementoIniId());
                            $objEnlaceNuevo->setInterfaceElementoFinId($objEnlaceClienteSiguiente->getInterfaceElementoFinId());
                            $objEnlaceNuevo->setTipoMedioId($objEnlaceClienteSiguiente->getTipoMedioId());
                            $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                            $objEnlaceNuevo->setEstado("Activo");
                            $objEnlaceNuevo->setUsrCreacion($strUsrCreacion);
                            $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                            $objEnlaceNuevo->setIpCreacion($strIpCreacion);
                            $this->emInfraestructura->persist($objEnlaceNuevo);
                            $this->emInfraestructura->flush(); 
                        }
                    }
                }
            }
            // Actualizamos los estados de los detalles de la solicitud seleccionada
            $arrayDetSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                    ->findByParameters(array('servicioId' => $objServiPunto->getId()));
            foreach($arrayDetSolicitud as $objDetalle)
            {
                $objDetSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->findOneById($objDetalle['id']);
                // Cambiamos el estado de las solicitudes
                $intIdTipoSolicitud = $objDetSolicitud->getTipoSolicitudId()->getId();
                if (in_array($intIdTipoSolicitud, $arrayTiposSolicitudes) &&
                    !in_array($objDetSolicitud->getEstado(), $arrayEstadosNoCambian))
                {
                    $strEstActualOrigen = $objDetSolicitud->getEstado();
                    $objDetSolicitud->setEstado($strEstadoSolicitud);
                    $this->emComercial->persist($objDetSolicitud);
                    $this->emComercial->flush();

                    // Llamamos al metodo que cancelara las tareas abiertas de estas solicitudes no replanificadas
                    if (in_array($strEstActualOrigen, $arrayEstTareasSolicitudes))
                    {
                        $objPersEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                    ->findOneById($intIdPerEmpresaRol);
                        $intIdDepartamento = $objPersEmpresaRol->getDepartamentoId();
                        if (empty($intIdDepartamento))
                        {
                            $intIdDepartamento = 359;
                        }
                        $arrayDatosCancelar = array ('objSolicitud'   => $objDetSolicitud,
                            'strObservacion'    => "Se cancela la tarea por traslado de servicio en diferente tecnología.",
                            'strEstadoTarea'    => "Cancelada",
                            'strUsuCreacion'    => $strUsrCreacion,
                            'strIpCreacion'     => $strIpCreacion,
                            'intIdPersonaRol'   => $intIdPerEmpresaRol,
                            'intIdDepartamento' => $intIdDepartamento,
                            'intCodEmpresa'     => $strCodEmpresa);
                        $this->serviceServicioComercial->cancelarTareaSolicitud($arrayDatosCancelar);
                    }
                }
            }
        }

        //se cancelan servicios solicitados en el destino del traslado
        $arrayServPuntoDestino = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                      ->findServiciosByPuntoAndEstado($intIdPuntoDestino, null, null);
        foreach($arrayServPuntoDestino['registros'] as $objServiPuntoDestino)
        {
            $strProducto = $objServiPuntoDestino->getProductoId();
            // Actualizamos el estado de los servicios adicionales de cableado ethernet
            if (!empty($strProducto) && $objServiPuntoDestino->getId() !== $intIdServicioDestino &&
                in_array($strProducto->getId(), $arrayProducAdicioManuales) &&
                !in_array($objServiPuntoDestino->getEstado(), $arrayEstadosNoCambian))
            {
                $objServiPuntoDestino->setEstado($strEstado);
                $this->emComercial->persist($objServiPuntoDestino);
                $this->emComercial->flush();
                // Actualizamos el historial del servicio
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServiPuntoDestino);
                $objServicioHistorial->setObservacion('Se cancela el servicio por traslado en diferente tecnología');
                $objServicioHistorial->setIpCreacion($strIpCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setEstado($strEstado);
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();
            }
            // Actualizamos los estados de los detalles de la solicitud seleccionada
            $arrayDetSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                      ->findByParameters(array('servicioId' => $objServiPuntoDestino->getId()));
            foreach($arrayDetSolicitud as $objDetalle)
            {
                $objDetSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                     ->findOneById($objDetalle['id']);
                // Cambiamos el estado de las solicitudes
                $intIdTipoSolicitud = $objDetSolicitud->getTipoSolicitudId()->getId();
                if (in_array($intIdTipoSolicitud, $arrayTiposSolicitudes) &&
                    !in_array($objDetSolicitud->getEstado(), $arrayEstadosNoCambian))
                {
                    $strEstActualOrigen = $objDetSolicitud->getEstado();
                    $objDetSolicitud->setEstado($strEstadoSolicitud);
                    $this->emComercial->persist($objDetSolicitud);
                    $this->emComercial->flush();

                    // Llamamos al metodo que cancelara las tareas abiertas de estas solicitudes no replanificadas
                    if (in_array($strEstActualOrigen, $arrayEstTareasSolicitudes))
                    {
                        $objPersEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                    ->findOneById($intIdPerEmpresaRol);
                        $intIdDepartamento = $objPersEmpresaRol->getDepartamentoId();
                        if (empty($intIdDepartamento))
                        {
                            $intIdDepartamento = 359;
                        }
                        $arrayDatosCancelar = array ('objSolicitud'   => $objDetSolicitud,
                            'strObservacion'    => "Se cancela la tarea por traslado de servicio en diferente tecnología.",
                            'strEstadoTarea'    => "Cancelada",
                            'strUsuCreacion'    => $strUsrCreacion,
                            'strIpCreacion'     => $strIpCreacion,
                            'intIdPersonaRol'   => $intIdPerEmpresaRol,
                            'intIdDepartamento' => $intIdDepartamento,
                            'intCodEmpresa'     => $strCodEmpresa);
                        $this->serviceServicioComercial->cancelarTareaSolicitud($arrayDatosCancelar);
                    }
                }
            }
        }
    }

    /*
    * Función que permite cambiar los estados de los servicios adicionales en el punto de origen
    *
    * @author Daniel Reyes <djreyes@telconet.ec>
    * @version 1.0 12-04-2021 - Version Inicial.
    * 
    * @author Daniel Reyes <djreyes@telconet.ec>
    * @version 1.1 06-07-2021 - Se cambia el proceso para trabajar con todos los productos adicionales parametrizados
    *                          para cuando se realiza un proceso de traslado
    *
    * @param $arrayDatosCableado -> Contiene todos los datos del punto trasladado y el estado final
    * 
    */
    public function actualizaProduAdicManuales($arrayDatPuntOrigen)
    {
        $intIdPunto     = $arrayDatPuntOrigen["intIdPunto"];
        $intIdServicio  = $arrayDatPuntOrigen["intIdServicio"];
        $strIpCreacion  = $arrayDatPuntOrigen["strIpCreacion"];
        $strUsrCreacion = $arrayDatPuntOrigen["strUsrCreacion"];
        $strCodEmpresa  = $arrayDatPuntOrigen["strCodEmpresa"];
        $intIdPerEmpresaRol = $arrayDatPuntOrigen["intIdPerEmpresaRol"];
        $strEstado = "Trasladado";
        // Pruebas urgentes
        

        //Fin pruebas uregebtes
        // Obtendremos los productos adicionales manuales que se deben cancelar
        $arrayProducAdicioManuales = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                    'Productos manuales que cambian estado en origen','','','',
                                    '','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayProducAdicioManuales = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos los estados que no cambiaran despues del traslado
        $arrayEstadosNoCambian = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                    'Estados en origen que no cambiaran a trasladado',
                                    '','','','','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayEstadosNoCambian = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos los tipos de solicitudes permitidos para esos productos manuales
        $arrayTiposSolicitudes = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                    'Solicitudes anexas a los servicios adicionales manuales',
                                    '','','','','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayTiposSolicitudes = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos los estados de las solicitudes que no cancelaron tareas con el traslado
        $arrayEstTareasSolicitudes = array();
        $arrayParamValores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                    'Estado de solicitudes que no cancelaron tareas en traslado',
                                    '','','','','',$strCodEmpresa);
        if (is_array($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayEstTareasSolicitudes = $this->serviceUtil->obtenerValoresParametro($arrayParamValores);
        }
        // Obtenemos todos los servicios adicionales del punto origen
        $arrayServPuntoOrigen = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                        ->findServiciosByPuntoAndEstado($intIdPunto, null, null);
        foreach($arrayServPuntoOrigen['registros'] as $objServiPunto)
        {
            $strProducto = $objServiPunto->getProductoId();
            // Actualizamos el estado de los servicios adicionales de cableado ethernet
            if (!empty($strProducto) && $objServiPunto->getId() !== $intIdServicio &&
                in_array($strProducto->getId(), $arrayProducAdicioManuales) &&
                !in_array($objServiPunto->getEstado(), $arrayEstadosNoCambian))
            {
                $objServiPunto->setEstado($strEstado);
                $this->emComercial->persist($objServiPunto);
                $this->emComercial->flush();
                // Actualizamos el historial del servicio
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServiPunto);
                $objServicioHistorial->setObservacion('Se trasladó el servicio');
                $objServicioHistorial->setIpCreacion($strIpCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setEstado($strEstado);
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();
            }
            // Actualizamos los estados de los detalles de la solicitud seleccionada
            $arrayDetSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                    ->findByParameters(array('servicioId' => $objServiPunto->getId()));
            foreach($arrayDetSolicitud as $objDetalle)
            {
                $objDetSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->findOneById($objDetalle['id']);
                // Cambiamos el estado de las solicitudes
                $intIdTipoSolicitud = $objDetSolicitud->getTipoSolicitudId()->getId();
                if (in_array($intIdTipoSolicitud, $arrayTiposSolicitudes) &&
                    !in_array($objDetSolicitud->getEstado(), $arrayEstadosNoCambian))
                {
                    $strEstActualOrigen = $objDetSolicitud->getEstado();
                    $objDetSolicitud->setEstado($strEstado);
                    $this->emComercial->persist($objDetSolicitud);
                    $this->emComercial->flush();

                    // Llamamos al metodo que cancelara las tareas abiertas de estas solicitudes no replanificadas
                    if (in_array($strEstActualOrigen, $arrayEstTareasSolicitudes))
                    {
                        $objPersEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                    ->findOneById($intIdPerEmpresaRol);
                        $intIdDepartamento = $objPersEmpresaRol->getDepartamentoId();
                        if (empty($intIdDepartamento))
                        {
                            $intIdDepartamento = 359;
                        }
                        $arrayDatosCancelar = array ('objSolicitud'   => $objDetSolicitud,
                            'strObservacion'    => "Se cancela la tarea por traslado de servicio.",
                            'strEstadoTarea'    => "Cancelada",
                            'strUsuCreacion'    => $strUsrCreacion,
                            'strIpCreacion'     => $strIpCreacion,
                            'intIdPersonaRol'   => $intIdPerEmpresaRol,
                            'intIdDepartamento' => $intIdDepartamento,
                            'intCodEmpresa'     => $strCodEmpresa);
                        $this->serviceServicioComercial->cancelarTareaSolicitud($arrayDatosCancelar);
                    }
                }
            }
        }
    }

    /*
    * Función que permite eliminar el boton de activacion en konibit en el 
    *
    * @author Daniel Reyes <djreyes@telconet.ec>
    * @version 1.0 02-09-2021 - Version Inicial.
    * 
    * @param $arrayDatPuntOrigen -> Contiene todos los datos del punto origen
    * 
    */
    public function cancelaBotKonibitTraslado($arrayDatosServOrigen)
    {
        $objServicio     = $arrayDatosServOrigen['objServicio'];
        $intCodEmpresa   = $arrayDatosServOrigen['intCodEmpresa'];
        $strIpCreacion   = $arrayDatosServOrigen['strIpCreacion'];
        $strUserCreacion = $arrayDatosServOrigen['strUserCreacion'];

        // Obtenemos los planes para identificar un konibit
        $intIdPlan = $objServicio->getPlanId()->getId();
        $arrayDetallesPlanes  = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                        ->getPlanIdYEstados($intIdPlan);       
        if(is_array($arrayDetallesPlanes) && !empty($arrayDetallesPlanes))
        {
            $arrayListadoServicios = array();
            $arrayListadoServicios = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                        ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                            'Lista de productos adicionales automaticos',
                                            '','','','','',$intCodEmpresa);
            foreach($arrayDetallesPlanes as $objDetallePlan)
            {
                $intIdProducto = $objDetallePlan->getProductoId();
                foreach($arrayListadoServicios as $objListado)
                {
                    // Si encuentra un producto konibit procede a inactivar el boton
                    if ($intIdProducto == $objListado['valor1'] && $objListado['valor3'] == "SI")
                    {
                        $objProducto = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                            ->find($intIdProducto);
                        $arrayGuarCaracteristica = array("objServicio"     => $objServicio,
                                                        "strUsrCreacion"    => $strUserCreacion,
                                                        "objProducto"       => $objProducto,
                                                        "strCaracteristica" => "ACTIVO KONIBIT",
                                                        "strValor"          => "");
                        $arrayResProductoCarac = $this->serviceLicenciasKaspersky
                                                        ->obtenerValorServicioProductoCaracteristica($arrayGuarCaracteristica);
                        $arrayProductoCaracterKon = $arrayResProductoCarac["objServicioProdCaract"];
                        if (!empty($arrayProductoCaracterKon))
                        {
                            $arrayGuarCaracteristica["strValor"] = "TRASLADADO";
                            $this->serviceLicenciasKaspersky->
                                    guardaServicioProductoCaracteristica($arrayGuarCaracteristica);
                        }
                        else
                        {
                            $arrayGuarCaracteristica["strValorNuevo"] = "TRASLADADO";             
                            $this->serviceLicenciasKaspersky->
                                    actualizarServicioProductoCaracteristica($arrayGuarCaracteristica);
                        }
                    }
                }
            }
        }
    }

    /**
     * evaluarFuncionPrecio, Evalua la funcion de precio en base a unos parametros dados y retorna el precio
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 04-11-2020
     * 
     * @param string $strFuncionPrecio Funcion de precio a evaluar
     * @param array $arrayProductoCaracteristicasValores Arreglo con los valores a ser reemplazados
     * @return int Retorna el precio obtenido de la evaluacion
     * 
     */
    private function evaluarFuncionPrecio($strFuncionPrecio, $arrayProductoCaracteristicasValores)
    {
        $floatPrecio        = 0;        
        $arrayFunctionJs    = array('Math.ceil','Math.floor','Math.pow',"}");
        $arrayFunctionPhp   = array('ceil','floor','pow',';}');
        $strFuncionPrecio   = str_replace($arrayFunctionJs, $arrayFunctionPhp, $strFuncionPrecio);
        $strFuncionPrecio   = str_replace('"[', '[', $strFuncionPrecio);
        $strFuncionPrecio   = str_replace(']"', ']', $strFuncionPrecio);
        foreach($arrayProductoCaracteristicasValores as $strClave => $strValor)
        {
            $strFuncionPrecio = str_replace("[" . $strClave . "]", '"'. $strValor . '"', $strFuncionPrecio);
        }
        $strFuncionPrecio      = str_replace('PRECIO', '$floatPrecio', $strFuncionPrecio);
        $strDigitoVerificacion = substr($strFuncionPrecio, -1, 1);
        if(is_numeric($strDigitoVerificacion))
        {
            $strFuncionPrecio = $strFuncionPrecio . ";";
        }
        
        
        eval($strFuncionPrecio);
        return $floatPrecio;
    }

    /** Función que activa de forma lógica el servicio Switch PoE  de la empresa TN bajo la red GPON
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 06-10-2021
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 2.0 17-1-2023 - Se agrega arreglos elemento adicionales clente y nodo para servicios safe city.
     * 
 
     *
     * @param Array $arrayPeticiones
     *
     * @return Array $arrayRespuestaFinal [
     *                                      'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                      'mensaje'   => mensaje de la operación o de error
     *                                   ]
     */
    public function activarServicioSwPoeTNGpon($arrayPeticiones)
    {
        $strCodEmpresa     = $arrayPeticiones['idEmpresa'];
        $strPrefijoEmpresa = $arrayPeticiones['prefijoEmpresa'];
        $intIdServicio     = $arrayPeticiones['idServicio'];
        $strUltimaMilla    = $arrayPeticiones['ultimaMilla'];
        $intIdOnt          = $arrayPeticiones['idOnt'];
        $strPuertosOnt     = $arrayPeticiones['puertosOnt'];
        $strNombreElemento = $arrayPeticiones['nombreNuevoCpe'];
        $strMac            = $arrayPeticiones['macNuevoCpe'];
        $strSerie          = strtoupper($arrayPeticiones['serieNuevoCpe']);
        $strModelo         = $arrayPeticiones['modeloNuevoCpe'];
        $strUsrCreacion    = $arrayPeticiones['usrCreacion'];
        $strIpCreacion     = $arrayPeticiones['ipCreacion'];
        $strObservacion    = $arrayPeticiones['observacionCliente'];
        $arrayDipositivosNodo    = $arrayPeticiones['arrayDipositivosNodo'];
        $arrayDipositivosCliente = $arrayPeticiones['arrayDipositivosCliente'];

        try
        {
            //obtengo el servicio
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha podido obtener el servicio, por favor notificar a Sistemas.");
            }
            //obtengo el id detalle de la tarea
            $objCaractIdDetalle = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                'ID_DETALLE_TAREA_INSTALACION',$objServicio->getProductoId());
            if(!is_object($objCaractIdDetalle))
            {
                throw new \Exception("No se ha podido obtener la característica de la tarea del servicio, por favor notificar a Sistemas.");
            }
            //obtengo el info detalle
            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($objCaractIdDetalle->getValor());
            if(!is_object($objInfoDetalle))
            {
                throw new \Exception("No se ha podido obtener el detalle de la tarea del servicio, por favor notificar a Sistemas.");
            }
            //obtenemos el elemento del Ont
            $objElementoOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdOnt);
            if(!is_object($objElementoOnt))
            {
                throw new \Exception("No se ha podido obtener el elemento Ont, por favor notificar a Sistemas.");
            }
            //obtengo la interface elemento
            $objInterfaceElementoConector = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                    ->findOneBy(array("elementoId"              => $objElementoOnt->getId(),
                                                                      "nombreInterfaceElemento" => $strPuertosOnt));
            //obtengo los datos del servicio
            $objPunto           = $objServicio->getPuntoId();
            $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneByServicioId($objServicio->getId());
            //verificar elemento
            $arrayVerificarNaf  = $this->servicioGeneral->buscarEquipoEnNafPorParametros(array( "serieEquipo"           => $strSerie,
                                                                                                "estadoEquipo"          => "PI",
                                                                                                "tipoArticuloEquipo"    => "AF",
                                                                                                "modeloEquipo"          => $strModelo));
            if($arrayVerificarNaf["status"] === "ERROR")
            {
                throw new \Exception($arrayVerificarNaf["mensaje"]);
            }
            //validar modelo elemento
            $arrayValidModeloElemento = $this->emInfraestructura->getRepository("schemaBundle:AdmiModeloElemento")
                                                            ->createQueryBuilder('s')
                                                            ->andWhere("s.nombreModeloElemento = :nombreModeloElemento")
                                                            ->andWhere("s.estado               = :estado")
                                                            ->setParameter('nombreModeloElemento', $strModelo)
                                                            ->setParameter('estado',               "Activo")
                                                            ->orderBy('s.id', 'ASC')
                                                            ->getQuery()
                                                            ->getResult();
            if(!isset($arrayValidModeloElemento) || empty($arrayValidModeloElemento) || !is_array($arrayValidModeloElemento))
            {
                throw new \Exception("ERROR SW POE: El modelo del elemento no esta ingresado en Telcos, favor verificar.");
            }
            //validar modelo elemento
            $arrayParametrosModelosSwPoe = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                    'INFRAESTRUCTURA',
                                                                                    '',
                                                                                    'MODELOS_SWITCH_POE',
                                                                                    $strModelo,
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    $strCodEmpresa);
            if(!isset($arrayParametrosModelosSwPoe) || empty($arrayParametrosModelosSwPoe))
            {
                throw new \Exception("ERROR SW POE: El elemento ingresado no es un modelo de SW POE permitido, favor verificar.");
            }

            //verificar ont
            $arrayElementoNaf = $this->servicioGeneral->buscarElementoEnNaf($strSerie, $strModelo, "PI", "ActivarServicio");
            $strStatus   = $arrayElementoNaf[0]['status'];
            $strMensaje  = $arrayElementoNaf[0]['mensaje'];
            if($strStatus === "OK")
            {
                //almacenamos la serie del dispositivo cpe y el id de control para realizar la carga y descarga.
                $arrayEquipos    = array();
                $arrayInfoActivo = $this->emNaf->getRepository('schemaBundle:InfoDetalleMaterial')
                        ->obtenerEquiposAsignados(array('strIdEmpresa'   => $strCodEmpresa,
                                                        'intIdPersona'   => (!isset($arrayPeticiones['idTecnicoEncargado']) ? 
                                                                                    $arrayPeticiones['idTecnicoEncargado'] : null),
                                                        'strNumeroSerie' => $strSerie,
                                                        'booleanRedGponMpls' => true));
                if ($arrayInfoActivo['status'])
                {
                    if(!isset($arrayPeticiones['idTecnicoEncargado']) || empty($arrayPeticiones['idTecnicoEncargado']))
                    {
                        $arrayPeticiones['idTecnicoEncargado'] = $arrayInfoActivo["result"][0]['idPersona'];
                    }
                    $arrayEquipos[] = array('strNumeroSerie'  => $strSerie,
                                            'intIdControl'    => $arrayInfoActivo["result"][0]['idControl'],
                                            'intCantidadEnt'  => 1,
                                            'intCantidadRec'  => 1,
                                            'strTipoArticulo' => 'Equipos');
                }
                //verificar si esta vacío
                if(empty($arrayEquipos))
                {
                    throw new \Exception("DISPOSITIVOS CLIENTE: No se encontró el equipo asignado con serie del elemento $strSerie.");
                }

                if((is_array($arrayDipositivosNodo)  || is_array($arrayDipositivosCliente)) && 
                (is_object($objServicio) && $objServicio->getProductoId()->getNombreTecnico() === "SAFECITYSWPOE"))
                {
                    $arrayDipositivos = array('arrayDipositivosNodo'    => $arrayDipositivosNodo,
                                            'arrayDipositivosCliente' => $arrayDipositivosCliente,
                                            'idTecnicoEncargado'      => $arrayPeticiones['idTecnicoEncargado'],
                                            'objServicio'             => $objServicio,
                                            'strUsrCreacion'          => $strUsrCreacion,          
                                            'strIpCreacion'           => $strIpCreacion);

                    $arrayResponseGenerica = $this->agregarElemntosAdicionalesClienteNodo($arrayDipositivos);

                    if(isset($arrayResponseGenerica['status']) && !empty($arrayResponseGenerica['status']) &&
                            $arrayResponseGenerica['status'] === "ERROR")
                    {
                        throw new \Exception($arrayResponseGenerica['mensaje']);
                    }
                }

                /**INICIO ASIGNACION RECURSOS DE LOS SERVICIOS ADICIONALES DEL DATOS SAFECITY**/
                $objCaractServicioPrincipal = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                'RELACION_SERVICIOS_GPON_SAFECITY',$objServicio->getProductoId());
                if(!is_object($objCaractServicioPrincipal))
                {
                    throw new \Exception("No se ha podido obtener la característica del servicio Datos SafeCity, ".
                                         "por favor notificar a Sistemas.");
                }
                $objServicioOnt = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($objCaractServicioPrincipal->getValor());
                if(!is_object($objServicioOnt))
                {
                    throw new \Exception("No se ha podido obtener el servicio principal del ONT, por favor notificar a Sistemas.");
                }
                $arrayParAsignarAdd = array(
                    "objServicio"    => $objServicioOnt,
                    "peticion"       => $arrayPeticiones['peticion'],
                    "strCodEmpresa"  => $strCodEmpresa,
                    "strUsrCreacion" => $strUsrCreacion,
                    "strIpCreacion"  => $strIpCreacion,
                );
                $arrayResultadoAsignarAdd = $this->asignarServiciosAdicionalesSafeCityTNGpon($arrayParAsignarAdd);
                if($arrayResultadoAsignarAdd['status'] != "OK")
                {
                    throw new \Exception($arrayResultadoAsignarAdd['mensaje']);
                }
                $strMensaje .= $arrayResultadoAsignarAdd['mensaje'];
                /**FIN ASIGNACION RECURSOS DE LOS SERVICIOS ADICIONALES DEL DATOS SAFECITY**/

                //migrar servicios
                $arrayParametrosMigracion = array(
                    'objServicio'       => $objServicio,
                    'objInfoDetalle'    => $objInfoDetalle,
                    "strPrefijoEmpresa" => $strPrefijoEmpresa,
                    'strCodEmpresa'     => $strCodEmpresa,
                    'strUsrCreacion'    => $strUsrCreacion,
                    'strIpCreacion'     => $strIpCreacion
                );
                $arrayResultadoMigracion = $this->servicioGeneral->migrarServiciosSwitchPoeGponTN($arrayParametrosMigracion);
                if($arrayResultadoMigracion['status'] != "OK")
                {
                    throw new \Exception($arrayResultadoMigracion['mensaje']);
                }

                //registrar elemento
                $strCodigoArticulo        = "";
                $strTipoArticulo          = "AF";
                $strIdentificacionCliente = "";
                $objInterface = $this->servicioGeneral->ingresarElementoCliente($strNombreElemento, $strSerie, $strModelo, "",
                                                                                   $objInterfaceElementoConector, $strUltimaMilla,
                                                                                   $objServicio, $strUsrCreacion,
                                                                                   $strIpCreacion, $strCodEmpresa);
                $strNombreElemento  = $objInterface->getElementoId()->getNombreElemento();
                //actualizo el estado del ont
                $objInterface->setEstado("not connect");
                $this->emInfraestructura->persist($objInterface);
                $this->emInfraestructura->flush();
                //actualizo el estado de la interface
                $objInterfaceElementoConector->setEstado("connected");
                $this->emInfraestructura->persist($objInterfaceElementoConector);
                $this->emInfraestructura->flush();
                //ingresamos la mac del cliente
                if(!empty($strMac))
                {
                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),"MAC CLIENTE",
                                                                                   $strMac, $strUsrCreacion);
                }
                //ingresamos puerto del ont
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),"PUERTO_ONT",
                                                                               $strPuertosOnt, $strUsrCreacion);
                //guardar ont en servicio técnico
                $objServicioTecnico->setElementoClienteId($objInterface->getElementoId()->getId());
                $objServicioTecnico->setInterfaceElementoClienteId($objInterface->getId());
                $this->emComercial->persist($objServicioTecnico);
                $this->emComercial->flush();
                //actualizo el estado del servicio
                $objServicio->setEstado("Activo");
                $objServicio->setObservacion($strObservacion);
                $this->emComercial->persist($objServicio);
                $this->emComercial->flush();
                //ingreso historial
                $strObservacionServicio = "Informaci&oacute;n del Elemento Switch PoE<br/>";
                $strObservacionServicio .= "Nuevo Elemento <br/>";
                $strObservacionServicio .= "Nombre Elemento: ".$strNombreElemento."<br/>";
                $strObservacionServicio .= "Serie Elemento: ".$strSerie."<br/>";
                $strObservacionServicio .= "Modelo Elemento: ".$strModelo."<br/>";
                $strObservacionServicio .= "Mac Elemento: ".$strMac."<br/>";
                $this->servicioGeneral->ingresarServicioHistorial($objServicio, "Activo", $strObservacionServicio,
                                                                  $strUsrCreacion, $strIpCreacion);

                //obtengo la accion
                $objAccion  = $this->emSeguridad->getRepository('schemaBundle:SistAccion')->find(847);
                //historial del servicio
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion($strObservacion);
                $objServicioHistorial->setEstado("Activo");
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strIpCreacion);
                $objServicioHistorial->setAccion($objAccion->getNombreAccion());
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();

                //seteo punto facturacion
                $objPuntoFacturacion = $objServicio->getPuntoFacturacionId();
                if(!is_object($objPuntoFacturacion))
                {
                    $objServicio->setPuntoFacturacionId($objPunto);
                }
                //Generacion de Login Auxiliar al Servicio
                $this->servicioGeneral->generarLoginAuxiliar($objServicio->getId());

                //ingresar elemento
                $strMensajeError    = str_repeat(' ', 1000);
                $strSql             = "BEGIN AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
                                    . ":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, "
                                    . ":cantidad, :pv_mensajeerror); END;";
                $objStmt = $this->emNaf->getConnection()->prepare($strSql);
                $objStmt->bindParam('codigoEmpresaNaf', $strCodEmpresa);
                $objStmt->bindParam('codigoArticulo', $strCodigoArticulo);
                $objStmt->bindParam('tipoArticulo',$strTipoArticulo);
                $objStmt->bindParam('identificacionCliente', $strIdentificacionCliente);
                $objStmt->bindParam('serieCpe', $strSerie);
                $objStmt->bindParam('cantidad', intval(1));
                $objStmt->bindParam('pv_mensajeerror', $strMensajeError);
                $objStmt->execute();
                if(strlen(trim($strMensajeError))>0)
                {
                    throw new \Exception("ERROR SW POE NAF: ".$strMensajeError);
                }

                //LLAMADA AL SERVICE PARA REALIZAR LA CARGA Y DESCARGA DEL ACTIVO.
                if (!empty($arrayEquipos) && count($arrayEquipos) > 0)
                {
                    $arrayCargaDescarga['strUsuario']              =  $strUsrCreacion;
                    $arrayCargaDescarga['strIpUsuario']            =  $strIpCreacion;
                    $arrayCargaDescarga['strTipoRecibe']           = 'Cliente';
                    $arrayCargaDescarga['intIdServicio']           =  $objServicio->getId();
                    $arrayCargaDescarga['intIdEmpleado']           =  $arrayPeticiones['idTecnicoEncargado'];
                    $arrayCargaDescarga['intIdEmpresa']            =  $strCodEmpresa;
                    $arrayCargaDescarga['strTipoActividad']        = 'Instalacion';
                    $arrayCargaDescarga['strTipoTransaccion']      = 'Nuevo';
                    $arrayCargaDescarga['strObservacion']          = 'Instalacion del servicio';
                    $arrayCargaDescarga['arrayEquipos']            =  $arrayEquipos;
                    $arrayCargaDescarga['strEstadoSolicitud']      = 'Asignada';
                    $arrayCargaDescarga['strDescripcionSolicitud'] = 'SOLICITUD PLANIFICACION';
                    $arrayResCarDes = $this->serviceInfoElemento->cargaDescargaActivos($arrayCargaDescarga);
                }
            }
            else
            {
                throw new \Exception($strMensaje);
            }
        }
        catch (\Exception $e) 
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->activarServicioSwPoeTNGpon",
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );

        }

        $arrayRespuestaFinal = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }

    /**
     * Funcion que sirve para activar servicios de cámaras por migración de la empresa TN bajo la red GPON
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 15-10-2021
     *
     * @param Array $arrayParametros
     *
     * @return Array $arrayRessultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'mensaje'   => mensaje de la operación o de error
     *                               ]
     */
    public function activarMigracionCamaraTNGpon($arrayParametros)
    {
        $intIdServicio      = $arrayParametros['idServicio'];
        $intIdServicioSwPoe = $arrayParametros['idServicioSwPoe'];
        $intIdEmpresa       = $arrayParametros['idEmpresa'];
        $strPrefijoEmpresa  = $arrayParametros['prefijoEmpresa'];
        $strUsrCreacion     = $arrayParametros['usrCreacion'];
        $strIpCreacion      = $arrayParametros['ipCreacion'];

        try
        {
            $strSerieOnt        = $arrayParametros['serieOnt'];
            $strMacOnt          = $arrayParametros['macOnt'];
            $intIdInterfaceOnt  = $arrayParametros['idInterfaceOntSwPoe'];
            $intIdSwPoe         = $arrayParametros['idSwPoe'];
            $strPuertosSwPoe    = $arrayParametros['puertosSwPoe'];
            $strNombreCliente   = "";
            $strIdentificacion  = "";

            //obtengo el servicio
            $objServicio            = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(!is_object($objServicio))
            {
                throw new \Exception("No se encontró el servicio, por favor notificar a Sistemas.");
            }
            //obtengo el punto
            $objPunto               = $objServicio->getPuntoId();
            //obtengo la persona empresa rol
            $objInfoPersonaEmpresaRol   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($objPunto->getPersonaEmpresaRolId()->getId());
            if(is_object($objInfoPersonaEmpresaRol))
            {
                $strIdentificacion = $objInfoPersonaEmpresaRol->getPersonaId()->getIdentificacionCliente();
                $strNombreCliente  = $objInfoPersonaEmpresaRol->getPersonaId()->__toString();
            }
            //obtengo el servicio sw poe
            $objServicioSwPoe       = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioSwPoe);
            if(!is_object($objServicioSwPoe))
            {
                throw new \Exception("No se encontró el servicio SWITCH POE, por favor notificar a Sistemas.");
            }
            //obtengo el servicio tecnico
            $objServicioTecnico     = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                   ->findOneByServicioId($objServicio->getId());
            $objInterfaceElemento   = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                    ->find($objServicioTecnico->getInterfaceElementoClienteId());
            $objUltimaMilla         = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                    ->find($objServicioTecnico->getUltimaMillaId());
            //obtenemos la interface del Ont
            $objInterfaceElementoOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($intIdInterfaceOnt);
            if(!is_object($objInterfaceElementoOnt))
            {
                throw new \Exception("No se encontró la interface del elemento Ont, por favor notificar a Sistemas.");
            }
            //obtengo el servicio tecnico sw poe
            $objServicioTecnicoSwPoe = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                                                            ->findOneByServicioId($objServicioSwPoe->getId());
            if(!is_object($objServicioTecnicoSwPoe))
            {
                throw new \Exception("No se encontró el servicio técnico del servicio SWITCH POE, por favor notificar a Sistemas.");
            }
            //obtengo ultima milla
            $objUltimaMillaSwPoe    = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                ->find($objServicioTecnicoSwPoe->getUltimaMillaId());
            if(!is_object($objUltimaMillaSwPoe))
            {
                throw new \Exception("No se encontró la última milla del servicio SWITCH POE, por favor notificar a Sistemas.");
            }
            //obtengo la interface del SW POE
            $objInterfaceElementoSwPoe  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                    ->findOneBy(array("elementoId"              => $intIdSwPoe,
                                                                      "nombreInterfaceElemento" => $strPuertosSwPoe));

            //verificar si ya tiene camara principal activa
            $objServCaractCamPrincipal  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioSwPoe,
                                                                                                   'RELACION_CAMARA_PRINCIPAL',
                                                                                                   $objServicioSwPoe->getProductoId());
            //ejecutar activación en el equipo
            if(!is_object($objServCaractCamPrincipal))
            {
                //ingresamos la relación de la camara principal al servicio sw poe
                $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioSwPoe,$objServicioSwPoe->getProductoId(),
                                                                               "RELACION_CAMARA_PRINCIPAL",
                                                                               $objServicio->getId(), $strUsrCreacion);
                $arrayParametrosWsRda = array(
                    "objServicio"    => $objServicio,
                    "idInterfaceOnt" => $intIdInterfaceOnt,
                    "serieOnt"       => $strSerieOnt,
                    "macOnt"         => $strMacOnt,
                    "prefijoEmpresa" => $strPrefijoEmpresa,
                    "strCodEmpresa"  => $intIdEmpresa,
                    "strUsrCreacion" => $strUsrCreacion,
                    "strIpCreacion"  => $strIpCreacion,
                );
                $arrayRespuestaWsRda  = $this->reactivarServiciosSafeCityTNGpon($arrayParametrosWsRda);
                if($arrayRespuestaWsRda['status'] != "OK")
                {
                    throw new \Exception($arrayRespuestaWsRda['mensaje']);
                }
            }

            //verifico si tiene enlace la interface del sw poe
            $objEnlaceSwPoe = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                ->findOneBy(array("interfaceElementoFinId" => $objInterfaceElementoSwPoe,
                                                                  "estado"                 => "Activo"));
            if(!is_object($objEnlaceSwPoe))
            {
                //insertar nuevo enlace sw poe
                $objEnlaceSwPoe = new InfoEnlace();
                $objEnlaceSwPoe->setInterfaceElementoIniId($objInterfaceElementoOnt);
                $objEnlaceSwPoe->setInterfaceElementoFinId($objInterfaceElementoSwPoe);
                $objEnlaceSwPoe->setTipoMedioId($objUltimaMillaSwPoe);
                $objEnlaceSwPoe->setTipoEnlace($objServicioTecnicoSwPoe->getTipoEnlace());
                $objEnlaceSwPoe->setEstado("Activo");
                $objEnlaceSwPoe->setUsrCreacion($strUsrCreacion);
                $objEnlaceSwPoe->setFeCreacion(new \DateTime('now'));
                $objEnlaceSwPoe->setIpCreacion($strIpCreacion);
                $this->emInfraestructura->persist($objEnlaceSwPoe);
                $this->emInfraestructura->flush();
            }
            //obtener el enlace de la camara
            $objEnlaceAnterior = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                ->findOneBy(array("interfaceElementoFinId" => $objInterfaceElemento,
                                                                  "estado"                 => "Activo"));
            if(is_object($objEnlaceAnterior))
            {
                $objEnlaceAnterior->setEstado("Eliminado");
                $this->emInfraestructura->persist($objEnlaceAnterior);
                $this->emInfraestructura->flush();
            }
            //insertar nuevo enlace
            $objEnlace = new InfoEnlace();
            $objEnlace->setInterfaceElementoIniId($objInterfaceElementoSwPoe);
            $objEnlace->setInterfaceElementoFinId($objInterfaceElemento);
            $objEnlace->setTipoMedioId($objUltimaMilla);
            $objEnlace->setTipoEnlace($objServicioTecnico->getTipoEnlace());
            $objEnlace->setEstado("Activo");
            $objEnlace->setUsrCreacion($strUsrCreacion);
            $objEnlace->setFeCreacion(new \DateTime('now'));
            $objEnlace->setIpCreacion($strIpCreacion);
            $this->emInfraestructura->persist($objEnlace);
            $this->emInfraestructura->flush();
            //obtener la característica del puerto del ont
            $objServCaractPuertoOnt = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,'PUERTO_ONT',
                                                                                                $objServicio->getProductoId());
            if(is_object($objServCaractPuertoOnt))
            {
                $objServCaractPuertoOnt->setEstado("Eliminado");
                $this->emComercial->persist($objServCaractPuertoOnt);
                $this->emComercial->flush();
            }
            //ingresar puerto ont característica
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                           $objServicio->getProductoId(),
                                                                           "PUERTO_ONT",
                                                                           $objInterfaceElementoOnt->getNombreInterfaceElemento(),
                                                                           $strUsrCreacion);
            //ingresar característica servicio en sw poe
            $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicio,
                                                                           $objServicio->getProductoId(),
                                                                           "SERVICIO_EN_SWITCH_POE",
                                                                           "SI",
                                                                           $strUsrCreacion);
            //actualizo el estado de la interface del Sw PoE
            $objInterfaceElementoSwPoe->setEstado("connected");
            $this->emInfraestructura->persist($objInterfaceElementoSwPoe);
            $this->emInfraestructura->flush();
            //actualizo el estado de la interface de la cámara
            $objInterfaceElemento->setEstado("connected");
            $this->emInfraestructura->persist($objInterfaceElemento);
            $this->emInfraestructura->flush();
            //ingreso historial
            $this->servicioGeneral->ingresarServicioHistorial($objServicio, "Activo",
                                             "Se ejecuto la migración del servicio al Switch PoE",
                                             $strUsrCreacion, $strIpCreacion);
            //finalizar solicitud migración
            $objTipoSolicitudMigracion = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD MIGRACION SWITCH POE",
                                                                  "estado"               => "Activo"));
            $objSolicitudMigracion     = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->findOneBy(array("servicioId"      => $objServicio->getId(),
                                                                  "tipoSolicitudId" => $objTipoSolicitudMigracion->getId(),
                                                                  "estado"          => "AsignadoTarea"));
            if(is_object($objSolicitudMigracion))
            {
                $objSolicitudMigracion->setEstado("Finalizada");
                $this->emComercial->persist($objSolicitudMigracion);
                $this->emComercial->flush();
            }

            //reasignar tarea del servicio
            $arrayParametosTarea["objServicio"]       = $objServicio;
            $arrayParametosTarea["strObservacion"]    = "Se reasigna la tarea de la cámara por migración del servicio al Switch PoE";
            $arrayParametosTarea["strCodEmpresa"]     = $arrayParametros['idEmpresa'];
            $arrayParametosTarea["strPrefijoEmpresa"] = $arrayParametros['prefijoEmpresa'];
            $arrayParametosTarea["strUsrCreacion"]    = $arrayParametros['usrCreacion'];
            $arrayParametosTarea["strIpCreacion"]     = $arrayParametros['ipCreacion'];
            $this->servicioGeneral->reasignarTareaSafeCityGponTN($arrayParametosTarea);

            //**Verificar si existe un servicio mascarilla asociado en la camara para enviar crear la tarea automatica de configuracion**//
            $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                           'INFRAESTRUCTURA',
                                                           'PARAMETROS',
                                                           'TIPO_SERVICIO',
                                                           'SERVICIO_MASCARILLA',
                                                           '',
                                                           '',
                                                           '',
                                                           '',
                                                           $arrayParametros['idEmpresa']);
            if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
            {
                $strNombreCaracteristica = $arrayParametrosDet["valor2"];
            }
            $objServProdCaractServMascarilla = $this->servicioGeneral
                                                    ->getServicioProductoCaracteristica($objServicio,
                                                                                        $strNombreCaracteristica,
                                                                                        $objServicio->getProductoId());
            if(is_object($objServProdCaractServMascarilla))
            {
                $arrayParametrosConfigurarMascarilla["intEmpresaId"]          = $arrayParametros['idEmpresa'];
                $arrayParametrosConfigurarMascarilla["strPrefijoEmpresa"]     = "";
                $arrayParametrosConfigurarMascarilla["intServicioOrigenId"]   = $objServProdCaractServMascarilla->getValor();
                $arrayParametrosConfigurarMascarilla["intIdServicioCamara"]   = $objServicio->getId();
                $arrayParametrosConfigurarMascarilla["strTipoDeServicio"]     = "SERVICIO_MASCARILLA";
                $arrayParametrosConfigurarMascarilla["strUsrCreacion"]        = $arrayParametros['usrCreacion'];
                $arrayParametrosConfigurarMascarilla["strIpCreacion"]         = $arrayParametros['ipCreacion'];
                $arrayParametrosConfigurarMascarilla["strDepartamentoOrigen"] = "";
                $this->envioTareaServicioMascarilla($arrayParametrosConfigurarMascarilla);
            }
            //obtener la característica migracion sw poe
            $objServCaractMigrar = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,'MIGRACION_SWITCH_POE',
                                                                                             $objServicio->getProductoId());
            if(is_object($objServCaractMigrar))
            {
                $objServCaractMigrar->setEstado("Eliminado");
                $this->emComercial->persist($objServCaractMigrar);
                $this->emComercial->flush();
            }

            $strStatus  = "OK";
            $strMensaje = "Se ejecuto la migración del servicio al Switch PoE";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->activarMigracionCamaraTNGpon",
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }

        $arrayRespuestaFinal = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRespuestaFinal;
    }

    /**
     * Funcion que sirve para asignar los servicios adicionales Datos SafeCity para la empresa TN bajo la red GPON
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 11-10-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 15-06-2022 - Se pasa el id de la empresa al método para obtener la vrf y vlan.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 01-08-2022 - Se agrega validacion para la asignación de recursos de red del servicio SAFE ANALYTICS CAM.
     *
     * @param Array $arrayParametros
     *
     * @return Array $arrayRessultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'mensaje'   => mensaje de la operación o de error
     *                               ]
     */
    public function asignarServiciosAdicionalesSafeCityTNGpon($arrayParametros)
    {
        $strMensaje     = "";
        $objServicio    = $arrayParametros['objServicio'];
        $strCodEmpresa  = $arrayParametros['strCodEmpresa'];
        $strUsrCreacion = $arrayParametros['strUsrCreacion'];
        $strIpCreacion  = $arrayParametros['strIpCreacion'];
        $booleanSerInternetVpnGpon = isset($arrayParametros['booleanSerInternetVpnGpon'])
                                     ? $arrayParametros['booleanSerInternetVpnGpon'] : false;

        try
        {
            $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneByServicioId($objServicio->getId());
            //obtener servicio SW POE
            $intIdServicioSwPoe = null;
            $arrayParametrosSwPoe['objPunto']      = $objServicio->getPuntoId();
            $arrayParametrosSwPoe['strParametro']  = "PRODUCTO_ADICIONAL_SW_POE";
            $arrayParametrosSwPoe['strCodEmpresa'] = $strCodEmpresa;
            $arrayResultServicioSwPoe = $this->servicioGeneral->getServicioGponPorProducto($arrayParametrosSwPoe);
            if($arrayResultServicioSwPoe['status'] != "OK")
            {
                throw new \Exception($arrayResultServicioSwPoe['mensaje']);
            }
            //seteo el servicio SW POE
            $objServicioSwPoe = $arrayResultServicioSwPoe['objServicio'];
            if(is_object($objServicioSwPoe) && $objServicioSwPoe->getEstado() == "AsignadoTarea")
            {
                $intIdServicioSwPoe = $objServicioSwPoe->getId();
            }
            /**INICIO ASIGNACION RECURSOS DE LOS SERVICIOS ADICIONALES DEL DATOS SAFECITY**/
            $intContadorVerificarAdicionales = 0;
            $arrayParServAdd = array(
                "intIdProducto"      => $objServicio->getProductoId()->getId(),
                "intIdServicio"      => $objServicio->getId(),
                "strNombreParametro" => 'CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                "strUsoDetalles"     => 'AGREGAR_SERVICIO_ADICIONAL',
            );
            $arrayProdCaracConfProAdd  = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->getServiciosPorProdAdicionalesSafeCity($arrayParServAdd);
            if($arrayProdCaracConfProAdd['status'] == 'OK' && count($arrayProdCaracConfProAdd['result']) > 0)
            {
                foreach($arrayProdCaracConfProAdd['result'] as $arrayServicioConfProAdd)
                {
                    $objServicioAdd = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                            ->findOneBy(array("id"     => $arrayServicioConfProAdd['idServicio'],
                                                                              "estado" => "AsignadoTarea"));
                    if( is_object($objServicioAdd) && is_object($objServicioAdd->getProductoId()) &&
                        ($intIdServicioSwPoe == null || $intIdServicioSwPoe == $objServicioAdd->getId()) )
                    {
                        //obtengo servicio tecnico
                        $objServicioTecnicoAdd = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array("servicioId" => $objServicioAdd->getId()));
                        //verificar que no sea SW POE
                        if($intIdServicioSwPoe == null)
                        {
                            //obtengo los datos de vlan y vrf por servicio
                            if($booleanSerInternetVpnGpon)
                            {
                                $arrayResultadoVlanVrf['status'] = "OK";
                            }
                            else
                            {
                                $arrayResultadoVlanVrf = $this->servicioGeneral
                                                                ->getVlanVrfPorServicio(array("objServicio"   => $objServicioAdd,
                                                                                              "strCodEmpresa" => $strCodEmpresa));
                            }
                            //obtengo los datos de ip por servicio
                            if($objServicioAdd->getProductoId()->getNombreTecnico() != "SAFECITYWIFI")
                            {
                                $arrayResultadoSubred = $this->servicioGeneral
                                                            ->getIpDisponiblePorServicio(array("objServicio"    => $objServicioAdd,
                                                                                               "strCodEmpresa"  => $strCodEmpresa,
                                                                                               "strUsrCreacion" => $strUsrCreacion,
                                                                                               "strIpCreacion"  => $strIpCreacion));
                            }
                            else
                            {
                                $arrayResultadoSubred['status'] = "OK";
                            }
                        }
                        else
                        {
                            $arrayResultadoVlanVrf['status'] = "OK";
                            $arrayResultadoSubred['status']  = "OK";
                        }
                        //verificar resultado
                        if($arrayResultadoSubred['status'] == "OK" && $arrayResultadoVlanVrf['status'] == "OK")
                        {
                            //recursos de red
                            if($intIdServicioSwPoe == null)
                            {
                                //obtengo los datos de vlan y vrf por servicio
                                $objDetalleEleVlan      = $arrayResultadoVlanVrf['objDetalleElementoVlan'];
                                $objPersonaEmpCaractVrf = $arrayResultadoVlanVrf['objPersonaEmpCaractVrf'];
                                //verificar si el servicio es WIFI
                                if($objServicioAdd->getProductoId()->getNombreTecnico() == "SAFECITYWIFI")
                                {
                                    $objDetalleEleVlanAdmin      = $arrayResultadoVlanVrf['objDetalleElementoVlanAdmin'];
                                    $objPersonaEmpCaractVrfAdmin = $arrayResultadoVlanVrf['objPersonaEmpCaractVrfAdmin'];
                                    //se graba vlan del servicio adicional
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioAdd,$objServicioAdd->getProductoId(),
                                                                            "VLAN SSID",$objDetalleEleVlan->getId(),$strUsrCreacion);
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioAdd,$objServicioAdd->getProductoId(),
                                                                            "VLAN ADMIN",$objDetalleEleVlanAdmin->getId(),$strUsrCreacion);
                                    //se graba vrf del servicio adicional
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioAdd,$objServicioAdd->getProductoId(),
                                                                            "VRF SSID",$objPersonaEmpCaractVrf->getId(),$strUsrCreacion);
                                    $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioAdd,$objServicioAdd->getProductoId(),
                                                                            "VRF ADMIN",$objPersonaEmpCaractVrfAdmin->getId(),$strUsrCreacion);
                                }
                                else
                                {
                                    //obtener los datos de subred
                                    $objSubredServicioAdd = $arrayResultadoSubred['objSubred'];
                                    //obtener la ip
                                    $strIpServicioAdd = $arrayResultadoSubred['strIpServicio'];
                                    //se graba ip del servicio adicional
                                    $objIpSerAdd = new InfoIp();
                                    $objIpSerAdd->setIp($strIpServicioAdd);
                                    $objIpSerAdd->setSubredId($objSubredServicioAdd->getId());
                                    $objIpSerAdd->setServicioId($objServicioAdd->getId());
                                    $objIpSerAdd->setMascara($objSubredServicioAdd->getMascara());
                                    $objIpSerAdd->setFeCreacion(new \DateTime('now'));
                                    $objIpSerAdd->setUsrCreacion($strUsrCreacion);
                                    $objIpSerAdd->setIpCreacion($strIpCreacion);
                                    $objIpSerAdd->setEstado("Reservada");
                                    $objIpSerAdd->setTipoIp("LAN");
                                    $objIpSerAdd->setVersionIp("IPV4");
                                    $this->emInfraestructura->persist($objIpSerAdd);
                                    $this->emInfraestructura->flush();
                                    //se asignan la vlan y vrf para servicios gpon mpls
                                    if(!$booleanSerInternetVpnGpon)
                                    {
                                        //se graba vrf del servicio adicional
                                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioAdd,
                                                                                $objServicioAdd->getProductoId(),
                                                                                "VLAN",$objDetalleEleVlan->getId(),$strUsrCreacion);
                                        //se graba vlan del servicio adicional
                                        $this->servicioGeneral->ingresarServicioProductoCaracteristica($objServicioAdd,
                                                                                $objServicioAdd->getProductoId(),
                                                                                "VRF",$objPersonaEmpCaractVrf->getId(),$strUsrCreacion);
                                    }
                                }
                            }
                            //obtengo el id detalle de la tarea
                            $objCaractIdDetalle = $this->servicioGeneral->getServicioProductoCaracteristica($objServicioAdd,
                                                                'ID_DETALLE_TAREA_INSTALACION',$objServicioAdd->getProductoId());
                            //verifico si se actualiza el estado de la tarea del servicio por detalles del parametro de la red GPON
                            $arrayParDetEstadoTareaGpon = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('NUEVA_RED_GPON_TN',
                                                                     'COMERCIAL',
                                                                     '',
                                                                     'CAMBIAR ESTADO TAREA SERVICIO',
                                                                     $objServicioAdd->getProductoId()->getId(),
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     $strCodEmpresa);
                            if( isset($arrayParDetEstadoTareaGpon) && !empty($arrayParDetEstadoTareaGpon)
                                && isset($arrayParDetEstadoTareaGpon['valor4'])&& !empty($arrayParDetEstadoTareaGpon['valor4'])
                                && isset($arrayParDetEstadoTareaGpon['valor5'])&& !empty($arrayParDetEstadoTareaGpon['valor5'])
                                && is_object($objCaractIdDetalle))
                            {
                                //obtengo el info detalle
                                $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                                    ->find($objCaractIdDetalle->getValor());
                                if(is_object($objInfoDetalle))
                                {
                                    $arrayParametrosEstado                 = array();
                                    $arrayParametrosEstado['cargarTiempo'] = "cliente";
                                    $arrayParametrosEstado['esSolucion']   = "N";
                                    $arrayParametrosEstado['strCodEmpresa']     = $strCodEmpresa;
                                    $arrayParametrosEstado['strUsrCreacion']    = $strUsrCreacion;
                                    $arrayParametrosEstado['strIpCreacion']     = $strIpCreacion;
                                    $arrayParametrosEstado["intIdDepartamento"] = "";
                                    $arrayParametrosEstado['estado']       = $arrayParDetEstadoTareaGpon['valor4'];
                                    $arrayParametrosEstado['observacion']  = $arrayParDetEstadoTareaGpon['valor5'];
                                    $this->serviceSoporte->cambiarEstadoTarea($objInfoDetalle,null,$arrayParametros['peticion'],
                                                                              $arrayParametrosEstado);
                                }
                            }
                            //seteo observación
                            $strObservacionServicio = "";
                            //observación de tarea
                            if($intIdServicioSwPoe == null)
                            {
                                //seteo observación
                                $strObservacionServicio = "Se asignaron los siguientes recursos de red:<br>";
                                //verificar si el servicio es WIFI
                                if($objServicioAdd->getProductoId()->getNombreTecnico() == "SAFECITYWIFI")
                                {
                                    $strObservacionServicio .= "<b>VLAN SSID:</b> ".$objDetalleEleVlan->getDetalleValor()."<br>".
                                                               "<b>VRF SSID:</b> ".$objPersonaEmpCaractVrf->getValor()."<br>".
                                                               "<b>VLAN ADMIN:</b> ".$objDetalleEleVlanAdmin->getDetalleValor()."<br>".
                                                               "<b>VRF ADMIN:</b> ".$objPersonaEmpCaractVrfAdmin->getValor();
                                }
                                else
                                {
                                    $strObservacionServicio .= "<b>Subred del Servicio:</b> ".$objSubredServicioAdd->getSubred()."<br>".
                                                               "<b>Mascara:</b> ".$objSubredServicioAdd->getMascara()."<br>".
                                                               "<b>Gateway:</b> ".$objSubredServicioAdd->getGateway()."<br>".
                                                               "<b>IP del Servicio:</b> ".$strIpServicioAdd."<br>";
                                    if(!$booleanSerInternetVpnGpon)
                                    {
                                        $strObservacionServicio .= "<b>VLAN:</b> ".$objDetalleEleVlan->getDetalleValor()."<br>".
                                                                   "<b>VRF:</b> ".$objPersonaEmpCaractVrf->getValor();
                                    }
                                }
                                //ingresar seguimiento a la tarea
                                if(is_object($objCaractIdDetalle))
                                {
                                    //obtengo el info detalle
                                    $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                                        ->find($objCaractIdDetalle->getValor());
                                    if(is_object($objInfoDetalle))
                                    {
                                        $arrayParametrosHist                   = array();
                                        $arrayParametrosHist["intDetalleId"]   = $objInfoDetalle->getId();
                                        $arrayParametrosHist["strCodEmpresa"]  = $strCodEmpresa;
                                        $arrayParametrosHist["strUsrCreacion"] = $strUsrCreacion;
                                        $arrayParametrosHist["strIpCreacion"]  = $strIpCreacion;
                                        $arrayParametrosHist["strOpcion"]      = "Seguimiento";
                                        $arrayParametrosHist["strEstadoActual"] = "Asignada";
                                        $arrayParametrosHist["strEnviaDepartamento"] = "N";
                                        $arrayParametrosHist["strObservacion"] = $strObservacionServicio;
                                        $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                                    }
                                }
                            }
                            //setear estado del servicio
                            $objServicioAdd->setEstado("Asignada");
                            $this->emComercial->persist($objServicioAdd);
                            $this->emComercial->flush();
                            //seteo la interface y elemento conector
                            $objServicioTecnicoAdd->setElementoConectorId($objServicioTecnico->getElementoConectorId());
                            $objServicioTecnicoAdd->setInterfaceElementoConectorId($objServicioTecnico->getInterfaceElementoConectorId());
                            $this->emComercial->persist($objServicioTecnicoAdd);
                            $this->emComercial->flush();
                            //ingreso historial
                            $this->servicioGeneral->ingresarServicioHistorial($objServicioAdd, "Asignada", $strObservacionServicio,
                                                                              $strUsrCreacion, $strIpCreacion);
                            //Generacion de Login Auxiliar del Servicio Adicional
                            $this->servicioGeneral->generarLoginAuxiliar($objServicioAdd->getId());
                            //cambiar estado solicitud planificacion
                            $objTipoSolicitudPlanficacion = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                                  "estado"               => "Activo"));
                            $objSolicitudPlanficacionAdd  = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                ->findOneBy(array("servicioId"      => $objServicioAdd->getId(),
                                                                                  "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                                  "estado"          => "AsignadoTarea"));
                            if(is_object($objSolicitudPlanficacionAdd))
                            {
                                $objSolicitudPlanficacionAdd->setEstado("Asignada");
                                $this->emComercial->persist($objSolicitudPlanficacionAdd);
                                $this->emComercial->flush();
                                //agregar historial a la solicitud
                                $objSolicitudHistorialAdd = new InfoDetalleSolHist();
                                $objSolicitudHistorialAdd->setDetalleSolicitudId($objSolicitudPlanficacionAdd);
                                $objSolicitudHistorialAdd->setIpCreacion($strIpCreacion);
                                $objSolicitudHistorialAdd->setFeCreacion(new \DateTime('now'));
                                $objSolicitudHistorialAdd->setUsrCreacion($strUsrCreacion);
                                $objSolicitudHistorialAdd->setEstado("Asignada");
                                $objSolicitudHistorialAdd->setObservacion($strObservacionServicio);
                                $this->emComercial->persist($objSolicitudHistorialAdd);
                                $this->emComercial->flush();
                            }
                        }
                        else
                        {
                            //contador
                            $intContadorVerificarAdicionales++;
                            //ingreso historial
                            $strObservacionServicio = "No se generó la asignación de recursos de red para este servicio.";
                            if($arrayResultadoSubred['status'] != "OK")
                            {
                                $strObservacionServicio .= "<br>No hay ip disponibles";
                            }
                            if($arrayResultadoVlanVrf['status'] != "OK")
                            {
                                $strObservacionServicio .= "<br>No se pudo obtener la vlan y vrf";
                            }
                            $this->servicioGeneral->ingresarServicioHistorial($objServicioAdd, "AsignadoTarea", $strObservacionServicio,
                                                                              $strUsrCreacion, $strIpCreacion);
                        }
                    }
                }
            }
            /**FIN ASIGNACION RECURSOS DE LOS SERVICIOS ADICIONALES DEL DATOS SAFECITY**/
            //verificar contador
            if($intContadorVerificarAdicionales > 0)
            {
                $strMensaje .= "<br>No se asignaron los recursos de red para ".$intContadorVerificarAdicionales." servicio(s) adicionales, ".
                               "por favor notificar a Sistemas para la verificación de recursos de red y luego continúe con la asignación de ".
                               "recursos para los servicios adicionales.";
            }
            //setear respuesta
            $arrayRespuesta = array(
                "status"  => "OK",
                "mensaje" => $strMensaje
            );
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta = array(
                "status"  => "ERROR",
                "mensaje" => "<br>No se pudo asignar los recursos de los servicios adicionales."
            );
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->asignarServiciosAdicionalesSafeCityTNGpon",
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para ejecutar la reactivación de los servicios SafeCity en el ws de rda para la empresa TN bajo la red GPON
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 18-10-2021
     *
     * @param Array $arrayParametros [
     *                                  'objServicio'    => objeto del servicio
     *                                  'idInterfaceOnt' => id de la interface del ont
     *                                  'serieOnt'       => serie del ont
     *                                  'macOnt'         => mac ont
     *                                  'prefijoEmpresa' => prefijo empresa
     *                                  'strCodEmpresa'  => código empresa
     *                                  'strUsrCreacion' => usuario creación
     *                                  'strIpCreacion'  => ip creación
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'mensaje'   => mensaje de la operación o de error
     *                               ]
     */
    public function reactivarServiciosSafeCityTNGpon($arrayParametros)
    {
        $objServicio        = $arrayParametros['objServicio'];
        $intIdEmpresa       = $arrayParametros['strCodEmpresa'];
        $strUsrCreacion     = $arrayParametros['strUsrCreacion'];
        $strIpCreacion      = $arrayParametros['strIpCreacion'];
        $strPrefijoEmpresa  = $arrayParametros['prefijoEmpresa'];
        $intIdInterfaceOnt  = $arrayParametros['idInterfaceOnt'];
        $strSerieOnt        = $arrayParametros['serieOnt'];
        $strMacOnt          = $arrayParametros['macOnt'];

        try
        {
            $strIdentificacion       = "";
            $strNombreCliente        = "";
            //obtengo el producto
            $objProducto             = $objServicio->getProductoId();
            //obtengo el punto
            $objPunto                = $objServicio->getPuntoId();
            //obtengo la persona empresa rol
            $objInfoPersonaEmpRol    = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($objPunto->getPersonaEmpresaRolId()->getId());
            if(is_object($objInfoPersonaEmpRol))
            {
                $strIdentificacion = $objInfoPersonaEmpRol->getPersonaId()->getIdentificacionCliente();
                $strNombreCliente  = $objInfoPersonaEmpRol->getPersonaId()->__toString();
            }
            //obtenemos la interface del Ont
            $objInterfaceElementoOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')->find($intIdInterfaceOnt);
            if(!is_object($objInterfaceElementoOnt))
            {
                throw new \Exception("No se encontró la interface del elemento Ont, por favor notificar a Sistemas.");
            }
            //obtengo el servicio tecnico
            $objServicioTecnico      = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                   ->findOneByServicioId($objServicio->getId());
            //obtengo la interface elemento olt
            $objInterfaceElementoOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoId());
            //obtengo el elemento olt
            $objElementoOlt          = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                    ->find($objServicioTecnico->getElementoId());
            //marca del olt
            $strMarcaElementoOlt     = $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
            //obtengo la ip del elemento
            $objInfoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneBy(array("elementoId" => $objElementoOlt->getId(),
                                                                      "estado"     => "Activo"));
            if(is_object($objInfoIp))
            {
                $strIpOlt   = $objInfoIp->getIp();
            }
            else
            {
                throw new \Exception("No se encontró la Ip del elemento ".$objElementoOlt->getNombreElemento()." para tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo indice del cliente
            $objCaractIndiceCliente  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'INDICE CLIENTE',
                                                                                                $objProducto);
            if(!is_object($objCaractIndiceCliente))
            {
                throw new \Exception("No se encontró la característica indice del cliente del servicio, por favor notificar a Sistemas.");
            }
            //obtengo service profile
            $objCaractServiceProfile = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'SERVICE-PROFILE',
                                                                                                $objProducto);
            if(!is_object($objCaractServiceProfile))
            {
                throw new \Exception("No se encontró la característica service profile del servicio, por favor notificar a Sistemas.");
            }
            //obtengo line profile name
            $objCaractLineProfile    = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'LINE-PROFILE-NAME',
                                                                                                $objProducto);
            if(!is_object($objCaractLineProfile))
            {
                throw new \Exception("No se encontró la característica line profile del servicio, por favor notificar a Sistemas.");
            }
            //obtengo vlan
            $strCaractVlan           = "VLAN";
            if($objProducto->getNombreTecnico() == "SAFECITYWIFI")
            {
                $strCaractVlan       = "VLAN SSID";
            }
            $objProCaractVlan        = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                 $strCaractVlan,
                                                                                                 $objProducto);
            if(!is_object($objProCaractVlan))
            {
                throw new \Exception("No se encontró la característica de la $strCaractVlan del servicio, por favor notificar a Sistemas.");
            }
            $objDetalleVlan          = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                            ->find($objProCaractVlan->getValor());
            if(!is_object($objDetalleVlan))
            {
                throw new \Exception("No se encontró el detalle del elemento de la $strCaractVlan del servicio, por favor notificar a Sistemas.");
            }
            //opción para la activación
            $strOpcionActivar                             = "";
            //arreglos de parametros
            $arrayParametrosDatos                         = array();
            $arrayDatosActivar                            = array();
            $arrayDatosAdminActivar                       = array();
            $arrayDatosNetworking                         = array();
            $arrayDatosAdminNetworking                    = array();
            $arrayParametrosDatos['login_aux']            = $objServicio->getLoginAux();
            $arrayParametrosDatos['serial_ont']           = $strSerieOnt;
            $arrayParametrosDatos['mac_ont']              = $strMacOnt;
            $arrayParametrosDatos['ont_id']               = $objCaractIndiceCliente->getValor();
            $arrayParametrosDatos['nombre_olt']           = $objElementoOlt->getNombreElemento();
            $arrayParametrosDatos['ip_olt']               = $strIpOlt;
            $arrayParametrosDatos['puerto_olt']           = $objInterfaceElementoOlt->getNombreInterfaceElemento();
            $arrayParametrosDatos['modelo_olt']           = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
            $arrayParametrosDatos['estado_servicio']      = $objServicio->getEstado();
            $arrayParametrosDatos['vlan_ethernet']        = $objDetalleVlan->getDetalleValor();
            $arrayParametrosDatos['puerto_ethernet']      = preg_replace('/[^0-9]/', '', $objInterfaceElementoOnt->getNombreInterfaceElemento());
            $arrayParametrosDatos['service_profile']      = $objCaractServiceProfile->getValor();
            $arrayParametrosDatos['line_profile']         = $objCaractLineProfile->getValor();
            //verificar cantidad de datos
            if($objProducto->getNombreTecnico() == "SAFECITYWIFI")
            {
                $arrayParametrosDatos['numero_datos_activar'] = 2;
            }
            else
            {
                $arrayParametrosDatos['numero_datos_activar'] = 1;
            }
            //verificar cpe
            $arrayParametrosDatos['tiene_cpe']            = "N";
            //verificar servicios
            $arrayParametrosDatos['tiene_datos']          = "S";
            $arrayParametrosDatos['tiene_internet']       = "N";
            //seteo parametros internet
            $arrayParametrosDatos['gemport_internet']       = "";
            $arrayParametrosDatos['traffic_table_internet'] = "";
            $arrayParametrosDatos['t_cont_internet']        = "";
            $arrayParametrosDatos['id_mapping_internet']    = "";
            $arrayParametrosDatos['vlan_internet']          = "";
            //parametros configuración rda
            $arrayParametrosConfRda = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne("NUEVA_RED_GPON_TN",
                                                                "COMERCIAL",
                                                                "",
                                                                "PARAMETROS PARA WS de RDA - Activacion",
                                                                "CONFIG_RDA",
                                                                "",
                                                                "",
                                                                "",
                                                                "",
                                                                $intIdEmpresa);
            if(isset($arrayParametrosConfRda['valor2']) && !empty($arrayParametrosConfRda['valor2'])
               && !empty($arrayParametrosConfRda['valor3']) && !empty($arrayParametrosConfRda['valor4'])
               && !empty($arrayParametrosConfRda['valor6']) && !empty($arrayParametrosConfRda['valor7']))
            {
                //seteo la opcion de activacion
                $strOpcionActivar   = $arrayParametrosConfRda['valor3'];
                //seteo el tipo negocio
                $arrayParametrosDatos['tipo_negocio_actual'] = $arrayParametrosConfRda['valor4'];
            }
            else
            {
                throw new \Exception("No se encontró los datos de configuración RDA para tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //parametros rda monitoreo
            $arrayParametrosRdaMonitoreo = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne("NUEVA_RED_GPON_TN",
                                                                "COMERCIAL",
                                                                "",
                                                                "PARAMETROS PARA WS de RDA - Activacion",
                                                                "ACTIVAR_MONITOREO",
                                                                "",
                                                                "",
                                                                "",
                                                                "",
                                                                $intIdEmpresa);
            if(isset($arrayParametrosRdaMonitoreo['valor1']) && !empty($arrayParametrosRdaMonitoreo['valor1']))
            {
                //parametro para traffic-table del servicio
                $arrayParametrosTraffic = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne("MAPEO_VELOCIDAD_TRAFFIC_TABLE_GPON",
                                                                        "TECNICO",
                                                                        "",
                                                                        "MAPEO_VELOCIDAD_TRAFFIC_TABLE_GPON",
                                                                        $arrayParametrosRdaMonitoreo['valor3'],
                                                                        "",
                                                                        "",
                                                                        "",
                                                                        "",
                                                                        $intIdEmpresa);
                if(!isset($arrayParametrosTraffic) || empty($arrayParametrosTraffic['valor2'])
                    || empty($arrayParametrosTraffic['valor3']))
                {
                    throw new \Exception("No se encontró el traffic-table del servicio con tipo de red GPON, ".
                                         "por favor notificar a Sistemas.");
                }
                //validar marca ZTE
                if($strMarcaElementoOlt === 'ZTE')
                {
                    $arrayParametrosDatos['traffic_table_monitoreo'] = $arrayParametrosTraffic['valor3'];
                    $arrayParametrosDatos['gemport_monitoreo']       = $arrayParametrosRdaMonitoreo['valor4'];
                }
                else
                {
                    $arrayParametrosDatos['traffic_table_monitoreo'] = $arrayParametrosRdaMonitoreo['valor3'];
                    $arrayParametrosDatos['gemport_monitoreo']       = $arrayParametrosRdaMonitoreo['valor2'];
                }
                $arrayParametrosDatos['t_cont_monitoreo']        = $arrayParametrosRdaMonitoreo['valor4'];
                $arrayParametrosDatos['id_mapping_monitoreo']    = $arrayParametrosRdaMonitoreo['valor5'];
                $arrayParametrosDatos['vlan_monitoreo']          = $arrayParametrosRdaMonitoreo['valor6'];
            }
            else
            {
                throw new \Exception("No se encontró los datos de configuración del RDA de Monitoreo con tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo gem-port
            $objCaractGemPort       = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'GEM-PORT',
                                                                                                $objProducto);
            if(!is_object($objCaractGemPort))
            {
                throw new \Exception("No se encontró la característica gem-port del servicio, por favor notificar a Sistemas.");
            }
            //obtengo t-cont
            $objCaractTCont         = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'T-CONT',
                                                                                                $objProducto);
            if(!is_object($objCaractTCont))
            {
                throw new \Exception("No se encontró la característica t-cont del servicio, por favor notificar a Sistemas.");
            }
            //obtengo traffic-table
            $objCaractTrafficTable  = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'TRAFFIC-TABLE',
                                                                                                $objProducto);
            if(!is_object($objCaractTrafficTable))
            {
                throw new \Exception("No se encontró la característica traffic-table del servicio, por favor notificar a Sistemas.");
            }
            //obtengo id-mapping
            $objCaractIdMapping     = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                'ID-MAPPING',
                                                                                                $objProducto);
            if(!is_object($objCaractIdMapping))
            {
                throw new \Exception("No se encontró la característica id-mapping del servicio, por favor notificar a Sistemas.");
            }
            //se configura datos activar
            $arrayDatosActivar['vlan_datos']          = $objDetalleVlan->getDetalleValor();
            $arrayDatosActivar['gemport_datos']       = $objCaractGemPort->getValor();
            $arrayDatosActivar['t_cont_datos']        = $objCaractTCont->getValor();
            $arrayDatosActivar['traffic_table_datos'] = $objCaractTrafficTable->getValor();
            $arrayDatosActivar['id_mapping_datos']    = $objCaractIdMapping->getValor();
            //parametro de datos networking
            $arrayParametrosRdaDatos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne("NUEVA_RED_GPON_TN",
                                                                "COMERCIAL",
                                                                "",
                                                                "PARAMETROS PARA WS de RDA - Activacion",
                                                                "ACTIVAR_DATOS",
                                                                "",
                                                                "",
                                                                "",
                                                                "",
                                                                $intIdEmpresa);
            if(isset($arrayParametrosRdaDatos['valor2']) && isset($arrayParametrosRdaDatos['valor3'])
               && isset($arrayParametrosRdaDatos['valor4']) && isset($arrayParametrosRdaDatos['valor5'])
               && isset($arrayParametrosRdaDatos['valor6']) && isset($arrayParametrosRdaDatos['valor7']))
            {
                $arrayDatosNetworking['opcion_NW']     = $arrayParametrosRdaDatos['valor3'];
                $arrayDatosNetworking['opcion']        = $arrayParametrosRdaDatos['valor4'];
                $arrayDatosNetworking['accion']        = $arrayParametrosRdaDatos['valor5'];
                $arrayDatosNetworking['modulo']        = $arrayParametrosRdaDatos['valor6'];
                $arrayDatosNetworking['esquema']       = $arrayParametrosRdaDatos['valor7'];
                //seteo datos admin networking
                $arrayDatosAdminNetworking['opcion_NW'] = $arrayParametrosRdaDatos['valor3'];
                $arrayDatosAdminNetworking['opcion']    = $arrayParametrosRdaDatos['valor4'];
                $arrayDatosAdminNetworking['accion']    = $arrayParametrosRdaDatos['valor5'];
                $arrayDatosAdminNetworking['modulo']    = $arrayParametrosRdaDatos['valor6'];
                $arrayDatosAdminNetworking['esquema']   = $arrayParametrosRdaDatos['valor7'];
            }
            else
            {
                throw new \Exception("No se encontró los datos de configuración del RDA para el servicio DATOS con tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo los datos de subred del servicio
            if($objProducto->getNombreTecnico() == "SAFECITYWIFI")
            {
                $strUsoSubredSsidServicio  = "";
                $strUsoSubredAdminServicio = "";
                $strMascaraSubred          = "";
                $strEstadoSubredServicio   = "Activo";
                $arrayParUsoSubredWifi     = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne("NUEVA_RED_GPON_TN",
                                                                    "COMERCIAL",
                                                                    "",
                                                                    "PARAMETRO USO SUBRED PARA SERVICIOS ADICIONALES SAFECITY",
                                                                    $objProducto->getId(),
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "");
                if(isset($arrayParUsoSubredWifi) && !empty($arrayParUsoSubredWifi)
                   && isset($arrayParUsoSubredWifi['valor2']) && !empty($arrayParUsoSubredWifi['valor2'])
                   && isset($arrayParUsoSubredWifi['valor3']) && !empty($arrayParUsoSubredWifi['valor3']))
                {
                    $strUsoSubredSsidServicio  = $arrayParUsoSubredWifi['valor2'];
                    $strUsoSubredAdminServicio = $arrayParUsoSubredWifi['valor3'];
                    $strMascaraSubred          = $arrayParUsoSubredWifi['valor4'];
                    $strEstadoSubredServicio   = $arrayParUsoSubredWifi['valor5'] ? $arrayParUsoSubredWifi['valor5'] : "Activo";
                }
                else
                {
                    throw new \Exception("No se ha podido obtener el uso de subred del producto ".$objProducto->getDescripcionProducto().
                                         ", por favor notificar a Sistemas.");
                }
                //obtengo la subred ssid
                $objSubredSer = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                        ->findOneBy(array("elementoId" => $objElementoOlt->getId(),
                                                                          "uso"        => $strUsoSubredSsidServicio,
                                                                          "mascara"    => $strMascaraSubred,
                                                                          "estado"     => $strEstadoSubredServicio));
                if(!is_object($objSubredSer))
                {
                    throw new \Exception("No se encontró la subred ssid del servicio, por favor notificar a Sistemas.");
                }
                //obtengo la subred admin
                $objSubredAdminSer = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                        ->findOneBy(array("elementoId" => $objElementoOlt->getId(),
                                                                          "uso"        => $strUsoSubredAdminServicio,
                                                                          "mascara"    => $strMascaraSubred,
                                                                          "estado"     => $strEstadoSubredServicio));
                if(!is_object($objSubredAdminSer))
                {
                    throw new \Exception("No se encontró la subred admin del servicio, por favor notificar a Sistemas.");
                }
            }
            else
            {
                $objIpServicio  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                        ->findOneBy(array("servicioId" => $objServicio->getId(),
                                                                          "estado"     => "Activo"));
                if(!is_object($objIpServicio))
                {
                    throw new \Exception("No se encontró la ip del servicio, por favor notificar a Sistemas.");
                }
                $objSubredSer   = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objIpServicio->getSubredId());
                if(!is_object($objSubredSer))
                {
                    throw new \Exception("No se encontró la subred del servicio, por favor notificar a Sistemas.");
                }
            }
            //obtener caracteristica vrf
            $strCaractVrf = "VRF";
            if($objProducto->getNombreTecnico() == "SAFECITYWIFI")
            {
                $strCaractVrf = "VRF SSID";
            }
            $objServProdCaractVrf   = $this->servicioGeneral
                                          ->getServicioProductoCaracteristica($objServicio,$strCaractVrf,$objProducto);
            if(!is_object($objServProdCaractVrf))
            {
                throw new \Exception("No se encontró la $strCaractVrf en la característica del servicio, por favor notificar a Sistemas.");
            }
            $objVrfServicio         = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                        ->find($objServProdCaractVrf->getValor());
            if(!is_object($objVrfServicio))
            {
                throw new \Exception("No se encontró la $strCaractVrf en la característica del cliente, por favor notificar a Sistemas.");
            }
            //obtener vpn
            $objVpn                 = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                ->find($objVrfServicio->getPersonaEmpresaRolCaracId());
            if(!is_object($objVpn))
            {
                throw new \Exception("No se encontró la VPN en la característica del cliente, por favor notificar a Sistemas.");
            }
            //obtner el rd-id
            $objCaractRdId        = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                        ->findOneBy(array("descripcionCaracteristica" => "RD_ID"));
            $objRdId              = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                        ->findOneBy(array("caracteristicaId"          => $objCaractRdId,
                                                          "estado"                    => "Activo",
                                                          "personaEmpresaRolCaracId"  => $objVpn->getId()));
            if(!is_object($objRdId))
            {
                throw new \Exception("No se encontró el RD-ID en la característica del cliente, por favor notificar a Sistemas.");
            }
            //se configura datos networking
            $arrayDatosNetworking['bandEjecuta'] = $this->rdaBandEjecuta;
            $arrayDatosNetworking['servicio']    = $objProducto->getNombreTecnico();
            $arrayDatosNetworking['vrf']         = $objVrfServicio->getValor();
            $arrayDatosNetworking['rd']          = $objRdId->getValor();
            $arrayDatosNetworking['vlan']        = $objDetalleVlan->getDetalleValor();
            $arrayDatosNetworking['subred']      = $objSubredSer->getSubred();
            $arrayDatosNetworking['gateway']     = $objSubredSer->getGateway();
            $arrayDatosNetworking['ambiente']    = $this->rdaTipoEjecucion;
            if($objProducto->getNombreTecnico() == "SAFECITYWIFI")
            {
                //se configura datos admin activar
                $objProCaractVlanAdmin   = $this->servicioGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                                     'VLAN ADMIN',
                                                                                                     $objProducto);
                if(!is_object($objProCaractVlanAdmin))
                {
                    throw new \Exception("No se encontró la característica de la VLAN ADMIN del servicio, por favor notificar a Sistemas.");
                }
                $objDetalleVlanAdmin     = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                                ->find($objProCaractVlanAdmin->getValor());
                if(!is_object($objDetalleVlanAdmin))
                {
                    throw new \Exception("No se encontró el detalle del elemento de la VLAN ADMIN del servicio, por favor notificar a Sistemas.");
                }
                $arrayDatosAdminActivar['vlan_datos']          = $objDetalleVlanAdmin->getDetalleValor();
                $arrayDatosAdminActivar['gemport_datos']       = $objCaractGemPort->getValor();
                $arrayDatosAdminActivar['t_cont_datos']        = $objCaractTCont->getValor();
                $arrayDatosAdminActivar['traffic_table_datos'] = $objCaractTrafficTable->getValor();
                $arrayDatosAdminActivar['id_mapping_datos']    = $objCaractIdMapping->getValor();
                //se configura datos admin networking
                $objServProdCaractVrf   = $this->servicioGeneral
                                              ->getServicioProductoCaracteristica($objServicio,"VRF ADMIN",$objProducto);
                if(!is_object($objServProdCaractVrf))
                {
                    throw new \Exception("No se encontró la VRF ADMIN en la característica del servicio, por favor notificar a Sistemas.");
                }
                $objVrfAdminServicio    = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                            ->find($objServProdCaractVrf->getValor());
                if(!is_object($objVrfAdminServicio))
                {
                    throw new \Exception("No se encontró la VRF ADMIN en la característica del cliente, por favor notificar a Sistemas.");
                }
                //obtener vpn
                $objVpn                 = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                    ->find($objVrfAdminServicio->getPersonaEmpresaRolCaracId());
                if(!is_object($objVpn))
                {
                    throw new \Exception("No se encontró la VPN en la característica del cliente, por favor notificar a Sistemas.");
                }
                //obtener el rd-id
                $objRdId              = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                            ->findOneBy(array("caracteristicaId"          => $objCaractRdId,
                                                              "estado"                    => "Activo",
                                                              "personaEmpresaRolCaracId"  => $objVpn->getId()));
                if(!is_object($objRdId))
                {
                    throw new \Exception("No se encontró el RD-ID en la característica del cliente, por favor notificar a Sistemas.");
                }
                $arrayDatosAdminNetworking['bandEjecuta'] = $this->rdaBandEjecuta;
                $arrayDatosAdminNetworking['servicio']    = $objProducto->getNombreTecnico();
                $arrayDatosAdminNetworking['vrf']         = $objVrfAdminServicio->getValor();
                $arrayDatosAdminNetworking['rd']          = $objRdId->getValor();
                $arrayDatosAdminNetworking['vlan']        = $objDetalleVlanAdmin->getDetalleValor();
                $arrayDatosAdminNetworking['subred']      = $objSubredAdminSer->getSubred();
                $arrayDatosAdminNetworking['gateway']     = $objSubredAdminSer->getGateway();
                $arrayDatosAdminNetworking['ambiente']    = $this->rdaTipoEjecucion;
            }
            //setear datos admin wifi
            if($objProducto->getNombreTecnico() === 'SAFECITYWIFI')
            {
                //se setea el datos admin activar
                $arrayParametrosDatos['datos_activar'][] = $arrayDatosAdminActivar;
                //se setea el datos admin networking
                $arrayParametrosDatos['datos_NW'][]      = $arrayDatosAdminNetworking;
            }
            //se setea el datos activar
            $arrayParametrosDatos['datos_activar'][] = $arrayDatosActivar;
            //se setea el datos networking
            $arrayParametrosDatos['datos_NW'][]      = $arrayDatosNetworking;
            //datos ws
            $arrayDatosMiddleware = array(
                'nombre_cliente'       => $strNombreCliente,
                'login'                => $objPunto->getLogin(),
                'identificacion'       => $strIdentificacion,
                'datos'                => $arrayParametrosDatos,
                'opcion'               => $strOpcionActivar,
                'ejecutaComando'       => $this->ejecutaComando,
                'usrCreacion'          => $strUsrCreacion,
                'ipCreacion'           => $strIpCreacion,
                'comandoConfiguracion' => $this->ejecutaComando,
                'empresa'              => $strPrefijoEmpresa,
            );
            //se ejecuta ws de RDA
            $arrayResultado = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
        }
        catch(\Exception $ex)
        {
            $arrayResultado = array(
                "status"  => "ERROR",
                "mensaje" => "<br>No se pudo asignar los recursos de los servicios adicionales."
            );
            $this->serviceUtil->insertError("Telcos+",
                                            "InfoActivarPuertoService->reactivarServiciosSafeCityTNGpon",
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        return $arrayResultado;
    }
}
