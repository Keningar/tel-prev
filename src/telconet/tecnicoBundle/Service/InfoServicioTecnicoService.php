<?php

namespace telconet\tecnicoBundle\Service;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMapping;
use telconet\schemaBundle\Entity\AdmiProductoCaracteristica;

use telconet\schemaBundle\Entity\InfoElemento;
use telconet\schemaBundle\Entity\InfoIpElemento;
use telconet\schemaBundle\Entity\InfoInterfaceElemento;
use telconet\schemaBundle\Entity\InfoServicioProdCaract;
use telconet\schemaBundle\Entity\InfoEnlace;
use telconet\schemaBundle\Entity\InfoEmpresaElemento;
use telconet\schemaBundle\Entity\InfoEmpresaElementoUbica;
use telconet\schemaBundle\Entity\InfoHistorialElemento;
use telconet\schemaBundle\Entity\InfoUbicacion;
use telconet\schemaBundle\Entity\InfoDetalleInterface;
use telconet\schemaBundle\Entity\InfoServicio;
use telconet\schemaBundle\Entity\InfoCriterioAfectado;
use telconet\schemaBundle\Entity\InfoParteAfectada;
use telconet\schemaBundle\Entity\InfoIp;
use telconet\schemaBundle\Entity\InfoServicioHistorial;
use telconet\schemaBundle\Entity\InfoPuntoDatoAdicional;
use telconet\schemaBundle\Entity\InfoDocumento;
use telconet\schemaBundle\Entity\InfoDocumentoComunicacion;
use telconet\schemaBundle\Entity\InfoComunicacion;
use telconet\schemaBundle\Entity\AdmiMotivo;
use telconet\schemaBundle\Entity\InfoDetalleSolicitud;
use Symfony\Component\HttpFoundation\JsonResponse;
use telconet\schemaBundle\Entity\InfoDetalleSolHist;
use telconet\schemaBundle\Entity\InfoDetalleSolCaract;
use telconet\schemaBundle\Entity\InfoPersonaEmpresaRolHisto;
use telconet\schemaBundle\Entity\InfoDetalle;
use telconet\schemaBundle\Entity\InfoDetalleAsignacion;
use \telconet\schemaBundle\Entity\InfoDetalleElemento;
use \telconet\schemaBundle\Entity\InfoServicioTecnico;
use \telconet\schemaBundle\Entity\InfoOrdenTrabajo;
use telconet\soporteBundle\Service\EnvioPlantillaService;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;
use Symfony\Component\HttpFoundation\Response;
use telconet\schemaBundle\Entity\InfoRelacionElemento;
use telconet\schemaBundle\Entity\InfoPersonaEmpresaRolCarac;

class InfoServicioTecnicoService
{

    private $emComercial;
    private $emInfraestructura;
    private $emSoporte;
    private $emComunicacion;
    private $emSeguridad;
    private $emNaf;
    private $emGeneral;
    private $container;
    private $templating;
    private $mailer;
    private $schemaMailer;
    private $host;
    private $pathTelcos;
    private $pathParameters;
    private $networkingScripts;
    private $soporte;
    private $mailerSend;
    private $utilService;
    private $ejecutaEnConcentrador;
    private $serviceInfoElemento;
    private $strLdapExecute;
    private $strTelcografExecute;
    private $serviceTelcoGraph;
    private $serviceSoporte;
    private $envioPlantilla;
    private $serviceLicenciasMcAfee;
    private $serviceComercial;
    private $serviceServicioHistorial;
    private $serviceLicenciasKaspersky;
    private $serviceInfoPago;
    private $serviceUtilidades;
    private $serviceCrypt;

    private $rutaWebServiceRDA;
    private $serviceRestClient;
    private $intWsPotenciaServicio;
    private $intWsTimeOutEnlaces;
    private $webServiceNetworkingRestURL;
    private $apiNetworkingUrl;
    private $apiNetworkingMode;
    private $apiNetworkingUser;
    private $apiNetworkingPass;
    
    private $strDatabaseDsn;
    private $strUsrComercial;
    private $strPassComercial;
    private $strUsrInfraestructura;
    private $strPassInfraestructura;

    private $intIdEmpresaMd;
    private $ejecutaComando;
    private $rdaMiddleware;
    private $urlResumenCompra;
    private $urlCambioPLan;
    private $urlAutDesc;

    private $strAnaliticaCamaras;
    private $strTokenAnaliticaCamaras;
    private $strUsernameAnalitica;
    private $strPasswordAnalitica;
    private $strModoAnaliticaWs;
    private $strNombreServAnaliticaWS;



    // Constantes
    const SOLICITUD_VISITA_TECNICA_POR_INSTALACION = 'SOLICITUD VISITA TECNICA POR INSTALACION';
    const CARACTERISTICA_SOLICITUD  = 'SOLICITUD_TAREA_CLIENTE';
    const ESTADO_PENDIENTE          = 'Pendiente';
    const ESTADO_ACTIVO             = 'Activo';
    const PARAMETRO_NODOS           = 'ELEMENTOS NODOS';

    /*
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0 - Se ingresa la dependencia para la obtención de la información del cliente para el proyecto
     *                Zabbix la cuales son $serviceServicioTecnico $serviceTelcoGraph $urlZabbix
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 23-09-2020 Se elimina el uso del construct y se lo deja todo dentro de las dependecias del service
     * 
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 1.2 28-04-2023 Se agregan url para regularizacion de cambio de plan y autorizacion de descuento.
     */
    public function setDependencies(Container $objContainer)
    {
        $this->container                = $objContainer;
        $this->emSoporte                = $objContainer->get('doctrine')->getManager('telconet_soporte');
        $this->emInfraestructura        = $objContainer->get('doctrine')->getManager('telconet_infraestructura');
        $this->emSeguridad              = $objContainer->get('doctrine')->getManager('telconet_seguridad');
        $this->emComercial              = $objContainer->get('doctrine')->getManager('telconet');
        $this->emComunicacion           = $objContainer->get('doctrine')->getManager('telconet_comunicacion');
        $this->emGeneral                = $objContainer->get('doctrine')->getManager('telconet_general');
        $this->emNaf                    = $objContainer->get('doctrine')->getManager('telconet_naf');
        $this->templating               = $objContainer->get('templating');
        $this->mailer                   = $objContainer->get('mailer');
        $this->schemaMailer             = $objContainer->get('schema.Mailer');
        $this->host                     = $objContainer->getParameter('host');
        $this->pathTelcos               = $objContainer->getParameter('path_telcos');
        $this->pathParameters           = $objContainer->getParameter('path_parameters');
        $this->mailerSend               = $objContainer->getParameter('mailer_send');
        $this->ejecutaEnConcentrador    = $objContainer->getParameter('ejecuta_script_en_concentrador');
        $this->apiNetworkingMode        = $objContainer->getParameter('api_networking_mode');
        $this->apiNetworkingUrl         = $objContainer->getParameter('api_networking_url')[$this->apiNetworkingMode];
        $this->apiNetworkingUser        = $objContainer->getParameter('api_networking_user');
        $this->apiNetworkingPass        = $objContainer->getParameter('api_networking_pass');
        $this->webServiceNetworkingRestURL = $objContainer->getParameter('ws_networking_scripts_url');
        $this->networkingScripts        = $objContainer->get('tecnico.NetworkingScripts');
        $this->soporte                  = $objContainer->get('soporte.EnvioPlantilla');
        $this->utilService              = $objContainer->get('schema.Util');
        $this->serviceInfoElemento      = $objContainer->get('tecnico.InfoElemento');
        $this->strLdapExecute           = $objContainer->getParameter('ldap_execute');
        $this->strTelcografExecute      = $objContainer->getParameter('telcograf_execute');
        $this->serviceTelcoGraph        = $objContainer->get('tecnico.TelcoGraph');
        $this->serviceSoporte           = $objContainer->get('soporte.SoporteService');
        $this->envioPlantilla           = $objContainer->get('soporte.EnvioPlantilla');
        $this->serviceLicenciasMcAfee   = $objContainer->get('tecnico.LicenciasMcAfee');
        $this->serviceComercial         = $objContainer->get('comercial.Comercial');
        $this->serviceServicioHistorial = $objContainer->get('comercial.InfoServicioHistorial');
        $this->serviceLicenciasKaspersky= $objContainer->get('tecnico.LicenciasKaspersky');
        $this->serviceInfoPago          = $objContainer->get('financiero.InfoPagoLinea');
        $this->serviceUtilidades        = $objContainer->get('administracion.Utilidades');
        $this->serviceRestClient        = $objContainer->get('schema.RestClient');
        $this->rutaWebServiceRDA        = $objContainer->getParameter('ws_rda_middleware_url');
        $this->intWsPotenciaServicio    = $objContainer->getParameter('ws_forti_timeout');
        $this->intWsTimeOutEnlaces      = $objContainer->getParameter('ws_forti_timeout_enlaces');
        $this->urlZabbix                = $objContainer->getParameter('ws_telcoZabbix_url');
        $this->strDatabaseDsn           = $objContainer->getParameter('database_dsn');
        $this->strUsrComercial          = $objContainer->getParameter('user_comercial');
        $this->strPassComercial         = $objContainer->getParameter('passwd_comercial');
        $this->strUsrInfraestructura    = $objContainer->getParameter('user_infraestructura');
        $this->strPassInfraestructura   = $objContainer->getParameter('passwd_infraestructura');
        $this->intIdEmpresaMd           = $objContainer->getParameter('idEmpresa_megadatos');
        $this->serviceCrypt             = $objContainer->get('seguridad.Crypt');
        $this->ejecutaComando           = $objContainer->getParameter('ws_rda_ejecuta_scripts');
        $this->rdaMiddleware            = $objContainer->get('tecnico.RedAccesoMiddleware');
        $this->ejecutaComando           = $objContainer->getParameter('ws_rda_ejecuta_scripts');
        $this->strAnaliticaCamaras      = $objContainer->getParameter('ws_analitica_camaras_url');
        $this->strTokenAnaliticaCamaras = $objContainer->getParameter('ws_analitica_camaras_token_url');
        $this->strPasswordAnalitica     = $objContainer->getParameter('ws_analitica_camaras_password_token');
        $this->strUsernameAnalitica     = $objContainer->getParameter('ws_analitica_camaras_user_token');
        $this->strModoAnaliticaWs       = $objContainer->getParameter('ws_analitica_camaras_modo');
        $this->strNombreServAnaliticaWS = $objContainer->getParameter('ws_analitica_camaras_servicio');
        $this->urlResumenCompra         = $objContainer->getParameter('ws_ms_resumenCompra_url');
        $this->urlCambioPLan            = $objContainer->getParameter('ws_ms_resumenCompra_url_cambio_plan');
        $this->urlAutDesc               = $objContainer->getParameter('ws_ms_resumenCompra_url_aut_desc');
    }

    /**
     * Funcion para enviar el correo de cambio de velocidad
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 1.0 28-04-2023
     */
    public function envioCorreoCambioVelocidad($arrayParametrosCorreo)
    {
        $objOptions         = array(CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_HTTPHEADER     => array('Content-Type: application/json',
                                        'tokencas: '.$arrayParametrosCorreo['token'])); 
        $strJsonData        = json_encode($arrayParametrosCorreo);
        $arrayResponseJson  = $this->serviceRestClient->postJSON($this->urlCambioPLan, $strJsonData , $objOptions);
        $strJsonResponse     = json_encode($arrayResponseJson);
        error_log($strJsonResponse);
        $this->utilService->insertError('Telcos+',
                                        'InfoServicioTecnicoService.envioCorreoCambioVelocidad',
                                        $strJsonResponse,
                                        'telcos',
                                        '127.0.0.1');
        return $arrayResponseJson;
    }

    /**
     * Funcion para enviar el correo de autorizacion de descuento
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 1.0 28-04-2023
     */
    public function envioCorreoAutDesc($arrayParametrosCorreo)
    {
        $objOptions         = array(CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_HTTPHEADER     => array('Content-Type: application/json',
                                        'tokencas: '.$arrayParametrosCorreo['token'])); 
        $strJsonData        = json_encode($arrayParametrosCorreo);
        $arrayResponseJson  = $this->serviceRestClient->postJSON($this->urlAutDesc, $strJsonData , $objOptions);
        $strJsonResponse     = json_encode($arrayResponseJson);
        error_log($strJsonResponse);
        $this->utilService->insertError('Telcos+',
                                        'InfoServicioTecnicoService.envioCorreoAutDesc',
                                        $strJsonResponse,
                                        'telcos',
                                        '127.0.0.1');
        return $arrayResponseJson;
    }
    
    /**
     * 
     * Función para eliminar un equipo conectado
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 23-09-2020 Se agrega validación para actualizar los precios de los servicios dual band
     * 
     * @param array $arrayParametros [
     *                                  "intIdServicio"             => id del servicio
     *                                  "strUsrCreacion"            => usuario de creación
     *                                  "strIpCreacion"             => ip de creación
     *                                  "strCodEmpresa"             => id de la empresa
     *                                  "intIdDepartamento"         => id del departamento del usuario en sesión
     *                                  "intIdPersonaEmpresaRol"    => id de la persona empresa rol del ususario en sesión
     *                                  "strDescripcionProducto"    => descripción del producto que ejecuta la eliminación del equipo conectado
     *                               ]
     * 
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     */
    public function eliminarEquipoConectado($arrayParametros)
    {
        $intIdServicioEquipo    = $arrayParametros["intIdServicio"];
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $strIpCreacion          = $arrayParametros["strIpCreacion"];
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"];
        $intIdDepartamento      = $arrayParametros["intIdDepartamento"];
        $intIdPersonaEmpresaRol = $arrayParametros["intIdPersonaEmpresaRol"];
        $strDescripcionProducto = $arrayParametros["strDescripcionProducto"];
        $intIdCriterioAfectado  = 1;
        $strMensaje             = "";
        try
        {
            if(!isset($intIdServicioEquipo) || empty($intIdServicioEquipo))
            {
                throw new \Exception("No se ha podido obtener el objeto del servicio asociada al equipo ".$strDescripcionProducto);
            }
            $objServicioEquipo = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioEquipo);
            if(!is_object($objServicioEquipo))
            {
                throw new \Exception("No se ha podido obtener el objeto del servicio asociada al ".$strDescripcionProducto);
            }
            $objPunto = $objServicioEquipo->getPuntoId();
            if (!is_object($objPunto))
            {
                throw new \Exception("No se encontró información acerca del punto del servicio");
            }
            $objServicioTecnicoEquipo   = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array( "servicioId" => $objServicioEquipo->getId()));
            if (!is_object($objServicioTecnicoEquipo))
            {
                throw new \Exception("No se encontró información técnica del servicio");
            }
            
            $strAfectadoNombre      = $objPunto->getNombrePunto();
            $intIdPunto             = $objPunto->getId();
            $strLoginPunto          = $objPunto->getLogin();
            $intIdElementoEquipo    = $objServicioTecnicoEquipo->getElementoClienteId();
            if(isset($intIdElementoEquipo) && !empty($intIdElementoEquipo))
            {
                $objElementoEquipo  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnicoEquipo->getElementoClienteId());
                if(!is_object($objElementoEquipo))
                {
                    throw new \Exception("No se encontró información del equipo Ap del servicio");
                }
                $intIdInterfaceElementoCliente = $objServicioTecnicoEquipo->getInterfaceElementoClienteId();
                if(isset($intIdInterfaceElementoCliente) && !empty($intIdInterfaceElementoCliente))
                {
                    $objEnlaceCliente   = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                  ->findOneBy(array("interfaceElementoFinId" => $intIdInterfaceElementoCliente,
                                                                                    "estado"                 => "Activo"));
                    
                    //se valida que si exista un elemento relacionado al elemento actual registrado dentro de los recursos técnicos del servicio
                    if(is_object($objEnlaceCliente))
                    {
                        //elimino enlace
                        $objEnlaceCliente->setEstado("Eliminado");
                        $this->emInfraestructura->persist($objEnlaceCliente);
                        $this->emInfraestructura->flush(); 

                        $objEnlaceClienteSiguiente  = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                              ->findOneBy(array("interfaceElementoIniId" => 
                                                                                                $intIdInterfaceElementoCliente,
                                                                                                "estado"                 => "Activo"));
                        if(is_object($objEnlaceClienteSiguiente))
                        {
                            //elimino enlace
                            $objEnlaceClienteSiguiente->setEstado("Eliminado");
                            $this->emInfraestructura->persist($objEnlaceClienteSiguiente);
                            $this->emInfraestructura->flush(); 

                            $objEnlaceNuevo = new InfoEnlace();
                            $objEnlaceNuevo->setInterfaceElementoIniId($objEnlaceCliente->getInterfaceElementoIniId());
                            $objEnlaceNuevo->setInterfaceElementoFinId($objEnlaceClienteSiguiente->getInterfaceElementoFinId());
                            $objEnlaceNuevo->setTipoMedioId($objEnlaceClienteSiguiente->getTipoMedioId());
                            $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                            $objEnlaceNuevo->setEstado("Activo");
                            $objEnlaceNuevo->setUsrCreacion();
                            $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                            $objEnlaceNuevo->setIpCreacion($strIpCreacion);
                            $this->emInfraestructura->persist($objEnlaceNuevo);
                            $this->emInfraestructura->flush(); 
                        }
                    }
                }
                
                if($objElementoEquipo->getEstado() !== "Eliminado")
                {
                    //se elimina el equipo
                    $objElementoEquipo->setEstado("Eliminado");
                    $this->emInfraestructura->persist($objElementoEquipo);
                    $this->emInfraestructura->flush();
                    
                    //SE REGISTRA EL TRACKING DEL ELEMENTO
                    $this->serviceInfoElemento->ingresaAuditoriaElementos(array(
                                                                                "strNumeroSerie"    => $objElementoEquipo->getSerieFisica(),
                                                                                "strEstadoTelcos"   => 'Eliminado',
                                                                                "strEstadoNaf"      => 'Instalado',
                                                                                "strEstadoActivo"   => 'Cancelado',
                                                                                "strUbicacion"      => 'Cliente',
                                                                                "strCodEmpresa"     => $strCodEmpresa,
                                                                                "strTransaccion"    => 'Cancelacion Servicio',
                                                                                "intOficinaId"      => 0,
                                                                                "strLogin"          => $strLoginPunto,
                                                                                "strUsrCreacion"    => $strUsrCreacion));
                    //historial del elemento
                    $objHistorialElemento = new InfoHistorialElemento();
                    $objHistorialElemento->setElementoId($objElementoEquipo);
                    $objHistorialElemento->setObservacion("Se elimino el elemento por cancelación de Servicio");
                    $objHistorialElemento->setEstadoElemento("Eliminado");
                    $objHistorialElemento->setUsrCreacion($strUsrCreacion);
                    $objHistorialElemento->setFeCreacion(new \DateTime('now'));
                    $objHistorialElemento->setIpCreacion($strIpCreacion);
                    $this->emInfraestructura->persist($objHistorialElemento);
                    $this->emInfraestructura->flush();

                    //eliminar puertos elemento
                    $arrayInterfacesElemento    = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                          ->findBy(array("elementoId" => $objElementoEquipo->getId()));

                    foreach($arrayInterfacesElemento as $objInterfaceElemento)
                    {
                        $objInterfaceElemento->setEstado("Eliminado");
                        $this->emInfraestructura->persist($objInterfaceElemento);
                        $this->emInfraestructura->flush();
                    }
                    //crear solicitud para retiro de equipo Ap
                    $objTipoSolicitud   = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                            ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO", 
                                                                              "estado"               => "Activo"));
                    $objDetalleSolicitud = new InfoDetalleSolicitud();
                    $objDetalleSolicitud->setServicioId($objServicioEquipo);
                    $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                    $objDetalleSolicitud->setEstado("AsignadoTarea");
                    $objDetalleSolicitud->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                    $objDetalleSolicitud->setObservacion("SOLICITA RETIRO DE EQUIPO POR CANCELACION DEL SERVICIO");
                    $this->emComercial->persist($objDetalleSolicitud);
                    $this->emComercial->flush();
                    $objAdmiCaracteristica  = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                                ->findOneBy(array('descripcionCaracteristica' => 'ELEMENTO CLIENTE',
                                                                                  'estado'                    => 'Activo'));
                    if (!is_object($objAdmiCaracteristica))
                    {
                        throw new \Exception("No se encontró información acerca de caracteristica ELEMENTO CLIENTE");
                    }

                    //valor del ont
                    $objDetalleSolCaract= new InfoDetalleSolCaract();
                    $objDetalleSolCaract->setCaracteristicaId($objAdmiCaracteristica);
                    $objDetalleSolCaract->setDetalleSolicitudId($objDetalleSolicitud);
                    $objDetalleSolCaract->setValor($objElementoEquipo->getId());
                    $objDetalleSolCaract->setEstado("AsignadoTarea");
                    $objDetalleSolCaract->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                    $this->emComercial->persist($objDetalleSolCaract);
                    $this->emComercial->flush();

                    //obtener tarea
                    $objProceso     = $this->emSoporte->getRepository('schemaBundle:AdmiProceso')
                                                      ->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");
                    if (!is_object($objProceso))
                    {
                        throw new \Exception("No se encontró información acerca del proceso SOLICITAR RETIRO EQUIPO");
                    }
                    $arrayTareas  = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                    ->findTareasActivasByProceso($objProceso->getId());
                    $objTarea     = $arrayTareas[0];

                    //grabar nuevo info_detalle para la solicitud de retiro de equipo
                    $objDetalle = new InfoDetalle();
                    $objDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
                    $objDetalle->setTareaId($objTarea);
                    $objDetalle->setLongitud($objPunto->getLongitud());
                    $objDetalle->setLatitud($objPunto->getLatitud());
                    $objDetalle->setPesoPresupuestado(0);
                    $objDetalle->setValorPresupuestado(0);
                    $objDetalle->setIpCreacion($strIpCreacion);
                    $objDetalle->setFeCreacion(new \DateTime('now'));
                    $objDetalle->setUsrCreacion($strUsrCreacion);
                    $objDetalle->setFeSolicitada(new \DateTime('now'));
                    $this->emSoporte->persist($objDetalle);
                    $this->emSoporte->flush();                              

                    //obtenemos el persona empresa rol del usuario
                    $objPersonaEmpresaRolUsr    = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                    ->find($intIdPersonaEmpresaRol);
                    if (!is_object($objPersonaEmpresaRolUsr))
                    {
                        throw new \Exception("No se encontró información acerca del rol del cliente en sesion");
                    }

                    //buscamos datos del dept, persona
                    $objDepartamento    = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                                          ->find($objPersonaEmpresaRolUsr->getDepartamentoId());

                    if (!is_object($objDepartamento))
                    {
                        throw new \Exception("No se encontró información acerca del departamento del usuario en sesión");
                    }

                    $objPersona = $objPersonaEmpresaRolUsr->getPersonaId();

                    if (!is_object($objPersona))
                    {
                        throw new \Exception("No se encontró información acerca de la persona en sesión");
                    }

                    //grabamos soporte.info_detalle_asignacion
                    $objDetalleAsignacion = new InfoDetalleAsignacion();
                    $objDetalleAsignacion->setDetalleId($objDetalle);
                    $objDetalleAsignacion->setAsignadoId($objDepartamento->getId());
                    $objDetalleAsignacion->setAsignadoNombre($objDepartamento->getNombreDepartamento());
                    $objDetalleAsignacion->setRefAsignadoId($objPersona->getId());

                    if($objPersona->getRazonSocial()=="")
                    {
                        $strNombreAsignado = $objPersona->getNombres()." ".$objPersona->getApellidos();
                    }
                    else
                    {
                        $strNombreAsignado = $objPersona->getRazonSocial();
                    }
                    $objDetalleAsignacion->setRefAsignadoNombre($strNombreAsignado);
                    $objDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRolUsr->getId());
                    $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
                    $objDetalleAsignacion->setUsrCreacion($strUsrCreacion);
                    $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                    $objDetalleAsignacion->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objDetalleAsignacion);
                    $this->emSoporte->flush();
                    
                    $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea(array(  "strCodEmpresa"             => $strCodEmpresa,
                                                                                        "strUsrCreacion"            => $strUsrCreacion,
                                                                                        "strOpcion"                 => "Historial",
                                                                                        "strIpCreacion"             => $strIpCreacion,
                                                                                        "intIdDepartamentoOrigen"   => $intIdDepartamento,
                                                                                        "intDetalleId"              => $objDetalle->getId(),
                                                                                        "strObservacion"            => "Tarea Asignada",
                                                                                        "strEstadoActual"           => "Asignada",
                                                                                        "strAccion"                 => "Asignada"));                  

                    // se graba en la DB_SOPORTE.INFO_CRITERIO_AFECTADO
                    $objCriterio = new InfoCriterioAfectado();
                    $objCriterio->setId($intIdCriterioAfectado);
                    $objCriterio->setDetalleId($objDetalle);
                    $objCriterio->setCriterio("Clientes");
                    $objCriterio->setOpcion("Cliente: " . $strAfectadoNombre . " | OPCION: Punto Cliente");
                    $objCriterio->setFeCreacion(new \DateTime('now'));
                    $objCriterio->setUsrCreacion($strUsrCreacion);
                    $objCriterio->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objCriterio);
                    $this->emSoporte->flush();

                    // se graba en la DB_SOPORTE.INFO_PARTE_AFECTADA
                    $objAfectado = new InfoParteAfectada();
                    $objAfectado->setTipoAfectado("Cliente");
                    $objAfectado->setDetalleId($objDetalle->getId());
                    $objAfectado->setCriterioAfectadoId($objCriterio->getId());
                    $objAfectado->setAfectadoId($intIdPunto);
                    $objAfectado->setFeIniIncidencia(new \DateTime('now'));
                    $objAfectado->setAfectadoNombre($strLoginPunto);
                    $objAfectado->setAfectadoDescripcion($strAfectadoNombre);
                    $objAfectado->setFeCreacion(new \DateTime('now'));
                    $objAfectado->setUsrCreacion($strUsrCreacion);
                    $objAfectado->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objAfectado);
                    $this->emSoporte->flush();

                    //crear historial para la solicitud
                    $objHistorialSolicitud = new InfoDetalleSolHist();
                    $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
                    $objHistorialSolicitud->setEstado("AsignadoTarea");
                    $objHistorialSolicitud->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE EQUIPO POR CANCELACION DEL SERIVICIO");
                    $objHistorialSolicitud->setUsrCreacion($strUsrCreacion);
                    $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
                    $objHistorialSolicitud->setIpCreacion($strIpCreacion);
                    $this->emComercial->persist($objHistorialSolicitud);
                    $this->emComercial->flush();
                    
                    //Proceso que graba tarea en INFO_TAREA
                    $this->serviceSoporte->crearInfoTarea(array("intDetalleId"      => $objDetalle->getId(),
                                                                "strUsrCreacion"    => $strUsrCreacion));
                }
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "OK";
            $strMensaje = $e->getMessage();
        }
        
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }
    
        
    
    /**
     * Función que obtiene los Productos Adicionales para la Cancelación Voluntaria
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 - 28-08-2022
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function getProdAdicionalesCV($arrayParametros)
    {
        return $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->getProdAdicionalesCV($arrayParametros);
    }      
        
      
    /**
     * Función que obtiene los planes y productos asociados al cliente para la Cancelación Voluntaria
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 - 28-08-2022
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function getPlanProductosClienteCV($arrayParametros)
    {
 
        return $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->getPlanProductosClienteCV($arrayParametros);
    }   
    
    
    /**
     * Función que obtiene la fecha de activación de los productos del cliente.
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 - 28-08-2022
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function getFechaActivacionProdCV($arrayParametros)
    {
 
        return $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->getFechaActivacionProdCV($arrayParametros);
    }      
    
    
    /**
     * Función que obtiene los servicios de acuerdo a los parámetros del producto
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 17-09-2020
     * 
     * @param array $arrayParametros [
     *                                      "intIdPunto"                    => Id del punto,
     *                                      "arrayNombresTecnicoProducto"   => Arreglo con todos los nombres técnicos que se desea buscar,
     *                                      "strCodEmpresa"                 => Id de la empresa,
     *                                      "arrayEstadosServicioABuscar"   => Arreglo con todos estados específicos de los servicios a buscar
     *                                ]
     * 
     * @return array $arrayRespuesta [
     *                                  "status"                            => OK o ERROR
     *                                  "mensaje"                           => Mensaje de error
     *                                  "intContadorServiciosPorProducto"   => Número de servicios adicionales de un producto
     *                                  "arrayServiciosPorProducto"         => Arreglo de servicios adicionales de un producto
     *                               ]
     * 
     */
    public function obtenerServiciosPorProducto($arrayParametros)
    {
        $strMensaje                         = "";
        $intIdPunto                         = $arrayParametros["intIdPunto"];
        $arrayNombresTecnicoProducto        = $arrayParametros["arrayNombresTecnicoProducto"];
        $strCodEmpresa                      = $arrayParametros["strCodEmpresa"];
        $arrayEstadosServicioABuscar        = $arrayParametros["arrayEstadosServicioABuscar"];
        $strBuscarXEstadoServicio           = $arrayParametros["strBuscarXEstadoServicio"];
        $strEstadoServicio                  = $arrayParametros["strEstadoServicio"];
        $intContadorServiciosPorProducto    = 0;
        $arrayServiciosPorProducto          = array();
        $arrayEstadosServiciosProductoIn    = array();
        try
        {
            if(isset($intIdPunto) && !empty($intIdPunto) && isset($arrayNombresTecnicoProducto) && !empty($arrayNombresTecnicoProducto)
                && isset($strCodEmpresa) && !empty($strCodEmpresa))
            {
                $arrayProds = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                ->findBy(array( "nombreTecnico" => $arrayNombresTecnicoProducto,
                                                                "empresaCod"    => $strCodEmpresa));
                if(!empty($arrayProds))
                {
                    foreach($arrayProds as $objProd)
                    {
                        if(isset($strBuscarXEstadoServicio) && !empty($strBuscarXEstadoServicio) && $strBuscarXEstadoServicio === "SI"
                            && isset($strEstadoServicio) && !empty($strEstadoServicio))
                        {
                            $arrayEstadosServiciosProductoIn[]      = $strEstadoServicio;
                        }
                        else
                        {
                            $arrayRegsEstadosServiciosProductoIn    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                      ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            'ESTADOS_SERVICIOS_IN',
                                                                                            $objProd->getNombreTecnico(),
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            $strCodEmpresa);
                            if(!empty($arrayRegsEstadosServiciosProductoIn))
                            {
                                foreach($arrayRegsEstadosServiciosProductoIn as $arrayRegEstadoServicioProductoIn)
                                {
                                    if(isset($arrayEstadosServicioABuscar) && !empty($arrayEstadosServicioABuscar))
                                    {
                                        if(in_array($arrayRegEstadoServicioProductoIn['valor3'], $arrayEstadosServicioABuscar))
                                        {
                                            $arrayEstadosServiciosProductoIn[] = $arrayRegEstadoServicioProductoIn['valor3'];
                                        }
                                    }
                                    else
                                    {
                                        $arrayEstadosServiciosProductoIn[] = $arrayRegEstadoServicioProductoIn['valor3'];
                                    }
                                }
                            }
                        }
                        if(!empty($arrayEstadosServiciosProductoIn))
                        {
                            $arrayServicios = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->findBy(array(   "puntoId"       => $intIdPunto,
                                                                                  "productoId"    => $objProd,
                                                                                  "estado"        => $arrayEstadosServiciosProductoIn),
                                                                         array("id" => "DESC"));
                            foreach($arrayServicios as $objServicio)
                            {
                                $intContadorServiciosPorProducto    = $intContadorServiciosPorProducto +1;
                                $arrayServiciosPorProducto[]        = $objServicio;
                            }
                        }
                    }
                }
            }
            else
            {
                throw new \Exception('No se enviaron todos los parámetros necesarios para obtener los servicios de un producto');
            }
            $strStatus = "OK";
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            error_log("No se han podido obtener los servicios asociados a un producto: ".$e->getMessage());
        }
        $arrayRespuesta = array("status"                            => $strStatus,
                                "mensaje"                           => $strMensaje,
                                "intContadorServiciosPorProducto"   => $intContadorServiciosPorProducto,
                                "arrayServiciosPorProducto"         => $arrayServiciosPorProducto);
        return $arrayRespuesta;
    }
    
    /**
     * Función que obtiene un producto dentro de un plan
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 17-09-2020
     * 
     * @param array $arrayParametros [
     *                                      "intIdPlan"                 => Id del plan,
     *                                      "strDescripcionProducto"    => Descripción del producto,
     *                                      "strNombreTecnicoProducto"  => Nombre técnico del producto
     *                                ]
     * 
     * @return array $arrayRespuesta [
     *                                  "strProductoEnPlan"         => "SI" o "NO" el plan incluye el producto,
     *                                  "objProductoEnPlan"         => objeto del producto buscado,
     *                                  "objDetallePlanProducto"    => objeto del detalle del plan asociado al producto buscado
     *                                ]
     * 
     */
    public function obtieneProductoEnPlan($arrayParametros)
    {
        $intIdPlan                  = $arrayParametros["intIdPlan"];
        $strDescripcionProducto     = $arrayParametros["strDescripcionProducto"];
        $strNombreTecnicoProducto   = $arrayParametros["strNombreTecnicoProducto"];
        $boolFalse                  = false;
        $strProductoEnPlan          = "NO";
        $objProductoEnPlan          = null;
        $objDetallePlanProducto     = null;
        try
        {
            $arrayDetallesPlan  = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->findBy(array("planId" => $intIdPlan));
            foreach($arrayDetallesPlan as $objDetallePlan)
            {
                if($objDetallePlan->getEstado() !== "Eliminado")
                {
                    $objProductoDetallePlan = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->find($objDetallePlan->getProductoId());
                    if(is_object($objProductoDetallePlan)
                        && ((isset($strDescripcionProducto) && !empty($strDescripcionProducto) 
                            && strpos($objProductoDetallePlan->getDescripcionProducto(), $strDescripcionProducto) !== $boolFalse)
                            || (isset($strNombreTecnicoProducto) && !empty($strNombreTecnicoProducto)
                                && $strNombreTecnicoProducto === $objProductoDetallePlan->getNombreTecnico()))
                        )
                    {
                        $objProductoEnPlan      = $objProductoDetallePlan;
                        $objDetallePlanProducto = $objDetallePlan;
                        $strProductoEnPlan      = "SI";
                    }
                }
            }
        }
        catch(\Exception $e)
        {
            error_log("No se ha podido verificar si el producto se encuentra dentro del plan ".$e->getMessage());
        }
        $arrayRespuesta = array("strProductoEnPlan"         => $strProductoEnPlan,
                                "objProductoEnPlan"         => $objProductoEnPlan,
                                "objDetallePlanProducto"    => $objDetallePlanProducto);
        return $arrayRespuesta;
    }
    
    /**
     * Función que obtiene el servicio de Internet válido
     *
     * @param $arrayParametros [
     *                              "intIdPunto"    => Id del servicio de Internet
     *                              "strCodEmpresa" => Código de la empresa
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => 'OK' o 'ERROR'
     *                                  "mensaje"               => Mensaje de error
     *                                  "objServicioInternet"   => objeto del servicio de Internet
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 14-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 11-11-2020 Se agrega la obtención del parámetro omiteEstadoPunto que será considerado en la función getServiciosByCriterios
     *                         para omitir que se compare el estado del punto en Activo para cuando se realice el traslado W+AP. Además se agrega
     *                         parámetro arrayEstadosInternetIn para realizar la búsqueda del servicio de Internet por estados específicos
     *
     */
    public function obtieneServicioInternetValido($arrayParametros)
    {
        $intIdPunto             = $arrayParametros["intIdPunto"];
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"];
        $strOmiteEstadoPunto    = $arrayParametros["omiteEstadoPunto"];
        $arrayEstadosInternetIn = $arrayParametros["arrayEstadosInternetIn"];
        $objServicioInternet    = null;
        $strMostrarMsjUsuario   = "NO";
        $strMensaje             = "";
        try
        {
            if(isset($intIdPunto) && ! empty($intIdPunto) && isset($strCodEmpresa) && !empty($strCodEmpresa))
            {
                $arrayEstadosInternetNotIn          = array();
                $arrayParamsDetEstadosInternetNotIn = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                      ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            'ESTADOS_SERVICIOS_NOT_IN',
                                                                            'INTERNET',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $strCodEmpresa);
                if(!empty($arrayParamsDetEstadosInternetNotIn) )
                {
                    foreach( $arrayParamsDetEstadosInternetNotIn as $arrayParamDetInternetNotIn )
                    {
                        $arrayEstadosInternetNotIn[] = ( isset($arrayParamDetInternetNotIn['valor3'])
                                                        && !empty($arrayParamDetInternetNotIn['valor3']))
                                                        ? trim($arrayParamDetInternetNotIn['valor3']) : '';
                    }
                }
                if(!empty($arrayEstadosInternetNotIn))
                {
                    $arrayParamsServicioInternet    = array('estadosServiciosNotIn'     => $arrayEstadosInternetNotIn,
                                                            'estadosServicios'          => $arrayEstadosInternetIn,
                                                            'productoInternetPorLogin'  => 'S',
                                                            'estadoActivo'              => 'Activo',
                                                            'empresaCod'                => $strCodEmpresa,
                                                            'intIdPuntoCliente'         => $intIdPunto,
                                                            'nombreTecnicoProducto'     => 'INTERNET',
                                                            'omiteEstadoPunto'          => $strOmiteEstadoPunto);
                    $arrayConsultaServiciosInternet = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->getServiciosByCriterios($arrayParamsServicioInternet);
                    //Se verifica que exista un servicio de Internet en un estado permitido
                    if(isset($arrayConsultaServiciosInternet['total']) && !empty($arrayConsultaServiciosInternet['total'])
                        && $arrayConsultaServiciosInternet['total'] > 0 )
                    {
                        $objServicioInternet = $arrayConsultaServiciosInternet['registros'][0];
                    }
                }
                else
                {
                    $strMostrarMsjUsuario = "SI";
                    throw new \Exception('No se encontraron los estados parametrizados para verificar el servicio de Internet');
                }
            }
            else
            {
                $strMostrarMsjUsuario = "SI";
                throw new \Exception('No se han enviado los parámetros para realizar la búsqueda del servicio de Internet válido');
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus = "ERROR";
            if($strMostrarMsjUsuario === "SI")
            {
                $strMensaje = $e->getMessage();
            }
            else
            {
                $strMensaje = "Ha ocurrido un error inesperado al obtener el servicio de Internet contratado para el punto";
            }
        }
        $arrayRespuesta = array("status"                => $strStatus,
                                "mensaje"               => $strMensaje,
                                "objServicioInternet"   => $objServicioInternet);
        return $arrayRespuesta;
    }
    
    /**
     * Función que verifica la tecnología Dual Band a partir del servicio de Internet
     *
     * @param $arrayParametros [
     *                              "intIdServicioInternet"     => Id del servicio de Internet,
     *                              "strMarcaOlt"               => Marca del Olt
     *                              "strModeloOlt"              => Modelo del Olt
     *                              "strTipoOnt"                => Tipo de ont
     *                              "strProcesoEjecutante"      => Proceso que realiza la verificación de tecnología dual band
     *                          ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => 'OK' o 'ERROR'
     *                                  "mensaje"               => Mensaje de error
     *                                  "modelosEquiposOnt"     => Cadena de los modelos V5 concatenados y separados por una ,
     *                                  "modelosEquiposEdbXOnt" => Cadena con los modelos de Extender Dual Band PARA V5 concatenados 
     *                                                             y separados por una ,
     *                                  "modelosEquiposWdb"     => Cadena con los modelos de Wifi Dual Band concatenados y separados por una ,
     *                                  "modelosEquiposEdb"     => Cadena con los modelos de Extender Dual Band concatenados y separados por una ,
     *                               ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 14-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 08-04-2021 Se modifica función para permitir buscar los modelos por tipo de ont y no sólo los modelos Wifi Dual Band,
     *                         así como los modelos de extenders permitidos para cada uno.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 07-02-2022 Se agrega parámetro en oci_connect para visualización correcta de historiales con tildes
     *
     */
    public function verificaTecnologiaDualBand($arrayParametros)
    {
        $strMarcaOlt                    = $arrayParametros["strMarcaOlt"];
        $strModeloOlt                   = $arrayParametros["strModeloOlt"];
        $strTipoOnt                     = $arrayParametros["strTipoOnt"];
        $intIdServicioInternet          = $arrayParametros["intIdServicioInternet"];
        $strStatus                      = "";
        $strMsjError                    = "";
        $strModelosEquiposOntXTipoOnt   = "";
        $strModelosEquiposEdbXTipoOnt   = "";
        $strModelosEquiposWdb           = "";
        $strModelosEquiposEdb           = "";
        try
        {
            $objOciConexion             = oci_connect($this->strUsrComercial, $this->strPassComercial, $this->strDatabaseDsn, 'AL32UTF8');
            $strSql                     = "BEGIN
                                            DB_COMERCIAL.TECNK_SERVICIOS.P_VERIFICA_TECNOLOGIA_DB
                                            (
                                                :strMarcaOlt,
                                                :strModeloOlt,
                                                :strTipoOnt,
                                                :intIdServicioInternet,
                                                :strStatus,
                                                :strMsjError,
                                                :strModelosEquiposOntXTipoOnt,
                                                :strModelosEquiposEdbXTipoOnt,
                                                :strModelosEquiposWdb,
                                                :strModelosEquiposEdb
                                            );
                                           END;";
            $objStmt                    = oci_parse($objOciConexion,$strSql);
            oci_bind_by_name($objStmt, ":strMarcaOlt",                  $strMarcaOlt);
            oci_bind_by_name($objStmt, ":strModeloOlt",                 $strModeloOlt);
            oci_bind_by_name($objStmt, ":strTipoOnt",                   $strTipoOnt);
            oci_bind_by_name($objStmt, ":intIdServicioInternet",        $intIdServicioInternet);
            oci_bind_by_name($objStmt, ":strStatus",                    $strStatus, 5);
            oci_bind_by_name($objStmt, ":strMsjError",                  $strMsjError, 4000);
            oci_bind_by_name($objStmt, ":strModelosEquiposOntXTipoOnt", $strModelosEquiposOntXTipoOnt, 4000);
            oci_bind_by_name($objStmt, ":strModelosEquiposEdbXTipoOnt", $strModelosEquiposEdbXTipoOnt, 4000);
            oci_bind_by_name($objStmt, ":strModelosEquiposWdb",         $strModelosEquiposWdb, 4000);
            oci_bind_by_name($objStmt, ":strModelosEquiposEdb",         $strModelosEquiposEdb, 4000);
            oci_execute($objStmt);
        }
        catch (\Exception $e)
        {
            $strStatus      = "ERROR";
            $strMsjError    = "Ha ocurrido una excepción al intentar realizar la consulta ";
            error_log("Error en getPuntosCorteMasivo ".$e->getMessage());
        }
        $arrayRespuesta = array("status"                    => $strStatus,
                                "mensaje"                   => $strMsjError,
                                "modelosEquiposOntXTipoOnt" => $strModelosEquiposOntXTipoOnt,
                                "modelosEquiposEdbXTipoOnt" => $strModelosEquiposEdbXTipoOnt,
                                "modelosEquiposWdb"         => $strModelosEquiposWdb,
                                "modelosEquiposEdb"         => $strModelosEquiposEdb);
        return $arrayRespuesta;
    }
    
    /**
     * Función que obtiene las solicitudes con sus respectivos servicios que pueden ser gestionados de manera simultánea
     *
     * @param $arrayParametros [
     *                              "intIdSolicitud"                => Id de la solicitud gestionada
     *                              "strParamProdGestionSimultanea" => campo de comparación de los productos
     *                              "strOpcionGestionSimultanea"    => Opción desde donde se invoca a la función
     *                          ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => 'OK' o 'ERROR'
     *                                  "mensaje"               => Mensaje de error
     *                                  "modelosEquiposOnt"     => Cadena de los modelos V5 concatenados y separados por una ,
     *                                  "modelosEquiposEdbXOnt" => Cadena con los modelos de Extender Dual Band PARA V5 concatenados 
     *                                                             y separados por una ,
     *                                  "modelosEquiposWdb"     => Cadena con los modelos de Wifi Dual Band concatenados y separados por una ,
     *                                  "modelosEquiposEdb"     => Cadena con los modelos de Extender Dual Band concatenados y separados por una ,
     *                               ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 08-04-2021
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 07-02-2022 Se agrega parámetro en oci_connect para visualización correcta de historiales con tildes
     *
     */
    public function getInfoGestionSimultanea($arrayParametros)
    {
        $intIdSolicitud                         = $arrayParametros['intIdSolicitud'];
        $strParamProdGestionSimultanea          = $arrayParametros['strParamProdGestionSimultanea'];
        $strOpcionGestionSimultanea             = $arrayParametros['strOpcionGestionSimultanea'];
        $strTipoOpcionGestionSimultanea         = $arrayParametros['strTipoOpcionGestionSimultanea'];
        $strCodEmpresa                          = $arrayParametros['strCodEmpresa'] ? $arrayParametros['strCodEmpresa'] : "18"; 
        $strStatus                              = "";
        $strMsjError                            = "";
        $arrayTmpRegistrosInfoGestionSimultanea = array();
        $arrayRegistrosInfoGestionSimultanea    = array();
        try
        {
            $objSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')->find($intIdSolicitud);    
            if(!is_object($objSolicitud))
            {
                throw new \Exception("No se ha enviado correctamente la solicitud que se desea gestionar");
            }
            
            $intIdPunto = $objSolicitud->getServicioId()->getPuntoId()->getId();
            $arrayRespuestaServInternetValido   = $this->obtieneServicioInternetValido(array(   "intIdPunto"        => $intIdPunto,
                                                                                                "strCodEmpresa"     => $strCodEmpresa,
                                                                                                "omiteEstadoPunto"  => "SI"));
            $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];
            
            $objOciConexion                     = oci_connect($this->strUsrComercial, $this->strPassComercial, $this->strDatabaseDsn, 'AL32UTF8');
            $arrayCursorInfoGestionSimultanea   = oci_new_cursor($objOciConexion);
            $strSQL                             = "BEGIN 
                                                    DB_COMERCIAL.TECNK_SERVICIOS.P_GET_INFO_GESTION_SIMULTANEA(
                                                                                                                :intIdSolicitud,
                                                                                                                :strParamProdGestionSimultanea,
                                                                                                                :strOpcionGestionSimultanea,
                                                                                                                :strStatus,
                                                                                                                :strMsjError,
                                                                                                                :arrayCursorInfoGestionSimultanea);
                                                   END;";
            $objStmt    = oci_parse($objOciConexion, $strSQL);
            oci_bind_by_name($objStmt, ":intIdSolicitud",                   $intIdSolicitud);
            oci_bind_by_name($objStmt, ":strParamProdGestionSimultanea",    $strParamProdGestionSimultanea);
            oci_bind_by_name($objStmt, ":strOpcionGestionSimultanea",       $strOpcionGestionSimultanea);
            oci_bind_by_name($objStmt, ":strStatus",                        $strStatus, 5);
            oci_bind_by_name($objStmt, ":strMsjError",                      $strMsjError, 4000);
            oci_bind_by_name($objStmt, ":arrayCursorInfoGestionSimultanea", $arrayCursorInfoGestionSimultanea, -1, OCI_B_CURSOR);
            oci_execute($objStmt);
            oci_execute($arrayCursorInfoGestionSimultanea);

            if(!empty($arrayCursorInfoGestionSimultanea))
            {
                while(($arrayResultadoCursor = oci_fetch_array($arrayCursorInfoGestionSimultanea, OCI_ASSOC + OCI_RETURN_NULLS)))
                {
                    $arrayTmpRegistrosInfoGestionSimultanea[]  = $arrayResultadoCursor;
                }
            }
            oci_free_statement($objStmt);
            oci_free_statement($arrayCursorInfoGestionSimultanea);
            oci_close($objOciConexion);
            
            
            if($strOpcionGestionSimultanea === "PLANIFICAR" || $strOpcionGestionSimultanea === "REPLANIFICAR" 
                || $strOpcionGestionSimultanea === "DETENER" )
            {
                if(isset($arrayTmpRegistrosInfoGestionSimultanea) && !empty($arrayTmpRegistrosInfoGestionSimultanea))
                {
                    $arrayIdsServiciosPlanConSolPlanif = array();
                    foreach($arrayTmpRegistrosInfoGestionSimultanea as $arrayTmpRegistroInfoGestionSimultanea)
                    {
                        $intIdPlanServicioGestionado    = $arrayTmpRegistroInfoGestionSimultanea["ID_PLAN_SERVICIO_GESTIONADO,"];
                        $strDescripTipoSolGestionada    = $arrayTmpRegistroInfoGestionSimultanea["DESCRIP_TIPO_SOL_GESTIONADA"];
                        $intIdPlanServicioSimultaneo    = $arrayTmpRegistroInfoGestionSimultanea["ID_PLAN_SERVICIO_SIMULTANEO"];
                        $intIdServicioSimultaneo        = $arrayTmpRegistroInfoGestionSimultanea["ID_SERVICIO_SIMULTANEO"];
                        $strDescripTipoSolSimultanea    = $arrayTmpRegistroInfoGestionSimultanea["DESCRIP_TIPO_SOL_SIMULTANEA"];
                        
                        /*
                         * Si la solicitud gestionada es una de planificación, no se debe mostrar otra solicitud de planificación
                         * asociada al plan de Internet
                         */
                        if(isset($intIdPlanServicioGestionado) && !empty($intIdPlanServicioGestionado)
                            && isset($strDescripTipoSolGestionada) && !empty($strDescripTipoSolGestionada)
                            && $strDescripTipoSolGestionada === "SOLICITUD PLANIFICACION"
                            && isset($intIdPlanServicioSimultaneo) && !empty($intIdPlanServicioSimultaneo)
                            && isset($strDescripTipoSolSimultanea) && !empty($strDescripTipoSolSimultanea)
                            && $strDescripTipoSolSimultanea === "SOLICITUD PLANIFICACION")
                        {
                            $strMuestraSolicitud = "NO";
                        }
                        /*
                         * Si el servicio de Internet se encuentra en estado Activo(cliente existente) no se 
                         * debe mostrar otra solicitud de planificación asociada al plan de Internet
                         */
                        else if(is_object($objServicioInternet) && $objServicioInternet->getEstado() === "Activo"
                            && isset($intIdPlanServicioSimultaneo) && !empty($intIdPlanServicioSimultaneo)
                            && isset($strDescripTipoSolSimultanea) && !empty($strDescripTipoSolSimultanea)
                            && $strDescripTipoSolSimultanea === "SOLICITUD PLANIFICACION")
                        {
                            $strMuestraSolicitud = "NO";
                        }
                        /*
                         * Si ya existe una solicitud de planificación asociada al plan de Internet, no se debe
                         * considerar otra solciitud de planificación
                         */
                        else if(isset($intIdPlanServicioSimultaneo) && !empty($intIdPlanServicioSimultaneo)
                            && isset($strDescripTipoSolSimultanea) && !empty($strDescripTipoSolSimultanea)
                            && $strDescripTipoSolSimultanea === "SOLICITUD PLANIFICACION"
                            && in_array($intIdServicioSimultaneo, $arrayIdsServiciosPlanConSolPlanif))
                        {
                            $strMuestraSolicitud = "NO";
                        }
                        else
                        {
                            $strMuestraSolicitud = "SI";
                        }
                        
                        if($strMuestraSolicitud === "SI")
                        {
                            $arrayRegistrosInfoGestionSimultanea[] = $arrayTmpRegistroInfoGestionSimultanea;
                        }
                        
                        if(isset($intIdPlanServicioSimultaneo) && !empty($intIdPlanServicioSimultaneo)
                            && isset($strDescripTipoSolSimultanea) && !empty($strDescripTipoSolSimultanea)
                            && $strDescripTipoSolSimultanea === "SOLICITUD PLANIFICACION"
                            && is_object($objServicioInternet) && $objServicioInternet->getEstado() !== "Activo"
                            && !in_array($intIdServicioSimultaneo, $arrayIdsServiciosPlanConSolPlanif))
                        {
                            $arrayIdsServiciosPlanConSolPlanif[] = $intIdServicioSimultaneo;
                        }
                    }
                }
            }
            else if($strOpcionGestionSimultanea === "ANULAR" || $strOpcionGestionSimultanea === "RECHAZAR")
            {
                if(isset($arrayTmpRegistrosInfoGestionSimultanea) && !empty($arrayTmpRegistrosInfoGestionSimultanea))
                {
                    foreach($arrayTmpRegistrosInfoGestionSimultanea as $arrayTmpRegistroInfoGestionSimultanea)
                    {
                        $strDescripTipoSolGestionada    = $arrayTmpRegistroInfoGestionSimultanea["DESCRIP_TIPO_SOL_GESTIONADA"];
                        $intIdDetSolCambioXExtender     = $arrayTmpRegistroInfoGestionSimultanea["ID_DET_SOL_CARACT_CAMBIO_X_EXT"];
                        if(isset($intIdDetSolCambioXExtender) && !empty($intIdDetSolCambioXExtender)
                            && isset($strDescripTipoSolGestionada) && !empty($strDescripTipoSolGestionada)
                            && $strDescripTipoSolGestionada !== "SOLICITUD PLANIFICACION")
                        {
                            $arrayRespuestaServiciosEdb = $this->obtenerServiciosPorProducto(
                                                                                array(  "intIdPunto"                    => 
                                                                                        $arrayTmpRegistroInfoGestionSimultanea["ID_PUNTO_GESTIONADO"],
                                                                                        "arrayNombresTecnicoProducto"   => 
                                                                                        array("EXTENDER_DUAL_BAND"),
                                                                                        "strCodEmpresa"                 => $strCodEmpresa));
                            $intContadorServiciosEdb    = $arrayRespuestaServiciosEdb["intContadorServiciosPorProducto"];
                            if(($strTipoOpcionGestionSimultanea === "CONSULTA" && intval($intContadorServiciosEdb) == 1)
                                || ($strTipoOpcionGestionSimultanea === "EJECUCION" && intval($intContadorServiciosEdb) == 0))
                            {
                                $arrayRegistrosInfoGestionSimultanea[] = $arrayTmpRegistroInfoGestionSimultanea;
                            }
                        }
                        else
                        {
                            $arrayRegistrosInfoGestionSimultanea[] = $arrayTmpRegistroInfoGestionSimultanea;
                        }
                    }
                }
            }
            else
            {
                $arrayRegistrosInfoGestionSimultanea = $arrayTmpRegistrosInfoGestionSimultanea;
            }
        }
        catch(\Exception $e)
        {
            $strStatus      = "ERROR";
            $strMsjError    = $e->getMessage();
        }
        
        $arrayRespuesta = array("status"                                => $strStatus,
                                "mensaje"                               => $strMsjError,
                                "arrayRegistrosInfoGestionSimultanea"   => $arrayRegistrosInfoGestionSimultanea);
        return $arrayRespuesta;
    }
    
    /**
     * Función que verifica los modelos dual band y genera la observación respectiva para que el técnico conozca que equipos debe llevar
     *
     * @param $arrayParametros [
     *                              "intIdServicio"         => Id del servicio
     *                              "intIdPlan"             => Id del plan del servicio de Internet
     *                              "strCodEmpresa"         => Id de la empresa
     *                              "strMarcaOlt"           => Marca del olt
     *                              "strModeloOlt"          => Modelo del olt
     *                              "strProcesoEjecutante"  => Proceso que realiza la verificación de modelos
     *                              "strModeloOnt"          => Modelo del ont
     *                              "strTipoConsulta"       => 'GRID' o 'CONSULTA'
     *                              "strUsrCreacion"        => Usuario de creación
     *                              "strIpCreacion"         => Ip de creación
     *                              "strProcesoEjecutante"  => Proceso que realiza la verificación de modelos
     *                              "strGuardaErrores"      => SI o NO se guarda el error generado
     *                          ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                            => 'OK' o 'ERROR'
     *                                  "mensaje"                           => Mensaje de error
     *                                  "msjGrid"                           => Mensaje detallado en la tarea especificando los equuipos Dual Band
     *                                  "strTecnologiaDualBandPermitida"    => 'OK' o 'ERROR' para verificar la tecnología del servicio
     *                                  "strProductoWdbEnPlan"              => 'SI' o 'NO' el producto Wifi Dual Band está incluido en el plan
     *                                  "strProductoEdbEnPlan"              => 'SI' o 'NO' el producto Extender Dual Band está incluido en el plan
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 14-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 12-10-2020 Se corrige el valor4 del parámetro para obtener correctamente los modelos dual band
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 01-02-2022 Función que no está siendo usada, se deja código como respaldo de validaciones iniciales.
     * 
     */
    public function verificaModelosDbEnServicioInternet($arrayParametros)
    {
        $intIdServicio                  = $arrayParametros['intIdServicio'];
        $intIdPlan                      = $arrayParametros['intIdPlan'];
        $strCodEmpresa                  = $arrayParametros['strCodEmpresa'];
        $strMarcaOlt                    = $arrayParametros['strMarcaOlt'];
        $strModeloOlt                   = $arrayParametros['strModeloOlt'];
        $strProcesoEjecutante           = $arrayParametros['strProcesoEjecutante'];
        $strModeloOnt                   = $arrayParametros['strModeloOnt'];
        $strTipoConsulta                = $arrayParametros["strTipoConsulta"];
        $strUsrCreacion                 = $arrayParametros['strUsrCreacion'];
        $strIpCreacion                  = $arrayParametros['strIpCreacion'];
        $strGuardaErrores               = $arrayParametros['strGuardaErrores'] ? $arrayParametros['strGuardaErrores'] : "SI";
        $boolMensajeUsuario             = false;
        $strMensaje                     = "";
        $strMsjGrid                     = "";
        $strTecnologiaDualBandPermitida = "";
        $strProductoWdbEnPlan           = "";
        $strProductoEdbEnPlan           = "";
        try
        {
            if(isset($strMarcaOlt) && !empty($strMarcaOlt) && isset($strModeloOlt) && !empty($strModeloOlt))
            {
                $arrayParamsVerifTecnologiaDb   = array("strMarcaOlt"           => $strMarcaOlt,
                                                        "strModeloOlt"          => $strModeloOlt,
                                                        "strProcesoEjecutante"  => $strProcesoEjecutante);
            }
            else
            {
                $arrayParamsVerifTecnologiaDb   = array("intIdServicioInternet" => $intIdServicio,
                                                        "strProcesoEjecutante"  => $strProcesoEjecutante);
            }
            
            if(isset($arrayParamsVerifTecnologiaDb) && !empty($arrayParamsVerifTecnologiaDb))
            {
                $arrayVerifTecnologiaDualBand   = $this->verificaTecnologiaDualBand($arrayParamsVerifTecnologiaDb);
                $strTecnologiaDualBandPermitida = $arrayVerifTecnologiaDualBand["status"];
                $strModelosEquiposWdb           = $arrayVerifTecnologiaDualBand["modelosEquiposWdb"];
                $strModelosEquiposEdb           = $arrayVerifTecnologiaDualBand["modelosEquiposEdb"];
                if($strTecnologiaDualBandPermitida === "OK")
                {
                    $arrayRespuestaProdWdbEnPlan    = $this->obtieneProductoEnPlan(array(   "intIdPlan"                 => $intIdPlan,
                                                                                            "strNombreTecnicoProducto"  => "WIFI_DUAL_BAND"));
                    $strProductoWdbEnPlan           = $arrayRespuestaProdWdbEnPlan["strProductoEnPlan"];
                    $objProductoWdbEnPlan           = $arrayRespuestaProdWdbEnPlan["objProductoEnPlan"];
                    if($strProductoWdbEnPlan === "SI" && is_object($objProductoWdbEnPlan))
                    {
                        if(isset($strModeloOnt) && !empty($strModeloOnt))
                        {
                            if(isset($strProcesoEjecutante) && !empty($strProcesoEjecutante))
                            {
                                $strParamModelosEquipos = 'MODELOS_EQUIPOS' . '_' .$strProcesoEjecutante;
                            }
                            else
                            {
                                $strParamModelosEquipos = 'MODELOS_EQUIPOS';
                            }

                            $arrayVerificaModeloWdb = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                      ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                $strParamModelosEquipos,
                                                                                '',
                                                                                '',
                                                                                'WIFI DUAL BAND',
                                                                                $strModeloOnt,
                                                                                $strCodEmpresa);
                            if(!isset($arrayVerificaModeloWdb) || empty($arrayVerificaModeloWdb))
                            {
                                $boolMensajeUsuario = true;
                                throw new \Exception("Servicio con ".$objProductoWdbEnPlan->getDescripcionProducto()
                                                    .", se requiere la instalación con cualquiera de los siguientes "
                                                    ."modelos de CPE ONT: ".$strModelosEquiposWdb."<br>"
                                                    ."El modelo ".$strModeloOnt. " no es considerado como "
                                                    .$objProductoWdbEnPlan->getDescripcionProducto());
                            }
                        }

                        $strMensaje .=  "Servicio con ".$objProductoWdbEnPlan->getDescripcionProducto()
                                        .", se requiere la instalación con cualquiera de los siguientes "
                                        ."modelos de CPE ONT: ".$strModelosEquiposWdb."<br>";
                        if(isset($strTipoConsulta) && !empty($strTipoConsulta) && $strTipoConsulta === "GRID" )
                        {
                            $strMsjGrid .= "<li style='margin-left: 10px;list-style: disc'>".$objProductoWdbEnPlan->getDescripcionProducto()."</li>";
                        }
                        else
                        {
                            $strMsjGrid .= $objProductoWdbEnPlan->getDescripcionProducto();
                        }
                    }

                    $arrayRespuestaProdEdbEnPlan    = $this->obtieneProductoEnPlan(array(   "intIdPlan"                 => $intIdPlan,
                                                                                            "strNombreTecnicoProducto"  => "EXTENDER_DUAL_BAND"));
                    $strProductoEdbEnPlan           = $arrayRespuestaProdEdbEnPlan["strProductoEnPlan"];
                    $objProductoEdbEnPlan           = $arrayRespuestaProdEdbEnPlan["objProductoEnPlan"];
                    if($strProductoEdbEnPlan === "SI" && is_object($objProductoEdbEnPlan))
                    {
                        $strMensaje .=  "Servicio con ".$objProductoEdbEnPlan->getDescripcionProducto()
                                        .", se requiere la instalación con cualquiera de los siguientes "
                                            ."modelos: ".$strModelosEquiposEdb;
                        if(isset($arrayParametros["strTipoConsulta"]) && !empty($arrayParametros["strTipoConsulta"])
                           && $arrayParametros["strTipoConsulta"] === "GRID" )
                        {
                            $strMsjGrid .= "<li style='margin-left: 10px;list-style: disc'>".$objProductoEdbEnPlan->getDescripcionProducto()."</li>";
                        }
                        else
                        {
                            if(!empty($strMsjGrid))
                            {
                                $strMsjGrid .= " y ";
                            }
                            $strMsjGrid .= $objProductoEdbEnPlan->getDescripcionProducto();
                        }
                    }
                }
            }
            
            if(!empty($strMsjGrid))
            {
                if(isset($strTipoConsulta) && !empty($strTipoConsulta) && $strTipoConsulta === "GRID" )
                {
                    $strMsjGrid = "<p><b>Equipos a instalar:</b></p><ul>".$strMsjGrid."</ul>";
                }
                else
                {
                    $strMsjGrid = " - Equipos a instalar: ".$strMsjGrid;
                }
            }
            $strStatus  = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus = "ERROR";
            if($boolMensajeUsuario)
            {
                $strMensaje = $e->getMessage();
            }
            else
            {
                $strMensaje = "No se ha podido validar el modelo del cpe ont. Por favor notificar a Sistemas.";
            }
            if($strGuardaErrores === "SI")
            {
                $this->utilService->insertError('Telcos+',
                                                'InfoServicioTecnicoService->verificaModelosDbEnServicioInternet',
                                                $e->getMessage(),
                                                $strUsrCreacion,
                                                $strIpCreacion);
            }
        }
        $arrayRespuesta = array("status"                            => $strStatus,
                                "mensaje"                           => $strMensaje,
                                "msjGrid"                           => $strMsjGrid,
                                "strTecnologiaDualBandPermitida"    => $strTecnologiaDualBandPermitida,
                                "strProductoWdbEnPlan"              => $strProductoWdbEnPlan,
                                "strProductoEdbEnPlan"              => $strProductoEdbEnPlan);
        return $arrayRespuesta;
    }
    
    /**
     * Función para obtener la observación de los equipos de acuerdo al equipo conectado o los servicios agregados en el punto
     * 
     * @param $arrayParametros [
     *                              "intIdSolicitud"            => id de la solicitud gestionada
     *                              "objSolicitud"              => objeto de la solicitud gestionada
     *                              "objServicio"               => objeto del servicio gestionado
     *                              "strTipoSolicitud"          => tipo de solicitud
     *                              "objServicioTecnico"        => objeto del servicio técnico
     *                              "strCodEmpresa"             => id de la empresa
     *                              "strTipoConsultaListGrid"   => tipo de consulta ya sea para el grid o para el excel
     *                          ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                        => 'OK' o 'ERROR'
     *                                  "mensaje"                       => Mensaje de error
     *                                  "infoEquiposTecnicoTarea"       => Información de los equipos a conectarse
     *                                  "infoEquiposListGrid"           => Información de los equipos en formato para ser visualizados desde el grid
     *                                  "esSolAgregarEquipoCambioOnt"   => 'SI' o 'NO' es una solicitud para cambio de ont
     *                               ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 06-04-2021
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 01-02-2022 Se modifica la función para obtener la información correcta de extenders tanto para V5 como para ZTE
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.2 19-10-2022 Se modifica la función para obtener la información correcta de productos NetlifeCam Outdoor u In-door 
     * 
     * @author Jubert Goya <jgoya@telconet.ec>
     * @version 1.3 23-02-2023 Se modifica la función para realizar logica solo en caso de que se exporte excel y minimizar tiempo de proceso
     * 
     */
    public function obtieneRespuestaInfoEquiposTecnico($arrayParametros)
    {
        $intIdSolicitud                 = $arrayParametros["intIdSolicitud"];
        $objSolicitud                   = $arrayParametros["objSolicitud"];
        $objServicio                    = $arrayParametros["objServicio"];
        $strTipoSolicitud               = strtoupper($arrayParametros["strTipoSolicitud"]);
        $objServicioTecnico             = $arrayParametros["objServicioTecnico"];
        $strCodEmpresa                  = $arrayParametros["strCodEmpresa"];
        $strTipoConsultaListGrid        = $arrayParametros["strTipoConsultaListGrid"];
        $strInfoEquiposTecnicoTarea     = "";
        $strInfoEquiposListGrid         = "";
        $strInfoObservacionAdicional    = "";
        $strValorCaractMotivoCambioOnt  = "CAMBIO ONT POR AGREGAR EXTENDER";
        $strEsSolAgregarEquipoCambioOnt = "NO";
        $strObtieneSolAgregarEquipoCambioDeOntXExtender = "";
        $objSolAgregarEquipoAbiertaCambioDeOntXExtender = null;
        $strTipoOntNuevoSolCambioDeOntXExtender         = "";
        $arrayParamProducNetCam   = $this->paramProductosNetlifeCam();
        try
        {
            if(!is_object($objSolicitud))
            {
                if(isset($intIdSolicitud) && !empty($intIdSolicitud))
                {
                    $objSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')->find($intIdSolicitud);
                }
                else
                {
                    throw new \Exception("No se ha enviado correctamente la solicitud que se desea gestionar");
                }
            }
            
            /*
             * Verificar si el servicio se debe activar con un Wifi Dual Band y si tiene un extender
             * y especificarlo en la tarea para que el técnico conozca los equipos q debe llevar en la instalación
             */
            if(is_object($objServicio->getPlanId())
                && ($strTipoSolicitud == "SOLICITUD PLANIFICACION" || $strTipoSolicitud == "SOLICITUD MIGRACION"
                    || $strTipoSolicitud == "SOLICITUD AGREGAR EQUIPO"))
            {
                if($strTipoSolicitud == "SOLICITUD AGREGAR EQUIPO")
                {
                    /*
                     * Se verifica si es una solicitud agregar equipo para realizar cambio de ont por agregación de un extender.
                     * Dicha solicitud sólo se crea cuando el servicio de Internet ya se encuentra activo
                     */
                    $arrayRespVerifSolCambioDeOntXExtender  = $this->verificaSolCambioDeOntPorServicioExtender(
                                                                            array(
                                                                                    "intIdSolicitud"        => $objSolicitud->getId(),
                                                                                    "strCodEmpresa"         => $strCodEmpresa,
                                                                                    "strMotivoCambioOnt"    => $strValorCaractMotivoCambioOnt));
                    $strStatusVerifSolCambioDeOntXExtender  = $arrayRespVerifSolCambioDeOntXExtender["status"];
                    $strMensajeVerifSolCambioDeOntXExtender = $arrayRespVerifSolCambioDeOntXExtender["mensaje"];
                    if($strStatusVerifSolCambioDeOntXExtender === "ERROR")
                    {
                        throw new \Exception($strMensajeVerifSolCambioDeOntXExtender);
                    }
                    $strObtieneSolAgregarEquipoCambioDeOntXExtender = $arrayRespVerifSolCambioDeOntXExtender["strObtieneSolAgregarEquipoCambioOnt"];
                    $objSolAgregarEquipoAbiertaCambioDeOntXExtender = $arrayRespVerifSolCambioDeOntXExtender["objSolAgregarEquipoCambioOnt"];
                    $strTipoOntNuevoSolCambioDeOntXExtender = $arrayRespVerifSolCambioDeOntXExtender["strTipoOntNuevoSolAgregarEquipoCambioOnt"];
                }
                
                $arrayParamsVerifTecnologiaDb = array();
                if($strTipoSolicitud == "SOLICITUD MIGRACION" && is_object($objServicioTecnico))
                {
                    $intIdSplliterTellion = $objServicioTecnico->getElementoConectorId();
                    if(isset($intIdSplliterTellion) && !empty($intIdSplliterTellion) && $intIdSplliterTellion > 0)
                    {
                        $objSplitterRefTellion  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                          ->findOneBy(array('refElementoId' => 
                                                                                            $intIdSplliterTellion));
                        if(is_object($objSplitterRefTellion))
                        {
                            $arrayElementoOltAMigrar = $this->emInfraestructura
                                                            ->getRepository('schemaBundle:InfoElemento')
                                                            ->getElementoPadre( $objSplitterRefTellion->getId(),
                                                                                'ELEMENTO',
                                                                                'OLT');
                            if(isset($arrayElementoOltAMigrar) && !empty($arrayElementoOltAMigrar))
                            {
                                $objElementoOltAMigrar  = $this->emInfraestructura
                                                               ->getRepository('schemaBundle:InfoElemento')
                                                               ->find($arrayElementoOltAMigrar[0]['IDELEMENTO']);
                                if(is_object($objElementoOltAMigrar))
                                {
                                    $objModeloElementoOltAMigrar = $objElementoOltAMigrar->getModeloElementoId();
                                    $strModeloElementoOltAMigrar = $objModeloElementoOltAMigrar->getNombreModeloElemento();
                                    $strMarcaElementoOltAMigrar  = $objModeloElementoOltAMigrar->getMarcaElementoId()
                                                                                               ->getNombreMarcaElemento();
                                    $arrayParamsVerifTecnologiaDb   = array("strMarcaOlt"           => $strMarcaElementoOltAMigrar,
                                                                            "strModeloOlt"          => $strModeloElementoOltAMigrar);
                                }
                            }
                        }
                    }
                }
                else
                {
                    $arrayParamsVerifTecnologiaDb   = array("intIdServicioInternet" => $objServicio->getId(),
                                                            "strTipoOnt"            => $strTipoOntNuevoSolCambioDeOntXExtender);
                }
                
                $strTecnologiaDualBandPermitida = "";
                $strModelosEquiposWdb           = "";
                $strModelosEquiposEdbXWdb       = "";
                $strModelosEquiposEdbXTipoOnt   = "";
                $strModelosEquiposEdb           = "";
                if(isset($arrayParamsVerifTecnologiaDb) && !empty($arrayParamsVerifTecnologiaDb))
                {
                    $arrayVerifTecnologiaDualBand       = $this->verificaTecnologiaDualBand($arrayParamsVerifTecnologiaDb);
                    $strTecnologiaDualBandPermitida     = $arrayVerifTecnologiaDualBand["status"];
                    $strMensajeVerifTecnologiaDualBand  = $arrayVerifTecnologiaDualBand["mensaje"];
                    $strModelosEquiposWdb               = $arrayVerifTecnologiaDualBand["modelosEquiposWdb"];
                    $strModelosEquiposEdbXWdb           = $arrayVerifTecnologiaDualBand["modelosEquiposEdb"];
                    if($strTecnologiaDualBandPermitida === "OK")
                    {
                        $arrayInfoVerifVerifTecnologiaDualBand  = explode('|', $strMensajeVerifTecnologiaDualBand);
                        $strMarcaOltTecnologiaDualBand          = $arrayInfoVerifVerifTecnologiaDualBand[0];
                        $strModeloOltTecnologiaDualBand         = $arrayInfoVerifVerifTecnologiaDualBand[1];
                        $strEsPermitidoWYExtenderEnPlanes       = $arrayInfoVerifVerifTecnologiaDualBand[2];

                        // logica minimizada solo para procesar datos de equipos en excel debido a tiempo de carga excesiva con logica anterior
                        // en caso de hacer algun cambio que afecte "infoEquiposListGrid" en la respuesta, tambien hacer el cambio aqui
                        if (isset($strTipoConsultaListGrid) && !empty($strTipoConsultaListGrid) && $strTipoConsultaListGrid === "XLS") 
                        {
                            $arrayStrEquipos = array("WDB_Y_EDB", "EXTENDER_DUAL_BAND", "WIFI_DUAL_BAND");

                            $arrayResultadoProductos = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                            ->findBy(array( "nombreTecnico" => $arrayStrEquipos,
                                                                            "empresaCod" => $strCodEmpresa));

                            $arrayIdEquipos = array();
                            $arrayNombreEquipos = array();
                            foreach ($arrayResultadoProductos as $objProducto) 
                            {
                                $arrayIdEquipos[$objProducto->getNombreTecnico()] = $objProducto->getId();
                                $arrayNombreEquipos[$objProducto->getDescripcionProducto()] = $objProducto->getId();
                            }

                            if($strObtieneSolAgregarEquipoCambioDeOntXExtender === "SI" 
                                && is_object($objSolAgregarEquipoAbiertaCambioDeOntXExtender))
                            {
                                $strInfoEquiposListGrid .= $strTipoOntNuevoSolCambioDeOntXExtender;
                            }
                            else 
                            {
                                $arrayWdbYEdbEnServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->findBy(array( "puntoId" => $objServicio->getPuntoId(),
                                                                                "productoId" => $arrayIdEquipos["WDB_Y_EDB"]));

                                if(!empty($arrayWdbYEdbEnServicio)) 
                                {
                                    $strInfoEquiposListGrid .= $arrayWdbYEdbEnServicio[0]->getProductoId()->getDescripcionProducto();
                                }
                                else
                                {
                                    $strTieneEquipoWEnlazado = "NO";
                                    $arrayRespuestaVerificaEquipoW  = $this->verificaEquipoEnlazado(
                                                                                array("intIdServicioInternet" => $objServicio->getId(),
                                                                                      "strTipoEquipoABuscar"  => "WIFI DUAL BAND"));
                                    $strInfoEquipoWEnlazado         = $arrayRespuestaVerificaEquipoW["infoEquipoEnlazado"];

                                    if(isset($strInfoEquipoWEnlazado) && !empty($strInfoEquipoWEnlazado))
                                    {
                                        $strTieneEquipoWEnlazado = "SI";
                                    }                              

                                    if($strTieneEquipoWEnlazado !== "SI")
                                    {
                                        $arrayWdbEnServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                    ->findBy(array( "puntoId" => $objServicio->getPuntoId(),
                                                                                    "productoId" => $arrayIdEquipos["WIFI_DUAL_BAND"]));
                                        $arrayWdbEnPlan = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                                ->findBy(array( "planId" => $objServicio->getPlanId(),
                                                                                "productoId" => $arrayIdEquipos["WIFI_DUAL_BAND"]));
                                        if(!empty($arrayWdbEnServicio))
                                        {
                                            $strInfoEquiposListGrid .= $arrayWdbEnServicio[0]->getProductoId()->getDescripcionProducto();
                                        }
                                        else if(!empty($arrayWdbEnPlan) && $arrayWdbEnPlan[0]->getEstado() != 'Eliminado')
                                        {
                                            $strInfoEquiposListGrid .= array_search($arrayWdbEnPlan[0]->getProductoId(), $arrayNombreEquipos);
                                        }
                                    }
                                }                               
                            }

                            $arrayEdbEnPlan = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->findBy(array("planId"     => $objServicio->getPlanId(),
                                                                   "productoId" => $arrayIdEquipos["EXTENDER_DUAL_BAND"]));

                            $strDescripcionProdEdb = "";
                            if(!empty($arrayEdbEnPlan) && $strEsPermitidoWYExtenderEnPlanes === "SI")
                            {
                                $arrayRespuestaEdbEnlazado = $this->verificaEquipoEnlazado(array("intIdServicioInternet" => $objServicio->getId(),
                                                                                                "strTipoEquipoABuscar"  => "EXTENDER DUAL BAND"));
                                $strInfoEquipoEdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                                if((!isset($strInfoEquipoEdbEnlazado) || empty($strInfoEquipoEdbEnlazado)) 
                                    && $arrayEdbEnPlan[0]->getEstado() != 'Eliminado')
                                {
                                    $strDescripcionProdEdb = array_search($arrayEdbEnPlan[0]->getProductoId(), $arrayNombreEquipos);
                                    if(!empty($strInfoEquiposListGrid))
                                    {
                                        $strInfoEquiposListGrid .= " y ";
                                    }
                                    $strInfoEquiposListGrid .= $strDescripcionProdEdb;
                                }
                            }

                            if(!empty($strInfoEquiposListGrid))
                            {
                                $strInfoEquiposListGrid = " - Equipos a instalar: ".$strInfoEquiposListGrid;
                            }

                            $arrayRespuesta = array("status" => "OK",
                            "infoEquiposListGrid"            => $strInfoEquiposListGrid,
                            );

                            return $arrayRespuesta;
                        }
                        
                        //En caso de que tipo consulta sea GRID se continua con la siguiente logica
                        //Se verifican si existen extender en el punto
                        $arrayVerificaEdbPorPunto       = $this->verificaProductoPorPunto(array("intIdServicioInternet"         => 
                                                                                                $objServicio->getId(),
                                                                                                "arrayNombresTecnicoProducto"   => 
                                                                                                array("EXTENDER_DUAL_BAND"),
                                                                                                "strCodEmpresa"                 => $strCodEmpresa,
                                                                                                "strVerificaEquipo"             => "NO",
                                                                                                "strVerificaProdEnPlan"         => 
                                                                                                $strEsPermitidoWYExtenderEnPlanes));
                        $strEdbEncontradoPorPunto       = $arrayVerificaEdbPorPunto["strProductoEncontrado"];
                        $strProductoEdbEnPlan           = $arrayVerificaEdbPorPunto["strProductoEnPlan"];
                        $objProductoEdbEnPlan           = $arrayVerificaEdbPorPunto["objProductoEnPlan"];
                        $strServiciosEdbAdicProducto    = $arrayVerificaEdbPorPunto["strServiciosAdicProducto"];
                        $arrayServiciosEdbAdicProducto  = $arrayVerificaEdbPorPunto["arrayServiciosAdicProducto"];
                        
                        if($strObtieneSolAgregarEquipoCambioDeOntXExtender === "SI" && is_object($objSolAgregarEquipoAbiertaCambioDeOntXExtender))
                        {
                            $strModelosEquiposOntXTipoOnt       = $arrayVerifTecnologiaDualBand["modelosEquiposOntXTipoOnt"];
                            $strModelosEquiposEdbXTipoOnt       = $arrayVerifTecnologiaDualBand["modelosEquiposEdbXTipoOnt"];
                            if(!isset($strTipoOntNuevoSolCambioDeOntXExtender) || empty($strTipoOntNuevoSolCambioDeOntXExtender))
                            {
                                throw new \Exception("No se pudo obtener el tipo de ont nuevo para la solicitud");
                            }
                            $strInfoObservacionAdicional    .=  "Servicio requiere cambio de equipo con cualquiera de los siguientes "
                                                                ."modelos de CPE ONT: ".$strModelosEquiposOntXTipoOnt;
                            $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                ."Servicio requiere cambio de equipo<br>"
                                                                ."con cualquiera de los siguientes<br>"
                                                                ."modelos de CPE ONT:<br>"
                                                                .$strModelosEquiposOntXTipoOnt."</div><br>";

                            if($objServicio->getTipoOrden() === "T" && $objServicio->getEstado() !== "Activo")
                            {
                                $strInfoObservacionAdicional    .=  ". Ejecute el cambio de equipo luego de realizar el traslado con los "
                                                                    ."mismos equipos del origen";
                                $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                    ."Ejecute el cambio de equipo luego<br>"
                                                                    ."de realizar el traslado con los<br>"
                                                                    ."mismos equipos del origen</div><br>";
                                
                            }
                            $strInfoObservacionAdicional    .= ". ";
                            $strModelosEquiposEdb       = $strModelosEquiposEdbXTipoOnt;
                            if(isset($strTipoConsultaListGrid) && !empty($strTipoConsultaListGrid) && $strTipoConsultaListGrid === "GRID")
                            {
                                $strInfoEquiposListGrid .= "<li style='margin-left: 10px;list-style: disc'>".$strTipoOntNuevoSolCambioDeOntXExtender
                                                           ."</li>";
                            }
                            else
                            {
                                $strInfoEquiposListGrid .= $strTipoOntNuevoSolCambioDeOntXExtender;
                            }
                            $strEsSolAgregarEquipoCambioOnt = "SI";
                        }
                        else
                        {
                            $strTieneEquipoWEnlazado        = "NO";
                            $strModelosEquiposEdb           = $strModelosEquiposEdbXWdb;
                            $strVerificaCpeOntPorExtender   = "SI";
                            if(isset($strModelosEquiposWdb) && !empty($strModelosEquiposWdb))
                            {
                                $arrayRespuestaVerificaEquipoW  = $this->verificaEquipoEnlazado(
                                                                            array(  "intIdServicioInternet" => $objServicio->getId(),
                                                                                    "strTipoEquipoABuscar"  => "WIFI DUAL BAND"));
                                $strInfoEquipoWEnlazado         = $arrayRespuestaVerificaEquipoW["infoEquipoEnlazado"];
                                if(isset($strInfoEquipoWEnlazado) && !empty($strInfoEquipoWEnlazado))
                                {
                                    $strTieneEquipoWEnlazado = "SI";
                                }
                                
                                $arrayVerificaWyApPorPunto      = $this->verificaProductoPorPunto(array(
                                                                                            "intIdServicioInternet"         => $objServicio->getId(),
                                                                                            "arrayNombresTecnicoProducto"   => array("WDB_Y_EDB"),
                                                                                            "strCodEmpresa"                 => $strCodEmpresa,
                                                                                            "strVerificaEquipo"             => "NO",
                                                                                            "strVerificaProdEnPlan"         => 
                                                                                            $strEsPermitidoWYExtenderEnPlanes));
                                $strWyApEncontradoPorPunto      = $arrayVerificaWyApPorPunto["strProductoEncontrado"];
                                $strServiciosWyApAdicProducto   = $arrayVerificaWyApPorPunto["strServiciosAdicProducto"];
                                $arrayServiciosWyApAdicProducto = $arrayVerificaWyApPorPunto["arrayServiciosAdicProducto"];
                                if($strWyApEncontradoPorPunto === "SI" && $strServiciosWyApAdicProducto === "SI" 
                                    && !empty($arrayServiciosWyApAdicProducto))
                                {
                                    $objProdWyApAdic                = $arrayServiciosWyApAdicProducto[0]->getProductoId();
                                    if($strTieneEquipoWEnlazado === "SI")
                                    {
                                        $strInfoObservacionAdicional    .=  "Servicio con ".$objProdWyApAdic->getDescripcionProducto()
                                                                            .", se requiere agregar el equipo con cualquiera de los siguientes "
                                                                            ."modelos: ".$strModelosEquiposEdbXWdb.". ";
                                        $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                            ."Servicio con ".$objProdWyApAdic->getDescripcionProducto()
                                                                            .",<br> se requiere agregar el equipo<br>"
                                                                            ."con cualquiera de los siguientes<br>"
                                                                            ."modelos:<br>"
                                                                            .$strModelosEquiposEdbXWdb."</div>";
                                    }
                                    else
                                    {
                                        $strInfoObservacionAdicional    .=  "Servicio con ".$objProdWyApAdic->getDescripcionProducto()
                                                                            .", se requiere la instalación con cualquiera de los siguientes "
                                                                            ."modelos de CPE ONT: ".$strModelosEquiposWdb.". "
                                                                            ."Además, se requiere agregar el equipo con cualquiera de los siguientes "
                                                                            ."modelos: ".$strModelosEquiposEdbXWdb.". ";
                                        $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                            ."Servicio con ".$objProdWyApAdic->getDescripcionProducto()
                                                                            .",<br> se requiere la instalación<br>"
                                                                            ."con cualquiera de los siguientes<br>"
                                                                            ."modelos de CPE ONT:<br>"
                                                                            .$strModelosEquiposWdb."</div><br>"
                                                                            ."<div style ='color:red'>"
                                                                            ."Además, se requiere agregar el equipo<br>"
                                                                            ."con cualquiera de los siguientes<br>"
                                                                            ."modelos:<br>"
                                                                            .$strModelosEquiposEdbXWdb."</div>";
                                    }

                                    if(isset($strTipoConsultaListGrid) && !empty($strTipoConsultaListGrid) && $strTipoConsultaListGrid === "GRID")
                                    {
                                        $strInfoEquiposListGrid .= "<li style='margin-left: 10px;list-style: disc'>"
                                                                   .$objProdWyApAdic->getDescripcionProducto()."</li>";
                                    }
                                    else
                                    {
                                        $strInfoEquiposListGrid .= $objProdWyApAdic->getDescripcionProducto();
                                    }
                                    $strVerificaCpeOntPorExtender = "NO";
                                }
                                else
                                {
                                    $arrayVerificaWdbPorPunto       = $this->verificaProductoPorPunto(array(
                                                                                                        "intIdServicioInternet"        => 
                                                                                                        $objServicio->getId(),
                                                                                                        "arrayNombresTecnicoProducto"  => 
                                                                                                        array("WIFI_DUAL_BAND"),
                                                                                                        "strCodEmpresa"                => 
                                                                                                        $strCodEmpresa,
                                                                                                        "strVerificaEquipo"            => "NO",
                                                                                                        "strVerificaProdEnPlan"         => 
                                                                                                        $strEsPermitidoWYExtenderEnPlanes));
                                    $strWdbEncontradoPorPunto       = $arrayVerificaWdbPorPunto["strProductoEncontrado"];
                                    $strProductoWdbEnPlan           = $arrayVerificaWdbPorPunto["strProductoEnPlan"];
                                    $objProductoWdbEnPlan           = $arrayVerificaWdbPorPunto["objProductoEnPlan"];
                                    $strServiciosWdbAdicProducto    = $arrayVerificaWdbPorPunto["strServiciosAdicProducto"];
                                    $arrayServiciosWdbAdicProducto  = $arrayVerificaWdbPorPunto["arrayServiciosAdicProducto"];
                                    if($strWdbEncontradoPorPunto === "SI" && $strTieneEquipoWEnlazado !== "SI")
                                    {
                                        if($strServiciosWdbAdicProducto === "SI" && !empty($arrayServiciosWdbAdicProducto))
                                        {
                                            $strDescripcionProdWdb =  $arrayServiciosWdbAdicProducto[0]->getProductoId()->getDescripcionProducto();
                                        }
                                        else if($strProductoWdbEnPlan === "SI" && is_object($objProductoWdbEnPlan))
                                        {
                                            $strDescripcionProdWdb = $objProductoWdbEnPlan->getDescripcionProducto();
                                        }
                                        else
                                        {
                                            $strDescripcionProdWdb = "equipo especial ";
                                        }

                                        $strInfoObservacionAdicional    .=  "Servicio con ".$strDescripcionProdWdb.", se requiere la instalación "
                                                                            ."con cualquiera de los siguientes modelos de CPE ONT: "
                                                                            .$strModelosEquiposWdb.". ";

                                        $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                            ."Servicio con ".$strDescripcionProdWdb
                                                                            .",<br> se requiere la instalación<br>"
                                                                            ."con cualquiera de los siguientes<br>"
                                                                            ."modelos de CPE ONT:<br>"
                                                                            .$strModelosEquiposWdb."</div><br>";


                                        if(isset($strTipoConsultaListGrid) && !empty($strTipoConsultaListGrid) && $strTipoConsultaListGrid === "GRID")
                                        {
                                            $strInfoEquiposListGrid .= "<li style='margin-left: 10px;list-style: disc'>".$strDescripcionProdWdb
                                                                       ."</li>";
                                        }
                                        else
                                        {
                                            $strInfoEquiposListGrid .= $strDescripcionProdWdb;
                                        }
                                        $strVerificaCpeOntPorExtender = "NO";
                                    }
                                }
                            }
                            
                            if($strVerificaCpeOntPorExtender === "SI" && $strEdbEncontradoPorPunto === "SI" && $strServiciosEdbAdicProducto === "SI" 
                                && !empty($arrayServiciosEdbAdicProducto) && $strTieneEquipoWEnlazado !== "SI")
                            {
                                $arrayTipoEquipoOntParaExt  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                              ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        'TIPOS_EQUIPOS',
                                                                                        $strMarcaOltTecnologiaDualBand,
                                                                                        $strModeloOltTecnologiaDualBand,
                                                                                        '',
                                                                                        'TIPOS_EQUIPOS_ONT_PARA_EXTENDER',
                                                                                        $strCodEmpresa);
                                if(isset($arrayTipoEquipoOntParaExt) && !empty($arrayTipoEquipoOntParaExt))
                                {
                                    $strTipoEquipoOntParaExt = $arrayTipoEquipoOntParaExt['valor4'];
                                    if(isset($strTipoEquipoOntParaExt) && !empty($strTipoEquipoOntParaExt))
                                    {
                                        $arrayRespuestaEquipoOntParaExtEnlazado = $this->verificaEquipoEnlazado(
                                                                                    array(  "intIdServicioInternet" => $objServicio->getId(),
                                                                                            "strTipoEquipoABuscar"  => $strTipoEquipoOntParaExt));
                                        $strInfoEquipoOntParaExtEnlazado    = $arrayRespuestaEquipoOntParaExtEnlazado["infoEquipoEnlazado"];
                                        if(!isset($strInfoEquipoOntParaExtEnlazado) || empty($strInfoEquipoOntParaExtEnlazado))
                                        {
                                            $arrayModelosEquiposOntsParaExt         = array();
                                            $arrayParamsModelosEquiposOntsParaExt   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                                      ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                            '',
                                                                                                            '',
                                                                                                            '',
                                                                                                            'MODELOS_EQUIPOS',
                                                                                                            $strMarcaOltTecnologiaDualBand,
                                                                                                            $strModeloOltTecnologiaDualBand,
                                                                                                            $strTipoEquipoOntParaExt,
                                                                                                            '',
                                                                                                            $strCodEmpresa);
                                            if(is_array($arrayParamsModelosEquiposOntsParaExt) && count($arrayParamsModelosEquiposOntsParaExt) > 0)
                                            {
                                                foreach($arrayParamsModelosEquiposOntsParaExt as $arrayParamModeloEquipoOntParaExt)
                                                {
                                                    $arrayModelosEquiposOntsParaExt[] = $arrayParamModeloEquipoOntParaExt['valor5'];
                                                }

                                                $strModelosEquiposOntsParaExt = implode(',', $arrayModelosEquiposOntsParaExt);
                                                $strInfoObservacionAdicional    .=  "Servicio requiere equipo con cualquiera de los siguientes "
                                                                                    ."modelos de CPE ONT: ".$strModelosEquiposOntsParaExt;
                                                $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                                    ."Servicio requiere equipo<br>"
                                                                                    ."con cualquiera de los siguientes<br>"
                                                                                    ."modelos de CPE ONT:<br>"
                                                                                    .$strModelosEquiposOntsParaExt."</div><br>";
                                                $strInfoObservacionAdicional    .= ". ";
                                            }
                                        }
                                        
                                        $arrayModelosEquiposExtendersXOnt   = array();
                                        $arrayParamsModelosEquiposExtXOnt   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                              ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    'MODELOS_EXTENDERS_POR_ONT',
                                                                                                    $strMarcaOltTecnologiaDualBand,
                                                                                                    $strTipoEquipoOntParaExt,
                                                                                                    '',
                                                                                                    '',
                                                                                                    $strCodEmpresa);
                                        if(is_array($arrayParamsModelosEquiposExtXOnt) && count($arrayParamsModelosEquiposExtXOnt) > 0)
                                        {
                                            foreach($arrayParamsModelosEquiposExtXOnt as $arrayParamModeloEquipoExtXOnt)
                                            {
                                                $arrayModelosEquiposExtendersXOnt[] = $arrayParamModeloEquipoExtXOnt['valor5'];
                                            }
                                            $strModelosEquiposEdb = implode(',', $arrayModelosEquiposExtendersXOnt);
                                        }
                                    }
                                }
                            }
                        }
                        
                        if($strEdbEncontradoPorPunto === "SI")
                        {
                            $strDescripcionProdEdb = "";
                            if($strProductoEdbEnPlan === "SI" && is_object($objProductoEdbEnPlan) && $strEsPermitidoWYExtenderEnPlanes === "SI")
                            {
                                $arrayRespuestaEdbEnlazado  = $this->verificaEquipoEnlazado(array(  "intIdServicioInternet" => $objServicio->getId(),
                                                                                                    "strTipoEquipoABuscar"  => "EXTENDER DUAL BAND"));
                                $strInfoEquipoEdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                                if(!isset($strInfoEquipoEdbEnlazado) || empty($strInfoEquipoEdbEnlazado))
                                {
                                    $strDescripcionProdEdb = $objProductoEdbEnPlan->getDescripcionProducto();
                                    if(isset($strTipoConsultaListGrid) && !empty($strTipoConsultaListGrid) && $strTipoConsultaListGrid === "GRID")
                                    {
                                        $strInfoEquiposListGrid .= "<li style='margin-left: 10px;list-style: disc'>".$strDescripcionProdEdb."</li>";
                                    }
                                    else
                                    {
                                        if(!empty($strInfoEquiposListGrid))
                                        {
                                            $strInfoEquiposListGrid .= " y ";
                                        }
                                        $strInfoEquiposListGrid .= $strDescripcionProdEdb;
                                    }
                                }
                            }
                            else if($strServiciosEdbAdicProducto === "SI" && !empty($arrayServiciosEdbAdicProducto))
                            {
                                $strDescripcionProdEdb = $arrayServiciosEdbAdicProducto[0]->getProductoId()->getDescripcionProducto();
                                
                            }
                            
                            if(isset($strDescripcionProdEdb) && !empty($strDescripcionProdEdb)
                                && isset($strModelosEquiposEdb) && !empty($strModelosEquiposEdb))
                            {
                                $strInfoObservacionAdicional    .=  "Servicio con ".$strDescripcionProdEdb.", se requiere agregar el equipo "
                                                                    ."con cualquiera de los siguientes modelos: ".$strModelosEquiposEdb.". ";
                                $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                    ."Servicio con ".$strDescripcionProdEdb
                                                                    .",<br> se requiere agregar el equipo<br>"
                                                                    ."con cualquiera de los siguientes<br>"
                                                                    ."modelos:<br>"
                                                                    .$strModelosEquiposEdb."</div>";
                            }
                        }
                    }
                }
            }
            else if(is_object($objServicio->getProductoId()) 
                && $objServicio->getProductoId()->getNombreTecnico() === "EXTENDER_DUAL_BAND"
                && $strTipoSolicitud === 'SOLICITUD AGREGAR EQUIPO')
            {
                //Se obtiene el servicio de Internet asociado
                $arrayParamsServInternetValido  = array("intIdPunto" => $objServicio->getPuntoId()->getId(),
                                                        "strCodEmpresa" => $strCodEmpresa);
                if($objServicio->getTipoOrden() === "T")
                {
                    $arrayParamsServInternetValido["omiteEstadoPunto"] = "SI";
                }
                $arrayRespuestaServInternetValido   = $this->obtieneServicioInternetValido($arrayParamsServInternetValido);
                $strStatusServInternetValido        = $arrayRespuestaServInternetValido["status"];
                $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];
                if($strStatusServInternetValido === "OK" && is_object($objServicioInternet))
                {
                    //Se verifica si la tecnología es permitida para equipos dual band
                    $intIdServicioInternet              = $objServicioInternet->getId();
                    $arrayParamsVerifTecnologiaDb       = array("intIdServicioInternet" => $objServicioInternet->getId());
                    $arrayVerifTecnologiaDualBand       = $this->verificaTecnologiaDualBand($arrayParamsVerifTecnologiaDb);
                    $strTecnologiaDualBandPermitida     = $arrayVerifTecnologiaDualBand["status"];
                    $strMensajeVerifTecnologiaDualBand  = $arrayVerifTecnologiaDualBand["mensaje"];
                    $strModelosEquiposWdb               = $arrayVerifTecnologiaDualBand["modelosEquiposWdb"];
                    $strModelosEquiposEdbXWdb           = $arrayVerifTecnologiaDualBand["modelosEquiposEdb"];
                    $strInfoModelosEquiposEdb           = "";
                    if($strTecnologiaDualBandPermitida === "OK")
                    {
                        $arrayInfoVerifVerifTecnologiaDualBand  = explode('|', $strMensajeVerifTecnologiaDualBand);
                        $strMarcaOltTecnologiaDualBand          = $arrayInfoVerifVerifTecnologiaDualBand[0];
                        $strModeloOltTecnologiaDualBand         = $arrayInfoVerifVerifTecnologiaDualBand[1];
                        $strEsPermitidoWYExtenderEnPlanes       = $arrayInfoVerifVerifTecnologiaDualBand[2];
                        $strAplicaFlujoExtenderConW = "NO";
                        if(isset($strModelosEquiposWdb) && !empty($strModelosEquiposWdb))
                        {
                            /*
                             * Se verifica si el punto tiene asociado servicios adicionales Wifi Dual Band, W+AP o el equipo ont está enlazado 
                             * y es un equipo W.
                             * No se validará a nivel de plan ya que hay que considerar que a pesar de tener detalle W, 
                             * debe darse prioridad al nuevo flujo de extenders para V5
                             */
                            $arrayVerificaWdbPorPunto   = $this->verificaProductoPorPunto(array( 
                                                                    "intIdServicioInternet"         => $intIdServicioInternet,
                                                                    "arrayNombresTecnicoProducto"   => array("WIFI_DUAL_BAND", "WDB_Y_EDB"),
                                                                    "strCodEmpresa"                 => $strCodEmpresa,
                                                                    "strVerificaEquipo"             => "SI",
                                                                    "strTipoEquipoABuscar"          => "WIFI DUAL BAND",
                                                                    "strVerificaProdEnPlan"         => $strEsPermitidoWYExtenderEnPlanes));
                            $strWdbEncontradoPorPunto       = $arrayVerificaWdbPorPunto["strProductoEncontrado"];
                            $strServiciosWdbAdicProducto    = $arrayVerificaWdbPorPunto["strServiciosAdicProducto"];
                            $arrayServiciosWdbAdicProducto  = $arrayVerificaWdbPorPunto["arrayServiciosAdicProducto"];
                            $strEquipoWdbEnlazado           = $arrayVerificaWdbPorPunto["strEquipoEnlazado"];
                            $strInfoEquipoWdbEnlazado       = $arrayVerificaWdbPorPunto["strInfoEquipoEnlazado"];
                            if($strWdbEncontradoPorPunto === "SI" 
                                && (($strServiciosWdbAdicProducto === "SI" && !empty($arrayServiciosWdbAdicProducto))
                                    || ($strEquipoWdbEnlazado === "SI" && !empty($strInfoEquipoWdbEnlazado))))
                            {
                                $strAplicaFlujoExtenderConW = "SI";
                            }
                        }
                        
                        if($strAplicaFlujoExtenderConW === "SI")
                        {
                            /*
                             * Flujo de extender con equipo W, aplica en los siguientes casos:
                             * 1. El extender es agregado cuando el servicio de Internet aún no se ha activado, pero el punto tiene agregado 
                             * un servicio Wifi Dual Band o un W+AP
                             * 2. El extender está conectado a un equipo ont W (Internet ya activo o cuando provienen de un traslado)
                             */
                            $strInfoModelosEquiposEdb = $strModelosEquiposEdbXWdb;
                        }
                        else
                        {
                            /*
                             * Se verifica si es una solicitud agregar equipo para realizar cambio de ont por agregación de un extender.
                             * Dicha solicitud sólo se crea cuando el servicio de Internet ya se encuentra activo
                             */
                            $arrayTipoEquipoOntParaExt  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                          ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    'TIPOS_EQUIPOS',
                                                                                    $strMarcaOltTecnologiaDualBand,
                                                                                    $strModeloOltTecnologiaDualBand,
                                                                                    '',
                                                                                    'TIPOS_EQUIPOS_ONT_PARA_EXTENDER',
                                                                                    $strCodEmpresa);
                            if(isset($arrayTipoEquipoOntParaExt) && !empty($arrayTipoEquipoOntParaExt))
                            {
                                $strTipoEquipoOntParaExt = $arrayTipoEquipoOntParaExt['valor4'];
                                if(isset($strTipoEquipoOntParaExt) && !empty($strTipoEquipoOntParaExt))
                                {
                                    /*
                                     * Flujo de extender con equipo ont parametrizado, aplica en los siguientes casos:
                                     * 1. El extender es agregado cuando el servicio de Internet aún no se ha activado y no tiene equipo ont enlazado
                                     * 2. El extender está conectado a un equipo ont diferente al W (Internet ya activo o cuando provienen de un 
                                     * traslado)
                                     */
                                    $arrayRespVerifSolCambioDeOntXExtender  = $this->verificaSolCambioDeOntPorServicioExtender(
                                                                                        array(
                                                                                            "intIdServicioInternet" => $intIdServicioInternet,
                                                                                            "strCodEmpresa"         => $strCodEmpresa,
                                                                                            "strMotivoCambioOnt"    => $strValorCaractMotivoCambioOnt,
                                                                                            "strTipoOntNuevo"       => $strTipoEquipoOntParaExt));
                                    $strStatusVerifSolCambioDeOntXExtender  = $arrayRespVerifSolCambioDeOntXExtender["status"];
                                    $strMensajeVerifSolCambioDeOntXExtender = $arrayRespVerifSolCambioDeOntXExtender["mensaje"];
                                    if($strStatusVerifSolCambioDeOntXExtender === "ERROR")
                                    {
                                        throw new \Exception($strMensajeVerifSolCambioDeOntXExtender);
                                    }

                                    $strObtieneSolAgregarEquipoCambioDeOntXExtender = 
                                    $arrayRespVerifSolCambioDeOntXExtender["strObtieneSolAgregarEquipoCambioOnt"];
                                    $objSolAgregarEquipoAbiertaCambioDeOntXExtender = 
                                        $arrayRespVerifSolCambioDeOntXExtender["objSolAgregarEquipoCambioOnt"];
                                    if($strObtieneSolAgregarEquipoCambioDeOntXExtender === "SI" 
                                        && is_object($objSolAgregarEquipoAbiertaCambioDeOntXExtender))
                                    {
                                        $arrayModelosEquiposOntsParaExt         = array();
                                        $arrayParamsModelosEquiposOntsParaExt   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                        '',
                                                                                                        '',
                                                                                                        '',
                                                                                                        'MODELOS_EQUIPOS',
                                                                                                        $strMarcaOltTecnologiaDualBand,
                                                                                                        $strModeloOltTecnologiaDualBand,
                                                                                                        $strTipoEquipoOntParaExt,
                                                                                                        '',
                                                                                                        $strCodEmpresa);
                                        if(is_array($arrayParamsModelosEquiposOntsParaExt) && count($arrayParamsModelosEquiposOntsParaExt) > 0)
                                        {
                                            foreach($arrayParamsModelosEquiposOntsParaExt as $arrayParamModeloEquipoOntParaExt)
                                            {
                                                $arrayModelosEquiposOntsParaExt[] = $arrayParamModeloEquipoOntParaExt['valor5'];
                                            }

                                            $strModelosEquiposOntsParaExt = implode(',', $arrayModelosEquiposOntsParaExt);
                                            
                                            $strInfoObservacionAdicional    .=  "Servicio requiere cambio de equipo con cualquiera de los siguientes "
                                                                            ."modelos de CPE ONT: ".$strModelosEquiposOntsParaExt;
                                            $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                                ."Servicio requiere cambio de equipo<br>"
                                                                                ."con cualquiera de los siguientes<br>"
                                                                                ."modelos de CPE ONT:<br>"
                                                                                .$strModelosEquiposOntsParaExt."</div><br>";
                                            if($objServicioInternet->getTipoOrden() === "T" && $objServicioInternet->getEstado() !== "Activo")
                                            {
                                                $strInfoObservacionAdicional    .=  ". Ejecute el cambio de equipo luego de realizar el traslado "
                                                                                    ."con los mismos equipos del origen";
                                                $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                                    ."Ejecute el cambio de equipo luego<br>"
                                                                                    ."de realizar el traslado con los<br>"
                                                                                    ."mismos equipos del origen</div><br>";
                                            }
                                            $strInfoObservacionAdicional    .= ". ";
                                        }
                                    }
                                    
                                    $arrayModelosEquiposExtendersXOnt   = array();
                                    $arrayParamsModelosEquiposExtXOnt   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                          ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                'MODELOS_EXTENDERS_POR_ONT',
                                                                                                $strMarcaOltTecnologiaDualBand,
                                                                                                $strTipoEquipoOntParaExt,
                                                                                                '',
                                                                                                '',
                                                                                                $strCodEmpresa);
                                    if(is_array($arrayParamsModelosEquiposExtXOnt) && count($arrayParamsModelosEquiposExtXOnt) > 0)
                                    {
                                        foreach($arrayParamsModelosEquiposExtXOnt as $arrayParamModeloEquipoExtXOnt)
                                        {
                                            $arrayModelosEquiposExtendersXOnt[] = $arrayParamModeloEquipoExtXOnt['valor5'];
                                        }
                                        $strInfoModelosEquiposEdb = implode(',', $arrayModelosEquiposExtendersXOnt);
                                    }
                                }
                            }
                        }
                        
                        if(isset($strInfoModelosEquiposEdb) && !empty($strInfoModelosEquiposEdb))
                        {
                            $strInfoObservacionAdicional    .=  "Servicio con ".$objServicio->getProductoId()->getDescripcionProducto()
                                                                .", se requiere agregar el equipo con cualquiera de los siguientes modelos: "
                                                                .$strInfoModelosEquiposEdb.". ";
                            $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                ."Servicio con ".$objServicio->getProductoId()->getDescripcionProducto()
                                                                .",<br> se requiere agregar el equipo<br>"
                                                                ."con cualquiera de los siguientes<br>"
                                                                ."modelos:<br>"
                                                                .$strInfoModelosEquiposEdb."</div>";
                        }
                    }
                }
                else
                {
                    throw new \Exception("No se ha podido obtener el servicio de Internet asociado al punto");
                }
            }
            
            if(!empty($strInfoEquiposListGrid))
            {
                if(isset($strTipoConsultaListGrid) && !empty($strTipoConsultaListGrid) && $strTipoConsultaListGrid === "GRID" )
                {
                    $strInfoEquiposListGrid = "<p><b>Equipos a instalar:</b></p><ul>".$strInfoEquiposListGrid."</ul>";
                }
                else
                {
                    $strInfoEquiposListGrid = " - Equipos a instalar: ".$strInfoEquiposListGrid;
                }
            }
            /**
             * Mensaje al momento de realiza la planificacion a los productos NetlifeCam Outdoor e Indoor
             */
            else if(is_object($objServicio->getProductoId()) 
                 && in_array($objServicio->getProductoId()->getNombreTecnico(),$arrayParamProducNetCam))
            {
                $arrayParamsModelosEquiposNetlife   = array();
                $arrayParamsModelosEquiposNetlife  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                      ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                'MODELOS_EQUIPOS',
                                                                                                '',
                                                                                                '',
                                                                                                $objServicio->getProductoId()->getNombreTecnico(),
                                                                                                '',
                                                                                                $strCodEmpresa);
                foreach($arrayParamsModelosEquiposNetlife as $arrayParamModeloEquipoNetlife)
                {
                    $arrayParamsModelosEquiposNetlifeIns[] = $arrayParamModeloEquipoNetlife['valor5'];
                }
                $strModelosEquiposNetlifeCam = implode(',', $arrayParamsModelosEquiposNetlifeIns);
                $strInfoObservacionAdicional    .=  "Servicio con ".$objServicio->getProductoId()->getDescripcionProducto()
                                                                .", se requiere agregar el equipo con cualquiera de los siguientes modelos: "
                                                                .$strModelosEquiposNetlifeCam.". ";
                $strInfoEquiposTecnicoTarea     .=  "<div style ='color:red'>"
                                                                ."Servicio con ".$objServicio->getProductoId()->getDescripcionProducto()
                                                                .",<br> se requiere agregar el equipo<br>"
                                                                ."con cualquiera de los siguientes<br>"
                                                                ."modelos:<br>"
                                                                .$strModelosEquiposNetlifeCam."</div>";


            }
            
            
            
            $strStatus  = "OK";
            $strMensaje = "";
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }

        $arrayRespuesta = array("status"                        => $strStatus,
                                "mensaje"                       => $strMensaje,
                                "infoObservacionAdicional"      => $strInfoObservacionAdicional,
                                "infoEquiposTecnicoTarea"       => $strInfoEquiposTecnicoTarea,
                                "infoEquiposListGrid"           => $strInfoEquiposListGrid,
                                "esSolAgregarEquipoCambioOnt"   => $strEsSolAgregarEquipoCambioOnt);
        return $arrayRespuesta;
    }
    
    /**
     * Función que verifica si un equipo está enlazado por medio del servicio de Internet
     *
     * @param $arrayParametros [
     *                              "intIdServicioInternet"     => Id del servicio de Internet
     *                              "intIdInterfaceElementoIni" => Id de la interface inicial en la que se recorrerá los enlaces
     *                              "strTipoEquipoABuscar"      => Tipo de equipo a buscar CPE ONT, CPE WIFI, WIFI DUAL BAND, EXTENDER DUAL BAND
     *                              "strModeloEquipoABuscar"    => Modelo del equipo enlazado
     *                              "strProcesoEjecutante"      => Proceso que ejecuta el procedimiento
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => 'OK' o 'ERROR'
     *                                  "mensaje"               => Mensaje de error
     *                                  "infoEquipoEnlazado"    => información del equipo enlazado concatenado con ,
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 14-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 10-04-2021 Se agrega la obtención del parámetro strTieneEquipoEnlazado que devuelve si se encuentra un equipo conectado
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 07-02-2022 Se agrega parámetro en oci_connect para visualización correcta de historiales con tildes
     *
     */
    public function verificaEquipoEnlazado($arrayParametros)
    {
        $intIdServicioInternet      = $arrayParametros["intIdServicioInternet"];
        $intIdInterfaceElementoIni  = $arrayParametros["intIdInterfaceElementoIni"];
        $strTipoEquipoABuscar       = $arrayParametros["strTipoEquipoABuscar"];
        $strModeloEquipoABuscar     = $arrayParametros["strModeloEquipoABuscar"];
        $strProcesoEjecutante       = $arrayParametros["strProcesoEjecutante"];
        $strInfoEquipoEnlazado      = "";
        $strStatus                  = str_repeat(' ', 5);
        $strMsjError                = str_repeat(' ', 4000);
        $strTieneAlgunEquipoEnlazado= str_repeat(' ', 2);
        $strInfoEquipoEncontrado    = str_repeat(' ', 4000);
        try
        {
            $strSql = " BEGIN
                          DB_COMERCIAL.TECNK_SERVICIOS.P_VERIFICA_EQUIPO_ENLAZADO(  :intIdServicioInternet,
                                                                                    :intIdInterfaceElementoIni,
                                                                                    :strTipoEquipoABuscar,
                                                                                    :strModeloEquipoABuscar,
                                                                                    :strProcesoEjecutante,
                                                                                    :strStatus,
                                                                                    :strMsjError,
                                                                                    :strTieneAlgunEquipoEnlazado,
                                                                                    :strInfoEquipoEncontrado,
                                                                                    :strClobTrazaElementos);
                        END;";
            $objConn                = oci_connect($this->strUsrComercial, $this->strPassComercial, $this->strDatabaseDsn, 'AL32UTF8');
            $objStmt                = oci_parse($objConn, $strSql);
            $strClobTrazaElementos  = oci_new_descriptor($objConn,OCI_D_LOB);
            $strClobTrazaElementos->writetemporary($strRespuesta);
            oci_bind_by_name($objStmt, ':intIdServicioInternet', $intIdServicioInternet);
            oci_bind_by_name($objStmt, ':intIdInterfaceElementoIni', $intIdInterfaceElementoIni);
            oci_bind_by_name($objStmt, ':strTipoEquipoABuscar', $strTipoEquipoABuscar);
            oci_bind_by_name($objStmt, ':strModeloEquipoABuscar', $strModeloEquipoABuscar);
            oci_bind_by_name($objStmt, ':strProcesoEjecutante', $strProcesoEjecutante);
            oci_bind_by_name($objStmt, ':strStatus', $strStatus);
            oci_bind_by_name($objStmt, ':strMsjError', $strMsjError);
            oci_bind_by_name($objStmt, ':strTieneAlgunEquipoEnlazado', $strTieneAlgunEquipoEnlazado);
            oci_bind_by_name($objStmt, ':strInfoEquipoEncontrado', $strInfoEquipoEncontrado);
            oci_bind_by_name($objStmt, ':strClobTrazaElementos', $strClobTrazaElementos, -1, OCI_B_CLOB);
            oci_execute($objStmt);
            oci_free_statement($objStmt);
            oci_close($objConn);
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
                $strInfoEquipoEnlazado  = $strInfoEquipoEncontrado;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = 'No se ha podido verificar los equipos enlazados. Por favor comuníquese con Sistemas!';
            }
        }
        catch (\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = 'Ha ocurrido un error inesperado y no se ha podido verificar los equipos enlazados. '
                                      .'Por favor comuníquese con Sistemas!';
            error_log("Error al verificar los equipos enlazados ".$e->getMessage());
        }
        $arrayRespuesta = array("status"                    => $strStatusRespuesta,
                                "mensaje"                   => $strMensajeRespuesta,
                                "tieneAlgunEquipoEnlazado"  => $strTieneAlgunEquipoEnlazado,
                                "infoEquipoEnlazado"        => trim($strInfoEquipoEnlazado));
        return $arrayRespuesta;
    }
    
    /**
     * Función que obtiene la información de un servicio de Internet Protegido y que ha sido creada para 
     * ser usada en lugar de la función verificarPlanesVigentesDiciembre
     *
     * @param $arrayParametros [
     *                              "intIdServicioInternet"         => Id del servicio de Internet
     *                              "arrayNombresTecnicoProducto"   => Arreglo con los nombres técnicos de los productos a buscar 
     *                              "strCodEmpresa"                 => Id de la empresa
     *                              "strVerificaEquipo"             => 'SI' o 'NO' es necesario verificar el equipo asociado al producto a buscar
     *                              "strTipoEquipoABuscar"          => Tipo de equipo parametrizado 
     *                              "strModeloEquipoABuscar"        => Modelo del equipo a buscar
     *                              "strProcesoEjecutante"          => Proceso que invoca la función
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "strProductoEncontrado"         => 'SI' o 'NO' el producto se encuentra en el plan o como servicio adicional
     *                                                                     o como equipo enlazado si es que se ha solicitado buscar a nivel de equipos
     *                                  "strProductoEnPlan"             => 'SI' O 'NO' tiene producto en plan
     *                                  "objProductoEnPlan"             => Objeto del producto incluido en el plan
     *                                  "objDetallePlanProducto"        => Objeto del detalle del plan ue incluye el producto
     *                                  "strServiciosAdicProducto"      => 'SI' O 'NO' el producto está asociado a uno de los servicios 
     *                                                                      adicionales del punto
     *                                  "arrayServiciosAdicProducto"    => arreglo de servicios adicionales que incluyen el producto
     *                                  "strEquipoEnlazado"             => 'SI' o 'NO' el equipos asociado al producto se encuentra enlazado
     *                                  "strInfoEquipoEnlazado"         => Información del equipo enlazado
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 18-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 09-02-2021 Se agrega la obtención del plan del servicio de Internet
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 08-03-2021 Se corrige la obtención del campo id del plan al obtener el plan asociado al servicio de Internet
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 01-01-2022 Se agrega la obtención del parámetro strVerificarProdEnPlan para validar o no si el producto se encuentra dentro del
     *                         plan
     */
    public function verificaProductoPorPunto($arrayParametros)
    {
        $intIdServicioInternet          = $arrayParametros["intIdServicioInternet"];
        $arrayNombresTecnicoProducto    = $arrayParametros["arrayNombresTecnicoProducto"];
        $strCodEmpresa                  = $arrayParametros["strCodEmpresa"];
        $strVerificaEquipo              = $arrayParametros["strVerificaEquipo"];
        $strTipoEquipoABuscar           = $arrayParametros["strTipoEquipoABuscar"];
        $strModeloEquipoABuscar         = $arrayParametros["strModeloEquipoABuscar"];
        $strProcesoEjecutante           = $arrayParametros["strProcesoEjecutante"];
        $strVerificaProdEnPlan          = "";
        $strProductoEnPlan              = "";
        $objProductoEnPlan              = null;
        $objDetallePlanProducto         = null;
        $strServiciosAdicProducto       = "";
        $arrayServiciosAdicProducto     = array();
        $strEquipoEnlazado              = "";
        $strInfoEquipoEnlazado          = "";
        try
        {
            if(!isset($intIdServicioInternet) || empty($intIdServicioInternet))
            {
                throw new \Exception('No se ha enviado el ID del servicio de Internet');
            }
            $objServicioInternet = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioInternet);
            if(!is_object($objServicioInternet))
            {
                throw new \Exception('No se ha podido obtener el objeto asociado al servicio de Internet');
            }
            $intIdPunto         = $objServicioInternet->getPuntoId()->getId();
            
            
            if(isset($arrayParametros["strVerificaProdEnPlan"]) && !empty($arrayParametros["strVerificaProdEnPlan"]))
            {
                $strVerificaProdEnPlan = $arrayParametros["strVerificaProdEnPlan"];
            }
            else
            {
                $strVerificaProdEnPlan = "SI";
            }
            
            if($strVerificaProdEnPlan === "SI")
            {
                $objPlanServicio    = $objServicioInternet->getPlanId();
                if(is_object($objPlanServicio))
                {
                    $intIdPlan  = $objPlanServicio->getId();
                    foreach($arrayNombresTecnicoProducto as $strNombreTecnicoProducto)
                    {
                        $arrayRespuestaVerifProdEnPlan  = $this->obtieneProductoEnPlan(array("intIdPlan"                 => $intIdPlan,
                                                                                             "strNombreTecnicoProducto"  => $strNombreTecnicoProducto
                                                                                      ));
                        if($arrayRespuestaVerifProdEnPlan["strProductoEnPlan"] === "SI")
                        {
                            $strProductoEnPlan      = $arrayRespuestaVerifProdEnPlan["strProductoEnPlan"];
                            $objProductoEnPlan      = $arrayRespuestaVerifProdEnPlan["objProductoEnPlan"];
                            $objDetallePlanProducto = $arrayRespuestaVerifProdEnPlan["objDetallePlanProducto"];
                            $strProductoEncontrado  = "SI";
                        }
                    }
                }
            }
            
            $arrayRespuestaServiciosAdicProducto    = $this->obtenerServiciosPorProducto(array( "intIdPunto"                    => $intIdPunto,
                                                                                                "arrayNombresTecnicoProducto"   => 
                                                                                                $arrayNombresTecnicoProducto,
                                                                                                "strCodEmpresa"                 => $strCodEmpresa));
            if(isset($arrayRespuestaServiciosAdicProducto["intContadorServiciosPorProducto"])
                && !empty($arrayRespuestaServiciosAdicProducto["intContadorServiciosPorProducto"])
                && intval($arrayRespuestaServiciosAdicProducto["intContadorServiciosPorProducto"]) > 0)
            {
                $strServiciosAdicProducto   = "SI";
                $arrayServiciosAdicProducto = $arrayRespuestaServiciosAdicProducto["arrayServiciosPorProducto"];
                $strProductoEncontrado      = "SI";
            }
            
            if(isset($strVerificaEquipo) && !empty($strVerificaEquipo) && $strVerificaEquipo === "SI")
            {
                $arrayRespuestaVerificaEquipo   = $this->verificaEquipoEnlazado(array(  "intIdServicioInternet"     => $intIdServicioInternet,
                                                                                        "strTipoEquipoABuscar"      => $strTipoEquipoABuscar,
                                                                                        "strModeloEquipoABuscar"    => $strModeloEquipoABuscar,
                                                                                        "strProcesoEjecutante"      => $strProcesoEjecutante));
                if(isset($arrayRespuestaVerificaEquipo["infoEquipoEnlazado"]) && !empty($arrayRespuestaVerificaEquipo["infoEquipoEnlazado"]))
                {
                    $strEquipoEnlazado      = "SI";
                    $strInfoEquipoEnlazado  = $arrayRespuestaVerificaEquipo["infoEquipoEnlazado"];
                    $strProductoEncontrado  = "SI";
                }
            }
        }
        catch (\Exception $e)
        {
            error_log("Error al verificar un producto por punto ".$e->getMessage());
        }
        $arrayRespuesta = array("strProductoEncontrado"         => $strProductoEncontrado,
                                "strProductoEnPlan"             => $strProductoEnPlan,
                                "objProductoEnPlan"             => $objProductoEnPlan,
                                "objDetallePlanProducto"        => $objDetallePlanProducto,
                                "strServiciosAdicProducto"      => $strServiciosAdicProducto,
                                "arrayServiciosAdicProducto"    => $arrayServiciosAdicProducto,
                                "strEquipoEnlazado"             => $strEquipoEnlazado,
                                "strInfoEquipoEnlazado"         => $strInfoEquipoEnlazado);
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Función que verifica si un servicio tiene una solicitud de agregar equipo que realiza un cambio de ont por agregar extender
     * 
     * @param $arrayParametros [
     *                          "intIdServicioInternet" => id del servicio de Internet
     *                          "intIdSolicitud"        => id de la solicitud
     *                          "strCodEmpresa"         => id de la empresa
     *                          "strMotivoCambioOnt"    => motivo para ejecutar un cambio de ont
     *                          "strTipoOntNuevo"       => tipo de ont nuevo
     *                          ]
     * 
     * @return array $arrayRespuesta [
     *                                  "status"                                => 'OK' o 'ERROR'
     *                                  "mensaje"                               => Mensaje de error
     *                                  "strCrearSolAgregarEquipoCambioOnt"     => 'SI' o 'NO' se debe crear una solicitud por cambio de ont
     *                                  "strObtieneSolAgregarEquipoCambioOnt"   => 'SI' o 'NO' se obtiene solicitud por cambio de ont
     *                                  "objSolAgregarEquipoCambioOnt"          => objeto de la solicitud por cambio de ont
     *                                  "strEliminaSolsGestionOnt"              => 'SI' o 'NO' se debe eliminar las solicitudes que gestionan el ont
     *                               ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 07-04-2021
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 31-01-2022 Se elimina validación para la característica tipo de ont nuevo y se obtiene el valor de dicha característica
     * 
     */
    public function verificaSolCambioDeOntPorServicioExtender($arrayParametros)
    {
        $intIdSolicitud                             = $arrayParametros["intIdSolicitud"];
        $intIdServicioInternet                      = $arrayParametros["intIdServicioInternet"];
        $strCodEmpresa                              = $arrayParametros["strCodEmpresa"];
        $strMotivoCambioOnt                         = $arrayParametros["strMotivoCambioOnt"];
        $strTipoOntNuevo                            = $arrayParametros["strTipoOntNuevo"];
        $strTipoOntNuevoSolAgregarEquipoCambioOnt   = "";
        $strMensaje                                 = "";
        $strObtieneSolAgregarEquipoCambioOnt        = "NO";
        $objSolAgregarEquipoCambioOnt               = null;
        $strEliminaSolsGestionOnt                   = "NO";
        try
        {
            $objTipoSolAgregarEquipo    = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                            ->findOneBy(array(  'descripcionSolicitud' => 'SOLICITUD AGREGAR EQUIPO',
                                                                                'estado'               => 'Activo'));
            if(!is_object($objTipoSolAgregarEquipo))
            {
                throw new \Exception("No se ha podido obtener el tipo de solicitud agregar equipo");
            }
                                                
            $objCaractMotivoCreaSol = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                        ->findOneBy(array('descripcionCaracteristica' => 'MOTIVO_CREACION_SOLICITUD',
                                                                          'estado'                    => 'Activo'));
            if(!is_object($objCaractMotivoCreaSol))
            {
                throw new \Exception("No se encontró información acerca de característica MOTIVO_CREACION_SOLICITUD");
            }
            
            $objCaractTipoOntNuevo  = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                        ->findOneBy(array('descripcionCaracteristica' => 'TIPO_ONT_NUEVO',
                                                                          'estado'                    => 'Activo'));
            if(!is_object($objCaractTipoOntNuevo))
            {
                throw new \Exception("No se encontró información acerca de característica TIPO_ONT_NUEVO");
            }
            
            $arrayEstadosSolAgregarEquipoCambioOnt  = array();
            $arrayEstadosAbiertosSolAgregarEquipo   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                      ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                            'SOLICITUD AGREGAR EQUIPO',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $strCodEmpresa);
            if(is_array($arrayEstadosAbiertosSolAgregarEquipo) && count($arrayEstadosAbiertosSolAgregarEquipo) > 0)
            {
                foreach($arrayEstadosAbiertosSolAgregarEquipo as $arrayEstadoAbiertoSolAgregarEquipo)
                {   
                    $arrayEstadosSolAgregarEquipoCambioOnt[] = $arrayEstadoAbiertoSolAgregarEquipo['valor3'];
                }
            }
            
            if(!isset($arrayEstadosSolAgregarEquipoCambioOnt) || empty($arrayEstadosSolAgregarEquipoCambioOnt))
            {
                throw new \Exception("No se han podido encontrar los estados permitidos para una solicitud de agregar equipo");
            }
            
            
            if(isset($intIdSolicitud) && !empty($intIdSolicitud))
            {
                $objSolAgregarEquipoCambioOnt   = $this->emComercial
                                                   ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                   ->findOneBy(array('id'               => $intIdSolicitud,
                                                                     'tipoSolicitudId'  => $objTipoSolAgregarEquipo->getId(),
                                                                     'estado'           => $arrayEstadosSolAgregarEquipoCambioOnt));
            }
            else
            {
                if(!isset($intIdServicioInternet) || empty($intIdServicioInternet))
                {
                    throw new \Exception('No se ha enviado el ID del servicio de Internet');
                }

                $objServicioInternet = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioInternet);
                if(!is_object($objServicioInternet))
                {
                    throw new \Exception('No se ha podido obtener el servicio de Internet');
                }
                
                $objSolAgregarEquipoCambioOnt   = $this->emComercial
                                                   ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                   ->findOneBy(array( 'servicioId'        => $objServicioInternet->getId(),
                                                                      'tipoSolicitudId'   => $objTipoSolAgregarEquipo->getId(),
                                                                      'estado'            => $arrayEstadosSolAgregarEquipoCambioOnt));
            }
            
            
            if(is_object($objSolAgregarEquipoCambioOnt))
            {
                if(!isset($strMotivoCambioOnt) || empty($strMotivoCambioOnt))
                {
                    throw new \Exception("No se ha enviado como parámetro el motivo para ejecutar el cambio del ont");
                }
                
                $objSolCaractMotivoCreaSol  = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                ->findOneBy(array("detalleSolicitudId"   => $objSolAgregarEquipoCambioOnt,
                                                                                  "caracteristicaId"     => $objCaractMotivoCreaSol,
                                                                                  "valor"                => $strMotivoCambioOnt,
                                                                                  "estado"               => $arrayEstadosSolAgregarEquipoCambioOnt));

                
                $arrayParamsSolCaractTipoOntNuevo   = array("detalleSolicitudId"=> $objSolAgregarEquipoCambioOnt,
                                                            "caracteristicaId"  => $objCaractTipoOntNuevo,
                                                            "estado"            => $arrayEstadosSolAgregarEquipoCambioOnt);
                if(isset($strTipoOntNuevo) && !empty($strTipoOntNuevo))
                {
                    $arrayParamsSolCaractTipoOntNuevo["valor"] = $strTipoOntNuevo;
                }
                
                $objSolCaractTipoOntNuevo   = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                ->findOneBy($arrayParamsSolCaractTipoOntNuevo);
                
                if(is_object($objSolCaractMotivoCreaSol) && is_object($objSolCaractTipoOntNuevo))
                {
                    /*
                     * Ya existe solicitud válida que permita gestionar el cambio de ont por agregación
                     * de extender
                     */
                    $strObtieneSolAgregarEquipoCambioOnt        = "SI";
                    $strCrearSolAgregarEquipoCambioOnt          = "NO";
                    $strTipoOntNuevoSolAgregarEquipoCambioOnt   = $objSolCaractTipoOntNuevo->getValor();
                }
                else
                {
                    /*
                     * Existe solicitud de agregar equipo asociada al servicio de Internet, pero no con las 
                     * características para el cambio a otro ONT
                     */
                    $strCrearSolAgregarEquipoCambioOnt  = "SI";
                    $strEliminaSolsGestionOnt           = "SI";
                }
            }
            else
            {
                /*
                 * No existe solicitud de agregar equipo asociada al servicio de Internet
                 */
                $strCrearSolAgregarEquipoCambioOnt  = "SI";
                $strEliminaSolsGestionOnt           = "SI";
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuesta = array("status"                                    => $strStatus,
                                "mensaje"                                   => $strMensaje,
                                "strCrearSolAgregarEquipoCambioOnt"         => $strCrearSolAgregarEquipoCambioOnt,
                                "strObtieneSolAgregarEquipoCambioOnt"       => $strObtieneSolAgregarEquipoCambioOnt,
                                "objSolAgregarEquipoCambioOnt"              => $objSolAgregarEquipoCambioOnt,
                                "strEliminaSolsGestionOnt"                  => $strEliminaSolsGestionOnt,
                                "strTipoOntNuevoSolAgregarEquipoCambioOnt"  => $strTipoOntNuevoSolAgregarEquipoCambioOnt);
        return $arrayRespuesta;
    }
    
    /**
     * Función que obtiene la información de un servicio de Internet Protegido y que ha sido creada para 
     * ser usada en lugar de la función verificarPlanesVigentesDiciembre
     *
     * @param $arrayParametros [
     *                              "intIdServicio"     => Id del servicio
     *                              "objServicio"       => Objeto del servicio
     *                              "strCodEmpresa"     => Id de la empresa
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "strPermiteReintentoAntivirus"  => 'OK' o 'ERROR'
     *                                  "strTieneAntivirusEnPlan"       => 'SI' O 'NO' tiene antivirus en plan
     *                                  "strAntivirusActivo"            => 'SI' o 'NO' tiene antivirus Activo
     *                                  "strCorreoAntivirus"            => valor del correo del antivirus
     *                                  "intIdCaractCorreoAntivirus"    => id de la característica de correo asociada al producto
     *                                  "strNuevoAntivirusActivo"       => valor del nuevo antivirus usado
     *                                  "strReintentoNuevoAntivirus"    => 'SI' o 'NO' tiene para hacer reintento
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 18-09-2020
     *
     */
    public function obtieneInfoInternetProtegido($arrayParametros)
    {
        $intIdServicio                      = $arrayParametros["intIdServicio"] ? $arrayParametros["intIdServicio"] : 0;
        $objServicio                        = $arrayParametros["objServicio"];
        $strCodEmpresa                      = $arrayParametros["strCodEmpresa"];
        $strPermiteReintentoAntivirus       = "NO";
        $strProductoAntivirusEnPlan         = "NO";
        $strAntivirusActivo                 = "NO";
        $strNuevoAntivirusActivo            = "NO";
        $strReintentoNuevoAntivirus         = "NO";
        $strCorreoAntivirus                 = "";
        $intIdCaractCorreoAntivirus         = null;
        try
        {
            if((!is_object($objServicio) && $intIdServicio === 0) || empty($strCodEmpresa))
            {
                throw new \Exception("No se han enviado los parámetros necesarios");
            }
            if($intIdServicio > 0)
            {
                $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                if(!is_object($objServicio))
                {
                    throw new \Exception("No se ha podido obtener el servicio con id ".$intIdServicio);
                }
            }

            $objPlanServicio = $objServicio->getPlanId();
            if(is_object($objPlanServicio))
            {
                $arrayRespuestaVerifProdAntivirus   = $this->obtieneProductoEnPlan(array("intIdPlan"                => $objPlanServicio->getId(),
                                                                                         "strDescripcionProducto"   => 'I. PROTEGIDO MULTI PAID',
                                                                                 ));
                $strProductoAntivirusEnPlan         = $arrayRespuestaVerifProdAntivirus["strProductoEnPlan"];
                $objProductoAntivirusEnPlan         = $arrayRespuestaVerifProdAntivirus["objProductoEnPlan"];
                if($strProductoAntivirusEnPlan === "SI" && is_object($objProductoAntivirusEnPlan))
                {
                    $objSpcNumReintentos = $this->getServicioProductoCaracteristica($objServicio, "NUMERO REINTENTOS", 
                                                                                    $objProductoAntivirusEnPlan);
                    if(is_object($objSpcNumReintentos))
                    {
                        $objSpcAntivirus = $this->getServicioProductoCaracteristica($objServicio, "ANTIVIRUS", $objProductoAntivirusEnPlan);
                        if(is_object($objSpcAntivirus))
                        {
                            $strReintentoNuevoAntivirus = 'SI';
                        }
                        else
                        {
                            $strPermiteReintentoAntivirus = 'SI';
                        }

                        $objSpcCorreoAntivirus  = $this->getServicioProductoCaracteristica( $objServicio, "CORREO ELECTRONICO", 
                                                                                            $objProductoAntivirusEnPlan);
                        if(is_object($objSpcCorreoAntivirus))
                        {
                            $strCorreoAntivirus         = $objSpcCorreoAntivirus->getValor();
                            $intIdCaractCorreoAntivirus = $objSpcCorreoAntivirus->getId();
                        }
                    }

                    $objSpcSuscriberId  = $this->getServicioProductoCaracteristica($objServicio, "SUSCRIBER_ID", $objProductoAntivirusEnPlan);
                    if(is_object($objSpcSuscriberId))
                    {
                        $strNuevoAntivirusActivo = "SI";
                    }
                    else
                    {
                        $objSpcSku = $this->getServicioProductoCaracteristica($objServicio, "SKU", $objProductoAntivirusEnPlan);
                        if(is_object($objSpcSku))
                        {
                            $strAntivirusActivo = "SI";
                        }
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            error_log("error al intentar obtener la información del Internet Protegido".$e->getMessage());
        }
        $arrayResultado = array("strPermiteReintentoAntivirus"  => $strPermiteReintentoAntivirus,
                                "strTieneAntivirusEnPlan"       => $strProductoAntivirusEnPlan,
                                "strAntivirusActivo"            => $strAntivirusActivo,
                                "strCorreoAntivirus"            => $strCorreoAntivirus,
                                "intIdCaractCorreoAntivirus"    => $intIdCaractCorreoAntivirus,
                                "strNuevoAntivirusActivo"       => $strNuevoAntivirusActivo,
                                "strReintentoNuevoAntivirus"    => $strReintentoNuevoAntivirus
                                );
        return $arrayResultado;
    }
    
    
    /**
     * Función que cancela o elimina servicios adicionales Dual Band de manera lógica
     *
     * @param $arrayParametros [
     *                              "intIdPunto"                    => Id del punto
     *                              "strNombreTecnicoProducto"      => Nombre técnico del producto
     *                              "intIdServicioUnicoACancelar"   => Id servicio único que no se debe cancelar o eliminar
     *                              "intIdServicioANoCancelar"      => Id servicio que será cancelado
     *                              "strEliminaDataTecnica"         => "SI" o "NO" si es necesario eliminar también el equipo
     *                              "strObsProcesoEjecutante"       => Observación del proceso que ejecuta
     *                              "strUsrCreacion"                => Usuario de creación
     *                              "strIpCreacion"                 => Ip de creación
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => 'OK' o 'ERROR'
     *                                  "mensaje"               => Mensaje de error
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 18-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 14-08-2021 Se agrega parámetro en oci_connect para visualización correcta de historiales con tildes
     * 
     */
    public function cancelaOEliminaServiciosDualBand($arrayParametros)
    {
        $intIdPunto                 = $arrayParametros["intIdPunto"];
        $strNombreTecnicoProducto   = $arrayParametros["strNombreTecnicoProducto"];
        $intIdServicioUnicoACancelar= $arrayParametros["intIdServicioUnicoACancelar"];
        $intIdServicioANoCancelar   = $arrayParametros["intIdServicioANoCancelar"];
        $strEliminaDataTecnica      = $arrayParametros["strEliminaDataTecnica"];
        $strObsProcesoEjecutante    = $arrayParametros["strObsProcesoEjecutante"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strIpCreacion              = $arrayParametros["strIpCreacion"];
        $strStatus                  = str_repeat(' ', 5);
        $strMsjError                = str_repeat(' ', 4000);
        try
        {
            $strSql = " BEGIN
                          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( :intIdPunto,
                                                                                                :strNombreTecnicoProducto,
                                                                                                :intIdServicioUnicoACancelar,
                                                                                                :intIdServicioANoCancelar,
                                                                                                :strEliminaDataTecnica,
                                                                                                :strObsProcesoEjecutante,
                                                                                                :strUsrCreacion,
                                                                                                :strIpCreacion,
                                                                                                :strStatus,
                                                                                                :strMsjError);
                        END;";
            $objConn                = oci_connect($this->strUsrInfraestructura, $this->strPassInfraestructura, $this->strDatabaseDsn, 'AL32UTF8');
            $objStmt                = oci_parse($objConn, $strSql);
            oci_bind_by_name($objStmt, ':intIdPunto', $intIdPunto);
            oci_bind_by_name($objStmt, ':strNombreTecnicoProducto', $strNombreTecnicoProducto);
            oci_bind_by_name($objStmt, ':intIdServicioUnicoACancelar', $intIdServicioUnicoACancelar);
            oci_bind_by_name($objStmt, ':intIdServicioANoCancelar', $intIdServicioANoCancelar);
            oci_bind_by_name($objStmt, ':strEliminaDataTecnica', $strEliminaDataTecnica);
            oci_bind_by_name($objStmt, ':strObsProcesoEjecutante', $strObsProcesoEjecutante);
            oci_bind_by_name($objStmt, ':strUsrCreacion', $strUsrCreacion);
            oci_bind_by_name($objStmt, ':strIpCreacion', $strIpCreacion);
            oci_bind_by_name($objStmt, ':strStatus', $strStatus);
            oci_bind_by_name($objStmt, ':strMsjError', $strMsjError);
            oci_execute($objStmt);
            oci_free_statement($objStmt);
            oci_close($objConn);
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = 'No se ha podido eliminar los servicios Dual Band. Por favor comuníquese con Sistemas!';
            }
        }
        catch (\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = 'Ha ocurrido un error inesperado y no se ha podido eliminar los servicios Dual Band. '
                                      .'Por favor comuníquese con Sistemas!';
            error_log("Error al eliminar los servicios Dual Band ".$e->getMessage());
        }
        $arrayRespuesta = array("status"                => $strStatusRespuesta,
                                "mensaje"               => $strMensajeRespuesta);
        return $arrayRespuesta;
    }
    
    /**
     * Función que elimina las solicitudes relacionadas a la gestión de servicios Dual Band
     *
     * @param $arrayParametros [
     *                              "intIdServicio"         => Id del servicio
     *                              "intIdSolicitudValida"  => Id de la solicitud que no se debe eliminar
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => 'OK' o 'ERROR'
     *                                  "mensaje"               => Mensaje de error
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 18-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 07-02-2022 Se agrega parámetro en oci_connect para visualización correcta de historiales con tildes
     *
     */
    public function eliminaSolicitudesDualBand($arrayParametros)
    {
        $intIdServicio          = $arrayParametros["intIdServicio"];
        $intIdSolicitudValida   = $arrayParametros["intIdSolicitudValida"];
        $strStatus              = str_repeat(' ', 5);
        $strMsjError            = str_repeat(' ', 4000);
        try
        {
            $strSql = " BEGIN
                          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV( :intIdServicio,
                                                                                                :intIdSolicitudValida,
                                                                                                :strStatus,
                                                                                                :strMsjError,
                                                                                                :strClobDetalleSolsEliminadas);
                        END;";
            $objConn                = oci_connect($this->strUsrInfraestructura, $this->strPassInfraestructura, $this->strDatabaseDsn, 'AL32UTF8');
            $objStmt                = oci_parse($objConn, $strSql);
            $strClobDetalleSolsEliminadas  = oci_new_descriptor($objConn,OCI_D_LOB);
            $strClobDetalleSolsEliminadas->writetemporary($strRespuesta);
            oci_bind_by_name($objStmt, ':intIdServicio', $intIdServicio);
            oci_bind_by_name($objStmt, ':intIdSolicitudValida', $intIdSolicitudValida);
            oci_bind_by_name($objStmt, ':strStatus', $strStatus);
            oci_bind_by_name($objStmt, ':strMsjError', $strMsjError);
            oci_bind_by_name($objStmt, ':strClobDetalleSolsEliminadas', $strClobDetalleSolsEliminadas, -1, OCI_B_CLOB);
            oci_execute($objStmt);
            oci_free_statement($objStmt);
            oci_close($objConn);
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = 'No se ha podido eliminar las solicitudes Dual Band. Por favor comuníquese con Sistemas!';
            }
        }
        catch (\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = 'Ha ocurrido un error inesperado y no se ha podido eliminar las solicitudes Dual Band. '
                                      .'Por favor comuníquese con Sistemas!';
            error_log("Error al eliminar las solicitudes Dual Band ".$e->getMessage());
        }
        $arrayRespuesta = array("status"                => $strStatusRespuesta,
                                "mensaje"               => $strMensajeRespuesta);
        return $arrayRespuesta;
    }
    
    /**
     * Función que elimina las solicitudes relacionadas a la gestión del CPE ONT
     *
     * @param $arrayParametros [
     *                              "intIdServicio"         => Id del servicio
     *                              "intIdSolicitudValida"  => Id de la solicitud que no se debe eliminar
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => 'OK' o 'ERROR'
     *                                  "mensaje"               => Mensaje de error
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 18-09-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 07-02-2022 Se agrega parámetro en oci_connect para visualización correcta de historiales con tildes
     *
     */
    public function eliminaSolicitudesGestionaOnt($arrayParametros)
    {
        $intIdServicio          = $arrayParametros["intIdServicio"];
        $intIdSolicitudValida   = $arrayParametros["intIdSolicitudValida"];
        $strStatus              = str_repeat(' ', 5);
        $strMsjError            = str_repeat(' ', 4000);
        try
        {
            $strSql = " BEGIN
                          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_GESTIONA_ONT(   :intIdServicio,
                                                                                                :intIdSolicitudValida,
                                                                                                :strStatus,
                                                                                                :strMsjError,
                                                                                                :strClobDetalleSolsEliminadas);
                        END;";
            $objConn                = oci_connect($this->strUsrInfraestructura, $this->strPassInfraestructura, $this->strDatabaseDsn, 'AL32UTF8');
            $objStmt                = oci_parse($objConn, $strSql);
            $strClobDetalleSolsEliminadas  = oci_new_descriptor($objConn,OCI_D_LOB);
            $strClobDetalleSolsEliminadas->writetemporary($strRespuesta);
            oci_bind_by_name($objStmt, ':intIdServicio', $intIdServicio);
            oci_bind_by_name($objStmt, ':intIdSolicitudValida', $intIdSolicitudValida);
            oci_bind_by_name($objStmt, ':strStatus', $strStatus);
            oci_bind_by_name($objStmt, ':strMsjError', $strMsjError);
            oci_bind_by_name($objStmt, ':strClobDetalleSolsEliminadas', $strClobDetalleSolsEliminadas, -1, OCI_B_CLOB);
            oci_execute($objStmt);
            oci_free_statement($objStmt);
            oci_close($objConn);
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = 'No se ha podido eliminar las solicitudes que gestionan el CPE ONT . Por favor comuníquese con Sistemas!';
            }
        }
        catch (\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = 'Ha ocurrido un error inesperado y no se ha podido eliminar las solicitudes que gestionan el CPE ONT . '
                                      .'Por favor comuníquese con Sistemas!';
            error_log("Error al eliminar las solicitudes que gestionan el CPE ONT ".$e->getMessage());
        }
        $arrayRespuesta = array("status"                => $strStatusRespuesta,
                                "mensaje"               => $strMensajeRespuesta);
        return $arrayRespuesta;
    }
    
    
    /**
     * Función que crea una solicitud automática de cambio de módem inmediato
     *
     * @param $arrayParametros [
     *                              "objServicio"                   => Id del servicio
     *                              "intIdPersonaEmpresaRol"        => Id de la solicitud que no se debe eliminar
     *                              "strIpCreacion"                 => Ip de creación
     *                              "strUsrCreacion"                => Usuario de creación
     *                              "strObservacion"                => Observación de la solicitud
     *                              "strNombreTecnicoProdMotivo"    => Nombre técnico del producto cancelado y que genera la solicitud
     *                              "strProcesoEjecutante"          => Proceso que invoca la función
     *                              "strCodEmpresa"                 => Id de la empresa
     *                              "intPrecioDescuento"            => Precio de descuento de la solicitud a crearse
     *                              "intIdElementoCliente"          => Id del elemento cliente del servicio
     *                              "strTipoDocumento"              => Si es Cortesía 'c' o Facturable 'v'. Si es cortesía no se genera una solicitud
     *                                                                 facturación por retiro de equipo
     *                         ]
     *
     * @return array $arrayRespuesta [
     *                                  "status"                => OK o ERROR
     *                                  "mensaje"               => Mensaje de error
     *                               ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 18-09-2020
     *
     */
    public function creaSolAutomaticaCambioModemInmediatoCpeOnt($arrayParametros)
    {
        $objServicio                = $arrayParametros["objServicio"];
        $intIdPersonaEmpresaRol     = $arrayParametros["intIdPersonaEmpresaRol"];
        $strIpCreacion              = $arrayParametros["strIpCreacion"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strObservacion             = $arrayParametros["strObservacion"];
        $strNombreTecnicoProdMotivo = $arrayParametros["strNombreTecnicoProdMotivo"];
        $strProcesoEjecutante       = $arrayParametros["strProcesoEjecutante"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $intPrecioDescuento         = $arrayParametros["intPrecioDescuento"];
        $intIdElementoCliente       = $arrayParametros["intIdElementoCliente"];
        $strTipoDocumento           = $arrayParametros["strTipoDocumento"];
        $strMensaje                 = "";
        try
        {
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha enviado la información del servicio asociado al cambio de módem inmediato");
            }
            
            if(!isset($intIdPersonaEmpresaRol) || empty($intIdPersonaEmpresaRol))
            {
                throw new \Exception("No se ha enviado la información de la persona en sesión");
            }
            
            if(!isset($intIdElementoCliente) || empty($intIdElementoCliente))
            {
                throw new \Exception("No se ha enviado el elemento cliente");
            }
            
            $objPersonaEmpresaRol   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);
            if(!is_object($objPersonaEmpresaRol))
            {
                throw new \Exception("No se ha podido obtener el objeto del usuario en sesión");
            }
            
            $objDepartamento        = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                                      ->find($objPersonaEmpresaRol->getDepartamentoId());
            if(!is_object($objPersonaEmpresaRol))
            {
                throw new \Exception("No se ha podido obtener el objeto del departamento del usuario en sesión");
            }
            $objPersona             = $objPersonaEmpresaRol->getPersonaId();
            if(!is_object($objPersona))
            {
                throw new \Exception("No se ha podido obtener el objeto de la persona del usuario en sesión");
            }
            $strNombrePersona       = $objPersona->getRazonSocial();
            
            $objTipoSolicitudCambioModemInmediato   = $this->emComercial
                                                           ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                           ->findOneBy(array(   "descripcionSolicitud"    => "SOLICITUD CAMBIO DE MODEM INMEDIATO",
                                                                                "estado"                  => "Activo"));
            if(!is_object($objTipoSolicitudCambioModemInmediato))
            {
                throw new \Exception("No se ha podido obtener la solicitud de cambio de módem inmediato que se desea crear");
            }
            
            $objCaracteristicaElementoCliente       = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                        ->findOneBy(array(  "descripcionCaracteristica" => "ELEMENTO CLIENTE",
                                                                                            "estado"                    => "Activo"));
            if(!is_object($objTipoSolicitudCambioModemInmediato))
            {
                throw new \Exception("No se ha podido obtener la característica asociada al elemento cliente");
            }
            
            $objProceso = $this->emSoporte->getRepository('schemaBundle:AdmiProceso')->findOneByNombreProceso("SOLICITAR CAMBIO EQUIPO");
            if(!is_object($objProceso))
            {
                throw new \Exception("No se ha podido obtener el proceso asociado al cambio de equipo");
            }
            
            if(!isset($strNombreTecnicoProdMotivo) || empty($strNombreTecnicoProdMotivo))
            {
                throw new \Exception("No se ha enviado el motivo para realizar el cambio de de módem inmediato");
            }
            $arrayParamsMotivosSolCambioModemAut    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                      ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                'MOTIVOS_CAMBIO_MODEM_INMEDIATO_AUTOMATICO',
                                                                                $strNombreTecnicoProdMotivo,
                                                                                $strProcesoEjecutante,
                                                                                '',
                                                                                '',
                                                                                $strCodEmpresa);
            $strMotivoSolicitud = "";
            if(isset($arrayParamsMotivosSolCambioModemAut) && !empty($arrayParamsMotivosSolCambioModemAut))
            {
                $strMotivoSolicitud = $arrayParamsMotivosSolCambioModemAut["valor4"];
            }
            if(!isset($strMotivoSolicitud) || empty($strMotivoSolicitud))
            {
                throw new \Exception("No se ha podido obtener el motivo para realizar el cambio de de módem inmediato");
            }
            
            $objMotivo  = $this->emGeneral->getRepository('schemaBundle:AdmiMotivo')->findOneByNombreMotivo($strMotivoSolicitud);
            if(!is_object($objMotivo))
            {
                throw new \Exception("No se ha podido obtener el motivo para crear la solicitud de módem inmediato");
            }
            
            $arrayTareasPorProceso  = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->findTareasActivasByProceso($objProceso->getId());
            if(!isset($arrayTareasPorProceso) || empty($arrayTareasPorProceso))
            {
                throw new \Exception("No se ha podido obtener la tarea asociada al cambio de módem inmediato");
            }
            $objTareaPorProceso = $arrayTareasPorProceso[0];
            $objSolCambioModemInmediato = new InfoDetalleSolicitud();
            $objSolCambioModemInmediato->setMotivoId($objMotivo->getId());                
            $objSolCambioModemInmediato->setServicioId($objServicio);
            $objSolCambioModemInmediato->setTipoSolicitudId($objTipoSolicitudCambioModemInmediato);
            if($strTipoDocumento === 'v')
            {
                $objSolCambioModemInmediato->setTipoDocumento('V');
            }
            elseif($strTipoDocumento ==='c')
            {
                $objSolCambioModemInmediato->setTipoDocumento('C');
            }
            $objSolCambioModemInmediato->setObservacion($strObservacion);
            $objSolCambioModemInmediato->setPrecioDescuento($intPrecioDescuento);
            $objSolCambioModemInmediato->setFeCreacion(new \DateTime('now'));
            $objSolCambioModemInmediato->setUsrCreacion($strUsrCreacion);
            $objSolCambioModemInmediato->setEstado('AsignadoTarea');
            $this->emComercial->persist($objSolCambioModemInmediato);
            $this->emComercial->flush();
            
            $objDetalleSolCaract = new InfoDetalleSolCaract();
            $objDetalleSolCaract->setCaracteristicaId($objCaracteristicaElementoCliente);
            $objDetalleSolCaract->setDetalleSolicitudId($objSolCambioModemInmediato);
            $objDetalleSolCaract->setValor($intIdElementoCliente);
            $objDetalleSolCaract->setEstado("AsignadoTarea");
            $objDetalleSolCaract->setUsrCreacion($strUsrCreacion);
            $objDetalleSolCaract->setFeCreacion(new \DateTime('now'));
            $this->emComercial->persist($objDetalleSolCaract);
            $this->emComercial->flush();
            
            $objSolHistorial= new InfoDetalleSolHist();
            $objSolHistorial->setEstado('AsignadoTarea');
            $objSolHistorial->setDetalleSolicitudId($objSolCambioModemInmediato);
            $objSolHistorial->setUsrCreacion($strUsrCreacion);
            $objSolHistorial->setFeCreacion(new \DateTime('now'));
            $objSolHistorial->setIpCreacion($strIpCreacion);
            $objSolHistorial->setMotivoId($objMotivo->getId());
            $objSolHistorial->setObservacion($strObservacion);
            $this->emComercial->persist($objSolHistorial);
            $this->emComercial->flush();
            
            $objDetalle = new InfoDetalle();
            $objDetalle->setTareaId($objTareaPorProceso);
            $objDetalle->setPesoPresupuestado(0);
            $objDetalle->setValorPresupuestado(0);
            $objDetalle->setDetalleSolicitudId($objSolCambioModemInmediato->getId());
            $objDetalle->setUsrCreacion($strUsrCreacion);
            $objDetalle->setFeCreacion(new \DateTime('now'));
            $objDetalle->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objDetalle);
            $this->emSoporte->flush();
            
            if(empty($strNombrePersona))
            {
                $strNombrePersona = $objPersona->getNombres()." ".$objPersona->getApellidos();
            }
            //grabamos soporte.info_detalle_asignacion
            $objDetalleAsignacion = new InfoDetalleAsignacion();
            $objDetalleAsignacion->setDetalleId($objDetalle);
            $objDetalleAsignacion->setAsignadoId($objDepartamento->getId());
            $objDetalleAsignacion->setAsignadoNombre($objDepartamento->getNombreDepartamento());
            $objDetalleAsignacion->setRefAsignadoId($objPersona->getId());
            $objDetalleAsignacion->setRefAsignadoNombre($strNombrePersona);
            $objDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRol->getId());
            $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
            $objDetalleAsignacion->setUsrCreacion($strUsrCreacion);
            $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $objDetalleAsignacion->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objDetalleAsignacion);
            $this->emSoporte->flush();
            $strStatus = "OK";
            
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        
        $arrayResultado = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayResultado;
    }
    
    /**
     * Función que sirve para consumir un servicio con el cual obtenemos
     * la potencia de un equipo en el cliente.
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0, 11-02-2020
     *
     */
    public function getPotenciaEnlace($arrayBodyrequest)
    {
        $arrayRest                  = array();
        $arrayRest[CURLOPT_TIMEOUT] = $this->intWsPotenciaServicio;

        $arrayResponseWS            = $this->serviceRestClient->postJSON($this->rutaWebServiceRDA, $arrayBodyrequest, $arrayRest);

        return $arrayResponseWS;

    }
    /**
     * Funcion que sirve para obtener datos (ip, historial, ubicacion) de un elemento
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 31-12-2014
     * @version 1.1 14-01-2015 John Vera Nodo cliente
     * @version 1.2 14-01-2015 John Vera orden historial
     * @version 1.3 02-08-2016 Allan Suarez <arsuarez@telconet.ec> - Se agrega anillo al detalle a mostrar
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 25-19-2018 Se corrige la validación de la empresa para obtener correctamente la jurisdicción
     *
     */
    public function obtenerDatosElemento($id, $empresaId)
    {
        $ipElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId" => $id));
        $entityHistorial = $this->emInfraestructura->getRepository('schemaBundle:InfoHistorialElemento')->findBy(array("elementoId" => $id), array('feCreacion' => 'DESC'));

        $arrayHistorial = array();
        if($entityHistorial)
        {
            $intIndice = 0;
            foreach($entityHistorial as $objHistorial)
            {
                $arrayHistorial[$intIndice]['estado'] = $objHistorial->getEstadoElemento();
                $arrayHistorial[$intIndice]['fe_creacion'] = strval(date_format($objHistorial->getFeCreacion(), "d/m/Y G:i"));
                $arrayHistorial[$intIndice]['usr_creacion'] = $objHistorial->getUsrCreacion();
                $arrayHistorial[$intIndice]['observacion'] = $objHistorial->getObservacion();

                $intIndice++;
            }
        }
        $empresaUbicacion = $this->emInfraestructura->getRepository('schemaBundle:InfoEmpresaElementoUbica')->findOneBy(array("elementoId" => $id));
        $ubicacion = $this->emInfraestructura->find('schemaBundle:InfoUbicacion', $empresaUbicacion->getUbicacionId()->getId());

        $cantonJurisdiccion = $this->emInfraestructura->getRepository('schemaBundle:AdmiCantonJurisdiccion')
                ->findBy(array("cantonId" => $ubicacion->getParroquiaId()->getCantonId()->getId()));
        for($i = 0; $i < count($cantonJurisdiccion); $i++)
        {
            $jurisdiccion = $this->emInfraestructura->find('schemaBundle:AdmiJurisdiccion', $cantonJurisdiccion[$i]->getJurisdiccionId());
            $oficina = $this->emInfraestructura->find('schemaBundle:InfoOficinaGrupo', $jurisdiccion->getOficinaId());
            if($oficina->getEmpresaId()->getId() == $empresaId)
            {
                break;
            }
        }

        $objRelacionElementoOld = $this->emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                ->findOneBy(array('elementoIdB' => $id,
            'estado' => 'Activo'));
        $nombreNodoCliente = '';
        if($objRelacionElementoOld)
        {
            $objNodoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                    ->findOneById($objRelacionElementoOld->getElementoIdA());
            $nombreNodoCliente = $objNodoCliente->getNombreElemento();
        }

        //Se obtiene la información del anillo a la cual pertenece el switch
        $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                ->findOneBy(array('elementoId' => $id,
            'detalleNombre' => 'ANILLO',
            'estado' => 'Activo')
        );
        $arrayDatos = array(
            'ipElemento' => $ipElemento,
            'historialElemento' => $arrayHistorial,
            'ubicacion' => $ubicacion,
            'jurisdiccion' => $jurisdiccion,
            'oficina' => $oficina,
            'nodoCliente' => $nombreNodoCliente,
            'anillo' => $objDetalleElemento ? $objDetalleElemento->getDetalleValor() : 'N/A'
        );

        return $arrayDatos;
    }

    /**
     * Funcion que sirve para obtener las caracteristicas de un olt, necesarias
     * para las activaciones, migraciones, cancelaciones, etc
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 31-03-2015
     */
    public function getCaracteristicasOlt($accionScript, $accionComando, $elementoOlt)
    {
        //obtener script
        $scriptArray = $this->obtenerArregloScript($accionScript, $elementoOlt->getModeloElementoId());
        $idDocumento = $scriptArray[0]->idDocumento;

        //se recupera parametro para ejecucion de jar
        $parametroPathTelcos = $this->container->getParameter('path_telcos');
        $parametroPathParametros = $this->container->getParameter('path_parameters');

        //se ejecuta script
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $parametroPathTelcos . "telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '" .
                $this->container->getParameter('host') . "' '" . $accionComando . "' '" .
                $elementoOlt->getId() . "' 'sistemas' 'puerto' '" . $idDocumento . "' '' '" . $parametroPathParametros . "'";

        $salida = shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJson = json_decode($jsonObj);

        return $resultadJson;
    }

    /**
     * Funcion que sirve para ejecutar comandos de creacion, modificacion y eliminacion
     * de clientes en el arbol del ldap
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 10-03-2015
     * @version 1.0 03-09-2015 modificado javera
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 02-01-2018 Se agrega parámetro para distinguir la empresa a la que pertenece el servicio del cliente
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 01-08-2018 Se agrega validación para no realizar ejecución de jar en ambientes de test y desarrollo
     * @since 1.1
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 03-10-2019 Se agrega retorno de respuesta por default cuando la ejecución del ldap esté con valor 'N'
     * @since 1.2
     */
    public function ejecutarComandoLdap($strAccion, $intIdServicio, $strPrefijoEmpresa = 'MD')
    {
        $mixResultadJson = "";
        if ($this->strLdapExecute === "S")
        {
            $strComando =   "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos .
                    "telcos/src/telconet/tecnicoBundle/batch/ldapsync.jar '" .
                    $strAccion . "' '" . $intIdServicio . "' '" . $strPrefijoEmpresa . "'";
            $strSalida          = shell_exec($strComando);
            $mixPos             = strpos($strSalida, "{");
            $strJsonObj         = substr($strSalida, $mixPos);
            $mixResultadJson    = json_decode($strJsonObj);
        }
        else
        {
            $strJsonObj         = '{"status":"OK","mensaje":"Sin Ejecución de Ldap"}';
            $mixResultadJson    = json_decode($strJsonObj);
        }
        return $mixResultadJson;
    }

    /**
     * Funcion que sirve para ejecutar el comando en el dslam
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 25-11-2014
     */
    public function ejecutarComandoDslam($idDocumento, $usuario, $protocolo, $idElemento, $datos)
    {
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/ttco_ejecucion.jar '" . $this->host . "' '" .
                $idDocumento . "' '" . $usuario . "' '" . $protocolo . "' '" . $idElemento . "' '" . $datos . "' '" . $this->pathParameters . "'";
        $salida = shell_exec($comando);

        return $salida;
    }

    /**
     * Funcion que sirve para ejecutar el comando en la radio base
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 25-11-2014
     */
    public function ejecutarComandoRadio($idDocumento, $usuario, $tipo, $idElemento, $datos)
    {
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/ttco_radios.jar '" . $this->host . "' '" .
                $idDocumento . "' '" . $usuario . "' '" . $tipo . "' '" . $idElemento . "' '" . $datos . "' '" . $this->pathParameters . "'";
        $salida = shell_exec($comando);

        return $salida;
    }

    public function obtenerArregloScript($accion, $modeloElemento)
    {
        //OBTENER EL SCRIPT
        $objJson = $this->emInfraestructura
                ->getRepository('schemaBundle:AdmiModeloElemento')
                ->generarJsonDocumentoPorModelo($accion . "" . $modeloElemento->getNombreModeloElemento(), $modeloElemento->getId(), $this->emSoporte, $this->emComunicacion, $this->emSeguridad, $this->emInfraestructura);
        $posicion = strpos($objJson, "{");
        $respuestaDocumentoPorModelo = substr($objJson, $posicion);
        $outDocumentoPorModelo = json_decode($respuestaDocumentoPorModelo);
        $arr = $outDocumentoPorModelo->encontrados;

        return $arr;
    }

    public function obtenerArregloScriptGeneral($accion, $modeloElemento)
    {
        //OBTENER EL SCRIPT
        $objJson = $this->emInfraestructura
                ->getRepository('schemaBundle:AdmiModeloElemento')
                ->generarJsonDocumentoPorModelo($accion, $modeloElemento->getId(), $this->emSoporte, $this->emComunicacion, $this->emSeguridad, $this->emInfraestructura);
        $posicion = strpos($objJson, "{");
        $respuestaDocumentoPorModelo = substr($objJson, $posicion);
        $outDocumentoPorModelo = json_decode($respuestaDocumentoPorModelo);

        $arr = $outDocumentoPorModelo->encontrados;

        return $arr;
    }

    public function verificarTipoOrden($tipoOrden, $servicio, $servicioTecnico, $idProducto, $interfaceElementoId)
    {
        $emComercial = $this->get('doctrine')->getManager('telconet');
        $flagTipoOrden = 0;
        if($tipoOrden == 'R')
        {
            $status = "OK";
            $flagTipoOrden = 1;
        }
        else if($tipoOrden == 'T')
        {
            $caracteristicaTraslado = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array("descripcionCaracteristica" => "TRASLADO", "estado" => "Activo"));
            $productoCaracteristicaTraslado = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array("productoId" => $idProducto, "caracteristicaId" => $caracteristicaTraslado->getId()));
            $servicioProductoCaracteristicaTraslado = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->findOneBy(array("servicioId" => $servicio->getId(), "productoCaracterisiticaId" => $productoCaracteristicaTraslado->getId()));

            $servicioAnteriorId = "";
            if($servicioProductoCaracteristicaTraslado != null)
            {
                $servicioAnteriorId = $servicioProductoCaracteristicaTraslado->getValor();
            }

            $servicioAnterior = $emComercial->getRepository('schemaBundle:InfoServicio')->find($servicioAnteriorId);
            $servicioTecnicoAnterior = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array("servicioId" => $servicioAnterior->getId()));

            if($servicioTecnico->getElementoId() != $servicioTecnicoAnterior->getElementoId() || $servicioTecnico->getInterfaceElementoId() != $servicioTecnicoAnterior->getInterfaceElementoId() || $servicioTecnicoAnterior->getInterfaceElementoId() != $interfaceElementoId)
            {
                //RECURSOS NUEVOS
                $flagTipoOrden = 3;
            }
            else
            {
                //MISMOS RECURSOS
                $flagTipoOrden = 2;
                $status = "OK";
            }
        }


        return $flagTipoOrden;
    }

    /**
     * Funcion que sirve para ingresar una caracteristica a un elemento
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 15-12-2015
     * @param $objElemento, $strDetalleNombre, $strDetalleDescripcion, $strDetalleValor, $strUsrCreacion, $strIpCreacion
     * @return $objInfoDetalleElemento
     */
    public function ingresarDetalleElemento($objElemento, $strDetalleNombre, $strDetalleDescripcion, $strDetalleValor, $strUsrCreacion, $strIpCreacion)
    {
        $objInfoDetalleElemento = new InfoDetalleElemento();
        $objInfoDetalleElemento->setElementoId($objElemento->getId());
        $objInfoDetalleElemento->setDetalleNombre($strDetalleNombre);
        $objInfoDetalleElemento->setDetalleDescripcion($strDetalleDescripcion);
        $objInfoDetalleElemento->setDetalleValor($strDetalleValor);
        $objInfoDetalleElemento->setEstado("Activo");
        $objInfoDetalleElemento->setUsrCreacion($strUsrCreacion);
        $objInfoDetalleElemento->setIpCreacion($strIpCreacion);
        $objInfoDetalleElemento->setFeCreacion(new \DateTime('now'));
        $this->emInfraestructura->persist($objInfoDetalleElemento);
        $this->emInfraestructura->flush();

        return $objInfoDetalleElemento;
    }

    /**
     * Funcion que sirve para eliminar las caracteristicas antiguas de l3mpls, internet mpls, internet dedicado
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 10-05-2016
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 03-04-2020 - Se agregó la bandera de no eliminar el protocolo de enrutamiento
     *
     * @param $arrayPeticiones [idServicio]
     */
    public function eliminarDatosCaracteristicas($arrayPeticiones)
    {
        $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayPeticiones['idServicio']);

        //vlan
        $objSpcVlan = $this->getServicioProductoCaracteristica($objServicio, "VLAN", $objServicio->getProductoId());
        if(is_object($objSpcVlan))
        {
            $this->setEstadoServicioProductoCaracteristica($objSpcVlan, "Eliminado");
        }

        //vrf
        $objSpcVrf = $this->getServicioProductoCaracteristica($objServicio, "VRF", $objServicio->getProductoId());
        if(is_object($objSpcVrf))
        {
            $this->setEstadoServicioProductoCaracteristica($objSpcVrf, "Eliminado");
        }

        //bandera para eliminar el protocolo enrutamiento
        $booleanProtoEnru = true;
        if( isset($arrayPeticiones['booleanProtoEnru']) )
        {
            $booleanProtoEnru = $arrayPeticiones['booleanProtoEnru'];
        }
        //protocolo enrutamiento
        $objSpcProtocolo = $this->getServicioProductoCaracteristica($objServicio, "PROTOCOLO_ENRUTAMIENTO", $objServicio->getProductoId());
        if( is_object($objSpcProtocolo) && $booleanProtoEnru )
        {
            $this->setEstadoServicioProductoCaracteristica($objSpcProtocolo, "Eliminado");
        }

        //default gw
        $objSpcDefault = $this->getServicioProductoCaracteristica($objServicio, "DEFAULT_GATEWAY", $objServicio->getProductoId());
        if(is_object($objSpcDefault))
        {
            $this->setEstadoServicioProductoCaracteristica($objSpcDefault, "Eliminado");
        }
    }

    /**
     * Funcion que insertar un registro en la info servicio producto caracteristica
     *
     * @author John Vera <javera@telconet.ec>
     */
    public function ingresarServicioProductoCaracteristica($servicio, $producto, $caracteristica, $valor, $usrCreacion)
    {
        $carac = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array("descripcionCaracteristica" => $caracteristica, "estado" => "Activo"));
        if(is_object($carac) && is_object($producto))
        {
            $prodCarac = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                    ->findOneBy(array("productoId" => $producto->getId(), "caracteristicaId" => $carac->getId(), "estado" => "Activo"));
            if(is_object($prodCarac))
            {
                $servicioProductoCaracteristica = new InfoServicioProdCaract();
                $servicioProductoCaracteristica->setServicioId($servicio->getId());
                $servicioProductoCaracteristica->setProductoCaracterisiticaId($prodCarac->getId());
                $servicioProductoCaracteristica->setValor($valor);
                $servicioProductoCaracteristica->setEstado("Activo");
                $servicioProductoCaracteristica->setUsrCreacion($usrCreacion);
                $servicioProductoCaracteristica->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($servicioProductoCaracteristica);
                $this->emComercial->flush();
            }
        }

        return $servicioProductoCaracteristica;
    }

    /**
     * Método que actualiza el valor de una característica, si no existe la va a crear.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 08-04-2021 | Version Inicial
     *
     */
    public function actualizarServicioProductoCaracteristica($arrayParams)
    {
        $objServicio = isset($arrayParams['objServicio']) ? $arrayParams['objServicio'] : null;
        $objProducto = isset($arrayParams['objProducto']) ? $arrayParams['objProducto'] : null;
        $strCaracteristica = isset($arrayParams['strCaracteristica']) ? $arrayParams['strCaracteristica'] : null;
        $strValor = isset($arrayParams['strValor']) ? $arrayParams['strValor'] : null;
        $strUsrCreacion = isset($arrayParams['strUsrCreacion']) ? $arrayParams['strUsrCreacion'] : null;

        /*Realizamos la busqueda el objeto caracteristica.*/
        $objAdmiCaract = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                   ->findOneBy(array(
                                       "descripcionCaracteristica" => $strCaracteristica,
                                       "estado" => "Activo"
                                   ));

        if(is_object($objAdmiCaract) && is_object($objProducto))
        {
            $objAdmProdCarct = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                           ->findOneBy(array(
                                               "productoId" => $objProducto->getId(),
                                               "caracteristicaId" => $objAdmiCaract->getId(),
                                               "estado" => "Activo"
                                           ));

            if(is_object($objAdmProdCarct))
            {
                $objServProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                    ->findOneBy(array(
                        'servicioId'=>$objServicio->getId(),
                        'productoCaracterisiticaId'=>$objAdmProdCarct->getId(),
                        'estado' =>'Activo'
                    ));

                if (is_object($objServProdCaract))
                {
                    $objServProdCaract->setValor($strValor);
                }
                else
                {
                    $objServProdCaract = new InfoServicioProdCaract();
                    $objServProdCaract->setServicioId($objServicio->getId());
                    $objServProdCaract->setProductoCaracterisiticaId($objAdmProdCarct->getId());
                    $objServProdCaract->setValor($strValor);
                    $objServProdCaract->setEstado("Activo");
                    $objServProdCaract->setUsrCreacion($strUsrCreacion);
                    $objServProdCaract->setFeCreacion(new \DateTime('now'));
                }
                $this->emComercial->persist($objServProdCaract);
                $this->emComercial->flush();
            }
        }

        return isset($objServProdCaract) ? $objServProdCaract : null;
    }

    /**
     * Función que inserta un registro en la info servicio producto caracteristica
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 16-08-2018
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.1 25-04-2019 - Se modifica método para validar si es llamado por procesos de hosting
     *                            cuando $strEsMaquinaVirtual= 'S' validará si existe
     */
    public function insertServicioProductoCaracteristica($arrayParametros)
    {

        $objServicio            = $arrayParametros['objServicio'];
        $objProducto            = $arrayParametros['objProducto'];
        $strCaract              = $arrayParametros['strCaract'];
        $strValor               = $arrayParametros['strValor'];
        $strEstado              = $arrayParametros['strEstado'];
        $strUser                = $arrayParametros['strUser'];
        $intRefId               = $arrayParametros['intRefId'];
        $strEsMaquinaVirtual    = $arrayParametros['strEsMaquinaVirtual'];

        $objCaract = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array("descripcionCaracteristica" => $strCaract,
                                                         "estado"                    => "Activo"));
        if(is_object($objCaract) && is_object($objProducto))
        {
            $objProdCarac =   $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array(  "productoId"        => $objProducto->getId(),
                                                                    "caracteristicaId"  => $objCaract->getId(),
                                                                    "estado"            => "Activo"));
            if(is_object($objProdCarac))
            {
                $objServicioProductoCaracteristica = new InfoServicioProdCaract();

                if ($strEsMaquinaVirtual == 'S')
                {
                    $arraySerProdCaract = $this->emComercial
                                              ->getRepository('schemaBundle:InfoServicioProdCaract')
                                              ->findOneBy(array("servicioId"                => $objServicio->getId(),
                                                                "productoCaracterisiticaId" => $objProdCarac->getId(),
                                                                "refServicioProdCaractId"   => $intRefId,
                                                                "estado"                    => "Activo"));
                    $objSerProdCaract=$arraySerProdCaract;
                    if (is_object($objSerProdCaract))
                    {
                        $objServicioProductoCaracteristica = $objSerProdCaract;
                    }
                }

                $objServicioProductoCaracteristica->setServicioId($objServicio->getId());
                $objServicioProductoCaracteristica->setProductoCaracterisiticaId($objProdCarac->getId());
                $objServicioProductoCaracteristica->setValor($strValor);
                if($strEstado)
                {
                    $objServicioProductoCaracteristica->setEstado($strEstado);
                }
                else
                {
                    $objServicioProductoCaracteristica->setEstado("Activo");
                }
                $objServicioProductoCaracteristica->setUsrCreacion($strUser);
                $objServicioProductoCaracteristica->setFeCreacion(new \DateTime('now'));

                if($intRefId > 0)
                {
                    $objServicioProductoCaracteristica->setRefServicioProdCaractId($intRefId);
                }

                $this->emComercial->persist($objServicioProductoCaracteristica);
                $this->emComercial->flush();

            }
        }

        return $objServicioProductoCaracteristica;
    }

    /**
     *  Función que inserta registros de TNG en la info servicio producto caracteristica y en la
     *  admi producto carateristica $intIdServicioTng, $strUsrCreacion, $intIdProducto,
     *
     * @author Jesús Banchen <jbanchen@telconet.ec>
     * @version 1.0 27-03-2019
     *
     * parametro de entrada $arrayPeticionesTng: contiene los valores a a insertar del formuario.
     * paramtro de salida $arrayRespuesta: estatus y mensaje;
     */
    public function insertDatosTngInfSerProCart( $arrayPeticionesTng)
    {

        $arrayDatosCaracteristicaId = array(
                                            "COD CONEXION UPSTREAM",
                                            "EQUIPO CONEXION BACKBONE",
                                            "SID EQUIPO CONEXION UPSTREAM",
                                            "PUERTO",
                                            "TIPO TRANSPORTE UPSTREAM",
                                            "PROVEEDOR TRANSPORTE UPSTREAM",
                                            "ID SERVICIO RED TRANSPORTE",
                                            "IDENTIFICADOR RED TRANSPORTE",
                                            "FECHA INSTALACION(RFS)",
                                            "PLAZO(MESES)",
                                            "FECHA VENCE CONTRATO",
                                            "CPE SERIAL NUMBER",
                                            "CONECTOR TYPE",
                                            "ESQUEMA",
                                            "IP WAN GATEWAY",
                                            "IP WAN CPE",
                                            "IP LAN CPE",
                                            "IP LAN CLIENTE",
                                            "VRF TNG",
                                            "ASN",
                                            "MONITOREO EXTERNO (SI/NO)"
        );

        $arrayParametrosTng=array(
                                 'codConexionUpStream'           => $arrayPeticionesTng['codConexionUpStream'],
                                 'equipoConexionUpstream'        => $arrayPeticionesTng['equipoConexionUpstream'],
                                 'sidquipoUpstream'              => $arrayPeticionesTng['sidquipoUpstream'],
                                 'puerto'                        => $arrayPeticionesTng['puerto'],
                                 'tipoTransporte'                => $arrayPeticionesTng['tipoTransporte'],
                                 'provTransUpstream'             => $arrayPeticionesTng['provTransUpstream'],
                                 'idServicioRedTransp'           => $arrayPeticionesTng['idServicioRedTransp'],
                                 'idenRedtransporte'             => $arrayPeticionesTng['idenRedtransporte'],
                                 'fecha'                         => $arrayPeticionesTng['fecha'],
                                 'plazo'                         => $arrayPeticionesTng['plazo'],
                                 'fVenceContrato'                => $arrayPeticionesTng['fVenceContrato'],
                                 'cpeSerialNumber'               => $arrayPeticionesTng['cpeSerialNumber'],
                                 'connectorType'                 => $arrayPeticionesTng['connectorType'],
                                 'esquema'                       => $arrayPeticionesTng['esquema'],
                                 'iPWanGateway'                  => $arrayPeticionesTng['iPWanGateway'],
                                 'ipWanCPE'                      => $arrayPeticionesTng['ipWanCPE'],
                                 'ipLanCPE'                      => $arrayPeticionesTng['ipLanCPE'],
                                 'iPlanCliente'                  => $arrayPeticionesTng['iPlanCliente'],
                                 'vRF'                           => $arrayPeticionesTng['vRF'],
                                 'aSN'                           => $arrayPeticionesTng['aSN'],
                                 'monitoreoExterno'              => $arrayPeticionesTng['monitoreoExterno']

        )   ;


        $intIdProducto    = $arrayPeticionesTng['idProducto'];
        $intIdServicioTng = $arrayPeticionesTng['idServicio'];
        $strUsrCreacion   = $arrayPeticionesTng['usrCreacion'];
        $strIpCreacion    = $arrayPeticionesTng['ipCreacion'];
        $strActTng        = $arrayPeticionesTng['strActivarControl'];
        $strObservacionActivarServicio = $arrayPeticionesTng['observacionActivarServicio'];

        $objIdCaracteristicas = array();
        $intIndiceCuatro = 0;

        try
        {

            $this->emComercial->getConnection()->beginTransaction();

            if($strActTng == "Backlog")
            {
            $objServicio= $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioTng);

            $objServicio->setEstado("Backlog");
            $this->emComercial->persist($objServicio);
            $this->emComercial->flush();

            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion("El servicio se encuentra en proceso de prueba para la activación. "
                                                  .$strObservacionActivarServicio);
            $objServicioHistorial->setEstado("Backlog");
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioHistorial);
            $this->emComercial->flush();

            }

            for ($intIndice = 0; $intIndice < count($arrayDatosCaracteristicaId); $intIndice++)
            {
                $objCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')->
                        findOneByDescripcionCaracteristica($arrayDatosCaracteristicaId[$intIndice]);

                $objIdCaracteristicas[$intIndice] = $objCaracteristica->getId();
            }

            for ($intIndiceTres = 0; $intIndiceTres < count($objIdCaracteristicas); $intIndiceTres++)
            {
                $objProdCarac = $this->emComercial
                        ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                        ->findOneBy(array("productoId"       => $intIdProducto,
                                          "caracteristicaId" => $objIdCaracteristicas[$intIndiceTres],
                                          "estado"           => "Activo"));
                $objIdAdmiProCart[$intIndiceTres] = $objProdCarac->getId();
            }

            foreach ($arrayParametrosTng as $objInfoDetalletng)
            {
                $objServicioProductoCaracteristica = new InfoServicioProdCaract();
                $objServicioProductoCaracteristica->setServicioId($intIdServicioTng);
                $objServicioProductoCaracteristica->setProductoCaracterisiticaId($objIdAdmiProCart[$intIndiceCuatro]);
                $objServicioProductoCaracteristica->setValor($objInfoDetalletng);
                $objServicioProductoCaracteristica->setEstado("Activo");
                $objServicioProductoCaracteristica->setUsrCreacion($strUsrCreacion);
                $objServicioProductoCaracteristica->setFeCreacion(new \DateTime('now'));
                $intIndiceCuatro++;
                $this->emComercial->persist($objServicioProductoCaracteristica);
                $this->emComercial->flush();
            }

            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->commit();
            }
            $this->emComercial->getConnection()->close();

            $strStatus = "OK";
            $strMensaje = "OK";
        }
        catch (\Exception $ex)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
                $this->emComercial->getConnection()->close();
            }
            $this->utilService->insertError('Telcos+',
                                                'InfoServicioTecnicoService->insertDatosTngInfSerProCart',
                                                $ex->getMessage(),
                                                $strUsrCreacion,
                                                $strIpCreacion);
            $strStatus = "ERROR";
            $strMensaje = "Error en el procesamiento de los datos..";
        }

        $arrayRespuesta[] = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRespuesta;
    }


    /**
     *  Función que actualiza registros en la info servicio producto caracteristica para la empresa TNG ,
     *
     * Descripcion  de parametros
     *
     * $arrayPeticionesTng: Contiene los valores obtenidos desde panatalla .
     *
     * @author Jesús Banchen <jbanchen@telconet.ec>
     * @version 1.0 27-03-2019
     *
     */
    public function updateDatosTngInfSerProCart($arrayPeticionesTng)
    {

        $arrayDatosCaracteristicaId2 = array(
                                            "COD CONEXION UPSTREAM" => "COD CONEXION UPSTREAM",
                                            "EQUIPO CONEXION BACKBONE" =>"EQUIPO CONEXION BACKBONE",
                                            "SID EQUIPO CONEXION UPSTREAM" =>"SID EQUIPO CONEXION UPSTREAM",
                                            "PUERTO" => "PUERTO",
                                            "TIPO TRANSPORTE UPSTREAM" => "TIPO TRANSPORTE UPSTREAM",
                                            "PROVEEDOR TRANSPORTE UPSTREAM" => "PROVEEDOR TRANSPORTE UPSTREAM",
                                            "ID SERVICIO RED TRANSPORTE"=>"ID SERVICIO RED TRANSPORTE",
                                            "IDENTIFICADOR RED TRANSPORTE" =>"IDENTIFICADOR RED TRANSPORTE",
                                            "FECHA INSTALACION(RFS)" => "FECHA INSTALACION(RFS)",
                                            "PLAZO(MESES)" => "PLAZO(MESES)",
                                            "FECHA VENCE CONTRATO" => "FECHA VENCE CONTRATO",
                                            "CPE SERIAL NUMBER" => "CPE SERIAL NUMBER",
                                            "CONECTOR TYPE"=>"CONECTOR TYPE",
                                            "ESQUEMA"=>"ESQUEMA",
                                            "IP WAN GATEWAY"=>"IP WAN GATEWAY",
                                            "IP WAN CPE"=>"IP WAN CPE",
                                            "IP LAN CPE"=>"IP LAN CPE",
                                            "IP LAN CLIENTE"=>"IP LAN CLIENTE",
                                            "VRF TNG"=>"VRF TNG",
                                            "ASN"=>"ASN",
                                            "MONITOREO EXTERNO (SI/NO)"=>"MONITOREO EXTERNO (SI/NO)"
        );

        $arrayParametrosTng = array(
                                    'codConexionUpStream' => $arrayPeticionesTng['codConexionUpStream'],
                                    'equipoConexionUpstream' => $arrayPeticionesTng['equipoConexionUpstream'],
                                    'sidquipoUpstream' => $arrayPeticionesTng['sidquipoUpstream'],
                                    'puerto' => $arrayPeticionesTng['puerto'],
                                    'tipoTransporte' => $arrayPeticionesTng['tipoTransporte'],
                                    'provTransUpstream' => $arrayPeticionesTng['provTransUpstream'],
                                    'idServicioRedTransp' => $arrayPeticionesTng['idServicioRedTransp'],
                                    'idenRedtransporte' => $arrayPeticionesTng['idenRedtransporte'],
                                    'fecha' => $arrayPeticionesTng['fecha'],
                                    'plazo' => $arrayPeticionesTng['plazo'],
                                    'fVenceContrato' => $arrayPeticionesTng['fVenceContrato'],
                                    'cpeSerialNumber' => $arrayPeticionesTng['cpeSerialNumber'],
                                    'connectorType' => $arrayPeticionesTng['connectorType'],
                                    'esquema' => $arrayPeticionesTng['esquema'],
                                    'iPWanGateway' => $arrayPeticionesTng['iPWanGateway'],
                                    'ipWanCPE' => $arrayPeticionesTng['ipWanCPE'],
                                    'ipLanCPE' => $arrayPeticionesTng['ipLanCPE'],
                                    'iPlanCliente' => $arrayPeticionesTng['iPlanCliente'],
                                    'vRF' => $arrayPeticionesTng['vRF'],
                                    'aSN' => $arrayPeticionesTng['aSN'],
                                    'monitoreoExterno' => $arrayPeticionesTng['monitoreoExterno']
                );


        $intIdProducto        = $arrayPeticionesTng['idProducto'];
        $intIdServicioTng     = $arrayPeticionesTng['idServicio'];
        $strUsrCreacion       = $arrayPeticionesTng['usrCreacion'];
        $strIpCreacion        = $arrayPeticionesTng['ipCreacion'];
        $intIndiceCuatro      = 0;
        $intCont              = 0;
        $intIndice            = 0;
        $strObservacionActivarServicio = $arrayPeticionesTng['observacionActivarServicio'];


        try
        {

            $this->emComercial->getConnection()->beginTransaction();

            foreach ($arrayDatosCaracteristicaId2 as $objInfoDetalletng1)
            {
                $objCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')->
                        findOneByDescripcionCaracteristica($objInfoDetalletng1);

                $objProdCarac = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                  ->findOneBy(array("productoId"       => $intIdProducto,
                                                                    "caracteristicaId" => $objCaracteristica->getId(),
                                                                    "estado"           => "Activo"));

                $objInfoServProdCaractTng = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                              ->findOneBy(array("servicioId"                => $intIdServicioTng,
                                                                                "productoCaracterisiticaId" => $objProdCarac->getId()));

                $objIdInfoervicioProdCaract[$intIndice] = $objInfoServProdCaractTng->getId();

                $objValor[$intIndice] = $objInfoServProdCaractTng->getValor();

                $intIndice++;
            }

            foreach ($arrayParametrosTng as $objInfoDetalletng)
            {
                if ($objInfoDetalletng != $objValor[$intCont])
                {
                    $intContP = 0;
                    foreach ($arrayDatosCaracteristicaId2 as $objNombreItems)
                    {
                        if ($intCont == $intContP)
                        {
                            $strNombreItem = $objNombreItems;
                        }

                        $intContP++;
                    }
                    $objObservacionItems[] = "Se actualiza Item <b>" . $strNombreItem . "</b> Valor anterior: [" . $objValor[$intCont]
                                             . "] por valor Actual: [" . $objInfoDetalletng ."].<br>";
                }
                $intCont++;
            }

            for ($intContT = 0; $intContT < count($objObservacionItems); $intContT++)
            {
                $strMensaje = $strMensaje . $objObservacionItems[$intContT] ;
            }


            foreach ($arrayParametrosTng as $objInfoDetalletng)
            {
                $objServProdCaractAnt = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                         ->find($objIdInfoervicioProdCaract[$intIndiceCuatro]);

                if (is_object($objServProdCaractAnt))
                {
                    $objServProdCaractAnt->setValor($objInfoDetalletng);
                    $intIndiceCuatro++;
                    $this->emComercial->persist($objServProdCaractAnt);
                    $this->emComercial->flush();
                }
            }


            $objServicio= $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioTng);

            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion("El servicio se actualizó y se encuentra en proceso de prueba para la activación. <br>"
                                                   .$strMensaje ."<b>Observación:</b> " .$strObservacionActivarServicio);
            $objServicioHistorial->setEstado("Backlog");
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioHistorial);
            $this->emComercial->flush();


            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->commit();
            }
            $this->emComercial->getConnection()->close();
            $strStatus  = "OK";
            $strMensaje = "OK";

        }
        catch (\Exception $ex)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
                $this->emComercial->getConnection()->close();
            }
            $this->utilService->insertError('Telcos+',
                                                'InfoServicioTecnicoService->updateDatosTngInfSerProCart',
                                                $ex->getMessage(),
                                                $strUsrCreacion,
                                                $strIpCreacion);
            $strStatus = "ERROR";
            $strMensaje = "Error en el procesamiento de los datos..";

        }
        $arrayRespuesta[] = array('status' => $strStatus, 'mensaje' => $strMensaje);
        return $arrayRespuesta;
    }

    /**
     * getServicioProductoCaracteristica
     *
     * Funcion que obtiene un registro en la info servicio producto caracteristica
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 05-09-2018   Se agregaron parametros para proyecto Netlifezone
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 12-11-2018   Se agregaron valor por default a parámetro
     * @since 1.1
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 15-04-2019   Se agregaron nuevo parámetro $arrayParametrosProdCaract['strEstadoSpc'] para poder recuperar
     *                           caracteristicas de servicios con estados diferente a Activo
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 31-08-2020 Se agrega el envío de los parámetros campoOrderByDescSpc y orderBySpc en el arreglo $arrayParametrosProdCaract
     *                         usados para especificar si se desea ordenar de alguna manera específica los registros obtenidos, en caso de existir
     *                         más de uno.
     * @since 1.3
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.5 31-08-2020 Si no se reciba los parámetros para ordenar, se ordena por id del registro de manera descendente,
     *                         por caso que exista más de un registro.
     * @since 1.4
     */
    public function getServicioProductoCaracteristica($objServicio, $strCaracteristica, $objProducto, $arrayParametrosProdCaract = null)
    {
        $strEstadoSpc = 'Activo';
        if(isset($arrayParametrosProdCaract['strEstadoSpc']) && !empty($arrayParametrosProdCaract['strEstadoSpc']))
        {
            $strEstadoSpc = $arrayParametrosProdCaract['strEstadoSpc'];
        }
        $objServProdCarac = null;
        if($strCaracteristica)
        {
            $objCarac = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                             ->findOneBy(array("descripcionCaracteristica" => $strCaracteristica,
                                               "estado" => "Activo"));
        }

        if(is_object($objCarac) && is_object($objProducto))
        {
            $objProdCarac = $this->emComercial
                                 ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                 ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                   "caracteristicaId" => $objCarac->getId(),
                                                   "estado"           => "Activo"));
            if($objProdCarac)
            {
                if (is_object($objServicio))
                {
                    if(isset($arrayParametrosProdCaract['campoOrderByDescSpc']) && !empty($arrayParametrosProdCaract['campoOrderByDescSpc']))
                    {
                        if(isset($arrayParametrosProdCaract["orderBySpc"]) && !empty($arrayParametrosProdCaract["orderBySpc"]))
                        {
                            $strOrderBySpc = $arrayParametrosProdCaract["orderBySpc"];
                        }
                        else
                        {
                            $strOrderBySpc = "DESC";
                        }
                        
                        $objServProdCarac   = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                ->findOneBy(array("servicioId"                => $objServicio->getId(),
                                                                                  "productoCaracterisiticaId" => $objProdCarac->getId(),
                                                                                  "estado"                    => $strEstadoSpc),
                                                                            array($arrayParametrosProdCaract["campoOrderByDescSpc"] => 
                                                                                  $arrayParametrosProdCaract["orderBySpc"]));
                    }
                    else
                    {
                        $objServProdCarac   = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                ->findOneBy(array("servicioId"                => $objServicio->getId(),
                                                                                  "productoCaracterisiticaId" => $objProdCarac->getId(),
                                                                                  "estado"                    => $strEstadoSpc),
                                                                            array("id" => "DESC"));
                    }
                }
                else if (!is_object($objServicio) && !empty($arrayParametrosProdCaract['strProceso']) &&
                        $arrayParametrosProdCaract['strProceso'] === "NETLIFEZONE" && !empty($arrayParametrosProdCaract['strValor']))
                {
                    $objServProdCarac = $this->emComercial
                                             ->getRepository('schemaBundle:InfoServicioProdCaract')
                                             ->findOneBy(array("productoCaracterisiticaId" => $objProdCarac->getId(),
                                                               "valor"                     => $arrayParametrosProdCaract['strValor'],
                                                               "estado"                    => $strEstadoSpc));
                }
            }
        }

        return $objServProdCarac;
    }

    /**
     * Funcion que consulta un registro de la tabla infoservioprodcaract
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 16-08-2018
     */

    public function obtenerServicioProductoCaracteristica($arrayParametros)
    {
        $objServicio        = $arrayParametros['objServicio'];
        $strCaracteristica  = $arrayParametros['strCaracteristica'];
        $intRefId           = $arrayParametros['intRefId'];
        $strEstado          = $arrayParametros['strEstado'];

        $objSpc = null;

        if($strEstado == '')
        {
            $strEstado = 'Activo';
        }

        if($strCaracteristica)
        {
            $objCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findOneBy(array("descripcionCaracteristica" => $strCaracteristica,
                                                                     "estado" => "Activo"));
        }

        if(is_object($objCaracteristica) && is_object($objServicio->getProductoId()))
        {
            $objProdCarac = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array("productoId"        => $objServicio->getProductoId()->getId(),
                                                                "caracteristicaId"  => $objCaracteristica->getId(),
                                                                "estado"            => "Activo"));
            if($objProdCarac)
            {
                $objSpc = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                            ->findOneBy(array(  "servicioId"                => $objServicio->getId(),
                                                                "productoCaracterisiticaId" => $objProdCarac->getId(),
                                                                'refServicioProdCaractId'   => $intRefId,
                                                                "estado"                    => $strEstado));
            }
        }

        return $objSpc;
    }

     /**
     * Función que sirve para Consultar si es un cliente con soporte lógico
     * 
     * @author Jorge Gomez <jigomez@telconet.ec>
     * @version 1.0 13-03-2023 Version inicial
     * 
    */
    public function getClienteSoporteLogico($arrayParametros)
    {
        $intIdPersonaRol        = $arrayParametros['intIdPersonaRol'];
        $intIdProducto  = $arrayParametros['intIdProducto'];
        $strCodEmpresa           = $arrayParametros['strCodEmpresa'];
        $strNombreParametro = $arrayParametros['strNombreParametro'];

        $arrayCliente = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")->get(
            $strNombreParametro,
            "COMERCIAL",
            "",
            "",
            $intIdPersonaRol,
            $intIdProducto,
            "",
            "",
            "",
            $strCodEmpresa
           );


        return $arrayCliente;
    }

    /**
     * Función que sirve para Actualizar característica del servicio
     * 
     * @author Jorge Gomez <jigomez@telconet.ec>
     * @version 1.0 13-03-2023 Version inicial
     * 
    */
    public function actualizarCaracteristicaServicio($arrayParametros)
    {

        $intIdServProdCaract        = $arrayParametros['idServicioProdCaract'];
        $strEstado          = $arrayParametros['estado'];
        $strValor           = $arrayParametros['valor'];
        $strCaracteristica = $arrayParametros['caracteristica'];
        $strValorAntes           = "";
        $strEstadoAntes          = "";

         $this->emComercial->getConnection()->beginTransaction();
        
        try 
        {

            $entityServicioProdCaract =  $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->find($intIdServProdCaract);
            if (!$entityServicioProdCaract) 
            {
                $arrayRespuestaFinal = array("status" => "Error", "mensaje" => "No se encontro el servicio!");
            }

            $strValorAntes  = $entityServicioProdCaract->getValor();
            $strEstadoAntes = $entityServicioProdCaract->getEstado();
            //Actualiza el servicio producto caracteristica
            $entityServicioProdCaract->setEstado($strEstado);
            $entityServicioProdCaract->setValor($strValor);
            $entityServicioProdCaract->setFeUltMod(new \DateTime('now'));
             $this->emComercial->persist($entityServicioProdCaract);
             $this->emComercial->flush();
            
            $entityServicio =  $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($entityServicioProdCaract->getServicioId());
            
            if (!$entityServicio) 
            {
                $arrayRespuestaFinal = array("status" => "Error", "mensaje" => "No se encontro el servicio");

                return $arrayRespuestaFinal;
            }
            $arrayRespuestaFinal = array("status" => "ok", "mensaje" => "Se actualizo correctamente");

            $this->emComercial->getConnection()->commit();
           
        }catch(\Exception $objEx)
        {
            $this->emComercial->getConnection()->rollback();

            $arrayRespuestaFinal = array("status" => "Error", "mensaje" => "No se encontro el servicio");

            $this->utilService->insertError('Telcos+',
                                            'actualizarCaracteristicaServicio',
                                            $objEx->getMessage(),
                                            $strUsrUltMod,
                                            $strIpCliente
            );
        }


        return $arrayRespuestaFinal;
        
    }

    /**
     * Funcion que cambia a estado Eliminado las caracteristica misma ultima milla que dependan el servicio
     * enviado como parametros en la función
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 04-10-2017
     * @since 1.0
     *
     * @param Object $objServicio    Objeto InfoServicio con información del servicio Padre de Ultima Milla
     * @param String $strUsrUltMod   Cadena de caracteres con usuario que ejecuta la acción
     * @param String $strIpCliente   Cadena de caracteres con ip que ejecuta la acción
     */
    public function eliminarDependenciaMismaUM($objServicio, $strUsrUltMod, $strIpCliente)
    {
        try
        {
            $strCaracteristica  = "SERVICIO_MISMA_ULTIMA_MILLA";
            $strEstadoEliminado = "Eliminado";
            $objCaracteristica  = $this->emComercial
                                       ->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array("descripcionCaracteristica" => $strCaracteristica,
                                                         "estado"                    => "Activo"));

            if(is_object($objServicio) && is_object($objCaracteristica) )
            {
                $arrayObjProdCaract = $this->emComercial
                        ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                        ->findBy(array("caracteristicaId" => $objCaracteristica->getId(),
                                                          "estado"           => "Activo"));
                foreach($arrayObjProdCaract as $objProdCaract)
                {
                    $arrayServProdCaract = $this->emComercial
                                                ->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->findBy(array("valor"                     => $objServicio->getId(),
                                                              "productoCaracterisiticaId" => $objProdCaract->getId(),
                                                               "estado"                    => "Activo"));

                    foreach($arrayServProdCaract as $objServProdCaract)
                    {
                        $strEstadoAnterior = $objServProdCaract->getEstado();
                        $objServProdCaract->setEstado($strEstadoEliminado);
                        $objServProdCaract->setFeUltMod(new \DateTime('now'));
                        $objServProdCaract->setUsrUltMod($strUsrUltMod);
                        $this->emComercial->persist($objServProdCaract);
                        $this->emComercial->flush();

                        $objServicioCaract = $this->emComercial
                                ->getRepository('schemaBundle:InfoServicio')
                                ->find($objServProdCaract->getServicioId());
                        if(is_object($objServicioCaract))
                        {
                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($objServicioCaract);
                            $objServicioHist->setObservacion('Se actualizo caracteristica '.$strCaracteristica.' con ID '.
                                                                $objServProdCaract->getId().' : <br>'.
                                                                'Valores Anteriores: <br>'.
                                                                '&nbsp;&nbsp;&nbsp;&nbsp;Estado: '.$strEstadoAnterior.'<br>'.
                                                                'Valores Actuales: <br>'.
                                                                '&nbsp;&nbsp;&nbsp;&nbsp;Estado: '.$strEstadoEliminado);
                            $objServicioHist->setIpCreacion($strIpCliente);
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setAccion('actualizaCaracteristica');
                            $objServicioHist->setUsrCreacion($strUsrUltMod);
                            $objServicioHist->setEstado($objServicioCaract->getEstado());
                            $this->emComercial->persist($objServicioHist);
                            $this->emComercial->flush();
                        }
                    }
                }
            }
        }
        catch(\Exception $objEx)
        {
            $this->utilService->insertError('Telcos+',
                                            'eliminarDependenciaMismaUM',
                                            $objEx->getMessage(),
                                            $strUsrUltMod,
                                            $strIpCliente
            );
        }
    }


    public function setEstadoServicioProductoCaracteristica($servicioProductoCaracteristica, $estado)
    {
        $servicioProductoCaracteristica->setEstado($estado);
        $this->emComercial->persist($servicioProductoCaracteristica);
        $this->emComercial->flush();
    }
    
    /**
     * Función que actualiza todas las características asociadas a un servicio de acuerdo a su descripción característica
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 31-08-2020
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"           => objeto del servicio
     *                                  "objProducto"           => objeto del producto
     *                                  "strDescripcionCaract"  => descripción de la característica
     *                                  "strEstadoNuevo"        => estado nuevo de las características asociadas al servicio
     *                                  "strUsrUltMod"          => usuario que modifica la característica
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => "OK" o "ERROR"
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     */
    public function actualizarServicioProdCaracts($arrayParametros)
    {
        $strMensaje             = "";
        $objServicio            = $arrayParametros["objServicio"];
        $objProducto            = $arrayParametros["objProducto"];
        $strDescripcionCaract   = $arrayParametros["strDescripcionCaract"];
        $strEstadoNuevo         = $arrayParametros["strEstadoNuevo"];
        $strUsrUltMod           = $arrayParametros["strUsrUltMod"];
        $intIdSpcNoActualizar   = $arrayParametros["intIdSpcNoActualizar"];
        try
        {
            if(empty($strDescripcionCaract))
            {
                throw new \Exception("No se ha enviado la descripción de la característica");
            }
            
            if(empty($strEstadoNuevo))
            {
                throw new \Exception("No se ha enviado el estado nuevo de las características asociadas al servicio");
            }
            
            if(!is_object($objProducto))
            {
                throw new \Exception("No se ha enviado el objeto del producto");
            }
            
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha enviado el objeto del servicio");
            }
            
            $objCaract  = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy(array(  "descripcionCaracteristica" => $strDescripcionCaract,
                                                                "estado"                    => "Activo"));
            if(!is_object($objCaract))
            {
                throw new \Exception("No se ha podido obtener el objeto asociado a la característica");
            }
            
            $objProdCaract  = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array(  "productoId"       => $objProducto->getId(),
                                                                    "caracteristicaId" => $objCaract->getId(),
                                                                    "estado"           => "Activo"));
            if(!is_object($objProdCaract))
            {
                throw new \Exception("No se ha podido obtener el objeto asociado al producto y característica");
            }
            
            $arrayServProdCaracts   = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findBy(array( "servicioId"                    => $objServicio->getId(),
                                                                        "productoCaracterisiticaId"     => $objProdCaract->getId(),
                                                                        "estado"                        => "Activo"));
            foreach($arrayServProdCaracts as $objServProdCaract)
            {
                $boolPermiteActualizar = false;
                if(isset($intIdSpcNoActualizar) && !empty($intIdSpcNoActualizar))
                {
                    if($objServProdCaract->getId() != $intIdSpcNoActualizar)
                    {
                        $boolPermiteActualizar = true;
                    }
                }
                else
                {
                    $boolPermiteActualizar = true;
                }
                
                if($boolPermiteActualizar)
                {
                    $objServProdCaract->setEstado($strEstadoNuevo);
                    $objServProdCaract->setFeUltMod(new \DateTime('now'));
                    $objServProdCaract->setUsrUltMod($strUsrUltMod);
                    $this->emComercial->persist($objServProdCaract);
                }
            }
            $this->emComercial->flush();
            $strStatus  = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para actualizar el valor de un servicio prod caract
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 15-03-2015
     */
    public function setValorServicioProductoCaracteristica($servicioProductoCaracteristica, $valor)
    {
        $servicioProductoCaracteristica->setValor($valor);
        $this->emComercial->persist($servicioProductoCaracteristica);
        $this->emComercial->flush();
    }

    public function getServiciosIpAdicionalEnPunto($arrayServicios, $arrayIp, $servicio)
    {
        $arrayIdServicioIpAdicional = array();
        $cont = 0;
        for($i = 0; $i < count($arrayServicios); $i++)
        {
            $servicioPunto = $arrayServicios[$i];
            if($servicioPunto->getEstado() == "Activo" && $servicioPunto->getId() != $servicio->getId())
            {
                if($servicioPunto->getPlanId())
                {
                    $planCab = $this->emComercial->getRepository('schemaBundle:InfoPlanCab')
                            ->find($servicioPunto->getPlanId()->getId());
                    $planDet = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                            ->findBy(array("planId" => $planCab->getId()));

                    for($j = 0; $j < count($planDet); $j++)
                    {
                        for($k = 0; $k < count($arrayIp); $k++)
                        {
                            $prodIp = $arrayIp[$k];
                            if($planDet[$j]->getProductoId() == $prodIp->getId())
                            {
                                array_push($arrayIdServicioIpAdicional, $servicioPunto);
                            }
                        }
                    }
                }
                else
                {
                    $productoServicioPunto = $servicioPunto->getProductoId();
                    for($k = 0; $k < count($arrayIp); $k++)
                    {
                        $prodIp = $arrayIp[$k];
                        if($productoServicioPunto->getId() == $prodIp->getId())
                        {
                            array_push($arrayIdServicioIpAdicional, $servicioPunto);
                        }
                    }
                }
            }
        }//end for
        return $arrayIdServicioIpAdicional;
    }

    /**
     * Funcion que reserva la ip que se indique
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 01-09-2014
     * @param String                 $ip
     * @param String                 $tipoIp
     * @param InfoServicio           $servicio
     * @param String                 $usrCreacion
     * @param String                 $ipCreacion
     */
    public function reservarIpAdicional($ip, $tipoIp, $servicio, $usrCreacion, $ipCreacion)
    {
        //grabar ip
        $ipFija = new InfoIp();
        $ipFija->setIp($ip);
        $ipFija->setEstado("Reservada");
        $ipFija->setTipoIp($tipoIp);
        $ipFija->setServicioId($servicio->getId());
        $ipFija->setUsrCreacion($usrCreacion);
        $ipFija->setFeCreacion(new \DateTime('now'));
        $ipFija->setIpCreacion($ipCreacion);
        $this->emInfraestructura->persist($ipFija);
        $this->emInfraestructura->flush();
        return $ipFija;
    }

    /**
     * Funcion que verifica si la ip esta configurada en el olt
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 01-09-2014
     * @param AdmiModeloElemento     $modeloElemento
     * @param InfoServicioTecnico    $servicioTecnico
     * @param String                 $ip
     */
    public function verificarIpConfigurada($modeloElemento, $servicioTecnico, $ip)
    {
        //*OBTENER SCRIPT--------------------------------------------------------*/
        $scriptArray = $this->obtenerArregloScript("obtenerPoolParaIpFija", $modeloElemento);
        $idDocumentoPool = $scriptArray[0]->idDocumento;
        $usuario = $scriptArray[0]->usuario;
        $protocolo = $scriptArray[0]->protocolo;
        //*----------------------------------------------------------------------*/

        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '" . $this->host . "' " .
                "'verificarIpConfigurada' '" . $servicioTecnico->getElementoId() . "' '" . $usuario . "' '" . $protocolo . "' " .
                "'" . $idDocumentoPool . "' '" . $ip . "' '" . $this->pathParameters . "'";

        $salida = shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJsonPerfil = json_decode($jsonObj);

        return $resultadJsonPerfil;
    }

    /**
     * Funcion que verifica en el olt si la ip esta asociada a la mac
     * indicada
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 01-09-2014
     * @param AdmiModeloElemento     $modeloElemento
     * @param InfoServicioTecnico    $servicioTecnico
     * @param String                 $ip
     * @param String                 $mac
     */
    public function verificarIpMacConfigurada($modeloElemento, $servicioTecnico, $ip, $mac)
    {
        //*OBTENER SCRIPT--------------------------------------------------------*/
        $scriptArray = $this->obtenerArregloScript("obtenerPoolParaIpFija", $modeloElemento);
        $idDocumentoPool = $scriptArray[0]->idDocumento;
        $usuario = $scriptArray[0]->usuario;
        $protocolo = $scriptArray[0]->protocolo;
        //*----------------------------------------------------------------------*/

        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '" . $this->host . "' " .
                "'verificarIpConfiguradaNuevo' '" . $servicioTecnico->getElementoId() . "' '" . $mac . "' '" . $protocolo . "' " .
                "'" . $idDocumentoPool . "' '" . $ip . "' '" . $this->pathParameters . "'";

        $salida = shell_exec($comando);
        $pos = strpos($salida, "{");
        $jsonObj = substr($salida, $pos);
        $resultadJsonPerfil = json_decode($jsonObj);

        return $resultadJsonPerfil;
    }

    /**
     * Funcion que actualiza el tipo de negocio en la info_punto
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 12-08-2014
     * @param InfoPunto     $punto
     * @param String        $tipoNegocio
     * @param String        $idEmpresa
     */
    public function setTipoNegocioEnInfoPunto($punto, $tipo, $idEmpresa)
    {
        $tipoNegocio = $this->emComercial->getRepository('schemaBundle:AdmiTipoNegocio')
                ->findOneBy(array("nombreTipoNegocio" => $tipo,
            "empresaCod" => $idEmpresa,
            "estado" => "Activo"));

        $punto->setTipoNegocioId($tipoNegocio);
        $this->emComercial->persist($punto);
        $this->emComercial->flush();
    }

    /**
     * Funcion que verifica si un plan det tiene ip fija
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 12-08-2014
     * @param Array InfoPlanDet       $planDet
     * @param Array AdmiProducto      $arrayProdIp
     */
    public function verificarPlanTieneIp($planDet, $arrayProdIp)
    {
        $flagProdViejo = 0;

        for($i = 0; $i < count($planDet); $i++)
        {
            for($j = 0; $j < count($arrayProdIp); $j++)
            {
                if($planDet[$i]->getProductoId() == $arrayProdIp[$j]->getId())
                {
                    $flagProdViejo = 1;
                    break;
                }
            }
            if($flagProdViejo == 1)
            {
                break;
            }
        }

        return $flagProdViejo;
    }

    /**
     * Funcion que verifica si existen ips fijas adicionales
     * en los servicios de un punto
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 12-08-2014
     * @param Array InfoServicio      $arrayServicios
     * @param Array AdmiProducto      $arrayProdIp
     * @param InfoServicio            $servicio
     */
    public function verificarIpFijaEnPunto($arrayServicios, $arrayProdIp, $servicio)
    {
        $flag = 0;
        for($i = 0; $i < count($arrayServicios); $i++)
        {
            $servicioPunto = $arrayServicios[$i];
            if($servicioPunto->getEstado() == "Activo" && $servicioPunto->getId() != $servicio->getId())
            {
                if($servicioPunto->getPlanId())
                {
                    $planCab = $this->emComercial->getRepository('schemaBundle:InfoPlanCab')
                            ->find($servicioPunto->getPlanId()->getId());
                    $planDet = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                            ->findBy(array("planId" => $planCab->getId()));

                    $flag = $this->verificarPlanTieneIp($planDet, $arrayProdIp);
                    if($flag == 1)
                    {
                        break;
                    }
                }
                else
                {
                    $productoServicioPunto = $servicioPunto->getProductoId();
                    for($j = 0; $j < count($arrayProdIp); $j++)
                    {
                        if($productoServicioPunto->getId() == $arrayProdIp[$j]->getId())
                        {
                            $flag = 1;
                            break;
                        }
                    }
                    if($flag == 1)
                    {
                        break;
                    }
                }
                if($flag == 1)
                {
                    break;
                }
            }//cierre if
        }//cierre for

        return $flag;
    }

    /**
     * Funcion que obtiene indice que indica en que posicion del arreglo esta
     * el producto ip
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 12-08-2014
     * @param Array InfoServicio      $arrayServicios
     * @param Array AdmiProducto      $arrayProdIp
     * @param InfoServicio            $servicio
     */
    public function obtenerIndiceIpFijaEnArrayServicios($arrayServicios, $arrayProdIp, $servicio)
    {
        $indice = -1;
        for($i = 0; $i < count($arrayServicios); $i++)
        {
            $servicioPunto = $arrayServicios[$i];
            if($servicioPunto->getEstado() == "Activo" && $servicioPunto->getId() != $servicio->getId())
            {
                if($servicioPunto->getPlanId())
                {
                    $planCab = $this->emComercial->getRepository('schemaBundle:InfoPlanCab')
                            ->find($servicioPunto->getPlanId()->getId());
                    $planDet = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                            ->findBy(array("planId" => $planCab->getId()));

                    for($j = 0; $j < count($planDet); $j++)
                    {
                        for($k = 0; $k < count($arrayProdIp); $k++)
                        {
                            if($planDet[$j]->getProductoId() == $arrayProdIp[$j]->getId())
                            {
                                $flag = 1;
                                $indice = $i;
                                break;
                            }
                        }
                        if($flag == 1)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    $productoServicioPunto = $servicioPunto->getProductoId();
                    for($j = 0; $j < count($arrayProdIp); $j++)
                    {
                        if($productoServicioPunto->getId() == $arrayProdIp[$j]->getId())
                        {
                            $flag = 1;
                            $indice = $i;
                            break;
                        }
                    }
                    if($flag == 1)
                    {
                        break;
                    }
                }
                if($flag == 1)
                {
                    break;
                }
            }//cierre if
        }//cierre for

        return $indice;
    }

    /**
     * Funcion que cuenta las ips fijas adicionales, obtiene en un arreglo la ip adicional con su mac de los servicios de un punto
     *
     * @author Creado: Francisco Adum <fadum@netlife.net.ec>
     * @version 1.0 16-05-2017
     * @param Array InfoServicio        $arrayServicios
     * @param Array AdmiProducto        $arrayProdIp
     * @param InfoServicio              $servicio
     * @param String                    $estadoServicio
     * @param String                    $estadoIp
     * @return $arrayRespuesta          [ip_fijas_activas, valores]
     *
     * @author Creado: Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 15-07-2017 - Se corrige el indice en la busqueda de Productos de Ips Adicionales para compararlas con laas
     *                           obtenidas en el Plan Det del Servicios, el proceso se lo realiza en un bucle anidado en el cual
     *                           se estaba enviando el indice mas externo a buscar en el arreglo siendo corregido por el indice
     *                           del bucle mas interno
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 20-02-2018 Se elimina validación no usada para servicios Internet Small Business
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 17-04-2019 Se agrega programación para recuperar información necesaria para realizar la
     *                         migración de servicios MD (Tellion -> HW/ZTE)
     * @since 1.2
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 05-06-2019 Validaciones para el flujo del producto SMALL BUSINESS CENTROS COMERCIALES.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.5 15-11-2020 Se agrega validación para excluir IP FIJA WAN dentro del listado retornado por la función
     *
     * @since 1.3
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.6 24-03-2021 Se agrega producto en el parametro
     *
     */
    public function getInfoIpsFijaPunto($arrayServicios, $arrayProdIp, $servicio, $estadoServicio, $estadoIp, $objProductoInternet)
    {
        $cont           = 0;
        $flag           = 0;
        $strMac         = '';
        $strScope       = '';
        $strIp          = '';
        $objProducto    = null;
        $arrayValores   = array();
        $objScope       = null;
        
        try
        {
            for($i=0; $i<count($arrayServicios); $i++)
            {
                $strScope = '';
                $objScope = null;
                $servicioPunto = $arrayServicios[$i];
                if( $servicioPunto->getEstado() == $estadoServicio &&
                    $servicioPunto->getId() != $servicio->getId())
                {
                    $objProducto = null;
                    if($servicioPunto->getPlanId())
                    {
                        $planCab = $this->emComercial->getRepository('schemaBundle:InfoPlanCab')
                                ->find($servicioPunto->getPlanId()->getId());
                        $planDet = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                     ->findBy(array("planId"=>$planCab->getId()));

                        for($j=0;$j<count($planDet);$j++)
                        {
                            for($k=0;$k<count($arrayProdIp);$k++)
                            {
                                if($planDet[$j]->getProductoId() == $arrayProdIp[$k]->getId())
                                {
                                    $flag        = 1;
                                    $objProducto = $arrayProdIp[$k];
                                    break;
                                }
                            }
                            if($flag==1)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        $productoServicioPunto = $servicioPunto->getProductoId();
                        $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $productoServicioPunto->getId(),
                                                                 'strDescCaracteristica' => 'IP WAN',
                                                                 'strEstado'             => 'Activo' );
                        $strExisteIpWan = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
                        if ($strExisteIpWan === 'N')
                        {
                            for($j=0;$j<count($arrayProdIp);$j++)
                            {
                                if(($productoServicioPunto->getId() == $arrayProdIp[$j]->getId()) ||
                                ($productoServicioPunto->getId() == "1401" || $productoServicioPunto->getId() == "1402"))
                                {
                                    $flag        = 1;
                                    $objProducto = $arrayProdIp[$j];
                                    break;
                                }
                            }
                        }
                    }

                    if($flag == 1)
                    {
                        $cont++;

                        //obtener ip
                        $objIp  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                          ->findOneBy(array('servicioId'    => $servicioPunto->getId(),
                                                                            'estado'        => $estadoIp));

                        if($objIp)
                        {
                            $strIp = $objIp->getIp();
                        }

                        //obtener mac
                        $spcMac = $this->getServicioProductoCaracteristica($servicioPunto, 'MAC', $objProductoInternet);
                        if(!$spcMac)
                        {
                            $spcMac = $this->getServicioProductoCaracteristica($servicioPunto, 'MAC WIFI', $objProductoInternet);
                        }

                        if(is_object($spcMac))
                        {
                            $strMac = $spcMac->getValor();
                        }

                        if ($estadoIp == 'Reservada')
                        {
                            $arrayParametrosProdCaract = array();
                            $arrayParametrosProdCaract['strEstadoSpc'] = $estadoIp;
                            $objScope = $this->getServicioProductoCaracteristica($servicioPunto,
                                                                                 "SCOPE",
                                                                                 $objProducto,
                                                                                 $arrayParametrosProdCaract);
                            if(is_object($objScope))
                            {
                                $strScope = $objScope->getValor();
                            }
                        }
                        else
                        {
                            $objScope = $this->getServicioProductoCaracteristica($servicioPunto, 'SCOPE', $objProducto);
                            if(is_object($objScope))
                            {
                                $strScope = $objScope->getValor();
                            }
                        }

                        $arrayValores[] = array('mac'           => $strMac,
                                                'ip'            => $strIp,
                                                'id_servicio'   => $servicioPunto->getId(),
                                                'scope'         => $strScope,
                                                'intIdSpcScope' => is_object($objScope)?$objScope->getId():0,
                                                'intIdSpcMac'   => is_object($spcMac)?$spcMac->getId():'',
                                                'productoId'    => $productoServicioPunto->getId()
                                               );
                    }

                }//cierre if

                $flag = 0;
            }//for($i=0; $i<count($arrayServicios); $i++)

            $arrayRespuesta = array('ip_fijas_activas' => $cont, 'valores'=> $arrayValores);
        }
        catch(\Exception $e)
        {
            error_log($e->getTraceAsString());
        }

        return $arrayRespuesta;
    }

    /**
     * getIpFijaWan
     * 
     * Función que retorna la IP FIJA WAN adicional de un cliente PYME MD en caso de existir
     *
     * @param arrayParametros [
     *                          objPunto       =>  Objeto del punto a consultar la información
     *                          strEmpresaCod  =>  Código de empresa
     *                          strUsrCreacion =>  Usuario de creación
     *                          strIpCreacion  =>  Ip de creación
     *                        ]
     * @return $arrayRespuesta          [ip_fijas_activas, valores]
     *
     * @author Creado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 15-11-2020
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 24-04-2021    Se agrega el retorno de objetos de característica de SCOPE y objeto IP encontrado
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 18-03-2022    Se agrega el retorno del objeto de característica de MAC encontrado
     * 
     */
    public function getIpFijaWan($arrayParametros)
    {
        $strMac         = '';
        $strScope       = '';
        $strIp          = '';
        $objProducto    = null;
        $arrayInfoIp    = array();
        $arrayRespuesta = array();
        $objScope       = null;
        $strEstadoActivo   = 'Activo';
        $strStatus      = 'OK';
        $strExisteIpWan = 'NO';
        $objPunto       = $arrayParametros['objPunto'] ? $arrayParametros['objPunto'] : null;
        $strEmpresaCod  = $arrayParametros['strEmpresaCod'] ? $arrayParametros['strEmpresaCod'] : null;
        $strUsrCreacion = $arrayParametros['strUsrCreacion'] ? $arrayParametros['strUsrCreacion'] : null;
        $strIpCreacion  = $arrayParametros['strIpCreacion'] ? $arrayParametros['strIpCreacion'] : null;
        $strEstadoServicio = $arrayParametros['strEstadoServicio'] ? $arrayParametros['strEstadoServicio'] : 'Activo';
        try
        {
            if (is_object($objPunto) && !empty($strEmpresaCod))
            {
                $arrayServicios = $this->emComercial
                                       ->getRepository('schemaBundle:InfoServicio')
                                       ->findBy(array("puntoId" => $objPunto->getId(),
                                                      "estado"  => $strEstadoServicio));
                $arrayProdIp    = $this->emComercial
                                       ->getRepository('schemaBundle:AdmiProducto')
                                       ->findBy(array("nombreTecnico" => "IP",
                                                      "empresaCod"    => $strEmpresaCod,
                                                      "estado"        => $strEstadoActivo));
                $objProductoInternet = $this->emComercial
                                            ->getRepository('schemaBundle:AdmiProducto')
                                            ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO", 
                                                              "estado"              => $strEstadoActivo,
                                                              "empresaCod"          => $strEmpresaCod));
                for($intI=0; $intI<count($arrayServicios); $intI++)
                {
                    $strScope = '';
                    $objScope = null;
                    $objServicioItem = $arrayServicios[$intI];
                    $objProductoServicioItem = $objServicioItem->getProductoId();
                    if( is_object($objProductoServicioItem))
                    {
                        $objProducto = null;
                        $arrayParametrosCaracteristicas = array( 'intIdProducto'        => $objProductoServicioItem->getId(),
                                                                 'strDescCaracteristica' => 'IP WAN',
                                                                 'strEstado'             => 'Activo' );
                        $strExisteCaractIpWan = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
                        if ($strExisteCaractIpWan === 'S')
                        {
                            for($intJ=0;$intJ<count($arrayProdIp);$intJ++)
                            {
                                if($objProductoServicioItem->getId() == $arrayProdIp[$intJ]->getId())
                                {
                                    $objProducto = $arrayProdIp[$intJ];
                                    $strExisteIpWan = 'SI';
                                    break;
                                }
                            }
                        }
                        
                        if(is_object($objProducto))
                        {
                            //obtener ip
                            $objIp  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->findOneBy(array('servicioId'    => $objServicioItem->getId(),
                                                                                'estado'        => $strEstadoActivo));

                            if($objIp)
                            {
                                $strIp = $objIp->getIp();
                            }

                            //obtener mac
                            $objSpcMac = $this->getServicioProductoCaracteristica($objServicioItem, 'MAC', $objProductoInternet);
                            if(is_object($objSpcMac))
                            {
                                $strMac = $objSpcMac->getValor();
                            }
                            $objScope = $this->getServicioProductoCaracteristica($objServicioItem, 'SCOPE', $objProducto);
                            if(is_object($objScope))
                            {
                                $strScope = $objScope->getValor();
                            }
                            
                            $arrayInfoIp = array('strMac'           => $strMac,
                                                 'strIp'            => $strIp,
                                                 'intIdServicioIp'  => $objServicioItem->getId(),
                                                 'strScope'         => $strScope,
                                                 'objIp'            => $objIp,
                                                 'objScope'      => $objScope,
                                                 'objSpcMac'        => $objSpcMac,
                                                 'intIdSpcScope' => is_object($objScope)?$objScope->getId():0,
                                                 'intIdSpcMac'   => is_object($objSpcMac)?$objSpcMac->getId():''
                                                );
                            break;
                        }
                    }
                }
            }
        }
        catch(\Exception $objEx)
        {
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService.getIpFijaWan',
                                            $objEx->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            $strStatus = 'ERROR';
        }
        $arrayRespuesta = array('strStatus' => $strStatus, 'strExisteIpWan' => $strExisteIpWan, 'arrayInfoIp'=> $arrayInfoIp);
        return $arrayRespuesta;
    }

    /**
     * Funcion que obtiene indice que indica en que posicion del arreglo esta
     * el producto internet
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 12-08-2014
     *
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 02-06-2017     Se agrega estado que debe ser excluido dentro del proceso de recuperación de indice de registro en array
     * @since 1.0
     *
     * @param Array InfoServicio      $arrayServicios
     * @param Array AdmiProducto      $arrayProdInternet
     * @param InfoServicio            $servicio
     */
    public function obtenerIndiceInternetEnPlanDet($planDet, $arrayProdInternet)
    {
        $flagProdViejo = 0;
        $indice = -1;
        $strEstadoPlanDet = "Eliminado";
        for($i = 0; $i < count($planDet); $i++)
        {
            for($j = 0; $j < count($arrayProdInternet); $j++)
            {
                //se agrega validación de estado para excluir detalles eliminados
                if($planDet[$i]->getProductoId() == $arrayProdInternet[$j]->getId() &&
                    $planDet[$i]->getEstado() != $strEstadoPlanDet)
                {
                    $flagProdViejo = 1;
                    $indice = $i;
                    break;
                }
            }
            if($flagProdViejo == 1)
            {
                break;
            }
        }
        return $indice;
    }

    public function getPlanProductoCaracteristica($caracteristica, $planDet, $producto)
    {
        $carac = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array("descripcionCaracteristica" => $caracteristica, "estado" => "Activo"));
        $prodCarac = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array("productoId" => $producto->getId(), "caracteristicaId" => $carac->getId(), "estado" => "Activo"));
        $planProdCaract = $this->emComercial->getRepository('schemaBundle:InfoPlanProductoCaract')
                ->findOneBy(array("planDetId" => $planDet->getId(), "productoCaracterisiticaId" => $prodCarac->getId(), "estado" => "Activo"));

        return $planProdCaract;
    }

    /**
     * Funcion que sirve para crear la Solicitud de Retiro de equipo
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 22-07-2015
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 01-03-2017       Se modifica validación de enlaces de elementos para generar correctamente
     *                               las solicitudes de retiro de equipo
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 21-12-2017 - En la tabla INFO_DETALLE_ASIGNACION se registra el campo tipo asignado 'EMPLEADO'
     *
     * @since 1.0
     *
     * @param array $arrayParametros (servicio, servicioTecnico, observacion, usrCreacion, ipCreacion, idPersonaEmpresaRol)
     */
    public function crearSolicitudRetiroEquipo($arrayParametros)
    {
        $servicio = $arrayParametros['servicio'];
        $servicioTecnico = $arrayParametros['servicioTecnico'];
        $observacion = $arrayParametros['observacion'];
        $usrCreacion = $arrayParametros['usrCreacion'];
        $ipCreacion = $arrayParametros['ipCreacion'];
        $idPersonaEmpresaRol = $arrayParametros['idPersonaEmpresaRol'];
        //crear solicitud para retiro de equipo (ont y wifi)
        $tipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO", "estado" => "Activo"));
        $detalleSolicitud = new InfoDetalleSolicitud();
        $detalleSolicitud->setServicioId($servicio);
        $detalleSolicitud->setTipoSolicitudId($tipoSolicitud);
        $detalleSolicitud->setEstado("AsignadoTarea");
        $detalleSolicitud->setUsrCreacion($usrCreacion);
        $detalleSolicitud->setFeCreacion(new \DateTime('now'));
        $detalleSolicitud->setObservacion("SOLICITA RETIRO DE EQUIPO POR: <br>" . $observacion);
        $this->emComercial->persist($detalleSolicitud);
        $this->emComercial->flush();

        //crear las caract para la solicitud de retiro de equipo
        $entityAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array('descripcionCaracteristica' => 'ELEMENTO CLIENTE',
            'estado' => 'Activo'));

        //valor del ont
        $entityCaract = new InfoDetalleSolCaract();
        $entityCaract->setCaracteristicaId($entityAdmiCaracteristica);
        $entityCaract->setDetalleSolicitudId($detalleSolicitud);
        $entityCaract->setValor($servicioTecnico->getElementoClienteId());
        $entityCaract->setEstado("AsignadoTarea");
        $entityCaract->setUsrCreacion($usrCreacion);
        $entityCaract->setFeCreacion(new \DateTime('now'));
        $this->emComercial->persist($entityCaract);
        $this->emComercial->flush();

        $enlaceCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                ->findOneBy(array("interfaceElementoIniId" => $servicioTecnico->getInterfaceElementoClienteId(),
            "estado" => "Activo"));
        if(is_object($enlaceCliente))
        {
            //obtener wifi
            $interfaceWifi = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                    ->find($enlaceCliente->getInterfaceElementoFinId());
            if($interfaceWifi)
            {
                //valor del wifi
                $entityCaract = new InfoDetalleSolCaract();
                $entityCaract->setCaracteristicaId($entityAdmiCaracteristica);
                $entityCaract->setDetalleSolicitudId($detalleSolicitud);
                $entityCaract->setValor($interfaceWifi->getElementoId()->getId());
                $entityCaract->setEstado("AsignadoTarea");
                $entityCaract->setUsrCreacion($usrCreacion);
                $entityCaract->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($entityCaract);
                $this->emComercial->flush();
            }
        }

        //obtener tarea
        $entityProceso = $this->emSoporte->getRepository('schemaBundle:AdmiProceso')->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");
        $entityTareas = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->findTareasActivasByProceso($entityProceso->getId());
        $entityTarea = $entityTareas[0];

        //grabar nuevo info_detalle para la solicitud de retiro de equipo
        $entityDetalle = new InfoDetalle();
        $entityDetalle->setDetalleSolicitudId($detalleSolicitud->getId());
        $entityDetalle->setTareaId($entityTarea);
        $entityDetalle->setLongitud($servicio->getPuntoId()->getLongitud());
        $entityDetalle->setLatitud($servicio->getPuntoId()->getLatitud());
        $entityDetalle->setPesoPresupuestado(0);
        $entityDetalle->setValorPresupuestado(0);
        $entityDetalle->setIpCreacion($ipCreacion);
        $entityDetalle->setFeCreacion(new \DateTime('now'));
        $entityDetalle->setUsrCreacion($usrCreacion);
        $this->emSoporte->persist($entityDetalle);
        $this->emSoporte->flush();

        //obtenemos el persona empresa rol del usuario
        $personaEmpresaRolUsr = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                ->find($idPersonaEmpresaRol);

        //buscamos datos del dept, persona
        $departamento = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($personaEmpresaRolUsr->getDepartamentoId());
        $persona = $personaEmpresaRolUsr->getPersonaId();

        //grabamos soporte.info_detalle_asignacion
        $detalleAsignacion = new InfoDetalleAsignacion();
        $detalleAsignacion->setDetalleId($entityDetalle);
        $detalleAsignacion->setAsignadoId($departamento->getId());
        $detalleAsignacion->setAsignadoNombre($departamento->getNombreDepartamento());
        $detalleAsignacion->setRefAsignadoId($persona->getId());
        if($persona->getRazonSocial() == "")
        {
            $nombre = $persona->getNombres() . " " . $persona->getApellidos();
        }
        else
        {
            $nombre = $persona->getRazonSocial();
        }
        $detalleAsignacion->setRefAsignadoNombre($nombre);
        $detalleAsignacion->setPersonaEmpresaRolId($personaEmpresaRolUsr->getId());
        $detalleAsignacion->setTipoAsignado("EMPLEADO");
        $detalleAsignacion->setUsrCreacion($usrCreacion);
        $detalleAsignacion->setFeCreacion(new \DateTime('now'));
        $detalleAsignacion->setIpCreacion($ipCreacion);
        $this->emSoporte->persist($detalleAsignacion);
        $this->emSoporte->flush();

        //crear historial para la solicitud
        $historialSolicitud = new InfoDetalleSolHist();
        $historialSolicitud->setDetalleSolicitudId($detalleSolicitud);
        $historialSolicitud->setEstado("AsignadoTarea");
        $historialSolicitud->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE "
                . "EQUIPO POR: <br>" . $observacion);
        $historialSolicitud->setUsrCreacion($usrCreacion);
        $historialSolicitud->setFeCreacion(new \DateTime('now'));
        $historialSolicitud->setIpCreacion($ipCreacion);
        $this->emComercial->persist($historialSolicitud);
        $this->emComercial->flush();
    }

     /**
     * Funcion que busca en el repositorio IN_ARTICULOS_INSTALACION
     * el equipo que se encuentra en el Naf
     *
     * @param String              $serie
     * @param String              $modelo
     * @param String              $estado
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.1 2016-06-29 Retornar el modelo como parte del mensaje para presentarlo
     *                         Ajuste de parámetros para omitir el modelo en la búsqueda
     *
     * @author Modificado: John Vera <javera@telconet.ec>
     * @version 1.2 se verifica que en la descripcion no vayan comas para q funcione el split en el js
     *
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 se agrega flujo para equipos ya existenes que son consultado en el NAF (Proyecto CNE)
     * 
     * @author Modificado: Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.4 15-03-2023 se agrega flujo para equipos repotenciados presentes en NAF para Ecuanet.
     */
    public function buscarElementoEnNaf($serie, $modelo, $estado, $bandera)
    {
        //Obtiene prefijo para validar Flujo Ecuanet 
        $objRequest = $this->container->get('request');
        $objSession = $objRequest->getSession();
        $strPrefijoEmpresa = $objSession->get('prefijoEmpresa');

        //hacer busqueda no sensitive
        $parametros = array();
        $parametros['numeroSerie'] = strtoupper($serie);
        $parametros['estado'] = $estado;
        if($modelo != '')
        {
            $parametros['modelo'] = $modelo;
        }
        $cpeNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                ->findOneBy($parametros);
        if(!$cpeNaf)
        {
            $parametros['numeroSerie'] = strtolower($serie);
            $cpeNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                    ->findOneBy($parametros);
        }

        //buscamos en el naf de forma individual
        if($cpeNaf)
        {
            $arrayIdArticulo = explode( '-', $cpeNaf->getIdArticulo());
            if($arrayIdArticulo[0] != "MD" && $strPrefijoEmpresa == "EN")
            {
                $arrayRespuestaFinal[] = array('status' => 'ELEMENTO NO AUTORIZADO ',
                    'mensaje' => 'El Elemento con: <br>'
                    . 'Serie:<b>' . $serie . ' </b><br>'
                    . 'Modelo:<b>' . $modelo . ' </b><br>'
                    . 'Tiene saldo 0, <br>'
                    . 'No podrá continuar con el proceso, Elemento No Autorizado Favor Revisar! <br>');
                return $arrayRespuestaFinal;
            }
            else if($cpeNaf->getSaldo() == 0 && $bandera == "ActivarServicio")
            {
                $respuestaFinal[] = array('status' => 'ELEMENTO CON SALDO CERO',
                    'mensaje' => 'El Elemento con: <br>'
                    . 'Serie:<b>' . $serie . ' </b><br>'
                    . 'Modelo:<b>' . $modelo . ' </b><br>'
                    . 'Tiene saldo 0, <br>'
                    . 'No podrá continuar con el proceso, Favor Revisar! <br>');
                return $respuestaFinal;
            }
            else if($cpeNaf->getSaldo() != 0 && $bandera == "RetiroEquipo")
            {
                $respuestaFinal[] = array('status' => 'ELEMENTO CON SALDO DIFERENTE DE CERO',
                    'mensaje' => 'El Elemento con: <br>'
                    . 'Serie:<b>' . $serie . ' </b><br>'
                    . 'Modelo:<b>' . $modelo . ' </b><br>'
                    . 'Tiene saldo diferente a 0, <br>'
                    . 'No podrá continuar con el proceso, Favor Revisar! <br>');
                return $respuestaFinal;
            }
            else if($cpeNaf->getSaldo() != 0 && $bandera == "ActivarServicioExistente")
            {
                $respuestaFinal[] = array('status' => 'ELEMENTO CON SALDO DIFERENTE DE CERO',
                    'mensaje' => 'El Elemento con: <br>'
                    . 'Serie:<b>' . $serie . ' </b><br>'
                    . 'Modelo:<b>' . $modelo . ' </b><br>'
                    . 'Tiene saldo diferente a 0, <br>'
                    . 'No podrá continuar con el proceso, Favor Revisar! <br>');
                return $respuestaFinal;
            }
        }
        else
        {
            $respuestaFinal[] = array('status' => 'NO EXISTE ELEMENTO',
                'mensaje' => 'No existe Elemento con: <br>'
                . 'Serie:<b>' . $serie . ' </b><br>'
                . 'Modelo:<b>' . $modelo . ' </b><br>'
                . 'Estado:<b>' . $estado . ' </b><br>'
                . 'No podrá continuar con el proceso, Favor Revisar! <br>');
            return $respuestaFinal;
        }

        //Se consulta la marca y capacidad de entrada del modelo
        $strCapadidadEntrada = "0";
        $strMarca            = "0";
        if(!empty($modelo))
        {
            $objAdmiModeloElemento = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                                             ->findOneBy(array("nombreModeloElemento" => $modelo));

            if(is_object($objAdmiModeloElemento) && $objAdmiModeloElemento->getCapacidadEntrada()
                && $objAdmiModeloElemento->getUnidadMedidaEntrada())
            {
                $strCapadidadEntrada = $objAdmiModeloElemento->getCapacidadEntrada() . " ".$objAdmiModeloElemento->getUnidadMedidaEntrada();
                $strMarca            = $objAdmiModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
            }
        }

        $respuestaFinal[] = array('status' => 'OK',
            'mensaje' => str_replace(',', ' ', $cpeNaf->getDescripcion()) . "," . $cpeNaf->getMac() . "," . $cpeNaf->getModelo().
                                     "," . $strCapadidadEntrada. "," . $strMarca);
        return $respuestaFinal;
    }

    
    /**
     * Funcion que busca en el repositorio IN_ARTICULOS_INSTALACION
     * el equipo que se encuentra en el Naf
     *
     * @param String              $serie
     * 
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     * @author Creado: Jorge Gómez <jigomez@telconet.ec>
     * @version 1.0
     */

    public function buscarInfoEnNaf($strSerie, $intIdCustodio)
    {
        $strEstado = "PI";
        $arrayParametros = array();
        $arrayParametros['numeroSerie'] = strtoupper($strSerie);
        $arrayParametros['estado'] = $strEstado;
        $arrayParametros['id_custodio'] = $intIdCustodio;
        
        $objNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')->findOneBy($arrayParametros);
    
        if(!is_object($objNaf))
        {
            $arrayRespuestaFinal[] = array('status' => 'NO EXISTE CAMARA',
            'mensaje' => 'No existe Cámara con Serie: <b>' . $strSerie . ' </b><br>'
            . 'No podrá continuar con el proceso, Favor Revisar! <br>');
            return $arrayRespuestaFinal;
        }
       
        
       $arrayRespuestaFinal[] = array('status' => 'OK',
            'mensaje' => $objNaf->getModelo(). "," .$objNaf->getIdArticulo(). "," .$objNaf->getIdCustodio(). "," .$objNaf->getMac());

        return $arrayRespuestaFinal;
    }
    /**
     * Función usada para verificar estado de equipo en NAF de acuerdo a las validaciones existentes en AFK_PROCESOS.IN_P_PROCESA_INSTALACION
     *
     * @param array $arrayParametros [
     *                                  "serieEquipo"           => serial del equipo
     *                                  "estadoEquipo"          => estado del equipo
     *                                  "tipoArticuloEquipo"    => tipo de artículo del equipo
     *                                  "modeloEquipo"          => modelo del equipo
     *                                  "cantidadEquipo"        => cantidad requerida del equipo
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => mensaje de error
     *                               ]
     */
    public function buscarEquipoEnNafPorParametros($arrayParametros)
    {
        $arrayParamsEquipoABuscar   = array();
        $strParametrosEquipos       = "";
        $strMostrarErrorUsr         = "";
        $strMensaje                 = "";
        try
        {
            if(!isset($arrayParametros["cantidadEquipo"]) || empty($arrayParametros["cantidadEquipo"]))
            {
                $arrayParametros["cantidadEquipo"] = intval(1);
            }
            if(isset($arrayParametros["serieEquipo"]) && !empty($arrayParametros["serieEquipo"]))
            {
                $arrayParamsEquipoABuscar["numeroSerie"] = $arrayParametros["serieEquipo"];
                $strParametrosEquipos .= "Serie:<b>".$arrayParametros["serieEquipo"]."</b><br>";
            }
            if(isset($arrayParametros["estadoEquipo"]) && !empty($arrayParametros["estadoEquipo"]))
            {
                $arrayParamsEquipoABuscar["estado"] = $arrayParametros["estadoEquipo"];
                $strParametrosEquipos .= "Estado:<b>".$arrayParametros["estadoEquipo"]."</b><br>";
            }
            if(isset($arrayParametros["tipoArticuloEquipo"]) && !empty($arrayParametros["tipoArticuloEquipo"]))
            {
                $arrayParamsEquipoABuscar["tipoArticulo"] = $arrayParametros["tipoArticuloEquipo"];
                $strParametrosEquipos .= "Tipo de Artículo:<b>".$arrayParametros["tipoArticuloEquipo"]."</b><br>";
            }
            if(isset($arrayParametros["modeloEquipo"]) && !empty($arrayParametros["modeloEquipo"]))
            {
                $arrayParamsEquipoABuscar["modelo"] = $arrayParametros["modeloEquipo"];
                $strParametrosEquipos .= "Modelo:<b>".$arrayParametros["modeloEquipo"]."</b><br>";
            }
            if(!isset($arrayParamsEquipoABuscar) || empty($arrayParamsEquipoABuscar))
            {
                $strMostrarErrorUsr = "SI";
                throw new \Exception("No se ha podido consultar el equipo en el repositorio de NAF ya que no se han enviado los parámetros<br>");
            }
            $objEquipoEncontrado  = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')->findOneBy($arrayParamsEquipoABuscar);
            if(!is_object($objEquipoEncontrado))
            {
                $strMostrarErrorUsr = "SI";
                throw new \Exception("No se ha podido consultar el equipo en el repositorio de NAF con los siguientes datos enviados: <br>"
                                     .$strParametrosEquipos);
            }
            if(isset($arrayParametros["cantidadEquipo"]) && !empty($arrayParametros["cantidadEquipo"]))
            {
                $intSaldoEquipo = $objEquipoEncontrado->getSaldo();
                if(intval($arrayParametros["cantidadEquipo"]) > intval($intSaldoEquipo))
                {
                    $strMostrarErrorUsr = "SI";
                    throw new \Exception("El equipo fue obtenido en el repositorio de NAF, pero no cuenta con Stock suficiente.<br>".
                                         $strParametrosEquipos.
                                         "Saldo:<b>".$intSaldoEquipo."</b><br>");
                }
            }
            else
            {
                $strMostrarErrorUsr = "SI";
                throw new \Exception("No se ha enviado la cantidad solicitada del equipo. ");
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus = "ERROR";
            if($strMostrarErrorUsr === "SI")
            {
                $strMensaje = $e->getMessage();
            }
            else
            {
                $strMensaje = "Ha ocurrido un error inesperado al consultar el equipo en el repositorio de NAF. ";
                error_log($strMensaje.$e->getMessage());
            }
            $strMensaje .= "No podrá continuar con el proceso, por favor notificar a Sistemas! <br>";
        }
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que busca en el repositorio IN_ARTICULOS_INSTALACION
     * el equipo que se encuentra en el Naf
     *
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 24-05-2016    Se agrega recuperacion de interface wlan1 para elemento Radio
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 29-06-2016    Se agrega validacion para que cuando sea cambio UM no cree CPE solo enlace
     *
     * @param $arrayParametros [nombreElementoCliente,nombreModeloElementoCliente,serieElementoCliente,objInterfaceElementoVecinoOut,
     *                          objUltimaMilla,objServicio,intIdEmpresa,usrCreacion,ipCreacion]
     * @return Object  Retorna Objeto de Interface de elemento creado
     * @since 1.0
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.2 2016-06-28 Validación para TN, cuando no exista 'objInterfaceElementoVecinoOut' no crear enlace.
     *                         Cubrir escenario cuando el CPE no este con ROSETA de por medio,
     *                         se lo asigna directamente a elemento_cliente_id
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.3 2016-07-01 Cuando se Radio no crear enlace.
     *
     * @author Modificado: Allan Suarez C <arsuarez@telconet.ec>
     * @version 1.4 2016-09-13 Se valida por nombre de interfaz a realizar el enlace con nuevo CPE ( Si es cambio de equipo usa la interface
     *                         que le usuario escoja caso contrario ( Activacion ) usa la wan1 por default )
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.5 2016-09-15 Eliminar 'PHP Notice:  Undefined index: esFlujoNormal'
     *                         Obtener el nombre elemento una vez para realizar las comparaciones
     *                         Cambiar la interface wan1 quemado por el parámetro 'interface' enviado
     *                         Incluir que el conteo de interfaces inicie en 0 y que se reinicie cuando sean de tipo 'Modular'
     *                         Agregar la MAC como dato para registrar en las interfaces Wan
     *
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.6 2016-09-24 - Se introdujo nueva función para la creación de las Interfaces del elemento
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.7
     * @since 08-10-2016    Se corrije obtencion de interface de servicio configurado para poder enlazar con cpe y tx correctamente
     *
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.8 2016-10-10 - Se incluye tipo elemento 'CPE WIFI' para la creación de enlaces
     *                           Se incluye posibilidad de cambiar de 'CPE WIFI' a 'CPE'
     *                           Se agrega validación para verificar la existencia de $objModeloElementoCliente y $objTipoElementoCliente
     *
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.9 2016-10-25 - Se coloca filtro para buscar dada una interface exsitente que esta sea de Tipo Wan para poder enlazar los
     *                           servicios y poder relacionar la mac correspondiente
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.0 27-02-2018 Se registra tracking del elemento
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.1 06-11-2020 Si no existen interfaces relacionadas al elemento seleccionado debe mostrar mensaje de error sobre la novedad 
     *                         mencionada.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.2 11-05-2021 - Se registra los dispositivos del cliente que pertenecen al nodo.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.3 18-10-2021 - Se registra los dispositivos del cliente que pertenecen al AP WIFI GPON_MPLS.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.4 01-08-2022 - Se registra los dispositivos del cliente que pertenecen al producto SAFE ANALYTICS CAM.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.5 22-09-2022 - Se registra la auditoría de elementos para los servicios SAFE CITY.
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 2.6 09-12-2022 - Se agrega la validacion para el producto SAFE ENTRY
     *
     */
    public function ingresarElementoClienteTN($arrayParametros, $tipoElemento = "")
    {
        $boolEsUbicacionNodo       = $arrayParametros['boolEsUbicacionNodo'];
        $boolPerteneceElementoNodo = $arrayParametros['boolPerteneceElementoNodo'];
        $arrayParametrosAuditoria  = array();
        $arrayParametros["banderaCamaraSafeCity"] = isset($arrayParametros["banderaCamaraSafeCity"])
                                                    ? $arrayParametros["banderaCamaraSafeCity"] : null;
        $arrayParametros["banderaWifiSafecity"]   = isset($arrayParametros["banderaWifiSafecity"])
                                                    ? $arrayParametros["banderaWifiSafecity"] : null;
        $arrayParametros["banderaCamaraVpnSafecity"] = isset($arrayParametros["banderaCamaraVpnSafecity"])
                                                     ? $arrayParametros["banderaCamaraVpnSafecity"] : null;

        if($tipoElemento)
        {
            $objTipoElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')
                    ->findOneBy(array(
                "nombreTipoElemento" => $tipoElemento,
                "estado" => "Activo"
                    )
            );
            if(is_object($objTipoElementoCliente))
            {
                $objModeloElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                        ->findOneBy(array(
                    "nombreModeloElemento" => $arrayParametros['nombreModeloElementoCliente'],
                    "tipoElementoId" => $objTipoElementoCliente->getId(),
                    "estado" => "Activo"
                        )
                );
            }
            //incluir posibilidad de cambiar de 'CPE WIFI' a 'CPE'
            if($tipoElemento == "CPE WIFI" && !is_object($objModeloElementoCliente))
            {
                $tipoElemento = "CPE";
                $objTipoElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')
                        ->findOneBy(array("nombreTipoElemento" => $tipoElemento,
                    "estado" => "Activo"
                ));

                if(is_object($objTipoElementoCliente))
                {
                    $objModeloElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                            ->findOneBy(array("nombreModeloElemento" => $arrayParametros['nombreModeloElementoCliente'],
                        "tipoElementoId" => $objTipoElementoCliente->getId(),
                        "estado" => "Activo"
                    ));
                }
            }
        }
        else
        {
            $objModeloElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                    ->findOneBy(array(
                "nombreModeloElemento" => $arrayParametros['nombreModeloElementoCliente'],
                "estado" => "Activo"
                    )
            );
        }

        if(!is_object($objModeloElementoCliente))
        {
            return "ERROR: No existe el modelo '" . $arrayParametros['nombreModeloElementoCliente'] . "'" .
                    ($tipoElemento ? (" para el tipo elemento '" . $tipoElemento . "'") : "");
        }

        //buscar modelo de elemento cliente
        $boolFlujoNormal = true;
        //Si enviena variable obtiene el valor de ahi caso contrario devuelve true para seguir flujo normal ( Solo Cpe Cambio de UM )
        if(isset($arrayParametros['esFlujoNormal']) && $arrayParametros['esFlujoNormal'] == "NO")
        {
            $boolFlujoNormal = false;
            $elementoCpe = $arrayParametros['objElementoCpe'];
        }

        if ($boolFlujoNormal)
        {
            //grabar elemento cliente
            $strDescripcionElemento = $boolPerteneceElementoNodo ? "elemento nodo" : "dispositivo cliente";
            $elementoCpe = new InfoElemento();
            $elementoCpe->setNombreElemento($arrayParametros['nombreElementoCliente']);
            $elementoCpe->setDescripcionElemento($strDescripcionElemento);
            $elementoCpe->setModeloElementoId($objModeloElementoCliente);
            $elementoCpe->setSerieFisica($arrayParametros['serieElementoCliente']);
            $elementoCpe->setEstado("Activo");
            $elementoCpe->setUsrResponsable($arrayParametros['usrCreacion']);
            $elementoCpe->setUsrCreacion($arrayParametros['usrCreacion']);
            $elementoCpe->setFeCreacion(new \DateTime('now'));
            $elementoCpe->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($elementoCpe);
            $this->emInfraestructura->flush();

            //SE REGISTRA EL TRACKING DEL ELEMENTO
            if ($arrayParametros['serieElementoCliente'] != "00000"
                && ($tipoElemento == "TRANSCEIVER" || $tipoElemento == "RADIO" || $tipoElemento == "CPE" || $boolEsUbicacionNodo
                    || $arrayParametros["banderaCamaraSafeCity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
                    || $arrayParametros["banderaCamaraVpnSafecity"] == "S"))
            {
                $strUbicacion   = $boolEsUbicacionNodo       ? 'Nodo' : 'Cliente';
                $strTransaccion = $boolPerteneceElementoNodo ? 'Instalacion elemento nodo' : 'Activacion Cliente';

                $arrayParametrosAuditoria = array();
                $arrayParametrosAuditoria["boolPerteneceElementoNodo"] =  $boolPerteneceElementoNodo;
                $arrayParametrosAuditoria["strUsrCreacion"]            =  $arrayParametros['usrCreacion'];
                $arrayParametrosAuditoria["strNumeroSerie"]            =  $arrayParametros['serieElementoCliente'];
                $arrayParametrosAuditoria["strEstadoTelcos"]           = 'Activo';
                $arrayParametrosAuditoria["strEstadoNaf"]              = 'Instalado';
                $arrayParametrosAuditoria["strEstadoActivo"]           = 'Activo';
                $arrayParametrosAuditoria["strUbicacion"]              =  $strUbicacion;
                $arrayParametrosAuditoria["strCodEmpresa"]             = '10';
                $arrayParametrosAuditoria["strTransaccion"]            =  $strTransaccion;
                $arrayParametrosAuditoria["intOficinaId"]              =  0;

                //Si no pertenece a NODO
                //Se consulta el login del cliente
                if (!$boolPerteneceElementoNodo && is_object($arrayParametros['objServicio']))
                {

                    //Si ubicacion es NODO
                    if($boolEsUbicacionNodo)
                    {

                        $objInfoServicioTecnico2 = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                           ->findOneBy(array('servicioId' => $arrayParametros['objServicio']->getId(),'tipoEnlace' => 'PRINCIPAL'));

                        //En caso que no se obtenga la información técnica del servicio principal, obtener el del BACKUP.
                        if (!is_object($objInfoServicioTecnico2))
                        {
                            $objInfoServicioTecnico2 = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                    ->findOneBy(array('servicioId' => $arrayParametros['objServicio']->getId(),'tipoEnlace' => 'BACKUP'));
                        }

                        if (is_object($objInfoServicioTecnico2) && $objInfoServicioTecnico2->getElementoId() !== null)
                        {
                            //Obtenemos el elemento que se encuentra en el nodo para obtener la misma referencia.
                            $intElementoId2          = $objInfoServicioTecnico2->getElementoId();
                            $arrayElementoAntecesor2 = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                    ->obtenerElementoAntecesor(array('intIdElemento' => $intElementoId2, 'strEstado' => 'Activo'));

                            //Si tiene relacion con nodo
                            if (isset($arrayElementoAntecesor2['elementoIdB']) && !empty($arrayElementoAntecesor2['elementoIdB']))
                            {
                               
                                //Se obtiene el nodo
                                $objInfoElementoNodo2 = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                ->find($arrayElementoAntecesor2['elementoIdA']);
            
                                if (is_object($objInfoElementoNodo2))
                                {
                                    $arrayParametrosAuditoria["strNombreNodo"] = $objInfoElementoNodo2->getNombreElemento();
                                }  

                            }
                        }

                        $objInfoPunto = $this->emInfraestructura->getRepository('schemaBundle:InfoPunto')
                        ->find($arrayParametros['objServicio']->getPuntoId()->getId());

                        if (is_object($objInfoPunto))
                        {
                            //Obtenemos la identificación del cliente.
                            $strCedulaCliente = is_object($objInfoPunto->getPersonaEmpresaRolId())     ?
                                    is_object($objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()) ?
                                    $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()->getIdentificacionCliente() : "" : "";

                            $arrayParametrosAuditoria["strLogin"]         = $objInfoPunto->getLogin();
                            $arrayParametrosAuditoria["strCedulaCliente"] = $strCedulaCliente;
                        }
                    }
                    else
                    {

                        $objInfoPunto = $this->emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                ->find($arrayParametros['objServicio']->getPuntoId()->getId());

                        if (is_object($objInfoPunto))
                        {
                            //Obtenemos la identificación del cliente.
                            $strCedulaCliente = is_object($objInfoPunto->getPersonaEmpresaRolId())     ?
                                    is_object($objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()) ?
                                    $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()->getIdentificacionCliente() : "" : "";

                            $arrayParametrosAuditoria["strLogin"]         = $objInfoPunto->getLogin();
                            $arrayParametrosAuditoria["strCedulaCliente"] = $strCedulaCliente;
                        }
                    }
                }

                //Se verifica si el elemento pertenece al nodo.
                if ($boolPerteneceElementoNodo && !empty($arrayParametros['intIdElementoNodo']))
                {
                    $objInfoElementoNodo = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                            ->find($arrayParametros['intIdElementoNodo']);

                    if (is_object($objInfoElementoNodo))
                    {
                        $arrayParametrosAuditoria["strLogin"] = $objInfoElementoNodo->getNombreElemento();
                    }
                }

                $this->serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
            }

            //PARA LOS DISPOSITIVOS DEL CLIENTE QUE PERTENECEN AL NODO, NO SE CREA INTERFACES.
            if (!$boolEsUbicacionNodo)
            {
                //buscar el interface Modelo
                $this->crearInterfacesElemento(array('intModeloElementoId' => $objModeloElementoCliente->getId(),
                    'strTipoElemento' => $tipoElemento,
                    'objElemento' => $elementoCpe,
                    'strUsrCreacion' => $arrayParametros['usrCreacion'],
                    'strIpCreacion' => $arrayParametros['ipCreacion'],
                    'strMacElemento' => isset($arrayParametros['macElementoCliente']) ?
                            $arrayParametros['macElementoCliente'] : ""
                ));
            }
        }

        //PARA LOS DISPOSITIVOS DEL CLIENTE QUE PERTENECEN AL NODO. (NO SE CREA ENLACES)
        if ($boolEsUbicacionNodo && $boolFlujoNormal && is_object($elementoCpe)
                && is_object($arrayParametros['objServicio']) && !$boolPerteneceElementoNodo)
        {
            $intIdServicio     = $arrayParametros['objServicio']->getId();
            $intIdEmpresa      = $arrayParametros['intIdEmpresa'];
            $strUsuario        = $arrayParametros['usrCreacion'];
            $strIpUsuario      = $arrayParametros['ipCreacion'];
            $strMacDispositivo = $arrayParametros['strMacDispositivo'];

            $objHistorialElemento = new InfoHistorialElemento();
            $objHistorialElemento->setElementoId($elementoCpe);
            $objHistorialElemento->setObservacion("Se ingreso un elemento");
            $objHistorialElemento->setEstadoElemento("Activo");
            $objHistorialElemento->setUsrCreacion($strUsuario);
            $objHistorialElemento->setIpCreacion($strIpUsuario);
            $objHistorialElemento->setFeCreacion(new \DateTime('now'));
            $this->emInfraestructura->persist($objHistorialElemento);
            $this->emInfraestructura->flush();

            $this->ingresarDetalleElemento($elementoCpe,'SERVICIO','ID DEL SERVICIO',$intIdServicio,$strUsuario,$strIpUsuario);
            $this->ingresarDetalleElemento($elementoCpe,'UBICACION','UBICACION DEL DISPOSITIVO','Nodo',$strUsuario,$strIpUsuario);
            $this->ingresarDetalleElemento($elementoCpe,'MAC','MAC DEL DISPOSITIVO',$strMacDispositivo,$strUsuario,$strIpUsuario);

            $objInfoServicioTecnico = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                    ->findOneBy(array('servicioId' => $intIdServicio,'tipoEnlace' => 'PRINCIPAL'));

            //En caso que no se obtenga la información técnica del servicio principal, obtener el del BACKUP.
            if (!is_object($objInfoServicioTecnico))
            {
                 $objInfoServicioTecnico = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                         ->findOneBy(array('servicioId' => $intIdServicio,'tipoEnlace' => 'BACKUP'));
            }

            if (is_object($objInfoServicioTecnico) && $objInfoServicioTecnico->getElementoId() !== null)
            {
                 //Obtenemos el elemento que se encuentra en el nodo para obtener la misma referencia.
                 $intElementoId          = $objInfoServicioTecnico->getElementoId();
                 $arrayElementoAntecesor = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                         ->obtenerElementoAntecesor(array('intIdElemento' => $intElementoId, 'strEstado' => 'Activo'));

                 if (isset($arrayElementoAntecesor['elementoIdB']) && !empty($arrayElementoAntecesor['elementoIdB']))
                 {
                     $intIdElementoNodo = $arrayElementoAntecesor['elementoIdA'];

                     //Nueva relación elemento.
                     $objRelacionElementoNuevo = new InfoRelacionElemento();
                     $objRelacionElementoNuevo->setEstado("Activo");
                     $objRelacionElementoNuevo->setElementoIdA($intIdElementoNodo);
                     $objRelacionElementoNuevo->setElementoIdB($elementoCpe->getId());
                     $objRelacionElementoNuevo->setTipoRelacion("CONTIENE");
                     $objRelacionElementoNuevo->setObservacion("Nodo contiene nuevo elemento");
                     $objRelacionElementoNuevo->setUsrCreacion($strUsuario);
                     $objRelacionElementoNuevo->setIpCreacion($strIpUsuario);
                     $objRelacionElementoNuevo->setFeCreacion(new \DateTime('now'));
                     $this->emInfraestructura->persist($objRelacionElementoNuevo);
                     $this->emInfraestructura->flush();

                     //Se registra el nuevo historial de la relación del elemento.
                     $objHistorialElemento = new InfoHistorialElemento();
                     $objHistorialElemento->setElementoId($elementoCpe);
                     $objHistorialElemento->setEstadoElemento("Activo");
                     $objHistorialElemento->setObservacion("Se crea la relación con el nodo");
                     $objHistorialElemento->setUsrCreacion($strUsuario);
                     $objHistorialElemento->setIpCreacion($strIpUsuario);
                     $objHistorialElemento->setFeCreacion(new \DateTime('now'));
                     $this->emInfraestructura->persist($objHistorialElemento);
                     $this->emInfraestructura->flush();

                     //Registramos la ubicacion del elemento.
                     $objElementoUbicaNodo = $this->emInfraestructura->getRepository('schemaBundle:InfoEmpresaElementoUbica')
                             ->findOneBy(array('elementoId' => $intIdElementoNodo,'empresaCod' => $intIdEmpresa));

                     if (is_object($objElementoUbicaNodo))
                     {
                         $objInfoEmpresaElementoUbica = new InfoEmpresaElementoUbica();
                         $objInfoEmpresaElementoUbica->setEmpresaCod($intIdEmpresa);
                         $objInfoEmpresaElementoUbica->setElementoId($elementoCpe);
                         $objInfoEmpresaElementoUbica->setUbicacionId($objElementoUbicaNodo->getUbicacionId());
                         $objInfoEmpresaElementoUbica->setUsrCreacion($strUsuario);
                         $objInfoEmpresaElementoUbica->setIpCreacion($strIpUsuario);
                         $objInfoEmpresaElementoUbica->setFeCreacion(new \DateTime('now'));
                         $this->emInfraestructura->persist($objInfoEmpresaElementoUbica);
                         $this->emInfraestructura->flush();

                         $objInfoEmpresaElemento = new InfoEmpresaElemento();
                         $objInfoEmpresaElemento->setElementoId($elementoCpe);
                         $objInfoEmpresaElemento->setEmpresaCod($intIdEmpresa);
                         $objInfoEmpresaElemento->setEstado("Activo");
                         $objInfoEmpresaElemento->setUsrCreacion($strUsuario);
                         $objInfoEmpresaElemento->setIpCreacion($strIpUsuario);
                         $objInfoEmpresaElemento->setFeCreacion(new \DateTime('now'));
                         $this->emInfraestructura->persist($objInfoEmpresaElemento);
                         $this->emInfraestructura->flush();
                     }
                 }
            }
        }

        //PARA LOS ELEMENTOS QUE PERTENECEN AL NODO. (NO SE CREA ENLACES)
        if ($boolEsUbicacionNodo && $boolFlujoNormal && is_object($elementoCpe) && $boolPerteneceElementoNodo)
        {
            $intIdEmpresa        = $arrayParametros['intIdEmpresa'];
            $strUsuario          = $arrayParametros['usrCreacion'];
            $strIpUsuario        = $arrayParametros['ipCreacion'];
            $strMacDispositivo   = $arrayParametros['strMacDispositivo'];
            $intIdElementoNodo   = $arrayParametros['intIdElementoNodo'];
            $intIdElementoActual = $arrayParametros['intIdElementoActual'];

            $objHistorialElemento = new InfoHistorialElemento();
            $objHistorialElemento->setElementoId($elementoCpe);
            $objHistorialElemento->setObservacion("Se ingreso un elemento");
            $objHistorialElemento->setEstadoElemento("Activo");
            $objHistorialElemento->setUsrCreacion($strUsuario);
            $objHistorialElemento->setIpCreacion($strIpUsuario);
            $objHistorialElemento->setFeCreacion(new \DateTime('now'));
            $this->emInfraestructura->persist($objHistorialElemento);
            $this->emInfraestructura->flush();

            $this->ingresarDetalleElemento($elementoCpe,'UBICACION','UBICACION DEL DISPOSITIVO','Nodo',$strUsuario,$strIpUsuario);
            $this->ingresarDetalleElemento($elementoCpe,'MAC','MAC DEL ELEMENTO',$strMacDispositivo,$strUsuario,$strIpUsuario);

            if (!empty($intIdElementoActual))
            {
                $arrayInfoRelacionElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                        ->findBy(array('elementoIdA' => $intIdElementoActual,'estado' => 'Activo'));

                foreach ($arrayInfoRelacionElemento as $objInfoRelacionElemento)
                {
                    $objRelacionElementoNuevo = new InfoRelacionElemento();
                    $objRelacionElementoNuevo->setElementoIdA($elementoCpe->getId());
                    $objRelacionElementoNuevo->setElementoIdB($objInfoRelacionElemento->getElementoIdB());
                    $objRelacionElementoNuevo->setTipoRelacion("CONTIENE");
                    $objRelacionElementoNuevo->setObservacion("Nodo contiene nuevo elemento");
                    $objRelacionElementoNuevo->setEstado("Activo");
                    $objRelacionElementoNuevo->setUsrCreacion($strUsuario);
                    $objRelacionElementoNuevo->setIpCreacion($strIpUsuario);
                    $objRelacionElementoNuevo->setFeCreacion(new \DateTime('now'));
                    $this->emInfraestructura->persist($objRelacionElementoNuevo);
                    $this->emInfraestructura->flush();
                }
            }

            if (!empty($intIdElementoNodo))
            {
                $objInfoElementoNodo = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                        ->find($intIdElementoNodo);

                if (is_object($objInfoElementoNodo))
                {
                    //Nueva relación elemento.
                    $objRelacionElementoNuevo = new InfoRelacionElemento();
                    $objRelacionElementoNuevo->setElementoIdA($objInfoElementoNodo->getId());
                    $objRelacionElementoNuevo->setElementoIdB($elementoCpe->getId());
                    $objRelacionElementoNuevo->setTipoRelacion("CONTIENE");
                    $objRelacionElementoNuevo->setObservacion("Nodo contiene nuevo elemento");
                    $objRelacionElementoNuevo->setEstado("Activo");
                    $objRelacionElementoNuevo->setUsrCreacion($strUsuario);
                    $objRelacionElementoNuevo->setIpCreacion($strIpUsuario);
                    $objRelacionElementoNuevo->setFeCreacion(new \DateTime('now'));
                    $this->emInfraestructura->persist($objRelacionElementoNuevo);
                    $this->emInfraestructura->flush();

                    //Se registra el historial de la relación del elemento.
                    $objHistorialElemento = new InfoHistorialElemento();
                    $objHistorialElemento->setElementoId($elementoCpe);
                    $objHistorialElemento->setEstadoElemento($elementoCpe->getEstado());
                    $objHistorialElemento->setObservacion("Se crea la relación con el nodo");
                    $objHistorialElemento->setUsrCreacion($strUsuario);
                    $objHistorialElemento->setIpCreacion($strIpUsuario);
                    $objHistorialElemento->setFeCreacion(new \DateTime('now'));
                    $this->emInfraestructura->persist($objHistorialElemento);
                    $this->emInfraestructura->flush();

                    //Se registra el historial del nuevo elemento que se esta dejando en el nodo.
                    $strObservacionHistEle = "Se crea un nuevo elemento: "
                                         ." - Nombre: ".$elementoCpe->getNombreElemento()
                                         ." - Serie:  ".$elementoCpe->getSerieFisica()
                                         ." - Modelo: ".$elementoCpe->getModeloElementoId()->getNombreModeloElemento();

                    $objHistorialElementoNodo = new InfoHistorialElemento();
                    $objHistorialElementoNodo->setElementoId($objInfoElementoNodo);
                    $objHistorialElementoNodo->setEstadoElemento($objInfoElementoNodo->getEstado());
                    $objHistorialElementoNodo->setObservacion($strObservacionHistEle);
                    $objHistorialElementoNodo->setUsrCreacion($strUsuario);
                    $objHistorialElementoNodo->setIpCreacion($strIpUsuario);
                    $objHistorialElementoNodo->setFeCreacion(new \DateTime('now'));
                    $this->emInfraestructura->persist($objHistorialElementoNodo);
                    $this->emInfraestructura->flush();

                    //Registramos la ubicación del elemento.
                    $objElementoUbicaNodo = $this->emInfraestructura->getRepository('schemaBundle:InfoEmpresaElementoUbica')
                            ->findOneBy(array('elementoId' => $intIdElementoNodo,'empresaCod' => $intIdEmpresa));

                    if (is_object($objElementoUbicaNodo))
                    {
                        $objInfoEmpresaElementoUbica = new InfoEmpresaElementoUbica();
                        $objInfoEmpresaElementoUbica->setEmpresaCod($intIdEmpresa);
                        $objInfoEmpresaElementoUbica->setElementoId($elementoCpe);
                        $objInfoEmpresaElementoUbica->setUbicacionId($objElementoUbicaNodo->getUbicacionId());
                        $objInfoEmpresaElementoUbica->setUsrCreacion($strUsuario);
                        $objInfoEmpresaElementoUbica->setIpCreacion($strIpUsuario);
                        $objInfoEmpresaElementoUbica->setFeCreacion(new \DateTime('now'));
                        $this->emInfraestructura->persist($objInfoEmpresaElementoUbica);
                        $this->emInfraestructura->flush();

                        $objInfoEmpresaElemento = new InfoEmpresaElemento();
                        $objInfoEmpresaElemento->setElementoId($elementoCpe);
                        $objInfoEmpresaElemento->setEmpresaCod($intIdEmpresa);
                        $objInfoEmpresaElemento->setEstado("Activo");
                        $objInfoEmpresaElemento->setUsrCreacion($strUsuario);
                        $objInfoEmpresaElemento->setIpCreacion($strIpUsuario);
                        $objInfoEmpresaElemento->setFeCreacion(new \DateTime('now'));
                        $this->emInfraestructura->persist($objInfoEmpresaElemento);
                        $this->emInfraestructura->flush();
                    }
                }
            }
        }

        //SI LA UBICACIÓN DEL ELEMENTO ES EN EL NODO, SE CULMINA EL PROCESO
        if ($boolEsUbicacionNodo)
        {
            return;
        }

        //enlaces
        $objInterfaceElementoClienteOut = "";
        $nombreTipoElemento = $objModeloElementoCliente->getTipoElementoId()->getNombreTipoElemento();
        if($nombreTipoElemento == "ROSETA")
        {
            $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                    ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                "nombreInterfaceElemento" => "IN 1"));
            
            if(!is_object($objInterfaceElementoClienteIn))
            {
                return $objInterfaceElementoClienteIn;
            }

            $objInterfaceElementoClienteOut = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                    ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                "nombreInterfaceElemento" => "OUT 1"));
            
            if(!is_object($objInterfaceElementoClienteOut))
            {
                return $objInterfaceElementoClienteOut;
            }

            //enlace con el elemento vecino
            $enlace = new InfoEnlace();
            $enlace->setInterfaceElementoIniId($arrayParametros['objInterfaceElementoVecinoOut']);
            $enlace->setInterfaceElementoFinId($objInterfaceElementoClienteIn);
            $enlace->setTipoMedioId($arrayParametros['objUltimaMilla']);
            $enlace->setTipoEnlace("PRINCIPAL");
            $enlace->setEstado("Activo");
            $enlace->setUsrCreacion($arrayParametros['usrCreacion']);
            $enlace->setFeCreacion(new \DateTime('now'));
            $enlace->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($enlace);

            //conectar interface in
            $objInterfaceElementoClienteIn->setEstado("connected");
            $this->emInfraestructura->persist($objInterfaceElementoClienteIn);

            //enlace interno
            $enlaceInterno = new InfoEnlace();
            $enlaceInterno->setInterfaceElementoIniId($objInterfaceElementoClienteIn);
            $enlaceInterno->setInterfaceElementoFinId($objInterfaceElementoClienteOut);
            $enlaceInterno->setTipoMedioId($arrayParametros['objUltimaMilla']);
            $enlaceInterno->setTipoEnlace("PRINCIPAL");
            $enlaceInterno->setEstado("Activo");
            $enlaceInterno->setUsrCreacion($arrayParametros['usrCreacion']);
            $enlaceInterno->setFeCreacion(new \DateTime('now'));
            $enlaceInterno->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($enlaceInterno);
            $this->emInfraestructura->flush();
        }
        else if($nombreTipoElemento == "TRANSCEIVER")
        {
            $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                    ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                "nombreInterfaceElemento" => "IN 1"));
            
            if(!is_object($objInterfaceElementoClienteIn))
            {
                return $objInterfaceElementoClienteIn;
            }

            $objInterfaceElementoClienteOut = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                    ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                "nombreInterfaceElemento" => "eth1"));
            
            if(!is_object($objInterfaceElementoClienteOut))
            {
                return $objInterfaceElementoClienteOut;
            }

            //enlace con el elemento vecino
            $enlace = new InfoEnlace();
            $enlace->setInterfaceElementoIniId($arrayParametros['objInterfaceElementoVecinoOut']);
            $enlace->setInterfaceElementoFinId($objInterfaceElementoClienteIn);
            $enlace->setTipoMedioId($arrayParametros['objUltimaMilla']);
            $enlace->setTipoEnlace("PRINCIPAL");
            $enlace->setEstado("Activo");
            $enlace->setUsrCreacion($arrayParametros['usrCreacion']);
            $enlace->setFeCreacion(new \DateTime('now'));
            $enlace->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($enlace);

            //conectar interface in
            $objInterfaceElementoClienteIn->setEstado("connected");
            $this->emInfraestructura->persist($objInterfaceElementoClienteIn);

            //enlace interno
            $enlaceInterno = new InfoEnlace();
            $enlaceInterno->setInterfaceElementoIniId($objInterfaceElementoClienteIn);
            $enlaceInterno->setInterfaceElementoFinId($objInterfaceElementoClienteOut);
            $enlaceInterno->setTipoMedioId($arrayParametros['objUltimaMilla']);
            $enlaceInterno->setTipoEnlace("PRINCIPAL");
            $enlaceInterno->setEstado("Activo");
            $enlaceInterno->setUsrCreacion($arrayParametros['usrCreacion']);
            $enlaceInterno->setFeCreacion(new \DateTime('now'));
            $enlaceInterno->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($enlaceInterno);
            $this->emInfraestructura->flush();
        }
        else if(($nombreTipoElemento == "CPE" || $nombreTipoElemento == "ROUTER" || $nombreTipoElemento == "CPE WIFI") && 
            $arrayParametros["banderaCamaraSafeCity"] != "S" && $arrayParametros["banderaWifiSafecity"] != "S" &&
            $arrayParametros["banderaCamaraVpnSafecity"] != "S")
        {
            $objInterfaceElementoClienteIn = null;
            //enlace con el elemento vecino en caso de existir
            if($arrayParametros['objInterfaceElementoVecinoOut'])
            {
                if(isset($arrayParametros['esServicioNuevo']) && $arrayParametros['esServicioNuevo'] == "SI")
                {
                    if ($arrayParametros['strTipoOrden'] == "T" && $arrayParametros['strTipoEnlace'] == "BACKUP")
                    {
                        $nombreInterfaceInicial = 'wan2';
                    }
                    else
                    {
                        $nombreInterfaceInicial = 'wan1';
                    }

                    //Se determina que interface se requiere conectar ( cambio de equipo )
                    if(isset($arrayParametros['interface']) && $arrayParametros['interface'])
                    {
                        $nombreInterfaceInicial = $arrayParametros['interface'];
                    }

                    //Obtiene por primera vez el puerto wan1 para activar el servicio
                    $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                            ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                        "nombreInterfaceElemento" => $nombreInterfaceInicial,
                        "descripcionInterfaceElemento" => "Wan",
                        "estado" => "not connect")
                    );
                }
                else //Si se trata de obtener la interface WAN conectada de un servicio ya existente se envia servicioId para la busqueda
                {
                    $arrayRespuesta = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                            ->getMacCpePorServicioInterface($arrayParametros['objServicio']->getId());

                    if($arrayRespuesta)
                    {
                        $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                ->find($arrayRespuesta['idInterface']);
                    }
                }

                if(is_object($objInterfaceElementoClienteIn))
                {
                    $objInterfaceElementoClienteOut = $objInterfaceElementoClienteIn;

                    $enlace = new InfoEnlace();
                    $enlace->setInterfaceElementoIniId($arrayParametros['objInterfaceElementoVecinoOut']);
                    $enlace->setInterfaceElementoFinId($objInterfaceElementoClienteIn);
                    $enlace->setTipoMedioId($arrayParametros['objUltimaMilla']);
                    $enlace->setTipoEnlace("PRINCIPAL");
                    $enlace->setEstado("Activo");
                    $enlace->setUsrCreacion($arrayParametros['usrCreacion']);
                    $enlace->setFeCreacion(new \DateTime('now'));
                    $enlace->setIpCreacion($arrayParametros['ipCreacion']);
                    $this->emInfraestructura->persist($enlace);

                    //conectar interface in
                    $objInterfaceElementoClienteIn->setEstado("connected");
                    $this->emInfraestructura->persist($objInterfaceElementoClienteIn);
                    $this->emInfraestructura->flush();
                }
                else
                {
                    return "ERROR: No existen interfaces Wan para el modelo " . $arrayParametros['nombreModeloElementoCliente'];
                }
            }
            else//En caso de no ser necesario enlace
            {
                $objServicio = $arrayParametros['objServicio'];
                if($objServicio->getElementoConectorId())//Asegurar que no exista ROSETA de por medio
                {
                    //Actualizar CPE en la Informacion Tecnica
                    $objServicio->setElementoClienteId($elementoCpe);
                    $this->emInfraestructura->persist($objServicio);
                    $this->emInfraestructura->flush();
                }
            }
        }
        else if($nombreTipoElemento == "RADIO")
        {
            if($arrayParametros['objInterfaceElementoVecinoOut'])
            {
                $objInterfaceElementoClienteOut = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                        ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                    "nombreInterfaceElemento" => 'wlan1'));
                
                if(!is_object($objInterfaceElementoClienteOut))
                {
                    return $objInterfaceElementoClienteOut;
                }
                //conectar interface in
                $objInterfaceElementoClienteOut->setEstado("connected");
                $this->emInfraestructura->persist($objInterfaceElementoClienteOut);
                $this->emInfraestructura->flush();

                $objInterfaceElementoClienteEspOut = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                        ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                    "nombreInterfaceElemento" => 'esp1'));
                
                if(!is_object($objInterfaceElementoClienteEspOut))
                {
                    return $objInterfaceElementoClienteEspOut;
                }

                //enlace con el elemento vecino
                $enlace = new InfoEnlace();
                $enlace->setInterfaceElementoIniId($arrayParametros['objInterfaceElementoVecinoOut']);
                $enlace->setInterfaceElementoFinId($objInterfaceElementoClienteEspOut);
                $enlace->setTipoMedioId($arrayParametros['objUltimaMilla']);
                $enlace->setTipoEnlace("PRINCIPAL");
                $enlace->setEstado("Activo");
                $enlace->setUsrCreacion($arrayParametros['usrCreacion']);
                $enlace->setFeCreacion(new \DateTime('now'));
                $enlace->setIpCreacion($arrayParametros['ipCreacion']);
                $this->emInfraestructura->persist($enlace);

                //conectar interface in
                $objInterfaceElementoClienteEspOut->setEstado("connected");
                $this->emInfraestructura->persist($objInterfaceElementoClienteEspOut);
                $this->emInfraestructura->flush();
            }
        }

        if($arrayParametros["banderaCamaraSafeCity"] == "S" || $arrayParametros["banderaWifiSafecity"] == "S"
           || $arrayParametros["banderaCamaraVpnSafecity"] == "S")
        {
            //Obtener el elemento cliente
            $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                     ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                                                                                       "estado"     => "not connect"),
                                                                                 array("id"         => "ASC"));
            if(is_object($objInterfaceElementoClienteIn))
            {
                $objInterfaceElementoClienteOut = $objInterfaceElementoClienteIn;
                //conectar interface in
                $objInterfaceElementoClienteIn->setEstado("connected");
                $this->emInfraestructura->persist($objInterfaceElementoClienteIn);
                $this->emInfraestructura->flush();
                //enlace con el elemento vecino en caso de existir
                if(is_object($arrayParametros['objInterfaceElementoVecinoOut']))
                {
                    //ingresar enlace
                    $objEnlace = new InfoEnlace();
                    $objEnlace->setInterfaceElementoIniId($arrayParametros['objInterfaceElementoVecinoOut']);
                    $objEnlace->setInterfaceElementoFinId($objInterfaceElementoClienteIn);
                    $objEnlace->setTipoMedioId($arrayParametros['objUltimaMilla']);
                    $objEnlace->setTipoEnlace("PRINCIPAL");
                    $objEnlace->setEstado("Activo");
                    $objEnlace->setUsrCreacion($arrayParametros['usrCreacion']);
                    $objEnlace->setFeCreacion(new \DateTime('now'));
                    $objEnlace->setIpCreacion($arrayParametros['ipCreacion']);
                    $this->emInfraestructura->persist($objEnlace);
                    $this->emInfraestructura->flush();
                }
            }
        }

        if($arrayParametros['banderaEquipoSafeEntry'] == 'S')
        {
            $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                     ->findOneBy(array("elementoId" => $elementoCpe->getId(),
                                                                                       "estado"     => "not connect"),
                                                                                 array("id"         => "ASC"));
            if(!isset($objInterfaceElementoClienteIn))
            {
                $objInterfaceElementoClienteIn = new InfoInterfaceElemento();
                $objInterfaceElementoClienteIn->setElementoId($elementoCpe);
                $objInterfaceElementoClienteIn->setNombreInterfaceElemento('eth01');
                $objInterfaceElementoClienteIn->setDescripcionInterfaceElemento('Ethernet');
                $objInterfaceElementoClienteIn->setUsrCreacion($arrayParametros['usrCreacion']);
                $objInterfaceElementoClienteIn->setFeCreacion(new \DateTime('now'));
                $objInterfaceElementoClienteIn->setIpCreacion($arrayParametros['ipCreacion']);

            }
            if(is_object($objInterfaceElementoClienteIn))
            {
                $objInterfaceElementoClienteOut = $objInterfaceElementoClienteIn;
                //conectar interface in
                $objInterfaceElementoClienteIn->setMacInterfaceElemento($arrayParametros['strMacDispositivo']);
                $objInterfaceElementoClienteIn->setEstado("connected");
                $this->emInfraestructura->persist($objInterfaceElementoClienteIn);
                $this->emInfraestructura->flush();
                //enlace con el elemento vecino en caso de existir
                if(is_object($arrayParametros['objInterfaceElementoVecinoOut']))
                {
                    $objElementoVecino = $arrayParametros['objInterfaceElementoVecinoOut'];
                    //ingresar enlace
                    $objEnlace = new InfoEnlace();
                    $objEnlace->setInterfaceElementoIniId($objElementoVecino);
                    $objEnlace->setInterfaceElementoFinId($objInterfaceElementoClienteIn);
                    $objEnlace->setTipoMedioId($arrayParametros['objUltimaMilla']);
                    $objEnlace->setTipoEnlace("PRINCIPAL");
                    $objEnlace->setEstado("Activo");
                    $objEnlace->setUsrCreacion($arrayParametros['usrCreacion']);
                    $objEnlace->setFeCreacion(new \DateTime('now'));
                    $objEnlace->setIpCreacion($arrayParametros['ipCreacion']);
                    $this->emInfraestructura->persist($objEnlace);
                    $this->emInfraestructura->flush();

                    $objElementoVecino->setEstado('connected');
                    $this->emInfraestructura->persist($objElementoVecino);
                    $this->emInfraestructura->flush();
                }
            }
            

        }

        if($boolFlujoNormal)
        {
            //historial elemento
            $historialElemento = new InfoHistorialElemento();
            $historialElemento->setElementoId($elementoCpe);
            $historialElemento->setEstadoElemento("Activo");
            $historialElemento->setObservacion("Se ingreso un elemento");
            $historialElemento->setUsrCreacion($arrayParametros['usrCreacion']);
            $historialElemento->setFeCreacion(new \DateTime('now'));
            $historialElemento->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($historialElemento);
            $this->emInfraestructura->flush();

            //info ubicacion
            $punto = $arrayParametros['objServicio']->getPuntoId();
            $sector = $punto->getSectorId();
            $parroquia = $sector->getParroquiaId();
            $parroquiaObj = $this->emInfraestructura->find('schemaBundle:AdmiParroquia', $parroquia->getId());

            $ubicacionElemento = new InfoUbicacion();
            if($punto->getLatitud() == null)
            {
                $ubicacionElemento->setLatitudUbicacion(1);
            }
            else
            {
                $ubicacionElemento->setLatitudUbicacion($punto->getLatitud());
            }

            if($punto->getLongitud() == null)
            {
                $ubicacionElemento->setLongitudUbicacion(1);
            }
            else
            {
                $ubicacionElemento->setLongitudUbicacion($punto->getLongitud());
            }
            $ubicacionElemento->setDireccionUbicacion($punto->getDireccion());
            $ubicacionElemento->setAlturaSnm(1.0);
            $ubicacionElemento->setParroquiaId($parroquiaObj);
            $ubicacionElemento->setUsrCreacion($arrayParametros['usrCreacion']);
            $ubicacionElemento->setFeCreacion(new \DateTime('now'));
            $ubicacionElemento->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($ubicacionElemento);
            $this->emInfraestructura->flush();

            //empresa elemento ubicacion
            $empresaElementoUbica = new InfoEmpresaElementoUbica();
            $empresaElementoUbica->setEmpresaCod($arrayParametros['intIdEmpresa']);
            $empresaElementoUbica->setElementoId($elementoCpe);
            $empresaElementoUbica->setUbicacionId($ubicacionElemento);
            $empresaElementoUbica->setUsrCreacion($arrayParametros['usrCreacion']);
            $empresaElementoUbica->setFeCreacion(new \DateTime('now'));
            $empresaElementoUbica->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($empresaElementoUbica);
            $this->emInfraestructura->flush();

            //empresa elemento
            $empresaElemento = new InfoEmpresaElemento();
            $empresaElemento->setElementoId($elementoCpe);
            $empresaElemento->setEmpresaCod($arrayParametros['intIdEmpresa']);
            $empresaElemento->setEstado("Activo");
            $empresaElemento->setUsrCreacion($arrayParametros['usrCreacion']);
            $empresaElemento->setIpCreacion($arrayParametros['ipCreacion']);
            $empresaElemento->setFeCreacion(new \DateTime('now'));
            $this->emInfraestructura->persist($empresaElemento);
            $this->emInfraestructura->flush();
        }

        return $objInterfaceElementoClienteOut;
    }

    /**
     * Funcion que busca en el repositorio IN_ARTICULOS_INSTALACION
     * el equipo que se encuentra en el Naf
     *
     * @author Creado: Juan Lafuente <jlafuente@telconet.ec>
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 24-05-2016    Se agrega recuperacion de interface wlan1 para elemento Radio
     *
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.2 2016-09-24 - Se introdujo nueva función para la creación de las Interfaces del elemento
     *
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.3 2016-12-21 - Se agrega filtro de tipo de element para poder crear el nuevo elemento CPE y que sea tanto CPE o ROUTER
     *                           de acuerdo al elemento que tuvo el cliente antes del cambio
     *
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.4 2017-09-28 - Se agrega bloque que permita ingresar un modelo GENERICO para cuando se trate de equipos de CLIENTES que ingresan
     *                           equipos sin un modelo establecido y comprendido por el sistema
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 2018-02-28 Se registra tracking del elemento
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 2019-01-24 Se realizan ajustes por concepto de ingreso de equipos de seguridad lógica
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 2019-04-24 - Se agregan validaciones para controlar escenario de registro de equipos de seguridad lógica cuando es propiedad del
     *                           Cliente o Telconet
     * @since 1.6
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.8 17-05-2021 - Se obtiene la identificación del cliente para enviarla al proceso de auditoria.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.9 03-10-2022 - Se agrega parámetros para el nombre del elemento y validar el elemento sin interfaces.
     *
     *@author Manuel Carpio <mcarpio@telconet.ec>
     *@version 2.0 14-03-2023 - Se agrega validacion para que la funcion permita regsitrar elementos asociados a un nodo
     *                          para registro de elementos adicionales safe city.
     *
     * 
     * @param $arrayParametros [nombreElementoCliente,nombreModeloElementoCliente,serieElementoCliente,objInterfaceElementoVecinoOut,
     *                          objUltimaMilla,objServicio,intIdEmpresa,usrCreacion,ipCreacion]
     * @return Object  Retorna Objeto de Interface de elemento creado
     * @since 1.0
     */
    public function ingresarElementoClienteTNSinEnlace($arrayParametros)
    {
        $objTipoElementoCliente   = null;
        $strNombreInterface       = "wan1";
        $arrayParametrosAuditoria = array();
        $boolEsUbicacionNodo      = $arrayParametros['boolPerteneceElementoNodo'];
        $booleanSinInterface      = isset($arrayParametros['booleanSinInterface'])?$arrayParametros['booleanSinInterface']:false;
        $strRegistroEquipo        = $arrayParametros['bandRegistroEquipo']?$arrayParametros['bandRegistroEquipo']:"N";
        $strPropiedadEquipo       = $arrayParametros['propiedadEquipo']?$arrayParametros['propiedadEquipo']:"";
        $strNombreElementoCliente = isset($arrayParametros['nombreElementoCliente'])
                                    ?$arrayParametros['nombreElementoCliente']:$arrayParametros['objServicio']->getLoginAux();
        $booleanInterfaceNotWan   = isset($arrayParametros['booleanInterfaceNotWan'])?$arrayParametros['booleanInterfaceNotWan']:false;

        if(isset($arrayParametros['tipoElementoNuevo']))
        {
            $objTipoElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')
                    ->findOneBy(array(
                "nombreTipoElemento" => $arrayParametros['tipoElementoNuevo'],
                "estado" => "Activo"
            ));
        }

        //buscar modelo de elemento cliente
        if(is_object($objTipoElementoCliente))
        {
            $objModeloElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                    ->findOneBy(array(
                "nombreModeloElemento" => $arrayParametros['modeloElementoNuevo'],
                "tipoElementoId" => $objTipoElementoCliente->getId(),
                "estado" => "Activo"
                    )
            );
        }
        else
        {
            $objModeloElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                    ->findOneBy(array("nombreModeloElemento" => $arrayParametros['modeloElementoNuevo'],
                "estado" => "Activo"));
        }

        //Si el modelo no existe caso equipos del cliente se coloca un modelo GENERICO ( clientes de DC )
        if(!is_object($objModeloElementoCliente) &&
                isset($arrayParametros['propiedad']) &&
            $arrayParametros['propiedad'] == 'CLIENTE')
        {
            $objTipoElementoCliente =   $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')
                    ->findOneBy(array(
                "nombreTipoElemento" => 'EQUIPOS-DC',
                                                                                "estado"             => "Activo"
            ));
            if(is_object($objTipoElementoCliente))
            {
                $objModeloElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                        ->findOneBy(array(
                    "nombreModeloElemento" => 'GENERICO',
                                                                    "tipoElementoId"       => $objTipoElementoCliente->getId(),
                                                                    "estado"               => "Activo"
                        )
                );
            }
        }

        $elementoCpe = null;

        //Se tiene la caracteristica REGISTRO EQUIPO es obligacion que el modelo exista en Telcos
        if($strRegistroEquipo === "S" && !is_object($objModeloElementoCliente))
        {
            throw new \Exception("Antes de confirmar el servicio es obligatorio que el modelo: <b>".$arrayParametros['modeloElementoNuevo']."</b> se "
                                 . "ingrese primero en el Telcos");
        }

        if(is_object($objModeloElementoCliente))
        {
            //grabar elemento cliente
            $elementoCpe = new InfoElemento();
            $elementoCpe->setNombreElemento($strNombreElementoCliente);

            if($strRegistroEquipo === "S")
            {
                $elementoCpe->setDescripcionElemento($arrayParametros['descEquipo']);
            }
            else
            {
                $strDescripcion = $boolEsUbicacionNodo       ? 'elemento nodo' : 'dispositivo cliente';
                $elementoCpe->setDescripcionElemento($strDescripcion);
            }

            $elementoCpe->setModeloElementoId($objModeloElementoCliente);
            $elementoCpe->setSerieFisica($arrayParametros['serieElementoNuevo']);
            $elementoCpe->setEstado("Activo");
            $elementoCpe->setUsrResponsable($arrayParametros['usrCreacion']);
            $elementoCpe->setUsrCreacion($arrayParametros['usrCreacion']);
            $elementoCpe->setFeCreacion(new \DateTime('now'));
            $elementoCpe->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emInfraestructura->persist($elementoCpe);
            $this->emInfraestructura->flush();

            $strUbicacion   = $boolEsUbicacionNodo       ? 'Nodo' : 'Cliente';
            $strTransaccion = $boolEsUbicacionNodo ? 'Instalacion elemento nodo' : 'Activacion Cliente';


            //SE REGISTRA EL TRACKING DEL ELEMENTO
            $arrayParametrosAuditoria["strNumeroSerie"]  = $arrayParametros['serieElementoNuevo'];
            $arrayParametrosAuditoria["strEstadoTelcos"] = 'Activo';
            $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
            $arrayParametrosAuditoria["strEstadoActivo"] = 'Activo';
            $arrayParametrosAuditoria["strUbicacion"]    = $strUbicacion;
            $arrayParametrosAuditoria["strCodEmpresa"]   = '10';
            $arrayParametrosAuditoria["strTransaccion"]  = $strTransaccion;
            $arrayParametrosAuditoria["intOficinaId"]    = 0;

            //Se consulta el login del cliente
            if (is_object($arrayParametros['objServicio']) && !$boolEsUbicacionNodo)
            {
                $objInfoPunto = $this->emInfraestructura->getRepository('schemaBundle:InfoPunto')
                        ->find($arrayParametros['objServicio']->getPuntoId()->getId());

                if (is_object($objInfoPunto))
                {
                    $strCedulaCliente = is_object($objInfoPunto->getPersonaEmpresaRolId())     ?
                            is_object($objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()) ?
                            $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()->getIdentificacionCliente():"":"";

                    $arrayParametrosAuditoria["strLogin"]         = $objInfoPunto->getLogin();
                    $arrayParametrosAuditoria["strCedulaCliente"] = $strCedulaCliente;
                }
            }
            else
            {
                $arrayParametrosAuditoria["strLogin"]         = $arrayParametros['strLogin'];
                $arrayParametrosAuditoria["boolPerteneceElementoNodo"] = true;
            }

            $arrayParametrosAuditoria["strUsrCreacion"] = $arrayParametros['usrCreacion'];

            $this->serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
            ////

            //Si tiene la caracteristica REGISTRO EQUIPO se ingresa la propiedad del mismo
            if($strRegistroEquipo === "S")
            {
                $objInfoDetalleElemento = new InfoDetalleElemento();
                $objInfoDetalleElemento->setElementoId($elementoCpe->getId());
                $objInfoDetalleElemento->setDetalleNombre("PROPIEDAD");
                $objInfoDetalleElemento->setDetalleValor($strPropiedadEquipo);
                $objInfoDetalleElemento->setDetalleDescripcion("ELEMENTO PROPIEDAD DE");
                $objInfoDetalleElemento->setFeCreacion(new \DateTime('now'));
                $objInfoDetalleElemento->setUsrCreacion($arrayParametros['usrCreacion']);
                $objInfoDetalleElemento->setIpCreacion($arrayParametros['ipCreacion']);
                $objInfoDetalleElemento->setEstado('Activo');
                $this->emInfraestructura->persist($objInfoDetalleElemento);
                $this->emInfraestructura->flush();
            }

            if(!$boolEsUbicacionNodo)
            {
                //buscar el interface Modelo
                $this->crearInterfacesElemento(array('intModeloElementoId' => $objModeloElementoCliente->getId(),
                'strTipoElemento' => $arrayParametros['tipoElementoNuevo'],
                'objElemento' => $elementoCpe,
                'strUsrCreacion' => $arrayParametros['usrCreacion'],
                'strIpCreacion' => $arrayParametros['ipCreacion'],
                'strMacElemento' => $arrayParametros['macElementoNuevo']
                ));
            }

              //historial elemento
              $historialElemento = new InfoHistorialElemento();
              $historialElemento->setElementoId($elementoCpe);
              $historialElemento->setEstadoElemento("Activo");
              $historialElemento->setObservacion("Se ingreso un elemento");
              $historialElemento->setUsrCreacion($arrayParametros['usrCreacion']);
              $historialElemento->setFeCreacion(new \DateTime('now'));
              $historialElemento->setIpCreacion($arrayParametros['ipCreacion']);
              $this->emInfraestructura->persist($historialElemento);
              $this->emInfraestructura->flush();

              //info ubicacion
              $punto = $arrayParametros['objServicio']->getPuntoId();
              $sector = $punto->getSectorId();
              $parroquia = $sector->getParroquiaId();
              $parroquiaObj = $this->emInfraestructura->find('schemaBundle:AdmiParroquia', $parroquia->getId());

              $ubicacionElemento = new InfoUbicacion();
              if($punto->getLatitud() == null)
              {
                  $ubicacionElemento->setLatitudUbicacion(1);
              }
              else
              {
                  $ubicacionElemento->setLatitudUbicacion($punto->getLatitud());
              }
  
              if($punto->getLongitud() == null)
              {
                  $ubicacionElemento->setLongitudUbicacion(1);
              }
              else
              {
                  $ubicacionElemento->setLongitudUbicacion($punto->getLongitud());
              }
              $ubicacionElemento->setDireccionUbicacion($punto->getDireccion());
              $ubicacionElemento->setAlturaSnm(1.0);
              $ubicacionElemento->setParroquiaId($parroquiaObj);
              $ubicacionElemento->setUsrCreacion($arrayParametros['usrCreacion']);
              $ubicacionElemento->setFeCreacion(new \DateTime('now'));
              $ubicacionElemento->setIpCreacion($arrayParametros['ipCreacion']);
              $this->emInfraestructura->persist($ubicacionElemento);
              $this->emInfraestructura->flush();
  
              //empresa elemento ubicacion
              $empresaElementoUbica = new InfoEmpresaElementoUbica();
              $empresaElementoUbica->setEmpresaCod($arrayParametros['idEmpresa']);
              $empresaElementoUbica->setElementoId($elementoCpe);
              $empresaElementoUbica->setUbicacionId($ubicacionElemento);
              $empresaElementoUbica->setUsrCreacion($arrayParametros['usrCreacion']);
              $empresaElementoUbica->setFeCreacion(new \DateTime('now'));
              $empresaElementoUbica->setIpCreacion($arrayParametros['ipCreacion']);
              $this->emInfraestructura->persist($empresaElementoUbica);
              $this->emInfraestructura->flush();
  
              //empresa elemento
              $empresaElemento = new InfoEmpresaElemento();
              $empresaElemento->setElementoId($elementoCpe);
              $empresaElemento->setEmpresaCod($arrayParametros['idEmpresa']);
              $empresaElemento->setEstado("Activo");
              $empresaElemento->setUsrCreacion($arrayParametros['usrCreacion']);
              $empresaElemento->setIpCreacion($arrayParametros['ipCreacion']);
              $empresaElemento->setFeCreacion(new \DateTime('now'));
              $this->emInfraestructura->persist($empresaElemento);
              $this->emInfraestructura->flush();
          }

          //Se valida si el servicio es de un producto que tiene configurada la caracteristica de registro de equipo
          $objCaracteristica = $this->emInfraestructura->getRepository('schemaBundle:AdmiCaracteristica')
                                                       ->findOneBy(array("descripcionCaracteristica" => "REGISTRO EQUIPO",
                                                                         "estado"                    => "Activo"));

          if(is_object($objCaracteristica))
          {
              $objProductoCaracteristica = $this->emInfraestructura->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"       => $arrayParametros['objServicio']->getProductoId()->getId(),
                                                                  "caracteristicaId" => $objCaracteristica->getId(),
                                                                  "estado"           => "Activo"));
          }

          if(is_object($objProductoCaracteristica))
          {
              $strRegistroEquipo = "S";
          }

          if($strRegistroEquipo == "S" && !$booleanSinInterface)
          {
              //Obtiene por primera vez el puerto wan1 para activar el servicio
              if($booleanInterfaceNotWan)
              {
                  $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                          ->findOneBy(array("elementoId"                   => $elementoCpe->getId(),
                                                                            "estado"                       => "not connect"));
              }
              else
              {
                  $objInterfaceElementoClienteIn = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                          ->findOneBy(array("elementoId"                   => $elementoCpe->getId(),
                                                                            "nombreInterfaceElemento"      => $strNombreInterface,
                                                                            "descripcionInterfaceElemento" => "Wan",
                                                                            "estado"                       => "not connect"));
              }

              //Conectar la interface del cliente
              $objInterfaceElementoClienteIn->setEstado("connected");
              $objInterfaceElementoClienteIn->setMacInterfaceElemento($arrayParametros['macElementoRegistrar']);
              $this->emInfraestructura->persist($objInterfaceElementoClienteIn);
              $this->emInfraestructura->flush();

              if($arrayParametros["strOrigen"] != "cambioEquipo")
              {
                  //Se registra el elemento cliente y la interfaz en la servicio tecnica
                  $objInfoServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneBy(array("servicioId" => $arrayParametros['objServicio']->getId()));

                  $objInfoServicioTecnico->setElementoClienteId($elementoCpe->getId());
                  $objInfoServicioTecnico->setInterfaceElementoClienteId($objInterfaceElementoClienteIn->getId());
                  $this->emComercial->persist($objInfoServicioTecnico);
                  $this->emComercial->flush();
              }

              //Se asocia el servicio en la info_detalle_interface
              $objInfoDetalleInterface = new InfoDetalleInterface();
              $objInfoDetalleInterface->setInterfaceElementoId($objInterfaceElementoClienteIn);
              $objInfoDetalleInterface->setDetalleNombre("servicio");
              $objInfoDetalleInterface->setDetalleValor($arrayParametros['objServicio']->getId());
              $objInfoDetalleInterface->setUsrCreacion($arrayParametros['usrCreacion']);
              $objInfoDetalleInterface->setFeCreacion(new \DateTime('now'));
              $objInfoDetalleInterface->setIpCreacion($arrayParametros['ipCreacion']);
              $this->emInfraestructura->persist($objInfoDetalleInterface);
              $this->emInfraestructura->flush();
        }

        return $elementoCpe;
    }

    /**
     * Funcion que sirve para ingresar elemento cliente Md
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-06-2016 Se agrega validación de enlace existente
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 24-01-2017 Se agrega validación para crear enlaces correctamente en modelos de elementos
     *                         que tengan mas de un tipo de interface
     * @since 1.1
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 28-02-2018 Se registra tracking del elemento
     * @since 1.2
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 20-10-2020 - Se agrega programación para consultar si un producto sin flujo esta hablitado para que se realice la activacion y
     *                           registro de elementos
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.5 14-04-2021 Se Agrega Validación de la interface devuelta por el método, ya que al guardarse las interfaces
     *                          toman un orden diferente y el método devuelve un objeto con la interface not connect.
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.6 25-07-2021 Se realizan modificaciones para enlazar elementos al activar el producto Netlifecam Md.
     * 
     *
     * @param String $login              Cadena de caracteres que indica el login al cual pertenece el servicio
     * @param String $serie              Cadena de caracteres que indica la serie del elemento a registrar
     * @param String $modelo             Cadena de caracteres que indica el modelo del elemento a registrar
     * @param String $tipoElemento       Cadena de caracteres que indica el tipo del elemento a registrar
     * @param Object $interfaceElemento  Objete de la interface elemento al cual se va a enlazar el nuevo elemento
     * @param String $ultimaMilla        Cadena de caracteres que indica que indica la ultima milla del servicio procesado
     * @param Object $servicio           Objeto del servicio a procesar
     * @param String $usrCreacion        Cadena de caracteres que indica el usuario de creación
     * @param String $ipCreacion         Cadena de caracteres que indica la ip de creación
     * @param String $idEmpresa          Cadena de caracteres que indica el codigo de la empresa
     *
     * @since 1.0
     */
    public function ingresarElementoCliente($login, $serie, $modelo, $tipoElemento, $interfaceElemento, $ultimaMilla, $servicio, $usrCreacion, $ipCreacion, $idEmpresa)
    {
        $arrayParametrosAuditoria = array();
        //elemento backbone
        $strNombreModelo = '';
        $intBanderaEnlace = 1;
        if($interfaceElemento)
        {
            $elemento = $interfaceElemento->getElementoId();
            if($elemento)
            {
                $modeloBackbone = $elemento->getModeloElementoId();
                if($modeloBackbone)
                {
                    $strNombreModelo = $modeloBackbone->getNombreModeloElemento();
                }
            }
        }
        $ultimaMillaObj = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                ->findOneBy(array("nombreTipoMedio" => $ultimaMilla));

        $modeloElementoObj = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                ->findOneBy(array("nombreModeloElemento" => $modelo, "estado" => "Activo"));

        if(!is_object($modeloElementoObj))
        {
            throw new \Exception("El modelo:".$modelo." no esta creado en Telcos.");
        }

        $elementoCpe = new InfoElemento();
        $elementoCpe->setNombreElemento($login . "" . $tipoElemento);
        $elementoCpe->setDescripcionElemento("dispositivo cliente");
        $elementoCpe->setModeloElementoId($modeloElementoObj);
        $elementoCpe->setSerieFisica($serie);
        $elementoCpe->setEstado("Activo");
        $elementoCpe->setUsrResponsable($usrCreacion);
        $elementoCpe->setUsrCreacion($usrCreacion);
        $elementoCpe->setFeCreacion(new \DateTime('now'));
        $elementoCpe->setIpCreacion($ipCreacion);
        $this->emInfraestructura->persist($elementoCpe);
        $this->emInfraestructura->flush();

        //SE REGISTRA EL TRACKING DEL ELEMENTO
        $arrayParametrosAuditoria["strNumeroSerie"]  = $serie;
        $arrayParametrosAuditoria["strEstadoTelcos"] = 'Activo';
        $arrayParametrosAuditoria["strEstadoNaf"]    = 'Instalado';
        $arrayParametrosAuditoria["strEstadoActivo"] = 'Activo';
        $arrayParametrosAuditoria["strUbicacion"]    = 'Cliente';
        $arrayParametrosAuditoria["strCodEmpresa"]   = $idEmpresa;
        $arrayParametrosAuditoria["strTransaccion"]  = 'Activacion Cliente';
        $arrayParametrosAuditoria["intOficinaId"]    = 0;

        //Se consulta el login del cliente
        if(is_object($servicio))
        {
            $intProductoId = "";
            $objInfoPunto  = $this->emInfraestructura->getRepository('schemaBundle:InfoPunto')
                                                     ->find($servicio->getPuntoId()->getId());
            if(is_object($objInfoPunto))
            {
                $strCedulaCliente = is_object($objInfoPunto->getPersonaEmpresaRolId())     ?
                                        is_object($objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()) ?
                                        $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId()->getIdentificacionCliente():"":"";
                                        
                $arrayParametrosAuditoria["strLogin"] = $objInfoPunto->getLogin();
                $arrayParametrosAuditoria["strCedulaCliente"] = $strCedulaCliente;
            }

            if(is_object($servicio->getProductoId()))
            {
                $intProductoId = $servicio->getProductoId()->getId();
            }
        }

        $arrayParametrosAuditoria["strUsrCreacion"] = $usrCreacion;

        $this->serviceInfoElemento->ingresaAuditoriaElementos($arrayParametrosAuditoria);
        ////

        

        //buscar el interface Modelo
        $interfaceModelo = $this->emInfraestructura->getRepository('schemaBundle:AdmiInterfaceModelo')
                ->findBy(array("modeloElementoId" => $modeloElementoObj->getId()));
        $objPrimeraInterface = null;
        foreach($interfaceModelo as $im)
        {
            $cantidadInterfaces = $im->getCantidadInterface();
            $formato = $im->getFormatoInterface();

            for($i = 1; $i <= $cantidadInterfaces; $i++)
            {
                $interfaceCpe = new InfoInterfaceElemento();
                $format = explode("?", $formato);
                $nombreInterfaceElemento = $format[0] . $i;

                $interfaceCpe->setNombreInterfaceElemento($nombreInterfaceElemento);
                $interfaceCpe->setElementoId($elementoCpe);
                $interfaceCpe->setEstado("not connect");
                $interfaceCpe->setUsrCreacion($usrCreacion);
                $interfaceCpe->setFeCreacion(new \DateTime('now'));
                $interfaceCpe->setIpCreacion($ipCreacion);

                $this->emInfraestructura->persist($interfaceCpe);

                
                
                    if($strNombreModelo != "TERCERIZADO" && $i == 1 && $interfaceElemento && $intBanderaEnlace == 1)
                    {
                        //validacion de enlace existente
                        $objEnlaceCliente = $this->emInfraestructura
                                ->getRepository('schemaBundle:InfoEnlace')
                                ->findOneBy(array("interfaceElementoIniId" => $interfaceElemento->getId(),
                            "estado" => "Activo"));
                        if($objEnlaceCliente)
                        {
                            $objEnlaceCliente->setInterfaceElementoFinId($interfaceCpe);
                            $objEnlaceCliente->setUsrCreacion($usrCreacion);
                            $objEnlaceCliente->setFeCreacion(new \DateTime('now'));
                            $objEnlaceCliente->setIpCreacion($ipCreacion);
                            $this->emInfraestructura->persist($objEnlaceCliente);
                        }
                        else
                        {
                            $enlace = new InfoEnlace();
                            $enlace->setInterfaceElementoIniId($interfaceElemento);
                            $enlace->setInterfaceElementoFinId($interfaceCpe);
                            $enlace->setTipoMedioId($ultimaMillaObj);
                            $enlace->setTipoEnlace("PRINCIPAL");
                            $enlace->setEstado("Activo");
                            $enlace->setUsrCreacion($usrCreacion);
                            $enlace->setFeCreacion(new \DateTime('now'));
                            $enlace->setIpCreacion($ipCreacion);
                            $this->emInfraestructura->persist($enlace);
                        }

                        $interfaceCpe->setEstado("connected");
                        $this->emInfraestructura->persist($interfaceCpe);
                        $intBanderaEnlace = 0;
                        $objPrimeraInterface = $interfaceCpe;
                    }
                
            }
        }
        $this->emInfraestructura->flush();

        //DATOS PARA SERVICIO TECNICO
        $elementoCliente = $this->emInfraestructura
                ->getRepository('schemaBundle:InfoElemento')
                ->findOneBy(array("nombreElemento" => $login . "" . $tipoElemento, "serieFisica" => $serie));
        $interfaceCliente = $this->emInfraestructura
                ->getRepository('schemaBundle:InfoInterfaceElemento')
                ->findOneBy(array("elementoId" => $elementoCliente));
        if(is_object($objPrimeraInterface) && is_object($interfaceCliente) && $interfaceCliente->getId() != $objPrimeraInterface->getId())
        {
            $interfaceCliente = $objPrimeraInterface;
        }

        //historial elemento
        $historialElemento = new InfoHistorialElemento();
        $historialElemento->setElementoId($elementoCpe);
        $historialElemento->setEstadoElemento("Activo");
        $historialElemento->setObservacion("Se ingreso un elemento");
        $historialElemento->setUsrCreacion($usrCreacion);
        $historialElemento->setFeCreacion(new \DateTime('now'));
        $historialElemento->setIpCreacion($ipCreacion);
        $this->emInfraestructura->persist($historialElemento);
        $this->emInfraestructura->flush();

        //info ubicacion
        $punto = $servicio->getPuntoId();
        $sector = $punto->getSectorId();
        $parroquia = $sector->getParroquiaId();
        $parroquiaObj = $this->emInfraestructura->find('schemaBundle:AdmiParroquia', $parroquia->getId());

        $ubicacionElemento = new InfoUbicacion();
        if($punto->getLatitud() == null)
        {
            $ubicacionElemento->setLatitudUbicacion(1);
        }
        else
        {
            $ubicacionElemento->setLatitudUbicacion($punto->getLatitud());
        }

        if($punto->getLongitud() == null)
        {
            $ubicacionElemento->setLongitudUbicacion(1);
        }
        else
        {
            $ubicacionElemento->setLongitudUbicacion($punto->getLongitud());
        }
        $ubicacionElemento->setDireccionUbicacion($punto->getDireccion());
        $ubicacionElemento->setAlturaSnm(1.0);
        $ubicacionElemento->setParroquiaId($parroquiaObj);
        $ubicacionElemento->setUsrCreacion($usrCreacion);
        $ubicacionElemento->setFeCreacion(new \DateTime('now'));
        $ubicacionElemento->setIpCreacion($ipCreacion);
        $this->emInfraestructura->persist($ubicacionElemento);
        $this->emInfraestructura->flush();

        //empresa elemento ubicacion
        $empresaElementoUbica = new InfoEmpresaElementoUbica();
        $empresaElementoUbica->setEmpresaCod($idEmpresa);
        $empresaElementoUbica->setElementoId($elementoCpe);
        $empresaElementoUbica->setUbicacionId($ubicacionElemento);
        $empresaElementoUbica->setUsrCreacion($usrCreacion);
        $empresaElementoUbica->setFeCreacion(new \DateTime('now'));
        $empresaElementoUbica->setIpCreacion($ipCreacion);
        $this->emInfraestructura->persist($empresaElementoUbica);
        $this->emInfraestructura->flush();

        //empresa elemento
        $empresaElemento = new InfoEmpresaElemento();
        $empresaElemento->setElementoId($elementoCpe);
        $empresaElemento->setEmpresaCod($idEmpresa);
        $empresaElemento->setEstado("Activo");
        $empresaElemento->setUsrCreacion($usrCreacion);
        $empresaElemento->setIpCreacion($ipCreacion);
        $empresaElemento->setFeCreacion(new \DateTime('now'));
        $this->emInfraestructura->persist($empresaElemento);
        $this->emInfraestructura->flush();

        if($interfaceElemento)
        {
            $interfaceElemento->setEstado("connected");
            $this->emInfraestructura->persist($interfaceElemento);
            $this->emInfraestructura->flush();
        }

        return $interfaceCliente;
    }

    /**
     * Funcion que sirve para enviar notificacion de activación de cliente
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-06-2016 Se agrega validación de bandera de envió de correo
     *
     * @param String $usrCreacion
     * @param String $ipCreacion
     * @param Entity $servicio
     * @param Entity $servicioHistorial
     * @param Entity $elemento
     * @param String $nombreInterfaceElemento
     * @param String $prefijoEmpresa
     *
     * @since 1.0
     */
    public function enviarMailActivarCliente($usrCreacion, $ipCreacion, $servicio, $servicioHistorial, $elemento, $nombreInterfaceElemento, $prefijoEmpresa)
    {
        //------- COMUNICACIONES --- NOTIFICACIONES
        //equipo
        //migracion_ttco_md
        $arrayEmpresaMigra = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                ->getEmpresaEquivalente($servicio->getId(), $prefijoEmpresa);

        if($arrayEmpresaMigra)
        {
            if($arrayEmpresaMigra['prefijo'] == 'TTCO')
            {
                $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
            }
        }

        $equipo = array();
        $equipo['nombreElemento'] = $elemento->getNombreElemento();
        $equipo['nombreInterfaceElemento'] = $nombreInterfaceElemento;
        $equipo['nombreInterfaceElementoAnterior'] = "";
        $infoIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                ->findOneBy(array("elementoId" => $elemento->getId()));
        $equipo['ipElemento'] = ($infoIpElemento) ? $infoIpElemento->getIp() : null;

        //servicio->Obj,
        $mensaje = $this->templating->render('tecnicoBundle:InfoServicio:notificacion.html.twig', array('servicio' => $servicio,
            'equipo' => $equipo,
            'servicioHistorial' => $servicioHistorial,
            'motivo' => null));

        $asunto = "Activacion de Puerto para " . $servicio->getPuntoId()->getLogin() . " : " . $servicio->getPlanId()->getNombrePlan();

        $infoDocumento = new InfoDocumento();
        $infoDocumento->setMensaje($mensaje);
        $infoDocumento->setEstado('Activo');
        $infoDocumento->setNombreDocumento($asunto);
        $infoDocumento->setFeCreacion(new \DateTime('now'));
        $infoDocumento->setUsrCreacion($usrCreacion);
        $infoDocumento->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumento);
        $this->emComunicacion->flush();

        $infoComunicacion = new InfoComunicacion();
        $infoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoComunicacion->setEstado('Activo');
        $infoComunicacion->setUsrCreacion($usrCreacion);
        $infoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoComunicacion);
        $this->emComunicacion->flush();

        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoDocumentoComunicacion->setEstado('Activo');
        $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
        $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumentoComunicacion);
        $this->emComunicacion->flush();

        //DESTINATARIOS....
        $formasContacto = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                ->getContactosByLoginPersonaAndFormaContacto($servicio->getPuntoId()->getUsrVendedor(), 'Correo Electronico');
        $to = array();
        if($prefijoEmpresa == "TTCO")
        {
            //$to[] = 'pnaula@trans-telco.com';
            //$to[] = 'sactecnico@trans-telco.com';
            $to[] = 'notificaciones_telcos@telconet.ec';
            $cc = array();
            //$cc[] = 'notificaciones_telcos@telconet.ec';
        }
        else if($prefijoEmpresa == "MD")
        {
            //$to[] = 'pnaula@trans-telco.com';
            //$to[] = 'sactecnico@trans-telco.com';
            $to[] = 'notificaciones_telcos@telconet.ec';
            $cc = array();
            //$cc[] = 'notificaciones_telcos@telconet.ec';
        }

        if($formasContacto)
        {
            foreach($formasContacto as $formaContacto)
            {
                $to[] = $formaContacto['valor'];
            }
        }

        //ENVIO DE MAIL
        $message = \Swift_Message::newInstance()
                ->setSubject($asunto)
                ->setFrom('notificaciones_telcos@telconet.ec')
                ->setTo($to)
                //->setCc($cc)
                ->setBody($mensaje, 'text/html')
        ;

        if($this->mailerSend == "true")
        {
            $this->mailer->send($message);
        }
    }

    /**
     * Funcion que sirve para enviar notificacion de confirmación de servicio de cliente
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-06-2016 Se agrega validación de bandera de envió de correo
     *
     * @param String $usrCreacion
     * @param String $ipCreacion
     * @param Entity $servicio
     * @param Entity $servicioHistorial
     * @param Entity $elemento
     * @param String $nombreInterfaceElemento
     * @param String $prefijoEmpresa
     *
     * @since 1.0
     */
    public function enviarMailConfirmarServicio($usrCreacion, $ipCreacion, $servicio, $servicioHistorial, $elemento, $interfaceElemento, $prefijoEmpresa)
    {
        //------- COMUNICACIONES --- NOTIFICACIONES
        //equipo
        //migracion_ttco_md
        $arrayEmpresaMigra = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                ->getEmpresaEquivalente($servicio->getId(), $prefijoEmpresa);

        if($arrayEmpresaMigra)
        {
            if($arrayEmpresaMigra['prefijo'] == 'TTCO')
            {
                $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
            }
        }

        $equipo = array();
        $equipo['nombreElemento'] = $elemento->getNombreElemento();
        $equipo['nombreInterfaceElemento'] = $interfaceElemento->getNombreInterfaceElemento();
        $equipo['nombreInterfaceElementoAnterior'] = "";
        $infoIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                ->findOneBy(array("elementoId" => $elemento->getId()));
        $equipo['ipElemento'] = ($infoIpElemento) ? $infoIpElemento->getIp() : null;

        $mensaje = $this->templating->render('tecnicoBundle:InfoServicio:notificacion.html.twig', array('servicio' => $servicio,
            'equipo' => $equipo,
            'servicioHistorial' => $servicioHistorial,
            'motivo' => null));

        $asunto = "Activacion de Servicio de " . $servicio->getPuntoId()->getLogin() . " : " . $servicio->getPlanId()->getNombrePlan();

        $infoDocumento = new InfoDocumento();
        $infoDocumento->setMensaje($mensaje);
        $infoDocumento->setEstado('Activo');
        $infoDocumento->setNombreDocumento($asunto);
        $infoDocumento->setFeCreacion(new \DateTime('now'));
        $infoDocumento->setUsrCreacion($usrCreacion);
        $infoDocumento->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumento);
        $this->emComunicacion->flush();

        $infoComunicacion = new InfoComunicacion();
        $infoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoComunicacion->setEstado('Activo');
        $infoComunicacion->setUsrCreacion($usrCreacion);
        $infoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoComunicacion);
        $this->emComunicacion->flush();

        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoDocumentoComunicacion->setEstado('Activo');
        $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
        $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumentoComunicacion);
        $this->emComunicacion->flush();

        //DESTINATARIOS....
        $formasContacto = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                ->getContactosByLoginPersonaAndFormaContacto($servicio->getPuntoId()->getUsrVendedor(), 'Correo Electronico');
        $to = array();
        if($prefijoEmpresa == "TTCO")
        {
            $to[] = 'telcosactivaciones@trans-telco.com';
        }
        else if($prefijoEmpresa == "MD")
        {
            $to[] = 'notificaciones_telcos@telconet.ec';
        }
        $cc = array();
        $cc[] = 'notificaciones_telcos@telconet.ec';


        if($formasContacto)
        {
            foreach($formasContacto as $formaContacto)
            {
                $to[] = $formaContacto['valor'];
            }
        }

        //ENVIO DE MAIL
        $message = \Swift_Message::newInstance()
                ->setSubject($asunto)
                ->setFrom('notificaciones_telcos@telconet.ec')
                ->setTo($to)
                ->setCc($cc)
                ->setBody($mensaje, 'text/html')
        ;

        if($this->mailerSend == "true")
        {
            $this->mailer->send($message);
        }
    }

    /**
     * Funcion que sirve para enviar notificacion de corte de servicio de cliente
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-06-2016 Se agrega validación de bandera de envió de correo
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 14-12-2016 Se agrega validación de ultima milla para validar alias a usar en envio notificaciones para servicios del flujo TTCO
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.3 20/03/2023 - Se agrega empresa Ecuanet para envio de notificaciones.
     * 
     * @param String $asunto
     * @param Entity $servicio
     * @param String $motivo
     * @param Entity $elemento
     * @param String $nombreInterfaceElemento
     * @param Entity $servicioHistorial
     * @param String $usrCreacion
     * @param String $ipCreacion
     * @param Entity $servicio
     * @param String $prefijoEmpresa
     *
     * @since 1.0
     */
    public function enviarMailCortarCliente($asunto, $servicio, $motivo, $elemento, $nombreInterfaceElemento, $servicioHistorial, $usrCreacion, $ipCreacion, $prefijoEmpresa)
    {
        //------- COMUNICACIONES --- NOTIFICACIONES
        $jurisdiccion = $servicio->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion();
        $entityMotivo = $this->emGeneral->getRepository('schemaBundle:AdmiMotivo')->find($motivo);
        $strUltimaMilla = "";

        //migracion_ttco_md
        $arrayEmpresaMigra = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                ->getEmpresaEquivalente($servicio->getId(), $prefijoEmpresa);

        if($arrayEmpresaMigra)
        {
            if($arrayEmpresaMigra['prefijo'] == 'TTCO')
            {
                $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
            }
        }

        //equipo
        $equipo = array();
        $equipo['nombreElemento'] = $elemento->getNombreElemento();
        $equipo['nombreInterfaceElemento'] = $nombreInterfaceElemento;
        $equipo['nombreInterfaceElementoAnterior'] = "";
        $infoIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                ->findOneBy(array("elementoId" => $elemento->getId()));
        $equipo['ipElemento'] = ($infoIpElemento) ? $infoIpElemento->getIp() : null;

        $mensaje = $this->templating->render('tecnicoBundle:InfoServicio:notificacion.html.twig', array('servicio' => $servicio,
            'equipo' => $equipo,
            'servicioHistorial' => $servicioHistorial,
            'motivo' => $entityMotivo));



        $infoDocumento = new InfoDocumento();
        $infoDocumento->setMensaje($mensaje);
        $infoDocumento->setEstado('Activo');
        $infoDocumento->setNombreDocumento($asunto);
        $infoDocumento->setFeCreacion(new \DateTime('now'));
        $infoDocumento->setUsrCreacion($usrCreacion);
        $infoDocumento->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumento);
        $this->emComunicacion->flush();

        $infoComunicacion = new InfoComunicacion();
        $infoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoComunicacion->setEstado('Activo');
        $infoComunicacion->setUsrCreacion($usrCreacion);
        $infoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoComunicacion);
        $this->emComunicacion->flush();

        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoDocumentoComunicacion->setEstado('Activo');
        $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
        $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumentoComunicacion);
        $this->emComunicacion->flush();

        //DESTINATARIOS....
        $formasContacto = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                ->getContactosByLoginPersonaAndFormaContacto($servicio->getPuntoId()->getUsrVendedor(), 'Correo Electronico');
        $to = array();

        if($prefijoEmpresa == "TTCO")
        {
            $objServicioTecnico = $this->emComercial
                    ->getRepository('schemaBundle:InfoServicioTecnico')
                    ->findOneBy(array("servicioId" => $servicio->getId()));
            if(is_object($objServicioTecnico))
            {
                $objUltimaMilla = $this->emInfraestructura
                        ->getRepository('schemaBundle:AdmiTipoMedio')
                        ->find($objServicioTecnico->getUltimaMillaId());
                if(is_object($objUltimaMilla))
                {
                    $strUltimaMilla = $objUltimaMilla->getNombreTipoMedio();
                }
            }

            $to[] = 'notificaciones_telcos@telconet.ec';

            if($strUltimaMilla == "Radio")
            {
                $cc[] = 'radioenlace_gye@telconet.ec';
                $cc[] = 'radioenlace_uio@telconet.ec';
            }
        }
        else if($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN")
        {
            $to[] = 'notificaciones_telcos@telconet.ec';
            $cc = array();
        }


        if($formasContacto)
        {
            foreach($formasContacto as $formaContacto)
            {
                $to[] = $formaContacto['valor'];
            }
        }

        //ENVIO DE MAIL
        $message = \Swift_Message::newInstance()
                ->setSubject($asunto)
                ->setFrom('notificaciones_telcos@telconet.ec')
                ->setTo($to)
                ->setCc($cc)
                ->setBody($mensaje, 'text/html')
        ;

        if($this->mailerSend == "true")
        {
            $this->mailer->send($message);
        }
    }

    /**
     * Funcion que sirve para enviar notificacion de cambio de puerto de cliente
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-06-2016 Se agrega validación de bandera de envió de correo
     *
     * @param Entity $elementoNuevo
     * @param Entity $interfaceElementoNuevo
     * @param String $usrCreacion
     * @param String $ipCreacion
     *
     * @since 1.0
     */
    public function envairMailCambioPuerto($elementoNuevo, $interfaceElementoNuevo, $usrCreacion, $ipCreacion)
    {
        //------- COMUNICACIONES --- NOTIFICACIONES
        //equipo
        $equipo = array();
        $equipo['nombreElemento'] = $elementoNuevo->getNombreElemento();
        $equipo['nombreInterfaceElemento'] = $interfaceElementoNuevo->getNombreInterfaceElemento();
        $equipo['nombreInterfaceElementoAnterior'] = $nombreInterfaceElemento;
        $infoIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIpElemento')
                ->findOneBy(array("elementoId" => $elementoId));
        $equipo['ipElemento'] = ($ipElementoNuevo) ? $ipElementoNuevo->getIp() : null;

        //servicio->Obj,
        $mensaje = $this->templating->render('tecnicoBundle:InfoServicio:notificacion.html.twig', array('servicio' => $servicio,
            'equipo' => $equipo,
            'servicioHistorial' => $servicioHistorial,
            'motivo' => null));

        $asunto = "Cambio de Puerto para " . $servicio->getPuntoId()->getLogin() . " : " . $servicio->getPlanId()->getNombrePlan();

        $infoDocumento = new InfoDocumento();
        $infoDocumento->setMensaje($mensaje);
        $infoDocumento->setEstado('Activo');
        $infoDocumento->setNombreDocumento($asunto);
        $infoDocumento->setFeCreacion(new \DateTime('now'));
        $infoDocumento->setUsrCreacion($usrCreacion);
        $infoDocumento->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumento);
        $this->emComunicacion->flush();

        $infoComunicacion = new InfoComunicacion();
        $infoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoComunicacion->setEstado('Activo');
        $infoComunicacion->setUsrCreacion($usrCreacion);
        $infoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoComunicacion);
        $this->emComunicacion->flush();

        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoDocumentoComunicacion->setEstado('Activo');
        $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
        $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumentoComunicacion);
        $this->emComunicacion->flush();

        //DESTINATARIOS....
        $formasContacto = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                ->getContactosByLoginPersonaAndFormaContacto($servicio->getPuntoId()->getUsrVendedor(), 'Correo Electronico');
        $to = array();
        $to[] = 'pnaula@trans-telco.com';
        $to[] = 'sactecnico@trans-telco.com';
        $cc = array();
        $cc[] = 'notificaciones_telcos@telconet.ec';
        $cc[] = 'cambiopuertotelcos@trans-telco.com';

        if($formasContacto)
        {
            foreach($formasContacto as $formaContacto)
            {
                $to[] = $formaContacto['valor'];
            }
        }

        //ENVIO DE MAIL
        $message = \Swift_Message::newInstance()
                ->setSubject($asunto)
                ->setFrom('notificaciones_telcos@telconet.ec')
                ->setTo($to)
                ->setCc($cc)
                ->setBody($mensaje, 'text/html')
        ;

        if($this->mailerSend == "true")
        {
            $this->mailer->send($message);
        }
    }
    /**
     * Documentación para la función 'getPeByOlt'.
     *
     * Función utilizado para obtener el PE de un olt.
     *
     * @param array $arrayParametros['inIdElemento'   => id elemento del Olt.
     *                               'strUsrCreacion' => Usuario en sesión.
     *                               'strIpCreacion'  => Ip en sesión.
     *                              ]
     *
     * @return InfoElemento $objElementoPadre
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 26-04-2021
     *
     */
    public function getPeByOlt($arrayParametros)
    {
        $intIdElemento    = ( isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']) )
                              ? $arrayParametros['intIdElemento'] : '';
        $strUserSession   = ( isset($arrayParametros['strUsrCreacion']) && !empty($arrayParametros['strUsrCreacion']) )
                              ? $arrayParametros['strUsrCreacion'] : 'TELCOS +';
        $strIpCreacion    = ( isset($arrayParametros['strIpCreacion']) && !empty($arrayParametros['strIpCreacion']) )
                              ? $arrayParametros['strIpCreacion'] : '127.0.0.1';
        try
        {
            if(empty($intIdElemento))
            {
                throw new \Exception("Los parámetros proporcionados para la búsqueda del pe de un olt estan incompletos.");
            }
            $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElemento);
            if($objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento() == "OLT")
            {
                //seteo las variables
                $strDetallePeAsignado    = "PE_ASIGNADO";
                $arrayParametrosDetMulti = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->getOne('NUEVA_RED_GPON_TN',
                                                                                    'COMERCIAL',
                                                                                    '',
                                                                                    'NOMBRES PARAMETROS DETALLES MULTIPLATAFORMA',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '');
                if(isset($arrayParametrosDetMulti) && !empty($arrayParametrosDetMulti))
                {
                    $strDetallePeAsignado   = isset($arrayParametrosDetMulti['valor2']) && !empty($arrayParametrosDetMulti['valor2'])
                                              ? $arrayParametrosDetMulti['valor2'] : $strDetallePeAsignado;
                }
                //obtengo el detalle del id del pe
                $objDetalleIdPe = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array("elementoId"    => $objElemento->getId(),
                                                                      "detalleNombre" => $strDetallePeAsignado,
                                                                      "estado"        => "Activo"));
                if(is_object($objDetalleIdPe))
                {
                    $objElementoPadre = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                    ->find($objDetalleIdPe->getDetalleValor());
                }
                else
                {
                    throw new \Exception("No se encontró el PE asignado al OLT, por favor notificar a Sistemas.");
                }
            }
            else
            {
                throw new \Exception("No existe Olt con la descripción enviada por parámetro");
            }
        }
        catch(\Exception $ex)
        {
            $this->utilService->insertError('TELCOS+',
                                            'InfoServicioTecnicoService.getPeByOlt',
                                            $ex->getMessage(),
                                            $strUserSession,
                                            $strIpCreacion);
        }
        return $objElementoPadre;
    }
    
    /**
     * Funcion que sirve para enviar notificacion de cancelación de servicio de cliente
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-06-2016 Se agrega validación de bandera de envió de correo
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 14-12-2016 Se agrega validación de ultima milla para validar alias a usar en envio notificaciones para servicios del flujo TTCO
     *
     * @param String $asunto
     * @param Entity $servicio
     * @param String $motivo
     * @param Entity $elemento
     * @param String $nombreInterfaceElemento
     * @param Entity $servicioHistorial
     * @param String $usrCreacion
     * @param String $ipCreacion
     * @param Entity $servicio
     * @param String $prefijoEmpresa
     *
     * @since 1.0
     */
    public function enviarMailCancelarServicio($asunto, $servicio, $motivo, $elemento, $nombreInterfaceElemento, $servicioHistorial, $usrCreacion, $ipCreacion, $prefijoEmpresa)
    {
        //------- COMUNICACIONES --- NOTIFICACIONES
        $jurisdiccion = $servicio->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion();
        $entityMotivo = $this->emGeneral->getRepository('schemaBundle:AdmiMotivo')->find($motivo);
        $strUltimaMilla = "";

        //migracion_ttco_md
        $arrayEmpresaMigra = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                ->getEmpresaEquivalente($servicio->getId(), $prefijoEmpresa);

        if($arrayEmpresaMigra)
        {
            if($arrayEmpresaMigra['prefijo'] == 'TTCO')
            {
                $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
            }
        }

        //equipo
        $equipo = array();
        $equipo['nombreElemento'] = $elemento->getNombreElemento();
        $equipo['nombreInterfaceElemento'] = $nombreInterfaceElemento;
        $equipo['nombreInterfaceElementoAnterior'] = "";
        $infoIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                ->findOneBy(array("elementoId" => $elemento->getId()));
        $equipo['ipElemento'] = ($infoIpElemento) ? $infoIpElemento->getIp() : null;

        $mensaje = $this->templating->render('tecnicoBundle:InfoServicio:notificacion.html.twig', array('servicio' => $servicio,
            'equipo' => $equipo,
            'servicioHistorial' => $servicioHistorial,
            'motivo' => $entityMotivo));



        $infoDocumento = new InfoDocumento();
        $infoDocumento->setMensaje($mensaje);
        $infoDocumento->setEstado('Activo');
        $infoDocumento->setNombreDocumento($asunto);
        $infoDocumento->setFeCreacion(new \DateTime('now'));
        $infoDocumento->setUsrCreacion($usrCreacion);
        $infoDocumento->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumento);
        $this->emComunicacion->flush();

        $infoComunicacion = new InfoComunicacion();
        $infoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoComunicacion->setEstado('Activo');
        $infoComunicacion->setUsrCreacion($usrCreacion);
        $infoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoComunicacion);
        $this->emComunicacion->flush();

        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoDocumentoComunicacion->setEstado('Activo');
        $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
        $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumentoComunicacion);
        $this->emComunicacion->flush();

        //DESTINATARIOS....
        $formasContacto = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                ->getContactosByLoginPersonaAndFormaContacto($servicio->getPuntoId()->getUsrVendedor(), 'Correo Electronico');
        $to = array();
        if($prefijoEmpresa == "TTCO")
        {
            $objServicioTecnico = $this->emComercial
                    ->getRepository('schemaBundle:InfoServicioTecnico')
                    ->findOneBy(array("servicioId" => $servicio->getId()));
            if(is_object($objServicioTecnico))
            {
                $objUltimaMilla = $this->emInfraestructura
                        ->getRepository('schemaBundle:AdmiTipoMedio')
                        ->find($objServicioTecnico->getUltimaMillaId());
                if(is_object($objUltimaMilla))
                {
                    $strUltimaMilla = $objUltimaMilla->getNombreTipoMedio();
                }
            }

            $to[] = 'notificaciones_telcos@telconet.ec';

            if($strUltimaMilla == "Radio")
            {
                $cc[] = 'radioenlace_gye@telconet.ec';
                $cc[] = 'radioenlace_uio@telconet.ec';
            }
        }
        else if($prefijoEmpresa == "MD")
        {
            $to[] = 'cfalcivar@telconet.ec';
            $to[] = 'kbarrezueta@telconet.ec';
            $to[] = 'psalinas@telconet.ec';
            $to[] = 'rmonserrate@telconet.ec';
            $to[] = 'pnaula@telconet.ec';
            $to[] = 'xvera@telconet.ec';
        }

        if($formasContacto)
        {
            foreach($formasContacto as $formaContacto)
            {
                $to[] = $formaContacto['valor'];
            }
        }

        //ENVIO DE MAIL
        $message = \Swift_Message::newInstance()
                ->setSubject($asunto)
                ->setFrom('notificaciones_telcos@telconet.ec')
                ->setTo($to)
                ->setCc($cc)
                ->setBody($mensaje, 'text/html')
        ;

        if($this->mailerSend == "true")
        {
            $this->mailer->send($message);
        }
    }

    /**
     * Funcion que sirve para enviar notificacion de reconexión de servicio de cliente
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-06-2016 Se agrega validación de bandera de envió de correo
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 14-12-2016 Se agrega validación de ultima milla para validar alias a usar en envio notificaciones para servicios del flujo TTCO
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.3 20/03/2023 - Se agrega empresa Ecuanet para envio de notificaciones.
     *
     * @param String $asunto
     * @param Entity $servicio
     * @param String $motivo
     * @param Entity $elemento
     * @param String $nombreInterfaceElemento
     * @param Entity $servicioHistorial
     * @param String $usrCreacion
     * @param String $ipCreacion
     * @param Entity $servicio
     * @param String $prefijoEmpresa
     *
     * @since 1.0
     */
    public function enviarMailReconectarServicio($asunto, $servicio, $motivo, $elemento, $nombreInterfaceElemento, $servicioHistorial, $usrCreacion, $ipCreacion, $prefijoEmpresa)
    {
        //------- COMUNICACIONES --- NOTIFICACIONES
        $jurisdiccion = $servicio->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion();
        $strUltimaMilla = "";

        //$entityMotivo = $emGeneral->getRepository('schemaBundle:AdmiMotivo')->find($motivo);
        //migracion_ttco_md
        $arrayEmpresaMigra = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                ->getEmpresaEquivalente($servicio->getId(), $prefijoEmpresa);

        if($arrayEmpresaMigra)
        {
            if($arrayEmpresaMigra['prefijo'] == 'TTCO')
            {
                $prefijoEmpresa = $arrayEmpresaMigra['prefijo'];
            }
        }

        //equipo
        $equipo = array();
        $equipo['nombreElemento'] = $elemento->getNombreElemento();
        $equipo['nombreInterfaceElemento'] = $nombreInterfaceElemento;
        $equipo['nombreInterfaceElementoAnterior'] = "";
        $infoIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                ->findOneBy(array("elementoId" => $elemento->getId()));
        $equipo['ipElemento'] = ($infoIpElemento) ? $infoIpElemento->getIp() : null;

        $mensaje = $this->templating->render('tecnicoBundle:InfoServicio:notificacion.html.twig', array('servicio' => $servicio,
            'equipo' => $equipo,
            'servicioHistorial' => $servicioHistorial,
            'motivo' => ''));

        $infoDocumento = new InfoDocumento();
        $infoDocumento->setMensaje($mensaje);
        $infoDocumento->setEstado('Activo');
        $infoDocumento->setNombreDocumento($asunto);
        $infoDocumento->setFeCreacion(new \DateTime('now'));
        $infoDocumento->setUsrCreacion($usrCreacion);
        $infoDocumento->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumento);
        $this->emComunicacion->flush();

        $infoComunicacion = new InfoComunicacion();
        $infoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoComunicacion->setEstado('Activo');
        $infoComunicacion->setUsrCreacion($usrCreacion);
        $infoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoComunicacion);
        $this->emComunicacion->flush();

        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
        $infoDocumentoComunicacion->setEstado('Activo');
        $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
        $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
        $this->emComunicacion->persist($infoDocumentoComunicacion);
        $this->emComunicacion->flush();

        //DESTINATARIOS....
        $formasContacto = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                ->getContactosByLoginPersonaAndFormaContacto($servicio->getPuntoId()->getUsrVendedor(), 'Correo Electronico');
        $to = array();
        $cc = array();
        if($prefijoEmpresa == "TTCO")
        {
            $objServicioTecnico = $this->emComercial
                    ->getRepository('schemaBundle:InfoServicioTecnico')
                    ->findOneBy(array("servicioId" => $servicio->getId()));
            if(is_object($objServicioTecnico))
            {
                $objUltimaMilla = $this->emInfraestructura
                        ->getRepository('schemaBundle:AdmiTipoMedio')
                        ->find($objServicioTecnico->getUltimaMillaId());
                if(is_object($objUltimaMilla))
                {
                    $strUltimaMilla = $objUltimaMilla->getNombreTipoMedio();
                }
            }

            $to[] = 'notificaciones_telcos@telconet.ec';

            if($strUltimaMilla == "Radio")
            {
                $cc[] = 'radioenlace_gye@telconet.ec';
                $cc[] = 'radioenlace_uio@telconet.ec';
            }
        }
        else if($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN")
        {
            $to[] = 'notificaciones_telcos@telconet.ec';
        }

        if($formasContacto)
        {
            foreach($formasContacto as $formaContacto)
            {
                $to[] = $formaContacto['valor'];
            }
        }

        //ENVIO DE MAIL
        $message = \Swift_Message::newInstance()
                ->setSubject($asunto)
                ->setFrom('notificaciones_telcos@telconet.ec')
                ->setTo($to)
                ->setCc($cc)
                ->setBody($mensaje, 'text/html')
        ;

        if($this->mailerSend == "true")
        {
            $this->mailer->send($message);
        }
    }

    /**
     * Funcion que sirve para reiniciar el ont del cliente
     * desde el olt
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 20-04-2015
     * @param array $arrayParametros (modeloElemento, interfaceElemento, ontId, servicioTecnico)
     */
    public function reiniciarOnt($arrayParametros)
    {
        $modeloElemento = $arrayParametros['modeloElemento'];
        $interfaceElemento = $arrayParametros['interfaceElemento'];
        $ontId = $arrayParametros['ontId'];
        $servicioTecnico = $arrayParametros['servicioTecnico'];

        //*OBTENER SCRIPT SPID --------------------------------------------------------*/
        $scriptArray = $this->obtenerArregloScript("reiniciarOnt", $modeloElemento);
        $idDocumento = $scriptArray[0]->idDocumento;
        $usuario = $scriptArray[0]->usuario;
        //*----------------------------------------------------------------------*/
        //dividir interface para obtener tarjeta y puerto pon
        list($tarjeta, $puertoPon) = split('/', $interfaceElemento->getNombreInterfaceElemento());

        //variables datos
        $datos = $tarjeta . "," . $puertoPon . "," . $ontId . "," . $puertoPon . "," . $ontId;

        $resultadoJson = $this->ejecutarComandoMdEjecucion($servicioTecnico->getElementoId(), $usuario, $datos, $idDocumento);

        return $resultadoJson;
    }

    /**
     * ejecutarComandoMdEjecucion
     *
     * Metodo encargado de crear la policy con los parametros ingresados en el formulario dentro del CNR
     *
     * @param $idElemento
     * @param $usuario
     * @param $datos
     * @param $idDocumento
     *
     * @return json con resultado de la ejecucion del script
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 05-03-2015
     *
     */
    public function ejecutarComandoMdEjecucion($idElemento, $usuario, $datos, $idDocumento)
    {
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/md_ejecucion.jar '" .
                $this->host . "' '" . $idDocumento . "' '" . $usuario . "' 'SSH' '" . $idElemento . "' '" .
                $datos . "' '" . $this->pathParameters . "'";

        $salida1 = shell_exec($comando);
        $pos1 = strpos($salida1, "{");
        $jsonObj1 = substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);

        return $resultadJson1;
    }

    /**
     * ejecutarComandoPersonalizadoMdDatos
     *
     * Metodo encargado de crear la policy la informacion de los DNS Servers en el CNR
     *
     * @param $idElemento
     * @param $usuario
     * @param $datos
     * @param $idDocumento
     *
     * @return json con resultado de la ejecucion del script
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 05-03-2015
     *
     */
    public function ejecutarComandoPersonalizadoMdDatos($idElemento, $usuario, $datos, $idDocumento, $accionSeguridad)
    {
        $comando = "java -jar -Djava.security.egd=file:/dev/./urandom " . $this->pathTelcos . "telcos/src/telconet/tecnicoBundle/batch/md_datos.jar '" .
                $this->host . "' '" . $accionSeguridad . "' '" . $idElemento . "' '" . $usuario . "' 'puerto' '" . $idDocumento . "' '" . $datos . "' '" .
                $this->pathParameters . "'";

        $salida1 = shell_exec($comando);
        $pos1 = strpos($salida1, "{");
        $jsonObj1 = substr($salida1, $pos1);
        $resultadJson1 = json_decode($jsonObj1);

        return $resultadJson1;
    }

    /**
     * Funcion que sirve para ingresar un historial de un servicio
     * en la base de datos
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 5-05-2015
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 20-03-2018 - Se agrega motivo al ingreso de Historial en caso de ser enviado como parametro
     *
     * @param InfoServicio $servicio
     * @param String $estado
     * @param String $observacion
     * @param String $usrCreacion
     * @param String $ipCreacion
     */
    public function ingresarServicioHistorial($objServicio, $strEstado, $strObservacion, $strUsrCreacion, $strIpCreacion, $objMotivo = null)
    {
        $objServicioHistorial = new InfoServicioHistorial();
        $objServicioHistorial->setServicioId($objServicio);
        $objServicioHistorial->setObservacion($strObservacion);
        $objServicioHistorial->setEstado($strEstado);
        $objServicioHistorial->setUsrCreacion($strUsrCreacion);
        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
        $objServicioHistorial->setIpCreacion($strIpCreacion);

        if(is_object($objMotivo))
        {
            $objServicioHistorial->setMotivoId($objMotivo->getId());
        }

        $this->emComercial->persist($objServicioHistorial);
        $this->emComercial->flush();
    }

    public function getInfoDetalleSolCaract($objDetalleSolicitud, $caracteristica)
    {
        $objInfoDetalleSolCaract = null;
        if($caracteristica)
        {
            $carac = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array("descripcionCaracteristica" => $caracteristica,
                "estado" => "Activo"));
        }

        if(is_object($carac))
        {
            $objInfoDetalleSolCaract = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                    ->findOneBy(array("detalleSolicitudId" => $objDetalleSolicitud->getId(),
                "caracteristicaId" => $carac->getId(),
                "estado" => "Asignada"));
        }

        return $objInfoDetalleSolCaract;
    }

    public function insertarInfoDetalleSolCaract($arrayParametro)
    {
        $objInfoDetalleSolCaract = new InfoDetalleSolCaract();
        $objInfoDetalleSolCaract->setDetalleSolicitudId($arrayParametro['objDetalleSolicitudId']);
        $objInfoDetalleSolCaract->setCaracteristicaId($arrayParametro['objCaracteristica']);
        $objInfoDetalleSolCaract->setValor($arrayParametro['valor']);
        $objInfoDetalleSolCaract->setEstado($arrayParametro['estado']);
        $objInfoDetalleSolCaract->setUsrCreacion($arrayParametro['usrCreacion']);
        $objInfoDetalleSolCaract->setFeCreacion(new \DateTime('now'));
        $this->emComercial->persist($objInfoDetalleSolCaract);
        $this->emComercial->flush();

        return $objInfoDetalleSolCaract;
    }

    public function getCaracteristicaByInfoServicioProdCaract($objServicioProdCaract)
    {
        $objProdCaract = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->find($objServicioProdCaract->getProductoCaracterisiticaId());

        $objCaracteristica = $objProdCaract->getCaracteristicaId();

        return $objCaracteristica;
    }

    /**
     * insertarInfoServicioProdCaract, inserta un registro en la entidad InfoServicioProdCaract
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 17-11-2015
     *
     * @param array $arrayParametro[
     *                              strCaracteristica  => Recibe la caracteristica a buscar
     *                              entityAdmiProducto => Recibe entidad AdmiProducto
     *                              entityInfoServicio => Recibe entidad InfoServicio
     *                              strValor           => Recibe el valor de la caracteristica
     *                              strEstado          => Recibe el estado a insertar en la caracteristica
     *                              strUsrCreacion     => Recibe el usuario creacion a insertar en la caracteristica
     *
     *                             ]
     * @return object $objInfoServicioProdCaract Retorna el objeto InfoServicioProdCaract
     */
    public function insertarInfoServicioProdCaract($arrayParametro)
    {
        $arrayFindProdCaracteristica[] = array();
        $arrayFindProdCaracteristica['entityAdmiProducto'] = $arrayParametro['entityAdmiProducto'];
        $arrayFindProdCaracteristica['strCaracteristica'] = $arrayParametro['strCaracteristica'];

        //Busca la entidad AdmiProductoCaracteristica dependiendo la caracteristica y producto.
        $arrayAdmiProductoCaracteristica = $this->getServProductoCaracteristica($arrayFindProdCaracteristica);

        $objInfoServicioProdCaract = new InfoServicioProdCaract();
        $objInfoServicioProdCaract->setServicioId($arrayParametro['entityInfoServicio']->getId());
        $objInfoServicioProdCaract->setProductoCaracterisiticaId($arrayAdmiProductoCaracteristica['entityAdmiProductoCaracteristica']->getId());
        $objInfoServicioProdCaract->setValor($arrayParametro['strValor']);
        $objInfoServicioProdCaract->setEstado($arrayParametro['strEstado']);
        $objInfoServicioProdCaract->setUsrCreacion($arrayParametro['strUsrCreacion']);
        $objInfoServicioProdCaract->setFeCreacion(new \DateTime('now'));
        return $objInfoServicioProdCaract;
    }

    /**
     * isValidMac, metodo que valida si el formato de la mac es correcto
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 17-11-2015
     *
     * @param string $strMac => Recibe el string a validar
     *
     * @return boolean Retorna true cuando el formato de la mac es correcto false caso contrario
     */
    public function isValidMac($strMac)
    {
        // formato 01:23:45:67:89:ab
        if(preg_match('/^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$/', $strMac))
        {
            return true;
        }
        // formato 01-23-45-67-89-ab
        if(preg_match('/^([a-fA-F0-9]{2}\-){5}[a-fA-F0-9]{2}$/', $strMac))
        {
            return true;
        }
        // formato 0123456789ab
        else if(preg_match('/^[a-fA-F0-9]{12}$/', $strMac))
        {
            return true;
        }
        // formato 0123.4567.89ab
        else if(preg_match('/^([a-fA-F0-9]{4}\.){2}[a-fA-F0-9]{4}$/', $strMac))
        {
            return true;
        }
        else
        {
            return false;
        }
        return false;
    }

//isValidMac

    /**
     * getMacByIdServicioProducto, obtiene la mac de un servicio
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 17-11-2015
     *
     * @param type $arrayParametros[
     *                              intIdServicio       => Envia el ID del servicio
     *                              strCaracteristica   => Envia la caracteristica a buscar
     *                              entityAdmiProducto  => Envia la entidad AdmiProducto
     *                              ]
     * @return string  $strMacWifi Retorna la mac
     */
    public function getMacByIdServicioProducto($arrayParametros)
    {
        $strMacWifi = '';
        //Busca el servicio
        $entityInfoServicio = $this->emInfraestructura->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['intIdServicio']);
        //Si el servicio existe continua con la busqueda
        if($entityInfoServicio)
        {
            $servProdCaractMacWifi = $this->getServicioProductoCaracteristica($entityInfoServicio, $arrayParametros['strCaracteristica'], $arrayParametros['entityAdmiProducto']);
            //Si existe el objeto setea la mac en la variable para retornarla
            if($servProdCaractMacWifi)
            {
                $strMacWifi = $servProdCaractMacWifi->getValor();
            }
        }
        return $strMacWifi;
    }

//getMacByIdServicioProducto

    /**
     * updateInsertServProdCaractByServicioFromIp, actualiza o inserta la caracteristica del servicio en la entidad InfoServicioProdCaract,
     * buscando el servicio por la IP y obtiene la entididad AdmiProductoCaracteristica dependiento si la IP esta dentro del plan de internet o es una
     * ip adicional, si la ip esta dentro del plan de internet se actualizara o insertara con la caracterisitica MAC WIFI si es una ip adicional con
     * MAC.
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 17-11-2015
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 02-05-2016
     *
     * @param array   $arrayRequest[
     *                              strIp                   => Recibe la ip a buscar en la entidad InfoIp.
     *                              strEstadoIp             => Recibe el estado de la ip a buscar en la entidad InfoIp.
     *                              strNombreTecnico        => Recibe el nombre tecnico a buscar en la entidad AdmiProducto.
     *                              strEstadoProducto       => Recibe el estado a buscar en la entidad AdmiProducto.
     *                              arrayCaracteristica     => Recibe el array de las caracteristicas a buscar.
     *                              strCodEmpresa           => Recibe el codigo de la empresa en sesion.
     *                              strEstadoServProdCaract => Recibe estado de la entidad InfoServicioProdCaract.
     *                              strUsuario              => Recibe usuario que realiza la transaccion.
     *                              strValorCaracteristica  => Recibe el valor de la caracteristica a insertar/actualizar
     *                                                         en la entidad InfoServicioProdCaract
     *                              ]
     * @return array $arrayResponse[
     *                             strStatus               => Codigo que define que sucedio en el proceso
     *                                                          [000 => No realizo alguna accion,
     *                                                           001 => Error,
     *                                                           100 => Proceso realizado con exito].
     *                             strMensaje              => Mensaje que describe que sucedio en el proceso.
     *                             InfoServicioProdCaract  => Entidad InfoServicioProdCaract.
     *                             ]
     */
    function updateInsertServProdCaractByServicioFromIp($arrayRequest)
    {
        $arrayResponse = array();
        $arrayResponse['strStatus'] = '000';
        $arrayResponse['strMensaje'] = 'No se realizo alguna accion.';
        $arrayResponse['InfoServicioProdCaract'] = '';

        //Si no contiene strIp termina el metodo con un return.
        if(empty($arrayRequest['strIp']))
        {
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'No está enviando Ip.';
            return $arrayResponse;
        }

        //Si no contiene strEstadoIp termina el metodo con un return.
        if(empty($arrayRequest['strEstadoIp']))
        {
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'No está enviando estado de Ip a buscar.';
            return $arrayResponse;
        }

        //Si no contiene strNombreTecnico termina el metodo con un return.
        if(empty($arrayRequest['strNombreTecnico']))
        {
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'No está enviando el nombre tecnico para buscar el producto.';
            return $arrayResponse;
        }

        //Si no contiene strEstadoProducto termina el metodo con un return.
        if(empty($arrayRequest['strEstadoProducto']))
        {
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'No está enviando estado del producto a buscar.';
            return $arrayResponse;
        }

        //Si no contiene arrayCaracteristica termina el metodo con un return.
        if(empty($arrayRequest['arrayCaracteristica']))
        {
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'No está enviando las caracterisiticas a buscar.';
            return $arrayResponse;
        }

        //Si no contiene strValorCaracteristica termina el metodo con un return.
        if(empty($arrayRequest['strValorCaracteristica']))
        {
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'No está enviando el valor de la caracteristica.';
            return $arrayResponse;
        }

        $this->emComercial->getConnection()->beginTransaction();

        try
        {
            //Busca el producto dependiendo los parametros enviados.
            $entityAdmiProducto = $this->emInfraestructura->getRepository('schemaBundle:AdmiProducto')
                    ->findOneBy(array('nombreTecnico' => $arrayRequest['strNombreTecnico'],
                'estado' => $arrayRequest['strEstadoProducto'],
                'empresaCod' => $arrayRequest['strCodEmpresa']));

            //Si no encontro el producto termina el metodo con un return.
            if(!$entityAdmiProducto)
            {
                $arrayResponse['strStatus'] = '001';
                $arrayResponse['strMensaje'] = 'No se encontro el producto ' . $arrayRequest['strNombreTecnico'];
                $this->emComercial->getConnection()->close();
                return $arrayResponse;
            }

            //Busca la ip dependiendo los parametros enviados.
            $entityInfoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                    ->findOneBy(array('ip' => $arrayRequest['strIp'],
                'estado' => $arrayRequest['strEstadoIp']));

            //Si no encontro la ip termina el metodo con un return.
            if(!$entityInfoIp)
            {
                $arrayResponse['strStatus'] = '001';
                $arrayResponse['strMensaje'] = 'No se encontro la ip.';
                $this->emComercial->getConnection()->close();
                return $arrayResponse;
            }

            //Busca el servicio.
            $entityInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($entityInfoIp->getServicioId());

            //Si no encontro el servicio termina el metodo con un return.
            if(!$entityInfoServicio)
            {
                $arrayResponse['strStatus'] = '001';
                $arrayResponse['strMensaje'] = 'No se encontro el servicio';
                $this->emComercial->getConnection()->close();
                return $arrayResponse;
            }

            $InfoServicioProdCaract = '';

            //Itera el array de caracterisiticas para buscar en getServicioProductoCaracteristica por cada una de ellas.
            foreach($arrayRequest['arrayCaracteristica'] as $strCaracteristicaBuscar):

                //Busca con el servicio, producto, caracteristica si existe un regsitro activo.
                $InfoServicioProdCaract = $this->getServicioProductoCaracteristica($entityInfoServicio, $strCaracteristicaBuscar, $entityAdmiProducto);

                //Si encuentra informacion en la InfoServicioProdCaract sale de la iteracion.
                if($InfoServicioProdCaract)
                {
                    break;
                }
            endforeach;

            $strCaracteristica = '';
            //Pregunta si la entidad InfoServicio tiene plan y no producto.
            if($entityInfoServicio->getPlanId() && !$entityInfoServicio->getProductoId())
            {
                $arrayFindTipoServicioByPlan = array();
                $arrayFindTipoServicioByPlan['intIdPlan'] = $entityInfoServicio->getPlanId();
                $arrayFindTipoServicioByPlan['strPrimerExists'] = 'NOT EXISTS';
                $arrayFindTipoServicioByPlan['strNombreTecnicoPExists'] = 'INTERNET';
                $arrayFindTipoServicioByPlan['strSegundoExists'] = 'EXISTS';
                $arrayFindTipoServicioByPlan['strNombreTecnicoSExists'] = 'IP';

                //Envia a buscar el tipo de servicio.
                $arrayInfoPlanCab = $this->emComercial->getRepository('schemaBundle:InfoPlanCab')->getTipoServicioByPlan($arrayFindTipoServicioByPlan);

                //Entra si se realizo la consulta con exito.
                if("100" === $arrayInfoPlanCab['strStatus'])
                {
                    $strCaracteristica = 'MAC WIFI';
                }
            }//Pregunta si la entidad InfoServicio tiene no tiene plan pero tiene producto.
            else if(!$entityInfoServicio->getPlanId() && $entityInfoServicio->getProductoId())
            {
                //Busca si el producto es IP.
                $entityAdmiProductoIp = $this->emInfraestructura->getRepository('schemaBundle:AdmiProducto')
                        ->findOneBy(array('nombreTecnico' => 'IP',
                    'estado' => 'Activo',
                    'empresaCod' => $arrayRequest['strCodEmpresa']));

                //Si encuentra el registro setea la caracteristica como MAC.
                if($entityAdmiProductoIp)
                {
                    $strCaracteristica = 'MAC';
                }
            }

            $arrayFindProdCaracteristica[] = array();
            $arrayFindProdCaracteristica['entityAdmiProducto'] = $entityAdmiProducto;
            $arrayFindProdCaracteristica['strCaracteristica'] = $strCaracteristica;

            //Busca la entidad AdmiProductoCaracteristica dependiendo la caracteristica seteada anteriormente en $strCaracteristica.
            $arrayAdmiProductoCaracteristica = $this->getServProductoCaracteristica($arrayFindProdCaracteristica);

            //Si el resultado es diferente de 100 existio un error y termina el metodo con un return.
            if('100' !== $arrayAdmiProductoCaracteristica['strStatus'])
            {
                $arrayResponse['strStatus'] = $arrayAdmiProductoCaracteristica['strStatus'];
                $arrayResponse['strMensaje'] = $arrayAdmiProductoCaracteristica['strMensaje'];
                $this->emComercial->getConnection()->close();
                return $arrayResponse;
            }

            //Si no obtuvo resultado
            if(!$arrayAdmiProductoCaracteristica['entityAdmiProductoCaracteristica'])
            {
                $arrayResponse['strStatus'] = '001';
                $arrayResponse['strMensaje'] = 'No se encontro caracteristica';
                $this->emComercial->getConnection()->close();
                return $arrayResponse;
            }

            //Si encontro la entidad InfoServicioProdCaract actuaiza la entidad.
            if($InfoServicioProdCaract)
            {
                $arrayResponse['strMensaje'] = 'Se encontro la entidad InfoServicioProdCaract';
                $InfoServicioProdCaract->setValor($arrayRequest['strValorCaracteristica']);
                $InfoServicioProdCaract->setProductoCaracterisiticaId($arrayAdmiProductoCaracteristica['entityAdmiProductoCaracteristica']->getId());
                $InfoServicioProdCaract->setFeUltMod(new \DateTime('now'));
                $InfoServicioProdCaract->setUsrCreacion($arrayRequest['strUsuario']);
                $arrayResponse['InfoServicioProdCaract'] = $InfoServicioProdCaract;
            } //Caso contrario inserta un registro en la entidad InfoServicioProdCaract.
            else
            {
                $arrayInsertarInfoServicioProdCaract = array();
                $arrayInsertarInfoServicioProdCaract['entityAdmiProducto'] = $entityAdmiProducto;
                $arrayInsertarInfoServicioProdCaract['strCaracteristica'] = $strCaracteristica;
                $arrayInsertarInfoServicioProdCaract['entityInfoServicio'] = $entityInfoServicio;
                $arrayInsertarInfoServicioProdCaract['strValor'] = $arrayRequest['strValorCaracteristica'];
                $arrayInsertarInfoServicioProdCaract['strEstado'] = $arrayRequest['strEstadoServProdCaract'];
                $arrayInsertarInfoServicioProdCaract['strUsrCreacion'] = $arrayRequest['strUsuario'];
                //Envia a crear el objeto
                $InfoServicioProdCaract = $this->insertarInfoServicioProdCaract($arrayInsertarInfoServicioProdCaract);

                $arrayResponse['strMensaje'] = 'Se creal el objeto InfoServicioProdCaract';
                $arrayResponse['InfoServicioProdCaract'] = $InfoServicioProdCaract;
            }

            $arrayResponse['strStatus'] = '100';
            $this->emComercial->persist($InfoServicioProdCaract);
            $this->emComercial->flush();
            $this->emComercial->commit();
        }
        catch(\Exception $ex)
        {
            $this->emComercial->getConnection()->rollback();
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'Error: ' . $ex->getMessage();
            return $arrayResponse;
        }
        $this->emComercial->getConnection()->close();
        return $arrayResponse;
    }

//updateInsertServProdCaractByServicioFromIp

    /**
     * getServProductoCaracteristica, metodo que devuelve las entidades AdmiProductoCaracteristica y la InfoServicioProdCaract.
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 17-11-2015
     *
     * @param array  $arrayRequest[
     *                            strCaracteristica             => Recibe la caracteristica.
     *                            entityAdmiProducto            => Recibe la entidad AdmiProducto.
     *                            strFindInfoServicioProdCaract => Permite buscar y devolver la entidad InfoServicioProdCaract siempre
     *                                                             que se le envie como valor "findServicioProdCaract".
     *                            intIdServicio                 => Recibe el ID del servicio.
     *                            ]
     *
     * @return array $arrayResponse[
     *                             strStatus                        => Codigo que define que sucedio en el proceso
     *                                                                  [000 => No realizo alguna accion,
     *                                                                   001 => Error,
     *                                                                   100 => Proceso realizado con exito].
     *                             strMensaje                       => Mensaje que describe que sucedio en el proceso.
     *                             entityAdmiProductoCaracteristica => Entidad AdmiProductoCaracteristica.
     *                             entityInfoServicioProdCaract     => Entidad InfoServicioProdCaract.
     *                             ]
     */
    public function getServProductoCaracteristica($arrayRequest)
    {
        $arrayResponse = array();
        $arrayResponse['strStatus'] = '000';
        $arrayResponse['strMensaje'] = 'No se realizo alguna acción';
        $arrayResponse['entityAdmiProductoCaracteristica'] = '';
        $arrayResponse['entityInfoServicioProdCaract'] = '';

        try
        {
            //Si strCaracteristica esta vacia termina el metodo con un return
            if(empty($arrayRequest['strCaracteristica']))
            {
                $arrayResponse['strStatus'] = '001';
                $arrayResponse['strMensaje'] = 'No está enviando la caracterisitica.';
                return $arrayResponse;
            }

            //Si entityAdmiProducto esta vacia termina el metodo con un return
            if(!$arrayRequest['entityAdmiProducto'])
            {
                $arrayResponse['strStatus'] = '001';
                $arrayResponse['strMensaje'] = 'No está enviando el producto.';
                return $arrayResponse;
            }

            //Busca la caracterisitica
            $entityAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array('descripcionCaracteristica' => $arrayRequest['strCaracteristica'],
                'estado' => 'Activo'));

            //Si la caracterisitica no existe termina el metodo con un return
            if(!$entityAdmiCaracteristica)
            {
                $arrayResponse['strStatus'] = '001';
                $arrayResponse['strMensaje'] = 'No se encontro la caracteristica.';
                return $arrayResponse;
            }

            //Busca el producto caracterisitica
            $entityAdmiProductoCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                    ->findOneBy(array('productoId' => $arrayRequest['entityAdmiProducto']->getId(),
                'caracteristicaId' => $entityAdmiCaracteristica->getId(),
                'estado' => 'Activo'));
            $arrayResponse['strMensaje'] = 'Se encontro el producto caracterisica.';
            $arrayResponse['entityAdmiProductoCaracteristica'] = $entityAdmiProductoCaracteristica;

            //Permite buscar en la entidad InfoServicioProdCaract
            if("findServicioProdCaract" === $arrayRequest['strFindInfoServicioProdCaract'])
            {
                //Si intIdServicio esta vacia termina el metodo con un return
                if(empty($arrayRequest['intIdServicio']))
                {
                    $arrayResponse['strStatus'] = '001';
                    $arrayResponse['strMensaje'] = 'Para buscar InfoServicioProdCaract debe enviar el ID del servicio.';
                    return $arrayResponse;
                }

                //Si $entityAdmiProductoCaracteristica existe busca en la entidad InfoServicioProdCaract
                if($entityAdmiProductoCaracteristica)
                {
                    $entityInfoServicioProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                            ->findOneBy(array('servicioId' => $arrayRequest['intIdServicio'],
                        'productoCaracterisiticaId' => $entityAdmiProductoCaracteristica->getId(),
                        'estado' => 'Activo'));
                    $arrayResponse['entityInfoServicioProdCaract'] = $entityInfoServicioProdCaract;
                    $arrayResponse['strMensaje'] = 'Se encontro el producto caracterisica y el servicio producto caracteristica.';
                } //Caso contrario setea un mensaje
                else
                {
                    $arrayResponse['strMensaje'] = 'No se pudo buscar en la entidad InfoServicioProdCaract porque no se encontro ' .
                            'el producto caracterisitica';
                }
            }
            $arrayResponse['strStatus'] = '100';
        }
        catch(\Exception $ex)
        {
            $arrayResponse['strStatus'] = '001';
            $arrayResponse['strMensaje'] = 'Error : ' . $ex->getMessage();
        }
        return $arrayResponse;
    }

//getServProductoCaracteristica

    /**
     * Metodo que devuelve array con la relacion de vlan con la mac de cada servicio vinculado a un puerto
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 21-04-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1
     * @since 09-09-2016 - Se valida cuando los escenarios del servicio que son migrados o directo reralicen la busqueda correctamente del CPE
     *                     para obtener la MAC
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2
     * @since 14-09-2016 - Se valida que cuando existan servicios sin informacion de mac o vlan muestre error a usuario y no permite
     *                     continuar el flujo produciendo que clientes se queden sin configurar
     *
     * @author Modifcado: Duval Medina C. <@telconet.ec>
     * @version 1.3 2016-09-21 - Se ajusta vaidación de $registro['vlan']
     *                           Se incluye validación por Radio para obtener la MAC de la misma para enviar en el listado
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.4 05-10-2016 - Se valida para que no se tomen en cuenta a los servicios de INTERNET WIFI en la reconfiguración de puerto
     *
     * @param integer $intInterface
     * @return Array $arrayMacVlan [ vlan => mac ]
     */
    public function getArrayMacVlansPorInterface($intInterface)
    {
        $arrayMacVlan = array();
        $arrayRespuesta = array();
        $arrayServiciosSinInformacion = array();
        //Se obtiene las vlan
        $arrayVlans = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                ->getResultadoVlansPorInterface($intInterface);

        foreach($arrayVlans as $registro)
        {
            //verifico si son internet wifi
            $strNombreProducto = '';
            if(isset($registro['idServicio']) && !empty($registro['idServicio']))
            {
                $objServicio = $this->emInfraestructura->getRepository("schemaBundle:InfoServicio")->find($registro['idServicio']);
                if($objServicio)
                {
                    if($objServicio->getProductoId())
                    {
                        $strNombreProducto = $objServicio->getProductoId()->getNombreTecnico();
                    }
                }
            }
            if($strNombreProducto != 'INTERNET WIFI')
            {
                if($registro['vlan'] != null)
                {
                    $strMacRadio = null;
                    $objTipoMedio = $this->emInfraestructura->getRepository("schemaBundle:AdmiTipoMedio")->find($registro['ultimaMillaId']);
                    if($objTipoMedio->getNombreTipoMedio() == "Radio" && $registro['elementoConectorId'])//Si es UM Radio y esta registrada la Radio
                    {
                        $objDetalleElementoMac = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                ->findOneBy(array(
                            'elementoId' => $registro['elementoClienteId'],
                            'detalleNombre' => 'MAC',
                            'estado' => 'Activo'
                                )
                        );
                        $strMacRadio = $objDetalleElementoMac ? $objDetalleElementoMac->getDetalleValor() : null;
                        if($strMacRadio)
                        {
                            //Si la vlan ya existe se agrega al arreglo de mac correspondiente la MAC nueva
                            if($this->existeKeyInArray($arrayMacVlan, $registro['vlan']))
                            {
                                $arrayMAcs = $arrayMacVlan[$registro['vlan']];
                                $arrayMAcs[] = $strMacRadio;
                                $arrayMacVlan[$registro['vlan']] = $arrayMAcs;
                            }
                            else
                            {
                                $arrayMacVlan[$registro['vlan']] = array($strMacRadio);
                            }
                        }
                    }

                    $arrayResultado = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                            ->getMacCpePorServicioInterface($registro['idServicio']);
                    $strMacCpe = $arrayResultado ? $arrayResultado['mac'] : null;

                    if($strMacCpe)
                    {
                        //Si la vlan ya existe se agrega al arreglo de mac correspondiente la MAC nueva
                        if($this->existeKeyInArray($arrayMacVlan, $registro['vlan']))
                        {
                            $arrayMAcs = $arrayMacVlan[$registro['vlan']];
                            $arrayMAcs[] = $strMacCpe;
                            $arrayMacVlan[$registro['vlan']] = $arrayMAcs;
                        }
                        else
                        {
                            $arrayMacVlan[$registro['vlan']] = array($strMacCpe);
                        }
                    }
                    else
                    {
                        if(!$strMacRadio)
                        {
                            $arrayServiciosSinInformacion[] = array('loginAux' => $registro['loginAux'], 'motivo' => 'Verificar información de MAC');
                        }
                    }
                }
                else
                {
                    $arrayServiciosSinInformacion[] = array('loginAux' => $registro['loginAux'], 'motivo' => 'Verificar información de VLAN');
                }
            }
        }

        $arrayRespuesta['macVlan'] = $arrayMacVlan;
        $arrayRespuesta['serviciosSinInformacion'] = $arrayServiciosSinInformacion;
        return $arrayRespuesta;
    }

    /**
     * Funcion encargada de devolver el array a codificar y enviar via json con las vlans con sus respectivas macs y estas ser configuradas
     * en el switch, cuando el operador es (+) se añade la mac nueva a la lista inicial y cuando es (-) se retira la misma de la lista inicial
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 25-04-2016
     *
     * @param Array   $arrayMacVlanPuerto
     * @param integer $vlanActual
     * @param string  $macActual
     * @param string  $operacion
     * @return Array $arrayMacVlan [ vlan : arrayMac[] ]
     */
    public function getArrayMacVlansAConfigurar($arrayMacVlanPuerto, $vlanActual, $macActual, $operacion)
    {
        switch($operacion)
        {
            case "+":
                if($this->existeKeyInArray($arrayMacVlanPuerto, $vlanActual))
                {
                    $arrayMacs = $arrayMacVlanPuerto[$vlanActual];
                    $arrayMacs[] = $macActual;
                    $arrayMacVlanPuerto[$vlanActual] = $arrayMacs;
                }
                else
                {
                    $arrayMacVlanPuerto[$vlanActual] = array($macActual);
                }
                $arrayMacVlan = $arrayMacVlanPuerto;
                break;
            case "-":
                $arrayMacVlan = array();
                foreach($arrayMacVlanPuerto as $vlan => $arrayMacs)
                {
                    $subArrayMacsEnviar = array();

                    //Cuando se encuentre la vlan a cortar dentro de la lista de vlans de servicios activos no se
                    //agrega a lista de vlans a enviar al sw
                    foreach($arrayMacs as $mac)
                    {
                        if(strtoupper($mac) != strtoupper($macActual))
                        {
                            $subArrayMacsEnviar[] = $mac;
                        }
                    }

                    $arrayMacVlan[$vlan] = $subArrayMacsEnviar;
                }
                break;
        }

        return count($arrayMacVlan) > 0 ? $arrayMacVlan : "";
    }

    private function existeKeyInArray($array, $valor)
    {
        foreach($array as $key => $value)
        {
            if($key == $valor)
            {
                return true;
            }
        }
        return false;
    }

    /**
     * Metodo que devuelve la MAC del CPE dado un servicio para clientes de TN
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 25-04-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - Se ajusta para obtener la MAC del CPE segun el tipo de ultima milla que tenga el producto/servicio
     * @since 27-07-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 - Se ajusta para que soporte servcios migrados que no contengan data de GIS para obtener el CPE y posterior la MAC
     * @since 29-07-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 - Se obtiene la MAC segun esquema de MAC por interface
     * @since 15-08-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 - Se envia parametro que determina si un servicio es pseudope o normal
     * @since 22-11-2016
     *
     * @param integer $idServicio
     * @return string macCpe
     */
    public function getMacPorServicio($idServicio, $boolEsPseudoPe = false)
    {
        $macCpe = null;

        $arrayResultado = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                ->getMacCpePorServicioInterface($idServicio, $boolEsPseudoPe);

        if($arrayResultado)
        {
            $macCpe = $arrayResultado['mac'];
        }

        return $macCpe;
    }

    /**
     * getMacPorCambioTipoMedio
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0
     * @since 21-01-2018.
     * @param array $arrayParametros
     * @return string macCpe
     */
    public function getMacPorCambioTipoMedio($arrayParametros)
    {
        $strMacCpe = null;
        $arrayResultado = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                ->getMacCpeCambioTipoMedioInterface($arrayParametros);

        if($arrayResultado)
        {
            $strMacCpe = $arrayResultado['mac'];
        }

        return $strMacCpe;
    }
    /**
     * Metodo encargado de crear el login auxiliar a servicios de TN que no contengan aumentandolos en secuencial
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 09-05-2016
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 30-01-2017 Se modifica la función para que no ingrese un login aux duplicado
     *
     * @param integer $intIdServicio
     */
    public function generarLoginAuxiliar($intIdServicio)
    {
        $objServicio = $this->emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);

        //Si existe el servicio y no contiene login auxiliar se procede a crearlo
        if(!$objServicio->getLoginAux())
        {
            $objPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($objServicio->getPuntoId()->getId());

            //Se obtienen todos los servicios
            $arrayServicios = $this->emComercial->getRepository("schemaBundle:InfoServicio")->findByPuntoId($objPunto);

            $intCont = 0;

            //Se cuentan todos los logines que contengan login auxiliar
            foreach($arrayServicios as $servicio)
            {
                if($servicio->getLoginAux())
                {
                    $intCont ++;
                }
            }

            $intContLogin = $intCont + 1;

            $boolLoginAux = false;
            while($boolLoginAux == false)
            {
                $strLoginAux = $objPunto->getLogin() . "_" . $intContLogin;

                $objServicioAux = $this->emComercial->getRepository("schemaBundle:InfoServicio")->findOneByLoginAux($strLoginAux);

                if(is_object($objServicioAux))
                {
                    $intContLogin++;
                }
                else
                {
                    $boolLoginAux = true;
                }
            }
            $objServicio->setLoginAux($strLoginAux);

            $this->emComercial->persist($objServicio);
            $this->emComercial->flush();
        }
    }

    // ====================================================================================================
    // ====================================================================================================
    // FUNCIONALIDAD GENERAL PARA SOLICITUDES
    // ====================================================================================================
    // ====================================================================================================
    /**
     * Funcion que permite generar una Solicitud de Retiro de Equipo
     *
     * @author Juan Carlos Lafuente <jlafuente@telconet.ec>
     *
     * @version 1.0 10-04-2015 - Creacion del la funcionalidad
     *
     * @author Allan Suarez Carvajal <arsuarez@telconet.ec>
     * @version 1.1 04-07-2017 - Se coloca "flush" para que transaccione correctamenter el historial de la solicitud de retiro de equipo
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 21-12-2017 - En la tabla INFO_DETALLE_ASIGNACION se registra el campo tipo asignado 'EMPLEADO'
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 22-05-2019 - Se crea tarea de retiro de equipo al responsable del retiro de equipos y adicional ahora las solicitudes se
     *                           crearan en estado Asignada
     * 
     * @author Modificado: Antonio Ayala <afayala@telconet.ec>
     * @version 1.4 15-09-2021 - Se llama al proceso de crear infoTarea si se está migrando un equipo cpe desde Secure NG Firewall
     * 
     * @author Modificado: Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.5 21-02-2022 - Se cambia el estado de la característica de la solicitud a AsignadoTarea para los servicios GPON MPLS.
     * 
     * @param array $arrayParametros (objServicio, objElementoCliente, idPersonaEmpresaRol, strMotivoSolicitud
     *                                ipCreacion, usrCreacion)
     */
    public function generarSolicitudRetiroEquipo($arrayParametros)
    {
        $arrayParametrosHist = array();
        $strCodEmpresa       = "10";
        $strPrefijoEmpresa   = "TN";
        $feCreacion          = new \DateTime('now');
        $strBandResponsableCambioEquipo = $arrayParametros["strBandResponsableCambioEquipo"] ?
                                          $arrayParametros["strBandResponsableCambioEquipo"] : "N";
        // --------------------------------------------------------------------------------------------------------
        $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO",
            "estado" => "Activo"));
        // --------------------------------------------------------------------------------------------------------
        $objCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array("descripcionCaracteristica" => "ELEMENTO CLIENTE",
            "estado" => "Activo"));
        // --------------------------------------------------------------------------------------------------------
        $objProceso = $this->emSoporte->getRepository('schemaBundle:AdmiProceso')
                ->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");
        $objTareas = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                ->findTareasActivasByProceso($objProceso->getId());
        $objTarea = $objTareas[0];
        
        if ($arrayParametros['esMigracionNgFirewall']=="SI")
        {
            $arrayParametrosTarea['intIdPunto'] = $arrayParametros["intIdPunto"];
            $arrayParametrosTarea['empresaCod'] = $strCodEmpresa;
            $objInfoTarea                       = $this->emComunicacion->getRepository("schemaBundle:InfoComunicacion")
                                                                       ->getInfoComunicacionTarea($arrayParametrosTarea);
            
            $arrayParametros['idPersonaEmpresaRol']    = $objInfoTarea[0]['idPersonaEmpresaRol'];
            $arrayParametros["strPersonaEmpresaRolId"] = $objInfoTarea[0]['idPersonaEmpresaRol'];
            $arrayParametros["strTipoAsignado"]        = $objInfoTarea[0]['strTipoAsignado'];
            if($arrayParametros["strTipoAsignado"] === "CUADRILLA")
            {
                $arrayParametros["intIdCuadrilla"] = $objInfoTarea[0]['asignadoId'];
            }
        }
        
        // --------------------------------------------------------------------------------------------------------
        $objPersonaEmpresaRolUsr = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                ->find($arrayParametros['idPersonaEmpresaRol']);
        $departamento = $this->emComercial->getRepository('schemaBundle:AdmiDepartamento')
                ->find($objPersonaEmpresaRolUsr->getDepartamentoId());
        // --------------------------------------------------------------------------------------------------------
        // Creamos el Detalle Solicitud de Retito de Equipo
        $objDetalleSolicitud = new InfoDetalleSolicitud();
        $objDetalleSolicitud->setServicioId($arrayParametros['objServicio']);
        $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
        $objDetalleSolicitud->setEstado("Asignada");
        $objDetalleSolicitud->setUsrCreacion($arrayParametros['usrCreacion']);
        $objDetalleSolicitud->setFeCreacion($feCreacion);
        $objDetalleSolicitud->setObservacion('SOLICITA RETIRO DE EQUIPO POR ' . strtoupper($arrayParametros['strMotivoSolicitud']));
        $this->emComercial->persist($objDetalleSolicitud);
        $this->emComercial->flush();

        // Detalle de la solicitud con el elemento del cliente
        $objDetalleSolicitudCarac = new InfoDetalleSolCaract();
        $objDetalleSolicitudCarac->setCaracteristicaId($objCaracteristica);
        $objDetalleSolicitudCarac->setDetalleSolicitudId($objDetalleSolicitud);
        $objDetalleSolicitudCarac->setValor($arrayParametros['objElementoCliente']->getId());
        //verificar si es gpon
        if(isset($arrayParametros['booleanTipoRedGpon']) && $arrayParametros['booleanTipoRedGpon'])
        {
            $objDetalleSolicitudCarac->setEstado("AsignadoTarea");
        }
        else
        {
            $objDetalleSolicitudCarac->setEstado("Asignada");
        }
        $objDetalleSolicitudCarac->setFeCreacion($feCreacion);
        $objDetalleSolicitudCarac->setUsrCreacion($arrayParametros['usrCreacion']);
        $this->emComercial->persist($objDetalleSolicitudCarac);
        $this->emComercial->flush();

        //grabar nuevo info_detalle para la solicitud de retiro de equipo
        $objDetalle = new InfoDetalle();
        $objDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
        $objDetalle->setTareaId($objTarea);
        $objDetalle->setObservacion("Tarea de Retiro de Equipo");
        $objDetalle->setPesoPresupuestado(0);
        $objDetalle->setValorPresupuestado(0);
        $objDetalle->setFeCreacion($feCreacion);
        $objDetalle->setFeSolicitada(new \DateTime('now'));
        $objDetalle->setIpCreacion($arrayParametros['ipCreacion']);
        $objDetalle->setUsrCreacion($arrayParametros['usrCreacion']);
        $this->emSoporte->persist($objDetalle);
        $this->emSoporte->flush();

        if($strBandResponsableCambioEquipo === "S")
        {
            //Obtener el nombre del afectado
            $objInfoPunto = $this->emComercial->getRepository('schemaBundle:InfoPunto')->find($arrayParametros["intIdPunto"]);

            if(is_object($objInfoPunto))
            {
                $objInfoPersonaEmpresaRol = $objInfoPunto->getPersonaEmpresaRolId();

                if(is_object($objInfoPersonaEmpresaRol))
                {
                    $intPersonaId = $objInfoPersonaEmpresaRol->getPersonaId();

                    if(!empty($intPersonaId))
                    {
                        $objInfoPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')->find($intPersonaId);

                        if(is_object($objInfoPersona))
                        {
                            $strNombreAfectado = $objInfoPersona->__toString();
                        }
                    }
                }
            }

            $objInfoCriterioAfectado = new InfoCriterioAfectado();
            $objInfoCriterioAfectado->setId("1");
            $objInfoCriterioAfectado->setDetalleId($objDetalle);
            $objInfoCriterioAfectado->setCriterio("Clientes");
            $objInfoCriterioAfectado->setOpcion("Cliente: " . $strNombreAfectado . " | OPCION: Punto Cliente");
            $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
            $objInfoCriterioAfectado->setUsrCreacion($arrayParametros['usrCreacion']);
            $objInfoCriterioAfectado->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emSoporte->persist($objInfoCriterioAfectado);
            $this->emSoporte->flush();

            $infoParteAfectada = new InfoParteAfectada();
            $infoParteAfectada->setTipoAfectado("Cliente");
            $infoParteAfectada->setDetalleId($objDetalle->getId());
            $infoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
            $infoParteAfectada->setAfectadoId($arrayParametros["intIdPunto"]);
            $infoParteAfectada->setFeIniIncidencia(new \DateTime('now'));
            $infoParteAfectada->setAfectadoNombre($arrayParametros["strLogin"]);
            $infoParteAfectada->setAfectadoDescripcion($strNombreAfectado);
            $infoParteAfectada->setFeCreacion(new \DateTime('now'));
            $infoParteAfectada->setUsrCreacion($arrayParametros['usrCreacion']);
            $infoParteAfectada->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emSoporte->persist($infoParteAfectada);
            $this->emSoporte->flush();

            //Se obtiene datos del responsable de la tarea
            $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($arrayParametros["strPersonaEmpresaRolId"]);

            if(is_object($objInfoPersonaEmpresaRol))
            {
                //Id del departamento
                $intAsignadoId = $objInfoPersonaEmpresaRol->getDepartamentoId();

                $objPersona = $objInfoPersonaEmpresaRol->getPersonaId();

                if(is_object($objPersona))
                {
                    //Id persona
                    $intIdPersona = $objPersona->getId();

                    //nombres de la persona
                    $strNombres = $objPersona->getNombres() . " " . $objPersona->getApellidos();
                }

                if(!empty($intAsignadoId))
                {
                    $objAdmiDepartamento = $this->emComercial->getRepository('schemaBundle:AdmiDepartamento')->find($intAsignadoId);

                    if(is_object($objAdmiDepartamento))
                    {
                        //Nombre del departamento
                        $intIdDepartamentoNotif = $objAdmiDepartamento->getId();
                        $strDepartamentoNotif   = $objAdmiDepartamento->getNombreDepartamento();
                        $strAsignadoNombre      = $objAdmiDepartamento->getNombreDepartamento();
                    }
                }

                if($arrayParametros["strTipoAsignado"] === "CUADRILLA")
                {
                    $intIdCuadrilla = $arrayParametros["intIdCuadrilla"];

                    //se obtiene nombre de la cuadrilla
                    $objAdmiCuadrilla = $this->emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($intIdCuadrilla);

                    if(is_object($objAdmiCuadrilla))
                    {
                        $strNombreCuadrilla = $objAdmiCuadrilla->getNombreCuadrilla();

                        $intAsignadoId     = $intIdCuadrilla;
                        $strAsignadoNombre = $strNombreCuadrilla;
                    }
                }
            }

            // Asignacion de la Solicitud de Retiro de Equipo
            $objDetalleAsignacion = new InfoDetalleAsignacion();
            $objDetalleAsignacion->setDetalleId($objDetalle);
            $objDetalleAsignacion->setAsignadoId($intAsignadoId);
            $objDetalleAsignacion->setAsignadoNombre($strAsignadoNombre);
            $objDetalleAsignacion->setRefAsignadoId($intIdPersona);
            $objDetalleAsignacion->setRefAsignadoNombre($strNombres);
            $objDetalleAsignacion->setPersonaEmpresaRolId($arrayParametros["strPersonaEmpresaRolId"]);
            $objDetalleAsignacion->setTipoAsignado($arrayParametros["strTipoAsignado"]);
            $objDetalleAsignacion->setFeCreacion($feCreacion);
            $objDetalleAsignacion->setIpCreacion($arrayParametros['ipCreacion']);
            $objDetalleAsignacion->setUsrCreacion($arrayParametros['usrCreacion']);
            $this->emSoporte->persist($objDetalleAsignacion);
            $this->emSoporte->flush();
        }
        else
        {
            // Asignacion de la Solicitud de Retiro de Equipo
            $objDetalleAsignacion = new InfoDetalleAsignacion();
            $objDetalleAsignacion->setDetalleId($objDetalle);
            $objDetalleAsignacion->setAsignadoId($departamento->getId());
            $objDetalleAsignacion->setAsignadoNombre($departamento->getNombreDepartamento());
            $objDetalleAsignacion->setRefAsignadoId($objPersonaEmpresaRolUsr->getPersonaId()->getId());
            if($objPersonaEmpresaRolUsr->getPersonaId()->getRazonSocial() == "")
            {
                $strNombres = $objPersonaEmpresaRolUsr->getPersonaId()->getNombres() . " " . $objPersonaEmpresaRolUsr->getPersonaId()->getApellidos();
            }
            else
            {
                $strNombres = $objPersonaEmpresaRolUsr->getPersonaId()->getRazonSocial();
            }
            $objDetalleAsignacion->setRefAsignadoNombre($strNombres);
            $objDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRolUsr->getId());
            $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
            $objDetalleAsignacion->setFeCreacion($feCreacion);
            $objDetalleAsignacion->setIpCreacion($arrayParametros['ipCreacion']);
            $objDetalleAsignacion->setUsrCreacion($arrayParametros['usrCreacion']);
            $this->emSoporte->persist($objDetalleAsignacion);
            $this->emSoporte->flush();
        }

        //crear historial para la solicitud
        $objDetalleSolicitudHistorial = new InfoDetalleSolHist();
        $objDetalleSolicitudHistorial->setDetalleSolicitudId($objDetalleSolicitud);
        $objDetalleSolicitudHistorial->setEstado("AsignadoTarea");
        $objDetalleSolicitudHistorial->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE EQUIPO POR "
                . strtoupper($arrayParametros['strMotivoSolicitud']));
        $objDetalleSolicitudHistorial->setFeCreacion($feCreacion);
        $objDetalleSolicitudHistorial->setIpCreacion($arrayParametros['ipCreacion']);
        $objDetalleSolicitudHistorial->setUsrCreacion($arrayParametros['usrCreacion']);
        $this->emComercial->persist($objDetalleSolicitudHistorial);
        $this->emComercial->flush();

        if($strBandResponsableCambioEquipo === "S")
        {
            //crear historial para la solicitud
            $objDetalleSolicitudHistorial = new InfoDetalleSolHist();
            $objDetalleSolicitudHistorial->setDetalleSolicitudId($objDetalleSolicitud);
            $objDetalleSolicitudHistorial->setEstado("Asignada");
            $objDetalleSolicitudHistorial->setObservacion("Se crea tarea de retiro de equipo y la solicitud queda en estado Asignada");
            $objDetalleSolicitudHistorial->setFeCreacion($feCreacion);
            $objDetalleSolicitudHistorial->setIpCreacion($arrayParametros['ipCreacion']);
            $objDetalleSolicitudHistorial->setUsrCreacion($arrayParametros['usrCreacion']);
            $this->emComercial->persist($objDetalleSolicitudHistorial);
            $this->emComercial->flush();

            //Obtener el cod de la empresa
            if(is_object($arrayParametros['objServicio']))
            {
                $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['objServicio']->getId());

                if(is_object($objInfoServicio->getPlanId()))
                {
                    $strCodEmpresa     = "18";
                    $strPrefijoEmpresa = "MD";
                }
            }

            //Ingresar historial y seguimiento
            $arrayParametrosHist["strCodEmpresa"]        = $strCodEmpresa;
            $arrayParametrosHist["strUsrCreacion"]       = $arrayParametros['usrCreacion'];
            $arrayParametrosHist["strIpCreacion"]        = $arrayParametros['ipCreacion'];
            $arrayParametrosHist["strOpcion"]            = "Historial";
            $arrayParametrosHist["strEnviaDepartamento"] = "N";

            //Se ingresa el historial de la tarea
            if(is_object($objDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $objDetalle->getId();
            }
            $arrayParametrosHist["strObservacion"]  = "Tarea Asignada";
            $arrayParametrosHist["strEstadoActual"] = "Asignada";
            $arrayParametrosHist["strAccion"]       = "Asignada";

            $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Se ingresa el seguimiento de la tarea
            $arrayParametrosHist["strObservacion"] = "Tarea fue Asignada a ".$strNombres;
            $arrayParametrosHist["strOpcion"]      = "Seguimiento";

            $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Se genera el número de la tarea
            $arrayParametrosTarea["objInfoDetalle"]   = $objDetalle;
            $arrayParametrosTarea["strMensaje"]       = "Tarea de retiro de equipo";
            $arrayParametrosTarea["strObservacion"]   = "Tarea de retiro de equipo";
            $arrayParametrosTarea["strCodigoEmpresa"] = $strCodEmpresa;
            $arrayParametrosTarea["strUser"]          = $arrayParametros['usrCreacion'];
            $arrayParametrosTarea["strIpCreacion"]    = $arrayParametros['ipCreacion'];

            $arrayRespuesta = $this->serviceSoporte->generarNumeroTareaPorDetalleId($arrayParametrosTarea);

            if($arrayRespuesta["strStatus"] === "ERROR")
            {
                throw new \Exception($arrayRespuesta["strMensaje"]);
            }

            //******************************************Envio de NOTIFICACION***************************************************//
            //Se obtiene la ciudad del responsable
            if(is_object($objInfoPersonaEmpresaRol))
            {
                $intOficina = $objInfoPersonaEmpresaRol->getOficinaId();

                if(!empty($intOficina))
                {
                    $objInfoOficinaGrupo = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')->find($intOficina);

                    if(is_object($objInfoOficinaGrupo))
                    {
                        $intCantonId = $objInfoOficinaGrupo->getCantonId();
                    }
                }
            }

            //Se obtiene el correo del responsable
            $objPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                         ->findOneBy(array('personaId'       => $intIdPersona,
                                                                           'formaContactoId' => 5,
                                                                           'estado'          => "Activo"));

            if($objPersonaFormaContacto)
            {
                $arrayTo[] = $objPersonaFormaContacto->getValor(); //Correo Persona Asignada
            }

            $objInfoPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')->findOneByLogin($arrayParametros['usrCreacion']);

            if(is_object($objInfoPersona))
            {
                $strNombreLogeado = $objInfoPersona->getNombres()." ".$objInfoPersona->getApellidos();
            }

            if(is_object($objTarea))
            {
                $strNombreProceso = $objTarea->getProcesoId()->getNombreProceso();
                $strNombreTarea   = $objTarea->getNombreTarea();
            }
            
            if ($arrayParametros['esMigracionNgFirewall']=="SI")
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $objDetalle->getId();
                $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametros['usrCreacion'];
                $this->serviceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                $this->emComercial->getConnection()->commit();
            }

            $strAsunto = "Asignacion de Tarea | PROCESO: ".$strNombreProceso;

            $arrayParametros = array('detalle'            => $objDetalle,
                                     'numeroTarea'        => $arrayRespuesta["intNumeroTarea"],
                                     'nombreProceso'      => $strNombreProceso,
                                     'nombreTarea'        => $strNombreTarea,
                                     'nombreDepartamento' => $strDepartamentoNotif." - ".$strNombres,
                                     'observacion'        => "Tarea de retiro de equipo generada automáticamente",
                                     'empleadoLogeado'    => $arrayParametros['usrCreacion']." - ".$strNombreLogeado,
                                     'empresa'            => $strPrefijoEmpresa,
                                     'loginProcesado'     => $arrayParametros["strLogin"]);

            $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                         $arrayTo,
                                                         'TAREACERT',
                                                         $arrayParametros,
                                                         $strCodEmpresa,
                                                         $intCantonId,
                                                         $intIdDepartamentoNotif);
            //******************************************Envio de NOTIFICACION***************************************************//
        }
    }

    /**
     * obtiene las ip controladoras asociada al servicio wifi gpon safe city
     * por el modelo y marca del elemento cpe cliente pe
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.0 18-11-2022
     * @since 1.0
     *
     * @param array $arrayParametros [
     *                                 objServicio        =>  Objeto del servicio al cual se le finalizara solicitud
     *                                 strTipoSolicitud   =>  Tipo de solicitud a finalizar perteneciente al servicio
     *                                 strEstadoSolicitud =>  Estado actual de la solicitud a finalizar
     *                                 strUsrCreacion     =>  Usuario de creación a registrar en las tablas a procesar
     *                                 strIpCreacion      =>  Ip de creación a registrar en las tablas a procesar
     *                               ]
     *
     * @return array $arrayResponse (status, mensaje)
     */
    public function ipsControladoras($arrayParametros)
    {
        $arrayResultado  = array();
        $arrayElementos  = array();
        $strEmpresaCod   = $arrayParametros['empresaCod'];
        $strModeloApWifi = $arrayParametros['modeloAp'];

        if(isset($strModeloApWifi) && !empty($strModeloApWifi))
        {
            $objModeloElemento = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                                             ->findOneBy(array("nombreModeloElemento" => $strModeloApWifi));

            if(is_object($objModeloElemento))
            {
                $strMarca  = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
            }
            else
            {
                $arrayResultado['data']    = null;
                $arrayResultado['status']  = 400;
                $arrayResultado['mensaje'] = 'El elemento wifi AP, no existe';
                return $arrayResultado;
            }
        }
        else
        {
            $arrayResultado['data']    = null;
            $arrayResultado['status']  = 400;
            $arrayResultado['mensaje'] = 'Debe enviar el modelo de wifi AP';
            return $arrayResultado;
        } 

        $objAdmiParametroCab = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                    ->findOneBy(array('nombreParametro' => 'IP_CONTROLADORA_GPON_MPLS_TN', 
                                                            'estado'          => 'Activo'));

        if(is_object($objAdmiParametroCab))
        {              
            if(isset($strEmpresaCod) && !empty($strEmpresaCod) && $strEmpresaCod === "10")
            {
                $objAdmiParametroDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->findBy(array('parametroId' => $objAdmiParametroCab->getId(),
                                                                'descripcion' => 'IP_CONTROLADORA_GPON_MPLS_TN',
                                                                'valor1'      => $strMarca,
                                                                'empresaCod'  => $strEmpresaCod,
                                                                'estado'      => 'Activo'));

                foreach($objAdmiParametroDet as $objIpControladora)
                {
                    if(is_object($objIpControladora))
                    {
                        $arrayIps[] = $objIpControladora->getValor2();
                    }
                }

                $arrayElementos = array('ipsControladoras' => $arrayIps);
            }
            else
            {
                $arrayResultado['data']    = null;
                $arrayResultado['status']  = "Error";
                $arrayResultado['mensaje'] = 'El código el la empresa es incorrecto';
                return $arrayResultado;
            }
        }

        $arrayResultado['data']    = $arrayElementos;
        $arrayResultado['status']  = 200;
        $arrayResultado['mensaje'] = 'consulta exitosa';
        return $arrayResultado;
    }

    /**
     * Funcion que permite Finalizar Solicitud
     *
     * @author Juan Carlos Lafuente <jlafuente@telconet.ec>
     * @version 1.0 10-04-2015 - Creacion del la funcionalidad
     * @since 1.0
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 15-09-2016 - Se agrega registro de historial de la solicitud
     * @since 1.1 15-09-2016
     *
     * @param array $arrayParametros [
     *                                 objServicio        =>  Objeto del servicio al cual se le finalizara solicitud
     *                                 strTipoSolicitud   =>  Tipo de solicitud a finalizar perteneciente al servicio
     *                                 strEstadoSolicitud =>  Estado actual de la solicitud a finalizar
     *                                 strUsrCreacion     =>  Usuario de creación a registrar en las tablas a procesar
     *                                 strIpCreacion      =>  Ip de creación a registrar en las tablas a procesar
     *                               ]
     *
     * @return array $arrayResponse (status, mensaje)
     */
    public function finalizarDetalleSolicitud($arrayParametros)
    {
        $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                ->findOneBy(array("descripcionSolicitud" => $arrayParametros['strTipoSolicitud'],
            "estado" => "Activo"));

        $objDetalleSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                ->findOneBy(array("servicioId" => $arrayParametros['objServicio']->getId(),
            "tipoSolicitudId" => $objTipoSolicitud,
            "estado" => $arrayParametros['strEstadoSolicitud']));
        if($objDetalleSolicitud)
        {
            $arrayCaracteristicasSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                    ->findBy(array("detalleSolicitudId" => $objDetalleSolicitud->getId()));
            if(count($arrayCaracteristicasSolicitud) > 0)
            {
                foreach($arrayCaracteristicasSolicitud as $caracteristicaIt)
                {
                    $caracteristicaIt->setEstado("Finalizada");
                    $this->emComercial->persist($caracteristicaIt);
                    $this->emComercial->flush();
                }
            }
            $objDetalleSolicitud->SetEstado("Finalizada");
            $this->emComercial->persist($objDetalleSolicitud);
            $this->emComercial->flush();

            //crear historial para la solicitud
            $objDetalleSolsHist = new InfoDetalleSolHist();
            $objDetalleSolsHist->setDetalleSolicitudId($objDetalleSolicitud);
            $objDetalleSolsHist->setEstado("Finalizada");
            $objDetalleSolsHist->setObservacion("Se finalizo solicitud.");
            $objDetalleSolsHist->setUsrCreacion($arrayParametros["strUsrCreacion"]);
            $objDetalleSolsHist->setFeCreacion(new \DateTime('now'));
            $objDetalleSolsHist->setIpCreacion($arrayParametros["strIpCreacion"]);
            $this->emComercial->persist($objDetalleSolsHist);
            $this->emComercial->flush();

            return array('status' => "OK", 'objDetalleSolicitud' => $objDetalleSolicitud);
        }
        else
        {
            return array('status' => "ERROR",
                'mensaje' => "No se encontro el tipo de solicitud " . $arrayParametros['strTipoSolicitud'] . " para el servicio.");
        }
    }

    /**
     * finalizarSolicitudPadrePorProcesoMasivo
     *
     * Metodo que finaliza detalles cabeceras una vez que sus solicitudes hijas hayan sido finalizadas
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 21-05-2016
     *
     * @param Array $arrayParametros [ idSolicitudPadre , usrCreacion , ipCreacion ]
     */
    public function finalizarSolicitudPadrePorProcesoMasivo($arrayParametros)
    {
        //Se verifica solicitud padre si tiene pendientes detalles de procesar
        $boolTieneDetallesPdtes = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                ->getTieneSolicitudesHijasPendientes($arrayParametros['idSolicitudPadre']);

        //Si todos los detalles fueron procesados se finaliza solicitud PADRE
        if(!$boolTieneDetallesPdtes)
        {
            $objDetalleSolicitudPadre = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                    ->find($arrayParametros['idSolicitudPadre']);

            //Finalizar la solicitud de cambio de plan
            $objDetalleSolicitudPadre->setEstado("Finalizada");
            $this->emComercial->persist($objDetalleSolicitudPadre);
            $this->emComercial->flush();

            //Se crea Historial de Servicio
            $objDetalleSolsHist = new InfoDetalleSolHist();
            $objDetalleSolsHist->setDetalleSolicitudId($objDetalleSolicitudPadre);
            $objDetalleSolsHist->setEstado($objDetalleSolicitudPadre->getEstado());
            $objDetalleSolsHist->setFeCreacion(new \DateTime('now'));
            $objDetalleSolsHist->setUsrCreacion($arrayParametros['usrCreacion']);
            $objDetalleSolsHist->setIpCreacion($arrayParametros['ipCreacion']);
            $objDetalleSolsHist->setObservacion("Se Finaliza Solicitud de Proceso Masivo");
            $this->emComercial->persist($objDetalleSolsHist);
            $this->emComercial->flush();
        }
    }

    /**
     * Método utilizado para realizar cancelacion de ldap de servicios antiguos y activaciones de servicios nuevos
     * generados por cambio de razon social
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1   Se agrega registro de historial de servicios con ldap modificados
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 17-02-2019 Se agrega la eliminación y creación de ldap para servicios Small Business y TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 06-11-2020 Se controla con excepciones esta función, para poder validarla desde la invocación de otras funciones  
     *
     * @param array $arrayParametros [
     *                                  "servicioAnterior"  => Objeto de servicio Anterior,
     *                                  "servicioNuevo"     => Objeto de servicio Nuevo,
     *                                  "usrCreacion"       => usuario de creación
     *                                  "prefijoEmpresa"    => prefijo de la empresa
     *
     * @since 1.0
     */
    public function configurarLdapCambioRazonSocial($arrayParametros)
    {
        $objServicioAnt     = $arrayParametros['servicioAnterior'];
        $objServicioNuevo   = $arrayParametros['servicioNuevo'];
        $strUsrCreacion     = $arrayParametros['usrCreacion'];
        $strIpCreacion      = $arrayParametros['ipCreacion'] ? $arrayParametros['ipCreacion'] : "127.0.0.1";
        $strPrefijoEmpresa  = $arrayParametros['prefijoEmpresa'] ? $arrayParametros['prefijoEmpresa'] : "MD";
        $strMensaje         = "";
        try
        {
            $intFlagProductoPref = 0;
            //verifica si el servicio esta configurado en ldap
            $objServTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                    ->findOneByServicioId($objServicioAnt->getId());

            if($objServTecnico)
            {
                if($objServTecnico->getElementoId())
                {
                    //verifico si el olt esta aprovisionando el CNR
                    $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                            ->findOneBy(array('detalleNombre' => 'APROVISIONAMIENTO_IP',
                        'elementoId' => $objServTecnico->getElementoId()));
                    $strTipoAprovisionamiento = $objDetalleElemento->getDetalleValor();
                    if($strTipoAprovisionamiento == "CNR")
                    {
                        //verificar se el servicio contiene un producto preferencial
                        $objPlanServicio = $objServicioAnt->getPlanId();
                        if($objPlanServicio != "" && $objPlanServicio != null)
                        {
                            $objPlanDetServicios = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                    ->findBy(array("planId" => $objPlanServicio->getId()));
                            foreach($objPlanDetServicios as $objPlanDetServicio)
                            {
                                $intProdServicio = $objPlanDetServicio->getProductoId();
                                $objProductoServicio = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($intProdServicio);

                                if($objProductoServicio->getNombreTecnico() == "INTERNET")
                                {
                                    $intFlagProductoPref = 1;
                                }
                            }
                        }
                        else
                        {
                            $intProdServicio = $objServicioAnt->getProductoId();
                            $objProductoServicio = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($intProdServicio);

                            if($objProductoServicio->getNombreTecnico() == "INTERNET"
                                || $objProductoServicio->getNombreTecnico() == "INTERNET SMALL BUSINESS"
                                || $objProductoServicio->getNombreTecnico() == "TELCOHOME")
                            {
                                $intFlagProductoPref = 1;
                            }
                        }

                        //si contiene producto preferencial se cancela ldap de servicio anterior y se crea el ldap para el nuevo servicio
                        if($intFlagProductoPref == 1)
                        {
                            //cancelar ldap anterior
                            //envio al ldap a cancelar
                            $mixJsonEliminaLdapServicio = $this->ejecutarComandoLdap("E", $objServicioAnt->getId(), $strPrefijoEmpresa);
                            if($mixJsonEliminaLdapServicio->status === "OK")
                            {
                                $strObsEliminaLdapServicio = "Se cancela ldap por cambio de razon social";
                            }
                            else
                            {
                                $strObsEliminaLdapServicio  = "No se ha podido eliminar el ldap por cambio de razon social";
                                $strMensaje                 .= "No se ha podido eliminar el ldap del servicio de Internet asociado al login "
                                                               .$objServicioAnt->getPuntoId()->getLogin();
                            }

                            // Creo registro en el Historial del Servicio Origen del Cambio de Razon Social
                            $objInfoServicioHistorialOrigen = new InfoServicioHistorial();
                            $objInfoServicioHistorialOrigen->setServicioId($objServicioAnt);
                            $objInfoServicioHistorialOrigen->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioHistorialOrigen->setUsrCreacion($strUsrCreacion);
                            $entityAdmiMotivo = $this->emComercial->getRepository('schemaBundle:AdmiMotivo')
                                    ->findOneByNombreMotivo('Cambio de Razon Social');
                            if($entityAdmiMotivo)
                            {
                                $objInfoServicioHistorialOrigen->setMotivoId($entityAdmiMotivo->getId());
                            }
                            $objInfoServicioHistorialOrigen->setEstado('Cancel');
                            $objInfoServicioHistorialOrigen->setObservacion($strObsEliminaLdapServicio);
                            $this->emComercial->persist($objInfoServicioHistorialOrigen);
                            $this->emComercial->flush();

                            //envio al ldap a crear
                            $mixJsonCreaLdapServicio = $this->ejecutarComandoLdap("N", $objServicioNuevo->getId(), $strPrefijoEmpresa);
                            if($mixJsonCreaLdapServicio->status === "OK")
                            {
                                $strObsCreaLdapServicio = "Se crea ldap por cambio de razón social";
                            }
                            else
                            {
                                $strObsCreaLdapServicio = "No se ha podido crear el ldap por cambio de razón social";
                                if(isset($strMensaje) && !empty($strMensaje))
                                {
                                    $strMensaje .= ". No se ha podido crear el ldap del servicio de Internet asociado al login "
                                                    .$objServicioNuevo->getPuntoId()->getLogin();
                                }
                            }

                            // Creo registro en el Historial del Servicio Origen del Cambio de Razon Social
                            $objInfoServicioHistorialNuevo = new InfoServicioHistorial();
                            $objInfoServicioHistorialNuevo->setServicioId($objServicioNuevo);
                            $objInfoServicioHistorialNuevo->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioHistorialNuevo->setUsrCreacion($strUsrCreacion);
                            $objInfoServicioHistorialNuevo->setEstado($objServicioNuevo->getEstado());
                            $objInfoServicioHistorialNuevo->setObservacion($strObsCreaLdapServicio);
                            $this->emComercial->persist($objInfoServicioHistorialNuevo);
                            $this->emComercial->flush();
                        }
                    }
                }
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "No se ha podido ejecutar correctamente la configuración de ldap de los servicios";
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->configurarLdapCambioRazonSocial',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
        }
        $arrayRespuesta     = array("status"    => $strStatus,
                                    "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para generar una clave aleatoria
     * @link http://codepad.org/UL8k4aYK CodePad generate password
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 13-06-2016
     */
    function generarPassword()
    {
        $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
        $pass = array(); //remember to declare $pass as an array
        $alphaLength = strlen($alphabet) - 1; //put the length -1 in cache
        for($i = 0; $i < 8; $i++)
        {
            $n = rand(0, $alphaLength);
            $pass[] = $alphabet[$n];
        }
        return implode($pass); //turn the array into a string
    }

    /**
     * Método utilizado para obtener el PE por el Switch
     *
     * @param array $arrayParametros[ 'intIdElemento' => id elemento del switch
     *                                'intIdServicio' => id del servicio
     *                              ]
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.0
     * @since 22-05-2016
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 Se agrega que el tipo de elemento para el parametro que recibe la funcion sea SWITCH
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.2 08-06-2016
     * Se actualiza funcion para que el pe los reciba dentro de la variable mensaje, y se inicializan variables para que no se llene
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 17-07-2018
     * Se agrega nuevo parámetro: idServicio para consultar la vrf y enviarla al WS de networking
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.4 05-08-2019
     * Se agrega el producto L3MPLS SDWAN a la consulta de VRF.
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.5 04-09-2019
     * Se agrega el producto DATOS DC SDWAN a la consulta de VRF.
     * 
     * @author Lizbeth Cruz<mlcruz@telconet.ec>
     * @version 1.6 17-09-2020 Se invoca de manera correcta a la función getServicioProductoCaracteristica sin necesidad de invocar 
     *                         nuevamente a éste service
     * 
     * @param integer idElemento Id del Elemento al cual pertenece el detalle
     * @return InfoElemento $objElementoPadre
     */
    public function getPeBySwitch($arrayParametros)
    {
        $idElemento      = $arrayParametros["intIdElemento"];
        $intIdServicio   = $arrayParametros["intIdServicio"] ? $arrayParametros["intIdServicio"] : "";
        $objAdmiProducto = null;
        $objInfoServicio = null;
        $strVrf          = "";
        $strCodEmpresa   = "10";

        if($idElemento > 0)
        {
            $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($idElemento);

            if(!empty($intIdServicio) && $intIdServicio != "")
            {
                //*************************Se inicia proceso para consultar la vrf asociada al servicio enviado*************************//
                $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

                if(is_object($objInfoServicio))
                {
                    $objAdmiProducto = $objInfoServicio->getProductoId();
                }


                if(is_object($objAdmiProducto))
                {
                    if($objAdmiProducto->getNombreTecnico() == "L3MPLS" || $objAdmiProducto->getNombreTecnico() == "CONCINTER" ||
                        $objAdmiProducto->getNombreTecnico() == "DATOSDC" || $objAdmiProducto->getNombreTecnico() == "L3MPLS SDWAN" ||
                        $objAdmiProducto->getNombreTecnico() == "DATOS DC SDWAN" || 
                        $objAdmiProducto->getDescripcionProducto()== 'CLEAR CHANNEL PUNTO A PUNTO')
                    {

                        $objServicioProductoCaracVrf = $this->getServicioProductoCaracteristica($objInfoServicio,
                                                                                                "VRF",
                                                                                                $objAdmiProducto);

                        if(is_object($objServicioProductoCaracVrf))
                        {
                            $objVrf  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                         ->find($objServicioProductoCaracVrf->getValor());

                            if(is_object($objVrf))
                            {
                                $strVrf = $objVrf->getValor();
                            }
                        }
                    }
                    else
                    {
                        //Vrf para INTMPLS
                        $arrayParametrosResultado = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                                    ->getOne('VRF-INTERNET',
                                                                             'TECNICO',
                                                                             '',
                                                                             'VRF-INTERNET',
                                                                             '','','','','',
                                                                             $strCodEmpresa,
                                                                             null
                                                                             );

                        $strVrf = isset($arrayParametrosResultado['valor1'])?$arrayParametrosResultado['valor1']:'';
                    }
                }
                //*************************Se inicia proceso para consultar la vrf asociada al servicio enviado*************************//
            }

            if(is_object($objElemento))
            {
                if($objElemento->getModeloElementoId()->getTipoElementoId() == "SWITCH")
                {
                    //Ejecuta script de consulta de PE por Switch
                    $arrayPeticiones = array();
                    //accion a ejecutar
                    $arrayPeticiones['url']         = 'getPeBySwitch';
                    $arrayPeticiones['accion']      = 'consultar';
                    $arrayPeticiones['sw']          = $objElemento->getNombreElemento();
                    $arrayPeticiones['vrf']         = $strVrf;
                    $arrayPeticiones['servicio']    = "GENERAL";
                    $arrayPeticiones['login_aux']   = "";
                    $arrayPeticiones['user_name']   = "";
                    $arrayPeticiones['user_ip']     = "";

                    //Ejecucion del metodo via WS para realizar la configuracion del SW
                    $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);
                    $status = $arrayRespuesta['status'];
                    $mensaje = $arrayRespuesta['mensaje'];

                    if($status == "OK")
                    {
                        if(count($mensaje) > 1)
                        {
                            $objElementoPadre = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                     ->findOneBy(array("nombreElemento" => $mensaje['pe']));
                        }
                        else
                        {
                            throw new \Exception("Parámetros no definidos.");
                        }

                        return $objElementoPadre;
                    }
                    else
                    {
                        throw new \Exception($mensaje);
                    }
                }
            }
        }
    }

    /**
     * Funcion que sirve para llamar al ws de networking que dado un Router/Pe nos devuelva
     * todos los switches con sus anillos
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 31-05-2016
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 08-06-2016
     * Se actualiza funcion para que los switches los reciba dentro de la variable mensaje, y se inicializan variables para que no se llene
     * el error_log
     */
    public function getSwitchesByPe($idElemento)
    {
        if($idElemento > 0)
        {
            $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                    ->find($idElemento);

            if(is_object($objElemento))
            {
                if($objElemento->getModeloElementoId()->getTipoElementoId() == "ROUTER")
                {
                    //Ejecuta script de consulta de Switches por PE
                    $arrayPeticiones = array();
                    //accion a ejecutar
                    $arrayPeticiones['url'] = 'getSwitchesByPe';
                    $arrayPeticiones['accion'] = 'consultar';
                    $arrayPeticiones['pe'] = $objElemento->getNombreElemento();
                    $arrayPeticiones['servicio'] = "GENERAL";
                    $arrayPeticiones['login_aux'] = "";
                    $arrayPeticiones['user_name'] = "";
                    $arrayPeticiones['user_ip'] = "";

                    //Ejecucion del metodo via WS para realizar la configuracion del SW
                    $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                    $status = $arrayRespuesta['status'];
                    $mensaje = $arrayRespuesta['mensaje'];

                    if($status == "OK")
                    {
                        $arraySwitches = $mensaje['switches'];

                        return $arraySwitches;
                    }
                    else
                    {
                        throw new \Exception("Pe no tiene switches: " . $mensaje);
                    }
                }//if($objElemento->getModeloElementoId()->getTipoElementoId() == "ROUTER")
            }//if(is_object($objElemento))
        }//if($idElemento>0)
    }

    /**
     * enviarNotificacionFinalizadoSolicitudMasiva
     *
     * Metodo que envia Notificacion via correo electronico al finalizar la solicitud masiva
     *
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0
     * @since 11-07-2016
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 28-09-2016 - Se modifican los destinatarios del envío de la notificación al finalizar la solicitud masiva, para que sean
     *                           sólo los correos asociados a los contactos comerciales del punto
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 09-03-2018 - Se agrega el valor de la velocidad para los productos Internet Small Business
     *
     *
     * @param Array $arrayParametros [ idSolicitudPadre, idServicio, usrCreacion]
     */
    public function enviarNotificacionFinalizadoSolicitudMasiva($arrayParametros)
    {
        $strCliente = "";
        $arrayTo = array();
        $arraySucursales = array();
        $intIdEmpresa = 0;

        $infoDetalleSolicitud = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud');
        $infoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio');

        try
        {
            if(isset($arrayParametros['idSolicitudPadre']) && isset($arrayParametros['idServicio']))
            {
                $entityInfoDetalleSolicitudCab = $infoDetalleSolicitud->find($arrayParametros['idSolicitudPadre']);
                $entityInfoServicio = $infoServicio->find($arrayParametros['idServicio']);
                if($entityInfoDetalleSolicitudCab)
                {
                    $strTipoSolicitud = "";
                    if($entityInfoDetalleSolicitudCab->getTipoSolicitudId())
                    {
                        $strTipoSolicitud = $entityInfoDetalleSolicitudCab->getTipoSolicitudId()->getDescripcionSolicitud();
                    }
                    $arrayUsuarioCorreo = $this->getPersonaNombreCorreo($entityInfoDetalleSolicitudCab->getUsrCreacion());
                    if(!empty($arrayUsuarioCorreo['correo']))
                    {
                        $arrayTo[] = $arrayUsuarioCorreo['correo'];
                    }

                    $arrayUsuarioEjecucionCorreo = $this->getPersonaNombreCorreo($arrayParametros['usrCreacion']);
                    if(!empty($arrayUsuarioEjecucionCorreo['correo']))
                    {
                        $arrayTo[] = $arrayUsuarioEjecucionCorreo['correo'];
                    }

                    if($entityInfoServicio)
                    {
                        $strPunto = '';
                        $puntoIdEntity = $entityInfoServicio->getPuntoId();
                        if($puntoIdEntity)
                        {
                            $personaIdEntity = $puntoIdEntity->getPersonaEmpresaRolId()->getPersonaId();
                            if($personaIdEntity)
                            {
                                $strCliente = '';
                                $arrayClienteCorreo = $this->getPersonaNombreCorreoByInfoPersona($personaIdEntity);

                                if(!empty($arrayClienteCorreo['nombre']))
                                {
                                    $strCliente = $arrayClienteCorreo['nombre'];
                                }
                            }
                            $strPunto = $puntoIdEntity->getLogin();

                            $entityPersonaEmpresaRolId = $puntoIdEntity->getPersonaEmpresaRolId();
                            if($entityPersonaEmpresaRolId)
                            {
                                $entityEmpresaRolId = $entityPersonaEmpresaRolId->getEmpresaRolId();
                                if($entityEmpresaRolId)
                                {
                                    $entityEmpresaCod = $entityEmpresaRolId->getEmpresaCod();
                                    if($entityEmpresaCod)
                                    {
                                        $intIdEmpresa = $entityEmpresaCod->getId();
                                    }
                                }
                            }

                            $arrayCorreosContactoComercialPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                    ->getArrayContactosPorPuntoYTipo($puntoIdEntity->getId(), "Contacto Comercial");

                            if($arrayCorreosContactoComercialPunto)
                            {
                                foreach($arrayCorreosContactoComercialPunto as $correoContactoComercialPunto)
                                {
                                    if($correoContactoComercialPunto && !empty($correoContactoComercialPunto['valor']))
                                    {
                                        $arrayTo[] = $correoContactoComercialPunto['valor'];
                                    }
                                }
                            }
                        }
                        $strServicio = $entityInfoServicio->getDescripcionPresentaFactura();
                        $strVelocidadNuevo = $this->getValorCaracteristicaServicio($entityInfoServicio, 'VELOCIDAD');
                        if(isset($strVelocidadNuevo) && !empty($strVelocidadNuevo))
                        {
                            $strBwNuevo = $strVelocidadNuevo;
                        }
                        else
                        {
                            $strBwNuevo = $this->getValorCaracteristicaServicio($entityInfoServicio, 'CAPACIDAD1');
                            $strBwNuevo .= '/' . $this->getValorCaracteristicaServicio($entityInfoServicio, 'CAPACIDAD2');
                        }

                        $strPrecioNuevo = $entityInfoServicio->getPrecioVenta();
                        $arraySucursales[] = array(
                            'punto' => $strPunto,
                            'servicio' => $strServicio,
                            'bwNuevo' => $strBwNuevo,
                            'precioNuevo' => $strPrecioNuevo
                        );
                    }

                    // Parametros a reemplazar en el cuerpo del correo
                    $arrayParametrosCorreo = array('codigoSolicitud' => $entityInfoDetalleSolicitudCab->getId(),
                        'cliente' => $strCliente,
                        'tipoSolicitud' => $strTipoSolicitud,
                        'sucursales' => $arraySucursales);
                    //Llamada a la generacion del correo de notificacion y el envio del correo
                    $arrayTo = array_unique($arrayTo);
                    $this->soporte->generarEnvioPlantilla('Solicitud de ' . $strTipoSolicitud . ' #' . $entityInfoDetalleSolicitudCab->getId(), $arrayTo, 'FIN_SOL_CPM', $arrayParametrosCorreo, $intIdEmpresa, null, null);
                }
                else
                {
                    error_log('enviarNotificacionFinalizadoSolicitudMasiva : No se pudo enviar la notificacion, no se encontro la Solicitud MasivaS');
                }
            }
            else
            {
                error_log('enviarNotificacionFinalizadoSolicitudMasiva : No se pudo enviar la notificacion, faltan parametros.');
            }
        }
        catch(\Exception $ex)
        {
            error_log('Envio de Correo SMC-' . $entityInfoDetalleSolicitudCab->getId() . ':' . $ex->getMessage());
        }
    }

    /**
     * getPeByCiudad
     *
     * Método que obtiene la lista de Pe dependiendo de la Juridiscción enviada
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0
     * @since 06-03-2019
     *
     * @param Array $arrayParametros [ strJurisdiccion => nombre de la juridiscción
     *                                 strTipoServicio => tipo del servicio
     *                                 strUsuario      => usuario que realiza la ejecución
     *                                 strIpCreacion   => ip de creación ]
     */
    public function getPeByCiudadJson($arrayParametros)
    {
        $strStatus      = "";
        $arrayNombrePe  = array();
        $arrayResponse  = array();
        $arrayRespuesta = array();
        $objRespuesta   = new JsonResponse();

        //Ejecuta script de consulta de Pe por Ciudades
        $arrayPeticiones = array();
        //accion a ejecutar
        $arrayPeticiones['url']          = 'consultarPeViaJurisdiccion';
        $arrayPeticiones['accion']       = 'consultar';
        $arrayPeticiones['jurisdiccion'] = $arrayParametros["strJurisdiccion"];
        $arrayPeticiones['user']         = $arrayParametros["strUserCreacion"];
        $arrayPeticiones['servicio']     = $arrayParametros["strTipoServicio"];
        $arrayPeticiones['login_aux']    = "";
        $arrayPeticiones['user_name']    = $arrayParametros["strUserCreacion"];
        $arrayPeticiones['user_ip']      = $arrayParametros["strIpCreacion"];

        //Ejecucion del metodo via WS para realizar la configuracion del SW
        $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

        $strStatus     = $arrayRespuesta['status'];
        $arrayResponse = $arrayRespuesta['mensaje'];

        if($strStatus == "OK")
        {
            foreach ($arrayResponse as $pe)
            {
                $arrayItem              = array();
                $arrayItem['nombre_pe'] = $pe;
                $arrayNombrePe[]        = $arrayItem;
            }

            $arrayResultado['total']       = count($arrayNombrePe);
            $arrayResultado['encontrados'] = $arrayNombrePe;

            $objRespuesta->setData($arrayResultado);

        }

        return $objRespuesta;
    }

    /**
     * liberaRecursosRed
     *
     * Funcion que libera los recursos de red de un servicio
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0
     * @since 27-08-2020
     *
     * @param Array $arrayParametros [ objProducto    => objeto del producto,
     *                                 objServicio    => objeto del servicio,
     *                                 strUser        => usuario de creacion,
     *                                 strIpCreacion  => ip de creacion ]
     */
    public function liberaRecursosRed($arrayParametros)
    {
        $objProducto    = $arrayParametros["objProducto"];
        $objServicio    = $arrayParametros["objServicio"];
        $strUsrCreacion = $arrayParametros["strUser"];
        $strIpCreacion  = $arrayParametros["strIpCreacion"];

        try
        {
            //*********************************************LIBRACION RECURSOS DE RED****************************************//

            //--------------------------------------------VLAN----------------------------------------------//
            //Se obtiene id de la caracteristica
            $objCaractVlan = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                               ->findOneBy(array('descripcionCaracteristica' => 'VLAN',
                                                                 'estado'                    => 'Activo'));
            if(is_object($objCaractVlan))
            {
                $objAdmiProdCarac = $this->emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                      ->findOneBy(array('caracteristicaId' => $objCaractVlan->getId(),
                                                                        'productoId'       => $objProducto,
                                                                        'estado'           => "Activo"));

                if(is_object($objAdmiProdCarac))
                {
                    $objServCaractVlan = $this->emComercial->getRepository("schemaBundle:InfoServicioProdCaract")
                                                           ->findOneBy(array('servicioId'                => $objServicio,
                                                                             'productoCaracterisiticaId' => $objAdmiProdCarac->getId(),
                                                                             'estado'                    => "Activo"));

                    if(is_object($objServCaractVlan))
                    {
                        //Poner en estado Eliminado la INFO_SERVICIO_PROD_CARACT
                        $objServCaractVlan->setEstado("Eliminado");
                        $objServCaractVlan->setUsrUltMod($strUsrCreacion);
                        $objServCaractVlan->setFeUltMod(new \DateTime('now'));
                        $this->emComercial->persist($objServCaractVlan);
                        $this->emComercial->flush();

                        //2do. Se valida si la vlan esta en otro servicio
                        $objServCaractVlanServ = $this->emComercial->getRepository("schemaBundle:InfoServicioProdCaract")
                                                                   ->findBy(array('valor'                     => $objServCaractVlan->getValor(),
                                                                                  'productoCaracterisiticaId' => $objAdmiProdCarac->getId(),
                                                                                  'estado'                    => "Activo"));
                        $intCatidadServicios = 0;
                        foreach($objServCaractVlanServ as $idxServicio)
                        {
                            $strIdServicio = $idxServicio->getServicioId();

                            if(!empty($strIdServicio))
                            {
                                $arrayParametrosServicio["intIdServicio"] = $strIdServicio;
                                $arrayParametrosServicio["arrayEstados"]  = array('Rechazada','Cancel','Migrado','Eliminado','Inactivo',
                                                                                  'Anulado','Cancelado');

                                $intExisteServicio = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                                       ->getExisteServicio($arrayParametrosServicio);

                                $intCatidadServicios = $intExisteServicio + $intCatidadServicios; 
                            }
                        }

                        $objPersonaEmpresaRolCaract = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRolCarac")
                                                                        ->find($objServCaractVlan->getValor());

                        if(is_object($objPersonaEmpresaRolCaract))
                        {
                            $objInfoDetalleElemento = $this->emComercial->getRepository("schemaBundle:InfoDetalleElemento")
                                                                        ->find($objPersonaEmpresaRolCaract->getValor());

                            if($intCatidadServicios == 0)
                            {
                                //Poner en estado Eliminado la INFO_PERSONA_EMPRESA_ROL_CARAC
                                $objPersonaEmpresaRolCaract->setEstado("Eliminado");
                                $objPersonaEmpresaRolCaract->setUsrUltMod($strUsrCreacion);
                                $objPersonaEmpresaRolCaract->setFeUltMod(new \DateTime('now'));
                                $this->emComercial->persist($objPersonaEmpresaRolCaract);
                                $this->emComercial->flush();

                                //Habilitar la vlan
                                $objInfoDetalleElemento->setEstado("Activo");
                                $this->emComercial->persist($objInfoDetalleElemento);
                                $this->emComercial->flush();
                            }
                        }
                    }
                }
            }
            //--------------------------------------------VLAN----------------------------------------------//

            //-------------------------------------------- VRF --------------------------------------------//
            //Se obtiene id de la caracteristica
            $objCaractVrf = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                        ->findOneBy(array('descripcionCaracteristica' => 'VRF',
                                                          'estado'                    => 'Activo'));

            if(is_object($objCaractVrf))
            {
                $objAdmiProdCarac = $this->emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                               ->findOneBy(array('caracteristicaId' => $objCaractVrf->getId(),
                                                                 'productoId'       => $objProducto,
                                                                 'estado'           => "Activo"));

                if(is_object($objAdmiProdCarac))
                {
                    $objServCaractVrf = $this->emComercial->getRepository("schemaBundle:InfoServicioProdCaract")
                                                    ->findOneBy(array('servicioId'                => $objServicio,
                                                                      'productoCaracterisiticaId' => $objAdmiProdCarac->getId(),
                                                                      'estado'                    => "Activo"));

                    if(is_object($objServCaractVrf))
                    {
                        //1ero. poner en estado Eliminado la INFO_SERVICIO_PROD_CARACT
                        $objServCaractVrf->setEstado("Eliminado");
                        $objServCaractVrf->setUsrUltMod($strUsrCreacion);
                        $objServCaractVrf->setFeUltMod(new \DateTime('now'));
                        $this->emComercial->persist($objServCaractVrf);
                        $this->emComercial->flush();
                    }
                }
            }
            //-------------------------------------------- VRF --------------------------------------------//

            //-------------------------------------------- DEFAULT_GATEWAY --------------------------------------------//
            //Se obtiene id de la caracteristica
            $objCaractGateWay = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                  ->findOneBy(array('descripcionCaracteristica' => 'DEFAULT_GATEWAY',
                                                                    'estado'                    => 'Activo'));

            if(is_object($objCaractGateWay))
            {
                $objAdmiProdCarac = $this->emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                      ->findOneBy(array('caracteristicaId' => $objCaractGateWay->getId(),
                                                                        'productoId'       =>  $objProducto,
                                                                        'estado'           => "Activo"));

                if(is_object($objAdmiProdCarac))
                {
                    $objServCaractGateway = $this->emComercial->getRepository("schemaBundle:InfoServicioProdCaract")
                                                              ->findOneBy(array('servicioId'                => $objServicio,
                                                                                'productoCaracterisiticaId' => $objAdmiProdCarac->getId(),
                                                                                'estado'                    => "Activo"));

                    if(is_object($objServCaractGateway))
                    {
                        //1ero. poner en estado Eliminado la INFO_SERVICIO_PROD_CARACT
                        $objServCaractGateway->setEstado("Eliminado");
                        $objServCaractGateway->setUsrUltMod($strUsrCreacion);
                        $objServCaractGateway->setFeUltMod(new \DateTime('now'));
                        $this->emComercial->persist($objServCaractGateway);
                        $this->emComercial->flush();
                    }
                }
            }
            //-------------------------------------------- DEFAULT_GATEWAY --------------------------------------------//

            //----------------------------------------- PROTOCOLO_ENRUTAMIENTO -----------------------------------------//
            //Se obtiene id de la caracteristica
            $objCaractProtocolo = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                              ->findOneBy(array('descripcionCaracteristica' => 'PROTOCOLO_ENRUTAMIENTO',
                                                                'estado'                    => 'Activo'));

            if(is_object($objCaractProtocolo))
            {
                $objAdmiProdCarac = $this->emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                               ->findOneBy(array('caracteristicaId' => $objCaractProtocolo->getId(),
                                                                 'productoId'       => $objProducto,
                                                                 'estado'           => "Activo"));

                if(is_object($objAdmiProdCarac))
                {
                    $objServCaractProtocolo = $this->emComercial->getRepository("schemaBundle:InfoServicioProdCaract")
                                                          ->findOneBy(array('servicioId'                => $objServicio,
                                                                            'productoCaracterisiticaId' => $objAdmiProdCarac->getId(),
                                                                            'estado'                    => "Activo"));

                    if(is_object($objServCaractProtocolo))
                    {
                        //1ero. poner en estado Eliminado la INFO_SERVICIO_PROD_CARACT
                        $objServCaractProtocolo->setEstado("Eliminado");
                        $objServCaractProtocolo->setUsrUltMod($strUsrCreacion);
                        $objServCaractProtocolo->setFeUltMod(new \DateTime('now'));
                        $this->emComercial->persist($objServCaractProtocolo);
                        $this->emComercial->flush();
                    }
                }
            }
            //----------------------------------------- PROTOCOLO_ENRUTAMIENTO -----------------------------------------//

            //---------------------------------------------- IP ASIGNADO ----------------------------------------------//
            $objInfoIp = $this->emComercial->getRepository("schemaBundle:InfoIp")->findOneBy(array('servicioId' => $objServicio,
                                                                                                   'estado'     => "Activo"));

            if(is_object($objInfoIp))
            {
                //Poner en estado Eliminado la INFO_IP
                $objInfoIp->setEstado("Eliminado");
                $this->emComercial->persist($objInfoIp);
                $this->emComercial->flush();

                //------------------------------------------------- SUBRED ------------------------------------------------//
                //Validar si la subred tiene ips en otros activas en otros servicios
                //Liberar la subred y sus hijas
                $objInfoSubred = $this->emComercial->getRepository("schemaBundle:InfoSubred")->find($objInfoIp->getSubredId());

                if(is_object($objInfoSubred))
                {
                    $objInfoIp = $this->emComercial->getRepository("schemaBundle:InfoIp")->findBy(array('subredId' => $objInfoSubred));
                }

                $intCatidadServicios = 0;
                foreach($objInfoIp as $idxInfoIp)
                {
                    $strIdServicio = $idxInfoIp->getServicioId();

                    if(!empty($strIdServicio))
                    {
                        $arrayParametrosServicio["intIdServicio"] = $strIdServicio;
                        $arrayParametrosServicio["arrayEstados"]  = array('Rechazada','Cancel','Migrado','Eliminado','Inactivo',
                                                                          'Anulado','Cancelado');

                        $intExisteServicio = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                               ->getExisteServicio($arrayParametrosServicio);

                        $intCatidadServicios = $intExisteServicio + $intCatidadServicios;
                    }
                }

                if($intCatidadServicios == 0)
                {
                    $arrayParametrosLiberarSubred               = array();
                    $arrayParametrosLiberarSubred['tipoAccion'] = 'liberar';
                    $arrayParametrosLiberarSubred['uso']        = $objInfoSubred->getUso();
                    $arrayParametrosLiberarSubred['subredId']   = $objInfoSubred->getId();

                    $arrayRespuestaLiberar = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                     ->provisioningSubred($arrayParametrosLiberarSubred);
                }
                //------------------------------------------------- SUBRED ------------------------------------------------//
            }
            //---------------------------------------------- IP ASIGNADO ----------------------------------------------//

            //*********************************************LIBRACION RECURSOS DE RED****************************************//
        }
        catch(\Exception $objEx)
        {
            $this->utilService->insertError('Telcos+',
                                            'liberaRecursosRed',
                                            $objEx->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
            );
        }
    }

    /**
     * getValorAnilloByParametro
     *
     * Método que obtiene un valor de anillo 0,1,2,3,4 configurado en la tabla de parámetros, esta lógica que realiza para solventar el caso de
     * generación de vlan (rango especifico R1: 1500 - 2000 y R2: 1050 - 1499 ) para Telefónica en R1 y R2
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 - 15-04-2019
     *
     * @param Array $arrayParametros [ strValorAnillo => valor anillo ]
     *
     * @return array respuesta
     */
    public function getValorAnilloByParametro($arrayParametros)
    {
        $strValorAnillo       = "";
        $strBanderaFound      = "N";
        $arrayRespuesta       = array();
        $arrayParametroAnillo = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('MAPEO_ANILLO_INTERCONEXION',
                                                                                                         'TECNICO',
                                                                                                         'GENERAR_VLAN',
                                                                                                         'VALORES DE ANILLO',
                                                                                                         $arrayParametros["strValorAnillo"],
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '');

        if(!empty($arrayParametroAnillo))
        {
            $strBanderaFound = "S";
            $strValorAnillo  = $arrayParametroAnillo["valor2"];
        }

        $arrayRespuesta["anillo"] = $strValorAnillo;
        $arrayRespuesta["status"] = $strBanderaFound;

        return $arrayRespuesta;
    }

    /**
     * Documentación para el método 'getValorCaracteristicaDetalleSolicitud'.
     * Este metodo obtiene la caracteristica asociada a un Servicio por su nombre de Caracteristica
     *
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 27-06-2016
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 05-06-2018   Se agrega parametro estado para controlar la recuperación de información activa - Proyecto Telcograf
     * @since 1.0
     *
     * @param object $objServicioEntity Entidad InfoServicio
     * @param string $strNombreCaracteristica Nombre de la caracteristica
     *
     */
    public function getValorCaracteristicaServicio($objServicioEntity, $strNombreCaracteristica, $strEstado)
    {
        $strValor = '';

        $admiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica');
        $admiProductoCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica');
        $infoServicioProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract');

        $admiCaracteristicaEntity = $admiCaracteristica->findOneBy(array("descripcionCaracteristica" => $strNombreCaracteristica));
        if($admiCaracteristicaEntity && $objServicioEntity)
        {
            $objProductoCaracteristicaEntity = $admiProductoCaracteristica->findOneBy(array("productoId" => $objServicioEntity->getProductoId(),
                                                                                            "caracteristicaId" => $admiCaracteristicaEntity));
            if($objProductoCaracteristicaEntity)
            {
                $arrayParametrosFiltro = array("servicioId"                => $objServicioEntity,
                                               "productoCaracterisiticaId" => $objProductoCaracteristicaEntity);
                if(isset($strEstado) && !empty($strEstado))
                {
                    $arrayParametrosFiltro["estado"] = $strEstado;
                }
                $objServicioProdCaractEntity = $infoServicioProdCaract->findOneBy($arrayParametrosFiltro);
                if($objServicioProdCaractEntity)
                {
                    $strValor = $objServicioProdCaractEntity->getValor();
                }
            }
        }
        return $strValor;
    }

    /**
     * Documentación para el método 'getPersonaNombreCorreo'.
     * Este metodo obtiene un array con el nombre de la persona y su correo de tenerlo por medio de su login
     *
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 06-07-2016
     *
     * @param string $strUsrLogin Login del usuario a ser consultar
     * @return array con los datos de la persona
     */
    public function getPersonaNombreCorreo($strUsrLogin)
    {
        $arrayResultado = array();

        $infoPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona');
        $admiFormaContacto = $this->emComercial->getRepository('schemaBundle:AdmiFormaContacto');
        $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto');

        $entityInfoPersona = $infoPersona->findOneBy(array("login" => $strUsrLogin));
        if($entityInfoPersona)
        {
            $arrayResultado['nombre'] = $entityInfoPersona->__toString();

            $entityAdmiFormaContacto = $admiFormaContacto->findOneBy(array("descripcionFormaContacto" => "Correo Electronico"));
            if($entityAdmiFormaContacto)
            {
                $entityInfoPersonaFormaContacto = $infoPersonaFormaContacto->findOneBy(array("formaContactoId" => $entityAdmiFormaContacto,
                    "personaId" => $entityInfoPersona));
                if($entityInfoPersonaFormaContacto)
                {
                    $arrayResultado['correo'] = $entityInfoPersonaFormaContacto->getValor();
                }
            }
        }
        return $arrayResultado;
    }

    /**
     * Documentación para el método 'getPersonaNombreCorreoByInfoPersona'.
     * Este metodo obtiene un array con el nombre de la persona y su correo de tenerlo por medio la persona
     *
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 11-07-2016
     *
     * @param Object $entityInfoPersona persona a ser consultar
     * @return array con los datos de la persona
     */
    public function getPersonaNombreCorreoByInfoPersona($entityInfoPersona)
    {
        $arrayResultado = array();

        $infoPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona');
        $admiFormaContacto = $this->emComercial->getRepository('schemaBundle:AdmiFormaContacto');
        $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto');

        if($entityInfoPersona)
        {
            $arrayResultado['nombre'] = $entityInfoPersona->__toString();

            $entityAdmiFormaContacto = $admiFormaContacto->findOneBy(array("descripcionFormaContacto" => "Correo Electronico"));
            if($entityAdmiFormaContacto)
            {
                $entityInfoPersonaFormaContacto = $infoPersonaFormaContacto->findOneBy(array("formaContactoId" => $entityAdmiFormaContacto,
                    "personaId" => $entityInfoPersona));
                if($entityInfoPersonaFormaContacto)
                {
                    $arrayResultado['correo'] = $entityInfoPersonaFormaContacto->getValor();
                }
            }
        }
        return $arrayResultado;
    }

    /**
     * Documentación para el método 'generarClave'.
     * Este metodo genera una clave robusta seudo-aleatoria
     *
     * @author Duval Medina C <dmedina@telconet.ec>
     * @version 1.0 2016-08-10
     *
     * @param int $intLongitud tamaño mínimo de la clave
     * @return string con la clave
     */
    public function generarClave($intLongitud)
    {
        $clave = "";
        $arrLetras = explode(" ", "b c d f g h j k l m n p q r s t v w x y z");
        $arrVocales = explode(" ", "a e i o u . _");
        $arrNumeros = explode(" ", "0 1 2 3 4 5 6 7 8 9");
        $arrSignos = explode(" ", "$ & / ( ) { } [ ] | % < > : ; ! # - + =");

        $usadosLetras = array();
        $usadosVocales = array();
        $usadosNumeros = array();

        for($i = 0; $i < $intLongitud / 3; $i++)
        {
            $usadosLetras = $this->aleatorioSinRepetir(count($arrLetras), $usadosLetras);
            $usadosVocales = $this->aleatorioSinRepetir(count($arrVocales), $usadosVocales);
            $usadosNumeros = $this->aleatorioSinRepetir(count($arrNumeros), $usadosNumeros);

            //Primera letra en Mayuscula
            $clave .= $i == 0 ? strtoupper($arrLetras[end($usadosLetras)]) : $arrLetras[end($usadosLetras)];

            $clave .= $arrVocales[end($usadosVocales)] . $arrNumeros[end($usadosNumeros)];
        }
        $randSignos = mt_rand(0, count($arrSignos) - 1);
        $clave .= $arrSignos[$randSignos]; //Signo al final

        return $clave;
    }

    /**
     * Documentación para el método 'aleatorioSinRepetir'.
     * Este metodo genera un numero aleatorio controlando que no se repita
     *      para obtener el número generado se debe utilizar end($usados)
     *
     * @author Duval Medina C <dmedina@telconet.ec>
     * @version 1.0 2016-08-10
     *
     * @param int    $intMax tamaño número maximo del valor
     * @param array  $arrUsados para controlar que no se repitan
     * @return array con todos los numeros usados + en el nuevo generado
     */
    private function aleatorioSinRepetir($intMax, $arrUsados)
    {
        //Una vez que se repitan todos, se repite el ciclo
        if(count($arrUsados) == $intMax)
        {
            $arrUsados = array();
        }
        $aleatorio = mt_rand(0, $intMax - 1);
        $contador = 0;
        for($i = $contador; $i < count($arrUsados); $i++)
        {
            if($aleatorio == $arrUsados[$i])
            {
                $aleatorio = mt_rand(0, $intMax - 1);
                $contador = 0;
            }
        }
        $arrUsados[] = $aleatorio;

        return $arrUsados;
    }

    /**
     * Documentación para el método 'getValorCaracteristicaDetalleSolicitud'.
     * Este metodo obtiene la caracteristica asociada a un DetalleSolicitud por su nombre de Caracteristica
     *
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 14-08-2016
     *
     * @param int $intIdDetalleSolicitud Identificador del Detalle Solicitud
     * @param string $strNombreCaracteristica Nombre de la caracteristica
     * @return string Cadena con el valor de la caracteristica de un detalle
     *
     */
    public function getValorCaracteristicaDetalleSolicitud($intIdDetalleSolicitud, $strNombreCaracteristica)
    {
        $strValor = '';
        $admiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica');
        $infoDetalleSolCaract = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract');

        $admiCaracteristicaEntity = $admiCaracteristica->findOneBy(array("descripcionCaracteristica" => $strNombreCaracteristica));
        if($admiCaracteristicaEntity)
        {
            $infoDetalleSolCaractEntity = $infoDetalleSolCaract->findOneBy(array(
                "detalleSolicitudId" => $intIdDetalleSolicitud,
                "caracteristicaId" => $admiCaracteristicaEntity
            ));
            if($infoDetalleSolCaractEntity)
            {
                $strValor = $infoDetalleSolCaractEntity->getValor();
            }
        }
        return $strValor;
    }

    /**
     * Metodo utilizado para recuperar información completa de clientes según los parametros enviados
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0         06-10-2016
     * @since 1.0
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1         20-10-2016      Se agregaron validaciones para solo mostar información
     *                                      de clientes con puntos con servicios de internet
     *
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.2 09-09-2017  Se agrego valor [IPV4] para consumo de WS de RDA
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 15-10-2018  Se modifica recuperación de correos del cliente y se agrega parámetro nuevo SALDO del punto del cliente
     * @since 1.2
     *
     * @author Héctor Lozano <hlozano@telconet.ec>
     * @version 1.4 06-12-2018 Se agrega el campo oficina_id en el arreglo $arraInformacionCliente[] del cliente.
     * @since 1.3
     *
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.5 06-06-2019 Se agrega el campo ciclo_facturacion en el arreglo $arraInformacionCliente[] del cliente.
     *                         Se agrega el campo forma_pago en el arreglo $arraInformacionCliente[] del cliente.
     *                         Se agrega el campo fecha_maxima_pago en el arreglo $arraInformacionCliente[] del cliente.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 20-09-2019  Se agregan parámetros de respuesta con campos con información de promociones de ancho de banda:
     *                          line_profile_promo, gemport_promo, traffic_table_promo
     * @since 1.5
     *
     * @author José Bedón Sánchez <jobedon@telconet.ec>
     * @version 1.7 21-11-2019 Se agregan campos de contrato del cliente y tipo de cuenta
     * @since 1.6
     *
     * @param Array $arrayPeticiones [ strEmpresaCod      Empresa a la que pertenece el cliente consultado
     *                                 strIdentificacion  Identificacion del cliente que solicita informacion
     *                                 strLogin           Login del punto del cliente del cual se solicita información
     *                                 strSerieOnt        Serie Ont del equipo CPE que utiliza el cliente consultado
     *                                 strMacOnt          Mac Ont del equipo CPE que utiliza el cliente consultado
     *                                 ociCon             Parametros utilizados para generar conexion OCI a la base de datos
     *                               ]
     *
     * @return Array $arrayRespuesta
     * [
     *  - strStatus   Estado de la transacción ejecutada
     *  - strMensaje  Mensaje de la transacción ejecutada
     *  - arrayData   [ - cliente           Nombres y Apellidos ó Razón social del cliente
     *                  - identificacion    Número de identificación del cliente
     *                  - id_oficina        Id de la oficina
     *                  - ciclo_facturacion Tipo de ciclo a facturar
     *                  - forma_pago        Forma de pago del cliente
     *                  - contrato          Contrato del cliente
     *                  - tipo_cuenta       Tipo de cuenta del cliente
     *                  - fecha_maxima_pago Fecha máxima de pago a partir de la emisión de
     *                                      la factura y el ciclo de facturación
     *                  - puntos
     *                   [
     *                     - id_punto   Id del punto del cliente
     *                     - login      Login del punto del cliente
     *                     - cobertura  Cobertura de servicio del punto
     *                     - direccion  Dirección del punto
     *                     - ciudad     Ciudad donde está ubicado el punto del cliente
     *                     - sector     Sector de ubicación del punto del cliente
     *                     - longitud   Coordenada de longitud de ubicación del punto del cliente
     *                     - latitud    Coordenada de latitud de ubicación del punto del cliente
     *                     - estado     Estado del punto del cliente
     *                     - telefonos  Teléfonos registrados como contactos del punto del cliente
     *                     - correos    Correos registrados como contactos del punto del cliente
     *                     - saldo      Saldo del punto del cliente
     *                     - servicios    [
     *                                     - producto      Nombre de producto de un servicio
     *                                     - ultima_milla  Nombre de última milla que emplea el servicio
     *                                     - plan          Nombre de plan del servicio
     *                                     - estado        Estado del servicio
     *                                     - login_aux     Login auxiliar del servicio
     *                                    ]
     *                     - data_tecnica [
     *                                     - elemento                    Nombre del elemento de backbone del servicio
     *                                     - ip_elemento                 Ip del elemento de backbone del servicio
     *                                     - modelo_elemento             Modelo del elemento de backbone del servicio
     *                                     - marca_elemento              Marca del elemento de backbone del servicio
     *                                     - interface_elemento          Puerto del elemento de backbone
     *                                     - elemento_contenedor         Elemento contendor el elemento conector
     *                                     - elemento_conector           Elemento conector asignado al servicio
     *                                     - interface_elemento_conector Puerto del elemento de backbone
     *                                     - indice_cliente              ID del cliente en las configuraciones del elemento de backbone
     *                                     - line_profile                Line Profile asignado al servicio (TELLION, HW , ZTE)
     *                                     - service_port                Service Port asignado al servicio
     *                                     - gemport                     Gemport asignado al servicio
     *                                     - traffic_table               Traffic Table asignado al servicio
     *                                     - line_profile_promo          Line Profile promocional  asignado al servicio (TELLION, HW , ZTE)
     *                                     - gemport_promo               Gemport asignado al servicio
     *                                     - traffic_table_promo         Traffic Table asignado al servicio
     *                                     - vlan                        Vlan que controlara el flujo de internet del servicio
     *                                     - serial_ont                  Serie del CPE ONT asignado al servicio
     *                                     - mac_ont                     Mac del CPE ONT asignado al servicio
     *                                     - modelo_ont                  Modelo del CPE ONT asignado al servicio
     *                                     - marca_ont                   Marca del CPE ONT asignado al servicio
     *                                     - tipo_aprovisionamiento      Tipo de aprovisionamiento de IPS del elemento backbone
     *                                     - ipv4                        Característica para indicar si el cliente tiene ipv4 pública
     *                                    ]
     *                     - ip_fija      [
     *                                     - valor    Ip asignada al un servicio del punto
     *                                     - mac      Mac asignada al servicio de ip del punto
     *                                     - mascara  Máscara asignada a la ip del servicio
     *                                     - scope    Scope del cual la ip fue asignada
     *                                     - pool_ip  Pool de Ips del cual la ip fue asignada
     *                                    ]
     *                     - tareas       [
     *                                     - numero_tarea        Número de tarea
     *                                     - tarea               Título de tarea
     *                                     - estado              Estado de tarea
     *                                     - fecha_creacion      Fecha de creación de la tarea
     *                                     - fecha_finalizacion  Fecha de finalización de la tarea
     *                                    ]
     *                     - casos        [
     *                                     - id_caso        Id de caso
     *                                     - numero_caso    Número de caso
     *                                     - caso           Título del caso
     *                                     - estado         Estado del caso
     *                                     - fecha_creacion Fecha creación del caso
     *                                     - fecha_cierre   Fecha de cierre del caso
     *                                    ]
     *                   ]
     *       ]
     * ]
     *
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.8 13-03-2020 Se agregan campos de deuda total de todos los puntos del cliente y producto konibit.
     * @since 1.7
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 07-06-2021 Si existe el parámetro 'aplicativo', se verificará que se encuentre parametrizada dentro de los aplicativos permitidos
     *                         para continuar el nuevo flujo 
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.9 04-06-2021 Se agregan campos requeridos sobre info_clientes para MPLS.
     * @since 1.8
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 17-07-2021 Se agrega la validación del tipo negocio actual para los servicios TN bajo la red GPON-MPLS
     * @since 1.9
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.1 06-09-2022 Se agrega el esquema infraestructura al llamado del método getPuntosClienteWs.
     * @since 2.0
     * 
     * @param Array $arrayResultado[saldo   deuda total de todos los puntos que tenga el cliente
     *
     * @return Array $arrayRespuesta[strKonibit  Indica si los productos que tiene el cliente son konibit o no.
     *                              ]
     *
     *
     *
     */
    public function obtieneInformacionClienteWs($arrayPeticiones)
    {
        $arrayRespuesta               = "";
        $arrayRespuestaCiclo          = "";
        $arrayRespuesta['strStatus']  = "ERROR";
        $arrayRespuesta['strMensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        $arrayRespuesta['data']       = "";
        $arraInformacionCliente       = "";
        $strAplicaFlujoWsTecnico      = "NO";
        try
        {
            
            if(isset($arrayPeticiones['strAplicativo']) && !empty($arrayPeticiones['strAplicativo'])
                && isset($arrayPeticiones['strEmpresaCod']) && !empty($arrayPeticiones['strEmpresaCod']))
            {
                //Se verifica si forma parte de los aplicativos permitidos para la nueva implementación del web service
                $arrayAplicativosWsTecnicoInfoClienteMd = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                          ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    'PARAMETROS_WEB_SERVICES',
                                                                                    'INFORMACION_CLIENTE',
                                                                                    'APLICATIVOS_WS_TECNICO_PERMITIDOS',
                                                                                    $arrayPeticiones['strAplicativo'],
                                                                                    '',
                                                                                    $arrayPeticiones['strEmpresaCod']);
                if(isset($arrayAplicativosWsTecnicoInfoClienteMd) && !empty($arrayAplicativosWsTecnicoInfoClienteMd))
                {
                    $arrayPeticiones["strPrefijoEmpresa"]   = $arrayAplicativosWsTecnicoInfoClienteMd["valor5"];
                    $arrayPeticiones["strNumParamsMaximo"]  = $arrayAplicativosWsTecnicoInfoClienteMd["valor6"];
                    $strAplicaFlujoWsTecnico                = "SI";
                }
                else
                {
                    $arrayAplicativosWsTecnicoInfoClienteTn = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                              ->getOne( 'PARAMETROS_ASOCIADOS_A_SERVICIOS_TN',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        'PARAMETROS_WEB_SERVICES',
                                                                                        'INFORMACION_CLIENTE',
                                                                                        'APLICATIVOS_WS_TECNICO_PERMITIDOS',
                                                                                        $arrayPeticiones['strAplicativo'],
                                                                                        '',
                                                                                        $arrayPeticiones['strEmpresaCod']);
                    if(isset($arrayAplicativosWsTecnicoInfoClienteTn) && !empty($arrayAplicativosWsTecnicoInfoClienteTn))
                    {
                        $arrayPeticiones["strPrefijoEmpresa"]   = $arrayAplicativosWsTecnicoInfoClienteTn["valor5"];
                        $arrayPeticiones["strNumParamsMaximo"]  = $arrayAplicativosWsTecnicoInfoClienteTn["valor6"];
                        $strAplicaFlujoWsTecnico                = "SI";
                    }
                }
            }
            
            if($strAplicaFlujoWsTecnico === "SI")
            {
                $arrayFiltrosBusqueda           = array("strCodEmpresa"         => $arrayPeticiones['strEmpresaCod'],
                                                        "strIdentificacion"     => $arrayPeticiones['strIdentificacion'],
                                                        "strLogin"              => $arrayPeticiones['strLogin'],
                                                        "strTipoRol"            => $arrayPeticiones['strTipoRol'],
                                                        "strSerieOnt"           => $arrayPeticiones['strSerieOnt'],
                                                        "strMacOnt"             => $arrayPeticiones['strMacOnt'],
                                                        "strPrefijoEmpresa"     => $arrayPeticiones['strPrefijoEmpresa'],
                                                        "strNumParamsMaximo"    => $arrayPeticiones["strNumParamsMaximo"],
                                                        "strAplicativo"         => $arrayPeticiones['strAplicativo']);
                $arrayPeticionesFlujoWsTecnico  = array("ociConexion"           => $arrayPeticiones['ociCon'],
                                                        "arrayFiltrosBusqueda"  => $arrayFiltrosBusqueda);
                $arrayRespuesta                 = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                    ->getRespuestaInfoClienteWs($arrayPeticionesFlujoWsTecnico);
            }
            else
            {
                $arrayRespuesta = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->getRolClienteExtranetWs($arrayPeticiones);

                if($arrayRespuesta['idPersonaRol'])
                {
                    for($intContadorCabecera=0; $intContadorCabecera < $arrayRespuesta['intContador'];$intContadorCabecera++)
                    {

                       if($arrayRespuesta['estado'][0] === "Activo" && $intContadorCabecera === 0 || $arrayRespuesta['estado'][0] === 'Cancelado')
                       {   

                         $arrayParam                    = array();
                         $arrayParam['intIdPersonaRol'] = $arrayRespuesta['idPersonaRol'][$intContadorCabecera];
                         $arrayParam['strEmpresaCod']   = $arrayPeticiones['strEmpresaCod'];
                         // Se obtiene la entidad InfoPersonaEmpresaRol, para obtener el estado
                         $entityPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                         ->find($arrayRespuesta['idPersonaRol'][$intContadorCabecera]);

                         $arrayParam['strEstadoPersonaRol'] = ($entityPersonaEmpresaRol) ? $entityPersonaEmpresaRol->getEstado() : 'Activo';

                         //Obtengo Ciclo de Facturación asignado en el Cliente
                         $arrayRespuestaCiclo = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                  ->getCaractCicloFacturacion($arrayParam);

                         $arrayConctacoCliente = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                   ->getContactoEmailCliente($arrayParam);

                         $arrayFormaPago = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                             ->getFormaDePagoCliente($arrayParam);

                        $arrayResultado = $this->serviceInfoPago->obtenerConsultaSaldoClientePorIdentificacion($arrayPeticiones['strEmpresaCod'],
                                                                                                            $arrayRespuesta['identificacion']);

                        //Se obtiene el/los codigos de empresa validos para identificar el contrato a setear
                        $arrayCanalesValidos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('COD_EMPRESAS_VALIDAS',
                                                                        'FINANCIERO',
                                                                        'CONSULTA',
                                                                        '',
                                                                        'COD_EMPRESAS',
                                                                        '',
                                                                        '',
                                                                        '');

                        $arrayCanales = $arrayCanalesValidos['valor2'];

                        // Si el canal de la transaccion coincide con el/los codigos de empresa validos, 
                        // setea el numero de contrato que se obtiene con la logica del bus de pagos
                        if (strpos($arrayCanales, $arrayPeticiones['strEmpresaCod']) !== false )
                        {
                            $arraInformacionCliente['contrato'] = $arrayResultado['numeroContrato'];
                        }
                        else
                        {
                            $arrayParam['strTipoInformacion']   = "NUMERO_CONTRATO";
                            $arrayContrato = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->getTipoInformacionCliente($arrayParam);
                            $arraInformacionCliente['contrato'] = $arrayContrato[0]['tipoInformacion'];
                        }


                         $arrayParam['strTipoInformacion']   = "DESCRIPCION_CUENTA";
                         $arrayTipoCuenta = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->getTipoInformacionCliente($arrayParam);

                         $arrayFechaPago = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                             ->getFechaMaximaPago($arrayParam);

                         $arraInformacionCliente['cliente']           = $arrayRespuesta['nombres'];
                         $arraInformacionCliente['identificacion']    = $arrayRespuesta['identificacion'];
                         $arraInformacionCliente['correos']           = $arrayConctacoCliente[0]['correo'];
                         $arraInformacionCliente['id_oficina']        = $arrayRespuesta['oficina_id'];
                         $arraInformacionCliente['ciclo_facturacion'] = $arrayRespuestaCiclo['strNombreCiclo'];
                         $arraInformacionCliente['forma_pago']        = $arrayFormaPago[0]['formaDePago'];
                         $arraInformacionCliente['tipo_cuenta']       = $arrayTipoCuenta[0]['tipoInformacion'];
                         $arraInformacionCliente['fecha_maxima_pago'] = $arrayFechaPago[0]['fechaPago'];
                         $arraInformacionCliente['deuda_total']      = $arrayResultado['saldo'];
                      }
                      $arrayPeticiones['intIdRolCliente'][] = $arrayRespuesta['idPersonaRol'][$intContadorCabecera];
                      $arrayPeticiones['strLogin']          = $arrayRespuesta['login'];
                  
                    }

                    $arrayPeticiones['intContador']       = $arrayRespuesta['intContador'];
                    $arrayPeticiones['emInfraestructura'] = $this->emInfraestructura;
                    $arrayResult = "";
                    $arrayResult = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                     ->getPuntosClienteWs($arrayPeticiones);




                    $arrayRespuesta['puntos'] = $arrayResult['puntos'];
                    $arraInformacionCliente['producto_konibit'] = $arrayResult['strKonibit'];

                    //se valida el tipo negocio actual
                    if(isset($arrayResult['tipo_negocio_actual']) && !empty($arrayResult['tipo_negocio_actual']))
                    {
                        $arraInformacionCliente['tipo_negocio_actual'] = $arrayResult['tipo_negocio_actual'];
                    }

                    if(count($arrayRespuesta['puntos']) > 0)
                    {
                        $arraInformacionCliente['puntos'] = $arrayRespuesta['puntos'];
                        $arrayRespuesta['arrayData']    = $arraInformacionCliente;
                    }
                    else
                    {
                        if($arrayRespuesta['strTienePuntoConInternet'] == "NO")
                        {
                            $arrayRespuesta['strStatus']  = "ERROR";
                            $arrayRespuesta['strMensaje'] = "No existe servicio de Internet asociado a los puntos del cliente consultado.";
                            $arrayRespuesta['arrayData']  = "";
                        }
                        else
                        {
                            $arrayRespuesta['strStatus']  = "ERROR";
                            $arrayRespuesta['strMensaje'] = "No existe información de puntos del cliente consultado.";
                            $arrayRespuesta['arrayData']  = "";
                        }
                    }


                }
                else
                {
                    $arrayRespuesta['strStatus']  = "ERROR";
                    $arrayRespuesta['strMensaje'] = "No existe información del cliente consultado.";
                }
            }
        }
        catch(\Exception $ex)
        {
            $this->utilService->insertError('Telcos+', 'obtieneInformacionClienteWs', $ex->getMessage(), $arrayPeticiones['usrCreacion'], $arrayPeticiones['ipCreacion']
            );
        }
        return $arrayRespuesta;
    }

    /**
     * Metodo utilizado para recuperar información de clientes para la nueva plataforma unificada ACS según los parametros enviados
     *
     *
     * @param Array $arrayPeticiones [ strLogin           Login del punto del cliente del cual se solicita información
     *                                 strIdentificacion  Identificacion del cliente que solicita informacion
     *                                 strSerieOnt        Serie Ont del equipo CPE que utiliza el cliente consultado
     *                                 strMacOnt          Mac Ont del equipo CPE que utiliza el cliente consultado
     *                                 strTipoRol         Mac Ont del equipo CPE que utiliza el cliente consultado
     *                                 ociCon             Parametros utilizados para generar conexion OCI a la base de datos
     *                               ]
     *
     * @return Array $arrayRespuesta
     * [
     *  - strStatus   Estado de la transacción ejecutada
     *  - strMensaje  Mensaje de la transacción ejecutada
     *  - arrayData
     *                [ - marca_ont                  Marca del ont del cliente
     *                  - ont_id                     Ont Id configurado en el servicio de internet
     *                  - ip_olt                     Ip del olt donde está configurado el servicio
     *                  - contactos_telefonicos      Contactos telefónico del cliente
     *                  - nombre_jurisdiccion        Nombre de jurisdicción donde se encuentra el cliente
     *                  - id_servicio                Identificador del servicio
     *                  - mac_ont                    Mac del ont configurado
     *                  - serial_ont                 Serie del ont configurado
     *                  - olt                        Nombre del olt donde se encuentra configurado el cliente
     *                  - interface_elemento         Nombre de interface elemento del cual depende el servicio
     *                  - ciudad                     Nombre de ciudad donde se encuentra el cliente
     *                  - login                      Login del punto del cliente
     *                  - line_profile               Line profile, parámetro de configuración de internet
     *                  - identificacion             Número de identificación del cliente
     *                  - nombre_completo            Nombre completo del cliente
     *                  - correo                     Correos del cliente
     *                  - direccion                  Dirección del cliente
     *                  - longitud                   Longitud de la ubicación del cliente
     *                  - latitud                    Latitud de la ubicación del cliente
     *                  - estado_servicio            Estado del servicio de internet
     *                  - tipo_servicio              Tipo de negocio del servicio
     *                  - nombre_plan                Nombre del plan contratado
     *                  - vlan                       Vlan, parámetro de configuración del servicio de internet
     *                ]
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0   18-08-2021
     * @since 1.0
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1   24-10-2021   Se agrega recepción y envío de parámetro strEmpresaCod
     */
    public function obtieneInformacionClienteAcs($arrayPeticiones)
    {
        $arrayRespuesta               = "";
        $arrayRespuestaCiclo          = "";
        $arrayRespuesta['strStatus']  = "ERROR";
        $arrayRespuesta['strMensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        $arrayRespuesta['data']       = "";
        try
        {
            if(isset($arrayPeticiones['strEmpresaCod']) && !empty($arrayPeticiones['strEmpresaCod']))
            {
                if(isset($arrayPeticiones['strTipoRol']) && !empty($arrayPeticiones['strTipoRol']))
                {
                    if(isset($arrayPeticiones['strLogin']) && !empty($arrayPeticiones['strLogin']) ||
                       isset($arrayPeticiones['strIdentificacion']) && !empty($arrayPeticiones['strIdentificacion']) ||
                       isset($arrayPeticiones['strSerieOnt']) && !empty($arrayPeticiones['strSerieOnt']) ||
                       isset($arrayPeticiones['strMacOnt']) && !empty($arrayPeticiones['strMacOnt'])
                      )
                    {
                        $arrayFiltrosBusqueda           = array("strLogin"              => $arrayPeticiones['strLogin'],
                                                                "strIdentificacion"     => $arrayPeticiones['strIdentificacion'],
                                                                "strSerieOnt"           => $arrayPeticiones['strSerieOnt'],
                                                                "strMacOnt"             => $arrayPeticiones['strMacOnt'],
                                                                "strTipoRol"            => $arrayPeticiones['strTipoRol'],
                                                                "strCodEmpresa"         => $arrayPeticiones['strEmpresaCod']);
                        $arrayPeticionesFlujoWsTecnico  = array("ociConexion"           => $arrayPeticiones['ociCon'],
                                                                "arrayFiltrosBusqueda"  => $arrayFiltrosBusqueda);
                        $arrayRespuesta                 = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                            ->getRespuestaInfoClienteAcs($arrayPeticionesFlujoWsTecnico);
                    }
                    else
                    {
                        $arrayRespuesta['strStatus']  = "ERROR";
                        $arrayRespuesta['strMensaje'] = "Debe enviar al menos uno de los siguientes parámetros: login, identificacion, serial, mac.";
                    }
                }
                else
                {
                    $arrayRespuesta['strStatus']  = "ERROR";
                    $arrayRespuesta['strMensaje'] = "El parámetro tipo rol es obligatorio.";
                }
            }
            else
            {
                $arrayRespuesta['strStatus']  = "ERROR";
                $arrayRespuesta['strMensaje'] = "El parámetro EmpresaCod es obligatorio.";
            }
        }
        catch(\Exception $ex)
        {
            $this->utilService->insertError('Telcos+',
                                            'obtieneInformacionClienteAcs',
                                            $ex->getMessage(),
                                            $arrayPeticiones['usrCreacion'],
                                            $arrayPeticiones['ipCreacion']);
        }
        return $arrayRespuesta;
    }

    /**
     * Metodo utilizado para recuperar logines de clientes que pertenecen al puerto de un olt
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0         06-10-2016
     * @since 1.0
     *
     * @param Array $arrayPeticiones [ strNombreOlt       Nombre del olt a consultar
     *                                 strPuertoOlt       Puerto del olt a consultar
     *                                 ociCon             Parametros utilizados para generar conexion OCI a la base de datos
     *                               ]
     *
     * @return Array $arrayRespuesta
     * [
     *  - strStatus   Estado de la transaccion ejecutada
     *  - strMensaje  Mensaje de la transaccion ejecutada
     *  - arrayData   [ - caja         Nombre de caja que contiene el splitter L2 que aprovisiona internet al servicio
     *                  - splitter     Nombre de splitter L2 que aprovisiona internet al cliente
     *                  - logines      Logines que estan asociados a un splitter l2
     *                                 [
     *                                   - login      login que esta usando como recurso de red el olt y puerto consultado
     *                                 ]
     *                ]
     * ]
     */
    public function obtieneLoginesPorOltWs($arrayPeticiones)
    {
        $arrayRespuesta = "";
        $arrayRespuesta['strStatus'] = "ERROR";
        $arrayRespuesta['strMensaje'] = "Se presentaron problemas al consultar la información, favor notificar a sistemas.";
        $arrayRespuesta['arrayData'] = "";
        $arraInformacionCliente = "";
        try
        {
            $arrayRespuesta = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                    ->getLoginesPorOltWs($arrayPeticiones);

            if(count($arrayRespuesta['arrayRegistros']) > 0)
            {
                $arrayRespuesta['arrayData'] = $arrayRespuesta['arrayRegistros'];
            }
            else
            {
                $arrayRespuesta['strStatus'] = "ERROR";
                $arrayRespuesta['strMensaje'] = "No existe información para la consulta realizada.";
            }
        }
        catch(\Exception $ex)
        {
            $this->utilService->insertError('Telcos+', 'obtieneLoginesPorOltWs', $ex->getMessage(), $arrayPeticiones['usrCreacion'], $arrayPeticiones['ipCreacion']
            );
        }
        return $arrayRespuesta;
    }

    /**
     * Metodo que guarda historial de error cuando no se puede completar el flujo ( Solo util para generar registros para solicitudes
     * ligadas a procesos masivos )
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 1.0 05-10-2016
     *
     * @param Array $arrayPeticiones
     */
    public function insertarHistorialSolicitudError($arrayPeticiones)
    {
        $objDetalleSolicitud = $arrayPeticiones['objDetalleSolicitud'];

        try
        {
            if($objDetalleSolicitud)
            {
                $objDetalleSolicitud->setEstado("Fallo");
                $this->emComercial->persist($objDetalleSolicitud);
                $this->emComercial->flush();

                //Se crea Historial de Servicio
                $objDetalleSolsHist = new InfoDetalleSolHist();
                $objDetalleSolsHist->setDetalleSolicitudId($objDetalleSolicitud);
                $objDetalleSolsHist->setEstado($objDetalleSolicitud->getEstado());
                $objDetalleSolsHist->setFeCreacion(new \DateTime('now'));
                $objDetalleSolsHist->setUsrCreacion($arrayPeticiones['usrCreacion']);
                $objDetalleSolsHist->setIpCreacion($arrayPeticiones['ipCreacion']);
                $objDetalleSolsHist->setObservacion($arrayPeticiones['mensajeError']);
                $this->emComercial->persist($objDetalleSolsHist);
                $this->emComercial->flush();

                if($this->emComercial->getConnection()->isTransactionActive())
                {
                    $this->emComercial->getConnection()->commit();
                }
            }
        }
        catch(\Exception $ex)
        {
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }

            $this->utilService->insertError('Telcos+', 'insertarHistorialSolicitudError', $ex->getMessage(), $arrayPeticiones['usrCreacion'], $arrayPeticiones['ipCreacion']
            );
        }
    }

    /**
     * Repositorio que permite obtener la ultima Milla de un servicio
     * @param type $intIdServicio idServicio
     * return array(id      : Ultima Milla
     *              codigo  : Codigo de Ultima Milla)
     *
     * @author Veronica Carrasco <vcarrasco@telconet.ec>
     * @version 1.0 04-09-2016
     */
    public function getUltimaMillaPorServicio($intIdServicio)
    {
        $arrayrespuesta = array("status" => false,
            "mensaje" => null,
            "data" => array("id" => 0,
                "codigo" => null));

        $objServicio = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                ->findOneBy(array("id" => $intIdServicio));

        $objServicioTecnico = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                ->findOneBy(array("servicioId" => $objServicio));

        if(is_object($objServicioTecnico))
        {
            $objTipoMedio = $this->emInfraestructura->getRepository("schemaBundle:AdmiTipoMedio")
                    ->findOneBy(array("id" => $objServicioTecnico->getUltimaMillaId(),
                "estado" => "Activo"));
            if(is_object($objTipoMedio))
            {
                $arrayRespuesta["status"] = true;
                $arrayRespuesta["data"]["id"] = $objTipoMedio->getId();
                $arrayRespuesta["data"]["codigo"] = $objTipoMedio->getCodigoTipoMedio();
            }
            else
            {
                $arrayRespuesta["status"] = "No hay tipo medio";
            }
        }
        else
        {
            $arrayRespuesta["status"] = "No hay servicio tecnico";
        }
        return $arrayRespuesta;
    }

    /** Funcion que prepara el parametro de acuerdo a la forma de busqueda recibido
     *
     * @param string $parametro busqueda enviado
     * @param string $forma Criterio por el cual se desea buscar el login
     *                      Igual que
     *                      Empieza con
     *                      Contiene
     *                      Termina con
     *
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.0 2016-06-03 12:32 - versión original 'armarLoginBusquedaPorForma'
     * @version 1.1 2016-09-08 14:45
     */
    public function armarParametroBusquedaPorForma($parametro, $forma)
    {
        if(strcasecmp($forma, "Contiene") == 0)
        {
            return "%" . strtoupper($parametro) . "%";
        }
        elseif(strcasecmp($forma, "Empieza con") == 0)
        {
            return strtoupper($parametro) . "%";
        }
        elseif(strcasecmp($forma, "Termina con") == 0)
        {
            return "%" . strtoupper($parametro);
        }
        return $parametro;
    }

    /**
     * Funcion que permite crear Interface de un Elemento
     *
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.0 2016-09-24 10:21
     *
     * @param array $arrayParametros[
     *                              'intModeloElementoId',
     *                              'strTipoElemento'
     *                              'objElementoCpe'
     *                              'strUsrCreacion'
     *                              'strIpCreacion'
     *                              'strMacElementoCliente'
     */
    private function crearInterfacesElemento($arrayParametros)
    {
        $arrayInterfaceModelo = $this->emInfraestructura->getRepository('schemaBundle:AdmiInterfaceModelo')
                ->findBy(array("modeloElementoId" => $arrayParametros['intModeloElementoId']));

        foreach($arrayInterfaceModelo as $objInterfaceModelo)
        {
            $cantidadInterfaces = $objInterfaceModelo->getCantidadInterface();
            $formato = $objInterfaceModelo->getFormatoInterface();
            $objAdmiTipoInter = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoInterface')
                    ->find($objInterfaceModelo->getTipoInterfaceId());

            //Para reiniciar el conteo se verifica si la clase de Interfaz es Modular
            $ini = $arrayParametros['strTipoElemento'] == 'ROUTER' ? 0 : 1;

            for($i = $ini; $i < ($cantidadInterfaces + $ini); $i++)
            {
                $interfaceCpe = new InfoInterfaceElemento();

                $format = explode("?", $formato);
                $nombreInterfaceElemento = $format[0] . $i;

                $interfaceCpe->setNombreInterfaceElemento($nombreInterfaceElemento);
                $interfaceCpe->setDescripcionInterfaceElemento($objAdmiTipoInter ?
                                $objAdmiTipoInter->getNombreTipoInterface() : $nombreInterfaceElemento);
                $interfaceCpe->setElementoId($arrayParametros['objElemento']);
                $interfaceCpe->setEstado("not connect");
                $interfaceCpe->setUsrCreacion($arrayParametros['strUsrCreacion']);
                $interfaceCpe->setFeCreacion(new \DateTime('now'));
                $interfaceCpe->setIpCreacion($arrayParametros['strIpCreacion']);

                if(isset($arrayParametros['strMacElemento']) && $objAdmiTipoInter->getNombreTipoInterface() == 'Wan')
                {
                    $interfaceCpe->setMacInterfaceElemento($arrayParametros['strMacElemento']);
                }

                $this->emInfraestructura->persist($interfaceCpe);
            }
            $this->emInfraestructura->flush();
        }
    }

    /**
     *
     * Metodo que sirve para actualizar las capacidades de un concentrador dado una operacion ejecutada sobre un extremo particular
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 03-10-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - Se invoca llamado a metodo de control de excepciones para manejar mensaje de la misma correctamente
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 - Se valida que cuando no cambie el bw no se ejecute en el web service de networking
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 - Se agrega llamado a configuracion de BW en Concentrador Backup cada que vez que el concentrador Principal sufra una variacion
     *                a nivel de capacidades
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 - 04/07/2017 Se sumariza en puerto del Concentrador si es que hubiese en la misma Ultima Milla otro servicios
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 - 07/07/2017 Se omite ejecucion en concentrador de Servicios concentradores que no contengan data tecnica
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 - 20/07/2017 Se agregan lineas de programación ingresadas en el archvio directamente
     *                           en producción, se regulariza codigo no versionado
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.7 - 24/03/2018 Se omite ejecucion en concentrador de Servicios concentradores que pertenezcan a DATACENTER y no tenga data tecnica
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.8 - 23/07/2018 Se modifica para que se pueda procesar Concentrador de Datos en DC
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.9 - 02/01/2019 Se modifica para que no se realice ejecución alguna a nivel de WS para concentradores L2mpls
     *
     * @since 13-13-2016
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 2.0 - 05-08-2019 Se valida que el producto L3MPLS SDWAN este enlazado a un concentrador.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.1 - 11-05-2020 | Se justa logica para prevenir capacidades en negativo.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.2 01-06-2020 - Se agrega el id del servicio a la url 'configBW' del ws de networking para la validación del BW
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.3 14-07-2020 - Se agrega la acción de ejecución en la actualización de la capacidad del concentrador
     * 
     * @author Joel Muñoz M <jrmunoz@telconet.ec>
     * @version 2.4 13-03-2023  Se agrega excepción a llamado a servicio NW cuando es una migración SDWAN
     *
     * @param Array $arrayParametros [ 
     *                                 objServicio           Objeto referente al Servicio al cual se lo desenlaza/enlaza/activa/cancela
     *                                 capacidadUnoNueva     Capacidad Up al cual sera sumada/restada del concentrador
     *                                 capacidadDosNueva     Capacidad Down al cual sera sumada/restada del concentrador
     *                                 operacion             Caracter (+)/(-)/(=) que indica si se suma, resta o permanece igual las capacidades
     *                                 usrCreacion           Usuario que lanza el proceso
     *                                 ipCreacion            Ip de donde se lanza el proceso
     *                                 boolSeEnlaza          Booleano que indica si un servicio sera enlazado/desenlazado ( servicios activos )
     *                                                       si es "true", caso contrario se refiere a un servicio que sera activado ( servicios en
     *                                                       estado Asignada ), en el primer caso no suma capacidades porque viene dado en la
     *                                                       consulta y en le segundo al ser un servicio no activado si requiere suma de las mismas
     *                               ]
     * @throws type
     * @return Array $arrayParametros[
     *                                  capacidadUpAnterior     Capacidad Up anterior del concentrador
     *                                  capacidadDownAnterior   Capacidad Down anterior del concentrador
     *                                  capacidadUpNueva        Capacidad Nueva Up del concentrador sumando o restando el extremo
     *                                  capacidadDownNueva      Capacidad Nueva Down del concentrador sumando o restando el extremo
     *                               ]
     */
    public function actualizarCapacidadesEnConcentrador($arrayParametros)
    {
        $arrayCapacidadesConcentrador = null;
        $boolEsConcentradorActivoEnPruebas = true;
        $boolProductoEsConcentrador = false;
        $intServicioConcentradorId = 0;
        $objServicioConcentradorBack = null;
        $arrayServiciosConcentradorBack = array();

        try
        {
            if(isset($arrayParametros['objServicio']) && !empty($arrayParametros['objServicio']))
            {
                $objServicio = $arrayParametros['objServicio'];
            }
            else
            {
                $this->utilService->lanzarExcepcion('OBJETO', 'Servicio Extremo como parámetro para buscar su Concentrador');
            }

            if($objServicio->getProductoId()->getEsConcentrador() == 'SI')
            {
                $intServicioConcentradorId = $objServicio->getId();
                $boolProductoEsConcentrador = true;
            }
            else
            {
                //seteo la variable de requerimiento del enlace de datos
                $strReqEnlaceDatos = 'SI';
                //se obtiene el parametro si se configura el enlace de datos del producto
                $arrayParametroEnlaceDatos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('CONFIG_PRODUCTO_DIRECT_LINK_MPLS',
                                                             'TECNICO',
                                                             '',
                                                             '',
                                                             $objServicio->getProductoId()->getId(),
                                                             'ENLACE_DATOS',
                                                             '',
                                                             '',
                                                             '',
                                                             '10');
                if( isset($arrayParametroEnlaceDatos) && !empty($arrayParametroEnlaceDatos) )
                {
                    $strReqEnlaceDatos = $arrayParametroEnlaceDatos['valor3'];
                }
                if($strReqEnlaceDatos == 'NO')
                {
                    //En Caso que no haya un Concentrador definido
                    $arrayCapacidadesConcentrador['capacidadUpAnterior'] = 0;
                    $arrayCapacidadesConcentrador['capacidadDownAnterior'] = 0;
                    $arrayCapacidadesConcentrador['capacidadUpNueva'] = 0;
                    $arrayCapacidadesConcentrador['capacidadDownNueva'] = 0;
                    return $arrayCapacidadesConcentrador;
                }
                $objSpcEnlaceDatos = $this->getServicioProductoCaracteristica($objServicio, "ENLACE_DATOS", $objServicio->getProductoId());

                //Si tiene enlace de datos el servicio ( concentrador ) se actualiza la informacion de sus capacidades segun la operacion que desee
                //ejecutar
                if(is_object($objSpcEnlaceDatos))
                {
                    $intServicioConcentradorId = intval($objSpcEnlaceDatos->getValor());
                }
                else
                {
                    if($objServicio->getProductoId()->getNombreTecnico() == "L3MPLS" ||
                        $objServicio->getProductoId()->getNombreTecnico() == "L3MPLS SDWAN")
                    {
                        $this->utilService->lanzarExcepcion('OBJETO', 'Servicio enlazado a Concentrador');
                    }
                }
            }

            //En Caso que no haya un Concentrador definido
            $arrayCapacidadesConcentrador['capacidadUpAnterior'] = 0;
            $arrayCapacidadesConcentrador['capacidadDownAnterior'] = 0;
            $arrayCapacidadesConcentrador['capacidadUpNueva'] = 0;
            $arrayCapacidadesConcentrador['capacidadDownNueva'] = 0;

            $intCapacidadUp = 0;
            $intCapacidadDown = 0;

            if($intServicioConcentradorId > 0)
            {
                //Se actualiza la informacion de capacidad en el concentrador y se genera historial al servicio como tal
                $objServicioConcentrador = $this->emComercial->getRepository("schemaBundle:InfoServicio")->find($intServicioConcentradorId);

                $this->utilService->validaObjeto($objServicioConcentrador, "No se encontró el Concentrador a actualizar");

                $objServicioTecConcentrador = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                        ->findOneByServicioId($intServicioConcentradorId);

                $this->utilService->validaObjeto($objServicioTecConcentrador, "No existe Datos Técnicos para Servicio Concentrador");

                $strNombreTecnico = $objServicioConcentrador->getProductoId()->getNombreTecnico();

                //Si es concentrador DATOSDC y no tiene datos tecnicos debe continuar con el flujo sin ejecutar nada en el concentrador
                if(($strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'L2MPLS' ||
                    $objServicioConcentrador->getProductoId()->getGrupo() == 'DATACENTER')
                   && $objServicioTecConcentrador->getElementoId() == null)
                {
                    //Si es Datos DC y es concentrador debe continuar para poder registrar los anchos de banda o disminuirlos
                    if($objServicioConcentrador->getProductoId()->getEsConcentrador() == 'SI' && $strNombreTecnico == 'DATOSDC')
                    {
                        $boolEsConcentradorActivoEnPruebas = false;
                    }
                    else//Caso contrario el seguirá su camino
                    {
                        return $arrayCapacidadesConcentrador;
                    }
                }
                else
                {
                    //Si es un producto convencional y no tiene informacion de backbone no permite continuar
                    if($objServicioTecConcentrador->getElementoId() == null &&
                            ($objServicioConcentrador->getEstado() != 'Pre-servicio' &&
                        $objServicioConcentrador->getEstado() != 'PreFactibilidad'))
                    {
                        $this->utilService->lanzarExcepcion("OBJETO","Backbone configurada en Servicio Concentrador");
                    }
                }

                //Se obtiene el Servicio Concentrador Backup
                if(is_object($objServicioTecConcentrador) && $objServicioTecConcentrador->getTipoEnlace() == 'PRINCIPAL')
                {
                    //Se obtiene el servicio backup del enlace principal
                    $arrayServiciosConcentradorBack = $this->getServiciosBackupByServicioPrincipal($objServicioConcentrador);
                }

                //Se determina con la bandera en que estado se debe ejecutar script para un servicio ( Concentrador )
                if($objServicioConcentrador->getEstado() != 'Activo' &&
                        $objServicioConcentrador->getEstado() != 'EnPruebas' &&
                    $objServicioConcentrador->getEstado() != 'Asignada')
                {
                    $boolEsConcentradorActivoEnPruebas = false;
                }

                $arrayCapacidadesPorConcentrador = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->getArrayCapacidadesPorConcentrador($intServicioConcentradorId);

                $this->utilService->validaObjeto($arrayCapacidadesPorConcentrador, "No se encontraron las capacidades totales del"
                        . " Concentrador");

                //Capacidades totales de la suma de los extremos del concentrador en estado Activo e In-Corte
                $intCapacidadUp = $arrayCapacidadesPorConcentrador['totalCapacidadUno'];
                $intCapacidadDown = $arrayCapacidadesPorConcentrador['totalCapacidadDos'];

                //Capacidades del servicio a cancelar/activar/enlazar/desenlazar
                $intCapacidadUnoNueva = $arrayParametros['capacidadUnoNueva'];
                $intCapacidadDosNueva = $arrayParametros['capacidadDosNueva'];

                //Si se activa un nuevo servicio o se enlaza se suma el BW al concentrador
                if($arrayParametros['operacion'] == '+')
                {
                    //Si el servicio se lo esta enlazando a un nuevo concentrador la sumataria de extremos ya incluye el servicio
                    //en gestion ( servicio ya Activo ) por tanto ya vienen actualizados los totales de extremos del nuevo concentrador
                    if(isset($arrayParametros['boolSeEnlaza']) && $arrayParametros['boolSeEnlaza'])
                    {
                        $intCapacidadUpNueva = $intCapacidadUp;
                        $intCapacidadDownNueva = $intCapacidadDown;
                    }
                    else //Cuando no viene el parametro "boolSeEnlaza" ( escenario de Activacion - servicios en estado Asignado)
                    // si debe sumarse la nueva capacidad dado que el enlace ya fue realizado previamente
                    {
                        $intCapacidadUpNueva = $intCapacidadUp + $intCapacidadUnoNueva;
                        $intCapacidadDownNueva = $intCapacidadDown + $intCapacidadDosNueva;
                    }
                }
                else if($arrayParametros['operacion'] == '-')//Si se cancela o desenlaza se resta el BW al concentrador
                {
                    /* Se previene mediante un operador ternario que la capacidades puedan ser negativas. */
                    $intCapacidadUpNueva = ($intCapacidadUp - $intCapacidadUnoNueva) < 0 ? 0 : $intCapacidadUp - $intCapacidadUnoNueva;
                    $intCapacidadDownNueva = ($intCapacidadDown - $intCapacidadDosNueva) < 0 ? 0 : $intCapacidadDown - $intCapacidadDosNueva;
                }
                else //Cuando no requiere ser actualizado al total del concentrador los bw del extremo ( nuevo servicio )
                {
                    $intCapacidadUpNueva = $intCapacidadUp;
                    $intCapacidadDownNueva = $intCapacidadDown;
                }

                //Si el concentrador no tiene extremos enlazados ( fueron creados con una capacidad que no dependen de un extremo )
                if($boolProductoEsConcentrador && ($intCapacidadUp != 0 && $intCapacidadDown != 0))
                {
                    $intCapacidadUpNueva = $intCapacidadUp;
                    $intCapacidadDownNueva = $intCapacidadDown;
                }

                //Capacidades actuales del concentrador
                $objSpcCapacidadUnoConcentrador = $this->getServicioProductoCaracteristica($objServicioConcentrador, "CAPACIDAD1", $objServicioConcentrador->getProductoId());
                $objSpcCapacidadDosConcentrador = $this->getServicioProductoCaracteristica($objServicioConcentrador, "CAPACIDAD2", $objServicioConcentrador->getProductoId());

                $this->utilService->validaObjeto($objSpcCapacidadUnoConcentrador, "No existe Capacidad Uno para Concentrador");
                $this->utilService->validaObjeto($objSpcCapacidadDosConcentrador, "No existe Capacidad Dos para Concentrador");

                //Se actualizan las capacidades Up y Down del Concentrador de acuerdo a la operacion que se desea realizar
                $objSpcCapacidadUnoConcentrador->setValor($intCapacidadUpNueva);
                $this->emComercial->persist($objSpcCapacidadUnoConcentrador);
                $this->emComercial->flush();

                $objSpcCapacidadDosConcentrador->setValor($intCapacidadDownNueva);
                $this->emComercial->persist($objSpcCapacidadDosConcentrador);
                $this->emComercial->flush();

                //Se guarda historial en el Servicio concentrador
                $strObservacionConcentrador = "<b>  Se Actualiza Capacidades en el Concentrador:</b>" .
                        "<br> Velocidad Up Total anterior  : " . $intCapacidadUp .
                        "<br> Velocidad Down Total anterior: " . $intCapacidadDown .
                        "<br> Velocidad Up Total Nuevo     : " . $intCapacidadUpNueva .
                        "<br> Velocidad Down Total Nuevo   : " . $intCapacidadDownNueva .
                        "<br> <b> Capacidades del Servicio (enlazado/desenlazado) : " . $objServicio->getLoginAux() . "</b>" .
                        "<br> Velocidad Up                 : " . $arrayParametros['capacidadUnoNueva'] .
                        "<br> Velocidad Down               : " . $arrayParametros['capacidadDosNueva'] .
                        "<br> Accion                       : " . $arrayParametros['accion'];

                $objServicioHistConcentrador = new InfoServicioHistorial();
                $objServicioHistConcentrador->setServicioId($objServicioConcentrador);
                $objServicioHistConcentrador->setObservacion($strObservacionConcentrador);
                $objServicioHistConcentrador->setEstado($objServicioConcentrador->getEstado());
                $objServicioHistConcentrador->setUsrCreacion($arrayParametros['usrCreacion']);
                $objServicioHistConcentrador->setFeCreacion(new \DateTime('now'));
                $objServicioHistConcentrador->setIpCreacion($arrayParametros['ipCreacion']);
                $this->emComercial->persist($objServicioHistConcentrador);
                $this->emComercial->flush();

                //Se envia la informacion de las capacidades cambiadas del Concentrador
                $arrayCapacidadesConcentrador['capacidadUpAnterior']   = $intCapacidadUp;
                $arrayCapacidadesConcentrador['capacidadDownAnterior'] = $intCapacidadDown;
                $arrayCapacidadesConcentrador['capacidadUpNueva']      = $intCapacidadUpNueva;
                $arrayCapacidadesConcentrador['capacidadDownNueva']    = $intCapacidadDownNueva;

                //Si el concentrador es L2mpls no deberá ejecutar un control de ancho de banda,sólo se ingresará el historial del mismo
                if($strNombreTecnico == 'L2MPLS')
                {
                    return $arrayCapacidadesConcentrador;
                }

                //Se verifica en el parameters.yml que verifique si se debe o no ejecutar en el Concentrador la Actualizacion
                //El Servicio concentrador debe estar en estado Activo/EnPruebas para poder ejecutar script
                if($this->ejecutaEnConcentrador == 'S' && $arrayParametros['operacion'] != '=')
                {
                    //Ejecucion en enlace PRINCIPAL
                    if($boolEsConcentradorActivoEnPruebas)
                    {
                        $objElementoConcentrador = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                ->find($objServicioTecConcentrador->getElementoId());

                        $this->utilService->validaObjeto($objElementoConcentrador, "No existe Elemento Concentrador, Por favor verificar");

                        $objInterfaceElementoConcentrador = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                ->find($objServicioTecConcentrador->getInterfaceElementoId());

                        $this->utilService->validaObjeto($objInterfaceElementoConcentrador, "No existe Puerto del Elemento Concentrador");

                        //Para Datacenter siempre se manejará el anillo 0 por default
                        if($strNombreTecnico == 'DATOSDC' || $objServicioConcentrador->getProductoId()->getGrupo() == 'DATACENTER')
                        {
                            $intAnillo = 0;
                        }
                        else
                        {
                            $objDetalleAnillo = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                    ->findOneBy(array("elementoId"    => $objElementoConcentrador->getId(),
                                                                                      "detalleNombre" => "ANILLO",
                                                                                      "estado"        => "Activo"));

                            $this->utilService->validaObjeto($objDetalleAnillo, "No existe Información de Anillo relacionado a Switch Concentrador " .
                                                             $objElementoConcentrador->getNombreElemento());

                            $intAnillo = $objDetalleAnillo->getDetalleValor();
                        }


                        $arrayCapacidadesConcentradorInt = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                ->getResultadoCapacidadesPorInterface($objInterfaceElementoConcentrador->getId());

                        //Si se activa un nuevo servicio o se enlaza se suma el BW al concentrador
                        if($arrayParametros['operacion'] == '+')
                        {
                            $intCapacidadUpNueva   = intval($arrayCapacidadesConcentradorInt['totalCapacidad1']) + intval($intCapacidadUnoNueva);
                            $intCapacidadDownNueva = intval($arrayCapacidadesConcentradorInt['totalCapacidad2']) + intval($intCapacidadDosNueva);
                        }
                        else if($arrayParametros['operacion'] == '-')//Si se cancela o desenlaza se resta el BW al concentrador
                        {
                            $intCapacidadUpNueva   = intval($arrayCapacidadesConcentradorInt['totalCapacidad1']) - intval($intCapacidadUnoNueva);
                            $intCapacidadDownNueva = intval($arrayCapacidadesConcentradorInt['totalCapacidad2']) - intval($intCapacidadDosNueva);
                        }
                        else
                        {
                            $intCapacidadUpNueva   = intval($arrayCapacidadesConcentradorInt['totalCapacidad1']);
                            $intCapacidadDownNueva = intval($arrayCapacidadesConcentradorInt['totalCapacidad2']);
                        }

                        //obtengo la capacidad del extremo
                        $objCapacidadExtUno = $this->getServicioProductoCaracteristica($objServicio, "CAPACIDAD1",
                                                                                       $objServicio->getProductoId());
                        $objCapacidadExtDos = $this->getServicioProductoCaracteristica($objServicio, "CAPACIDAD2",
                                                                                       $objServicio->getProductoId());
                        $intCapacidadExtUno = is_object($objCapacidadExtUno) ? $objCapacidadExtUno->getValor() : 0;
                        $intCapacidadExtDos = is_object($objCapacidadExtDos) ? $objCapacidadExtDos->getValor() : 0;
                        $intCapacidadTotalExtremo = $intCapacidadExtUno >= $intCapacidadExtDos ? $intCapacidadExtUno : $intCapacidadExtDos;

                        $arrayPeticionesBw = array();
                        $arrayPeticionesBw['url'] = 'configBW';
                        $arrayPeticionesBw['accion'] = 'Activar';
                        $arrayPeticionesBw['id_servicio'] = $objServicioConcentrador->getId();
                        $arrayPeticionesBw['nombreMetodo'] = 'InfoServicioTecnicoService.actualizarCapacidadesEnConcentrador';
                        $arrayPeticionesBw['nombreAccionBw'] = isset($arrayParametros['nombreAccionBw']) ? $arrayParametros['nombreAccionBw'] : null;
                        $arrayPeticionesBw['loginAuxExtremo'] = $objServicio->getLoginAux();
                        $arrayPeticionesBw['bwAuxExtremo']    = $intCapacidadTotalExtremo;
                        $arrayPeticionesBw['sw'] = $objElementoConcentrador->getNombreElemento();
                        $arrayPeticionesBw['pto'] = $objInterfaceElementoConcentrador->getNombreInterfaceElemento();
                        $arrayPeticionesBw['anillo'] = $intAnillo;
                        $arrayPeticionesBw['bw_up'] = intval($intCapacidadUpNueva);
                        $arrayPeticionesBw['bw_down'] = intval($intCapacidadDownNueva);
                        $arrayPeticionesBw['servicio'] = $objServicioConcentrador->getProductoId()->getNombreTecnico();
                        $arrayPeticionesBw['login_aux'] = $objServicioConcentrador->getLoginAux();
                        $arrayPeticionesBw['user_name'] = $arrayParametros['usrCreacion'];
                        $arrayPeticionesBw['user_ip'] = $arrayParametros['ipCreacion'];

                        //Ejecucion del metodo via WS para realizar la configuracion del SW
                                        // SE AGREGA VALIDACIÓN PARA NO HACER LLAMADA A NETWORKING SI ES UNA MIGRACION SDWAN
                        if(!(isset($arrayParametros['booleanEsSDWAN']) 
                        && isset($arrayParametros['booleanEsMigracionSDWAN']) 
                        && $arrayParametros['booleanEsSDWAN'] === "true" 
                        && $arrayParametros['booleanEsMigracionSDWAN']=== "true"))
                        {
                            $arrayRespuestaBw = $this->networkingScripts->callNetworkingWebService($arrayPeticionesBw);
                        }
                        else
                        {
                            $arrayRespuestaBw['status'] = 'OK';
                        }

                        if($arrayRespuestaBw['status'] != 'OK')
                        {
                            $this->utilService->lanzarExcepcion('NETWORKING', $arrayRespuestaBw['mensaje']);
                        }
                    }

                    //Ejecucion en enlaces BACKUP de existir
                    if(!empty($arrayServiciosConcentradorBack))
                    {
                        foreach($arrayServiciosConcentradorBack as $arrayServiciosBck)
                        {
                            $objServicioConcentradorBack = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                    ->find($arrayServiciosBck['id']);

                            $this->utilService->validarVariable($objServicioConcentradorBack, "Informacion de Concentrador Backup");

                            //Solo cuando este Activo o EnPruebas el Concentrador Backup ejecutar script de NW
                            if($objServicioConcentradorBack->getEstado() == 'Activo' ||
                                $objServicioConcentradorBack->getEstado() == 'EnPruebas')
                            {
                                $objServicioTecnicoConc = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                                        ->findOneByServicioId($objServicioConcentradorBack->getId());

                                $this->utilService->validarVariable($objServicioTecnicoConc, "Informacion Tecnica de Concentrador Backup");

                                $objElementoConcentrador = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                        ->find($objServicioTecnicoConc->getElementoId());

                                $this->utilService->validarVariable($objElementoConcentrador, "Informacion de Switch Concentrador Backup");

                                $objInterfaceElementoConcentrador = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                        ->find($objServicioTecnicoConc->getInterfaceElementoId());

                                $this->utilService->validarVariable($objInterfaceElementoConcentrador, "Información Puerto del Elemento Concentrador Backup");

                                $objDetalleAnillo = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                        ->findOneBy(array("elementoId" => $objElementoConcentrador->getId(),
                                    "detalleNombre" => "ANILLO",
                                    "estado" => "Activo"));

                                $this->utilService->validarVariable($objDetalleAnillo, "Información de Anillo relacionado a Switch Concentrador Backup" .
                                        $objElementoConcentrador->getNombreElemento());

                                //obtengo la capacidad del extremo
                                $objCapacidadExtUno = $this->getServicioProductoCaracteristica($objServicio, "CAPACIDAD1",
                                                                                               $objServicio->getProductoId());
                                $objCapacidadExtDos = $this->getServicioProductoCaracteristica($objServicio, "CAPACIDAD2",
                                                                                               $objServicio->getProductoId());
                                $intCapacidadExtUno = is_object($objCapacidadExtUno) ? $objCapacidadExtUno->getValor() : 0;
                                $intCapacidadExtDos = is_object($objCapacidadExtDos) ? $objCapacidadExtDos->getValor() : 0;
                                $intCapacidadTotalExtremo = $intCapacidadExtUno >= $intCapacidadExtDos ? $intCapacidadExtUno : $intCapacidadExtDos;

                                $arrayPeticionesBwBck = array();
                                $arrayPeticionesBwBck['url'] = 'configBW';
                                $arrayPeticionesBwBck['accion'] = 'Activar';
                                $arrayPeticionesBwBck['id_servicio'] = $objServicioConcentradorBack->getId();
                                $arrayPeticionesBwBck['nombreMetodo'] = 'InfoServicioTecnicoService.actualizarCapacidadesEnConcentrador';
                                $arrayPeticionesBwBck['loginAuxExtremo'] = $objServicio->getLoginAux();
                                $arrayPeticionesBwBck['bwAuxExtremo']    = $intCapacidadTotalExtremo;
                                $arrayPeticionesBwBck['sw'] = $objElementoConcentrador->getNombreElemento();
                                $arrayPeticionesBwBck['pto'] = $objInterfaceElementoConcentrador->getNombreInterfaceElemento();
                                $arrayPeticionesBwBck['anillo'] = $objDetalleAnillo->getDetalleValor();
                                $arrayPeticionesBwBck['bw_up'] = intval($intCapacidadUpNueva);
                                $arrayPeticionesBwBck['bw_down'] = intval($intCapacidadDownNueva);
                                $arrayPeticionesBwBck['servicio'] = $objServicioConcentradorBack->getProductoId()->getNombreTecnico();
                                $arrayPeticionesBwBck['login_aux'] = $objServicioConcentradorBack->getLoginAux();
                                $arrayPeticionesBwBck['user_name'] = $arrayParametros['usrCreacion'];
                                $arrayPeticionesBwBck['user_ip'] = $arrayParametros['ipCreacion'];

                                //Ejecucion del metodo via WS para realizar la configuracion del SW
                                // SE AGREGA VALIDACIÓN PARA NO HACER LLAMADA A NETWORKING SI ES UNA MIGRACION SDWAN
                                if(!(isset($arrayParametros['booleanEsSDWAN']) 
                                && isset($arrayParametros['booleanEsMigracionSDWAN']) 
                                && $arrayParametros['booleanEsSDWAN'] === "true" 
                                && $arrayParametros['booleanEsMigracionSDWAN']=== "true"))
                                {
                                    $arrayRespuestaBwBck = $this->networkingScripts->callNetworkingWebService($arrayPeticionesBwBck);
                                }
                                else
                                {
                                    $arrayRespuestaBwBck['status'] = 'OK';
                                }

                                if($arrayRespuestaBwBck['status'] != 'OK')
                                {
                                    $this->utilService->lanzarExcepcion('NETWORKING', $arrayRespuestaBwBck['mensaje']);
                                }
                            }

                            //Se actualizan capacidades en Backup y se genera Historial
                            $objCapacidad1ConcentradorBck = $this->getServicioProductoCaracteristica($objServicioConcentradorBack, "CAPACIDAD1", $objServicioConcentradorBack->getProductoId()
                            );
                            $objCapacidad2ConcentradorBck = $this->getServicioProductoCaracteristica($objServicioConcentradorBack, "CAPACIDAD2", $objServicioConcentradorBack->getProductoId()
                            );

                            $this->utilService->validaObjeto($objCapacidad1ConcentradorBck, "No existe Capacidad Uno para Concentrador Backup");
                            $this->utilService->validaObjeto($objCapacidad2ConcentradorBck, "No existe Capacidad Dos para Concentrador Backup");

                            $intCapacidadUp = $objCapacidad1ConcentradorBck->getValor();
                            $intCapacidadDown = $objCapacidad2ConcentradorBck->getValor();

                            //Se actualizan las capacidades Up y Down del Concentrador de acuerdo a la operacion que se desea realizar
                            $objCapacidad1ConcentradorBck->setValor($intCapacidadUpNueva);
                            $this->emComercial->persist($objCapacidad1ConcentradorBck);
                            $this->emComercial->flush();

                            $objCapacidad2ConcentradorBck->setValor($intCapacidadDownNueva);
                            $this->emComercial->persist($objCapacidad2ConcentradorBck);
                            $this->emComercial->flush();

                            //Se guarda historial en el Servicio concentrador
                            $strObservacionConcentradorBck = "<b>  Se Actualiza Capacidades en el Concentrador BACKUP por acción "
                                    . "realizada en Concentrador PRINCIPAL: " . $objServicioConcentrador->getLoginAux() . "</b>" .
                                    "<br> Velocidad Up Total anterior  : " . $intCapacidadUp .
                                    "<br> Velocidad Down Total anterior: " . $intCapacidadDown .
                                    "<br> Velocidad Up Total Nuevo     : " . $intCapacidadUpNueva .
                                    "<br> Velocidad Down Total Nuevo   : " . $intCapacidadDownNueva
                            ;

                            $objServicioHistConcentrador = new InfoServicioHistorial();
                            $objServicioHistConcentrador->setServicioId($objServicioConcentradorBack);
                            $objServicioHistConcentrador->setObservacion($strObservacionConcentradorBck);
                            $objServicioHistConcentrador->setEstado($objServicioConcentradorBack->getEstado());
                            $objServicioHistConcentrador->setUsrCreacion($arrayParametros['usrCreacion']);
                            $objServicioHistConcentrador->setFeCreacion(new \DateTime('now'));
                            $objServicioHistConcentrador->setIpCreacion($arrayParametros['ipCreacion']);
                            $this->emComercial->persist($objServicioHistConcentrador);
                            $this->emComercial->flush();
                        }
                    }
                }
            }
        }
        catch(\Exception $e)
        {
            $this->utilService->insertError('Telcos+', 'actualizarCapacidadesEnConcentrador', $e->getMessage(), $arrayParametros['usrCreacion'], $arrayParametros['ipCreacion']
            );

            $this->utilService->relanzarExcepcion($e);
        }

        return $arrayCapacidadesConcentrador;
    }

    /**
     *
     * Metodo encargado de agregar/eliminar una routemap ligada al servicio
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 09-01-2017
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 09-05-2018     Se agrega programación para eliminar y crear ruta dinámicas de manera correcta
     *                             utilizando las rutas dinámicas existentes del cliente
     * @since 1.0
     *
     * @param  Array $arrayParametros [
     *                                   intIdServicio          id del Servicio a procesar
     *                                   strRouteMap            Nombre de la RouteMap a crear o creado
     *                                   strUsrCreacion         Usuario que realiza la opcion
     *                                   strIpCreacion          Ip de donde se realiza la opcion
     *                                   boolAgregarRm          Boleano que determina si se agrega o elimina una routemap
     *                                   arrayPrefixActualizar  Array con la informacion de los prefix a ser agregados/eliminados
     *                                ]
     * @return Object $objServicioProdCaractRouteMap  Referencia del objeto que contiene la routemap del servicio
     */
    public function crearEliminarRouteMap($arrayParametros)
    {
        $arrayResultado = array();

        $strStatus = 'OK';
        $strMensaje = 'OK';

        $this->emComercial->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();

        try
        {
            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['intIdServicio']);

            $this->utilService->validarVariable($objServicio, 'Servicio a crear/eliminar información de Route Map');

            //Si es nuevo o creados
            if(isset($arrayParametros['boolEsNuevoRm']) && $arrayParametros['boolEsNuevoRm'])
            {
                $objServicioProdCaractRouteMap = $this->ingresarServicioProductoCaracteristica($objServicio, $objServicio->getProductoId(), 'ROUTE_MAP', $arrayParametros['strRouteMap'], $arrayParametros['strUsrCreacion']
                );
            }
            else //Se elimina logicamente la routeMap ligada al servicio
            {
                $objServicioProdCaractRouteMap = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                        ->findOneBy(array('servicioId' => $objServicio->getId(),
                    'valor' => $arrayParametros['strRouteMap'],
                    'estado' => 'Activo')
                );

                //Si se desea eliminar logicamente
                if(isset($arrayParametros['boolAgregarRm']) && !$arrayParametros['boolAgregarRm'])
                {
                    $this->utilService->validarVariable($objServicioProdCaractRouteMap, 'Caracteristica de ROUTE-MAP ligada al Producto del Servicio');

                    $arrayProdCaractPrefixList = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                            ->findBy(array('servicioId' => $objServicio->getId(),
                        'refServicioProdCaractId' => $objServicioProdCaractRouteMap->getId(),
                        'estado' => 'Activo')
                    );
                    //Se elimina logicamente los prefix ligada a la routemap del servicio
                    foreach($arrayProdCaractPrefixList as $objPrefix)
                    {
                        $this->setEstadoServicioProductoCaracteristica($objPrefix, 'Eliminado');
                    }

                    $this->setEstadoServicioProductoCaracteristica($objServicioProdCaractRouteMap, 'Eliminado');
                }
            }

            //---------------------------------------------------------------------------------
            //              CREACION DE PREFIX LIGADA A LA ROUTE MAP CREADA
            //---------------------------------------------------------------------------------

            $arrayParametros['objServicioProdCaractRouteMap'] = $objServicioProdCaractRouteMap;

            $arrayResultadoPrefix = $this->crearEliminarRouteMapPrefix($arrayParametros);
            $strStatus = $arrayResultadoPrefix['strStatus'];
            $strMensaje = $arrayResultadoPrefix['strMensaje'];

            if($strStatus != 'OK')
            {
                return array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
            }

            $this->emComercial->commit();
            $this->emInfraestructura->commit();
        }
        catch(\Exception $e)
        {
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->rollback();
            }

            if($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->rollback();
            }

            $this->utilService->insertError('Telcos+', 'crearEliminarRouteMap', $e->getMessage(), $arrayParametros['strUsrCreacion'], $arrayParametros['strIpCreacion']
            );

            $strStatus = 'ERROR';
            $strMensaje = 'No se pudo guardar la información de RouteMap al Servicio';

            $this->emComercial->close();
            $this->emInfraestructura->close();
        }

        $arrayResultado = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayResultado;
    }

    /**
     *
     * Metodo encargado de realizar el ingreso de la informacion de Prefix ligada a cada RouteMap
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 10-01-2017
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 09-05-2018     Se agrega programación para eliminar y crear ruta dinámicas de manera correcta
     *                             utilizando las rutas dinámicas existentes del cliente
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 04-07-2018     Se agrega programación realizar la reversa del enrutamiento cuando sea eliminada una subred de la prefixlist
     *                             La ruta debera a ser creada como estaba inicialmente
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 16-07-2018     Se agrega programación para al momento de realizar la configuración en la routemap de rutas estáticas que
     *                             tengan subredes del pool del telcos, estas se verifiquen que efectivamente sean rutas Estáticas
     *
     * @since 1.1
     *
     * @param  Array $arrayParametros [
     *                                   intIdServicio                  id del Servicio a procesar
     *                                   strRouteMap                    Nombre de la RouteMap a crear o creado
     *                                   arrayPrefixActualizar          Array con la informacion de los prefix a ser agregados/eliminados
     *                                   strIpCreacion                  Ip de donde se realiza la opcion
     *                                   strUserCreacion                Usuario que genera la opcion
     *                                   objServicioProdCaractRouteMap  Objeto con la informacion referencial a al routemap creada
     *                                 ]
     * @return Array $arrayResultado [ strStatus , strMensaje ]
     */
    private function crearEliminarRouteMapPrefix($arrayParametros)
    {
        $arrayResultado = array();

        $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['intIdServicio']);

        $this->utilService->validarVariable($arrayParametros['objServicioProdCaractRouteMap'], 'Caracteristica de ROUTE-MAP ligada al Producto del Servicio');
        $this->utilService->validarVariable($objServicio, 'Servicio a crear/eliminar información de Route Map');

        try
        {
            $objServicioTecnico = $this->emComercial
                                       ->getRepository('schemaBundle:InfoServicioTecnico')
                                       ->findOneByServicioId($arrayParametros['intIdServicio']);
            $this->utilService->validarVariable($objServicioTecnico, 'Servicio Tecnico a crear/eliminar información de Route Map');
            //Agregar los nuevos prefix ligados a la routemap
            if(isset($arrayParametros['boolAgregarRm']) && !empty($arrayParametros['boolAgregarRm']) && $arrayParametros['boolAgregarRm'])
            {
                //Obtener la informacion de producto caracteristica para poder guardar la ROUTE_MAP_PREFIX
                $objCaracteristicaRouteMap = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy(array('descripcionCaracteristica' => 'ROUTE_MAP_PREFIX',
                    'estado' => 'Activo')
                );

                $this->utilService->validarVariable($objCaracteristicaRouteMap, 'Caracteristica relacionado a la Route Map');

                $objProdCaracteristicaRouteMap = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                        ->findOneBy(array('caracteristicaId' => $objCaracteristicaRouteMap->getId(),
                    'productoId' => $objServicio->getProductoId()->getId(),
                    'estado' => 'Activo')
                );

                $this->utilService->validarVariable($objProdCaracteristicaRouteMap, 'Producto Caracteristica relacionado a la Route Map');

                if(isset($arrayParametros['arrayPrefixActualizar']) && !empty($arrayParametros['arrayPrefixActualizar']))
                {
                    foreach($arrayParametros['arrayPrefixActualizar']['prefixAgregar'] as $strPrefix)
                    {
                        $objServicioProductoCaracteristica = new InfoServicioProdCaract();
                        $objServicioProductoCaracteristica->setServicioId($objServicio->getId());
                        $objServicioProductoCaracteristica->setProductoCaracterisiticaId($objProdCaracteristicaRouteMap->getId());
                        $objServicioProductoCaracteristica->setValor($strPrefix);
                        $objServicioProductoCaracteristica->setEstado("Activo");
                        $objServicioProductoCaracteristica->setUsrCreacion($arrayParametros['strUsrCreacion']);
                        $objServicioProductoCaracteristica->setFeCreacion(new \DateTime('now'));
                        $objServicioProductoCaracteristica->setRefServicioProdCaractId($arrayParametros['objServicioProdCaractRouteMap']->getId());
                        $this->emComercial->persist($objServicioProductoCaracteristica);
                        $this->emComercial->flush();

                        $arrayPrefix     = explode("|",$strPrefix);
                        $strPrefixSubred = $arrayPrefix[0].$arrayPrefix[1];
                        // Se obtiene los datos de la subred
                        $objSubred = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                             ->findOneBy(array("subred" => $strPrefixSubred,
                                                                               "estado" => "Ocupado"));

                        if (is_object($objSubred))
                        {
                            $objRutaElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                                                       ->findOneBy( array( "servicioId"    => $objServicio,
                                                                                           "subredId"      => $objSubred,
                                                                                           "estado"        => "Activo" ));
                            if(!is_object($objRutaElemento))
                            {
                                $objRutaElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                                                           ->findOneBy( array( "servicioId"    => $objServicio,
                                                                                               "redLan"        => $arrayPrefix[0],
                                                                                               "estado"        => "Activo" ));
                            }
                        }
                        else//Rutas Estaticas
                        {
                            $objRutaElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                                                       ->findOneBy( array( "servicioId"    => $objServicio,
                                                                                           "redLan"        => $arrayPrefix[0],
                                                                                           "estado"        => "Activo" ));
                        }

                        if(is_object($objRutaElemento))
                        {
                            $objRutaElemento->setTipo('Ruta Dinámica');
                            $this->emInfraestructura->persist($objRutaElemento);
                            $this->emInfraestructura->flush();

                            $arrayParametrosMetodo = array(
                                                            'strIdRuta'     => $objRutaElemento->getId(),
                                                            'strIdElemento' => $objServicioTecnico->getElementoId(),
                                                            'strIdServicio' => $objServicio->getId(),
                                                            'strIdProducto' => $objServicio->getProductoId(),
                                                            'strVrf'        => $arrayParametros['strVrf'],
                                                            'strUserClient' => $arrayParametros['strUsrCreacion'],
                                                            'strIpClient'   => '127.0.0.1',
                                                            'strProceso'    => 'bgp'
                                                          );
                            $arrayRespuestaEjecucion = $this->eliminarRutaEnEquipos($arrayParametrosMetodo);
                        }
                    }
                }

                //Eliminar prefix logicamente
                if(isset($arrayParametros['arrayPrefixActualizar']) && !empty($arrayParametros['arrayPrefixActualizar']))
                {
                    foreach($arrayParametros['arrayPrefixActualizar']['prefixEliminar'] as $arrayPrefix)
                    {
                        $intIdPrefix = $arrayPrefix['id'];

                        $objServProdCaractRm = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->find($intIdPrefix);

                        if(is_object($objServProdCaractRm))
                        {
                            $objServProdCaractRm->setEstado('Eliminado');
                            $this->emComercial->persist($objServProdCaractRm);
                            $this->emComercial->flush();
                        }

                        $arrayParametrosMetodo                   = array();
                        $arrayParametrosMetodo['prefix']         = $arrayPrefix['prefix'];
                        $arrayParametrosMetodo['objServicio']    = $objServicio;
                        $arrayParametrosMetodo['strVrf']         = $arrayParametros['strVrf'];
                        $arrayParametrosMetodo['strUsrCreacion'] = $arrayParametros['strUsrCreacion'];
                        $arrayParametrosMetodo['strIpCreacion']  = $arrayParametros['strIpCreacion'];
                        $arrayParametrosMetodo['intIdElemento']  = $objServicioTecnico->getElementoId();
                        $arrayRespuestaEjecucion                 = $this->reversarRutasDinamicas($arrayParametrosMetodo);
                    }
                }
            }
            else
            {
                //Eliminar prefix logicamente
                if(isset($arrayParametros['arrayPrefixActualizar']) && !empty($arrayParametros['arrayPrefixActualizar']))
                {
                    foreach($arrayParametros['arrayPrefixActualizar']['prefixEliminar'] as $arrayPrefix)
                    {
                        $intIdPrefix = $arrayPrefix['id'];

                        $objServProdCaractRm = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')->find($intIdPrefix);

                        if(is_object($objServProdCaractRm))
                        {
                            $objServProdCaractRm->setEstado('Eliminado');
                            $this->emComercial->persist($objServProdCaractRm);
                            $this->emComercial->flush();
                        }

                        $arrayParametrosMetodo                   = array();
                        $arrayParametrosMetodo['prefix']         = $arrayPrefix['prefix'];
                        $arrayParametrosMetodo['objServicio']    = $objServicio;
                        $arrayParametrosMetodo['strVrf']         = $arrayParametros['strVrf'];
                        $arrayParametrosMetodo['strUsrCreacion'] = $arrayParametros['strUsrCreacion'];
                        $arrayParametrosMetodo['strIpCreacion']  = $arrayParametros['strIpCreacion'];
                        $arrayParametrosMetodo['intIdElemento']  = $objServicioTecnico->getElementoId();
                        $arrayRespuestaEjecucion                 = $this->reversarRutasDinamicas($arrayParametrosMetodo);
                    }
                }
            }

            if(!empty($arrayRespuestaEjecucion))
            {
                $strStatus  = isset($arrayRespuestaEjecucion['status'])?$arrayRespuestaEjecucion['status']:'OK';
                $strMensaje = isset($arrayRespuestaEjecucion['mensaje'])?$arrayRespuestaEjecucion['mensaje']:'OK';
            }
            else
            {
                $strStatus  = 'OK';
                $strMensaje = 'OK';
            }
        }
        catch(\Exception $ex)
        {
            $this->utilService->insertError('Telcos+',
                                            'crearEliminarRouteMapPrefix',
                                            $ex->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']
                                           );
            $strStatus  = 'ERROR';
            $strMensaje = 'Error al guardar información de prefix ligada a la Route Map';
        }

        $arrayResultado = array('strStatus' => $strStatus, 'strMensaje' => $strMensaje);
        return $arrayResultado;
    }

    /**
     * Metodo encargado de realizar la reversa de las rutas dinamicas configuradas en la prefix al momento de ser eliminadas del sesion BGP
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 04-07-2018
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 16-07-2018     Se agrega programación para al momento de realizar la configuración en la routemap de rutas estáticas que
     *                             tengan subredes del pool del telcos, estas se verifiquen que efectivamente sean rutas Estáticas
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     *
     * @param   Array $arrayParametros
     * @return  Array [ status, mensaje ]
     */
    private function reversarRutasDinamicas($arrayParametros)
    {
        $objServicio     = $arrayParametros['objServicio'];
        $objProducto     = $objServicio->getProductoId();
        $arrayPrefixEl   = explode("|",$arrayParametros['prefix']);
        $strPrefixSubred = $arrayPrefixEl[0].$arrayPrefixEl[1];
        $arrayParametrosWs = array();

        $objElementoSw   = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")->find($arrayParametros['intIdElemento']);

        if(!is_object($objElementoSw))
        {
            return array('status' => 'ERROR', 'mensaje' => 'No existe información de Switch ligado al Servicio');
        }

        $arrayParametrosWs["intIdElemento"] = $objElementoSw->getId();
        $arrayParametrosWs["intIdServicio"] = $objServicio->getId();

        $objElementoPe   = $this->getPeBySwitch($arrayParametrosWs);

        if(!is_object($objElementoPe))
        {
            return array('status' => 'ERROR', 'mensaje' => 'No existe información de Pe ligado al Servicio');
        }

        // Se obtiene los datos de la subred en caso de ser ruta automatica
        $objSubred = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                             ->findOneBy(array("subred" => $strPrefixSubred,
                                                               "estado" => "Ocupado"));

        if (is_object($objSubred))
        {
            $strTipoRuta     = 'Ruta Automática';
            $objRutaElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                                       ->findOneBy( array( "servicioId"    => $objServicio,
                                                                           "subredId"      => $objSubred,
                                                                           "estado"        => "Activo" ));
            //Si la subred existe dentro del pool del sistema
            //se verificará que la misma se encuentre en una ruta estática
            if(!is_object($objRutaElemento))
            {
                $strTipoRuta     = 'Ruta Estática';
                $objRutaElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                                           ->findOneBy( array( "servicioId"    => $objServicio,
                                                                               "redLan"        => $arrayPrefixEl[0],
                                                                               "estado"        => "Activo" ));
            }
        }
        else//Rutas Estaticas
        {
            $strTipoRuta     = 'Ruta Estática';
            $objRutaElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoRutaElemento')
                                                       ->findOneBy( array( "servicioId"    => $objServicio,
                                                                           "redLan"        => $arrayPrefixEl[0],
                                                                           "estado"        => "Activo" ));
        }

        if(is_object($objRutaElemento))
        {
            //Se devuelve al tipo de ruta
            $objRutaElemento->setTipo($strTipoRuta);
            $this->emInfraestructura->persist($objRutaElemento);
            $this->emInfraestructura->flush();

            //Se configura la ruta como estuvo inicialmente
            $arrayPeticiones                    = array();
            $arrayPeticiones['url']             = 'enrutamientoEstaticoPe';
            $arrayPeticiones['accion']          = 'agregar';
            $arrayPeticiones['clase_servicio']  = $objProducto->getNombreTecnico();
            $arrayPeticiones['vrf']             = $arrayParametros['strVrf'];
            $arrayPeticiones['pe']              = $objElementoPe->getNombreElemento();
            $arrayPeticiones['sw']              = $objElementoSw->getNombreElemento();
            $arrayPeticiones['name_route']      = $objRutaElemento->getNombre();
            if($objRutaElemento->getSubredId())
            {
                $arrayPeticiones['net_lan']     = $objRutaElemento->getSubredId()->getSubred();
                $arrayPeticiones['mask_lan']    = $objRutaElemento->getSubredId()->getMascara();
            }
            else
            {
                $arrayPeticiones['net_lan']     = $objRutaElemento->getRedLan();
                $arrayPeticiones['mask_lan']    = $objRutaElemento->getMascaraRedLan();
            }
            $arrayPeticiones['ip_destino']      = $objRutaElemento->getIpId()->getIp();
            $arrayPeticiones['distance_admin']  = $objRutaElemento->getDistanciaAdmin();
            $arrayPeticiones['option']          = 'E';
            $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
            $arrayPeticiones['login_aux']       = $objServicio->getLoginAux();
            $arrayPeticiones['user_name']       = $arrayParametros['strUsrCreacion'];
            $arrayPeticiones['user_ip']         = $arrayParametros['strIpCreacion'];
            $arrayPeticiones['idServicio']      = $objServicio->getId();
            $arrayPeticiones['idProducto']      = $objProducto->getId();

            //Ejecucion del metodo via WS para realizar la configuracion del SW
            $arrayRespuestaNw = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

            return $arrayRespuestaNw;
        }
    }

    /**
     *
     * Metodo encargado de obtener los arreglos con los prefix a ser eliminados o los prefix a ser agregados
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 10-01-2017
     *
     * @param  Array $arrayParametros       [
     *                                         intIdServicio     Servicio en gestion
     *                                         strRouteMap       Nombre de la RouteMap
     *                                         jsonPrefixList    Informacion de los prefix enviados por pantalla
     *                                      ]
     * @return Array $arrayPrefixActualizar [
     *                                         prefixEliminar    Prefix a eliminar de la routemap
     *                                         prefixAgregar     Prefix a ser agregados a la routemap
     *                                      ]
     */
    public function obtenerPrefixActualizar($arrayParametros)
    {
        $arrayPrefixActualizar = array();

        //Se onbtenen los prefix existentes ligados a una routeMap existente
        $arrayServicioProdCaract = $this->getArrayPrefixRouteMapExistente($arrayParametros);

        $arrayPrefixEliminar = array();
        $arrayPrefixAgregar = array();

        $objInfoPrefix = json_decode($arrayParametros['jsonPrefixList']);

        if(is_object($objInfoPrefix))
        {
            //Se genera array con la informacion de prefix nuevos a ser agregados
            foreach($objInfoPrefix->data as $strPrefixInfo)
            {
                $arrayPrefix = json_decode($strPrefixInfo);

                if($arrayPrefix->idPrefix == '')
                {
                    $strPrefixInfo = $arrayPrefix->prefixIp . '|' .
                            $arrayPrefix->prefixMask . '|' .
                            $arrayPrefix->tipo . '|' .
                            $arrayPrefix->valor . '|' .
                            $arrayPrefix->seq;

                    $arrayPrefixAgregar[] = $strPrefixInfo;
                }
            }
        }

        if(!empty($arrayServicioProdCaract))
        {
            //Recorro todos los prefix almacenados para determinar cual fue eliminado por el usuario
            foreach($arrayServicioProdCaract as $objServProdPrefix)
            {
                $intIdPrefix = $objServProdPrefix->getId();

                $intContContenido = 0;

                foreach($objInfoPrefix->data as $strPrefixInfo)
                {
                    $arrayPrefix = json_decode($strPrefixInfo);

                    //Si el id prefix existente no se encuentra en la lista enviada desde pantalla, se eliminara del equipo
                    if($arrayPrefix->idPrefix == $intIdPrefix)
                    {
                        $intContContenido++;
                    }
                }

                if($intContContenido == 0)
                {
                    $arrayPrefix = explode('|', $objServProdPrefix->getValor());

                    $strPrefixInfo = $arrayPrefix[0] . '|' .
                            $arrayPrefix[1] . '|' .
                            $arrayPrefix[2] . '|' .
                            $arrayPrefix[3] . '|' .
                            $arrayPrefix[4];

                    $arrayPrefixEliminar[] = array('id' => $intIdPrefix,
                        'prefix' => $strPrefixInfo
                    );
                }
            }
        }

        $arrayPrefixActualizar['prefixEliminar'] = $arrayPrefixEliminar;
        $arrayPrefixActualizar['prefixAgregar'] = $arrayPrefixAgregar;

        return $arrayPrefixActualizar;
    }

    /**
     *
     * Metodo encargado de obtener la informacion de prefix existentes ligados a una routemap
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 10-01-2017
     *
     * @param  Array $arrayParametros [
     *                                    intIdServicio     Servicio en gestion
     *                                    strRouteMap       Nombre de la RouteMap
     *                                ]
     * @return Array $arrayServicioProdCaract [ Array de Object [ InfoServicioProdCaract ] ]
     */
    public function getArrayPrefixRouteMapExistente($arrayParametros)
    {
        $arrayServicioProdCaract = array();

        $objServicioProdCaractRouteMap = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId' => $arrayParametros['intIdServicio'],
            'valor' => $arrayParametros['strRouteMap'],
            'estado' => 'Activo')
        );
        if(is_object($objServicioProdCaractRouteMap))
        {
            $arrayServicioProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                    ->findBy(array('servicioId' => $arrayParametros['intIdServicio'],
                'refServicioProdCaractId' => $objServicioProdCaractRouteMap->getId(),
                'estado' => 'Activo'
            ));
        }

        return $arrayServicioProdCaract;
    }

    /**
     *
     * Metodo que devuelve los prefijos necesarios para enviar a configurar mediante la administracion BGP
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 23-02-2017
     *
     * @return Array $arrayPrefijos
     *                              [
     *                                  strRouteMap         prefijo definido para guardar/enviar nombre de la routemap
     *                                  strPrefix           prefijo definido para enviar el nombre de los prefix list
     *                                  strRedistribute     prefijo definido para enviar a configuracion de Redestribute
     *                              ]
     */
    public function getPrefijosCreacionRouteMap()
    {
        $arrayPrefijos = array();

        $arrayParametrosResultado = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                ->getOne('FORMATO_ENVIO_ROUTE_MAP', 'TECNICO', '', 'PREFIJOS', '', '', '', '', '', null, null
        );
        if(isset($arrayParametrosResultado))
        {
            $arrayPrefijos['strRouteMap'] = isset($arrayParametrosResultado['valor1']) ? $arrayParametrosResultado['valor1'] : '';

            $arrayPrefijos['strPrefix'] = isset($arrayParametrosResultado['valor2']) ? $arrayParametrosResultado['valor2'] : '';

            $arrayPrefijos['strRedistribute'] = isset($arrayParametrosResultado['valor3']) ? $arrayParametrosResultado['valor3'] : '';
        }

        return $arrayPrefijos;
    }

    /**
     * Metodo encargado de validar si un Punto es cancelado cuando se cancelen todos su servicios, se restringe que esto
     * no suceda cada que exista al menos un servicio en estado Rechazada y un Servicio en estado Activo caso contrario
     * se cancela el Servicio en cuestion
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 22-05-2017
     *
     * @param  Array $arrayParametros [objServicio   Referencia del Servicio]
     * @return boolean
     */
    public function validarCancelacionServicio($arrayParametros)
    {
        $objServicio = $arrayParametros['objServicio'];
        $boolSeCancela = true;

        if(is_object($objServicio))
        {
            $arrayServicios = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                    ->findBy(array("puntoId" => $objServicio->getPuntoId()));

            $intContActivos = 0;
            $intContRechazados = 0;

            foreach($arrayServicios as $objServicio)
            {
                if($objServicio->getEstado() == 'Activo')
                {
                    $intContActivos++;
                }
                else if($objServicio->getEstado() == 'Rechazada')
                {
                    $intContRechazados++;
                }
            }

            //Si existe un Servicio Activo y al menos un rechazado no se puede cancelar dado de que debe ser gestionado
            //todos los servicios rechazados por el comercial
            if($intContActivos == 1 && $intContRechazados > 0)
            {
                $boolSeCancela = false;
            }
        }
        else
        {
            throw new \Exception('No existe referencia al Servicio a Cancelar, por favor notificar a Sistemas');
        }

        return $boolSeCancela;
    }

    /**
     * Metodo encargado de devolver los Servicios Backups relacionados en su enlace principal relacionado
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 14-12-2016
     *
     * @param  Object $objServicioPrincipal         Servicio Principal
     * @return Array $arrayServiciosBackups         Array de Servicios Backups vinculados a un Servicio Principal
     */
    public function getServiciosBackupByServicioPrincipal($objServicioPrincipal)
    {
        $arrayServiciosBackups = array();

        if(is_object($objServicioPrincipal))
        {
            $arrayParametros = array();
            $arrayParametros['intIdServicioPrincipal'] = $objServicioPrincipal->getId();

            $arrayServiciosBackups = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                    ->getArrayServiciosBackupByServicioPrincipal($arrayParametros);
        }

        return $arrayServiciosBackups;
    }

    /**
     * Metodo encargado de devolver la vlan relacionada al servicio
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 14-12-2016
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.2 - Se agrega el producto L3MPLS SDWAN para obtener la vlan de servicio.
     * @since 05-08-2019
     *
     * @param  Object $objServicio  Servicio al obtener vlan
     * @return String strVlan Vlan del Servicio
     */
    public function obtenerVlanServicio($objServicio)
    {
        $strVlan = null;
        $objDetalleElementoVlan = null;

        if(is_object($objServicio))
        {
            $objSolCaracVlan = $this->getServicioProductoCaracteristica($objServicio, "VLAN", $objServicio->getProductoId());
            
            if($objSolCaracVlan)
            {
                
            if($objServicio->getProductoId()->getNombreTecnico() == "L3MPLS" || $objServicio->getProductoId()->getNombreTecnico() == "L3MPLS SDWAN")
            {
                $objPerEmpRolCarVlan = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                        ->find($objSolCaracVlan->getValor());
                if(is_object($objPerEmpRolCarVlan))
                {
                    $objDetalleElementoVlan = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                            ->find($objPerEmpRolCarVlan->getValor());
                }
            }
            else
            {
                $objDetalleElementoVlan = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                        ->find($objSolCaracVlan->getValor());
            }

            }

            if(is_object($objDetalleElementoVlan))
            {
                $strVlan = $objDetalleElementoVlan->getDetalleValor();
            }
        }

        return $strVlan;
    }

    /**
     * Metodo encargado de cortar el Servicio Backup una vez que el Servicio Principal es Cortado
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 14-12-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - Se valida que si no tiene Backups se verifique que el Array efectivamente venga vacio con ( empty )
     * @since 05-06-2017
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 24-05-2018
     * @version 1.2 - Se envia descripcion de acuerdo a la Ultima milla del servicio para identificacion de NW
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 01-06-2020 - Se agrega el id del servicio a la url 'configSW' del ws de networking para la validación del BW
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 14-07-2020 - Se agrega la capacidad del extremo en la ejecución del ws de networking del concentrador
     *
     * @param  Array $arrayParametros [
     *                                      objServicio         Servicio Principal
     *                                      intCapacidadUno     Capacidad Up a reconfigurar
     *                                      intCapacidadDos     Capacidad Down a reconfigurar
     *                                      strUsrCreacion      Usuario que lanza la accion
     *                                      strIpCreacion       Ip de donde es lanzada la accion
     *                                      objMotivo           Motivo por el cual se corta el servicio principal
     *                                      objAccion           Accion vinculada al motivo para registrar en el historial de corte
     *                                      strEstado           Estado del servicio segun proceso ( Activo o In-Corte )
     *                                      strAccion           Accion a ejecutar en web service de networking
     *                                      strObservacion      Observacion a imprimir en el historial del servicio backup
     *                                ]
     * @return Array $arrayRespuesta [ strStatus , strMensaje ]
     */
    public function cortarReconectarServicioBackup($arrayParametros)
    {
        $arrayRespuesta = array();

        $arrayServiciosBackup = $this->getServiciosBackupByServicioPrincipal($arrayParametros['objServicio']);

        if(isset($arrayServiciosBackup) && !empty($arrayServiciosBackup))
        {
            $arrayServiciosCortarReconectar = array();

            foreach($arrayServiciosBackup as $arrayServicios)
            {
                $objServicioBackup = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayServicios['id']);

                $this->utilService->validarVariable($objServicioBackup, 'Información del Servicio Backup');

                $strEstado = $objServicioBackup->getEstado();

                if($arrayParametros['strAccion'] == 'cortar')
                {
                    //Si existe al menos un servicio enpruebas no permite cortar al principal
                    if($strEstado == 'EnPruebas')
                    {
                        $arrayRespuesta = array('strStatus' => 'ERROR',
                            'strMensaje' => 'Servicio <b>PRINCIPAL</b> no puede ser cortado '
                            . 'si posee al menos un Servicio <b>BACKUP</b> en estado EnPruebas');
                        return $arrayRespuesta;
                    }
                    //Solo permite cortar Servicios Activos siempre y cuando no posea al menos uno Servicio EnPrueba
                    else if($strEstado == 'Activo')
                    {
                        $arrayServiciosCortarReconectar[] = $objServicioBackup;
                    }
                }
                else
                {
                    //Solo se reconectan Servicios In-Corte
                    if($strEstado == 'In-Corte')
                    {
                        $arrayServiciosCortarReconectar[] = $objServicioBackup;
                    }
                }
            }
            //Se recorren todos los Servicios backups en caso de existir
            foreach($arrayServiciosCortarReconectar as $objServicioBackup)
            {
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->findOneByServicioId($objServicioBackup->getId());

                $this->utilService->validarVariable($objServicioTecnico, 'Información Técnica de Servicio Backup a ' . $arrayParametros['strAccion']);

                $objInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                        ->find($objServicioTecnico->getInterfaceElementoId());
                $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                        ->find($objServicioTecnico->getElementoId());

                $this->utilService->validarVariable($objInterfaceElemento, 'Información del puerto del Switch del Servicio Backup a ' .
                        $arrayParametros['strAccion']);
                $this->utilService->validarVariable($objElemento, 'Información del Switch del Servicio Backup a ' . $arrayParametros['strAccion']);

                $strVlan = $this->obtenerVlanServicio($objServicioBackup);

                $arrayMac = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                        ->getMacCpePorServicioInterface($objServicioBackup->getId());
                $strMac = '';

                if(isset($arrayMac['mac']))
                {
                    $strMac = $arrayMac['mac'];
                }

                $arrayMacServicio[] = $strMac;
                $arrayMacVlan = array($strVlan => $arrayMacServicio);

                $objAdmiTipoMedio = $this->emInfraestructura->getRepository("schemaBundle:AdmiTipoMedio")
                                                            ->find($objServicioTecnico->getUltimaMillaId());

                if(is_object($objAdmiTipoMedio))
                {
                    $strUltimaMilla = $objAdmiTipoMedio->getNombreTipoMedio();
                }

                $strDescripcion = '';

                if($strUltimaMilla == 'Fibra Optica')
                {
                    $strDescripcion = '_fib';
                }
                if($strUltimaMilla == 'Radio')
                {
                    $strDescripcion = '_rad';
                }
                if($strUltimaMilla == 'UTP')
                {
                    $strDescripcion = '_utp';
                }

                //obtengo la capacidad del extremo
                $objServicioPrincipal = $arrayParametros['objServicio'];
                $objCapacidadExtUno = $this->getServicioProductoCaracteristica($objServicioPrincipal, "CAPACIDAD1",
                                                                               $objServicioPrincipal->getProductoId());
                $objCapacidadExtDos = $this->getServicioProductoCaracteristica($objServicioPrincipal, "CAPACIDAD2",
                                                                               $objServicioPrincipal->getProductoId());
                $intCapacidadExtUno = is_object($objCapacidadExtUno) ? $objCapacidadExtUno->getValor() : 0;
                $intCapacidadExtDos = is_object($objCapacidadExtDos) ? $objCapacidadExtDos->getValor() : 0;
                $intCapacidadTotalExtremo = $intCapacidadExtUno >= $intCapacidadExtDos ? $intCapacidadExtUno : $intCapacidadExtDos;

                //accion a ejecuta        
                $arrayPeticiones['url'] = 'configSW';
                $arrayPeticiones['accion'] = $arrayParametros['strAccion'];
                $arrayPeticiones['id_servicio'] = $objServicioBackup->getId();
                $arrayPeticiones['nombreMetodo'] = 'InfoServicioTecnicoService.cortarReconectarServicioBackup';
                $arrayPeticiones['loginAuxExtremo'] = $objServicioPrincipal->getLoginAux();
                $arrayPeticiones['bwAuxExtremo']    = $intCapacidadTotalExtremo;
                $arrayPeticiones['sw'] = $objElemento->getNombreElemento();
                $arrayPeticiones['macVlan'] = $arrayMacVlan;
                $arrayPeticiones['user_name'] = $arrayParametros['strUsrCreacion'];
                $arrayPeticiones['user_ip'] = $arrayParametros['strIpCreacion'];
                $arrayPeticiones['bw_up'] = $arrayParametros['intCapacidadUno'];
                $arrayPeticiones['bw_down'] = $arrayParametros['intCapacidadDos'];
                $arrayPeticiones['servicio'] = $objServicioBackup->getProductoId()->getNombreTecnico();
                $arrayPeticiones['login_aux'] = $objServicioBackup->getLoginAux();
                $arrayPeticiones['descripcion'] = 'cce_' . $objServicioBackup->getLoginAux() . $strDescripcion;
                $arrayPeticiones['pto'] = $objInterfaceElemento->getNombreInterfaceElemento();

                //Ejecucion del metodo via WS para realizar la configuracion del SW
                $arrayRespuesta = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

                if($arrayRespuesta['status'] == 'OK')
                {
                    //historial del servicio
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicioBackup);
                    $objServicioHistorial->setObservacion($arrayParametros['strObservacion']);
                    $objServicioHistorial->setEstado($arrayParametros['strEstado']);
                    $objServicioHistorial->setUsrCreacion($arrayParametros['strUsrCreacion']);
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($arrayParametros['strIpCreacion']);
                    $objServicioHistorial->setAccion($arrayParametros['objAccion']->getNombreAccion());

                    if($arrayParametros['strAccion'] == 'cortar')
                    {
                        $objServicioHistorial->setMotivoId($arrayParametros['objMotivo']->getId());
                    }

                    $this->emComercial->persist($objServicioHistorial);
                    $this->emComercial->flush();

                    $objServicioBackup->setEstado($arrayParametros['strEstado']);
                    $this->emComercial->persist($objServicioBackup);
                    $this->emComercial->flush();

                    $arrayRespuesta = array('strStatus' => 'OK', 'strMensaje' => 'OK');
                }
                else
                {
                    $arrayRespuesta = array('strStatus' => 'ERROR', 'strMensaje' => $arrayRespuesta['mensaje']);
                }
            }
        }
        else//No tiene enlazado un backup - continua el proceso
        {
            $arrayRespuesta = array('strStatus' => 'OK', 'strMensaje' => 'OK');
        }

        return $arrayRespuesta;
    }

    /**
     * Metodo encargado de obtener las capacidades para un enlace "Concentrador" Backup a partir de su enlace PRINCIPAL relacionado
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 13-12-2016
     *
     * @param Object $objServicioConcentrador  Servicio Concentrador para obtener las capacidades de su Principal
     * @return Array $arrayCapacidades [
     *                                    capacidadUno         Capacidad Up del Concentrador Backup
     *                                    capacidadDos         Capacidad Down del Concentrador Backup
     *                                 ]
     */
    public function getArrayCapacidadesConcentradorBackup($objServicioConcentrador)
    {
        $arrayCapacidades = array();

        $objServicioProductoCaract = $this->getServicioProductoCaracteristica($objServicioConcentrador, "ES_BACKUP", $objServicioConcentrador->getProductoId());
        if(is_object($objServicioProductoCaract))
        {
            $intIdServicioPrincipal = $objServicioProductoCaract->getValor(); //Id del Servicio Concentrador Principal

            if(is_numeric($intIdServicioPrincipal))
            {
                $objServicioPrincipalConc = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioPrincipal);

                $objServProdCaractCap1Pr = $this->getServicioProductoCaracteristica($objServicioPrincipalConc, 'CAPACIDAD1', $objServicioConcentrador->getProductoId());
                $objServProdCaractCap2Pr = $this->getServicioProductoCaracteristica($objServicioPrincipalConc, 'CAPACIDAD2', $objServicioConcentrador->getProductoId());
                //Capacidad 1
                if(is_object($objServProdCaractCap1Pr))
                {
                    $arrayCapacidades['intCapacidadUno'] = $objServProdCaractCap1Pr->getValor();
                }
                //Capacidad 2
                if(is_object($objServProdCaractCap2Pr))
                {
                    $arrayCapacidades['intCapacidadDos'] = $objServProdCaractCap2Pr->getValor();
                }
            }
        }

        return $arrayCapacidades;
    }

    /**
     * Metodo encargado de validar para mostrar mensaje si los servicios backup pueden realizar cambio de plan o no
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 04-04-2017
     *
     * @param Array $arrayParametros [
     *                                  intIdServicio          Servicio Principal
     *                                  intCapacidadUnoNueva   Capacidad a cambiar uno
     *                                  intCapacidadDosNueva   Capacidad a cambiar dos
     *                                  floatUmbral            porcentaje de umbral de calculo de limite de capacidad por equipo
     *                               ]
     * @return Array $arrayRespuesta [
     *                                  strMensajeIpccl2      Mensaje de validaciones de L2
     *                                  strMensajeRadio       Mensaje de validaciones de Radio
     *                               ]
     */
    public function getValidacionBackupPorCambioPlan($arrayParametros)
    {
        $strMensajeRadio = "";
        $strMensajeIpccl2 = "";

        $arrayRespuesta = array();
        $arrayServiciosBckRadio = array();
        $arrayServiciosBck = array();

        $strMensajeFinalIpccl2 = "";

        $objServicioPrincipal = $this->emComercial->getRepository("schemaBundle:InfoServicio")->find($arrayParametros['intIdServicio']);

        if(is_object($objServicioPrincipal))
        {
            $arrayServiciosBackup = $this->getServiciosBackupByServicioPrincipal($objServicioPrincipal);

            if(isset($arrayServiciosBackup))
            {
                foreach($arrayServiciosBackup as $arrayServicios)
                {
                    $objServicioBackup = $this->emComercial->getRepository("schemaBundle:InfoServicio")->find($arrayServicios['id']);
                    $objServicioTecnico = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                            ->findOneByServicioId($arrayServicios['id']);

                    $this->utilService->validarVariable($objServicioBackup, 'Información del Servicio Backup');
                    $this->utilService->validarVariable($objServicioTecnico, 'Información del Servicio Tecnico del Enlace Backup');

                    if($objServicioBackup->getEstado() == 'Activo' || $objServicioBackup->getEstado() == 'EnPruebas')
                    {
                        $strLoginAux = $objServicioBackup->getLoginAux() ? $objServicioBackup->getLoginAux() : '';

                        $arrayParametrosCapacidades = array();
                        $arrayParametrosCapacidades['intIdServicio'] = $arrayServicios['id'];
                        $arrayParametrosCapacidades['strTipoElemento'] = 'CPE';

                        $arrayCapacidadesModelo = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                                ->getArrayCapacidadesMaximasPorModeloElemento($arrayParametrosCapacidades);
                        $strUltimaMilla = '';

                        if($objServicioTecnico->getUltimaMillaId())
                        {
                            $objUltimaMilla = $this->emComercial->getRepository("schemaBundle:AdmiTipoMedio")
                                    ->find($objServicioTecnico->getUltimaMillaId());

                            if(is_object($objUltimaMilla))
                            {
                                $strUltimaMilla = $objUltimaMilla->getNombreTipoMedio();
                            }
                        }

                        $arrayParametrosVerificacion = array();
                        $arrayParametrosVerificacion['objServicioBackup'] = $objServicioBackup;
                        $arrayParametrosVerificacion['intCapacidadUnoNueva'] = $arrayParametros['intCapacidadUnoNueva'];
                        $arrayParametrosVerificacion['intCapacidadDosNueva'] = $arrayParametros['intCapacidadDosNueva'];
                        $arrayParametrosVerificacion['floatUmbral'] = $arrayParametros['floatUmbral'];

                        //Se verifica si no existe ningun problema para realizar cambio de plan para servicios Radio
                        if($strUltimaMilla == 'Radio')
                        {
                            $arrayParametrosVerificacion['strTipoValidacion'] = 'RAD';
                            $arrayRespuesta = $this->verificarCapacidadesServiciosCambioPlan($arrayParametrosVerificacion);

                            if(isset($arrayRespuesta['boolAplicaRadio']) && !$arrayRespuesta['boolAplicaRadio'])
                            {
                                $arrayServiciosBckRadio[] = $strLoginAux;
                            }
                        }

                        $arrayParametrosVerificacion['strTipoValidacion'] = 'FO';
                        $arrayRespuesta = $this->verificarCapacidadesServiciosCambioPlan($arrayParametrosVerificacion);

                        //Si las capacidades del CPE son sobrepasadas se informa al Usuario
                        if(isset($arrayRespuesta['boolAplicaIpccl2']) && !$arrayRespuesta['boolAplicaIpccl2'])
                        {
                            $strMensajeFinalIpccl2 = "<br>El aumento de capacidad debe ser autorizado por <b>IPCCL2</b>, "
                                    . "superó el umbral permitido.";
                            $arrayServiciosBck[] = $strLoginAux;
                        }

                        //Si el CPE no tiene marcada el limite de capacidades esperadas se informa al Usuario
                        if(isset($arrayRespuesta['boolAplicaCapacidadCpe']) && !$arrayRespuesta['boolAplicaCapacidadCpe'])
                        {
                            $strMensajeFinalIpccl2 = "<br>La capacidad debe ser autorizado por <b>IPCCL2</b>, "
                                    . "No se encontraron valores en los Límites de Capacidad para este CPE.";
                            $arrayServiciosBck[] = $strLoginAux;
                        }
                    }
                }//Bucle para recorrer los servicios backups en caso de existir
            }
        }

        if(count($arrayServiciosBckRadio) > 0)
        {
            $strMensajeRadio = "Servicios <b>BACKUPS : </b>";

            foreach($arrayServiciosBckRadio as $strLoginAux)
            {
                $strMensajeRadio .= "<br><label style='font-weight: bold; font-size: 17.5px;'>&#10551;</label><b>" . $strLoginAux . "</b>";
            }

            $strMensajeRadio .= "<br>El aumento de capacidad debe ser autorizado por <b>Radio</b>.";
        }

        if(count($arrayServiciosBck) > 0)
        {
            $strMensajeIpccl2 = "Servicios <b>BACKUPS : </b>";

            foreach($arrayServiciosBck as $strLoginAux)
            {
                $strMensajeIpccl2 .= "<br><label style='font-weight: bold; font-size: 17.5px;'>&#10551;</label><b>" . $strLoginAux . "</b>";
            }

            $strMensajeIpccl2 .= $strMensajeFinalIpccl2;
        }

        $arrayRespuesta['strMensajeIpccl2'] = $strMensajeIpccl2;
        $arrayRespuesta['strMensajeRadio'] = $strMensajeRadio;

        return $arrayRespuesta;
    }

    /**
     * Metodo encargado de crear la solicitud de cambio de plan masivo para los servicios BACKUPS
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 04-04-2017
     *
     * @param Array $arrayParametros
     *                              [
     *                                  objSolicitudPadre         Solicitud Padre de cambio de plan
     *                                  objSolicitudPrincipal     Solicitud con Servicio PRINCIPAL
     *                                  intCapacidadNueva1        Capacidad Uno Nueva
     *                                  intCapacidadNueva2        Capacidad Dos Nueva
     *                                  floatUmbral               porcentaje de umbral de calculo de limite de capacidad por equipo
     *                                  intIdMotivo               Motivo de cambio de plan
     *                                  objTipoSolicitud          Tipo de Solicitud CAMBIO PLAN
     *                                  strUsrCreacion            Usuario creacion de proceso
     *                                  objFeFinPlan              Fe de planificacion de proceso
     *                              ]
     * @return Array $arrayRespuesta [ strEstadoIpccl2    Estado de procesos de Ipccl2
     *                                 strEstadoRadio     Estado de procesos de Radio
     *                                 strLoginesAux      Logines Aux de lo servicios backups que necesitan aprobacion
     *                               ]
     */
    public function crearSolicitudCambioPlanBackups($arrayParametros)
    {
        $objSolicitudPrincipal = $arrayParametros['objSolicitudPrincipal'];
        $objServicioPrincipal = $objSolicitudPrincipal->getServicioId();

        $strEstadoIpccL2 = "";
        $strEstadoRadio = "";
        $strLoginAux = "";

        $arrayRespuesta = array();
        $arrayRespuesta['strEstadoIpccl2'] = "";
        $arrayRespuesta['strEstadoRadio'] = "";
        $arrayRespuesta['strLoginesAux'] = "";

        if(is_object($objServicioPrincipal))
        {
            $arrayServiciosBackup = $this->getServiciosBackupByServicioPrincipal($objServicioPrincipal);

            if(isset($arrayServiciosBackup))
            {
                foreach($arrayServiciosBackup as $arrayServicios)
                {
                    $boolEstadoRadioAprobado = true;
                    $boolEstadoIpccl2Aprobado = true;

                    $objServicioBackup = $this->emComercial->getRepository("schemaBundle:InfoServicio")->find($arrayServicios['id']);
                    $objServicioTecnico = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                            ->findOneByServicioId($arrayServicios['id']);

                    $this->utilService->validarVariable($objServicioBackup, 'Información del Servicio Backup');
                    $this->utilService->validarVariable($objServicioTecnico, 'Información del Servicio Tecnico del Enlace Backup');

                    if($objServicioBackup->getEstado() == 'Activo' || $objServicioBackup->getEstado() == 'EnPruebas')
                    {
                        $strUltimaMilla = '';

                        if($objServicioTecnico->getUltimaMillaId())
                        {
                            $objUltimaMilla = $this->emComercial->getRepository("schemaBundle:AdmiTipoMedio")
                                    ->find($objServicioTecnico->getUltimaMillaId());

                            if(is_object($objUltimaMilla))
                            {
                                $strUltimaMilla = $objUltimaMilla->getNombreTipoMedio();
                            }
                        }

                        $arrayParametrosVerificacion = array();
                        $arrayParametrosVerificacion['objServicioBackup'] = $objServicioBackup;
                        $arrayParametrosVerificacion['intCapacidadUnoNueva'] = $arrayParametros['intCapacidadNueva1'];
                        $arrayParametrosVerificacion['intCapacidadDosNueva'] = $arrayParametros['intCapacidadNueva2'];
                        $arrayParametrosVerificacion['floatUmbral'] = $arrayParametros['floatUmbral'];

                        //Se verifica si no existe ningun problema para realizar cambio de plan para servicios Radio
                        if($strUltimaMilla == 'Radio')
                        {
                            $arrayParametrosVerificacion['strTipoValidacion'] = 'RAD';
                            $arrayRespuesta = $this->verificarCapacidadesServiciosCambioPlan($arrayParametrosVerificacion);

                            if(isset($arrayRespuesta['boolAplicaRadio']) && !$arrayRespuesta['boolAplicaRadio'])
                            {
                                $boolEstadoRadioAprobado = false;
                                $strEstadoRadio = 'Pendiente';
                                $strLoginAux .= "<br><label style='font-weight: bold; font-size: 17.5px;'>&#10551;</label>" .
                                        $objServicioBackup->getLoginAux();
                            }
                        }

                        $arrayParametrosVerificacion['strTipoValidacion'] = 'FO';
                        $arrayRespuesta = $this->verificarCapacidadesServiciosCambioPlan($arrayParametrosVerificacion);

                        if(isset($arrayRespuesta['boolAplicaIpccl2']) && !$arrayRespuesta['boolAplicaIpccl2'])
                        {
                            $boolEstadoIpccl2Aprobado = false;
                            $strEstadoIpccL2 = 'Pendiente';
                            $strLoginAux .= "<br><label style='font-weight: bold; font-size: 17.5px;'>&#10551;</label>" .
                                    $objServicioBackup->getLoginAux();
                        }

                        //Crear Solicitud de Cambio de Plan
                        $objInfoDetalleSolicitudDet = new InfoDetalleSolicitud();
                        $objInfoDetalleSolicitudDet->setServicioId($objServicioBackup);
                        $objInfoDetalleSolicitudDet->setTipoSolicitudId($arrayParametros['objTipoSolicitud']);
                        if(!empty($arrayParametros['intIdMotivo']))
                        {
                            $objInfoDetalleSolicitudDet->setMotivoId($arrayParametros['intIdMotivo']);
                        }
                        $objInfoDetalleSolicitudDet->setObservacion($arrayParametros['strDescripcion']);

                        if($boolEstadoIpccl2Aprobado && $boolEstadoRadioAprobado)
                        {
                            $objInfoDetalleSolicitudDet->setEstado('Aprobada');
                        }
                        else
                        {
                            $objInfoDetalleSolicitudDet->setEstado('Pendiente');
                        }

                        $objInfoDetalleSolicitudDet->setFeCreacion(new \DateTime('now'));
                        $objInfoDetalleSolicitudDet->setUsrCreacion($arrayParametros['strUsrCreacion']);
                        $this->emComercial->persist($objInfoDetalleSolicitudDet);
                        $this->emComercial->flush();

                        /* Historial de la Cabecera de la Solicitud */
                        $objInfoDetalleSolHistDet = new InfoDetalleSolHist();
                        $objInfoDetalleSolHistDet->setDetalleSolicitudId($objInfoDetalleSolicitudDet);
                        $objInfoDetalleSolHistDet->setEstado($objInfoDetalleSolicitudDet->getEstado());
                        $objInfoDetalleSolHistDet->setObservacion($objInfoDetalleSolicitudDet->getObservacion());
                        $objInfoDetalleSolHistDet->setMotivoId($objInfoDetalleSolicitudDet->getMotivoId());
                        if($arrayParametros['objFeFinPlan'] != null)
                        {
                            $objInfoDetalleSolHistDet->setFeFinPlan($arrayParametros['objFeFinPlan']);
                        }
                        $objInfoDetalleSolHistDet->setFeCreacion(new \DateTime('now'));
                        $objInfoDetalleSolHistDet->setUsrCreacion($objInfoDetalleSolicitudDet->getUsrCreacion());
                        $this->emComercial->persist($objInfoDetalleSolHistDet);
                        $this->emComercial->flush();

                        if($boolEstadoIpccl2Aprobado && $boolEstadoRadioAprobado)
                        {
                            $objInfoDetalleSolHistDet = new InfoDetalleSolHist();
                            $objInfoDetalleSolHistDet->setDetalleSolicitudId($objInfoDetalleSolicitudDet);
                            $objInfoDetalleSolHistDet->setEstado($objInfoDetalleSolicitudDet->getEstado());
                            $objInfoDetalleSolHistDet->setObservacion("Detalle aprobado Automaticamente al no tener nigun nivel de Aprobación.");
                            $objInfoDetalleSolHistDet->setMotivoId($objInfoDetalleSolicitudDet->getMotivoId());
                            $objInfoDetalleSolHistDet->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleSolHistDet->setUsrCreacion($objInfoDetalleSolicitudDet->getUsrCreacion());
                            $this->emComercial->persist($objInfoDetalleSolHistDet);
                            $this->emComercial->flush();
                        }

                        $arrayDetalleSolicitudCaract = array();
                        $arrayDetalleSolicitudCaract["CAPACIDAD1"] = $arrayParametros['intCapacidadNueva1'];
                        $arrayDetalleSolicitudCaract["CAPACIDAD2"] = $arrayParametros['intCapacidadNueva2'];
                        $arrayDetalleSolicitudCaract["Referencia Solicitud"] = $arrayParametros['objSolicitudPadre']->getId();
                        $arrayDetalleSolicitudCaract["ES_BACKUP"] = $objSolicitudPrincipal->getId();
                        $arrayDetalleSolicitudCaract["Estado Radio"] = $boolEstadoRadioAprobado ? 'N/A' : 'Pendiente';
                        $arrayDetalleSolicitudCaract["Estado IPCCL2"] = $boolEstadoIpccl2Aprobado ? 'N/A' : 'Pendiente';
                        $arrayDetalleSolicitudCaract["Estado Cambio Precio"] = 'N/A';

                        foreach($arrayDetalleSolicitudCaract as $strClave => $strValor)
                        {
                            $objCaracteristica = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                    ->findOneBy(array("descripcionCaracteristica" => $strClave));

                            if(is_object($objCaracteristica))
                            {
                                $objInfoDetalleSolCaract = new InfoDetalleSolCaract();
                                $objInfoDetalleSolCaract->setDetalleSolicitudId($objInfoDetalleSolicitudDet);
                                $objInfoDetalleSolCaract->setCaracteristicaId($objCaracteristica);
                                $objInfoDetalleSolCaract->setValor($strValor);
                                $objInfoDetalleSolCaract->setEstado('Pendiente');
                                $objInfoDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                                $objInfoDetalleSolCaract->setUsrCreacion($objInfoDetalleSolicitudDet->getUsrCreacion());
                                $this->emComercial->persist($objInfoDetalleSolCaract);
                                $this->emComercial->flush();
                            }
                        }
                    }
                }
            }
        }

        $arrayRespuesta['strEstadoIpccl2'] = $strEstadoIpccL2;
        $arrayRespuesta['strEstadoRadio'] = $strEstadoRadio;
        $arrayRespuesta['strLoginesAux'] = $strLoginAux;

        return $arrayRespuesta;
    }

    /**
     *
     * Metodo encargado de realizar la creacion de procesos masivos para servicios backups a partir de su PRINCIPAL
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 26-04-2017
     *
     * @param Array $arrayParametros [
     *                                  objSolicitudPrincipal       Solicitud de Servicio Principal
     *                                  strUsrCreacion              Usuario que crear el requerimiento
     *                               ]
     * @return Array $arrayRespuesta [ $objDetalleSolicitudBackup   Solicitudes para Servicio Backups creadas ]
     */
    public function crearProcesoMasivoCambioPlanBackups($arrayParametros)
    {
        $arrayRespuesta = array();

        $objDetalleSolicitudPrincipal = $arrayParametros['objSolicitudPrincipal'];
        $objServicioPrincipal = $objDetalleSolicitudPrincipal->getServicioId();

        //Se buscan los servicios backups en caso de que existan
        $arrayServiciosBackup = $this->getServiciosBackupByServicioPrincipal($objServicioPrincipal);

        if(isset($arrayServiciosBackup))
        {
            foreach($arrayServiciosBackup as $arrayServicios)
            {
                $objDetalleSolicitudBackup = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                        ->findOneBy(array('servicioId' => $arrayServicios['id'],
                    'tipoSolicitudId' => $objDetalleSolicitudPrincipal->getTipoSolicitudId()->getId(),
                    'estado' => 'Aprobada'
                ));
                if(is_object($objDetalleSolicitudBackup))
                {
                    $objDetalleSolicitudBackup->setEstado('EnProceso');
                    $this->emComercial->persist($objDetalleSolicitudBackup);
                    $this->emComercial->flush();

                    /* Historial de la Solicitud Detalle */
                    $entityInfoDetalleSolHistDet = new InfoDetalleSolHist();
                    $entityInfoDetalleSolHistDet->setDetalleSolicitudId($objDetalleSolicitudBackup);
                    $entityInfoDetalleSolHistDet->setObservacion("Solicitud EnProceso para ejecución de Proceso de Cambio de Plan "
                            . "generada automáticamente por Solicitud de Cambio de Plan en "
                            . "Servicio Principal : <b>" . $objServicioPrincipal->getLoginAux() . "</b>");
                    $entityInfoDetalleSolHistDet->setEstado($objDetalleSolicitudBackup->getEstado());
                    $entityInfoDetalleSolHistDet->setFeCreacion(new \DateTime('now'));
                    $entityInfoDetalleSolHistDet->setUsrCreacion($arrayParametros['strUsrCreacion']);
                    $this->emComercial->persist($entityInfoDetalleSolHistDet);
                    $this->emComercial->flush();

                    $arrayCaracteristicasSolicitud = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolCaract")
                            ->findBy(array("detalleSolicitudId" => $objDetalleSolicitudBackup->getId()));

                    if(count($arrayCaracteristicasSolicitud) > 0)
                    {
                        foreach($arrayCaracteristicasSolicitud as $objCaracteristicasSolicitud)
                        {
                            $objCaracteristicasSolicitud->setEstado('EnProceso');
                            $objCaracteristicasSolicitud->setFeUltMod(new \DateTime('now'));
                            $objCaracteristicasSolicitud->setUsrUltMod($arrayParametros['strUsrCreacion']);
                            $this->emComercial->persist($objCaracteristicasSolicitud);
                            $this->emComercial->flush();
                        }
                    }

                    $arrayRespuesta[] = $objDetalleSolicitudBackup;
                }
            }
        }

        return $arrayRespuesta;
    }

    /**
     * seteaInformacionPlanesPyme
     * 
     * Obtener información se planes Pyme, verificación de Ip Wan dentro del plan o como adicional
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 01-11-2020 Se agrega validación para actualizar los precios de los servicios dual band
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 29-12-2020 Se invoca a la función obtieneProductoEnPlan para verificar correctamente si un producto con nombre técnico IP 
     *                         está incluido en un plan que actualmente ya no se encuentra en estado Activo
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 28-12-2020 Se agregan validaciones para soportar cambio de planes entre Pymes con Ip
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 22-05-2022 Se agregan validaciones y seteo de campos nuevos en caso de traslados diferente tecnología
     * 
     * @param array $arrayParametros [
     *                                  "intIdPlan"         => id del plan a validar
     *                                  "intIdPlanNuevo"    => id del plan nuevo a validar
     *                                  "intIdPunto"        => ip de punto a revisar
     *                                  "strConservarIp"    => bandera para confirmar si se acepta o no conservar la Ip Fija Wan
     *                                  "strTipoNegocio"    => tipo de negocio
     *                                  "strTipoNegocioAnterior" => tipo de negocio anterior
     *                                  "strPrefijoEmpresa" => prefijo de la empresa
     *                                  "strUsrCreacion"    => usuario creacion
     *                                  "strIpCreacion"     => ip creacion
     *                                  "strTipoProceso"    => tipo de proceso que ejecuta opción
     *                                  "arrayInformacion"  => informacion a enviar al middleware
     *                               ]
     * 
     * @return array $arrayRespuesta [
     *                                  "strStatus"        => OK o ERROR
     *                                  "arrayInformacion" => informacion a enviar al middleware
     *                               ]
     */
    public function seteaInformacionPlanesPyme($arrayParametros)
    {
        $intIdPlan         = $arrayParametros["intIdPlan"];
        $intIdPlanNuevo    = $arrayParametros["intIdPlanNuevo"];
        $intIdPunto        = $arrayParametros["intIdPunto"];
        $strConservarIp    = $arrayParametros["strConservarIp"];
        $strTipoNegocio    = $arrayParametros["strTipoNegocio"];
        $strPrefijoEmpresa = $arrayParametros["strPrefijoEmpresa"];
        $strTipoProceso    = $arrayParametros["strTipoProceso"];
        $arrayInformacion  = $arrayParametros["arrayInformacion"];
        $strTipoNegocioAnterior = $arrayParametros["strTipoNegocioAnterior"];
        $arrayInfoDifTecnologia = $arrayParametros["arrayInfoDifTecnologia"];
        $strStatus         = "OK";
        $strIpFijaWan      = "";
        try
        {
            if ($strPrefijoEmpresa === "MD" && $strTipoNegocio === "PYME")
            {
                $arrayRespuestaIpEnPlan = $this->obtieneProductoEnPlan( array(  "intIdPlan"                 => $intIdPlan,
                                                                                "strNombreTecnicoProducto"  =>  "IP"));
                $strProductoIpEnPlan    = $arrayRespuestaIpEnPlan["strProductoEnPlan"];
                if($strProductoIpEnPlan === "SI")
                {
                    $strTipoPlanActual = 'con_ip';
                    if (!empty($strConservarIp))
                    {
                        $strIpFijaWan = $strConservarIp  == "SI" ? "1" : "0";
                    }
                }
                else
                {
                    $strTipoPlanActual = 'sin_ip';
                    if ($strTipoProceso !== "ACTIVAR_PLAN")
                    {
                        $arrayParametrosExisteIpWan = array('intIdPunto'            => $intIdPunto,
                                                            'strServiciosActivados' => "SI");
                        $arrayRespuestaExisteIpWan  = $this->emComercial
                                                           ->getRepository('schemaBundle:InfoServicio')
                                                           ->getExisteIpWan($arrayParametrosExisteIpWan);
                        if ($arrayRespuestaExisteIpWan['strStatus'] === "OK")
                        {
                            $strIpFijaWan = $arrayRespuestaExisteIpWan['strExisteIpWan'] === "SI" ? "1" : "0";
                        }
                    }
                    else
                    {
                        $strIpFijaWan = "0";
                    }
                }
                $strTipoPlanNuevo = 'sin_ip';
                if (!empty($intIdPlanNuevo))
                {
                    $intCantidadIpsEnPlanNuevo = $this->emComercial
                                                      ->getRepository('schemaBundle:InfoServicio')
                                                      ->obtenerCantidadIpsEnPlan($intIdPlanNuevo);
                    if  ($intCantidadIpsEnPlanNuevo > 0)
                    {
                        $strTipoPlanNuevo = 'con_ip';
                        if(!empty($strTipoNegocioAnterior) && $strTipoNegocioAnterior === "HOME")
                        {
                            $strIpFijaWan = "";
                        }
                    }
                }
                $arrayInformacion['tipo_plan_actual'] = $strTipoPlanActual;
                if ($strTipoProceso === "CAMBIAR_PLAN")
                {
                    $arrayInformacion['tipo_plan_nuevo'] = $strTipoPlanNuevo;
                }
                $arrayInformacion['ip_fija_wan']      = $strIpFijaWan;
            }
            if ($strPrefijoEmpresa === "MD" && $arrayInfoDifTecnologia != null &&
                isset($arrayInfoDifTecnologia['strSerieOntOrigen']) && !empty($arrayInfoDifTecnologia['strSerieOntOrigen']))
            {
                $arrayInformacion['serial_ont_activar'] = $arrayInformacion['serial_ont'];
                $arrayInformacion['mac_ont_activar']    = $arrayInformacion['mac_ont'];
                $arrayInformacion['serial_ont']         = $arrayInfoDifTecnologia["strSerieOntOrigen"];
                $arrayInformacion['mac_ont']            = $arrayInfoDifTecnologia["strMacOntOrigen"];
            }
        }
        catch (\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $this->utilService
                 ->insertError( 'Telcos+',
                                'InfoServicioTecnicoService.seteaInformacionPlanesPyme',
                                $objEx->getMessage(),
                                $arrayParametros['strUsrCreacion'],
                                $arrayParametros['strIpCreacion']
                              );
        }
        
        $arrayRespuesta = array("strStatus"        => $strStatus,
                                "arrayInformacion" => $arrayInformacion);
        return $arrayRespuesta;
    }

    /**
     *
     * Metodo encargado de realizar el rechazo de las solicitud masivas de cambio plan de los servicios BACKUPS ligados a un Servicio Principal
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 06-04-2017
     *
     * @param  Array $arrayParametros
     *                               [
     *                                  objSolicitudPrincipal        Solicitud de Servicio Principal de cambio de plan masivo
     *                                  strMotivo                    Motivo de rechazo de solicitud
     *                                  strUsrCreacion               Usuario que genera la accion
     *                               ]
     * @return int $intTotalRechazadas Numero de solicitudes rechazadas
     */
    public function rechazarSolicitudCambioPlanBackups($arrayParametros)
    {
        $intTotalRechazadas = 0;

        $objDetalleSolicitudPrincipal = $arrayParametros['objSolicitudPrincipal'];
        $objServicioPrincipal = $objDetalleSolicitudPrincipal->getServicioId();

        //Se buscan los servicios backups en caso de que existan
        $arrayServiciosBackup = $this->getServiciosBackupByServicioPrincipal($objServicioPrincipal);

        if(isset($arrayServiciosBackup))
        {
            foreach($arrayServiciosBackup as $arrayServicios)
            {
                $objDetalleSolicitudBackup = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                        ->findOneBy(array('servicioId' => $arrayServicios['id'],
                    'tipoSolicitudId' => $objDetalleSolicitudPrincipal->getTipoSolicitudId()->getId(),
                    'estado' => array('Aprobada', 'Pendiente')
                ));
                if(is_object($objDetalleSolicitudBackup))
                {
                    $objDetalleSolicitudBackup->setEstado('Rechazada');
                    $this->emComercial->persist($objDetalleSolicitudBackup);
                    $this->emComercial->flush();

                    /* Historial de la Solicitud Detalle */
                    $entityInfoDetalleSolHistDet = new InfoDetalleSolHist();
                    $entityInfoDetalleSolHistDet->setDetalleSolicitudId($objDetalleSolicitudBackup);
                    $entityInfoDetalleSolHistDet->setObservacion("Solicitud Servicio <b>Backup</b> Rechazada por rechazo de Solicitud de Servicio "
                            . "Principal");
                    $entityInfoDetalleSolHistDet->setEstado($objDetalleSolicitudBackup->getEstado());
                    $entityInfoDetalleSolHistDet->setFeCreacion(new \DateTime('now'));
                    $entityInfoDetalleSolHistDet->setUsrCreacion($arrayParametros['strUsrCreacion']);
                    $this->emComercial->persist($entityInfoDetalleSolHistDet);
                    $this->emComercial->flush();

                    $arrayCaracteristicasSolicitud = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolCaract")
                            ->findBy(array("detalleSolicitudId" => $objDetalleSolicitudBackup->getId()));

                    if(count($arrayCaracteristicasSolicitud) > 0)
                    {
                        foreach($arrayCaracteristicasSolicitud as $objCaracteristicasSolicitud)
                        {
                            if($objCaracteristicasSolicitud->getCaracteristicaId()->getDescripcionCaracteristica() == 'Estado Cambio Precio')
                            {
                                $objCaracteristicasSolicitud->setValor('N/A');
                            }
                            $objCaracteristicasSolicitud->setEstado('Rechazada');
                            $objCaracteristicasSolicitud->setFeUltMod(new \DateTime('now'));
                            $objCaracteristicasSolicitud->setUsrUltMod($arrayParametros['strUsrCreacion']);
                            $this->emComercial->persist($objCaracteristicasSolicitud);
                            $this->emComercial->flush();
                        }
                    }

                    $intTotalRechazadas++;
                }
            }
        }

        return $intTotalRechazadas;
    }

    /**
     * Metodo que se encarga de validar si un determinado Servicio puede ejecutarse cambio de Capacidad de acuerdo a si su CPE soporta dicho cambio
     * o no
     * Valida si el Servicio que es Radio sobrepasa el cambio de velocidad para poder notificar a Departamento de Radio
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 04-04-2017
     *
     * @param Array $arrayParametros
     *                              [
     *                                  objServicioBackup     Servicio Backup a analizar
     *                                  strTipoValidacion     Tipo de validacion que se realizara RAD / FO
     *                                  intCapacidadUnoNueva  Capacidad Uno Nueva
     *                                  intCapacidadDosNueva  Capacidad Dos Nueva
     *                                  floatUmbral           porcentaje de umbral de calculo de limite de capacidad por equipo
     * @return Array $arrayRespuesta
     *                              [
     *                                  boolAplicaRadio        Determina si el servicio radio puede ejecutar cambio plan sin autorizacion
     *                                  boolAplicaIpccl2       Determina si el servicio normal puede ejecutar cambio plan sin autorizacion
     *                                  boolAplicaCapacidadCpe Determina si el servicio cuyo CPE posee o no marca de capacidades
     *                              ]
     */
    public function verificarCapacidadesServiciosCambioPlan($arrayParametros)
    {
        $arrayRespuesta = array();
        $arrayRespuesta['boolAplicaRadio'] = true;
        $arrayRespuesta['boolAplicaIpccl2'] = true;
        $arrayRespuesta['boolAplicaCapacidadCpe'] = true;

        $objServicioBackup = $arrayParametros['objServicioBackup'];

        if($arrayParametros['strTipoValidacion'] == 'RAD')
        {
            $objCaractCapacidad1 = $this->getServicioProductoCaracteristica($objServicioBackup, "CAPACIDAD1", $objServicioBackup->getProductoId()
            );

            $objCaractCapacidad2 = $this->getServicioProductoCaracteristica($objServicioBackup, "CAPACIDAD2", $objServicioBackup->getProductoId()
            );

            if(is_object($objCaractCapacidad1) && is_object($objCaractCapacidad2))
            {
                $intCapacidad1 = $objCaractCapacidad1->getValor();
                $intCapacidad2 = $objCaractCapacidad2->getValor();

                if($arrayParametros['intCapacidadUnoNueva'] > $intCapacidad1 || $arrayParametros['intCapacidadDosNueva'] > $intCapacidad2)
                {
                    $arrayRespuesta['boolAplicaRadio'] = false;
                }
            }
        }
        else
        {
            $arrayParametrosCapacidades = array();
            $arrayParametrosCapacidades['intIdServicio'] = $objServicioBackup->getId();
            $arrayParametrosCapacidades['strTipoElemento'] = 'CPE';

            $arrayCapacidadesModelo = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                    ->getArrayCapacidadesMaximasPorModeloElemento($arrayParametrosCapacidades);

            // Validacion del Nivel de Aprobacion del Ancho de Banda para IPCCL2
            if(isset($arrayCapacidadesModelo[0]['capacidadTotalUno']) && !empty($arrayCapacidadesModelo[0]['capacidadTotalUno']) &&
                isset($arrayCapacidadesModelo[0]['capacidadTotalDos']) && !empty($arrayCapacidadesModelo[0]['capacidadTotalDos']))
            {
                $intModeloCapacidad1KPBSUmbral = $arrayCapacidadesModelo[0]['capacidadTotalUno'] * $arrayParametros['floatUmbral'];
                $intModeloCapacidad2KPBSUmbral = $arrayCapacidadesModelo[0]['capacidadTotalDos'] * $arrayParametros['floatUmbral'];

                if($arrayParametros['intCapacidadUnoNueva'] > $intModeloCapacidad1KPBSUmbral ||
                    $arrayParametros['intCapacidadDosNueva'] > $intModeloCapacidad2KPBSUmbral)
                {
                    $arrayRespuesta['boolAplicaIpccl2'] = false;
                }
            }
            else
            {
                $arrayRespuesta['boolAplicaCapacidadCpe'] = false;
            }
        }

        return $arrayRespuesta;
    }

    /**
     *
     * Metodo encargado de liberar el puerto cuando se rechaza el servicio de la planificacion
     *
     * @author John Vera R <javera@telconet.ec>
     * @version 1.0 06-04-2017
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 28-08-2017 - Se Validad que pueda continuar siempre y cuando exista Ultima Milla ligada a un servicio
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 16-03-2018 - Se adapta para liberar factibilidad para flujos de Soluciones DC
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 07-07-2020 - Se modifica el método para llamar al  web-services encargado de
     *                           revesar la factibilidad Housing.
     * .
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.4 09-11-2020 - Se agrega validación para los productos que no son core ni preferencial.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.5 21-05-2021 - Se agrega validación para productos con última milla FTTx para la red GPON
     *
     * @param  Array $arrayParametros
     *                               [
     *                                  intIdServicio        id del servicio
     *                               ]
     * @return int $strMensajeError
     */
    public function reversaFactibilidad($arrayParametros)
    {
        $intIdServicio  = $arrayParametros['intIdServicio'];
        $boolEsSolucion = false;

        if(isset($arrayParametros['boolEsSolucion']))
        {
            $boolEsSolucion = $arrayParametros['boolEsSolucion'];
        }

        $em = $this->emComercial;
        $strMensajeError = "";

        try
        {

            $objServicio = $em->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

            if(is_object($objServicio))
            {
                if(!$boolEsSolucion)
                {
                    $objServicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
                    //se agrega validacion de que se recupere objeto servicio tecnico
                    if(is_object($objServicioTecnico) && $objServicioTecnico->getUltimaMillaId())
                    {
                        //se obtiene la ultima milla
                        $objUm = $em->getRepository('schemaBundle:AdmiTipoMedio')->find($objServicioTecnico->getUltimaMillaId());
                        if(is_object($objUm))
                        {
                            $strCodigo = $objUm->getCodigoTipoMedio();

                            if($strCodigo == 'FO')
                            {
                                //consulto si es directo o ruta
                                $objSpc = $this->getServicioProductoCaracteristica($objServicio, "TIPO_FACTIBILIDAD", $objServicio->getProductoId());

                                if(is_object($objSpc))
                                {
                                    $strFactibilidad = $objSpc->getValor();

                                    if($strFactibilidad == 'DIRECTO')
                                    {
                                        if($objServicioTecnico->getInterfaceElementoId() > 0)
                                        {
                                            $objInterfaceElemento = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                       ->find($objServicioTecnico->getInterfaceElementoId());
                                        }
                                    }
                                    else
                                    {
                                        if($objServicioTecnico->getInterfaceElementoConectorId() > 0)
                                        {
                                            $objInterfaceElemento = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                       ->find($objServicioTecnico->getInterfaceElementoConectorId());
                                        }
                                    }
                                }
                            }
                            elseif($strCodigo == 'UTP')
                            {
                                if($objServicioTecnico->getInterfaceElementoId() > 0)
                                {
                                    $objInterfaceElemento = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                               ->find($objServicioTecnico->getInterfaceElementoId());
                                }
                            }
                            elseif($strCodigo == 'FTTx')
                            {
                                if($objServicioTecnico->getInterfaceElementoConectorId() > 0)
                                {
                                    $objInterfaceElemento = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                               ->find($objServicioTecnico->getInterfaceElementoConectorId());
                                }
                            }
                            else
                            {

                            }

                            if(is_object($objInterfaceElemento))
                            {
                                //libero interface anterior
                                $objInterfaceElemento->setEstado("not connect");
                                $em->persist($objInterfaceElemento);
                                $em->flush();

                            }
                        }
                    }
                }
                else
                {
                    $strNombreTecnico = $objServicio->getProductoId()->getNombreTecnico();

                    if($strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'DATOSDC')
                    {
                        $objServicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);

                        if(is_object($objServicioTecnico) && $objServicioTecnico->getInterfaceElementoId())
                        {
                            $objInterfaceElemento = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->find($objServicioTecnico->getInterfaceElementoId());

                            if(is_object($objInterfaceElemento))
                            {
                                //libero interface anterior
                                $objInterfaceElemento->setEstado("not connect");
                                $em->persist($objInterfaceElemento);
                                $em->flush();
                            }
                        }
                    }
                    else if($strNombreTecnico == 'HOUSING')
                    {
                        //Verificamos que tenga elemento/s a liberar.
                        $objInfoServicioRecursoCab = $this->emComercial->getRepository('schemaBundle:InfoServicioRecursoCab')
                                ->findOneBy(array('servicioId' => $objServicio->getId(),
                                                  'estado'     => 'Activo'));

                        if (is_object($objInfoServicioRecursoCab))
                        {
                            $objInfoServicioRecursoDet = $this->emComercial->getRepository('schemaBundle:InfoServicioRecursoDet')
                                    ->findOneBy(array('servicioRecursoCabId' =>  $objInfoServicioRecursoCab->getId(),
                                                      'estado'               => 'Activo'));

                            //Si la consulta retorna al menos un registro, se procede con el reverso de la factibilidad.
                            if (is_object($objInfoServicioRecursoDet))
                            {
                                //Llamada al ws encargado de reversar la factibilidad de alquiler de espacio físico.
                                $arrayReversarHousing = array();
                                $arrayReversarHousing['habilitaCommit'] = true;
                                $arrayReversarHousing['dataRecurso']['servicioId'] = $objServicio->getId();
                                $arrayReversarHousing['dataRecurso']['usrUltMod']  = $arrayParametros['strUsrCreacion'];
                                $arrayReversarHousing['dataRecurso']['ipUltMod']   = $arrayParametros['strIpCreacion'];

                                $arrayRespuestaWs = $this->container->get('comercial.InfoSolucion')->WsPostDc(
                                        array('strUser'      =>  $arrayParametros['strUsrCreacion'],
                                              'strIp'        =>  $arrayParametros['strIpCreacion'],
                                              'strOpcion'    => 'factibilidaddc',
                                              'strEndPoint'  => 'reversarFactbilidadHousing',
                                              'arrayRequest' =>  $arrayReversarHousing));

                                if (!$arrayRespuestaWs['status'])
                                {
                                    throw new \Exception($arrayRespuestaWs['message']);
                                }
                            }
                        }
                    }
                    else//HOSTING - ALQUILER SERVIDORES
                    {
                        $objInfoSolucionDet = $this->emComercial->getRepository("schemaBundle:InfoSolucionDet")
                        ->findOneBy(array('servicioId' => $objServicio->getId(),'estado' => 'Activo'));
                        if (is_object($objInfoSolucionDet)&& $objInfoSolucionDet->getEsCore() == 'NO')
                        {
                            $arrayInfoServicioRecursoCab = $this->emComercial->getRepository("schemaBundle:InfoServicioRecursoCab")
                            ->findBy(array("servicioId" => $objServicio->getId(),"estado" => "Activo"));
                            if (!empty($arrayInfoServicioRecursoCab))
                            {
                                foreach($arrayInfoServicioRecursoCab as $objSRC)
                                {
                                    $arrayInfoServicioRecursoDet = $this->emComercial->getRepository("schemaBundle:InfoServicioRecursoDet")
                                    ->findBy(array("servicioRecursoCabId" => $objSRC->getId(),"estado" => "Activo"));
                                    if (!empty($arrayInfoServicioRecursoDet))
                                    {
                                        foreach($arrayInfoServicioRecursoDet as $objSRD)
                                        {   $objSRD->setEstado("Eliminado");
                                            $em->persist($objSRD);
                                            $em->flush();
                                        }
                                    }                               
                                    $objSRC->setEstado("Eliminado");
                                    $em->persist($objSRC);
                                    $em->flush();
                                }
                            }
                        }
                        else
                        {
                            $arrayReversoHosting                    = array();
                            $arrayReversoHosting['servicioId']      = $objServicio->getId();
                            $arrayReversoHosting['usrUltMod']       = $arrayParametros['strUsrCreacion'];
                            $arrayReversoHosting['ipUltMod']        = $arrayParametros['strIpCreacion'];
                            $arrayReversoHosting['habilitaCommit']  = true;
                            $arrayRespuestaAlqServ = $this->emComercial->getRepository('schemaBundle:InfoServicioRecursoDet')
                                                          ->reversarFactibilidadAlqServidor($arrayReversoHosting);

                            if ($arrayRespuestaAlqServ['status'] == 'ERROR')
                            {
                                throw new \Exception(''.$arrayRespuestaAlqServ['mensaje']);
                            }
                        }

                    }//factibilidad alquiler de servidores
                }//flujos de solucion
            }
        }
        catch(\Exception $e)
        {
            $em->getConnection()->rollback();
            $strMensajeError = "Error: <br>" . $e->getMessage() . ". Favor notificar a Sistemas.";
        }
        return $strMensajeError;
    }

    /**
     * getServiciosPorConcentrador
     * Metodo que consulta los servicios y los devuelve en un string segun su valor en la servicio producto caracteristica
     *
     * @author John Vera R <javera@telconet.ec>
     * @version 1.0 15-08-2017
     *
     * @param  Array $arrayParametros
     *                               [
     *                                  intIdServicio        id del servicio
     *                               ]
     * @return int $arrayRespuesta
     */
    public function getServiciosPorConcentrador($arrayCriterios)
    {
        $arrayRespuesta = array();

        $arrayParametros['strValor']            = $arrayCriterios['intIdServicio'];
        $arrayParametros['strProducto']         = 'L3MPLS';
        $arrayParametros['strCaracteristica']   = 'ENLACE_DATOS';

        $strMensaje = "";
        $strStatus = "OK";

        try
        {
            //obtengo el servicio prod caract
            $arrayServicios = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                    ->getServiciosPorProductoCaracteristica($arrayParametros);

            foreach($arrayServicios as $arrayServicio)
            {
                $strMensaje = $arrayServicio['login']  . ' -> ' .$arrayServicio['descripcion'].' -> '
                              .$arrayServicio['estadoServicio'] . ' <br> ' . $strMensaje;
            }


        }
        catch(\Exception $e)
        {
            $strStatus = 'ERROR';
            $strMensaje = $e->getMessage() . ". Favor notificar a Sistemas.";
        }

        $arrayRespuesta['strStatus']    = $strStatus;
        $arrayRespuesta['strMensaje']   = $strMensaje;

        return $arrayRespuesta;
    }

    /**
     * Función que sirve para obtener datos (ip, historial, ubicacion) de un elemento tomando en cuenta el código de la empresa
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 30-10-2017
     *
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.1 10-04-2023 - Se obtiene el codigo de empresa mas especifico para obtener la
     *                           jurisdiccion adecuada.
     * 
     */
    public function obtenerDatosElementoEmpresa($arrayParametros)
    {
        $intIdElemento  = $arrayParametros["intIdElemento"];
        $strCodEmpresa  = $arrayParametros["strCodEmpresa"];

        $objIpElemento  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                ->findOneBy(array("elementoId" => $intIdElemento));
        $arrayHistorialElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoHistorialElemento')
                                                          ->findBy( array("elementoId" => $intIdElemento),
                                                                    array('feCreacion' => 'DESC'));

        $arrayHistorial = array();
        $intIndice = 0;
        foreach($arrayHistorialElemento as $objHistorial)
        {
            $arrayHistorial[$intIndice]['estado']       = $objHistorial->getEstadoElemento();
            $arrayHistorial[$intIndice]['fe_creacion']  = strval(date_format($objHistorial->getFeCreacion(), "d/m/Y G:i"));
            $arrayHistorial[$intIndice]['usr_creacion'] = $objHistorial->getUsrCreacion();
            $arrayHistorial[$intIndice]['observacion']  = $objHistorial->getObservacion();

            $intIndice++;
        }

        $objEmpresaUbicacion = $this->emInfraestructura->getRepository('schemaBundle:InfoEmpresaElementoUbica')
                                                       ->findOneBy(array("elementoId"   => $intIdElemento,
                                                                         "empresaCod"   => $strCodEmpresa));
        if(is_object($objEmpresaUbicacion))
        {
            $objUbicacion = $objEmpresaUbicacion->getUbicacionId();
            if(is_object($objUbicacion))
            {
                $objParroquia = $objUbicacion->getParroquiaId();

                if(is_object($objParroquia))
                {
                    $objCanton = $objParroquia->getCantonId();
                    if(is_object($objCanton))
                    {
                        $arrayCantonesJurisdicciones = $this->emInfraestructura->getRepository('schemaBundle:AdmiCantonJurisdiccion')
                                ->findBy(array("cantonId" => $objCanton->getId(),
                                                                                              "estado"   => "Activo"));
                        foreach($arrayCantonesJurisdicciones as $objCantonJurisdiccion)
                        {
                            $objJurisdiccion = $this->emInfraestructura->find('schemaBundle:AdmiJurisdiccion',
                                                                              $objCantonJurisdiccion->getJurisdiccionId());
                            if(is_object($objJurisdiccion))
                            {
                                $objOficina = $this->emInfraestructura->find('schemaBundle:InfoOficinaGrupo', $objJurisdiccion->getOficinaId());
                                if(is_object($objOficina) && ($objOficina->getEmpresaId()->getId() == $strCodEmpresa))
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        $objRelacionElementoOld = $this->emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                          ->findOneBy(array('elementoIdB'   => $intIdElemento,
                                                                            'estado'        => 'Activo'));
        $strNombreNodoCliente = '';
        if(is_object($objRelacionElementoOld))
        {
            $objNodoCliente         = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                    ->findOneById($objRelacionElementoOld->getElementoIdA());
            if(is_object($objNodoCliente))
            {
                $strNombreNodoCliente   = $objNodoCliente->getNombreElemento();
            }
        }

        //Se obtiene la información del anillo a la cual pertenece el switch
        $objDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                      ->findOneBy(array('elementoId'    => $intIdElemento,
                                                                        'detalleNombre' => 'ANILLO',
                                                                        'estado'        => 'Activo'));
        $arrayDatos = array(
            'ipElemento'        => $objIpElemento,
            'historialElemento' => $arrayHistorial,
            'ubicacion'         => $objUbicacion,
            'jurisdiccion'      => $objJurisdiccion,
            'oficina'           => $objOficina,
            'nodoCliente'       => $strNombreNodoCliente,
            'anillo'            => $objDetalleElemento ? $objDetalleElemento->getDetalleValor() : 'N/A'
        );

        return $arrayDatos;
    }

    /**
     * getServiciosPorConcentrador
     * Metodo que consulta los servicios y los devuelve en un string segun su valor en la servicio producto caracteristica
     *
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.0 24-11-2017
     *
     * @param  Objeto $arraySessionFTTx
     *
     * @return array  $arrayRespuestaFTTx
     */
    public function getInformacionEmpresaFTTx($arraySessionFTTx)
    {
        $arrayEmpresa = ['intIdEmpresa' => NULL, 'strPrefijoEmpresa' => NULL, 'strUltimaMillaFTTx' => NULL];

        if(!empty($arraySessionFTTx))
        {
            $arrayEmpresa = ['intIdEmpresa'         =>  $arraySessionFTTx['intIdEmpresa'],
                             'strPrefijoEmpresa'    =>  $arraySessionFTTx['strPrefijoEmpresa'],
                             'strUltimaMillaFTTx'   =>  $arraySessionFTTx['strUltimaMillaFTTx']];
        }
        return $arrayEmpresa;

    }

    /**
     *
     * Metodo encargado de traer el nombre de la solucion que agrupa servicios en caso de existir, caso contrario devuelve vacío
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-09-2017
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 22-05-2018 - Se muestra mas datos referentes a la solucion multiple
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 23-06-2020 - Se modifica el método para consumir el procedimiento de la base, que consulta
     *                           a las nuevas estructuras de soluciones.
     *
     * @param Array $arrayParametros [  objServico ]
     * @return string
     */
    public function getNombreGrupoSolucionServicios($arrayParametros)
    {
        $strSolucion = '';
        $objServicio = $arrayParametros['objServicio'];

        $arrayRequest['arrayRequest']  = array('idServicio'  => $objServicio->getId(),
                                               'estado'      => 'Activo');
        $arrayRequest["ociCon"]        = array('userCom'     => $this->container->getParameter('user_comercial'),
                                               'passCom'     => $this->container->getParameter('passwd_comercial'),
                                               'databaseDsn' => $this->container->getParameter('database_dsn'));

        //Determinar si los servicios se encuentran agrupados como una solución
        $arrayResponse  = $this->emComercial->getRepository('schemaBundle:InfoSolucionCab')->listarDetalleSolucion($arrayRequest);
        $arrayResultado = oci_fetch_array($arrayResponse['objCsrResult'], OCI_ASSOC + OCI_RETURN_NULLS);

        if ($arrayResponse['status'] === 'OK' && !empty($arrayResultado))
        {
            $strColor = $arrayResultado['SEGMENTO'];

            $strSolucion = '<i class="fa fa-shopping-bag" aria-hidden="true"></i>&nbsp;'.
                           '<label style="color:#4D793E;"><b>Sol. # '.$arrayResultado['NUMEROSOLUCION'].'</b></label>'.
                           '<br/><label style="font-size:15px;font-weight:bold;">&#10551;</label>'.
                           '<label style="color:#1496DB;font-size:9px;">&nbsp;<b>'.$arrayResultado['NOMBRESOLUCION'].'</b></label>';

            $strSolucion .= '<br/><label style="font-size:15px;font-weight:bold;">&#10551;</label>'.
                            '<i class="fa fa-square" aria-hidden="true" style="color:'.$strColor.'"></i>&nbsp;'.
                            '<label style="color:#1496DB;font-size:9px;">&nbsp;'.
                            '<b>'.$arrayResultado['TIPOSOLUCION'].'</b></label>';

            if (!empty($arrayResultado['CORESREFERENTES']))
            {
                $arraySubCores = explode("|",$arrayResultado['CORESREFERENTES']);

                $strCoresHtml = '';

                foreach ($arraySubCores as $strCores)
                {
                    if (!empty($strCores))
                    {
                        $strCoresHtml .= '<tr><td><i class="fa fa-long-arrow-right" aria-hidden="true"></i>&nbsp;'.$strCores.'</td></tr>';
                    }
                }

                $strSolucion .= '<br/><label style="font-size:15px;font-weight:bold;">&#10551;</label>'.
                                '<label style="color:#1496DB;font-size:9px;"><b style="color:'.$strColor.'">CORES:</b>'
                              . '<table>'.$strCoresHtml.'</table></label>';
            }
        }
        return $strSolucion;
    }

    /**
     *
     * Metodo encargado de obtener informacion del Producto de Solucion que contenga flujo de Factibilidad diferentes al Preferencial
     * Internet/Datos DC
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 07-11-2017
     *
     * @param  Array $arrayParametros [ arrayServiciosGrupo , objServicioActual , intCodEmpresa ]
     * @return Array $arrayRespuesta  [ strProducto , strSubGrupo , intIdServicio, strContinuaFlujoDC ]
     */
    public function obtenerProductoReferenciaFactibilidad($arrayParametros)
    {
        $arrayRespuesta      = array();
        $arrayServiciosGrupo = $arrayParametros['arrayServiciosGrupo'];
        $objServicioActual   = $arrayParametros['objServicioActual'];
        $intCodEmpresa       = $arrayParametros['intCodEmpresa'];
        $strParametro        = '';

        foreach($arrayServiciosGrupo as $objServicioGrupo)
        {
            //Si no es INTERNET DC
            if($objServicioGrupo != $objServicioActual)
            {
                $intIdProducto           = $objServicioGrupo->getProductoId()->getId();
                $strProductoAlqEspacioDC = $objServicioGrupo->getProductoId()->getDescripcionProducto();
                $strNombreTecnico        = $objServicioGrupo->getProductoId()->getNombreTecnico();

                if($strNombreTecnico == 'HOUSING')
                {
                    $strParametro = 'PRODUCTOS ALQUILER ESPACIO';
                }

                if($strNombreTecnico == 'HOSTING')
                {
                    $strParametro = 'PRODUCTOS HOSTING RECURSOS';
                }

                if($strNombreTecnico != 'INTERNETDC' && !empty($strParametro))
                {
                    $arrayParametrosDet =   $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get($strParametro,
                                                                  'COMERCIAL',
                                                                  '',
                                                                  '',
                                                                  $intIdProducto,
                                                                  $strProductoAlqEspacioDC,
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $intCodEmpresa);

                    $strEstadoServicio = $objServicioGrupo->getEstado();

                    if(!empty($arrayParametrosDet))
                    {
                        $arrayRespuesta['strProducto']        = $strProductoAlqEspacioDC;
                        $arrayRespuesta['strSubGrupo']        = $strNombreTecnico;
                        $arrayRespuesta['intIdServicio']      = $objServicioGrupo->getId();
                        $arrayRespuesta['strContinuaFlujoDC'] = 'N';

                        if($strEstadoServicio != 'Pre-servicio' && $strEstadoServicio != 'PreFactibilidad')
                        {
                            $arrayRespuesta['strContinuaFlujoDC'] = 'S';
                        }

                        break;
                    }
                }
            }
        }

        return $arrayRespuesta;
    }

    /**
     *
     * Metodo encargado para validar si existe dentro de la solucion un producto perteneciente el grupo de cloud - HOSTING
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 08-11-2017
     *
     * @param  Array $arrayParametros [ objServicio , emComercial , servicioGeneral ]
     * @return boolean
     */
    public function isProductoGrupoSolucionCloud($arrayParametros)
    {
        $objServicio = $arrayParametros['objServicio'];
        $objProducto = $objServicio->getProductoId();

        $arrayParametrosPertenece                     = array();
        $arrayParametrosPertenece['objServProdGrupo'] = $this->getServicioProductoCaracteristica($objServicio, 'SECUENCIAL_GRUPO', $objProducto);
        $arrayParametrosPertenece['strNombreTecnico'] = 'HOSTING';

        return $this->isSolucionPorNombreTecnico($arrayParametrosPertenece);
    }

    /**
     *
     * Metodo encargado para validar si existe dentro de la solucion un producto que se de tipo alquiler de servidores
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 29-11-2017
     *
     * @param  Array $arrayParametros [ objServicio ]
     * @return boolean $boolContieneAlquiler
     */
    public function isSolucionContieneAlquilerServidor($arrayParametros)
    {
        $boolContieneAlquiler = false;
        $objServicio          = $arrayParametros['objServicio'];

        $objServProdCaractGrupo = $this->getServicioProductoCaracteristica($objServicio,
                                                                           'SECUENCIAL_GRUPO',
                                                                           $objServicio->getProductoId()
                                                                          );
        //Se busca si existe un servicio de alquiler de servidores
        $arrayParametrosSolucion = array();
        $arrayParametrosSolucion['intSecuencial'] = $objServProdCaractGrupo->getValor();
        $arrayServiciosGrupo = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                ->getArrayServiciosPorGrupoSolucion($arrayParametrosSolucion);

        foreach($arrayServiciosGrupo as $objServiciosGrupo)
        {
            $boolContieneAlquiler = $this->isContieneCaracteristica($objServiciosGrupo->getProductoId(),'ES_ALQUILER_SERVIDORES');

            //Si existe un alquiler de servidor se envia variable
            if($boolContieneAlquiler)
            {
                break;
            }
        }

        return $boolContieneAlquiler;
    }

    /**
     *
     * Metodo encargado para validar si existe dentro de la solucion un producto perteneciente el grupo HOUSING
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 04-01-2018
     *
     * @param  Array $arrayParametros [ objServicio  ]
     * @return boolean
     */
    public function esProductoGrupoSolucionHousing($arrayParametros)
    {
        $objServicio = $arrayParametros['objServicio'];
        $objProducto = $arrayParametros['objServicio']->getProductoId();

        $arrayParametrosPertenece                     = array();
        $arrayParametrosPertenece['objServProdGrupo'] = $this->getServicioProductoCaracteristica($objServicio, 'SECUENCIAL_GRUPO', $objProducto);
        $arrayParametrosPertenece['strNombreTecnico'] = 'HOUSING';

        return $this->isSolucionPorNombreTecnico($arrayParametrosPertenece);
    }

    /**
     *
     * Metodo encargado para validar si una solucion es de un determinado grupo establecido por el nombre tecnico HOUSING/HOSTING
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 04-01-2018
     *
     * @param  Array $arrayParametros [ objServProdGrupo , strNombreTecnico ]
     * @return boolean
     */
    private function isSolucionPorNombreTecnico($arrayParametros)
    {
        $boolPertenece = false;

        if(is_object($arrayParametros['objServProdGrupo']))
        {
            $arrayParametrosSolucion = array();
            $arrayParametrosSolucion['intSecuencial'] = $arrayParametros['objServProdGrupo']->getValor();
            $arrayServiciosGrupo = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                    ->getArrayServiciosPorGrupoSolucion($arrayParametrosSolucion);
            if(!empty($arrayServiciosGrupo))
            {
                foreach($arrayServiciosGrupo as $objServicio)
                {
                    $objProducto = $objServicio->getProductoId();

                    //Si alguno de los productos de la solucion es de CLOUD se envia el parametro
                    if($objProducto->getNombreTecnico() == $arrayParametros['strNombreTecnico'])
                    {
                        $boolPertenece = true;
                        break;
                    }
                }
            }
        }

        return $boolPertenece;
    }


    /**
     * eliminarRutaEnEquipos
     *
     * Metodo encargado de eliminar ruta en los equipos de la Red para servicios TN
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 04-05-2018
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 18-05-2018 - Se ajusta para la eliminacion soporte flujos de INTERNETDC y DATOSDC
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 28-06-2018 - Se agrega mas información de la ruta que se esta eliminando en el historial
     *
     * @param  Array $arrayParametrosMetodo [
     *                                         strIdRuta       Identificador de la ruta
     *                                         strIdElemento   Identificador del elemento del servicio
     *                                         strIdServicio   Identificador del servicio a configurar ruta
     *                                         strIdProducto   Identificador del productodel servicio a configurar
     *                                         strVrf          Vrf del servicio
     *                                         strUserClient   Usuario que realiza la transacción
     *                                         strIpClient     Ip que realiza la transacción
     *                                         strProceso      Tipo de proceso que ejecuta el metodo
     *                                      ]
     * @return Array $arrayRespuesta        [
     *                                         strStatus       Estado de la ejecución
     *                                         strMensaje      Mensaje de respuesta
     *                                         strStatusCode   Codigo de respuesta
     *                                      ]
     */
    public function eliminarRutaEnEquipos($arrayParametrosMetodo)
    {
        $idRuta         = $arrayParametrosMetodo['strIdRuta'];
        $idElemento     = $arrayParametrosMetodo['strIdElemento'];
        $idServicio     = $arrayParametrosMetodo['strIdServicio'];
        $idProducto     = $arrayParametrosMetodo['strIdProducto'];
        $vrf            = $arrayParametrosMetodo['strVrf'];
        $strUserClient  = $arrayParametrosMetodo['strUserClient'];
        $strIpClient    = $arrayParametrosMetodo['strIpClient'];
        $strProceso     = $arrayParametrosMetodo['strProceso'];
        $strStatus      = "ERROR";
        $strMensaje     = "Se presento un error al ejectuar el proceso";
        $arrayRespuesta = array(
                                "strStatus"     => $strStatus,
                                "strMensaje"    => $strMensaje,
                                "strStatusCode" => ""
                               );
        try
        {
            $objServicio     = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            $objProducto     = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($idProducto);
            $objElemento     = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($idElemento);

            // Actualizacion de la Ruta Elemento
            $objRutaElemento = $this->emInfraestructura
                                    ->getRepository('schemaBundle:InfoRutaElemento')
                                    ->find($idRuta);

            $strNombreTecnico= $objProducto->getNombreTecnico();

            $strTipoRuta = 'RUTASINTMPLS';

            if($strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'INTERNTEDC')
            {
                $strTipoRuta     = 'RUTASINTERNETDC';
                $strTipoSolucion = 'HOUSING';

                //Si no existe backbone configurado se trata de soluciones HOSTING
                if(!is_object($objElemento))
                {
                    $strTipoSolucion = 'HOSTING';
                }

                if($strNombreTecnico == 'DATOSDC')
                {
                    $strNombreTecnico = $strNombreTecnico.'-L3';
                }

                $strNombreTecnico = $strNombreTecnico."-".$strTipoSolucion;
            }

            // Obtener Elemento Padre
            $objElementoPadre = $objRutaElemento->getElementoId();

            // ------------------------------------------------------------------------------------
            // call al WebService NetworkingScriptsService
            // ------------------------------------------------------------------------------------
            $arrayPeticiones = array();
            $arrayPeticiones['url']    = 'enrutamientoEstaticoPe';
            $arrayPeticiones['accion'] = 'eliminar';
            //...
            $arrayPeticiones['clase_servicio']  = $strNombreTecnico;
            $arrayPeticiones['vrf']             = $vrf;
            $arrayPeticiones['pe']              = $objElementoPadre->getNombreElemento();
            $arrayPeticiones['sw']              = is_object($objElemento)?$objElemento->getNombreElemento():'';
            $arrayPeticiones['name_route']      = $objRutaElemento->getNombre();
            if($objRutaElemento->getSubredId())
            {
                $arrayPeticiones['net_lan']     = $objRutaElemento->getSubredId()->getSubred();
                $arrayPeticiones['mask_lan']    = $objRutaElemento->getSubredId()->getMascara();
                $strSubredConfigurada           = $objRutaElemento->getSubredId()->getSubred();
                $strTipoEnrutamiento            = 'Automática';
                $strMascaraRuta                 = $objRutaElemento->getSubredId()->getMascara();
            }
            else
            {
                $arrayPeticiones['net_lan']     = $objRutaElemento->getRedLan();
                $arrayPeticiones['mask_lan']    = $objRutaElemento->getMascaraRedLan();
                $strSubredConfigurada           = $objRutaElemento->getRedLan();
                $strTipoEnrutamiento            = 'Estática';
                $strMascaraRuta                 = $objRutaElemento->getMascaraRedLan();
            }
            $arrayPeticiones['ip_destino']      = $objRutaElemento->getIpId()->getIp();
            $arrayPeticiones['distance_admin']  = $objRutaElemento->getDistanciaAdmin();
            $arrayPeticiones['option']          = 'E';
            //...
            $arrayPeticiones['servicio']        = $objProducto->getNombreTecnico();
            $arrayPeticiones['login_aux']       = $objServicio->getLoginAux();
            $arrayPeticiones['user_name']       = $strUserClient;
            $arrayPeticiones['user_ip']         = $strIpClient;
            //...
            $arrayPeticiones['idServicio']      = $idServicio;
            $arrayPeticiones['idProducto']      = $idProducto;

            //Ejecucion del metodo via WS para realizar la configuracion del SW
            $arrayRespuestaNw = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

            $status  = $arrayRespuestaNw['status'];
            $mensaje = $arrayRespuestaNw['mensaje'];
            // ------------------------------------------------------------------------------------
            if($status == 'OK')
            {
                if ($strProceso == "botonEliminar")
                {
                    // Liberar Subred
                    if($objRutaElemento->getSubredId())
                    {
                        unset($arrayParametros);

                        $arrayParametros                      = array();
                        $arrayParametros['tipoAccion']        = 'liberar';
                        //....
                        $arrayParametros['uso']               = $strTipoRuta;
                        $arrayParametros['subredId']          = $objRutaElemento->getSubredId()->getId();
                        $arrayParametros['elementoId']        = $objRutaElemento->getElementoId()->getId();
                        $arrayParametros['mascara']           = $objRutaElemento->getSubredId()->getMascara();

                        $arrayResponse = $this->emInfraestructura
                                              ->getRepository('schemaBundle:InfoSubred')
                                              ->provisioningSubred($arrayParametros);

                        if($arrayResponse['msg'] !='OK')
                        {
                            $arrayRespuesta = array(
                                                    "strStatus"     => "ERROR",
                                                    "strMensaje"    => "Imposible eliminar ruta estatica. problemas con la subred asignada.",
                                                    "strStatusCode" => "406"
                                                   );
                            return $arrayRespuesta;
                        }
                    }
                    else//liberar subredes en rutas estaticas en casa de estar asignadas alguna del pool de subredes del sistema
                    {
                        $arrayParametrosExisteSubred                = array();
                        $arrayParametrosExisteSubred['strIpSubred'] = $objRutaElemento->getRedLan();
                        $arrayParametrosExisteSubred['strMascara']  = $objRutaElemento->getMascaraRedLan();
                        $arrayParametrosExisteSubred['strUso']      = $strTipoRuta;
                        $arrayParametrosExisteSubred['strEstado']   = 'Ocupado';

                        //Verificar si la subred estatica no pertenece al pool de subredes del sistema para proceder a liberarla
                        $arraySubred = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")
                                                               ->getSubredByIpYMascara($arrayParametrosExisteSubred);

                        //Si existe una subred ocupada en la ruta estatica, se procede a ser liberada
                        if(!empty($arraySubred))
                        {
                            $objSubred = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($arraySubred['idSubred']);

                            if(is_object($objSubred))
                            {
                                $arrayParametros                      = array();
                                $arrayParametros['tipoAccion']        = 'liberar';
                                $arrayParametros['uso']               = $strTipoRuta;
                                $arrayParametros['subredId']          = $objSubred->getId();
                                $arrayParametros['mascara']           = $objSubred->getMascara();

                                $arrayResponse = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                         ->provisioningSubred($arrayParametros);

                                if($arrayResponse['msg'] !='OK')
                                {
                                    $arrayRespuesta = array(
                                                    "strStatus"     => "ERROR",
                                                    "strMensaje"    => "Imposible eliminar ruta estatica. problemas con la subred asignada.",
                                                    "strStatusCode" => "406"
                                                   );
                                    return $arrayRespuesta;
                                }
                            }
                            else
                            {
                                $arrayRespuesta = array(
                                                    "strStatus"     => "ERROR",
                                                    "strMensaje"    => "Imposible eliminar ruta estatica, no se encuentra la Subred configurada "
                                                                     . "a ser eliminada.",
                                                    "strStatusCode" => "406"
                                                   );
                                return $arrayRespuesta;
                            }
                        }
                    }
                }

                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);

                if ($strProceso == "botonEliminar")
                {
                    $objRutaElemento->setEstado("Eliminado");
                    $objServicioHistorial->setObservacion('Se Elimino la ruta '.$objRutaElemento->getTipo().
                                                          '<br/><b>Nombre: </b>'.$objRutaElemento->getNombre().
                                                          '<br/><b>Subred: </b>'.$strSubredConfigurada.
                                                          '<br/><b>Máscara: </b>'.$strMascaraRuta.
                                                          '<br/><b>Tipo: </b>'.$strTipoEnrutamiento);
                }

                if ($strProceso == "bgp")
                {
                    $objRutaElemento->setTipo("Ruta Dinámica");
                    $objServicioHistorial->setObservacion('Se Actualizó la ruta <b>'.
                                                          $objRutaElemento->getNombre().
                                                          '</b> al tipo : '.$objRutaElemento->getTipo());
                }

                $objRutaElemento->setFeUltMod(new \DateTime('now'));
                $objRutaElemento->setUsrUltMod($strUserClient);
                $this->emInfraestructura->merge($objRutaElemento);
                $this->emInfraestructura->flush();

                $objServicioHistorial->setIpCreacion($strIpClient);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($strUserClient);
                $objServicioHistorial->setEstado($objServicio->getEstado());
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();

                $strMensaje = "Ruta eliminada satisfactoriamente.";
                $strStatus  = "OK";

            }
            else
            {
                $arrayRespuesta = array(
                                        "strStatus"     => "ERROR",
                                        "strMensaje"    => "Problemas con la ejecucion del ws ".$mensaje,
                                        "strStatusCode" => "406"
                                       );
                return $arrayRespuesta;
            }
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Error al eliminar el protocolo de enrutamiento: ".$e->getMessage();
        }

        $arrayRespuesta = array(
                                "strStatus"     => $strStatus,
                                "strMensaje"    => $strMensaje,
                                "strStatusCode" => ""
                               );
        return $arrayRespuesta;
    }

    /**
     *
     * Metodo encargado de devolver si un producto tiene una caracteristica configurada enviada como parametro
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 04-01-2018
     *
     * @param  $objProducto , $strCaracteristica
     * @return Object
     */
    public function isContieneCaracteristica($objProducto , $strCaracteristica)
    {
        if(is_object($objProducto))
        {
            $objCaracteristica = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                   ->findOneBy(array('descripcionCaracteristica'  =>  $strCaracteristica,
                                                                     'estado'                     =>  'Activo'));
            if(is_object($objCaracteristica))
            {
                $objAdmiProdCaract = $this->emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                       ->findOneBy(array('productoId'       => $objProducto->getId(),
                                                                         'estado'           => 'Activo',
                    'caracteristicaId' => $objCaracteristica->getId())
                );
                if(is_object($objAdmiProdCaract))
                {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Metodo encargado de devolver informacion referente al grupo de solucion de Hosting, la info es relacionada a:
     *  - Maquinas Virtuales
     *  - Informacion de Vcenter, cluster y datastore
     *  - Sistemas Operativos
     *  - Recursos disponibles de storage , memoria y procesamiento
     *
     * @author José Alava<jialava@telconet.ec>
     * @version 1.0 18-06-2019
     *
     * @author Germán Valenzuela<gvalenzuela@telconet.ec>
     * @version 1.1 21-07-2019 - Se modifica el método por motivos que es exclusivo para obtener las maquinas virtuales de una solución.
     *
     * @param  Array $arrayParametros
     * @return Array $arrayRespuesta
     */
    public function getInformacionGeneralHosting($arrayParametros)
    {
        $intIdServicio  = $arrayParametros['intIdServicio'];
        $arrayRespuesta = array();
        $intCont        = 0;
        $objServicio    = $this->emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);

        if (is_object($objServicio))
        {
            $arrayRespuestaMv = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                    ->getArrayMaquinasVirtuales(array('intIdServicio' => $intIdServicio));

            foreach ($arrayRespuestaMv as $arrayDatos)
            {
                $arrayRecursos = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                        ->getArrayDetalleMV(array('elementoId' => $arrayDatos['idElemento']));

                $arrayRespuesta[$intCont] = $arrayRecursos[0];
                $arrayRespuesta[$intCont]['arrayInfoGeneral'] = $arrayDatos;
                $intCont++;
            }
        }

        return $arrayRespuesta;
    }

    /**
     *
     * Metodo encargado de devolver la ciudad parametrizada en base a la region del punto, este proceso es empleado para flujos de DC
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 11-01-2018
     *
     * @param Object $objServicio
     * @param String $strCodEmpresa
     * @return String $strCiudad
     */
    public function getCiudadRelacionadaPorRegion($objServicio,$strCodEmpresa)
    {
        $strCiudad       = '';
        $strRegion       = '';

        if(is_object($objServicio))
        {
            $intIdOficina = $objServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId();

            $objOficina   = $this->emComercial->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);

            if(is_object($objOficina))
            {
                $objCanton = $this->emComercial->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());

                if(is_object($objCanton))
                {
                    $strRegion = $objCanton->getProvinciaId()->getRegionId()->getNombreRegion();
                }
            }

            $arrayParametros = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('RELACION REGION CON CIUDAD PARA DATACENTER',
                                                            'COMERCIAL',
                                                            '',
                                                            $strRegion,
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $strCodEmpresa);
            if(!empty($arrayParametros))
            {
                $strCiudad = $arrayParametros['valor1'];
            }
        }

        return $strCiudad;
    }

    /**
     * obtieneInformacionTelcoGraph
     *
     * Metodo encargado de recuperar información necesaria para consumir ws de telcograph
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 15-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 05-05-2020 - Se agrega el nombre del punto para ser enviado al sistema de telcograf.
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.2 18-05-2020 - Se retorna la ultima milla del servicio.
     * @since 1.1
     * 
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.3 24-11-2020 - Se modifica que retorne la dirección del punto en lugar de la dirección del cliente
     *                           y se agrega que retorne el número de telefono del contacto técnico.
     * @since 1.2
     * 
     * @param  Array $arrayParametros [ 
     *                                  - objInfoServicio     Objeto con información de servicio a procesar
     *                                  - strProceso          Proceso que recupera información
     *                                  - strUsrCreacion      Usuario de creación a registrar en el proceso
     *                                  - strIpCreacion       Ip de creación a registrar en el proceso
     *                                ]
     * @return Array $arrayRespuesta [
     *                               - strLogin    Cadena de caracteres con login de servicio procesado
     *                               ]
     */
    public function obtieneInformacionTelcoGraph($arrayParametros)
    {
        $arrayRespuesta         = array();
        $strLogin               = "";
        $strIpHost              = "";
        $strRuc                 = "";
        $strNombreRazonSocial   = "";
        $intIdRazonSocial       = "";
        $strCobertura           = "";
        $strCanton              = "";
        $strModeloCpe           = "";
        $strLatitud             = "";
        $strLongitud            = "";
        $strBw1                 = "";
        $strBw2                 = "";
        $strFeUltMod            = "";
        $strDireccion           = "";
        $strNumeroTelefTecnico  = "";
        $strCorreoVip           = "";
        $strCorreoTecnico       = "";
        $strCorreoComercial     = "";
        $strEstadoServicio      = "";
        $strTipoEnlace          = "";
        $strTipoServicio        = "";
        $strEsVip               = "";
        $strMac                 = "";
        $strLoginAux            = "";
        $strNombreProducto      = "";
        $objInfoServicio        = $arrayParametros['objInfoServicio'];
        $arrayRespuesta['strStatus']  = 'ERROR';
        $arrayRespuesta['strMensaje'] = 'ERROR';
        try
        {
            if (!is_object($objInfoServicio))
            {
                throw new \Exception("No existe información del servicio");
            }
            $objAdmiProducto = $objInfoServicio->getProductoId();
            if (!is_object($objAdmiProducto))
            {
                throw new \Exception("No existe información del producto del servicio");
            }
            $objServicioTecnico = $this->emComercial
                                       ->getRepository('schemaBundle:InfoServicioTecnico')
                                       ->findOneBy(array("servicioId" => $objInfoServicio->getId()));
            if (!is_object($objServicioTecnico))
            {
                throw new \Exception("No existe información técnica del servicio");
            }
            $objInfoPunto = $objInfoServicio->getPuntoId();
            if (!is_object($objInfoPunto))
            {
                throw new \Exception("No existe información del punto");
            }
            $strLogin       = $objInfoPunto->getLogin();
            $strNombrePunto = $objInfoPunto->getNombrePunto();
            $strLatitud     = $objInfoPunto->getLatitud();
            $strLongitud    = $objInfoPunto->getLongitud();
            $strLoginAux    = $objInfoServicio->getLoginAux();
            $strBw1         = $this->getValorCaracteristicaServicio($objInfoServicio, 'CAPACIDAD1','Activo');
            $strBw2         = $this->getValorCaracteristicaServicio($objInfoServicio, 'CAPACIDAD2','Activo');
            $objHistorialServicio = $this->emComercial
                                         ->getRepository('schemaBundle:InfoServicioHistorial')
                                         ->findMaxHistorialPorServicio($objInfoServicio->getId());
            $strDireccion         = $objInfoPunto->getDireccion();
            if (!is_object($objHistorialServicio))
            {
                throw new \Exception("No existe información del historial del servicio");
            }
            $strFeUltMod   = $objHistorialServicio->getFeCreacion()->format('d-m-Y H:i:s');
            $objIpServicio = $this->emInfraestructura
                                  ->getRepository('schemaBundle:InfoIp')
                                  ->findOneBy(array('servicioId' => $objInfoServicio->getId(),
                                                    'estado'     => 'Activo'));
            if (!is_object($objIpServicio) && $arrayParametros['strProceso'] == "crear")
            {
                throw new \Exception("No existe información de la ip del servicio");
            }
            else
            {
                if (is_object($objIpServicio))
                {
                    $strIpHost = $objIpServicio->getIp();
                }
            }

            $objInfoPersonaEmpresaRol = $objInfoPunto->getPersonaEmpresaRolId();
            if (!is_object($objInfoPersonaEmpresaRol))
            {
                throw new \Exception("No existe información del rol del cliente");
            }
            $objEmpresaRolId = $objInfoPersonaEmpresaRol->getEmpresaRolId();
            if (is_object($objEmpresaRolId))
            {
                $objEmpresaCod = $objEmpresaRolId->getEmpresaCod();
                if(is_object($objEmpresaCod))
                {
                    $strEmpresaCod = $objEmpresaCod->getId();
                }
            }
            $objInfoPersona = $objInfoPersonaEmpresaRol->getPersonaId();
            if (!is_object($objInfoPersona))
            {
                throw new \Exception("No existe información de cliente");
            }
            $strNombreRazonSocial = $objInfoPersona->getRazonSocial() ? $objInfoPersona->getRazonSocial() :
                                    $objInfoPersona->getNombres() . " " . $objInfoPersona->getApellidos();
            $intIdRazonSocial     = $objInfoPersona->getId();
            $strRuc               = $objInfoPersona->getIdentificacionCliente();
            $objAdmiJurisdiccion  = $objInfoPunto->getPuntoCoberturaId();
            if (!is_object($objAdmiJurisdiccion))
            {
                throw new \Exception("No existe información de la jurisdiccion del punto");
            }
            $strCobertura  = $objAdmiJurisdiccion->getNombreJurisdiccion();
            $objAdmiSector = $objInfoPunto->getSectorId();
            if (!is_object($objAdmiSector))
            {
                throw new \Exception("No existe información del sector");
            }
            $objAdmiParroquia = $objAdmiSector->getParroquiaId();
            if (!is_object($objAdmiParroquia))
            {
                throw new \Exception("No existe información de la parroquia");
            }
            $objAdmiCanton = $objAdmiParroquia->getCantonId();
            if (!is_object($objAdmiCanton))
            {
                throw new \Exception("No existe información del canton");
            }
            $strCanton = $objAdmiCanton->getNombreCanton();
            $arrayCorreoVipRequest                    = array();
            $arrayCorreoVipRequest['intIdPersonaRol'] = $objInfoPersonaEmpresaRol->getId();
            $arrayCorreoVipResponse                   = $this->emComercial
                                                             ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                             ->getArrayCorreoVipPorPersonaRol($arrayCorreoVipRequest);
            if ($arrayCorreoVipResponse && isset($arrayCorreoVipResponse['strCorreo']))
            {
                $strCorreoVip = $arrayCorreoVipResponse['strCorreo'];
            }

            $arrayRespuestaFormasContactoTelefono = $this->emComercial
                                                         ->getRepository("schemaBundle:AdmiFormaContacto")
                                                         ->getRegistros('Telefono','Activo',0,99999);
            foreach($arrayRespuestaFormasContactoTelefono as $objFormaContacto)
            {
                $arrayFormasContacto[] = strtoupper($objFormaContacto->getDescripcionFormaContacto());
            }
            $arrayFormasContacto[] = 'CORREO ELECTRONICO';

            $arrayParametros['intIdPunto']          = $objInfoPunto->getId();
            $arrayParametros['strRolContacto']      = "Contacto Tecnico";
            $arrayParametros['arrayFormasContacto'] = $arrayFormasContacto;
            $arrayContactosCorreoTecnicoPunto = $this->emComercial
                                                        ->getRepository("schemaBundle:InfoPuntoContacto")
                                                        ->getFormasContactoPorPunto($arrayParametros);
            if ($arrayContactosCorreoTecnicoPunto)
            {
                foreach ($arrayContactosCorreoTecnicoPunto as $arrayContactoCorreoTecnicoPunto)
                {
                    if ($arrayContactoCorreoTecnicoPunto && !empty($arrayContactoCorreoTecnicoPunto['valor']))
                    {
                        if (  strlen(strstr($arrayContactoCorreoTecnicoPunto['descripcion'], 'Telefono')) > 0  )
                        {
                            $strNumeroTelefTecnico = $arrayContactoCorreoTecnicoPunto['valor'];
                        }
                        if ($arrayContactoCorreoTecnicoPunto['descripcion'] == 'Correo Electronico')
                        {
                            $strCorreoTecnico      = $arrayContactoCorreoTecnicoPunto['valor'];
                        }
                    }
                    if ((isset($strNumeroTelefTecnico) && !empty($strNumeroTelefTecnico))&&
                        (isset($strCorreoTecnico) && !empty($strCorreoTecnico)))
                    {
                        break;
                    }
                }
            }

            $arrayParametrosCaractUserPortal = array('descripcionCaracteristica' => "USUARIO_PORTAL",
                                                     'estado'                    => "Activo");
            $objCaractUserPortal = $this->emComercial
                                        ->getRepository('schemaBundle:AdmiCaracteristica')
                                        ->findOneBy($arrayParametrosCaractUserPortal);
            if (!is_object($objCaractUserPortal))
            {
                throw new \Exception("No existe información de caracteristica USUARIO PORTAL");
            }

            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
            $objCaractUsuarioPortal = $this->emComercial
                                           ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                           ->findCaracteristicaPorCriterios
                                           (array("caracteristicaId"       => $objCaractUserPortal->getId(),
                                                  "personaEmpresaRolId"    => $objInfoPersonaEmpresaRol->getId(),
                                                  "empresaCod"             => $strEmpresaCod,
                                                  "estado"                 => "Activo"));
            if (is_object($objCaractUsuarioPortal))
            {
                $strCorreoTecnico = $objCaractUsuarioPortal->getValor();
            }
            $arrayContactosCorreoComercialPunto = $this->emComercial
                                                       ->getRepository("schemaBundle:InfoPuntoContacto")
                                                       ->getArrayContactosPorPuntoYTipo($objInfoPunto->getId(), "Contacto Comercial");

            if ($arrayContactosCorreoComercialPunto)
            {
                foreach ($arrayContactosCorreoComercialPunto as $arrayContactoCorreoComercialPunto)
                {
                    if ($arrayContactoCorreoComercialPunto && !empty($arrayContactoCorreoComercialPunto['valor']))
                    {
                        $strCorreoComercial = $arrayContactoCorreoComercialPunto['valor'];
                        break;
                    }
                }
            }
            $strEstadoServicio  = $objInfoServicio->getEstado();
            $strTipoEnlace      = $objServicioTecnico->getTipoEnlace();
            $strTipoServicio    = $objAdmiProducto->getNombreTecnico();
            $strNombreProducto  = $objAdmiProducto->getDescripcionProducto();
            $strEsVip           = "NO";
            $arrayCaractVipRequest = array();
            $arrayCaractVipRequest['intIdPersonaRol'] = $objInfoPersonaEmpresaRol->getId();
            $arrayCaractVipResponse = $this->emComercial
                                           ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                           ->getArrayEsVipPorPersonaRol($arrayCaractVipRequest);
            if ($arrayCaractVipResponse && isset($arrayCaractVipResponse['strEsVip']))
            {
                $strEsVip = $arrayCaractVipResponse['strEsVip'];
            }
            $intIdUltimaMilla = $objServicioTecnico->getUltimaMillaId();
            if(!empty($intIdUltimaMilla))
            {
                $objAdmiTipoMedio    = $this->emInfraestructura
                                            ->getRepository('schemaBundle:AdmiTipoMedio')
                                            ->findOneById($intIdUltimaMilla);

                $strUltimaMilla      = $objAdmiTipoMedio->getNombreTipoMedio();
            }
            $intElementoId = $objServicioTecnico->getElementoId();
            if(!empty($intElementoId))
            {
                $objElementoSW       = $this->emInfraestructura
                                            ->getRepository('schemaBundle:InfoElemento')
                                            ->findOneById($intElementoId);

                $strNombreEleSW      = $objElementoSW->getNombreElemento();
            }
            $intInterElementoId = $objServicioTecnico->getInterfaceElementoId();
            if(!empty($intInterElementoId))
            {
                $objInterElementoSW  = $this->emInfraestructura
                                            ->getRepository('schemaBundle:InfoInterfaceElemento')
                                            ->findOneById($intInterElementoId);

                $strNombreInterEleSW = $objInterElementoSW->getNombreInterfaceElemento();
            }
            $strModeloCpe = "";
            $boolEsPseudoPe = $this->emComercial
                                   ->getRepository('schemaBundle:InfoServicio')
                                   ->esServicioPseudoPe($objInfoServicio);
            $arrayResultadoCpe = $this->emInfraestructura
                                      ->getRepository('schemaBundle:InfoInterfaceElemento')
                                      ->getMacCpePorServicioInterface($objInfoServicio->getId(), $boolEsPseudoPe);
            if ($arrayResultadoCpe)
            {
                if (isset($arrayResultadoCpe['elementoId']))
                {
                    $objElemento = $this->emInfraestructura
                                        ->getRepository('schemaBundle:InfoElemento')
                                        ->find($arrayResultadoCpe['elementoId']);

                    if (is_object($objElemento))
                    {
                        $objAdmiModelo = $objElemento->getModeloElementoId();
                        if (is_object($objAdmiModelo))
                        {
                            $strModeloCpe = $objAdmiModelo->getNombreModeloElemento();
                        }
                    }
                }
                if (isset($arrayResultadoCpe['mac']))
                {
                    $strMac = $arrayResultadoCpe['mac'];
                }
            }

            if( $strIpHost == "" || $strMac == "" || $strModeloCpe == "" )
            {
                if($objServicioTecnico->getElementoClienteId())
                {
                    $objElementoCpe = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnico->getElementoClienteId());
                }

                $objServicioProdCaractMacCpe = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                    ->findOneBy(array("elementoId" => $objServicioTecnico->getElementoClienteId(),
                                                                                      "detalleNombre" => "MAC",
                                                                                      "estado" => "Activo"));
                if($objServicioProdCaractMacCpe)
                {
                    $strMac = $objServicioProdCaractMacCpe->getDetalleValor();
                }

                if (is_object($objElementoCpe))
                {
                    $objModeloCpe = $objElementoCpe->getModeloElementoId();
                    $strModeloCpe = (is_object($objModeloCpe))?$objModeloCpe->getNombreModeloElemento():"";
                }
                $objIpeCpe = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                     ->findOneByElementoId($objServicioTecnico->getElementoClienteId());
                if (is_object($objIpeCpe))
                {
                    $strIpHost = $objIpeCpe->getIp();
                }
            }

            $arrayRespuesta['strLogin']             = $strLogin;
            $arrayRespuesta['strNombrePunto']       = $strNombrePunto;
            $arrayRespuesta['strIpHost']            = $strIpHost;
            $arrayRespuesta['strRuc']               = $strRuc;
            $arrayRespuesta['strNombreRazonSocial'] = str_replace(';', '', $strNombreRazonSocial); //consultar si para produccion
            $arrayRespuesta['intIdRazonSocial']     = $intIdRazonSocial;
            $arrayRespuesta['strCobertura']         = $strCobertura;
            $arrayRespuesta['strCanton']            = $strCanton;
            $arrayRespuesta['strModeloCpe']         = $strModeloCpe;
            $arrayRespuesta['strLatitud']           = $strLatitud;
            $arrayRespuesta['strLongitud']          = $strLongitud;
            $arrayRespuesta['strBw1']               = $strBw1;
            $arrayRespuesta['strBw2']               = $strBw2;
            $arrayRespuesta['strFeUltMod']          = $strFeUltMod;
            $arrayRespuesta['strDireccion']         = $strDireccion;
            $arrayRespuesta['strCorreoVip']         = $strCorreoVip;
            $arrayRespuesta['strCorreoTecnico']     = $strCorreoTecnico;
            $arrayRespuesta['strCorreoComercial']   = $strCorreoComercial;
            $arrayRespuesta['strEstadoServicio']    = $strEstadoServicio;
            $arrayRespuesta['strTelefonoTecnico']   = $strNumeroTelefTecnico;
            $arrayRespuesta['strTipoEnlace']        = $strTipoEnlace;
            $arrayRespuesta['strTipoServicio']      = $strTipoServicio;
            $arrayRespuesta['strEsVip']             = $strEsVip;
            $arrayRespuesta['strMac']               = $strMac;
            $arrayRespuesta['strLoginAux']          = $strLoginAux;
            $arrayRespuesta['strNombreProducto']    = $strNombreProducto;
            $arrayRespuesta['strUltimaMilla']       = $strUltimaMilla;
            $arrayRespuesta['strNombreEleSW']       = $strNombreEleSW;
            $arrayRespuesta['strNombreInterEleSW']  = $strNombreInterEleSW;

            if ( $arrayParametros['strProceso'] == "crear" &&
                   (
                    empty($arrayRespuesta['strLogin']) ||
                    empty($arrayRespuesta['strIpHost']) ||
                    empty($arrayRespuesta['strRuc']) ||
                    empty($arrayRespuesta['strNombreRazonSocial']) ||
                    empty($arrayRespuesta['intIdRazonSocial']) ||
                    empty($arrayRespuesta['strCobertura']) ||
                    empty($arrayRespuesta['strCanton']) ||
                    empty($arrayRespuesta['strModeloCpe']) ||
                    empty($arrayRespuesta['strLatitud']) ||
                    empty($arrayRespuesta['strLongitud']) ||
                    empty($arrayRespuesta['strBw1']) ||
                    empty($arrayRespuesta['strBw2']) ||
                    empty($arrayRespuesta['strFeUltMod']) ||
                    empty($arrayRespuesta['strDireccion']) ||
                    empty($arrayRespuesta['strCorreoTecnico']) ||
                    empty($arrayRespuesta['strEstadoServicio']) ||
                    empty($arrayRespuesta['strTipoEnlace']) ||
                    empty($arrayRespuesta['strTipoServicio']) ||
                    empty($arrayRespuesta['strMac']) ||
                    empty($arrayRespuesta['strLoginAux']) ||
                    empty($arrayRespuesta['strNombreProducto'])
                   )
               )
            {
                $arrayRespuesta['strStatus']  = "ERROR";
                $arrayRespuesta['strMensaje'] = "Infomación incompleta: ". json_encode($arrayRespuesta);
            }
            else if ($arrayParametros['strProceso'] == "cancelar")
            {
                $arrayRespuesta['strIpHost']            = 'N/A';
                $arrayRespuesta['strModeloCpe']         = 'N/A';
                $arrayRespuesta['strBw1']               = 'N/A';
                $arrayRespuesta['strBw2']               = 'N/A';
                $arrayRespuesta['strCorreoVip']         = 'N/A';
                $arrayRespuesta['strCorreoComercial']   = 'N/A';
                $arrayRespuesta['strEsVip']             = 'N/A';
                $arrayRespuesta['strMac']               = 'N/A';
                $arrayRespuesta['strStatus']  = "OK";
                $arrayRespuesta['strMensaje'] = "Infomación completa";
            }
            else
            {
                $arrayRespuesta['strStatus']  = "OK";
                $arrayRespuesta['strMensaje'] = "Infomación completa";
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilService
                 ->insertError( 'Telcos+',
                                'InfoServicioTecnicoService.obtieneInformacionTelcoGraph',
                                $objEx->getMessage(),
                                $arrayParametros['strUsrCreacion'],
                                $arrayParametros['strIpCreacion']
                              );
            $arrayRespuesta['strStatus']  = "ERROR";
            $arrayRespuesta['strMensaje'] = "Ocurrio un error general al obtener información en proceso TelcoGraph";
        }
        return $arrayRespuesta;
    }

    /**
     * procesaHostTelcoGraph
     *
     * Metodo encargado procesar creación, actualización y cancelación de host en app TelcoGraph
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 16-03-2018
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 01-10-2018  Se agregan validaciones de proceso telcograf por motivo de reintento y por procesamiento masivo
     *                          de clientes que aun no tenían habilitada la herramienta
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 12-11-2018   Se agrega parámetro  Server Ip para poder realizar procesamiento masivo de clientes pendientes de creación
     * @since 1.1
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 30-01-2020 - Se agrega el parámetro *strValidarFacturacion* para no validar el valor de la facturación
     *                           mensual del cliente en caso que el parámetro sea igual a *NO*.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.4 05-05-2020 - Se agrega el nombre del punto para ser enviado al sistema de telcograf.
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.5 11-06-2020 - Se implementa la creación del grupo en el LDAP
     * @since 1.4
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.6 11-02-2021 - Se realiza un control de errores cuando ocurre un excepción en el proceso.
     *
     * @param  Array $arrayParametros [ 
     *                                  - objInfoServicio     Objeto con información de servicio a procesar
     *                                  - strProceso          Cadena de caracteres con proceso a ejecutar
     *                                  - strIpCreacion       Cadena de caracteres que especifíca ip donde se ejecuta el proceso
     *                                  - strUsrCreacion      Cadena de caracteres con usuario que ejecuta la operación
     *                                ]
     * @return Array $arrayRespuesta [
     *                               - strLogin    Cadena de caracteres con login de servicio procesado
     *                               ]
     */
    public function procesaHostTelcoGraph($arrayParametros)
    {
        $strLoginServicio       = null;
        $strProceso             = $arrayParametros["strProceso"];
        $strValidarFacturacion  = $arrayParametros['strValidarFacturacion'];
        $floatTotalFacturacion  = 0.00;
        $booleanContinuaProceso = false;
        $arrayServiciosProcesar = array();
        $arrayRespuestaProceso  = array("strStatus"  => "ERROR",
                                        "strMensaje" => "Problemas al ejecutar el proceso de Telcograf.<br/>".
                                                        "Por favor notificar al departamento de Sistemas.");
        try
        {
            if ($this->strTelcografExecute === "N")
            {
                throw new \Exception("La herramienta se encuentra inhabilitada, favor notificar al departamento de Sistemas.");
            }

            if ($strProceso === "crearMasivo")
            {
                $arrayParametros["objInfoServicio"] = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                        ->getServicioPorLoginAux($arrayParametros);
            }

            $objInfoServicio = $arrayParametros["objInfoServicio"];
            if (!is_object($objInfoServicio))
            {
                throw new \Exception("No existe información del servicio");
            }

            $objInfoPunto = $objInfoServicio->getPuntoId();
            if (!is_object($objInfoPunto))
            {
                throw new \Exception("No existe información del punto");
            }

            $objInfoPersonaEmpresaRol = $objInfoPunto->getPersonaEmpresaRolId();
            if (!is_object($objInfoPersonaEmpresaRol))
            {
                throw new \Exception("No existe información del rol del cliente");
            }

            $intIdServicio          = $objInfoServicio->getId();
            $strLoginCliente        = $objInfoPunto->getLogin();
            $strLoginServicio       = ', Login: '.$strLoginCliente.', Servicio: '.$intIdServicio;
            $intIdPersonaEmpresaRol = $objInfoPersonaEmpresaRol->getId();
            $objEmpresaRolId        = $objInfoPersonaEmpresaRol->getEmpresaRolId();

            if (is_object($objEmpresaRolId))
            {
                $objEmpresaCod = $objEmpresaRolId->getEmpresaCod();
                if (is_object($objEmpresaCod))
                {
                    $strEmpresaCod = $objEmpresaCod->getId();
                }
            }

            $floatValorFacturacion     = 1000.00;
            $arrayParametrosTelcograph = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('TELCOGRAPH','TECNICO','','VALOR_FACTURACION','','','','','',$strEmpresaCod);
            if (!empty($arrayParametrosTelcograph))
            {
                $floatValorFacturacion = floatval($arrayParametrosTelcograph['valor1']);
            }

            //Se verifica si el cliente ya cuenta con una característica de *MONITOREO_BAJO_DEMANDA*
            $objCaractMonBajDema = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array('descripcionCaracteristica' => "MONITOREO_BAJO_DEMANDA",
                                      'estado'                    => "Activo"));

            if (is_object($objCaractMonBajDema))
            {
                $objCarMonBajoDemPer = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                        ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractMonBajDema->getId(),
                                                               "personaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                               "empresaCod"          => $strEmpresaCod,
                                                               "valor"               => 'SI',
                                                               "estado"              => "Activo"));
            }

            //validar el valor facturado mayor a $1000 para lanzar a telcograph.
            if ($strProceso == "crear" || $strProceso == "crearMasivo")
            {
                $arrayParametrosFacturacion = array();
                $arrayParametrosFacturacion['intIdPersonaRol'] = $objInfoPersonaEmpresaRol->getId();
                $floatTotalFacturacion = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->getTotalFacturacionTelcograph($arrayParametrosFacturacion);

                /*
                 * Solo se retona el error en caso que el cliente no cumpla con el mínimo valor de facturación, no tenga ingresada
                 * la característica de *MONITOREO_BAJO_DEMANDA* y el valor de strValidarFacturacion sea diferente de *NO*
                 */
                if ($floatTotalFacturacion < $floatValorFacturacion && !is_object($objCarMonBajoDemPer) && $strValidarFacturacion !== 'NO')
                {
                    throw new \Exception("Facturación menor a $" . $floatValorFacturacion . ".");
                }
            }

            //Obtenemos la carácteristica de PORTAL_ACTIVO.
            $objCaractPortalActivo = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array("descripcionCaracteristica" => "PORTAL_ACTIVO",
                                      "estado"                    => "Activo"));

            if (!is_object($objCaractPortalActivo))
            {
                throw new \Exception("No existe información de carácteristica PORTAL ACTIVO");
            }

            $intIdCaractPortalActivo = $objCaractPortalActivo->getId();

            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
            $objCarPortalActivoExist = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                    ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $intIdCaractPortalActivo,
                                                           "personaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                           "empresaCod"          => $strEmpresaCod,
                                                           "estado"              => "Activo"));

            if ($strProceso === "crear" && (!is_object($objCarPortalActivoExist) ||
                 (is_object($objCarPortalActivoExist) && $objCarPortalActivoExist->getEstado() === "Suspendido")) &&
                empty($arrayParametros['strOpcion']))
            {
                //se recupera listado de servicios pendientes de enviar a monitorear y llena array de objetos servicios a procesar
                //ejecutar query con idservicios y recuperar objetos llevar array y abajo iterarlos
                $arrayParametrosListado                 = array();
                $arrayParametrosListado["idPersonaRol"] = $intIdPersonaEmpresaRol;
                $arrayListadoServicios = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                        ->getListadoServiciosACrearTelcograph($arrayParametrosListado);

                foreach ($arrayListadoServicios as $arrayServicio)
                {
                    $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                            ->find($arrayServicio['idServicio']);
                    $arrayServiciosProcesar[] = $objInfoServicio;
                }
            }
            else
            {
                //Genera Información necesaria para ejecutar ws de App TelcoGraph
                if ($strProceso === "crear"      ||
                    $strProceso === "actualizar" ||
                    $strProceso === "cancelar"   ||
                    $strProceso === "crearMasivo")
                {
                    $arrayServiciosProcesar[] = $arrayParametros['objInfoServicio'];
                }
            }

            foreach ($arrayServiciosProcesar as $objInfoServicio)
            {
                $strCreaLdap      = 'NO';
                $intIdServicio    = is_object($objInfoServicio) ? $objInfoServicio->getId() : $intIdServicio;
                $strLoginCliente  = is_object($objInfoServicio) && is_object($objInfoServicio->getPuntoId())
                        ? $objInfoServicio->getPuntoId()->getLogin() : $strLoginCliente;
                $strLoginServicio = ', Login: '.$strLoginCliente.', Servicio: '.$intIdServicio;

                $objCarPortalActivoExist = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                        ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $intIdCaractPortalActivo,
                                                               "personaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                               "empresaCod"          => $strEmpresaCod,
                                                               "estado"              => "Activo"));

                $this->emComercial->getConnection()->beginTransaction();
                $arrayObtieneInfoResponse = array();

                try
                {
                    //Genera Información necesaria para ejecutar WS de Telcograf.
                    if ($strProceso === "crear"      ||
                        $strProceso === "actualizar" ||
                        $strProceso === "cancelar"   ||
                        $strProceso === "crearMasivo")
                    {
                        $arrayObtenerInfoRequest = array();
                        $arrayObtenerInfoRequest['objInfoServicio'] = $objInfoServicio;
                        $arrayObtenerInfoRequest['strUsrCreacion']  = $arrayParametros['strUsrCreacion'];
                        $arrayObtenerInfoRequest['strIpCreacion']   = $arrayParametros['strIpCreacion'];
                        $arrayObtenerInfoRequest['strEstadoActual'] = $arrayParametros['strEstadoActual'];
                        $arrayObtenerInfoRequest['strProceso']      = $strProceso;
                        $arrayObtieneInfoResponse = $this->obtieneInformacionTelcoGraph($arrayObtenerInfoRequest);

                        if ($arrayObtieneInfoResponse["strStatus"] != "OK")
                        {
                            $arrayRespuestaProceso["strMensaje"] = 'Problemas al obtener la información del servicio.';
                            throw new \Exception($arrayObtieneInfoResponse['strMensaje']);
                        }

                        if ($strProceso === "crearMasivo")
                        {
                            $arrayParametros['strRuc']    = $arrayObtieneInfoResponse["strRuc"];
                            $arrayParametros["strIpHost"] = $arrayObtieneInfoResponse["strIpHost"];
                            $arrayObtieneInfoResponse["strCorreoTecnico"] = $arrayParametros['strCorreoTecnico'];
                        }
                    }

                    //Programación especifica por proceso a ejecutar.
                    if ($strProceso === "crear" || $strProceso === "crearMasivo")
                    {
                        $arrayParametrosCaractUserPortal = array('descripcionCaracteristica' => "USUARIO_PORTAL",
                                                                 'estado'                    => "Activo");

                        $objCaractUserPortal = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                ->findOneBy($arrayParametrosCaractUserPortal);

                        if (!is_object($objCaractUserPortal))
                        {
                            throw new \Exception("No existe información de caracteristica USUARIO PORTAL");
                        }

                        $arrayParametrosCaractPassPortal = array('descripcionCaracteristica' => "PASSWORD_PORTAL",
                                                                 'estado'                    => "Activo");

                        $objCaractPassPortal = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                ->findOneBy($arrayParametrosCaractPassPortal);

                        if (!is_object($objCaractPassPortal))
                        {
                            throw new \Exception("No existe información de caracteristica PASSWORD PORTAL");
                        }

                        /*
                         * Se obtiene el objeto de la característica *MONITOREO_BAJO_DEMANDA* en caso que el valor de
                         * strValidarFacturacion sea igual a *NO*
                         */
                        $objCaractMonBajDema = null;
                        if ($strValidarFacturacion === 'NO' || is_object($objCarMonBajoDemPer))
                        {
                            $objCarMonBajoDemPer = null;
                            $objCaractMonBajDema = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                    ->findOneBy(array('descripcionCaracteristica' => "MONITOREO_BAJO_DEMANDA",
                                                      'estado'                    => "Activo"));

                            if (!is_object($objCaractMonBajDema))
                            {
                                throw new \Exception("No existe información de la característica MONITOREO_BAJO_DEMANDA");
                            }
                        }

                        $intIdCaractUserPortal = $objCaractUserPortal->getId();

                        if (!is_object($objCarPortalActivoExist) ||
                            (is_object($objCarPortalActivoExist) && $objCarPortalActivoExist->getEstado() === "Suspendido"))
                        {
                            //Se verifica que el correo no esté asociado como usuario del portal para otro cliente
                            $strCorreoTecnico     = $arrayObtieneInfoResponse["strCorreoTecnico"];
                            $objCarUsrPortalExist = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                    ->findCaracteristicaPorCriterios(array("caracteristicaId"       => $intIdCaractUserPortal,
                                                                           "notPersonaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                                           "empresaCod"             => $strEmpresaCod,
                                                                           "valor"                  => $strCorreoTecnico,
                                                                           "estado"                 => "Activo"));

                            if (is_object($objCarUsrPortalExist))
                            {
                                //AQUI COLOCAR CARACTERISTICA PARA PERMITIR INGRESO A MANO DE CONTACTO TECNICO
                                $strMsjError = "Ya existe otro cliente con el mismo usuario de acceso ".
                                               "al portal. Por favor seleccione otro correo electrónico como usuario!";
                                throw new \Exception($strMsjError);
                            }

                            if (!is_object($objCarPortalActivoExist))
                            {
                                //se crea caracteristica de usuario de acceso al portal
                                $arrayParamCaracPortal = array("objPersonaEmpresaRol" => $objInfoPersonaEmpresaRol,
                                                               "objCaracteristica"    => $objCaractUserPortal,
                                                               "strValor"             => $arrayObtieneInfoResponse["strCorreoTecnico"],
                                                               "strUsrCreacion"       => $arrayParametros['strUsrCreacion'],
                                                               "strIpClient"          => $arrayParametros['strIpCreacion']);

                                $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracPortal);
                            }

                            //MONITOREO_BAJO_DEMANDA
                            if (!is_object($objCarPortalActivoExist) && is_object($objCaractMonBajDema))
                            {
                                $objCarMonBajoDemPer = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                        ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractMonBajDema->getId(),
                                                                               "personaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                                               "empresaCod"          => $strEmpresaCod));

                                if (is_object($objCarMonBajoDemPer))
                                {
                                    $objCarMonBajoDemPer->setValor("SI");
                                    $objCarMonBajoDemPer->setEstado("Activo");
                                    $this->emComercial->persist($objCarMonBajoDemPer);
                                    $this->emComercial->flush();
                                }
                                else
                                {
                                    //Se crea la característica *MONITOREO_BAJO_DEMANDA*
                                    $arrayParamMoniBajoDemanda = array("objPersonaEmpresaRol" => $objInfoPersonaEmpresaRol,
                                                                       "objCaracteristica"    => $objCaractMonBajDema,
                                                                       "strValor"             => 'SI',
                                                                       "strUsrCreacion"       => $arrayParametros['strUsrCreacion'],
                                                                       "strIpClient"          => $arrayParametros['strIpCreacion']);

                                    $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamMoniBajoDemanda);
                                }
                            }

                            //se crea característica de password de acceso al portal de telcograf.
                            $arrayParamClaveAleat = array("intMinLongitudClave" => 8,"intMaxLongitudClave" => 15);
                            $strPassAleatoria = $this->serviceTelcoGraph->generarClaveAleatoria($arrayParamClaveAleat);
                            if (isset($strPassAleatoria) && !empty($strPassAleatoria))
                            {
                                $arrayParamCaracPortal = array("objPersonaEmpresaRol" => $objInfoPersonaEmpresaRol,
                                                               "objCaracteristica"    => $objCaractPassPortal,
                                                               "strValor"             => $strPassAleatoria,
                                                               "strUsrCreacion"       => $arrayParametros['strUsrCreacion'],
                                                               "strIpClient"          => $arrayParametros['strIpCreacion']);

                                $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracPortal);
                            }
                            else
                            {
                                $arrayRespuestaProceso["strMensaje"] = 'Problemas al generar código temporal del servicio.';
                                throw new \Exception("No se ha podido generar el código temporal");
                            }

                            //Se crea la característica para registrar que al cliente ya se le generó el usuario y código de verificación.
                            if (!is_object($objCarPortalActivoExist))
                            {
                                $arrayParamCaracPortal = array("objPersonaEmpresaRol" => $objInfoPersonaEmpresaRol,
                                                               "objCaracteristica"    => $objCaractPortalActivo,
                                                               "strUsrCreacion"       => $arrayParametros['strUsrCreacion'],
                                                               "strIpClient"          => $arrayParametros['strIpCreacion'],
                                                               "strValor"             => "NO",);

                                $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracPortal);
                            }
                            else
                            {
                                $objCarPortalActivoExist->setValor("NO");
                                $objCarPortalActivoExist->setEstado("Activo");
                                $this->emComercial->persist($objCarPortalActivoExist);
                                $this->emComercial->flush();
                            }

                            //Se valida que usuario exista en LDAP, caso contrario se procede a registrar.
                            $arrayParametrosValidaLdap = array("strCorreo"        => $arrayObtieneInfoResponse["strCorreoTecnico"],
                                                               "strloginServicio" => $strLoginServicio,
                                                               "strUsrCreacion"   => $arrayParametros["strUsrCreacion"],
                                                               "strIpClient"      => $arrayParametros["strIpCreacion"]);

                            $arrayRespuestaValidaLdap = $this->serviceTelcoGraph->validarUsuarioLdap($arrayParametrosValidaLdap);
                            if ($arrayRespuestaValidaLdap["strStatus"] === "ERROR" &&
                                $arrayRespuestaValidaLdap["strMsj"]    === "Usuario Incorrecto o Inexistente, ingrese nuevamente")
                            {
                                /*
                                 * Se procede a registrar el usuario en LDAP, se almacena en Telcos
                                 * correo electronico y contraseña generada.
                                 */
                                $arrayParametrosCreaLdap = array("strNombre"        => $arrayObtieneInfoResponse["strNombreRazonSocial"],
                                                                 "strApellido"      => $arrayObtieneInfoResponse["strNombreRazonSocial"],
                                                                 "strMail"          => $arrayObtieneInfoResponse["strCorreoTecnico"],
                                                                 "strPass"          => $strPassAleatoria,
                                                                 "strloginServicio" => $strLoginServicio,
                                                                 "strUsrCreacion"   => $arrayParametros["strUsrCreacion"],
                                                                 "strIpClient"      => $arrayParametros["strIpCreacion"]);

                                $arrayRespuestaCreaLdap = $this->serviceTelcoGraph->crearClienteLdap($arrayParametrosCreaLdap);
                                if ($arrayRespuestaCreaLdap["strStatus"] !== "OK")
                                {
                                    throw new \Exception("Msj: ".$arrayRespuestaCreaLdap["strMsj"].", ".
                                                         "Excepcion: " .$arrayRespuestaCreaLdap["strMsjEx"]);
                                }

                                $strCreaLdap            = "SI";
                                $booleanContinuaProceso = true;
                            }
                            else
                            {
                                if ($arrayRespuestaValidaLdap["strStatus"] == "ERROR")
                                {
                                    $arrayRespuestaProceso["strMensaje"] = 'Problemas al consultar información del usuario LDAP del servicio.';
                                    throw new \Exception("Msj: ".$arrayRespuestaValidaLdap["strMsj"].", ".
                                                         "Excepcion: ".$arrayRespuestaValidaLdap["strMsjEx"]);
                                }

                                if ($arrayRespuestaValidaLdap["strStatus"] == "OK")
                                {
                                    $booleanContinuaProceso = true;
                                }
                            }

                            if (!$booleanContinuaProceso)
                            {

                                $arrayRespuestaProceso["strMensaje"] = 'Problemas al crear el usuario LDAP del servicio.';
                                throw new \Exception("Msj: ".
                                                        $arrayRespuestaValidaLdap["strMsj"].
                                                        $arrayRespuestaCreaLdap["strMsj"]." ".
                                                     "Excepcion: ".
                                                        $arrayRespuestaValidaLdap["strMsjEx"].
                                                        $arrayRespuestaCreaLdap["strMsjEx"]);
                            }
                        }
                    }
                    else if ($strProceso === "cancelar")
                    {
                        $floatTotalFacturacion = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                ->getTotalFacturacionTelcograph(array('intIdPersonaRol' => $intIdPersonaEmpresaRol));

                        if ($floatTotalFacturacion < $floatValorFacturacion)
                        {
                            //Se verifica que el cliente no tenga registrado accesos al portal de Telcograf.
                            $objCarPortalActivoExist = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                    ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $intIdCaractPortalActivo,
                                                                           "personaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                                           "empresaCod"          => $strEmpresaCod,
                                                                           "estado"              => 'Activo'));

                            if (!is_object($objCarPortalActivoExist))
                            {
                                throw new \Exception("No existe información de caracteristica PORTAL ACTIVO");
                            }

                            $objCarPortalActivoExist->setEstado("Suspendido");
                            $this->emComercial->persist($objCarPortalActivoExist);
                            $this->emComercial->flush();

                            $arrayParametrosCaractPassPortal = array('descripcionCaracteristica' => "PASSWORD_PORTAL",
                                                                     'estado'                    => "Activo");

                            $objCaractPassPortal = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                    ->findOneBy($arrayParametrosCaractPassPortal);

                            if (!is_object($objCaractPassPortal))
                            {
                                throw new \Exception("No existe información de caracteristica PASSWORD PORTAL");
                            }

                            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
                            $objCarPassExist = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                    ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractPassPortal->getId(),
                                                                           "personaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                                           "empresaCod"          => $strEmpresaCod,
                                                                           "estado"              => "Activo"));

                            if (is_object($objCarPassExist))
                            {
                                $objCarPassExist->setEstado("Eliminado");
                                $this->emComercial->persist($objCarPassExist);
                                $this->emComercial->flush();
                            }

                            $arrayParametrosCaractOrganizacion = array('descripcionCaracteristica' => "ORGANIZACION_TELCOGRAPH",
                                                                       'estado'                    => "Activo");

                            $objCaractOrganizacion = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                    ->findOneBy($arrayParametrosCaractOrganizacion);

                            if (!is_object($objCaractOrganizacion))
                            {
                                throw new \Exception("No existe información de caracteristica ORGANIZACION TELCOGRAPH");
                            }

                            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
                            $objCarOrganizacion = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                    ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractOrganizacion->getId(),
                                                                           "personaEmpresaRolId" => $intIdPersonaEmpresaRol,
                                                                           "empresaCod"          => $strEmpresaCod,
                                                                           "estado"              => "Activo"));

                            if (is_object($objCarOrganizacion))
                            {
                                $arrayParametrosEliminaGrupoLdap = array("strGrupoLdap"     => $objCarOrganizacion->getValor(),
                                                                         "strloginServicio" => $strLoginServicio,
                                                                         "strUsrCreacion"   => $arrayParametros["strUsrCreacion"],
                                                                         "strIpClient"      => $arrayParametros["strIpCreacion"]);

                                $this->serviceTelcoGraph->eliminarGrupoLdap($arrayParametrosEliminaGrupoLdap);
                            }

                            //verifico si existe usuario, en caso de existir se elimina.
                            $arrayParametrosValidaLdap = array("strCorreo"        => $arrayObtieneInfoResponse["strCorreoTecnico"],
                                                               "strloginServicio" => $strLoginServicio,
                                                               "strUsrCreacion"   => $arrayParametros["strUsrCreacion"],
                                                               "strIpClient"      => $arrayParametros["strIpCreacion"]);

                            $arrayRespuestaValidaLdap = $this->serviceTelcoGraph->validarUsuarioLdap($arrayParametrosValidaLdap);

                            if ($arrayRespuestaValidaLdap["strStatus"] == "OK")
                            {
                                $arrayParametrosEliminaLdap = array("strCorreo"       => $arrayObtieneInfoResponse["strCorreoTecnico"],
                                                                   "strloginServicio" => $strLoginServicio,
                                                                    "strUsrCreacion"  => $arrayParametros["strUsrCreacion"],
                                                                    "strIpClient"     => $arrayParametros["strIpCreacion"]);

                                $arrayRespuestaValidaLdap = $this->serviceTelcoGraph->eliminarUsuarioLdap($arrayParametrosEliminaLdap);
                            }

                            $this->utilService->insertError('InfoServicioTecnicoService',
                                                            'procesaHostTelcoGraph_cancelar',
                                                             $strMensajeExcepcion.$strLoginServicio,
                                                             $arrayParametros['strUsrCreacion'],
                                                             $arrayParametros['strIpCreacion']);
                        }
                    }
                    else
                    {
                        $arrayParametrosWSBoc = array();
                    }

                    //generar Array con parametros a utilizar dependiento del tipo de proceso a ejecutar
                    if ($strProceso === "crear"      ||
                        $strProceso === "actualizar" ||
                        $strProceso === "cancelar"   ||
                        $strProceso === "CAMBIORAZONSOCIAL")
                    {
                        if ($strProceso == "crear"      ||
                            $strProceso == "actualizar" ||
                            $strProceso == "cancelar")
                        {
                            $arrayParametrosWSBoc = array();
                            $arrayParametrosToken = array("strIpClient" => $arrayParametros["strIpCreacion"],
                                                          "nombreApp"   => "APP.TELCOGRAPH",
                                                          "gatewayWs"   => "Telcos",
                                                          "serviceWs"   => "TecnicoWSController",
                                                          "methodWs"    => "procesarAction",
                                                          "userWs"      => "TELCOGRAPH");

                            $arrayRespuestaToken = $this->serviceTelcoGraph->generateTokenRequestWs($arrayParametrosToken);

                            if ($arrayRespuestaToken["strStatus"] != "OK")
                            {
                                $arrayRespuestaProceso["strMensaje"] = 'Problemas al obtener token para procesar servicio.';
                                throw new \Exception("Msj: No se pudo generar el token de manera correcta.");
                            }

                            $arrayDatosCliente = array("activarMonitoreo"   => "SI",
                                                       "ruc"                => $arrayObtieneInfoResponse["strRuc"],
                                                       "razonSocial"        => $arrayObtieneInfoResponse["strNombreRazonSocial"],
                                                       "esvip"              => $arrayObtieneInfoResponse["strEsVip"],
                                                       "correoComercial"    => $arrayObtieneInfoResponse["strCorreoComercial"],
                                                       "correoTecnico"      => $arrayObtieneInfoResponse["strCorreoTecnico"],
                                                       "correoVip"          => $arrayObtieneInfoResponse["strCorreoVip"]);

                            $arrayDatosPunto = array("login"       => $arrayObtieneInfoResponse["strLogin"],
                                                     "descripcion" => $arrayObtieneInfoResponse["strNombrePunto"],
                                                     "latitud"     => $arrayObtieneInfoResponse["strLatitud"],
                                                     "longitud"    => $arrayObtieneInfoResponse["strLongitud"],
                                                     "canton"      => $arrayObtieneInfoResponse["strCanton"],
                                                     "cobertura"   => $arrayObtieneInfoResponse["strCobertura"],
                                                     "direccion"   => $arrayObtieneInfoResponse["strDireccion"]);

                            $arrayDatosServicio = array("loginAux"      => $arrayObtieneInfoResponse["strLoginAux"],
                                                        "tipoServicio"  => $arrayObtieneInfoResponse["strTipoServicio"],
                                                        "tipoEnlace"    => $arrayObtieneInfoResponse["strTipoEnlace"],
                                                        "bws"           => $arrayObtieneInfoResponse["strBw1"],
                                                        "bwb"           => $arrayObtieneInfoResponse["strBw2"],
                                                        "feUltMod"      => $arrayObtieneInfoResponse["strFeUltMod"],
                                                        "ip"            => $arrayObtieneInfoResponse["strIpHost"],
                                                        "mac"           => $arrayObtieneInfoResponse["strMac"],
                                                        "modeloCpe"     => $arrayObtieneInfoResponse["strModeloCpe"]);

                            $arrayAudit = array("usrCreacion" => strtoupper($arrayParametros["strUsrCreacion"]),
                                                "ipCreacion"  => $arrayParametros["strIpCreacion"],
                                                "token"       => $arrayRespuestaToken["strToken"]);

                            $arrayParametrosWs = array("datosCliente"  => $arrayDatosCliente,
                                                       "datosPunto"    => $arrayDatosPunto,
                                                       "datosServicio" => $arrayDatosServicio);
                        }
                        else
                        {
                            $arrayParametrosWSBoc = array();
                        }

                        //Ejecuta ws de App TelcoGraph
                        $arrayParametrosWSBoc = array("op"    => $strProceso,
                                                      "data"  => $arrayParametrosWs,
                                                      "audit" => $arrayAudit);

                        $strJsonPeticionBoc  = json_encode($arrayParametrosWSBoc);
                        $arrayRespuestaWSBoc = $this->serviceTelcoGraph->telcoGraphWs($strJsonPeticionBoc);

                        if ($arrayRespuestaWSBoc["status"] == "OK")
                        {
                            $arrayRespuestaProceso["strStatus"] = $arrayRespuestaWSBoc["status"];
                        }

                        $arrayRespuestaProceso["strMensaje"] = $arrayRespuestaWSBoc["mensaje"];
                    }

                    if ($strProceso === "crearMasivo")
                    {
                        $arrayRespuestaProceso["strStatus"]  = 'OK';
                        $arrayRespuestaProceso["strMensaje"] = 'Información registrada correctamente.';
                    }

                    if ($this->emComercial->getConnection()->isTransactionActive())
                    {
                        $this->emComercial->commit();
                        $this->emComercial->getConnection()->close();
                    }

                    if ($strCreaLdap == "SI")
                    {
                        sleep(5);
                    }
                }
                catch (\Exception $objEx)
                {
                    if ($this->emComercial->getConnection()->isTransactionActive())
                    {
                        $this->emComercial->getConnection()->rollback();
                    }
                    $this->emComercial->getConnection()->close();
                    $strMensajeExcepcion = $objEx->getMessage();

                    if ($strProceso === "crearMasivo")
                    {
                        $strMensajeExcepcion = $strMensajeExcepcion . ' ' . $strProceso . ' ' . $arrayParametros["strLoginAux"];
                    }

                    $this->utilService->insertError('InfoServicioTecnicoService',
                                                    'procesaHostTelcoGraph_Ind',
                                                     $strMensajeExcepcion.$strLoginServicio,
                                                     $arrayParametros['strUsrCreacion'],
                                                     $arrayParametros['strIpCreacion']);
                }

                //ejecutar Confirmación de procesos para servicios ejecutados desde el proceso masivo de telcograph
                if ($strProceso === "crearMasivo" && $arrayRespuestaProceso["strStatus"] === 'OK')
                {
                    $arrayRespuestaProceso["strMensaje"] = 'Información LDAP registrada correctamente.';
                    $arrayParametrosConfirmaHost                     = array();
                    $arrayParametrosConfirmaHost['strStatus']        = "OK";
                    $arrayParametrosConfirmaHost['strMensaje']       = "Información LDAP registrada correctamente.";
                    $arrayParametrosConfirmaHost['strRuc']           = $arrayParametros['strRuc'];
                    $arrayParametrosConfirmaHost['strIpHost']        = $arrayParametros['strIpHost'];
                    $arrayParametrosConfirmaHost['strUsrCreacion']   = $arrayParametros["strUsrCreacion"];
                    $arrayParametrosConfirmaHost['strIpCreacion']    = $arrayParametros["strIpCreacion"];
                    $arrayParametrosConfirmaHost['strUrlTelcograph'] = $arrayParametros["strUrlTelcograph"];
                    $arrayParametrosConfirmaHost['strOrganizacion']  = $arrayParametros["strOrganizacion"];
                    $arrayParametrosConfirmaHost['strZabbixId']      = $arrayParametros["strZabbixId"];
                    $arrayParametrosConfirmaHost['strServerIp']      = $arrayParametros['strServerIp'];
                    $arrayRespConfirmacion = $this->confirmarProcesoHostTg($arrayParametrosConfirmaHost);
                    $arrayRespuestaProceso["strMensaje"] = $arrayRespuestaProceso["strMensaje"] .' ' .$arrayRespConfirmacion['strMensaje'];
                }
            }
        }
        catch (\Exception $objEx)
        {
            $strMensajeExcepcion = $objEx->getMessage();
            if ($strProceso === "crearMasivo")
            {
                $strMensajeExcepcion = $strMensajeExcepcion . ' ' . $strProceso . ' ' . $arrayParametros["strLoginAux"];
            }
            $this->utilService->insertError('InfoServicioTecnicoService',
                                            'procesaHostTelcoGraph_Gen',
                                             $strMensajeExcepcion.$strLoginServicio,
                                             $arrayParametros['strUsrCreacion'],
                                             $arrayParametros['strIpCreacion']);
        }
        return $arrayRespuestaProceso;
    }

    /**
     * cambiarPasswordTg
     *
     * Metodo que permite generar una nueva password de un cliente que ya se encuentra con monitoreo Activo
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 02-08-2018
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 02-08-2018  Se agrega ejecución de ws ldao en cambio de password
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 13-12-2019 - Se agrega el parámetro de destinatarios seleccionados por el usuario.
     *
     * @param  Array $arrayParametros [
     *                                  - intIdPersonaRol     Persona empresa Rol al cual pertene el servicios procesado
     *                                  - strRuc              Ruc del cliente al cual se le reenviará la información
     *                                  - strIpHost           Ip del servicio monitoreado
     *                                  - strUsrCreacion      Usuario que ejecuta el proceso
     *                                  - strIpCreacion       Ip de usuario que ejecuta el proceso
     *                                    arrayDestinatarios  Lista de destinatarios.
     *                                ]
     * @return Array $arrayRespuesta [
     *                                  - strStatus    Estado del reenvío de las credenciales
     *                                  - strMensaje   Mensaje de respuesta del proceso de reenvío de credenciales
     *                               ]
     */
    public function cambiarPasswordTg($arrayParametros)
    {
        $strEmpresaCod    = "";
        $arrayRespuesta   = array();
        $arrayRespuesta['strStatus']  = "ERROR";
        $arrayRespuesta['strMensaje'] = "No se procesó la generación de las credenciales de acceso al portal, favor comunicarse con Sistemas.";
        $this->emComercial->getConnection()->beginTransaction();
        try
        {
            $objInfoPersonaEmpresaRol = $this->emComercial
                                             ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                             ->find($arrayParametros["intIdPersonaRol"]);
            if (!is_object($objInfoPersonaEmpresaRol))
            {
                throw new \Exception("No existe información del rol del cliente");
            }

            $objEmpresaRolId = $objInfoPersonaEmpresaRol->getEmpresaRolId();
            if (is_object($objEmpresaRolId))
            {
                $objEmpresaCod = $objEmpresaRolId->getEmpresaCod();
                if(is_object($objEmpresaCod))
                {
                    $strEmpresaCod = $objEmpresaCod->getId();
                }
            }

            $arrayParametrosCaractPassPortal = array('descripcionCaracteristica' => "PASSWORD_PORTAL",
                                                     'estado'                    => "Activo");
            $objCaractPassPortal = $this->emComercial
                                        ->getRepository('schemaBundle:AdmiCaracteristica')
                                        ->findOneBy($arrayParametrosCaractPassPortal);
            if (!is_object($objCaractPassPortal))
            {
                throw new \Exception("No existe información de caracteristica PASSWORD PORTAL");
            }

            $arrayParametrosCaractUsrPortal = array('descripcionCaracteristica' => "USUARIO_PORTAL",
                                                    'estado'                    => "Activo");
            $objCaractUsrPortal = $this->emComercial
                                       ->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy($arrayParametrosCaractUsrPortal);
            if (!is_object($objCaractUsrPortal))
            {
                throw new \Exception("No existe información de caracteristica USUARIO PORTAL");
            }

            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
            $objCarUsrExist = $this->emComercial
                                    ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                    ->findCaracteristicaPorCriterios
                                    (array("caracteristicaId"    => $objCaractUsrPortal->getId(),
                                           "personaEmpresaRolId" => $objInfoPersonaEmpresaRol->getId(),
                                           "empresaCod"          => $strEmpresaCod,
                                           "estado"              => "Activo")
                                    );
            if (!is_object($objCarUsrExist))
            {
                throw new \Exception("No existe información de caracteristica del cliente USUARIO PORTAL");
            }

            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
            $objCarPassExist = $this->emComercial
                                    ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                    ->findCaracteristicaPorCriterios
                                    (array("caracteristicaId"    => $objCaractPassPortal->getId(),
                                           "personaEmpresaRolId" => $objInfoPersonaEmpresaRol->getId(),
                                           "empresaCod"          => $strEmpresaCod,
                                           "estado"              => "Activo")
                                    );
            if (is_object($objCarPassExist))
            {
                $objCarPassExist->setEstado("Eliminado");
                $this->emComercial->persist($objCarPassExist);
                $this->emComercial->flush();
            }

            //se crea caracteristica de password de acceso al portal
            $arrayParamClaveAleat = array("intMinLongitudClave" => 8,
                                          "intMaxLongitudClave" => 15);
            $strPassAleatoria = $this->serviceTelcoGraph->generarClaveAleatoria($arrayParamClaveAleat);
            if (isset($strPassAleatoria) && !empty($strPassAleatoria))
            {
                $arrayParamCaracPortal = array(
                                                "objPersonaEmpresaRol" => $objInfoPersonaEmpresaRol,
                                                "objCaracteristica"    => $objCaractPassPortal,
                                                "strValor"             => $strPassAleatoria,
                                                "strUsrCreacion"       => $arrayParametros['strUsrCreacion'],
                                                "strIpClient"          => $arrayParametros['strIpCreacion']
                                              );
                $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracPortal);
            }
            else
            {
                throw new \Exception("No se ha podido generar el código temporal");
            }

            //ejecutar ws ldap
            $arrayParametrosPassLdap = array("strCorreo"      => $objCarUsrExist->getValor(),
                                             "strPass"        => $strPassAleatoria,
                                             "strIpClient"    => $arrayParametros["strIpCreacion"],
                                             "strUsrCreacion" => $arrayParametros["strUsrCreacion"]);
            $arrayRespuestaPassLdap = $this->serviceTelcoGraph->cambioPassUsuarioLdap($arrayParametrosPassLdap);
            if ($arrayRespuestaPassLdap["strStatus"] == "OK")
            {
                $booleanContinuaProceso = true;
            }
            else
            {
                if ($arrayRespuestaPassLdap["strStatus"] == "ERROR")
                {
                    throw new \Exception("Msj: ".
                                         $arrayRespuestaPassLdap["strMsj"].
                                         " Excepcion: ".
                                         $arrayRespuestaPassLdap["strMsjEx"]);
                }
            }

            //envío de notificación a usuario
            $arrayParametrosNotificacion                   = array();
            $arrayParametrosNotificacion['strRuc']         = $arrayParametros['strRuc'];
            $arrayParametrosNotificacion['strIpHost']      = $arrayParametros['strIpHost'];
            $arrayParametrosNotificacion['strUsrCreacion'] = $arrayParametros['strUsrCreacion'];
            $arrayParametrosNotificacion['strIpCreacion']  = $arrayParametros['strIpCreacion'];
            $arrayParametrosNotificacion['arrayDestinatarios']  = $arrayParametros['arrayDestinatarios'];
            $arrayRespuestaNotificacion                    = $this->reenviarCredencialesTg($arrayParametrosNotificacion);
            $arrayRespuesta['strStatus']  = $arrayRespuestaNotificacion['strStatus'];
            $arrayRespuesta['strMensaje'] = $arrayRespuestaNotificacion['strMensaje'];

            if($arrayRespuesta['strStatus'] === 'OK')
            {
                $arrayRespuesta['strMensaje'] = "Proceso ejecutado correctamente.";
                if ($this->emComercial->getConnection()->isTransactionActive())
                {
                    $this->emComercial->commit();
                    $this->emComercial->getConnection()->close();
                }
            }
            else
            {
                 throw new \Exception($arrayRespuesta['strMensaje']);
            }
        }
        catch (\Exception $objEx)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
            $this->emComercial->getConnection()->close();
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService.cambiarPasswordTg',
                                            $objEx->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']);
            $arrayRespuesta['strStatus']  = "ERROR";
            $arrayRespuesta['strMensaje'] = "No se procesó la generación de las credenciales de acceso al portal, favor comunicarse con Sistemas.";
        }
        return $arrayRespuesta;

    }

    /**
     * reenviarCredencialesTg
     *
     * Metodo que permite el reenvío de credenciales TelcoGraph de un cliente que ya se encuentra con monitoreo Activo
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 31-07-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 13-12-2019 - Se agrega el parámetro de destinatarios seleccionados por el usuario.
     *
     * @param  Array $arrayParametros [
     *                                  - strRuc              Ruc del cliente al cual se le reenviará la información
     *                                  - strIpHost           Ip del servicio monitoreado
     *                                  - strUsrCreacion      Usuario que ejecuta el proceso
     *                                  - strIpCreacion       Ip de usuario que ejecuta el proceso
     *                                    arrayDestinatarios  Lista de destinatarios.
     *                                ]
     * @return Array $arrayRespuesta [
     *                                  - strStatus    Estado del reenvío de las credenciales
     *                                  - strMensaje   Mensaje de respuesta del proceso de reenvío de credenciales
     *                               ]
     */
    public function reenviarCredencialesTg($arrayParametros)
    {
        $strEmpresaCod    = "";
        $strUrlTelcograph = "";
        $arrayRespuesta   = array();
        $arrayRespuesta['strStatus']  = "ERROR";
        $arrayRespuesta['strMensaje'] = "No se procesó el reenvío de las credenciales, favor comunicarse con Sistemas.";
        try
        {
            $arrayRespuestaDatos = $this->emComercial
                                        ->getRepository('schemaBundle:InfoServicioTecnico')
                                        ->getDatosConfirmacionTelcograph($arrayParametros);
            if ($arrayRespuestaDatos["strStatus"] == "OK")
            {
                $arrayData = $arrayRespuestaDatos["arrayData"];
                $objInfoPersonaEmpresaRol = $this->emComercial
                                                ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                ->find($arrayData["idPersonaRol"]);
                if (!is_object($objInfoPersonaEmpresaRol))
                {
                    throw new \Exception("No existe información del rol del cliente");
                }

                $objEmpresaRolId = $objInfoPersonaEmpresaRol->getEmpresaRolId();
                if (is_object($objEmpresaRolId))
                {
                    $objEmpresaCod = $objEmpresaRolId->getEmpresaCod();
                    if(is_object($objEmpresaCod))
                    {
                        $strEmpresaCod = $objEmpresaCod->getId();
                    }
                }

                $arrayParametrosCaractUrlTelcograph = array('descripcionCaracteristica' => 'URL_TELCOGRAPH',
                                                            'estado' => "Activo");

                $objCaractUrlTelcograph = $this->emComercial
                                               ->getRepository('schemaBundle:AdmiCaracteristica')
                                               ->findOneBy($arrayParametrosCaractUrlTelcograph);

                if (!is_object($objCaractUrlTelcograph))
                {
                    throw new \Exception("No existe información de caracteristica URL_TELCOGRAPH");
                }

                $objPerCaracUrlTelg  = $this->emComercial
                                            ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                            ->findCaracteristicaPorCriterios(
                                            array( "caracteristicaId"    => $objCaractUrlTelcograph->getId(),
                                                   "personaEmpresaRolId" => $arrayData["idPersonaRol"],
                                                   "empresaCod"          => $strEmpresaCod,
                                                   "estado"              => "Activo")
                                                 );

                if (!is_object($objPerCaracUrlTelg))
                {
                    throw new \Exception("No existe información de la url de monitoreo del cliente.");
                }

                $strUrlTelcograph = $objPerCaracUrlTelg->getValor();

                $objInfoServicio = $this->emComercial
                                        ->getRepository('schemaBundle:InfoServicio')
                                        ->find($arrayData["idServicio"]);
                if (is_object($objInfoServicio))
                {

                    $arrayParametrosMail = array('objInfoServicio'          => $objInfoServicio,
                                                 'strObsMonitoreoServicio'  => 'Se reenvía credenciales y url de acceso al portal Telcograph',
                                                 'strPrefijoEmpresa'        => $strEmpresaCod,
                                                 'intIdEmpresa'             => $strEmpresaCod,
                                                 'strUrlTelcograph'         => $strUrlTelcograph,
                                                 'strUsrApp'                => $arrayData["usuarioPortal"],
                                                 'strPassApp'               => $arrayData["passwordPortal"],
                                                 'strProceso'               => 'CREDENCIALES',
                                                 'arrayDestinatarios'       => $arrayParametros['arrayDestinatarios'],
                                                 'strUsrCreacion'           => $arrayParametros['strUsrCreacion'],
                                                 'strIpCreacion'            => $arrayParametros['strIpCreacion']);

                    $this->envioMailConfirmarMonitoreoServicio($arrayParametrosMail);
                    $arrayRespuesta['strStatus']  = "OK";
                    $arrayRespuesta['strMensaje'] = "Se reenvío información al usuario correctamente.";
                }
            }
            else
            {
                $arrayRespuesta['strStatus']  = "ERROR";
                $arrayRespuesta['strMensaje'] = "No se recuperó la información correctamente, favor comunicarse con Sistemas.";
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService.reenviarCredencialesTg',
                                            $objEx->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']);
        }
        return $arrayRespuesta;

    }

    /**
     * Método que envía información del Cliente al Zabbix
     * para crear o actualizar la data.
     *
     * @param $arrParametros
     * [
     *     strTitulo => Título de la notificación
     *     strCuerpo => Cuerpo de la notificación
     *     strIcono  => icono de la notificación (debe estar subido en el servidor de imagenes)
     * ]
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0
     * @since 18-05-2020
     * 
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.1 24-11-2020 - Se agrega que retorne el número de telefono del contacto técnico.
     * @since 1.0
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 03-06-2021 - Se agrega logica que agrega 3 campos en el request para servicios CAMARA
     * @since 1.1
     *
     * @param array $arrayParametros
     */
    public function enviarInfoClienteZabbix($arrayParametros)
    {
        $objInfoServicio   = $arrayParametros['objInfoServicio'];
        $strProceso        = $arrayParametros['strProceso'];
        $strUsrCreacion    = $arrayParametros['strUsrCreacion'];
        $strLogin          = $arrayParametros['strLogin'];
        $strLoginAux       = $arrayParametros['strLoginAux'];
        $strIpCreacion     = $arrayParametros["strIpCreacion"];
        $strValidarFact    = $arrayParametros["strValidarFact"];
        $strIngresoCamaras = $arrayParametros["strIngresoCamaras"]?$arrayParametros["strIngresoCamaras"]:"N";
        $strIngresoWifi    = $arrayParametros["strIngresoWifi"]?$arrayParametros["strIngresoWifi"]:"N";
        $strEmpresaCod     = 10;
        $arrayNuevosCampos = "";

        try
        {

            $arrayParametrosTelcograph = $this->emComercial
                                            ->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('TELCOGRAPH', 
                                                        'TECNICO', 
                                                        '', 
                                                        'VALOR_FACTURACION', 
                                                        '', 
                                                        '', 
                                                        '', 
                                                        '', 
                                                        '', 
                                                        $strEmpresaCod);
            if (!empty($arrayParametrosTelcograph))
            {
                $floatValorFacturacion = floatval($arrayParametrosTelcograph['valor1']);
            }
            else
            {
                $floatValorFacturacion = 1000.00;
            }

            if(isset($strLoginAux) && !empty($strLoginAux))
            {
                $objPunto        = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                    ->findOneBy(array( "login"      => $strLogin,
                                                                        "estado"     => array("Asignada", "Activo" )
                                                            ));

                if(!is_object($objPunto))
                {
                    throw new \Exception("No se ha podido obtener el punto");
                }

                $objInfoPersonaEmpresaRol = $objPunto->getPersonaEmpresaRolId();
                
                $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                    ->findOneBy(array( "puntoId"      => $objPunto,
                                                                       "estado"       => array("Asignada", "Activo" ),
                                                                       "loginAux"     => $strLoginAux
                                                            ));

            }
            else
            {
                if(is_object($objInfoServicio))
                {
                    $objInfoPunto = $objInfoServicio->getPuntoId();
                    if (!is_object($objInfoPunto))
                    {
                        throw new \Exception("No existe información del punto");
                    }
                    $objInfoPersonaEmpresaRol = $objInfoPunto->getPersonaEmpresaRolId();
                }
            }

            if(!is_object($objInfoServicio))
            {
                throw new \Exception("No se ha podido obtener el servicio del login auxiliar");
            }

            if (!is_object($objInfoPersonaEmpresaRol))
            {
                throw new \Exception("No existe información del rol del cliente");
            }

            $arrayParametrosFacturacion = array();
            $arrayParametrosFacturacion['intIdPersonaRol'] = $objInfoPersonaEmpresaRol->getId();
            $floatTotalFacturacion = $this->emComercial
                                                        ->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->getTotalFacturacionTelcograph($arrayParametrosFacturacion);
          

            if ($floatTotalFacturacion < $floatValorFacturacion && $strValidarFact !== 'NO')
            {
                throw new \Exception("Facturación menor a $" . $floatValorFacturacion . ".");
            }

            //Se valida si el servicio es una SAFE VIDEO ANALYTICS CAM, se agregan nuevos campos al REQUEST            
            if($strIngresoCamaras == "S" || $strIngresoWifi == "S")
            {                
                $arrayParametrosNuevosCamposRequest = array();
                $arrayParametrosNuevosCamposRequest["objServicio"]    = $objInfoServicio;
                $arrayParametrosNuevosCamposRequest["strUsrCreacion"] = $strUsrCreacion;
                $arrayParametrosNuevosCamposRequest["strIpCreacion"]  = $strIpCreacion;
                $arrayParametrosNuevosCamposRequest["strIngresoCamaras"] = $strIngresoCamaras;
                $arrayParametrosNuevosCamposRequest["strIngresoWifi"]    = $strIngresoWifi;
                $arrayNuevosCampos = $this->generarNuevosCamposRequest($arrayParametrosNuevosCamposRequest);
            }

            $arrayObtenerInfoRequest = array();
            $arrayObtenerInfoRequest['objInfoServicio'] = $objInfoServicio;
            $arrayObtenerInfoRequest['strUsrCreacion']  = $strUsrCreacion;
            $arrayObtenerInfoRequest['strIpCreacion']   = $strIpCreacion;
            $arrayObtenerInfoRequest['strProceso']      = $strProceso;
            
            $arrayObtieneInfoResponse = $this->obtieneInformacionTelcoGraph($arrayObtenerInfoRequest);            
            
            if ($arrayObtieneInfoResponse["strStatus"] != "OK")
            {
                throw new \Exception($arrayObtieneInfoResponse['strMensaje']);
            }
            else
            {
                $arrayDatosCliente  = array("ruc"                   => $arrayObtieneInfoResponse["strRuc"],
                                            "razonSocial"           => $arrayObtieneInfoResponse["strNombreRazonSocial"],
                                            "esvip"                 => $arrayObtieneInfoResponse["strEsVip"],
                                            "correoComercial"       => $arrayObtieneInfoResponse["strCorreoComercial"],
                                            "correoTecnico"         => $arrayObtieneInfoResponse["strCorreoTecnico"],
                                            "telefonoTecnico"       => $arrayObtieneInfoResponse["strTelefonoTecnico"],
                                            "correoVip"             => $arrayObtieneInfoResponse["strCorreoVip"]
                                    );

                $arrayDatosPunto    = array("login"                 => $arrayObtieneInfoResponse["strLogin"],
                                            "latitud"               => $arrayObtieneInfoResponse["strLatitud"],
                                            "longitud"              => $arrayObtieneInfoResponse["strLongitud"],
                                            "canton"                => $arrayObtieneInfoResponse["strCanton"],
                                            "cobertura"             => $arrayObtieneInfoResponse["strCobertura"],
                                            "direccion"             => $arrayObtieneInfoResponse["strDireccion"],
                                            "descripcion"           => $arrayObtieneInfoResponse["strNombrePunto"]
                                    );

                $arrayServicio      = array("loginAux"              => $arrayObtieneInfoResponse["strLoginAux"],
                                            "tipoServicio"          => $arrayObtieneInfoResponse["strTipoServicio"],
                                            "tipoEnlace"            => $arrayObtieneInfoResponse["strTipoEnlace"],
                                            "bws"                   => $arrayObtieneInfoResponse["strBw1"],
                                            "bwb"                   => $arrayObtieneInfoResponse["strBw2"],
                                            "ip"                    => $arrayObtieneInfoResponse["strIpHost"],
                                            "mac"                   => $arrayObtieneInfoResponse["strMac"],
                                            "modeloCpe"             => $arrayObtieneInfoResponse["strModeloCpe"],
                                            "ultimaMilla"           => $arrayObtieneInfoResponse["strUltimaMilla"],
                                            "switch"                => $arrayObtieneInfoResponse["strNombreEleSW"],
                                            "puerto"                => $arrayObtieneInfoResponse["strNombreInterEleSW"],
                                            "estado"                => $arrayObtieneInfoResponse["strEstadoServicio"]
                                    );

                //Se valida si el servicio es una SAFE VIDEO ANALYTICS CAM, se agregan nuevos campos al REQUEST
                if($strIngresoCamaras == "S" && $arrayNuevosCampos["status"] == "OK")
                {                    
                    $arrayServicio['ont']          = $arrayNuevosCampos["arrayCampos"]["ont"];
                    $arrayServicio['puertoOnt']    = $arrayNuevosCampos["arrayCampos"]["puertoOnt"];
                    $arrayServicio['modeloCamara'] = $arrayNuevosCampos["arrayCampos"]["modeloCamara"];
                }
                //Se valida si el servicio es WIFI GPON, se agregan nuevos campos al REQUEST
                if($strIngresoWifi == "S" && $arrayNuevosCampos["status"] == "OK")
                {
                    $arrayServicio['ont']        = $arrayNuevosCampos["arrayCampos"]["ont"];
                    $arrayServicio['puertoOnt']  = $arrayNuevosCampos["arrayCampos"]["puertoOnt"];
                    $arrayServicio['modeloWifi'] = $arrayNuevosCampos["arrayCampos"]["modeloWifi"];
                }

                $arrayRespuesta     = array("datosCliente"  => $arrayDatosCliente,
                                            "datosPunto"    => $arrayDatosPunto,
                                            "datosServicio" => $arrayServicio
                                    );
            
            }
            
            if ($strProceso === "crear"
                || $strProceso === "cancelar")
            {

                $arrayParametrosToken = array(
                    "strIpClient" => $strIpCreacion,
                    "nombreApp"   => "APP.TELCOGRAPH",
                    "gatewayWs"   => "Telcos",
                    "serviceWs"   => "TecnicoWSController",
                    "methodWs"    => "procesarAction",
                    "userWs"      => "TELCOGRAPH"
                );

                $arrayRespuestaToken = $this->serviceTelcoGraph->generateTokenRequestWs($arrayParametrosToken);
                           
                if ($arrayRespuestaToken["strStatus"] != "OK")
                {
                    throw new \Exception("Msj: No se pudo generar el token de manera correcta.");
                }

                $arrayAudit         = array(
                                        "usrCreacion" => strtoupper($strUsrCreacion),
                                        "ipCreacion"  => $strIpCreacion,
                                        "token"       => $arrayRespuestaToken["strToken"]
                                    );

                //Ejecuta ws de App TelcoGraph
                $arrayParametrosWSBoc = array(
                                    "op"    => $strProceso, 
                                    "data"  => $arrayRespuesta,
                                    "audit" => $arrayAudit
                );

                $strJsonPeticionBoc  = json_encode($arrayParametrosWSBoc);

                $arrayOptions      = array(CURLOPT_SSL_VERIFYPEER => false);
                $arrayResponseJson = $this->serviceRestClient->postJSON($this->urlZabbix, $strJsonPeticionBoc , $arrayOptions);
                              
                if($arrayResponseJson['status'] == "200" && $arrayResponseJson['result'] !== false)
                {        
                    $arrayResponse = json_decode($arrayResponseJson['result'],true);
                    $arrayResultado = $arrayResponse;
                }
                else
                {
                    $arrayResultado['status'] = "ERROR";
                    if($arrayResponseJson['status'] == "0")
                    {
                        $arrayResultado['mensaje']  = "No Existe Conectividad con el WS ZABBIX.";
                    }
                    else
                    {
                        $strMensajeError = 'ERROR';
                        if(isset($arrayResponseJson['mensaje']) && !empty($arrayResponseJson['mensaje']))
                        {
                            $strMensajeError = $arrayResponseJson['mensaje'];
                        }
                        $arrayResultado['mensaje']  = "Error de ZABBIX :".$strMensajeError;
                    }
                }

                $arrayRespuestaWSBoc = $arrayResultado ;

                if ($arrayRespuestaWSBoc["status"] !== "OK")
                {
                    throw new \Exception("Error al ejecutar Web Services del Zabbix");
                }
                
            }
            
        }
        catch(\Exception $objException)
        {
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService.enviarInfoClienteZabbix',
                                            'Error: '.$objException->getMessage(),
                                            'Telcos',
                                            '127.0.0.1');
           
            $arrayRespuesta = $objException->getMessage();
        }
        return $arrayRespuesta;
    }
    
    
    
    /**
     * Funcion que devuelve nuevos campos enviados al ZABBIX, para servicios CAMARA-SAFECITY
     *
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0
     *
     * @param  Array $arrayParametros [
     *                                  - objServicio    => objeto del servicio
     *                                  - strUsrCreacion => Usuario que ejecuta el proceso
     *                                  - strIpCreacion  => Ip de usuario que ejecuta el proceso
     *                                ]
     *
     * @return Array $arrayRespuesta [
     *                                  - strStatus    Estado del reenvío de las credenciales
     *                                  - arrayCampos  Mensaje de respuesta del proceso de reenvío de credenciales
     *                               ]
     */
    public function generarNuevosCamposRequest($arrayParametros)
    {  
        $arrayRespuesta    = array();
        $arrayNuevosCampos = array();
        $strStatus         = "OK";
        $objServicio       = $arrayParametros["objServicio"];
        $strLoginAux       = "";
        $strPuertoOnt      = "";

        try
        {
            if(is_object($objServicio))
            {
                //Se obtiene el loginAux del ONT asociado
                $objCaracteristicaIdServicioPreferencial = $this->getServicioProductoCaracteristica($objServicio,
                                                                                       'RELACION_SERVICIOS_GPON_SAFECITY',
                                                                                       $objServicio->getProductoId());
                if(is_object($objCaracteristicaIdServicioPreferencial))
                {
                    $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                         ->find($objCaracteristicaIdServicioPreferencial->getValor());
                    if(is_object($objInfoServicio))
                    {
                        $strLoginAux = $objInfoServicio->getLoginAux();
                    }
                }

                //Puerto del ONT en el que se debe conectar
                $objCaracteristicaPuertoOnt = $this->getServicioProductoCaracteristica($objServicio,
                                                                                      'PUERTO_ONT',
                                                                                      $objServicio->getProductoId());
                if(is_object($objCaracteristicaPuertoOnt))
                {
                    $strPuertoOnt =  $objCaracteristicaPuertoOnt->getValor();
                }

                //Se consulta el modelo
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneBy(array("servicioId" => $objServicio->getId()));
                if (!is_object($objServicioTecnico))
                {
                    throw new \Exception("Error presentado en la activación del servicio SafeCity, ".
                                         "no existe información técnica del servicio adicional SafeCity.");
                }    
                
                if($objServicioTecnico->getElementoClienteId())
                {
                    $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnico->getElementoClienteId());
                }

                if (is_object($objElemento))
                {
                    $objModelo = $objElemento->getModeloElementoId();
                    $strModelo = (is_object($objModelo))?$objModelo->getNombreModeloElemento():"";
                }

                $arrayNuevosCampos['ont']          = $strLoginAux;
                $arrayNuevosCampos['puertoOnt']    = $strPuertoOnt;
                if($arrayParametros["strIngresoCamaras"] == "S")
                {
                    $arrayNuevosCampos['modeloCamara'] = $strModelo;
                }
                elseif($arrayParametros["strIngresoWifi"] == "S")
                {
                    $arrayNuevosCampos['modeloWifi']   = $strModelo;
                }

                $strStatus = "OK";
            }
        }
        catch(\Exception $objException)
        {
            $arrayNuevosCampos = null;
            $strStatus         = "ERROR";

            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService.generarNuevosCamposRequest',
                                            'Error: '.$objException->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
        
        $arrayRespuesta["status"]      = $strStatus;
        $arrayRespuesta["arrayCampos"] = $arrayNuevosCampos;
                        
        return $arrayRespuesta;  
    }


    /**
     * confirmarProcesoHostTg
     *
     * Metodo que permite confirmar el procesamiento de hosts ejecutado en TelcoGraph
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 16-03-2018
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 02-10-2018    Se modifica filtrado de caracteristica IP ZABBIX SERVER para recuperar la información de manera correcta
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 12-18-2019 - Se modifica el proceso al momento de notificar por primera vez la creación del monitero al cliente,
     *                           por motivos que dicha notificación debe llegar primero al departamento de ippcl2 con una tarea, para
     *                           verificar el correcto funcionamiento del monitoreo creado por Telcograf.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 17-01-2020  - Se envía el service 'InfoCambiarPlan' por parámetro
     *                            para la creación de la tarea automática.
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.4 11-06-2020 - Se quita la creación del grupo en el LDAP ya que se la agrego en conjunto con 
     *                           la creación del Usuario.
     * @since 1.3
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.5 11-02-2021 - Se realiza un control de errores cuando ocurre un excepción en el proceso.
     *
     * @param  Array $arrayParametros [
     *                                  - objInfoServicio     Objeto con información de servicio a procesar
     *                                ]
     * @return Array $arrayRespuesta [
     *                               - strLogin    Cadena de caracteres con login de servicio procesado
     *                               ]
     */
    public function confirmarProcesoHostTg($arrayParametros)
    {
        $strEmpresaCod         = "";
        $strLoginServicio      = ', Ruc Cliente: '.$arrayParametros['strRuc'];
        $arrayRespuestaProceso = array("strStatus"  => "ERROR",
                                       "strMensaje" => "Se presentaron problemas al ejecutar el proceso de confirmación, ".
                                                       "favor notificar al departamento de Sistemas.");

        $this->emComercial->getConnection()->beginTransaction();

        try
        {
            $arrayRespuestaDatos = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                    ->getDatosConfirmacionTelcograph($arrayParametros);

            if ($arrayRespuestaDatos["strStatus"] != "OK")
            {
                throw new \Exception($arrayRespuestaDatos["strMensaje"]);
            }

            $arrayData        = $arrayRespuestaDatos["arrayData"];
            $strLoginServicio = ', Login: '.$arrayData['login'].', Servicio: '.$arrayData['idServicio'];
            if ($arrayParametros["strStatus"] == "OK")
            {
                $arrayParametrosCaractZabbixId = array('descripcionCaracteristica' => 'ZBX_ZABBIX_ID',
                                                       'estado'                    => "Activo");

                $objCaractZabbixId = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy($arrayParametrosCaractZabbixId);

                if (!is_object($objCaractZabbixId))
                {
                    throw new \Exception("No existe información de caracteristica ZBX_ZABBIX_ID");
                }

                $arrayParametrosCaractHostPortal = array('descripcionCaracteristica' => 'HOST_LOGIN_AUX',
                                                         'estado'                    => "Activo");

                $objCaractHostPortal = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy($arrayParametrosCaractHostPortal);

                if (!is_object($objCaractHostPortal))
                {
                    throw new \Exception("No existe información de caracteristica HOST_LOGIN_AUX");
                }

                $arrayParametrosCaractUrlTelcograph = array('descripcionCaracteristica' => 'URL_TELCOGRAPH',
                                                            'estado'                    => "Activo");

                $objCaractUrlTelcograph = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy($arrayParametrosCaractUrlTelcograph);

                if (!is_object($objCaractUrlTelcograph))
                {
                    throw new \Exception("No existe información de caracteristica URL_TELCOGRAPH");
                }

                $arrayParametrosCaractIpZabbix = array('descripcionCaracteristica' => 'IP_SERVIDOR_ZABBIX',
                                                       'estado'                    => "Activo");

                $objCaractIpZabbix = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy($arrayParametrosCaractIpZabbix);

                if (!is_object($objCaractIpZabbix))
                {
                    throw new \Exception("No existe información de caracteristica IP_SERVIDOR_ZABBIX");
                }

                $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                        ->find($arrayData["idPersonaRol"]);

                if (!is_object($objInfoPersonaEmpresaRol))
                {
                    throw new \Exception("No existe información del rol del cliente");
                }

                $objEmpresaRolId = $objInfoPersonaEmpresaRol->getEmpresaRolId();
                if (is_object($objEmpresaRolId))
                {
                    $objEmpresaCod = $objEmpresaRolId->getEmpresaCod();
                    if(is_object($objEmpresaCod))
                    {
                        $strEmpresaCod = $objEmpresaCod->getId();
                    }
                }

                $arrayParametrosCaractPortalActivo = array('descripcionCaracteristica' => 'PORTAL_ACTIVO',
                                                           'estado'                    => "Activo");

                $objCaractPortalActivo = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy($arrayParametrosCaractPortalActivo);

                if (!is_object($objCaractPortalActivo))
                {
                    throw new \Exception("No existe información de caracteristica PORTAL ACTIVO");
                }

                $arrayParametrosCaractOrganizacionTg = array('descripcionCaracteristica' => 'ORGANIZACION_TELCOGRAPH',
                                                             'estado'                    => "Activo");

                $objCaractOrganizacionTg = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy($arrayParametrosCaractOrganizacionTg);

                if (!is_object($objCaractOrganizacionTg))
                {
                    throw new \Exception("No existe información de caracteristica ORGANIZACION TELCOGRAPH");
                }

                $intIdCaractPortalActivo = $objCaractPortalActivo->getId();

                //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
                $objCarPortalActivoExist = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                        ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $intIdCaractPortalActivo,
                                                               "personaEmpresaRolId" => $arrayData["idPersonaRol"],
                                                               "empresaCod"          => $strEmpresaCod,
                                                               "estado"              => "Activo"));

                if (is_object($objCarPortalActivoExist) && $objCarPortalActivoExist->getValor() == "NO")
                {
                    $objCarPortalActivoExist->setValor("SI");
                    $objCarPortalActivoExist->setFeUltMod(new \DateTime('now'));
                    $objCarPortalActivoExist->setUsrUltMod($arrayParametros['strUsrCreacion']);
                    $this->emComercial->persist($objCarPortalActivoExist);
                    $this->emComercial->flush();

                    $objPerCaracUrlTelg  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                            ->findCaracteristicaPorCriterios(array( "caracteristicaId"    => $objCaractUrlTelcograph->getId(),
                                                                    "personaEmpresaRolId" => $arrayData["idPersonaRol"],
                                                                    "empresaCod"          => $strEmpresaCod,
                                                                    "estado"              => "Activo"));

                    if (is_object($objPerCaracUrlTelg))
                    {
                        $objPerCaracUrlTelg->setEstado("Eliminado");
                        $objPerCaracUrlTelg->setFeUltMod(new \DateTime('now'));
                        $objPerCaracUrlTelg->setUsrUltMod($arrayParametros['strUsrCreacion']);
                        $this->emComercial->persist($objPerCaracUrlTelg);
                        $this->emComercial->flush();
                    }

                    $arrayParamCaracUrlTelcograph = array("objPersonaEmpresaRol" => $objInfoPersonaEmpresaRol,
                                                          "objCaracteristica"    => $objCaractUrlTelcograph,
                                                          "strValor"             => $arrayParametros['strUrlTelcograph'],
                                                          "strUsrCreacion"       => $arrayParametros['strUsrCreacion'],
                                                          "strIpClient"          => $arrayParametros['strIpCreacion']);

                    $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracUrlTelcograph);

                    $objPerCaracOrganiz = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                            ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractOrganizacionTg->getId(),
                                                                   "personaEmpresaRolId" => $arrayData["idPersonaRol"],
                                                                   "empresaCod"          => $strEmpresaCod,
                                                                   "estado"              => "Activo"));

                    if (is_object($objPerCaracOrganiz))
                    {
                        $objPerCaracOrganiz->setEstado("Eliminado");
                        $objPerCaracOrganiz->setFeUltMod(new \DateTime('now'));
                        $objPerCaracOrganiz->setUsrUltMod($arrayParametros['strUsrCreacion']);
                        $this->emComercial->persist($objPerCaracOrganiz);
                        $this->emComercial->flush();
                    }

                    $arrayParamCaracOrgTelcograph = array("objPersonaEmpresaRol" => $objInfoPersonaEmpresaRol,
                                                          "objCaracteristica"    => $objCaractOrganizacionTg,
                                                          "strValor"             => $arrayParametros['strOrganizacion'],
                                                          "strUsrCreacion"       => $arrayParametros['strUsrCreacion'],
                                                          "strIpClient"          => $arrayParametros['strIpCreacion']);

                    $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracOrgTelcograph);

                    $strRutaLdapCliente      = "";
                    $strRutaLdapGrupoCliente = "";

                    //Agregar usuario a grupo LDAP (organización enviada por parámetro).
                    $arrayParametrosTelcograph = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                            ->getOne('TELCOGRAPH','TECNICO','','RUTA_LDAP_CLIENTES','','','','','',$strEmpresaCod);

                    if (!empty($arrayParametrosTelcograph))
                    {
                        $strRutaLdapCliente         = $arrayParametrosTelcograph['valor1'];
                        $strRutaLdapGrupoCliente    = $arrayParametrosTelcograph['valor2'];
                        $arrayNivelesParametrizados = explode(",", $strRutaLdapGrupoCliente);
                    }
                    else
                    {
                        throw new \Exception('No existe parametrización RUTAL LDAP CLIENTES'.' LoginAux: '.$arrayData["loginAux"]);
                    }

                    $arrayUser   = array();
                    $arrayNivel  = array();
                    $arrayUser[] = array ("cn"               => $arrayParametros['strOrganizacion'],
                                          "objectclass"      => array ("groupOfNames", "top"),
                                          "businessCategory" => "1",
                                          "description"      => "Grupo Telcograph para cliente",
                                          "o"                => "appTelcoGraph",
                                          "ou"               => "appTelcoGraph",
                                          "owner"            => $strRutaLdapCliente,
                                          "member"           => "uid=".$arrayData["usuarioPortal"].",".$strRutaLdapCliente);

                    foreach ($arrayNivelesParametrizados as $strNivel)
                    {
                        $arrayNivel[] = array ("ou"          => $strNivel,
                                               "objectclass" => array ("top", "organizationalUnit"),);
                    }

                    //Se procede crear el grupo y asociarlo con el usuario creado.
                    $arrayParametrosCreaLdap = array("arrayUser"        => $arrayUser,
                                                     "arrayNivel"       => $arrayNivel,
                                                     "strloginServicio" => $strLoginServicio,
                                                     "strUsrCreacion"   => $arrayParametros["strUsrCreacion"],
                                                     "strIpClient"      => $arrayParametros["strIpCreacion"]);

                    $this->serviceTelcoGraph->crearGrupoLdap($arrayParametrosCreaLdap);

                    $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                            ->find($arrayData["idServicio"]);

                    if (is_object($objInfoServicio))
                    {
                        //Creación de la tarea automática a IPCCL2.
                        $strObservacionTarea  = "Tarea Automática: Se solicita verificar el correcto ".
                                                "funcionamiento del monitoreo de Telcograf.";

                        $arrayParametrosTarea = array('strUsrCreacion'         => $arrayParametros['strUsrCreacion'],
                                                      'strIpCliente'           => $arrayParametros['strIpCreacion'],
                                                      'intIdServicio'          => $objInfoServicio->getId(),
                                                      'strCodEmpresa'          => $strEmpresaCod,
                                                      'strObservacionTarea'    => $strObservacionTarea,
                                                      'strNombreDepartamento'  => 'IPCCL2',
                                                      'serviceInfoCambiarPlan' => $arrayParametros['serviceInfoCambiarPlan']);

                        $arrayResult     = $this->serviceTelcoGraph->crearTareaTelcograf($arrayParametrosTarea);
                        $strObsMonitoreo = 'Se creo el monitoreo correctamente, se adjunta credenciales y url de acceso al portal Telcograph';
                        $arrayParametrosMail = array('objInfoServicio'          => $objInfoServicio,
                                                     'strObsMonitoreoServicio'  => $strObsMonitoreo,
                                                     'strPrefijoEmpresa'        => $strEmpresaCod,
                                                     'intIdEmpresa'             => $strEmpresaCod,
                                                     'strUrlTelcograph'         => $arrayParametros['strUrlTelcograph'],
                                                     'strUsrApp'                => $arrayData["usuarioPortal"],
                                                     'strPassApp'               => $arrayData["passwordPortal"],
                                                     'strProceso'               => 'CREDENCIALES',
                                                     'strUsrCreacion'           => $arrayParametros['strUsrCreacion'],
                                                     'strIpCreacion'            => $arrayParametros['strIpCreacion'],
                                                     'arrayDestinatarios'       => array($arrayResult['status'] ?
                                                                                         $arrayResult['strCorreoPersonaAsignada'] : ''));

                        $this->envioMailConfirmarMonitoreoServicio($arrayParametrosMail);
                    }
                }
                else
                {
                    $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                            ->find($arrayData["idServicio"]);

                    if (is_object($objInfoServicio))
                    {
                        $arrayParametrosMail = array('objInfoServicio'         => $objInfoServicio,
                                                     'strObsMonitoreoServicio' => 'Se creo el monitoreo correctamente.',
                                                     'strPrefijoEmpresa'       => $strEmpresaCod,
                                                     'intIdEmpresa'            => $strEmpresaCod,
                                                     'strUrlTelcograph'        => '',
                                                     'strUsrApp'               => $arrayData["usuarioPortal"],
                                                     'strPassApp'              => '',
                                                     'strProceso'              => 'CREACIONHOST',
                                                     'strUsrCreacion'          => $arrayParametros['strUsrCreacion'],
                                                     'strIpCreacion'           => $arrayParametros['strIpCreacion']);

                        $this->envioMailConfirmarMonitoreoServicio($arrayParametrosMail);
                    }
                }

                $objPerCaracIpZabbix  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                        ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractIpZabbix->getId(),
                                                               "personaEmpresaRolId" => $arrayData["idPersonaRol"],
                                                               "empresaCod"          => $strEmpresaCod,
                                                               "estado"              => "Activo"));

                if (!is_object($objPerCaracIpZabbix))
                {
                    //se crea caracteristica de host creado en Telcograph
                    $arrayParamCaracIpZabbix = array("objPersonaEmpresaRol"  => $objInfoPersonaEmpresaRol,
                                                     "objCaracteristica"     => $objCaractIpZabbix,
                                                     "strValor"              => $arrayParametros['strServerIp'],
                                                     "strUsrCreacion"        => $arrayParametros['strUsrCreacion'],
                                                     "strIpClient"           => $arrayParametros['strIpCreacion']);

                   $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracIpZabbix);
                }

                $objPerCaracHostAux  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                        ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractHostPortal->getId(),
                                                               "personaEmpresaRolId" => $arrayData["idPersonaRol"],
                                                               "empresaCod"          => $strEmpresaCod,
                                                               "valor"               => $arrayData["loginAux"],
                                                               "estado"              => "Activo"));

                if (!is_object($objPerCaracHostAux))
                {
                    //se crea caracteristica de host creado en Telcograph
                    $arrayParamCaracPortal = array("objPersonaEmpresaRol"  => $objInfoPersonaEmpresaRol,
                                                   "objCaracteristica"     => $objCaractHostPortal,
                                                   "strValor"              => $arrayData["loginAux"],
                                                   "strUsrCreacion"        => $arrayParametros['strUsrCreacion'],
                                                   "strIpClient"           => $arrayParametros['strIpCreacion']);

                    $objPerCaracHostAux = $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracPortal);

                    if (is_object($objPerCaracHostAux))
                    {
                        //se crea caracteristica de ZabbixId creado en Telcograph
                        $arrayParamCaracZabbixId = array("objPersonaEmpresaRol"  => $objInfoPersonaEmpresaRol,
                                                         "objCaracteristica"     => $objCaractZabbixId,
                                                         "strValor"              => $arrayParametros['strZabbixId'],
                                                         "strUsrCreacion"        => $arrayParametros['strUsrCreacion'],
                                                         "strIpClient"           => $arrayParametros['strIpCreacion'],
                                                         "intPerEmpRolCaractId"  => $objPerCaracHostAux->getId());

                        $objPerCaracHostAux = $this->serviceTelcoGraph->ingresarPerCaracteristica($arrayParamCaracZabbixId);
                    }
                }

                $arrayRespuestaProceso["strStatus"]  = "OK";
                $arrayRespuestaProceso["strMensaje"] = "Procesado correctamente";

                if ($this->emComercial->getConnection()->isTransactionActive())
                {
                    $this->emComercial->commit();
                    $this->emComercial->getConnection()->close();
                }
            }
            else
            {
                $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayData["idServicio"]);

                if (is_object($objInfoServicio))
                {
                    $this->ingresarServicioHistorial($objInfoServicio,
                                                     $objInfoServicio->getEstado(),
                                                     $arrayParametros["strMensaje"],
                                                     $arrayParametros['usrCreacion'],
                                                     $arrayParametros['ipCreacion']);
                }

                $this->utilService->insertError('InfoServicioTecnicoService',
                                                'confirmarProcesoHostTg',
                                                 $arrayParametros['strMensaje'].' LoginAux: '.$arrayData["loginAux"],
                                                 $arrayParametros['strUsrCreacion'], $arrayParametros['strIpCreacion']);

                if ($this->emComercial->getConnection()->isTransactionActive())
                {
                    $this->emComercial->commit();
                    $this->emComercial->getConnection()->close();
                }
            }

        }
        catch (\Exception $objEx)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
                $this->emComercial->getConnection()->close();
            }

            unset($arrayParametros['serviceInfoCambiarPlan']);
            $strCodigo = (new \DateTime('now'))->format('YmdHis').substr(md5(uniqid(rand())),0,6);
            $this->utilService->insertError('InfoServicioTecnicoService',
                                            'confirmarProcesoHostTg',
                                             $strCodigo.'-1-'.$objEx->getMessage().$strLoginServicio,
                                             $arrayParametros['strUsrCreacion'],
                                             $arrayParametros['strIpCreacion']);

            $this->utilService->insertError('InfoServicioTecnicoService',
                                            'confirmarProcesoHostTg',
                                             $strCodigo.'-2-'.json_encode($arrayParametros),
                                             $arrayParametros['strUsrCreacion'],
                                             $arrayParametros['strIpCreacion']);
        }
        return $arrayRespuestaProceso;
    }

    /**
     * envioMailConfirmarMonitoreoServicio
     *
     * Función que sirve para realizar la llamada a la correspondiente plantilla de envío de mail con los parámetros enviados
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 11-05-2018
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 12-12-2019 - Se agrega el parámetro 'arrayDestinarios', para enviar el correo de confirmación
     *                           a los destinatarios seleccionados por el usuario.
     *
     * @param  Array $arrayParametros [
     *                                  - objInfoServicio          Objeto con información de servicio a procesar
     *                                  - strObsMonitoreoServicio  Observacion a mostrar en la notificación al cliente
     *                                  - strPrefijoEmpresa        Prefijo de la empresa al cual pertenece el servicio
     *                                  - intIdEmpresa             Identificador de la empresa a la cual pertene el servicio
     *                                  - strIpHost                Ip del host al que se le creo el monitoreo
     *                                  - strUrlTelcograph         Url del app telcograph al cual debe ingresar el cliente
     *                                  - strUsrApp                Usuario de acceso al app telcograph
     *                                  - strPassApp               Password de acceso al app telcograph
     *                                  - strProceso               Proceso que realiza el envío de la notificación
     *                                  - strUsrCreacion           Usuario que ejecuta el proceso
     *                                  - strIpCreacion            Ip del equipo donde se ejecuta el proceso
     *                                    arrayDestinatarios       Lista de destinatarios. En caso que sea nulo se el destinarios será el strUsrApp
     *                                ]
     */
    public function envioMailConfirmarMonitoreoServicio($arrayParametros)
    {
        try
        {
            $strNombreProductoPlan      = '';
            $strLoginPuntoCliente       = '';
            $strDireccionPuntoCliente   = '';
            $strCliente                 = '';
            $strTipo                    = '';
            $strNombreJurisdiccion      = '';
            $strEstadoServicio          = '';
            $strFechaCreacionServicio   = '';
            $strTipoOrden               = '';
            $objServicio                = $arrayParametros["objInfoServicio"];
            $strObsMonitoreoServicio    = $arrayParametros["strObsMonitoreoServicio"] ? $arrayParametros["strObsMonitoreoServicio"] : '';
            $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
            $intIdEmpresa               = $arrayParametros["intIdEmpresa"];
            $strUrlTelcograph           = $arrayParametros["strUrlTelcograph"];
            $strUsrApp                  = $arrayParametros["strUsrApp"];
            $strPassApp                 = $arrayParametros["strPassApp"];
            $strProceso                 = $arrayParametros["strProceso"];
            $arrayDestinatariosPunto    = array();
            $arrayDestinatariosPunto[]  = strtolower($arrayParametros["strUsrApp"]);

            if (isset($arrayParametros['arrayDestinatarios']) && !empty($arrayParametros['arrayDestinatarios']))
            {
                $arrayDestinatariosPunto = array_map('strtolower', $arrayParametros['arrayDestinatarios']);
            }

            if ($objServicio)
            {
                $strEstadoServicio        = $objServicio->getEstado();
                $objPunto                 = $objServicio->getPuntoId();
                $strFechaCreacionServicio = strval(date_format($objServicio->getFeCreacion(), "d-m-Y"));
                $strTipoOrden             = "";

                if ($objServicio->getTipoOrden())
                {
                    $strOrdenServicio = $objServicio->getTipoOrden();
                    if ($strOrdenServicio == 'R')
                    {
                        $strTipoOrden = "Reubicación";
                    }
                    else if ($strOrdenServicio == 'T')
                    {
                        $strTipoOrden = "Traslado";
                    }
                    else if ($strOrdenServicio == 'N')
                    {
                        $strTipoOrden = "Nueva";
                    }
                    else if ($strOrdenServicio == 'C')
                    {
                        $strTipoOrden = "Cambio Tipo Medio";
                    }
                    else
                    {
                        $strTipoOrden = "";
                    }
                }

                $objInfoIpElemento = $this->emInfraestructura
                                          ->getRepository('schemaBundle:InfoIp')
                                          ->findOneBy(array("servicioId" => $objServicio->getId(),
                                                            "estado"     => "Activo"));
                $strNombreProductoPlan = $objServicio->getDescripcionPresentaFactura();
                $strTipo               = "Producto";
                if ($objPunto)
                {
                    $strLoginPuntoCliente     = $objPunto->getLogin();
                    $strDireccionPuntoCliente = $objPunto->getDireccion();
                    $objJurisdiccion          = $objPunto->getPuntoCoberturaId();
                    if ($objJurisdiccion)
                    {
                        $strNombreJurisdiccion = $objJurisdiccion->getNombreJurisdiccion();
                    }
                    $objPersonaEmpresaRol = $objPunto->getPersonaEmpresaRolId();
                    if ($objPersonaEmpresaRol)
                    {
                        $objPersona = $objPersonaEmpresaRol->getPersonaId();
                        $strCliente = sprintf("%s", $objPersona);
                    }
                }

                $strAsunto = "Activacion de Monitoreo de Servicio: Login: " . $strLoginPuntoCliente . ", Servicio: " . $strNombreProductoPlan;

                /* Envío de Correo al cliente por Confirmación-Activación de Servicio */
                $arrayParametrosMail = array(
                                            "cliente"               => $strCliente,
                                            "loginPuntoCliente"     => $strLoginPuntoCliente,
                                            "nombreJurisdiccion"    => $strNombreJurisdiccion,
                                            "direccionPuntoCliente" => $strDireccionPuntoCliente,
                                            "tipoProductoPlan"      => $strTipo,
                                            "nombreProductoPlan"    => $strNombreProductoPlan,
                                            "observacion"           => $strObsMonitoreoServicio,
                                            "estadoServicio"        => $strEstadoServicio,
                                            "prefijoEmpresa"        => $strPrefijoEmpresa,
                                            "fechaCreacionServicio" => $strFechaCreacionServicio,
                                            "tipoOrden"             => $strTipoOrden,
                                            "ipHost"                => $objInfoIpElemento->getIp(),
                                            "urlTelcograph"         => $strUrlTelcograph,
                                            "usrApp"                => $strUsrApp,
                                            "passApp"               => $strPassApp,
                                            "proceso"               => $strProceso
                                            );

                $this->soporte
                     ->generarEnvioPlantilla(
                                             $strAsunto,
                                             $arrayDestinatariosPunto,
                                             'ACTMONITSERVCLI',
                                             $arrayParametrosMail,
                                             $intIdEmpresa,
                                             '',
                                             '',
                                             null,
                                             false,
                                             'notificaciones_telcos@telconet.ec'
                                            );
            }
        }
        catch (\Exception $ex)
        {
            $this->utilService->insertError(
                                            'Telcos+',
                                            'InfoServicioTecnicoService.envioMailConfirmarMonitoreoServicio',
                                            $ex->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']
                                           );
        }
    }

    /**
     * cambiarCorreoSuscripcionMcAfee
     *
     * Metodo que permite actualizar el correo electrónico de una suscripción mcafee activa
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 04-06-2019
     *
     * @param  Array $arrayParametros [
     *                                  - intIdServicio       Identificador de servicio a procesar
     *                                  - intProductoId       Identificador de producto mcafee del servicio
     *                                  - strCorreoMcAfee     Correo nuevo del servicio a registrar en la suscripción
     *                                  - strUsrCreacion      Usuario que ejecuta el proceso
     *                                  - strIpCreacion       Ip de usuario que ejecuta el proceso
     *                                ]
     * @return Array $arrayRespuesta [
     *                                  - strStatus    Estado del reenvío de las credenciales
     *                                  - strMensaje   Mensaje de respuesta del proceso de reenvío de credenciales
     *                               ]
     */
    public function cambiarCorreoSuscripcionMcAfee($arrayParametros)
    {
        $arrayRespuesta  = array();
        $strMostrarError = "NO";
        $arrayRespuesta['strStatus']  = "ERROR";
        $arrayRespuesta['strMensaje'] = "No se procesó la actualización del correo de la suscripción McAfee, favor comunicarse con Sistemas.";
        $this->emComercial->getConnection()->beginTransaction();
        try
        {
            $objServicio = $this->emComercial
                                ->getRepository('schemaBundle:InfoServicio')
                                ->find($arrayParametros['intIdServicio']);

            if (!is_object($objServicio))
            {
                $strMostrarError = "SI";
                throw new \Exception("No existe información del servicio a procesar.");
            }

            $objProductoMcAfee = $this->emComercial
                                ->getRepository('schemaBundle:AdmiProducto')
                                ->find($arrayParametros['intProductoId']);

            if (!is_object($objProductoMcAfee))
            {
                $strMostrarError = "SI";
                throw new \Exception("No existe información del producot mcafee del servicio a procesar.");
            }

            $booleanValidaProducto                = strpos($objProductoMcAfee->getDescripcionProducto(), 'I. PROTEGIDO');
            $booleanValidaProductoProteccionTotal = strpos($objProductoMcAfee->getDescripcionProducto(), 'I. PROTECCION');

            $strCorreoMcAfee = $this->getCorreoDatosEnvioMd(array("intIdPunto"            =>
                                                                  $objServicio->getPuntoId()->getId(),
                                                                  "strValidaCorreoMcAfee" => "SI",
                                                                  "strUsrCreacion"        =>
                                                                  $arrayParametros['strUsrCreacion'],
                                                                  "strIpCreacion"         =>
                                                                  $arrayParametros['strIpCreacion'],
                                                                  "strTipoProceso"         =>
                                                                  "CambiarCorreoMcAfee",
                                                                  "strCorreoMcAfee"         =>
                                                                  $arrayParametros['strCorreoMcAfee']));

            if(empty($strCorreoMcAfee))
            {
                $strMostrarError = "SI";
                throw new \Exception("El correo electrónico ya se encuentra utilizado por otro servicio McAfee.");
            }

            //Cancelar suscripción mcafee actual
            $arrayDatosCliente = $this->emComercial
                                      ->getRepository("schemaBundle:InfoPersona")
                                      ->getDatosClientePorIdServicio($objServicio->getId(),"esProducto");

            if (!$arrayDatosCliente['ID_PERSONA'])
            {
                $arrayDatosCliente = $this->emComercial
                                          ->getRepository("schemaBundle:InfoPersona")
                                          ->getDatosClientePorIdServicio($objServicio->getId(),false);
            }

            $arrayParametrosMcAfee = $this->serviceLicenciasMcAfee
                                          ->obtenerInformacionClienteMcAffe(array("intIdPersona"      => $arrayDatosCliente['ID_PERSONA'],
                                                                                  "intIdServicio"     => $objServicio->getId(),
                                                                                  "strNombrePlan"     => "",
                                                                                  "objProductoMcAfee" => $objProductoMcAfee,
                                                                                  "strEsActivacion"   => "NO"));
            $arrayParametrosMcAfee["strTipoTransaccion"] = 'Cancelacion';
            if($arrayParametrosMcAfee["strError"] == 'true')
            {
                $strMostrarError = "SI";
                throw new \Exception("Problemas al obtener informacion del cliente para cancelar la suscripción");
            }

            $arrayParametrosMcAfee["strNombre"]         = "";
            $arrayParametrosMcAfee["strApellido"]       = "";
            $arrayParametrosMcAfee["strIdentificacion"] = "";
            $arrayParametrosMcAfee["strPassword"]       = "";
            $arrayParametrosMcAfee["strMetodo"]         = 'CancelarSuscripcion';
            if($booleanValidaProducto !== false)
            {
                $arrayParametrosMcAfee["intLIC_QTY"]        = $arrayParametrosMcAfee["strCantidadDispositivos"];
                $arrayParametrosMcAfee["intQTY"]            = 1;
            }
            else if($booleanValidaProductoProteccionTotal !== false)
            {
                $arrayParametrosMcAfee["intLIC_QTY"]        = 0;
                $arrayParametrosMcAfee["intQTY"]            = 1;
            }
            else
            {
                $strMostrarError = "SI";
                throw new \Exception("No existe definición para el producto McAfee.");
            }
            $strCorreoMcAfeeAnterior = $arrayParametrosMcAfee['strCorreo'];
            $arrayRespuestaSuscripcion = $this->serviceLicenciasMcAfee
                                              ->operacionesSuscripcionCliente($arrayParametrosMcAfee);

            if($arrayRespuestaSuscripcion["procesoExitoso"] == "true")
            {
                //eliminar caracteristicas antiguas
                $objServProdCaracCorreo = $this->getServicioProductoCaracteristica($objServicio, "CORREO ELECTRONICO", $objProductoMcAfee);
                if (is_object($objServProdCaracCorreo))
                {
                    $this->setEstadoServicioProductoCaracteristica($objServProdCaracCorreo, "Eliminado");
                }

                $objServProdCaracCcid = $this->getServicioProductoCaracteristica($objServicio, "CUSTOMERCONTEXTID", $objProductoMcAfee);
                if (is_object($objServProdCaracCcid))
                {
                    $this->setEstadoServicioProductoCaracteristica($objServProdCaracCcid, "Eliminado");
                }

                $objServProdCaracPartnerRef = $this->getServicioProductoCaracteristica($objServicio, "PARTNERREF", $objProductoMcAfee);
                if(is_object($objServProdCaracPartnerRef))
                {
                    $this->setEstadoServicioProductoCaracteristica($objServProdCaracPartnerRef, "Eliminado");
                }

                $objServProdCaracReferencia = $this->getServicioProductoCaracteristica($objServicio, "REFERENCIA", $objProductoMcAfee);
                if(is_object($objServProdCaracReferencia))
                {
                    $this->setEstadoServicioProductoCaracteristica($objServProdCaracReferencia, "Eliminado");
                }

                //ejecutar activación de suscripción mcafee con nuevo correo
                $this->ingresarServicioProductoCaracteristica( $objServicio,
                                                               $objProductoMcAfee,
                                                               "CORREO ELECTRONICO",
                                                               $arrayParametros['strCorreoMcAfee'],
                                                               $arrayParametros['strUsrCreacion'] );

                $arrayParametrosMcAfeeAct = $this->serviceLicenciasMcAfee
                                                 ->obtenerInformacionClienteMcAffe(array("intIdPersona"      => $arrayDatosCliente['ID_PERSONA'],
                                                                                         "intIdServicio"     => $objServicio->getId(),
                                                                                         "strNombrePlan"     => "",
                                                                                         "objProductoMcAfee" => $objProductoMcAfee,
                                                                                         "strEsActivacion"   => "SI"));
                $booleanValidaProductoMultiTrial = strpos($objProductoMcAfee->getDescripcionProducto(), 'TRIAL');
                $booleanValidaProductoTotalTrial = strpos($objProductoMcAfee->getDescripcionProducto(), 'TRIAL');

                //verificar si el producto es TRIAL o PAID
                if ($booleanValidaProductoMultiTrial !== false || $booleanValidaProductoTotalTrial !== false)
                {
                    $strTipoProducto = "TRIAL";
                }
                else
                {
                    $strTipoProducto = "PAID";
                }
                //setear parametros para producto I. PROTEGIDO MULTI
                if ($booleanValidaProducto !== false)
                {
                    $objAdmiParametroDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                           ->findOneBy(array("descripcion" => "I. PROTEGIDO MULTI",
                                                                             "estado"      => "Activo",
                                                                             "valor1"      => $strTipoProducto
                                                                            ));
                    if (!$objAdmiParametroDet)
                    {
                        $strMostrarError = "SI";
                        throw new \Exception("Problemas al obtener informacion del producto McAfee.");
                    }
                    $arrayParametrosMcAfeeAct["strSKU"]     = $objAdmiParametroDet->getValor2();
                    $arrayParametrosMcAfeeAct["strMetodo"]  = 'CrearSuscripcionMultidispositivo';
                    $arrayParametrosMcAfeeAct["intLIC_QTY"] = $arrayParametrosMcAfeeAct["strCantidadDispositivos"];
                    $arrayParametrosMcAfeeAct["intQTY"]     = 1;
                }
                //setear parametros para producto I. PROTECCION TOTAL
                else if ($booleanValidaProductoProteccionTotal !== false)
                {
                    $objAdmiParametroDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->findOneBy(array("descripcion" => "I. PROTECCION TOTAL",
                                                                              "estado"      => "Activo",
                                                                              "valor1"      => $strTipoProducto
                                                                             ));

                    if (!$objAdmiParametroDet)
                    {
                        $strMostrarError = "SI";
                        throw new \Exception("Problemas al obtener informacion del producto McAfee.");
                    }
                    $arrayParametrosMcAfeeAct["strSKU"]     = $objAdmiParametroDet->getValor2();
                    $arrayParametrosMcAfeeAct["strMetodo"]  = 'CrearNuevaSuscripcion';
                    $arrayParametrosMcAfeeAct["intLIC_QTY"] = 0;
                    $arrayParametrosMcAfeeAct["intQTY"]     = 1;
                }
                else
                {
                    $strMostrarError = "SI";
                    throw new \Exception("No existe definición para el producto McAfee.");
                }
                $arrayParametrosMcAfeeAct["strTipoTransaccion"] = 'Activacion';
                $arrayRespuestaSuscripcionActivar = $this->serviceLicenciasMcAfee->operacionesSuscripcionCliente($arrayParametrosMcAfeeAct);
                if ($arrayRespuestaSuscripcionActivar["procesoExitoso"] == "true")
                {
                    //grabar caracteristica PARTNERREF
                    $this->ingresarServicioProductoCaracteristica( $objServicio,
                                                                   $objProductoMcAfee,
                                                                   "PARTNERREF",
                                                                   $arrayParametrosMcAfeeAct["strPartnerRef"],
                                                                   $arrayParametros['strUsrCreacion'] );

                    //grabar caracteristica CUSTOMERCONTEXTID
                    $this->ingresarServicioProductoCaracteristica( $objServicio,
                                                                   $objProductoMcAfee,
                                                                   "CUSTOMERCONTEXTID",
                                                                   $arrayParametrosMcAfeeAct["strCustomerContextId"],
                                                                   $arrayParametros['strUsrCreacion'] );

                    //grabar caracteristica REFERENCIA
                    $this->ingresarServicioProductoCaracteristica( $objServicio,
                                                                   $objProductoMcAfee,
                                                                   "REFERENCIA",
                                                                   $arrayRespuestaSuscripcionActivar["referencia"],
                                                                   $arrayParametros['strUsrCreacion'] );
                    $objServicioHist = new InfoServicioHistorial();
                    $objServicioHist->setServicioId($objServicio);
                    $objServicioHist->setObservacion('Se actualizó el CORREO ELECTRONICO de la suscripción McAfee: <br>'.
                                                        'Valor Anterior: <br>'.
                                                        '&nbsp;&nbsp;&nbsp;&nbsp;Valor:  '.$strCorreoMcAfeeAnterior.'<br>'.
                                                        'Valor Actual: <br>'.
                                                        '&nbsp;&nbsp;&nbsp;&nbsp;Valor:  '.$arrayParametrosMcAfeeAct['strCorreo']);
                    $objServicioHist->setIpCreacion($arrayParametros['strIpCreacion']);
                    $objServicioHist->setFeCreacion(new \DateTime('now'));
                    $objServicioHist->setAccion('actualizaCaracteristica');
                    $objServicioHist->setUsrCreacion($arrayParametros['strUsrCreacion']);
                    $objServicioHist->setEstado($objServicio->getEstado());
                    $this->emComercial->persist($objServicioHist);
                    $this->emComercial->flush();
                    $this->emComercial->getConnection()->commit();
                    $this->emComercial->getConnection()->close();
                    $arrayRespuesta['strStatus']  = "OK";
                    $arrayRespuesta['strMensaje'] = "Se cambio el correo de la suscripción correctamente.";
                }
                else
                {
                    $strMostrarError = "SI";
                    throw new \Exception($arrayRespuestaSuscripcionActivar["mensajeRespuesta"]);
                }
            }
            else
            {
                $strMostrarError = "SI";
                throw new \Exception($arrayRespuestaSuscripcion["mensajeRespuesta"]);
            }


        }
        catch (\Exception $objEx)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
            $this->emComercial->getConnection()->close();
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService.cambiarCorreoSuscripcionMcAfee',
                                            $objEx->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']);
            $arrayRespuesta['strStatus']  = "ERROR";
            $strMensajeError              = $objEx->getMessage();
            if ($strMostrarError == "NO")
            {
                $strMensajeError = "No se procesó la actualización del correo de la suscripción McAfee, favor comunicarse con Sistemas.";
            }
            $arrayRespuesta['strMensaje'] = $strMensajeError;
        }
        return $arrayRespuesta;

    }

    /**
     *
     * Metodo encargado de devolver si una solucion contiene housing o hosting o ambas para poder asignar el flujo necesario de acuerdo a esas
     * marcas, se toma en cuanta los subgrupos en el cual esta configurado el servicio de enlace de datos
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 07-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 10-07-2020 - Se modifica el método para obtener los datos de la solución de las nuevas estructuras.
     *
     * @param Object $objServicio
     * @return Array $arrayRespuesta
     */
    public function getArrayInformacionTipoSolucionPorPreferencial($objServicio, $strCaracteristica = '')
    {
        $arrayRespuesta      = array();
        $arrayCores          = array();
        $serviceInfoSolucion = $this->container->get('comercial.InfoSolucion');

        //Se obtiene el secuencial de la solucion
        $objInfoSolucionDet = $this->emComercial->getRepository("schemaBundle:InfoSolucionDet")
                ->findOneBy(array('servicioId' => $objServicio->getId(),'estado' => 'Activo'));

        if (is_object($objInfoSolucionDet) && is_object($objInfoSolucionDet->getSolucionCabId()))
        {
            //Web-Services para obtener los datos de la solución del servicio.
            $arrayRequest     = array ('idServicio' => $objServicio->getId(),'estado' => 'Activo');
            $arrayRespuestaWs = $serviceInfoSolucion->WsPostDc(array('strOpcion'    => 'soluciondc',
                                                                     'strEndPoint'  => 'listarDetalleSolucion',
                                                                     'arrayRequest' =>  $arrayRequest));

            if (!$arrayRespuestaWs['status'])
            {
                throw new \Exception($arrayRespuestaWs['message']);
            }

            if ($arrayRespuestaWs['status'] && !empty($arrayRespuestaWs['data']))
            {
                $arrayServicioWs = $arrayRespuestaWs['data'][0];
                $strSubTipos     = $arrayServicioWs['coresReferentes'];
                $arrayCores      = explode("|",$strSubTipos);
            }

            $intNumeroSolucion   = $objInfoSolucionDet->getSolucionCabId()->getNumeroSolucion();
            $arrayServiciosGrupo = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                    ->getArrayServiciosPorGrupoSolucion(array('intSecuencial' => $intNumeroSolucion));

            $intContadorPool    = 0;
            $intContadorHousing = 0;
            $intContadorAlquiler= 0;
            $intContadorGenerico= 0;

            if(!empty($arrayServiciosGrupo))
            {
                foreach($arrayServiciosGrupo as $objServicioGrupo)
                {
                    if($objServicio != $objServicioGrupo)
                    {
                        //Se obtiene el sutipo soluciones de los servicios distintos al enlace
                        $objInfoSolucionDet = $this->emComercial->getRepository("schemaBundle:InfoSolucionDet")
                                ->findOneBy(array('servicioId' => $objServicioGrupo->getId(),'estado' => 'Activo'));

                        if(is_object($objInfoSolucionDet))
                        {
                            $strTipoSubSolucion = $objInfoSolucionDet->getTipoSolucion();
                            $objProductoGrupo   = $objServicioGrupo->getProductoId();

                            if(in_array($strTipoSubSolucion,$arrayCores))
                            {
                                if(empty($strCaracteristica))
                                {
                                    $boolEsCloud    = $this->isContieneCaracteristica($objProductoGrupo, 'ES_POOL_RECURSOS');
                                    $boolEsHousing  = $this->isContieneCaracteristica($objProductoGrupo, 'ES_HOUSING');
                                    $boolEsAlquiler = $this->isContieneCaracteristica($objProductoGrupo, 'ES_ALQUILER_SERVIDORES');

                                    if($boolEsCloud)
                                    {
                                        $intContadorPool++;
                                    }

                                    if($boolEsHousing)
                                    {
                                        $intContadorHousing++;
                                    }

                                    if($boolEsAlquiler)
                                    {
                                        $intContadorAlquiler++;
                                    }
                                }
                                else
                                {
                                    $boolGenerico = $this->isContieneCaracteristica($objProductoGrupo, $strCaracteristica);

                                    if($boolGenerico)
                                    {
                                        $intContadorGenerico++;
                                    }
                                }
                            }
                        }
                    }
                }

                $arrayRespuesta['boolContieneHousing'] = ($intContadorHousing > 0);
                $arrayRespuesta['boolContienePool']    = ($intContadorPool > 0);
                $arrayRespuesta['boolContieneAlquiler']= ($intContadorAlquiler > 0);
                $arrayRespuesta['boolContieneCaract']  = ($intContadorGenerico > 0);
            }
        }
        return $arrayRespuesta;
    }

    /**
     * generarSincronizacionExtenderDualBand
     *
     * Función que verifica los productos extender dual band adicionales y dentro del plan con estado Activo e In-Corte
     * para generar el botón de sincronización de equipos y que puedan funcionar correctamente
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 14-06-2019
     * @since 1.0
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 11-02-2021 Se permite la sincronización de equipos extender dual band incluidos en servicios adicionales W+AP
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 0-02-2022 Se agrega verificación de si es permitido buscar extender dual band dentro de los planes para agregar característica
     *                        de sincronización de extenders para el servicio de Internet, debido a que ZTE no maneja la figura de W y Ap 
     *                        dentro del plan, por lo que se deberá enviar la variable strEsPermitidoExtenderEnPlanes con valor NO cuando la 
     *                        tecnología es ZTE
     * 
     * @param array $arrayParametros [
     *                                  "strProceso"                        => Proceso por el cual se ejecuta la función "CAMBIO_ELEMENTO" 
     *                                                                         ó "CAMBIO_LINEA_PON"
     *                                  "objServicio"                       => objeto del servicio
     *                                  "strCodEmpresa"                     => código de la empresa en sesión
     *                                  "strUsrCreacion"                    => Usuario que ejecuta la operación
     *                                  "strIpCreacion"                     => Ip que ejecuta la operación
     *                                  "objProductoInternet"               => objeto del producto internet
     *                                  "strEsPermitidoExtenderEnPlanes"    => SI o NO se busca si el extender existe dentro del plan
     *                               ]
     *
     */
    public function generarSincronizacionExtenderDualBand($arrayParametros)
    {
        $strProceso                         = $arrayParametros['strProceso'];
        $objServicio                        = $arrayParametros['objServicio'];
        $strCodEmpresa                      = $arrayParametros['strCodEmpresa'];
        $strUsrCreacion                     = $arrayParametros['strUsrCreacion'];
        $strIpCreacion                      = $arrayParametros['strIpCreacion'];
        $objProductoInternet                = $arrayParametros['objProductoInternet'];
        $strEsPermitidoExtenderEnPlanes     = $arrayParametros['strEsPermitidoExtenderEnPlanes'];
        
        try
        {
            $strExtenderDualBandEnPlan  = "";
            $objPlanServicio            = $objServicio->getPlanId();
            if(isset($arrayParametros['strEsPermitidoExtenderEnPlanes']) && !empty($arrayParametros['strEsPermitidoExtenderEnPlanes']))
            {
                $strEsPermitidoExtenderEnPlanes = $arrayParametros['strEsPermitidoExtenderEnPlanes'];
            }
            else
            {
                $strEsPermitidoExtenderEnPlanes = "SI";
            }
            
            if(is_object($objPlanServicio) && $strEsPermitidoExtenderEnPlanes === "SI")
            {
                $arrayRespuestaVerifProdEnPlan  = $this->obtieneProductoEnPlan(array(   "intIdPlan"                 => $objPlanServicio->getId(),
                                                                                        "strNombreTecnicoProducto"  => "EXTENDER_DUAL_BAND",
                                                                                     ));
                
                if($arrayRespuestaVerifProdEnPlan["strProductoEnPlan"] === "SI")
                {
                    $strExtenderDualBandEnPlan = "SI";
                }
            }
            
            if ($strExtenderDualBandEnPlan == "SI")
            {
                //crear caracteristica para mostrar botón de traslado de Extender Dual Band
                $this->ingresarServicioProductoCaracteristica($objServicio,
                                                              $objProductoInternet,
                                                              "SINCRONIZAR EXTENDER DUAL BAND",
                                                              $objServicio->getId(),
                                                              $strUsrCreacion);
            }
            $objPuntoServicio           = $objServicio->getPuntoId();
            $arrayRespuestaServiciosEdb = $this->obtenerServiciosPorProducto(
                                                                            array(  "intIdPunto"                  => $objPuntoServicio->getId(),
                                                                                    "arrayNombresTecnicoProducto" =>  array("WDB_Y_EDB",
                                                                                                                            "EXTENDER_DUAL_BAND"),
                                                                                    "strCodEmpresa"               => $strCodEmpresa,
                                                                                    "arrayEstadosServicioABuscar" => array("Activo","In-Corte")));

            $arrayServiciosEdb          = $arrayRespuestaServiciosEdb["arrayServiciosPorProducto"];
            if(isset($arrayServiciosEdb) && !empty($arrayServiciosEdb))
            {
                foreach($arrayServiciosEdb as $objServicioExtenderAdicional)
                {
                    //crear caracteristica para mostrar botón de traslado de Extender Dual Band
                    $this->ingresarServicioProductoCaracteristica($objServicioExtenderAdicional,
                                                                  $objProductoInternet,
                                                                  "SINCRONIZAR EXTENDER DUAL BAND",
                                                                  $objServicioExtenderAdicional->getId(),
                                                                  $strUsrCreacion);
                }
            }
            
            if(!empty($strProceso) && $strProceso == "CAMBIO_ELEMENTO")
            {
                //verificar existencia de producto WIFI_DUAL_BAND para actualizar información
                $arrayRespuestaServiciosWdb = $this->obtenerServiciosPorProducto(
                                                                                array(  "intIdPunto"                  => $objPuntoServicio->getId(),
                                                                                        "arrayNombresTecnicoProducto" =>  array("WIFI_DUAL_BAND"),
                                                                                        "strCodEmpresa"               => $strCodEmpresa,
                                                                                        "arrayEstadosServicioABuscar" => array("Activo","In-Corte")));
                $arrayServiciosWdb          = $arrayRespuestaServiciosWdb["arrayServiciosPorProducto"];
                if(isset($arrayServiciosWdb) && !empty($arrayServiciosWdb))
                {
                    $objServicioWifiDualBand = $arrayServiciosWdb[0];
                    if(is_object($objServicioWifiDualBand))
                    {
                        $objServicioTecnicoInternet = $this->emComercial
                                                           ->getRepository('schemaBundle:InfoServicioTecnico')
                                                           ->findOneBy(array( "servicioId" => $objServicio->getId()));

                        $objServicioTecnicoWifiDB = $this->emComercial
                                                         ->getRepository('schemaBundle:InfoServicioTecnico')
                                                         ->findOneBy(array( "servicioId" => $objServicioWifiDualBand->getId()));

                        if (is_object($objServicioTecnicoInternet) && is_object($objServicioTecnicoWifiDB))
                        {
                            $objServicioTecnicoWifiDB->setElementoClienteId($objServicioTecnicoInternet->getElementoClienteId());
                            $objServicioTecnicoWifiDB->setInterfaceElementoClienteId($objServicioTecnicoInternet->getInterfaceElementoClienteId());
                            $this->emComercial->persist($objServicioTecnicoWifiDB);
                            $this->emComercial->flush();
                        }
                    }
                }
            }
        }
        catch (\Exception $objEx)
        {
            $strMensaje = $objEx->getMessage();
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->generarSincronizacionExtenderDualBand',
                                            $strMensaje,
                                            $strUsrCreacion,
                                            $strIpCreacion);
        }
    }

    /**
     *
     * Función que verifica los productos de los planes de Diciembre de MD
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 28-02-2019 - Se agrega nuevo parámetro de retorno utilizado en proyecto de traslado de nuevos planes MD
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 07-03-2019 Se elimina filtro de estado al momento de recuperar caractersíticas del plan
     * @since 1.1
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 02-04-2019 - Se agregan cambios para obtener información necesaria para mostrar nuevo botón de edición de correo mcafee
     * @since 1.1
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 05-06-2019 - Se agrega programación para identificar si un producto McAfee ya se encuentra activos
     * @since 1.3
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.5 20-06-2019 - Se agregan validaciones para poder gestionar productos WIFI DUAL BAND en varios procesos del telcos
     * @since 1.4
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 08-07-2019 - Se agrega una excepción en caso de no encontrase el objeto del servicio con el id enviado por parámetro
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 08-08-2019 Se agrega la obtención de las variables $strNuevoAntivirusActivo y $strReintentoNuevoAntivirus
     *                          necesarias para el flujo de activación de servicios I. PROTEGIDO MULTI PAID con tecnología Kaspersky
     *                          dentro de los planes
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 27-07-2020 Se elimina la dependencia de la validación de detalles dual band y del I. Protegido Multi Paid con la característica
     *                         PLANES NUEVOS VIGENTES asociada al plan
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 03-01-2022 Función que actualmente no está siendo usada, pero se la deja como respaldo para las validaciones iniciales.
     *
     * @param array $arrayParametros [  "objServicio"       => objeto del servicio
     *                                  "strCodEmpresa"     => código de la empresa en sesión
     *                               ]
     * @return array $arrayResultado[
     *                                  "strWifiDualBand"           => SI/NO existe wifi dual band en el plan o como producto
     *                                  "strWifiDualBandEnPlan"     => SI/NO existe wifi dual band en el plan
     *                                  "strExtenderDualBand        => SI/NO existe extender dual band en el plan o como producto
     *                                  "strExtenderDualBandEnPlan  => SI/NO existe extender dual band en el plan
     *                              ]
     */
    public function verificarPlanesVigentesDiciembre($arrayParametros)
    {
        $intIdServicio                      = $arrayParametros["intIdServicio"] ? $arrayParametros["intIdServicio"] : 0;
        $objServicio                        = $arrayParametros["objServicio"];
        $strCodEmpresa                      = $arrayParametros["strCodEmpresa"];
        $strWifiDualBand                    = "NO";
        $strWifiDualBandEnPlan              = "NO";
        $strExtenderDualBand                = "NO";
        $strExtenderDualBandEnPlan          = "NO";
        $strPlanActualDic                   = "NO";
        $strPermiteReintentoMcAfee          = "NO";
        $boolFalse                          = false;
        $strNombreTecnicoWifiDualBand       = "WIFI_DUAL_BAND";
        $strNombreTecnicoExtenderDualBand   = "EXTENDER_DUAL_BAND";
        $strNombreProductoWifiDualBand      = "";
        $strNombreProductoExtenderDualBand  = "";
        $boolMcAfeeEnPlan                   = false;
        $strTieneMcAfeeEnPlan               = "NO";
        $strMcAfeeActivo                    = "NO";
        $strNuevoAntivirusActivo            = "NO";
        $strReintentoNuevoAntivirus         = "NO";
        $objProductoMcAfee                  = null;
        $strCorreoMcAfee                    = "";
        $intIdCaractCorreoMcAfee            = null;
        try
        {
            if((!is_object($objServicio) && $intIdServicio === 0) || empty($strCodEmpresa))
            {
                throw new \Exception("No se han enviado los parámetros necesarios");
            }
            if($intIdServicio > 0)
            {
                $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                if(!is_object($objServicio))
                {
                    throw new \Exception("No se ha podido obtener el servicio con id ".$intIdServicio);
                }
            }

            $objPlanServicio = $objServicio->getPlanId();
            if(is_object($objPlanServicio))
            {
                $intIdPlanServicio = $objPlanServicio->getId();
                $arrayParamsPlanesDic   = array(
                                                    "intIdPlan"                         => $intIdPlanServicio,
                                                    "strDescripcionCaracteristicaPlan"  => 'PLANES NUEVOS VIGENTES',
                                                    "strValorCaracteristicaPlan"        => "SI"
                                                );
                $arrayRespuestaPlanesDic         = $this->emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                     ->getCaracteristicasPlanByCriterios($arrayParamsPlanesDic);
                $intTotalCaractPlanesDic         = $arrayRespuestaPlanesDic['intTotal'];
                $arrayResultadoCaractPlanesDic   = $arrayRespuestaPlanesDic['arrayResultado'];
                $arrayPlanDetPlanesDic           = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                                     ->findBy(array("planId" => $intIdPlanServicio));
                if($intTotalCaractPlanesDic > 0 && !empty($arrayResultadoCaractPlanesDic))
                {
                    $strPlanActualDic           = "SI";
                }
                
                $objProdExtenderDualBand    = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->findOneBy(array("nombreTecnico" => $strNombreTecnicoExtenderDualBand,
                                                                                  "empresaCod"    => $strCodEmpresa,
                                                                                  "estado"        => "Activo"));
                //Se busca primero si el plan incluye el producto Extender Dual Band Gratis
                if(is_object($objProdExtenderDualBand))
                {
                    $strNombreProductoExtenderDualBand = $objProdExtenderDualBand->getDescripcionProducto();
                    foreach($arrayPlanDetPlanesDic as $objPlanDet)
                    {
                        if($objPlanDet->getProductoId() == $objProdExtenderDualBand->getId())
                        {
                            $strExtenderDualBand        = "SI";
                            $strExtenderDualBandEnPlan  = "SI";
                        }
                    }
                }

                //Si no está incluido en el plan, se procede a buscar si existe como producto adicional
                if ($strExtenderDualBand === "NO")
                {
                    $objPuntoServicio = $objServicio->getPuntoId();

                    if(is_object($objPuntoServicio) && is_object($objProdExtenderDualBand))
                    {
                        $arrayServiciosExtenderDualBand = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                            ->findBy(array("puntoId"       => $objPuntoServicio,
                                                                                           "productoId"    => $objProdExtenderDualBand,
                                                                                           "estado"        => "Pendiente"));
                        if(!empty($arrayServiciosExtenderDualBand))
                        {
                            $strExtenderDualBand = "SI";
                        }
                    }
                }
                $boolFalse = false;
                foreach($arrayPlanDetPlanesDic as $objPlanDet)
                {
                    $objProductoDetallePlan = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->find($objPlanDet->getProductoId());
                    if(is_object($objProductoDetallePlan))
                    {
                        $boolMcAfeeEnPlan = strpos($objProductoDetallePlan->getDescripcionProducto(), 'I. PROTEGIDO MULTI PAID');

                        if($boolMcAfeeEnPlan !== $boolFalse)
                        {
                            $strTieneMcAfeeEnPlan   = "SI";
                            $objProductoMcAfee      = $objProductoDetallePlan;
                            break;
                        }
                    }
                }

                if($strTieneMcAfeeEnPlan === "SI" && is_object($objProductoMcAfee))
                {
                    $objSpcNumReintentos = $this->getServicioProductoCaracteristica($objServicio, "NUMERO REINTENTOS", $objProductoMcAfee);
                    if(is_object($objSpcNumReintentos))
                    {
                        $objSpcAntivirus = $this->getServicioProductoCaracteristica($objServicio, "ANTIVIRUS", $objProductoMcAfee);
                        if(is_object($objSpcAntivirus))
                        {
                            $strReintentoNuevoAntivirus = 'SI';
                        }
                        else
                        {
                            $strPermiteReintentoMcAfee  = 'SI';
                        }

                        $objSpcCorreoMcAfee = $this->getServicioProductoCaracteristica($objServicio, "CORREO ELECTRONICO", $objProductoMcAfee);
                        if(is_object($objSpcCorreoMcAfee))
                        {
                            $strCorreoMcAfee         = $objSpcCorreoMcAfee->getValor();
                            $intIdCaractCorreoMcAfee = $objSpcCorreoMcAfee->getId();
                        }
                    }

                    $objSpcSuscriberId  = $this->getServicioProductoCaracteristica($objServicio, "SUSCRIBER_ID", $objProductoMcAfee);
                    if(is_object($objSpcSuscriberId))
                    {
                        $strNuevoAntivirusActivo = "SI";
                    }
                    else
                    {
                        $objSpcSku = $this->getServicioProductoCaracteristica($objServicio, "SKU", $objProductoMcAfee);
                        if(is_object($objSpcSku))
                        {
                            $strMcAfeeActivo = "SI";
                        }
                    }
                }
                
                $objProdWifiDualBand = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                         ->findOneBy(array("nombreTecnico" => $strNombreTecnicoWifiDualBand,
                                                                           "empresaCod"    => $strCodEmpresa,
                                                                           "estado"        => "Activo"));
                //Se busca primero si el plan incluye el producto Wifi Dual Band Gratis
                if(is_object($objProdWifiDualBand))
                {
                    $strNombreProductoWifiDualBand = $objProdWifiDualBand->getDescripcionProducto();
                    foreach($arrayPlanDetPlanesDic as $objPlanDet)
                    {
                        if($objPlanDet->getProductoId() == $objProdWifiDualBand->getId())
                        {
                            $strWifiDualBand        = "SI";
                            $strWifiDualBandEnPlan  = "SI";
                        }
                    }
                }

                //Si no está incluido en el plan, se procede a buscar si existe como producto adicional
                if($strWifiDualBand === "NO")
                {
                    $objPuntoServicio = $objServicio->getPuntoId();
                    if(is_object($objPuntoServicio) && is_object($objProdWifiDualBand))
                    {
                        $arrayEstadosWifiDualBand = array ('Pendiente',
                                                           'PrePlanificada',
                                                           'Detenido',
                                                           'Detenida',
                                                           'AsignadoTarea',
                                                           'Asignada',
                                                           'Activo',
                                                           'In-Corte');

                        $arrayServiciosWifiDualBand = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->findBy(array("puntoId"       => $objPuntoServicio,
                                                                                       "productoId"    => $objProdWifiDualBand,
                                                                                       "estado"        => $arrayEstadosWifiDualBand));
                        if(!empty($arrayServiciosWifiDualBand))
                        {
                            $strWifiDualBand = "SI";
                        }
                    }
                    if ($strWifiDualBand == "NO")
                    {
                        $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                   ->findOneBy(array( "servicioId" => $objServicio->getId()));
                        if(!is_object($objServicioTecnico))
                        {
                            throw new \Exception("No se ha podido obtener el servicio técnico");
                        }
                        $intElementoClienteId = $objServicioTecnico->getElementoClienteId();
                        if (!empty($intElementoClienteId))
                        {
                            $objElementoCliente = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                       ->find($intElementoClienteId);
                            $srtModeloEleCli    = $objElementoCliente->getModeloElementoId()->getNombreModeloElemento();
                            $objElementoOlt     = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                       ->find($objServicioTecnico->getElementoId());
                            $strMarcaOlt        = $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();

                            $arrayModelosEquiposPermitidos  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                              ->get('MODELOS_EQUIPOS_NUEVOS_PLANES_MD',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    $strNombreTecnicoWifiDualBand,
                                                                                    $strMarcaOlt,
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    $strCodEmpresa);
                            if(!empty($arrayModelosEquiposPermitidos))
                            {
                                foreach($arrayModelosEquiposPermitidos as $arrayModeloEquipoPermitido)
                                {
                                    if($arrayModeloEquipoPermitido["valor4"] == $srtModeloEleCli)
                                    {
                                        $strWifiDualBand = "SI";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            error_log("error verificando planes".$e->getMessage());
        }
        $arrayResultado = array("strWifiDualBand"                   => $strWifiDualBand,
                                "strWifiDualBandEnPlan"             => $strWifiDualBandEnPlan,
                                "strExtenderDualBand"               => $strExtenderDualBand,
                                "strExtenderDualBandEnPlan"         => $strExtenderDualBandEnPlan,
                                "strPlanActualDic"                  => $strPlanActualDic,
                                "strNombreProductoWifiDualBand"     => $strNombreProductoWifiDualBand,
                                "strNombreProductoExtenderDualBand" => $strNombreProductoExtenderDualBand,
                                "strNombreTecnicoWifiDualBand"      => $strNombreTecnicoWifiDualBand,
                                "strNombreTecnicoExtenderDualBand"  => $strNombreTecnicoExtenderDualBand,
                                "strPermiteReintentoMcAfee"         => $strPermiteReintentoMcAfee,
                                "strTieneMcAfeeEnPlan"              => $strTieneMcAfeeEnPlan,
                                "strMcAfeeActivo"                   => $strMcAfeeActivo,
                                "strCorreoMcAfee"                   => $strCorreoMcAfee,
                                "intIdCaractCorreoMcAfee"           => $intIdCaractCorreoMcAfee,
                                "strNuevoAntivirusActivo"           => $strNuevoAntivirusActivo,
                                "strReintentoNuevoAntivirus"        => $strReintentoNuevoAntivirus
                                );
        return $arrayResultado;
    }

    /**
     *
     * Función que verifica si existe un modelo especificado para cada tecnología
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 03-07-2019 Se envía nuevo parámetro con la marca del olt al que se va a migrar, sólo cuando se realiza
     *                          una planificación de una solicitud de migración
     * @since 1.0
     *
     * @param array $arrayParametros [  "objServicio"               => objeto del servicio
     *                                  "strCodEmpresa"             => id de la empresa en sesión,
     *                                  "strNombreTecnicoProducto"  => nombre técnico del producto a buscar
     *                                  "strModeloElementoEquipo"   => modelo de equipo a buscar
     *                              ]
     *
     * @return array $arrayResultado[
     *                                  "status"            => OK o ERROR
     *                                  "necesitaEquipo"    => SI o NO necesita otro equipo que el del proceso normal
     *                                  "mensaje"           => mensaje de error o modelos permitidos
     *                              ]
     *
     */
    public function verificarModelosDualBand($arrayParametros)
    {
        $intIdServicio              = $arrayParametros["intIdServicio"] ? $arrayParametros["intIdServicio"] : 0;
        $objServicio                = $arrayParametros["objServicio"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strNombreTecnicoProducto   = $arrayParametros["strNombreTecnicoProducto"];
        $strModeloElementoEquipo    = $arrayParametros["strModeloElementoEquipo"] ? $arrayParametros["strModeloElementoEquipo"] : "";
        $strNecesitaEquipo          = "NO";
        $strModelosPermitidos       = "";

        try
        {
            if((!is_object($objServicio) && $intIdServicio === 0) || empty($strCodEmpresa) || empty($strNombreTecnicoProducto))
            {
                throw new \Exception("No se ha enviado los parámetros necesarios");
            }

            if($intIdServicio > 0)
            {
                $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
                if(!is_object($objServicio))
                {
                    throw new \Exception("No se ha podido obtener el servicio con id ".$intIdServicio);
                }
            }
            $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array( "servicioId" => $objServicio->getId()));
            if(!is_object($objServicioTecnico))
            {
                throw new \Exception("No se ha podido obtener el servicio técnico");
            }
            $objElementoOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                      ->find($objServicioTecnico->getElementoId());
            if(isset($arrayParametros["strMarcaOlt"]) && !empty($arrayParametros["strMarcaOlt"]))
            {
                $strMarcaOlt    = $arrayParametros["strMarcaOlt"];
            }
            else
            {
                $strMarcaOlt    = $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
            }
            $arrayModelosEquiposPermitidos  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->get('MODELOS_EQUIPOS_NUEVOS_PLANES_MD',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $strNombreTecnicoProducto,
                                                                    $strMarcaOlt,
                                                                    '',
                                                                    $strModeloElementoEquipo,
                                                                    '',
                                                                    $strCodEmpresa);
            if(!empty($arrayModelosEquiposPermitidos))
            {
                $strNecesitaEquipo = "SI";
                foreach($arrayModelosEquiposPermitidos as $arrayModeloEquipoPermitido)
                {
                    if(empty($strModelosPermitidos))
                    {
                        $strModelosPermitidos = $arrayModeloEquipoPermitido["valor4"];
                    }
                    else
                    {
                        $strModelosPermitidos = $strModelosPermitidos.", ".$arrayModeloEquipoPermitido["valor4"];
                    }
                }
            }
            $strStatus  = "OK";
            $strMensaje = $strModelosPermitidos;
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuesta = array("status"            => $strStatus,
                                "necesitaEquipo"    => $strNecesitaEquipo,
                                "mensaje"           => $strMensaje);
        return $arrayRespuesta;

    }

    /**
     *
     * Función que crea una solicitud de agregar equipo automáticamente  para los equipos Dual Band
     * si existe un modelo especificado para cada tecnología
     *
     * @param array $arrayParametros [  "objServicio"               => objeto del servicio
     *                                  "strCodEmpresa"             => id de la empresa en sesión,
     *                                  "strUsrCreacion"            => usuario de creación,
     *                                  "strIpCreacion"             => ip de creación,
     *                                  "strNombreTecnicoProducto"  => nombre técnico del producto a buscar
     *                                  "strAgregarExtenderDualBand"=> crear característica para agregar extender,
     *                                  "strEstadoSolicitud"        => estado de la solicitud
     *                              ]
     * @return array $arrayResultado[
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => mensaje de error
     *                              ]
     * 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 19-09-2020 Se eliminan validaciones que ya son consideradas desde la función que invoca a ésta y que por ende se eliminan algunos
     *                         parámetros que ya no son necesarios
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 07-04-2021 Se agregan parámetros para permitir crear las solicitudes de agregar equipo con las características necesarias para
     *                         cambio de ont por agregación de extender
     *
     */
    public function crearSolAutomaticaAgregarEquipoDualBand($arrayParametros)
    {
        $objServicio                = $arrayParametros["objServicio"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strIpCreacion              = $arrayParametros["strIpCreacion"];
        $strCambioAWifiDualBand     = $arrayParametros["strCambioAWifiDualBand"] ? $arrayParametros["strCambioAWifiDualBand"] : "NO";
        $strCambioOnt               = $arrayParametros["strCambioOnt"] ? $arrayParametros["strCambioOnt"] : "NO";
        $strMotivoCambioOnt         = $arrayParametros["strMotivoCambioOnt"] ? $arrayParametros["strMotivoCambioOnt"] : "";
        $strTipoOntNuevo            = $arrayParametros["strTipoOntNuevo"] ? $arrayParametros["strTipoOntNuevo"] : "";
        $strObservacionAdicServicio = $arrayParametros["strObservacionAdicServicio"] ? $arrayParametros["strObservacionAdicServicio"] : "";
        $strAgregarExtenderDualBand = $arrayParametros["strAgregarExtenderDualBand"] ? $arrayParametros["strAgregarExtenderDualBand"] : "NO";
        $strEstadoSolicitud         = $arrayParametros["strEstadoSolicitud"];
        $strMensaje                 = "";
        $objSolAgregarEquipoDualBand=null;
        try
        {
            $objTipoSolicitudAgregarEquipo = $this->emComercial
                                                  ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                  ->findOneByDescripcionSolicitud('SOLICITUD AGREGAR EQUIPO');

            if (!is_object($objTipoSolicitudAgregarEquipo))
            {
                throw new \Exception("No se encontró información acerca del tipo de solicitud de agregar equipo");
            }
            $strObservacionCorreo           = $objTipoSolicitudAgregarEquipo->getDescripcionSolicitud()." creada automáticamente";
            $objSolAgregarEquipoDualBand    = new InfoDetalleSolicitud();
            $objSolAgregarEquipoDualBand->setServicioId($objServicio);
            $objSolAgregarEquipoDualBand->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
            $objSolAgregarEquipoDualBand->setEstado($strEstadoSolicitud);
            $objSolAgregarEquipoDualBand->setUsrCreacion($strUsrCreacion);
            $objSolAgregarEquipoDualBand->setFeCreacion(new \DateTime('now'));
            $this->emComercial->persist($objSolAgregarEquipoDualBand);
            $this->emComercial->flush();

            $objPunto = $objServicio->getPuntoId();
            if (!is_object($objPunto))
            {
                throw new \Exception("No se encontró información acerca del punto del servicio");
            }

            if($strCambioAWifiDualBand === "SI")
            {
                $objCaractWifiDualBand  = $this->emComercial
                                                   ->getRepository("schemaBundle:AdmiCaracteristica")
                                                   ->findOneBy(array('descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                     'estado'                    => 'Activo'));
                if (!is_object($objCaractWifiDualBand))
                {
                    throw new \Exception("No se encontró información acerca de característica WIFI DUAL BAND");
                }

                $objCaractElementoCliente   = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findOneBy(array('descripcionCaracteristica'  => 'ELEMENTO CLIENTE',
                                                                     'estado'                     => 'Activo'));
                if (!is_object($objCaractElementoCliente))
                {
                    throw new \Exception("No se encontró información acerca de característica ELEMENTO CLIENTE");
                }

                $objDetalleSolCaractEquipoDualBand = new InfoDetalleSolCaract();
                $objDetalleSolCaractEquipoDualBand->setCaracteristicaId($objCaractWifiDualBand);
                $objDetalleSolCaractEquipoDualBand->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                $objDetalleSolCaractEquipoDualBand->setValor("SI");
                $objDetalleSolCaractEquipoDualBand->setEstado($strEstadoSolicitud);
                $objDetalleSolCaractEquipoDualBand->setUsrCreacion($strUsrCreacion);
                $objDetalleSolCaractEquipoDualBand->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($objDetalleSolCaractEquipoDualBand);
                $this->emComercial->flush();

                $objDetalleSolCaractElementoCliente = new InfoDetalleSolCaract();
                $objDetalleSolCaractElementoCliente->setCaracteristicaId($objCaractElementoCliente);
                $objDetalleSolCaractElementoCliente->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                $objDetalleSolCaractElementoCliente->setValor($arrayParametros["intIdElementoCliente"]);
                $objDetalleSolCaractElementoCliente->setEstado($strEstadoSolicitud);
                $objDetalleSolCaractElementoCliente->setUsrCreacion($strUsrCreacion);
                $objDetalleSolCaractElementoCliente->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($objDetalleSolCaractElementoCliente);
                $this->emComercial->flush();
                $strObservacionCorreo .= "<br>Incluye cambio de CPE ONT de un Wifi Estándar a un Wifi Dual Band.";
            }
            
            if($strAgregarExtenderDualBand === "SI")
            {
                $objCaractExtenderDualBand  = $this->emComercial
                                                   ->getRepository("schemaBundle:AdmiCaracteristica")
                                                   ->findOneBy(array('descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                     'estado'                    => 'Activo'));
                if (!is_object($objCaractExtenderDualBand))
                {
                    throw new \Exception("No se encontró información acerca de característica EXTENDER DUAL BAND");
                }

                $objDetalleSolCaractEquipoDualBand = new InfoDetalleSolCaract();
                $objDetalleSolCaractEquipoDualBand->setCaracteristicaId($objCaractExtenderDualBand);
                $objDetalleSolCaractEquipoDualBand->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                $objDetalleSolCaractEquipoDualBand->setValor("SI");
                $objDetalleSolCaractEquipoDualBand->setEstado($strEstadoSolicitud);
                $objDetalleSolCaractEquipoDualBand->setUsrCreacion($strUsrCreacion);
                $objDetalleSolCaractEquipoDualBand->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($objDetalleSolCaractEquipoDualBand);
                $this->emComercial->flush();
                $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
            }
            
            if($strCambioOnt === "SI")
            {
                $objCaractMotivoCreaSol = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                            ->findOneBy(array('descripcionCaracteristica' => 'MOTIVO_CREACION_SOLICITUD',
                                                                              'estado'                    => 'Activo'));
                if(!is_object($objCaractMotivoCreaSol))
                {
                    throw new \Exception("No se encontró información acerca de característica MOTIVO_CREACION_SOLICITUD");
                }

                $objCaractTipoOntNuevo  = $this->emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                            ->findOneBy(array('descripcionCaracteristica' => 'TIPO_ONT_NUEVO',
                                                                              'estado'                    => 'Activo'));
                if(!is_object($objCaractTipoOntNuevo))
                {
                    throw new \Exception("No se encontró información acerca de característica TIPO_ONT_NUEVO");
                }
                
                $objCaractElementoCliente   = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                ->findOneBy(array('descripcionCaracteristica'  => 'ELEMENTO CLIENTE',
                                                                                  'estado'                     => 'Activo'));
                if (!is_object($objCaractElementoCliente))
                {
                    throw new \Exception("No se encontró información acerca de característica ELEMENTO CLIENTE");
                }
                
                $objDetalleSolCaractMotivoCreaSol = new InfoDetalleSolCaract();
                $objDetalleSolCaractMotivoCreaSol->setCaracteristicaId($objCaractMotivoCreaSol);
                $objDetalleSolCaractMotivoCreaSol->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                $objDetalleSolCaractMotivoCreaSol->setValor($strMotivoCambioOnt);
                $objDetalleSolCaractMotivoCreaSol->setEstado($strEstadoSolicitud);
                $objDetalleSolCaractMotivoCreaSol->setUsrCreacion($strUsrCreacion);
                $objDetalleSolCaractMotivoCreaSol->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($objDetalleSolCaractMotivoCreaSol);
                $this->emComercial->flush();
                
                $objDetalleSolCaractTipoOntNuevo = new InfoDetalleSolCaract();
                $objDetalleSolCaractTipoOntNuevo->setCaracteristicaId($objCaractTipoOntNuevo);
                $objDetalleSolCaractTipoOntNuevo->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                $objDetalleSolCaractTipoOntNuevo->setValor($strTipoOntNuevo);
                $objDetalleSolCaractTipoOntNuevo->setEstado($strEstadoSolicitud);
                $objDetalleSolCaractTipoOntNuevo->setUsrCreacion($strUsrCreacion);
                $objDetalleSolCaractTipoOntNuevo->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($objDetalleSolCaractTipoOntNuevo);
                $this->emComercial->flush();
                
                $objDetalleSolCaractElementoCliente = new InfoDetalleSolCaract();
                $objDetalleSolCaractElementoCliente->setCaracteristicaId($objCaractElementoCliente);
                $objDetalleSolCaractElementoCliente->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                $objDetalleSolCaractElementoCliente->setValor($arrayParametros["intIdElementoCliente"]);
                $objDetalleSolCaractElementoCliente->setEstado($strEstadoSolicitud);
                $objDetalleSolCaractElementoCliente->setUsrCreacion($strUsrCreacion);
                $objDetalleSolCaractElementoCliente->setFeCreacion(new \DateTime('now'));
                $this->emComercial->persist($objDetalleSolCaractElementoCliente);
                $this->emComercial->flush();
                
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objServicio);
                $objServicioHistorial->setObservacion("Se crea la ".$objTipoSolicitudAgregarEquipo->getDescripcionSolicitud()
                                                      ." #".$objSolAgregarEquipoDualBand->getId()." que permite cambio de CPE ONT a un "
                                                      .$strTipoOntNuevo. $strObservacionAdicServicio);
                $objServicioHistorial->setIpCreacion($strIpCreacion);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objServicioHistorial->setEstado($objServicio->getEstado());
                $this->emComercial->persist($objServicioHistorial);
                $this->emComercial->flush();
                
                $strObservacionCorreo .= "<br>Incluye cambio de CPE ONT a un ".$strTipoOntNuevo;
            }
            
            $objDetalleSolHistEquipoDualBand = new InfoDetalleSolHist();
            $objDetalleSolHistEquipoDualBand->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
            $objDetalleSolHistEquipoDualBand->setIpCreacion($strIpCreacion);
            $objDetalleSolHistEquipoDualBand->setFeCreacion(new \DateTime('now'));
            $objDetalleSolHistEquipoDualBand->setUsrCreacion($strUsrCreacion);
            $objDetalleSolHistEquipoDualBand->setEstado($strEstadoSolicitud);
            $objDetalleSolHistEquipoDualBand->setObservacion($strObservacionCorreo);
            $this->emComercial->persist($objDetalleSolHistEquipoDualBand);
            $this->emComercial->flush();

            $strMensaje = "<br>Se ha creado la SOLICITUD AGREGAR EQUIPO asociada al servicio";
            $this->envioNotifAgregarEquipo( array(
                                                    "objPunto"                  => $objPunto,
                                                    "objServicio"               => $objServicio,
                                                    "strObservacionCorreo"      => $strObservacionCorreo,
                                                    "strDescripcionSolicitud"   => $objTipoSolicitudAgregarEquipo->getDescripcionSolicitud(),
                                                    "strUsrCreacion"            => $strUsrCreacion,
                                                    "strIpCreacion"             => $strIpCreacion
                                                ));
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            error_log("Error al crear Solicitud Automática Agregar Equipo Dual Band".$e->getMessage());
        }
        $arrayRespuesta = array("status"                    => $strStatus,
                                "mensaje"                   => $strMensaje,
                                "objSolicitudAgregarEquipo" => $objSolAgregarEquipoDualBand);
        return $arrayRespuesta;
    }

    /**
     * crearSolicitudCambioEquipoPorSoporte
     *
     * Función que crea una solicitud de agregar equipo automáticamente  para los equipos Dual Band
     * si existe un modelo especificado para cada tecnología
     *
     * @param array $arrayParametros [  "objServicio"        => objeto del servicio
     *                                  "objServicioTecnico" => objeto con los datos técnicos del servicio
     *                                  "strUsrCreacion"     => usuario de creación
     *                                  "strIpCreacion"      => ip de creación
     *                              ]
     * @return array $arrayResultado[
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => mensaje de error
     *                              ]
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 08-07-2019 - Se agrega programación para identificar si un producto McAfee ya se encuentra activos
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 12-07-2019 - Se modifica observación que se registra en el historial del servicio
     * @since 1.0
     */
    public function crearSolicitudCambioEquipoPorSoporte($arrayParametros)
    {
        $objServicio        = $arrayParametros["objServicio"];
        $objServicioTecnico = $arrayParametros["objServicioTecnico"];
        $strUsrCreacion     = $arrayParametros["strUsrCreacion"];
        $strIpCreacion      = $arrayParametros["strIpCreacion"];
        $strStatus          = "ERROR";
        $strMensaje         = "ERROR";
        $strEstadoSol       = "Pendiente";
        $this->emComercial->getConnection()->beginTransaction();
        try
        {
            $objTipoSolicitudCEPSoporte = $this->emComercial
                                               ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                               ->findOneByDescripcionSolicitud('SOLICITUD CAMBIO EQUIPO POR SOPORTE');

            if (!is_object($objTipoSolicitudCEPSoporte))
            {
                throw new \Exception("No se encontró información acerca del tipo de solicitud de cambio de equipo por soporte");
            }
            $strObservacionCorreo = $objTipoSolicitudCEPSoporte->getDescripcionSolicitud()." creada automáticamente pendiente de aprobación";
            $objSolCamEquiPorSoporte  = new InfoDetalleSolicitud();
            $objSolCamEquiPorSoporte->setServicioId($objServicio);
            $objSolCamEquiPorSoporte->setTipoSolicitudId($objTipoSolicitudCEPSoporte);
            $objSolCamEquiPorSoporte->setEstado($strEstadoSol);
            $objSolCamEquiPorSoporte->setUsrCreacion($strUsrCreacion);
            $objSolCamEquiPorSoporte->setFeCreacion(new \DateTime('now'));
            $this->emComercial->persist($objSolCamEquiPorSoporte);
            $this->emComercial->flush();
            $objPunto = $objServicio->getPuntoId();
            if (!is_object($objPunto))
            {
                throw new \Exception("No se encontró información acerca del punto del servicio");
            }
            $objCaractElementoCliente = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                             ->findOneBy(array('descripcionCaracteristica'  => 'ELEMENTO CLIENTE',
                                                               'estado'                     => 'Activo'));
            if (!is_object($objCaractElementoCliente))
            {
                throw new \Exception("No se encontró información acerca de característica ELEMENTO CLIENTE");
            }
            $objDetalleSolCaractElementoCliente = new InfoDetalleSolCaract();
            $objDetalleSolCaractElementoCliente->setCaracteristicaId($objCaractElementoCliente);
            $objDetalleSolCaractElementoCliente->setDetalleSolicitudId($objSolCamEquiPorSoporte);
            $objDetalleSolCaractElementoCliente->setValor($objServicioTecnico->getElementoClienteId());
            $objDetalleSolCaractElementoCliente->setEstado($strEstadoSol);
            $objDetalleSolCaractElementoCliente->setUsrCreacion($strUsrCreacion);
            $objDetalleSolCaractElementoCliente->setFeCreacion(new \DateTime('now'));
            $this->emComercial->persist($objDetalleSolCaractElementoCliente);
            $this->emComercial->flush();
            $objDetalleSolHistEquipo = new InfoDetalleSolHist();
            $objDetalleSolHistEquipo->setDetalleSolicitudId($objSolCamEquiPorSoporte);
            $objDetalleSolHistEquipo->setIpCreacion($strIpCreacion);
            $objDetalleSolHistEquipo->setFeCreacion(new \DateTime('now'));
            $objDetalleSolHistEquipo->setUsrCreacion($strUsrCreacion);
            $objDetalleSolHistEquipo->setEstado($strEstadoSol);
            $objDetalleSolHistEquipo->setObservacion($strObservacionCorreo);
            $this->emComercial->persist($objDetalleSolHistEquipo);
            $this->emComercial->flush();

            $strMensaje = "<br>Se ha creado la SOLICITUD CAMBIO DE EQUIPO POR SOPORTE asociada al servicio";
            $strEstado = $objServicio->getEstado();
            $objServHistServicio    = new InfoServicioHistorial();
            $objServHistServicio->setServicioId($objServicio);
            $objServHistServicio->setObservacion($strMensaje);
            $objServHistServicio->setEstado($strEstado);
            $objServHistServicio->setUsrCreacion($strUsrCreacion);
            $objServHistServicio->setFeCreacion(new \DateTime('now'));
            $objServHistServicio->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServHistServicio);
            $this->emComercial->flush();
            $this->envioNotifCambioEquipoPorSoporte( array(
                                                        "objPunto"                  => $objPunto,
                                                        "objServicio"               => $objServicio,
                                                        "strObservacionCorreo"      => $strObservacionCorreo,
                                                        "strDescripcionSolicitud"   => $objTipoSolicitudCEPSoporte->getDescripcionSolicitud(),
                                                        "strUsrCreacion"            => $strUsrCreacion,
                                                        "strIpCreacion"             => $strIpCreacion,
                                                        "strCodigoPlantilla"        => "CEPS-CREASOL"));
            $strStatus  = "OK";
            $strMensaje = "OK";
            $this->emComercial->getConnection()->commit();
        }
        catch (\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $strMensaje = $objEx->getMessage();
            if($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
            $this->emComercial->getConnection()->close();
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje);
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para generar una solicitud de visita técnica a clientes que activaron equipos dual band.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 28-05-2019
     *
     * @param array $arrayParametros [  "objServicio"   => objeto del servicio
     *                                  "intFloatValor"    => precio a registrar en la solicitud
     *                                  "strUser"       => usuario de creación
     *                                  "strIpCreacion" => ip de creación
     *                              ]
     */
    public function generarSolicitudVisitaTecnicaPorInstalacion($arrayParametros)
    {
        try
        {
            $objServicio = $arrayParametros['objServicio'];
            if(is_object($objServicio))
            {
                $objMotivo = $this->emGeneral
                                  ->getRepository('schemaBundle:AdmiMotivo')
                                  ->findOneByNombreMotivo('Solicitud al activar servicio del cliente mediante visita técnica');

                $intIdMotivo     = 0;
                if( $objMotivo )
                {
                    $intIdMotivo = $objMotivo->getId();
                }
                $strObservacion      = 'Se crea '.self::SOLICITUD_VISITA_TECNICA_POR_INSTALACION;
                $objTipoSolicitud    = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                         ->findOneByDescripcionSolicitud( self::SOLICITUD_VISITA_TECNICA_POR_INSTALACION );
                $objDetalleSolicitud = new InfoDetalleSolicitud();
                $objDetalleSolicitud->setEstado(self::ESTADO_PENDIENTE);
                $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                $objDetalleSolicitud->setUsrCreacion($arrayParametros['strUser']);
                $objDetalleSolicitud->setServicioId($objServicio);
                $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                $objDetalleSolicitud->setMotivoId($intIdMotivo);
                $objDetalleSolicitud->setPrecioDescuento($arrayParametros['floatValor']);
                $objDetalleSolicitud->setObservacion($strObservacion);
                $this->emComercial->persist($objDetalleSolicitud);
                $this->emComercial->flush();

                $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                           ->findOneByDescripcionCaracteristica( self::CARACTERISTICA_SOLICITUD );

                $objDetalleSolCarac    = new InfoDetalleSolCaract();
                $objDetalleSolCarac->setDetalleSolicitudId($objDetalleSolicitud);
                $objDetalleSolCarac->setEstado(self::ESTADO_ACTIVO);
                $objDetalleSolCarac->setFeCreacion(new \DateTime('now'));
                $objDetalleSolCarac->setUsrCreacion($arrayParametros['strUser']);
                $objDetalleSolCarac->setCaracteristicaId($objAdmiCaracteristica);
                $this->emComercial->persist($objDetalleSolCarac);
                $this->emComercial->flush();

                $objDetalleSolHist     = new InfoDetalleSolHist();
                $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                $objDetalleSolHist->setEstado(self::ESTADO_PENDIENTE);
                $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $objDetalleSolHist->setUsrCreacion($arrayParametros['strUser']);
                $objDetalleSolHist->setMotivoId($intIdMotivo);
                $objDetalleSolHist->setObservacion($strObservacion);
                $this->emComercial->persist($objDetalleSolHist);
                $this->emComercial->flush();
            }
        }
        catch (\Exception $objEx)
        {
            $strMensaje = $objEx->getMessage();
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->generarSolicitudVisitaTecnicaPorInstalacion',
                                            $strMensaje,
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpServicio']);
        }
    }

    /**
     *
     * Función que crea una solicitud de agregar equipo automáticamente  para los equipos Dual Band
     * si existe un modelo especificado para cada tecnología
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 28-02-2019 - Se agrega nuevo parámetro de entrada para procesar notificaciones de servicios
     *                           generados por orden de traslado de nuevos planes MD
     * @since 1.0
     *
     * @param array $arrayParametros [  "objServicio"               => objeto del servicio,
     *                                  "objPunto"                  => objeto del punto,
     *                                  "strObservacionCorreo"      => observación de correo,
     *                                  "strDescripcionSolicitud"   => descripción de la solicitud,
     *                                  "strUsrCreacion"            => usuario de creación,
     *                                  "strIpCreacion"             => ip de creación
     *                                  "strEsRechazoAnulacion"     => bandera que indica si se trata de la recreación de una solicitud por
     *                                                                 rechazo o anulación de traslado
     *                              ]
     */
    public function envioNotifAgregarEquipo($arrayParametros)
    {
        $objPunto                   = $arrayParametros["objPunto"];
        $objServicio                = $arrayParametros["objServicio"];
        $strObservacionCorreo       = $arrayParametros["strObservacionCorreo"];
        $strDescripcionSolicitud    = $arrayParametros["strDescripcionSolicitud"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strIpCreacion              = $arrayParametros["strIpCreacion"];
        $strCodigoPlantilla         = $arrayParametros["strCodigoPlantilla"] ? $arrayParametros["strCodigoPlantilla"] : "AGREGAEQUIPOPYL";
        $strEsRechazoAnulacion      = $arrayParametros["strEsRechazoAnulacion"];
        try
        {
            if(!is_object($objPunto) || !is_object($objServicio) || empty($strObservacionCorreo) || empty($strDescripcionSolicitud)
                || empty($strUsrCreacion) || empty($strIpCreacion))
            {
                throw new \Exception("No se han enviado los parámetros necesarios para enviar el correo al agregar equipo");
            }
            $objPersonaEmpresaRol   = $objPunto->getPersonaEmpresaRolId();
            $objPersona             = $objPersonaEmpresaRol->getPersonaId();
            $objJurisdiccion        = $objPunto->getPuntoCoberturaId();
            $strLogin               = $objPunto->getLogin();
            $strNombreCliente       = sprintf("%s",$objPersona);
            if(is_object($objJurisdiccion))
            {
                $strNombreJurisdiccion = $objJurisdiccion->getNombreJurisdiccion();
            }
            else
            {
                $strNombreJurisdiccion = "";
            }
            if(is_object($objServicio->getPlanId()))
            {
                $strTipoPlanOProducto   = "Plan";
                $strNombrePlanOProducto = $objServicio->getPlanId()->getNombrePlan();
            }
            else
            {
                $strTipoPlanOProducto   = "Producto";
                $strNombrePlanOProducto = $objServicio->getProductoId()->getDescripcionProducto();
            }
            $arrayParametrosAgregarEquipo   = array(
                                                    "descripcionTipoSolicitud"  => $strDescripcionSolicitud,
                                                    "cliente"                   => $strNombreCliente,
                                                    "login"                     => $strLogin,
                                                    "nombreJurisdiccion"        => $strNombreJurisdiccion,
                                                    "tipoPlanOProducto"         => $strTipoPlanOProducto,
                                                    "nombrePlanOProducto"       => $strNombrePlanOProducto,
                                                    "observacion"               => $strObservacionCorreo,
                                                    "estadoServicio"            => $objServicio->getEstado()
                                                    );

            $strTipoOrden = $objServicio->getTipoOrden();
            if(isset($arrayParametros["strAsunto"]) && !empty($arrayParametros["strAsunto"]))
            {
                $strAsuntoAgregarEquipo = $arrayParametros["strAsunto"];
            }
            else if ($strEsRechazoAnulacion == "SI")
            {
                $strAsuntoAgregarEquipo = "Creación ".$strDescripcionSolicitud." por rechazo/anulación de traslado - ".$strLogin;
            }
            else if ($strTipoOrden == "T")
            {
                $strAsuntoAgregarEquipo = "GENERACIÓN DE TRASLADO + CAMBIO DE EQUIPO - ".$strDescripcionSolicitud." - ".$strLogin;
            }
            else
            {
                $strAsuntoAgregarEquipo = "Creacion ".$strDescripcionSolicitud." - ".$strLogin;
            }
            $this->soporte->generarEnvioPlantilla(  $strAsuntoAgregarEquipo,
                                                    array(),
                                                    $strCodigoPlantilla,
                                                    $arrayParametrosAgregarEquipo,
                                                    '',
                                                    '',
                                                    '',
                                                    null,
                                                    false,
                                                    'notificacionesnetlife@netlife.info.ec');

        }
        catch (\Exception $e)
        {
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->envioNotifAgregarEquipo',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
    }

    /**
     * envioNotifCambioEquipoPorSoporte
     *
     * Función que envía una notificación a los usuarios encargado de aprobar las solicitudes de este tipo
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 01-07-2019
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 10-07-2019  Se modifica el método para realizar el envío de notificaciones
     *                          al momento de aprobar solicitudes de cambio de equipo por soporte
     * @since 1.0
     *
     * @param array $arrayParametros [  "objServicio"               => objeto del servicio,
     *                                  "objPunto"                  => objeto del punto,
     *                                  "strObservacionCorreo"      => observación de correo,
     *                                  "strDescripcionSolicitud"   => descripción de la solicitud,
     *                                  "strUsrCreacion"            => usuario de creación,
     *                                  "strIpCreacion"             => ip de creación
     *                               ]
     */
    public function envioNotifCambioEquipoPorSoporte($arrayParametros)
    {
        $objPunto                = $arrayParametros["objPunto"];
        $objServicio             = $arrayParametros["objServicio"];
        $strObservacionCorreo    = $arrayParametros["strObservacionCorreo"];
        $strDescripcionSolicitud = $arrayParametros["strDescripcionSolicitud"];
        $strUsrCreacion          = $arrayParametros["strUsrCreacion"];
        $strIpCreacion           = $arrayParametros["strIpCreacion"];
        $strCodigoPlantilla      = $arrayParametros["strCodigoPlantilla"];
        $strModeloCpe            = isset($arrayParametros["strModeloCpe"])?$arrayParametros['strModeloCpe']:"";

        try
        {
            if(!is_object($objPunto) || !is_object($objServicio) || empty($strObservacionCorreo) || empty($strDescripcionSolicitud)
                || empty($strUsrCreacion) || empty($strIpCreacion))
            {
                throw new \Exception("No se han enviado los parámetros necesarios para enviar el correo",
                                     " al crear solicitud de cambio de equipo por soporte");
            }
            $objPersonaEmpresaRol   = $objPunto->getPersonaEmpresaRolId();
            $objPersona             = $objPersonaEmpresaRol->getPersonaId();
            $objJurisdiccion        = $objPunto->getPuntoCoberturaId();
            $strLogin               = $objPunto->getLogin();
            $strNombreCliente       = sprintf("%s",$objPersona);
            if(is_object($objJurisdiccion))
            {
                $strNombreJurisdiccion = $objJurisdiccion->getNombreJurisdiccion();
            }
            else
            {
                $strNombreJurisdiccion = "";
            }
            if(is_object($objServicio->getPlanId()))
            {
                $strTipoPlanOProducto   = "Plan";
                $strNombrePlanOProducto = $objServicio->getPlanId()->getNombrePlan();
            }
            else
            {
                $strTipoPlanOProducto   = "Producto";
                $strNombrePlanOProducto = $objServicio->getProductoId()->getDescripcionProducto();
            }
            $arrayParametrosCEPS = array(
                                        "descripcionTipoSolicitud"  => $strDescripcionSolicitud,
                                        "cliente"                   => $strNombreCliente,
                                        "login"                     => $strLogin,
                                        "nombreJurisdiccion"        => $strNombreJurisdiccion,
                                        "tipoPlanOProducto"         => $strTipoPlanOProducto,
                                        "nombrePlanOProducto"       => $strNombrePlanOProducto,
                                        "observacion"               => $strObservacionCorreo,
                                        "estadoServicio"            => $objServicio->getEstado(),
                                        "modeloCpe"                 => $strModeloCpe
                                        );

            if (empty($strModeloCpe))
            {
                $strMotivo = "Creación ".$strDescripcionSolicitud;
            }
            else
            {
                $strMotivo = $strDescripcionSolicitud." APROBADA";
            }

            $strAsuntoCEPS = $strMotivo." - ".$strLogin;

            $this->soporte->generarEnvioPlantilla(  $strAsuntoCEPS,
                                                    array(),
                                                    $strCodigoPlantilla,
                                                    $arrayParametrosCEPS,
                                                    '',
                                                    '',
                                                    '',
                                                    null,
                                                    false,
                                                    'notificacionesnetlife@netlife.info.ec');
        }
        catch (\Exception $e)
        {
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->envioNotifCambioEquipoPorSoporte',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
    }

    /**
     * creaServicioIpFijaWan
     *
     * Crea un servicio IP FIJA para clientes Pyme que realizaron cambio de plan y tenian un plan antiguo
     * De esta manera se empieza a facturar dicho producto
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 27-10-2020
     * 
     * @author Edgar Pin Villavicencio
     * @version 1.1 11-sept-2022 Si es MD se pone como vendedor el usuario de creación 
     *
     * @param array $arrayParametros [  "punto"                     => objeto del punto
     *                                  "servicioTecnicoInternet"   => objeto del servicio técnico del Internet
     *                                  "usrCreacion"               => usuario de creación,
     *                                  "ipCreacion"                => ip de creación,
     *                                  "nombreTecnico"             => nombre técnico del producto a crear
     *                                  "codEmpresa"                => id de la empresa
     *                              ]
     * @return array $arrayRespuesta[
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => mensaje de error
     *                              ]
     */
    public function creaServicioIpFijaWan($arrayParametros)
    {
        $objPunto            = $arrayParametros['punto'];
        $objServicioInternet = $arrayParametros['servicioInternet'];
        $objServTecInternet  = $arrayParametros['servicioTecnicoInternet'];
        $strUsrCreacion      = $arrayParametros['usrCreacion'];
        $strIpCreacion       = $arrayParametros['ipCreacion'];
        $strCodEmpresa       = $arrayParametros['codEmpresa'];
        $strNombreTecnico    = $arrayParametros['nombreTecnico'];
        $strNombreProducto   = $arrayParametros['nombreProducto'];
        $objServicioProdIp   = null;
        $strMensaje          = "";
        try
        {
            if(!is_object($objServTecInternet))
            {
                throw new \Exception("No se ha enviado el servicio técnico del Internet");
            }
            $objProdIp  = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                            ->findOneBy(array("descripcionProducto"  => $strNombreProducto,
                                                              "nombreTecnico"        => $strNombreTecnico,
                                                              "empresaCod"           => $strCodEmpresa,
                                                              "estado"               => "Activo"));
            if(!is_object($objProdIp))
            {
                throw new \Exception("No existe el producto IP");
            }

            $intPrecioProdIp = 0;
            $strFuncionPrecio        = $objProdIp->getFuncionPrecio();
            $arrayParamsReemplazar   = array('[ESTATICO]','PRECIO');
            $arrayValoresReemplazar  = array(1, '$intPrecioProdIp');
            $strFuncionPrecio        = str_replace($arrayParamsReemplazar, $arrayValoresReemplazar, $strFuncionPrecio);
            $strDigitoVerificacion   = substr($strFuncionPrecio, -1, 1);
            if(is_numeric($strDigitoVerificacion))
            {
                $strFuncionPrecio = $strFuncionPrecio . ";";
            }
            eval($strFuncionPrecio);    
            $strUsrVendedor = $strCodEmpresa == "18" ? $strUsrCreacion : $objServicioInternet->getUsrVendedor();
            if(empty($strUsrVendedor))
            {
                $strUsrVendedor = $objPunto->getUsrVendedor();
            }
            $intIdOficinaVendedor                           = 0;
            $arrayParametrosVendedor['empresa']             = $strCodEmpresa;
            $arrayParametrosVendedor['criterios']['login']  = $strUsrVendedor;
            $arrayPerVendedor = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                  ->findPersonalByCriterios($arrayParametrosVendedor);
            if( isset($arrayPerVendedor['registros']) && !empty($arrayPerVendedor['registros'])
                && isset($arrayPerVendedor['total']) && $arrayPerVendedor['total'] > 0 )
            {
                $arrayInfoVendedor  = $arrayPerVendedor['registros'][0];
                $intIdPerVendedor   = $arrayInfoVendedor['idPersonaEmpresaRol'];
                if($intIdPerVendedor > 0)
                {
                    $objPerVendedor = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPerVendedor);
                    if(is_object($objPerVendedor))
                    {
                        $objOficinaVendedor = $objPerVendedor->getOficinaId();
                        if(is_object($objOficinaVendedor))
                        {
                            $intIdOficinaVendedor = $objOficinaVendedor->getId();
                        }
                    }
                }
            }
            $objAdmiNumeracion = null;
            if($intIdOficinaVendedor > 0)
            {
                $objAdmiNumeracion  = $this->emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                        ->findByEmpresaYOficina($strCodEmpresa, $intIdOficinaVendedor, 'ORD');
            }

            if(!is_object($objAdmiNumeracion))
            {
                $intIdOficinaVendedor   = 58;
                $objAdmiNumeracion      = $this->emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                            ->findByEmpresaYOficina($strCodEmpresa, $intIdOficinaVendedor, 'ORD');
            }
            $strSecuenciaAsig   = str_pad($objAdmiNumeracion->getSecuencia(),7, '0', STR_PAD_LEFT);
            $strNumeroOt        = $objAdmiNumeracion->getNumeracionUno().'-'.$objAdmiNumeracion->getNumeracionDos().'-'.$strSecuenciaAsig;

            $objInfoOrdenTrabajo  = new InfoOrdenTrabajo();
            $objInfoOrdenTrabajo->setPuntoId($objPunto);
            $objInfoOrdenTrabajo->setTipoOrden('N');
            $objInfoOrdenTrabajo->setNumeroOrdenTrabajo($strNumeroOt);
            $objInfoOrdenTrabajo->setFeCreacion(new \DateTime('now'));
            $objInfoOrdenTrabajo->setUsrCreacion($strUsrCreacion);
            $objInfoOrdenTrabajo->setIpCreacion($strIpCreacion);
            $objInfoOrdenTrabajo->setOficinaId($intIdOficinaVendedor);
            $objInfoOrdenTrabajo->setEstado('Activa');
            $this->emComercial->persist($objInfoOrdenTrabajo);
            $this->emComercial->flush();

            //Actualizo la numeracion en la tabla
            $strNumeracionActual = ($objAdmiNumeracion->getSecuencia()+1);
            $objAdmiNumeracion->setSecuencia($strNumeracionActual);
            $this->emComercial->persist($objAdmiNumeracion);
            $this->emComercial->flush();

            $objServicioProdIp = new InfoServicio();
            $objServicioProdIp->setPuntoId($objPunto);
            $objServicioProdIp->setProductoId($objProdIp);
            $objServicioProdIp->setEsVenta('S');
            $objServicioProdIp->setPrecioVenta($intPrecioProdIp);
            $objServicioProdIp->setCantidad(1);
            $objServicioProdIp->setTipoOrden('N');
            $objServicioProdIp->setOrdenTrabajoId($objInfoOrdenTrabajo);
            $objServicioProdIp->setPuntoFacturacionId($objServicioInternet->getPuntoFacturacionId());
            $objServicioProdIp->setUsrVendedor($strUsrVendedor);
            $objServicioProdIp->setEstado("Activo");
            $objServicioProdIp->setFrecuenciaProducto(1);
            $objServicioProdIp->setMesesRestantes(1);
            $objServicioProdIp->setDescripcionPresentaFactura($objProdIp->getDescripcionProducto());
            $objServicioProdIp->setUsrCreacion($strUsrCreacion);
            $objServicioProdIp->setFeCreacion(new \DateTime('now'));
            $objServicioProdIp->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioProdIp);
            $this->emComercial->flush();
        
            //historial de creación
            $objServHistCreacionProdIp = new InfoServicioHistorial();
            $objServHistCreacionProdIp->setServicioId($objServicioProdIp);
            $strObservacionServHist = "Se creo el servicio por cambio de plan";
            $objServHistCreacionProdIp->setObservacion($strObservacionServHist);
            $objServHistCreacionProdIp->setEstado("Pendiente");
            $objServHistCreacionProdIp->setUsrCreacion($strUsrCreacion);
            $objServHistCreacionProdIp->setFeCreacion(new \DateTime('now'));
            $objServHistCreacionProdIp->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServHistCreacionProdIp);
            $this->emComercial->flush();

            //historial de activación
            $objServHistActivacionProdIp = new InfoServicioHistorial();
            $objServHistActivacionProdIp->setServicioId($objServicioProdIp);
            $objServHistActivacionProdIp->setObservacion("Se confirmo el servicio");
            $objServHistActivacionProdIp->setEstado("Activo");
            $objServHistActivacionProdIp->setUsrCreacion($strUsrCreacion);
            $objServHistActivacionProdIp->setFeCreacion(new \DateTime('now'));
            $objServHistActivacionProdIp->setIpCreacion($strIpCreacion);
            $objServHistActivacionProdIp->setAccion("confirmarServicio");
            $this->emComercial->persist($objServHistActivacionProdIp);
            $this->emComercial->flush();

            $objServicioTecnicoProdIp = new InfoServicioTecnico();
            $objServicioTecnicoProdIp->setServicioId($objServicioProdIp);
            $objServicioTecnicoProdIp->setTipoEnlace('PRINCIPAL');
            $objServicioTecnicoProdIp->setUltimaMillaId($objServTecInternet->getUltimaMillaId());
            $objServicioTecnicoProdIp->setElementoId($objServTecInternet->getElementoId());
            $objServicioTecnicoProdIp->setInterfaceElementoId($objServTecInternet->getInterfaceElementoId());
            $objServicioTecnicoProdIp->setElementoContenedorId($objServTecInternet->getElementoContenedorId());
            $objServicioTecnicoProdIp->setElementoConectorId($objServTecInternet->getElementoConectorId());
            $objServicioTecnicoProdIp->setInterfaceElementoConectorId($objServTecInternet->getInterfaceElementoConectorId());
            $this->emComercial->persist($objServicioTecnicoProdIp);
            $this->emComercial->flush();

            $strStatus  = "OK";
            $strMensaje = "<br>Se ha creado el servicio ".$objProdIp->getDescripcionProducto()." como producto adicional";
        }
        catch (\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->creaServicioIpFijaWan',
                                            $objEx->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
            $strMensaje = " No se ha podido crear el producto de manera automática";
        }
        $arrayRespuesta = array("strStatus"         => $strStatus,
                                "strMensaje"        => $strMensaje,
                                "objServicioProdIp" => $objServicioProdIp);
        return $arrayRespuesta;
    }

    /**
     * creaServicioEquipoDualBand
     *
     * Crea un servicio Wifi Dual Band por cambio de un plan con Wifi Dual Band a uno sin Wifi Dual Band y
     * también en caso de cambiarse de un plan con Extender Dual Band a uno sin este equipo
     * De esta manera se empieza a facturar dicho producto
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 30-11-2018
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 20-06-2019  Se agrega programación para poder reutilizar método en proceso de cambio de equipo por soporte
     * @since 1.0
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 14-10-2019  Se agregan los meses restantes asociado al servicio
     *
     * @param array $arrayParametros [  "punto"                     => objeto del punto
     *                                  "servicioTecnicoInternet"   => objeto del servicio técnico del Internet
     *                                  "usrCreacion"               => usuario de creación,
     *                                  "ipCreacion"                => ip de creación,
     *                                  "nombreTecnico"             => nombre técnico del producto a crear
     *                                  "codEmpresa"                => id de la empresa
     *                              ]
     * @return array $arrayRespuesta[
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => mensaje de error
     *                              ]
     */
    public function creaServicioEquipoDualBand($arrayParametros)
    {
        $objPunto            = $arrayParametros['punto'];
        $objServicioInternet = $arrayParametros['servicioInternet'];
        $objServTecInternet  = $arrayParametros['servicioTecnicoInternet'];
        $strUsrCreacion      = $arrayParametros['usrCreacion'];
        $strIpCreacion       = $arrayParametros['ipCreacion'];
        $strCodEmpresa       = $arrayParametros['codEmpresa'];
        $strNombreTecnico    = $arrayParametros['nombreTecnico'];
        $strProceso          = $arrayParametros['strProceso'];

        $strMensaje         = "";
        try
        {
            if(!is_object($objServTecInternet))
            {
                throw new \Exception("No se ha enviado el servicio técnico del Internet");
            }
            $objProdEquipoDualBand  = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                        ->findOneBy(array("nombreTecnico"   => $strNombreTecnico,
                                                                            "empresaCod"    => $strCodEmpresa,
                                                                            "estado"        => "Activo"));
            if(!is_object($objProdEquipoDualBand))
            {
                throw new \Exception("No existe el producto Dual Band");
            }

            $intPrecioEquipoDualBand        = 0;
            $strFuncionPrecioEquipoDualBand = $objProdEquipoDualBand->getFuncionPrecio();
            $arrayParamsReemplazar          = array('[ES_GRATIS]','PRECIO');
            $arrayValoresReemplazar         = array("NO", '$intPrecioEquipoDualBand');
            $strFuncionPrecioEquipoDualBand = str_replace($arrayParamsReemplazar, $arrayValoresReemplazar, $strFuncionPrecioEquipoDualBand);
            $strDigitoVerificacion          = substr($strFuncionPrecioEquipoDualBand, -1, 1);
            if(is_numeric($strDigitoVerificacion))
            {
                $strFuncionPrecioEquipoDualBand = $strFuncionPrecioEquipoDualBand . ";";
            }
            eval($strFuncionPrecioEquipoDualBand);

            $strUsrVendedor = $objServicioInternet->getUsrVendedor();
            if(empty($strUsrVendedor))
            {
                $strUsrVendedor = $objPunto->getUsrVendedor();
            }
            $intIdOficinaVendedor                           = 0;
            $arrayParametrosVendedor['empresa']             = $strCodEmpresa;
            $arrayParametrosVendedor['criterios']['login']  = $strUsrVendedor;
            $arrayPerVendedor = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                  ->findPersonalByCriterios($arrayParametrosVendedor);
            if( isset($arrayPerVendedor['registros']) && !empty($arrayPerVendedor['registros'])
                && isset($arrayPerVendedor['total']) && $arrayPerVendedor['total'] > 0 )
            {
                $arrayInfoVendedor  = $arrayPerVendedor['registros'][0];
                $intIdPerVendedor   = $arrayInfoVendedor['idPersonaEmpresaRol'];
                if($intIdPerVendedor > 0)
                {
                    $objPerVendedor = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPerVendedor);
                    if(is_object($objPerVendedor))
                    {
                        $objOficinaVendedor = $objPerVendedor->getOficinaId();
                        if(is_object($objOficinaVendedor))
                        {
                            $intIdOficinaVendedor = $objOficinaVendedor->getId();
                        }
                    }
                }
            }
            $objAdmiNumeracion = null;
            if($intIdOficinaVendedor > 0)
            {
                $objAdmiNumeracion  = $this->emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                        ->findByEmpresaYOficina($strCodEmpresa, $intIdOficinaVendedor, 'ORD');
            }

            if(!is_object($objAdmiNumeracion))
            {
                $intIdOficinaVendedor   = 58;
                $objAdmiNumeracion      = $this->emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                            ->findByEmpresaYOficina($strCodEmpresa, $intIdOficinaVendedor, 'ORD');
            }
            $strSecuenciaAsig   = str_pad($objAdmiNumeracion->getSecuencia(),7, '0', STR_PAD_LEFT);
            $strNumeroOt        = $objAdmiNumeracion->getNumeracionUno().'-'.$objAdmiNumeracion->getNumeracionDos().'-'.$strSecuenciaAsig;

            $objInfoOrdenTrabajo  = new InfoOrdenTrabajo();
            $objInfoOrdenTrabajo->setPuntoId($objPunto);
            $objInfoOrdenTrabajo->setTipoOrden('N');
            $objInfoOrdenTrabajo->setNumeroOrdenTrabajo($strNumeroOt);
            $objInfoOrdenTrabajo->setFeCreacion(new \DateTime('now'));
            $objInfoOrdenTrabajo->setUsrCreacion($strUsrCreacion);
            $objInfoOrdenTrabajo->setIpCreacion($strIpCreacion);
            $objInfoOrdenTrabajo->setOficinaId($intIdOficinaVendedor);
            $objInfoOrdenTrabajo->setEstado('Activa');
            $this->emComercial->persist($objInfoOrdenTrabajo);
            $this->emComercial->flush();

            //Actualizo la numeracion en la tabla
            $strNumeracionActual = ($objAdmiNumeracion->getSecuencia()+1);
            $objAdmiNumeracion->setSecuencia($strNumeracionActual);
            $this->emComercial->persist($objAdmiNumeracion);
            $this->emComercial->flush();

            $objServicioEquipoDualBand = new InfoServicio();
            $objServicioEquipoDualBand->setPuntoId($objPunto);
            $objServicioEquipoDualBand->setProductoId($objProdEquipoDualBand);
            $objServicioEquipoDualBand->setEsVenta('S');
            $objServicioEquipoDualBand->setPrecioVenta($intPrecioEquipoDualBand);
            $objServicioEquipoDualBand->setCantidad(1);
            $objServicioEquipoDualBand->setTipoOrden('N');
            $objServicioEquipoDualBand->setOrdenTrabajoId($objInfoOrdenTrabajo);
            $objServicioEquipoDualBand->setPuntoFacturacionId($objServicioInternet->getPuntoFacturacionId());
            $objServicioEquipoDualBand->setUsrVendedor($strUsrVendedor);
            $objServicioEquipoDualBand->setEstado("Activo");
            $objServicioEquipoDualBand->setFrecuenciaProducto(1);
            $objServicioEquipoDualBand->setMesesRestantes(1);
            $objServicioEquipoDualBand->setDescripcionPresentaFactura($objProdEquipoDualBand->getDescripcionProducto());
            $objServicioEquipoDualBand->setUsrCreacion($strUsrCreacion);
            $objServicioEquipoDualBand->setFeCreacion(new \DateTime('now'));
            $objServicioEquipoDualBand->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioEquipoDualBand);
            $this->emComercial->flush();

            //historial de creación
            $objServHistCreacionEquipoDualBand = new InfoServicioHistorial();
            $objServHistCreacionEquipoDualBand->setServicioId($objServicioEquipoDualBand);
            $strObservacionServHist = "Se creo el servicio por cambio de plan";
            if (!empty($strProceso) && $strProceso == "CambioPorSoporte")
            {
                $strObservacionServHist = "Se creo el servicio por cambio de equipo por soporte";
            }
            $objServHistCreacionEquipoDualBand->setObservacion($strObservacionServHist);
            $objServHistCreacionEquipoDualBand->setEstado("Pendiente");
            $objServHistCreacionEquipoDualBand->setUsrCreacion($strUsrCreacion);
            $objServHistCreacionEquipoDualBand->setFeCreacion(new \DateTime('now'));
            $objServHistCreacionEquipoDualBand->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServHistCreacionEquipoDualBand);
            $this->emComercial->flush();

            //historial de activación
            $objServHistActivacionEquipoDualBand = new InfoServicioHistorial();
            $objServHistActivacionEquipoDualBand->setServicioId($objServicioEquipoDualBand);
            $objServHistActivacionEquipoDualBand->setObservacion("Se confirmo el servicio");
            $objServHistActivacionEquipoDualBand->setEstado("Activo");
            $objServHistActivacionEquipoDualBand->setUsrCreacion($strUsrCreacion);
            $objServHistActivacionEquipoDualBand->setFeCreacion(new \DateTime('now'));
            $objServHistActivacionEquipoDualBand->setIpCreacion($strIpCreacion);
            $objServHistActivacionEquipoDualBand->setAccion("confirmarServicio");
            $this->emComercial->persist($objServHistActivacionEquipoDualBand);
            $this->emComercial->flush();

            $objServicioTecnicoEquipoDualBand = new InfoServicioTecnico();
            $objServicioTecnicoEquipoDualBand->setServicioId($objServicioEquipoDualBand);
            $objServicioTecnicoEquipoDualBand->setTipoEnlace('PRINCIPAL');
            $objServicioTecnicoEquipoDualBand->setUltimaMillaId($objServTecInternet->getUltimaMillaId());

            if($strNombreTecnico === "WIFI_DUAL_BAND")
            {
                $objServicioTecnicoEquipoDualBand->setElementoClienteId($objServTecInternet->getElementoClienteId());
                $objServicioTecnicoEquipoDualBand->setInterfaceElementoClienteId($objServTecInternet->getInterfaceElementoClienteId());
            }
            else if($strNombreTecnico === "EXTENDER_DUAL_BAND")
            {
                $arrayParams                                    = array();
                $arrayParams['intInterfaceElementoConectorId']  = $objServTecInternet->getInterfaceElementoClienteId();
                $arrayParams['arrayData']                       = array();
                $arrayParams['strBanderaReturn']                = 'INTERFACE';
                $arrayParams['strTipoSmartWifi']                = 'ExtenderDualBand';
                $arrayParams['strRetornaPrimerWifi']            = 'SI';
                $objInterfaceElementoExtenderPlan               = $this->emInfraestructura
                                                                       ->getRepository('schemaBundle:InfoElemento')
                                                                       ->getElementosSmartWifiByInterface($arrayParams);
                if(is_object($objInterfaceElementoExtenderPlan))
                {
                    $objElementoExtenderPlan = $objInterfaceElementoExtenderPlan->getElementoId();
                    if(is_object($objElementoExtenderPlan))
                    {
                        $objDetEleMacExtender = $this->emInfraestructura
                                                     ->getRepository('schemaBundle:InfoDetalleElemento')
                                                     ->findOneBy(array('elementoId'     => $objElementoExtenderPlan->getId(),
                                                                      'detalleNombre'   => "MAC",
                                                                      'estado'          => 'Activo'
                                                                     )
                                                               );
                        if(is_object($objDetEleMacExtender))
                        {
                            $this->ingresarServicioProductoCaracteristica(  $objServicioEquipoDualBand,
                                                                            $objProdEquipoDualBand,
                                                                            "MAC",
                                                                            $objDetEleMacExtender->getDetalleValor(),
                                                                            $strUsrCreacion);
                        }
                        $objServicioTecnicoEquipoDualBand->setElementoClienteId($objElementoExtenderPlan->getId());
                        $objServicioTecnicoEquipoDualBand->setInterfaceElementoClienteId($objInterfaceElementoExtenderPlan->getId());
                    }
                }
            }
            else
            {
                throw new \Exception("No existe flujo definido para el producto con nombre técnico ".$strNombreTecnico);
            }
            $this->emComercial->persist($objServicioTecnicoEquipoDualBand);
            $this->emComercial->flush();

            //en caso de crear servicio por cambio de equipo por soporte se debe generar una solicitud de descuento del 100%
            if (!empty($strProceso) && $strProceso == "CambioPorSoporte")
            {
                $objMotivo = $this->emComercial->getRepository('schemaBundle:AdmiMotivo')
                                  ->findOneBy(array("nombreMotivo" => "Rentención de Cliente"
                                                   )
                                             );

                $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                         ->findOneBy(array("descripcionSolicitud" => "SOLICITUD DESCUENTO",
                                                           "estado"               => "Activo"
                                                          )
                                                    );

                if (is_object($objTipoSolicitud) && is_object($objMotivo))
                {
                    //inserto en la tabla InfoDetalleSolicitud
                    $objDetalleSolicitud = new InfoDetalleSolicitud();
                    $objDetalleSolicitud->setServicioId($objServicioEquipoDualBand);
                    $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud); //tipo de solicitud de descuento
                    $objDetalleSolicitud->setMotivoId($objMotivo->getId());
                    $objDetalleSolicitud->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                    $objDetalleSolicitud->setPrecioDescuento($intPrecioEquipoDualBand);
                    $objDetalleSolicitud->setPorcentajeDescuento(100);
                    $objDetalleSolicitud->setObservacion("Por cambio de equipo por temas de soporte");
                    $objDetalleSolicitud->setEstado('Aprobado');
                    $this->emComercial->persist($objDetalleSolicitud);

                    //se realiza el insert en la tabla de historicos INFO_DETALLE_SOL_HIST
                    $objDetalleSolHist = new InfoDetalleSolHist();
                    $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                    $objDetalleSolHist->setMotivoId($objMotivo->getId());
                    $objDetalleSolHist->setObservacion("Por cambio de equipo por temas de soporte");
                    $objDetalleSolHist->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                    $objDetalleSolHist->setEstado('Aprobado');
                    $this->emComercial->persist($objDetalleSolHist);

                    $strDescripcionCarac = 'DESCUENTO TOTALIZADO FACT';
                    //Busca la caracteristica asociada al descuento.
                    $objCaracteristicaDescuento = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                       ->findOneBy(array('descripcionCaracteristica' => $strDescripcionCarac,
                                                                         'estado'                    => 'Activo'));
                    if( !is_object($objCaracteristicaDescuento) )
                    {
                        $strMsnError = 'No se pudo generar solicitud de descuento, no existe caracteristica asociada a la empresa.';
                        throw new \Exception( $strMsnError );
                    }
                    //Crea array para generar el objeto detalle solicitud caracteristica
                    $arrayRequestDetalleSolCaract = array();
                    $arrayRequestDetalleSolCaract['entityAdmiCaracteristica']   = $objCaracteristicaDescuento;
                    $arrayRequestDetalleSolCaract['floatValor']                 = round( 100  , 2);
                    $arrayRequestDetalleSolCaract['entityDetalleSolicitud']     = $objDetalleSolicitud;
                    $arrayRequestDetalleSolCaract['strEstado']                  = 'Pendiente';
                    $arrayRequestDetalleSolCaract['strUsrCreacion']             = $strUsrCreacion;
                    //Crea el objeto InfoDetalleSolCaract
                    $entityDetalleSolCaract = $this->serviceComercial->creaObjetoInfoDetalleSolCaract($arrayRequestDetalleSolCaract);
                    $this->emComercial->persist($entityDetalleSolCaract);
                    $this->emComercial->flush();

                    //se actualizan campos del servicio creado
                    $objServicioEquipoDualBand->setValorDescuento($intPrecioEquipoDualBand);
                    $objServicioEquipoDualBand->setDescuentoUnitario($intPrecioEquipoDualBand);
                    $this->emComercial->persist($objServicioEquipoDualBand);
                    $this->emComercial->flush();

                    //se almacena información en el historial del servicio
                    $strObservacion = 'Solicitud de descuento autorizada: Descuento del ' . $objDetalleSolicitud->getPorcentajeDescuento() . '%' ;
                    $arrayParametros['objServicio']    = $objServicioEquipoDualBand;
                    $arrayParametros['strIpClient']    = $strIpCreacion;
                    $arrayParametros['strUsrCreacion'] = $strUsrCreacion;
                    $arrayParametros['strObservacion'] = $strObservacion;
                    $arrayParametros['strAccion']      = 'autorizarDescuento';
                    $objServicioHistorial              = $this->serviceServicioHistorial->crearHistorialServicio($arrayParametros);
                    $this->emComercial->persist($objServicioHistorial);
                    $this->emComercial->flush();
                }
                else
                {
                    throw new \Exception("problemas al generar descuento al cliente");
                }
            }

            $strStatus  = "OK";
            $strMensaje = "<br>Se ha creado el servicio ".$objProdEquipoDualBand->getDescripcionProducto()." como producto adicional";
        }
        catch (\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->creaServicioEquipoDualBand',
                                            $objEx->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
            $strMensaje = " No se ha podido crear el producto de manera automática";
        }
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }

    /**
     * creaServicioIntProtegido
     *
     * Crea un servicio Internet Protegido por migración de cliente a tecnología Kaspersky
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 12-08-2019
     * @since 1.0
     *
     * @param array $arrayParametros [  "punto"                   => objeto del punto
     *                                  "servicioInternet"        => objeto del servicio del Internet
     *                                  "servicioTecnicoInternet" => objeto del servicio técnico del Internet
     *                                  "usrCreacion"             => usuario de creación,
     *                                  "ipCreacion"              => ip de creación,
     *                                  "codEmpresa"              => id de la empresa
     *                                  "intPrecioServicio"       => precio del servicio a crear
     *                                  "objProdIntProt"          => objeto de producto internet protegido
     *                               ]
     * @return array $arrayRespuesta[
     *                                  "status"      => OK o ERROR
     *                                  "mensaje"     => mensaje de error
     *                                  "objServicio" => objeto creado
     *                              ]
     */
    public function creaServicioIntProtegido($arrayParametros)
    {
        $objPunto            = $arrayParametros['punto'];
        $objServicioInternet = $arrayParametros['servicioInternet'];
        $objServTecInternet  = $arrayParametros['servicioTecnicoInternet'];
        $strUsrCreacion      = $arrayParametros['usrCreacion'];
        $strIpCreacion       = $arrayParametros['ipCreacion'];
        $strCodEmpresa       = $arrayParametros['codEmpresa'];
        $intPrecioServicio   = $arrayParametros['intPrecioServicio'];
        $objProdIntProt      = $arrayParametros['objProdIntProt'];
        $strMensaje          = "";
        try
        {
            if(!is_object($objServTecInternet))
            {
                throw new \Exception("No se ha enviado el servicio técnico del Internet");
            }

            $strUsrVendedor = $objServicioInternet->getUsrVendedor();
            if(empty($strUsrVendedor))
            {
                $strUsrVendedor = $objPunto->getUsrVendedor();
            }
            $intIdOficinaVendedor                           = 0;
            $arrayParametrosVendedor['empresa']             = $strCodEmpresa;
            $arrayParametrosVendedor['criterios']['login']  = $strUsrVendedor;
            $arrayPerVendedor = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                  ->findPersonalByCriterios($arrayParametrosVendedor);
            if( isset($arrayPerVendedor['registros']) && !empty($arrayPerVendedor['registros'])
                && isset($arrayPerVendedor['total']) && $arrayPerVendedor['total'] > 0 )
            {
                $arrayInfoVendedor  = $arrayPerVendedor['registros'][0];
                $intIdPerVendedor   = $arrayInfoVendedor['idPersonaEmpresaRol'];
                if($intIdPerVendedor > 0)
                {
                    $objPerVendedor = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPerVendedor);
                    if(is_object($objPerVendedor))
                    {
                        $objOficinaVendedor = $objPerVendedor->getOficinaId();
                        if(is_object($objOficinaVendedor))
                        {
                            $intIdOficinaVendedor = $objOficinaVendedor->getId();
                        }
                    }
                }
            }
            $objAdmiNumeracion = null;
            if($intIdOficinaVendedor > 0)
            {
                $objAdmiNumeracion  = $this->emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                        ->findByEmpresaYOficina($strCodEmpresa, $intIdOficinaVendedor, 'ORD');
            }

            if(!is_object($objAdmiNumeracion))
            {
                $intIdOficinaVendedor   = 58;
                $objAdmiNumeracion      = $this->emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                            ->findByEmpresaYOficina($strCodEmpresa, $intIdOficinaVendedor, 'ORD');
            }
            $strSecuenciaAsig = str_pad($objAdmiNumeracion->getSecuencia(),7, '0', STR_PAD_LEFT);
            $strNumeroOt      = $objAdmiNumeracion->getNumeracionUno().'-'.$objAdmiNumeracion->getNumeracionDos().'-'.$strSecuenciaAsig;

            $objInfoOrdenTrabajo  = new InfoOrdenTrabajo();
            $objInfoOrdenTrabajo->setPuntoId($objPunto);
            $objInfoOrdenTrabajo->setTipoOrden('N');
            $objInfoOrdenTrabajo->setNumeroOrdenTrabajo($strNumeroOt);
            $objInfoOrdenTrabajo->setFeCreacion(new \DateTime('now'));
            $objInfoOrdenTrabajo->setUsrCreacion($strUsrCreacion);
            $objInfoOrdenTrabajo->setIpCreacion($strIpCreacion);
            $objInfoOrdenTrabajo->setOficinaId($intIdOficinaVendedor);
            $objInfoOrdenTrabajo->setEstado('Activa');
            $this->emComercial->persist($objInfoOrdenTrabajo);
            $this->emComercial->flush();

            //Actualizo la numeracion en la tabla
            $strNumeracionActual = ($objAdmiNumeracion->getSecuencia()+1);
            $objAdmiNumeracion->setSecuencia($strNumeracionActual);
            $this->emComercial->persist($objAdmiNumeracion);
            $this->emComercial->flush();

            $objServicioIntProt = new InfoServicio();
            $objServicioIntProt->setPuntoId($objPunto);
            $objServicioIntProt->setProductoId($objProdIntProt);
            $objServicioIntProt->setEsVenta('S');
            $objServicioIntProt->setPrecioVenta($intPrecioServicio);
            $objServicioIntProt->setCantidad(1);
            $objServicioIntProt->setTipoOrden('N');
            $objServicioIntProt->setOrdenTrabajoId($objInfoOrdenTrabajo);
            $objServicioIntProt->setPuntoFacturacionId($objServicioInternet->getPuntoFacturacionId());
            $objServicioIntProt->setUsrVendedor($strUsrVendedor);
            $objServicioIntProt->setEstado("Pendiente");
            $objServicioIntProt->setFrecuenciaProducto(1);
            $objServicioIntProt->setDescripcionPresentaFactura($objProdIntProt->getDescripcionProducto());
            $objServicioIntProt->setUsrCreacion($strUsrCreacion);
            $objServicioIntProt->setFeCreacion(new \DateTime('now'));
            $objServicioIntProt->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServicioIntProt);
            $this->emComercial->flush();

            //historial de creación
            $objServHistCreacionIntProt = new InfoServicioHistorial();
            $objServHistCreacionIntProt->setServicioId($objServicioIntProt);
            $strObservacionServHist = "Se creo el servicio por migración de tecnología";
            $objServHistCreacionIntProt->setObservacion($strObservacionServHist);
            $objServHistCreacionIntProt->setEstado("Pendiente");
            $objServHistCreacionIntProt->setUsrCreacion($strUsrCreacion);
            $objServHistCreacionIntProt->setFeCreacion(new \DateTime('now'));
            $objServHistCreacionIntProt->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objServHistCreacionIntProt);
            $this->emComercial->flush();

            $objServicioTecnicoIntProt = new InfoServicioTecnico();
            $objServicioTecnicoIntProt->setServicioId($objServicioIntProt);
            $objServicioTecnicoIntProt->setTipoEnlace('PRINCIPAL');
            $objServicioTecnicoIntProt->setUltimaMillaId($objServTecInternet->getUltimaMillaId());
            $this->emComercial->persist($objServicioTecnicoIntProt);
            $this->emComercial->flush();

            $strStatus  = "OK";
            $strMensaje = "<br>Se ha creado el servicio ".$objProdIntProt->getDescripcionProducto()." como producto adicional";
        }
        catch (\Exception $objEx)
        {
            $strStatus  = "ERROR";
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->creaServicioIntProtegido',
                                            $objEx->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
            $strMensaje = " No se ha podido crear el producto de manera automática";
        }
        $arrayRespuesta = array("strStatus"    => $strStatus,
                                "strMensaje"   => $strMensaje,
                                "objServicio"  => $objServicioIntProt);
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene el correo de datos de envío para MD
     *
     * @param type     $arrayParametros ["intIdPunto"           => id del punto,
     *                                   "strValidaCorreoUnico" => SI o NO para validar que el correo no esté asociado a otro servicio McAfee,
     *                                   "strUsrCreacion"       => Usuario de creación que ejecuta el proceso
     *                                   "strIpCreacion"        => Ip de creación del usuario que ejecuta el proceso
     *                                   "strTipoProceso"       => Tipo de proceso que ejecuta la validación
     *                                   "strCorreoMcAfee"      => Correo a validar cuando el tipo de proceso es CambiarCorreoMcAfee
     *                                  ]
     * @return string  $strCorreoValidado
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 02-04-2019 - Se agregan parámetros strUsrCreacion y strIpCreacion. Se obtiene el correo a utilizar en
     *                           suscripciones mcafee según nuevas definiciones comerciales.
     * @since 1.0
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 05-06-2019 - Se agregan parámetros strTipoProceso y strCorreoMcAfee. Se valida el correo enviado por parámetro
     *                           para que pueda ser utilizado en la activación de un servicio.
     * @since 1.1
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 20-06-2019 - Se agregan parámetros inEstadoServ al invocar función del repository InfoServicioRepository
     *                           para validar estados de servicios de los cuales se recuperarán las caracteristicas solicitadas
     * @since 1.2
     */
    public function getCorreoDatosEnvioMd($arrayParametros)
    {
        $intIdPunto             = $arrayParametros["intIdPunto"];
        $strValidaCorreoMcAfee  = $arrayParametros["strValidaCorreoMcAfee"];
        $strUsrCreacion         = $arrayParametros['strUsrCreacion'];
        $strIpCreacion          = $arrayParametros['strIpCreacion'];
        $strTipoProceso         = $arrayParametros['strTipoProceso']?$arrayParametros['strTipoProceso']:"ActivacionMcAfee";
        $strCorreoMcAfee        = $arrayParametros['strCorreoMcAfee'];
        $strCorreoValidado      = "";
        $arrayCorreosEnvio      = array();
        try
        {
            if ($strTipoProceso == "ActivacionMcAfee")
            {
            $arrayParametrosCorreoMcAfee = array();
            $arrayParametrosCorreoMcAfee['intIdPunto']     = $intIdPunto;
            $arrayParametrosCorreoMcAfee['strUsrCreacion'] = $strUsrCreacion;
            $arrayParametrosCorreoMcAfee['strIpCreacion']  = $strIpCreacion;
            $arrayCorreosEnvio = $this->getCorreosMcAfee($arrayParametrosCorreoMcAfee);
            }
            else if ($strTipoProceso == "CambiarCorreoMcAfee")
            {
                $arrayCorreosEnvio = array($strCorreoMcAfee);
            }
            else
            {
                $arrayCorreosEnvio = array();
            }

            if($strValidaCorreoMcAfee === "SI")
            {
                foreach($arrayCorreosEnvio as $strCorreoEnvio)
                {
                    $arrayParametros                                = array();
                    $arrayParametros["descripcionCaracteristica"]   = "CORREO ELECTRONICO";
                    $arrayParametros["descripcionProducto"]         = "I. ";
                    $arrayParametros["nombreTecnico"]               = "OTROS";
                    $arrayParametros["valorSpc"]                    = $strCorreoEnvio;
                    $arrayParametros["estadosSpcNoConsiderados"]    = array("Eliminado");
                    $arrayParametros["inEstadoServ"]                = array("Activo","In-Corte");

                    $objRespuestaValidacion = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                ->existeCaraceristicaServicio($arrayParametros);
                    if(!is_object($objRespuestaValidacion))
                    {
                        $strCorreoValidado  = $strCorreoEnvio;
                        break;
                    }
                }
            }
            else if(isset($arrayCorreosEnvio[0]) && !empty($arrayCorreosEnvio[0]))
            {
                $strCorreoValidado = $arrayCorreosEnvio[0];
            }
        }
        catch (\Exception $e)
        {
            error_log("No se ha podido obtener el correo de envío ".$e->getMessage());
        }
        return $strCorreoValidado;
    }

    /**
     * getCorreosMcAfee
     *
     * Función que devuelve el listado de  correos de un cliente mediante el identificador de uno de sus puntos
     *
     * @param array  $arrayParametros [
     *                                  intIdPunto      Identificador del punto
     *                                  strUsrCreacion  Usuario de creación que ejecuta el proceso
     *                                  strIpCreacion   Ip de usuario que ejecuta el proceso
     *                                ]
     * @return array $arrayCorreosSplit
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 27-03-2019
     * @since 1.0
     */
    public function getCorreosMcAfee($arrayParametros)
    {
        $arrayCorreosSplit   = array();
        $strCorreoARegistrar = "";
        try
        {
            $arrayCorreosEnvio   = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                     ->getCorreosDatosEnvioMd(array("intIdPunto"  => $arrayParametros['intIdPunto']));
            foreach($arrayCorreosEnvio as $arrayCorreoEnvio)
            {
                if ($arrayCorreoEnvio["intSeparador"] > 0 )
                {
                    $arraySplitComa = explode(',', trim($arrayCorreoEnvio['strCorreo']));
                    foreach($arraySplitComa as $strSplitComa)
                    {
                        $arraySplitPuntoComa = explode(';', trim($strSplitComa));
                        foreach($arraySplitPuntoComa as $strSplitPuntoComa)
                        {
                            $strSplitPuntoComa = trim($strSplitPuntoComa);
                            if(!empty($strSplitPuntoComa) &&
                               false === !filter_var($strSplitPuntoComa, FILTER_VALIDATE_EMAIL))
                            {
                                $arrayCorreosSplit[] = $strSplitPuntoComa;
                            }
                        }
                    }
                }
                else
                {
                    $strCorreoARegistrar = trim($arrayCorreoEnvio["strCorreo"]);
                    if (!empty($strCorreoARegistrar) && false === !filter_var($strCorreoARegistrar, FILTER_VALIDATE_EMAIL))
                    {
                        $arrayCorreosSplit[] = $strCorreoARegistrar;
                    }
                }
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->getCorreosMcAfee',
                                            $objEx->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']
                                           );
            $arrayCorreosSplit   = array();
        }
        return $arrayCorreosSplit;
    }

	/**
     * Función que devuelve el listado de activos obtenido por los parámetros dados
     * @param array $arrayParametros
     * @return array
     *
     * @author Robinson Salgado <rsalgado85@gmail.com>
     * @version 1.0 05-12-2018
     */
    public function getActivosCustodio($arrayParametros)
    {
		$objInfoDetalleMaterial         = $this->emSoporte->getRepository('schemaBundle:InfoDetalleMaterial');
		$arrayRespuesta                 = [];
		$arrayRespuesta['Activos']      = [
			['tipo' => 'Fibra', 		'total' => 0, 'registros' => []],
			['tipo' => 'Materiales', 	'total' => 0, 'registros' => []],
			['tipo' => 'Equipos', 		'total' => 0, 'registros' => []]
		];

		switch($arrayParametros['strTipo'])
		{
			case 'Fibra':
				$arrayResult 				= $objInfoDetalleMaterial->getActivos($arrayParametros);
				$arrayResult['tipo'] 		= 'Fibra';
				$arrayRespuesta['Activos']	= [
					$arrayResult,
					['tipo' => 'Materiales', 	'total' => 0, 'registros' => []],
					['tipo' => 'Equipos', 		'total' => 0, 'registros' => []]
				];
				break;
			case 'Materiales':
				$arrayResult 				= $objInfoDetalleMaterial->getActivos($arrayParametros);
				$arrayResult['tipo'] 		= 'Materiales';
				$arrayRespuesta['Activos']	= [
					$arrayResult,
					['tipo' => 'Fibra', 	'total' => 0, 'registros' => []],
					['tipo' => 'Equipos', 	'total' => 0, 'registros' => []]
				];
				break;
			case 'Equipos':
				$arrayResult 				= $objInfoDetalleMaterial->getActivos($arrayParametros);
				$arrayResult['tipo'] 		= 'Equipos';
				$arrayRespuesta['Activos']	= [
					$arrayResult,
					['tipo' => 'Fibra', 		'total' => 0, 'registros' => []],
					['tipo' => 'Materiales', 	'total' => 0, 'registros' => []]
				];
				break;
			default:

				$arrayRespuesta['Activos'] 		= [];

				$arrayParametros['strTipo']		= 'Fibra';
				$arrayResultFibra				=  $objInfoDetalleMaterial->getActivos($arrayParametros);
				$arrayResultFibra['tipo']		= 'Fibra';
				$arrayRespuesta['Activos'][]	= $arrayResultFibra;

				$arrayParametros['strTipo']		= 'Materiales';
				$arrayResultMateriales	    	=  $objInfoDetalleMaterial->getActivos($arrayParametros);
				$arrayResultMateriales['tipo']	= 'Materiales';
				$arrayRespuesta['Activos'][]	= $arrayResultMateriales;

				$arrayParametros['strTipo']		= 'Equipos';
				$arrayResultEquipos	        	=  $objInfoDetalleMaterial->getActivos($arrayParametros);
				$arrayResultEquipos['tipo']		= 'Equipos';
				$arrayRespuesta['Activos'][]	= $arrayResultEquipos;

				break;
		}

        return $arrayRespuesta;
    }

    /**
     *
     * Función que verifica si el plan de un servicio incluye WIFI DUAL BAND Y EXTENDER DUAL BAND, y en caso de tenerlos verifica que
     * el modelo del WIFI DUAL BAND sea el correcto y los modelos parametrizados para el EXTENDER DUAL BAND
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 09-07-2018
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 03-01-2022 Función que actualmente no está siendo usada, pero se la deja como respaldo para las validaciones iniciales
     *
     * @param array $arrayParametros [ "intIdServicio"     => id del servicio,
     *                                  "strCodEmpresa"     => id de la empresa,
     *                                  "strGuardaErrores"  => SI en caso de que el método desde donde se lo invoca necesita guardar el error,
     *                                  "strUsrCreacion"    => usuario de creación,
     *                                  "strIpCreacion"     => ip de creación
     *                              ]
     * @return array $arrayResultado[
     *                                  "status"                        => OK o ERROR
     *                                  "mensaje"                       => mensaje de error,
     *                                  "necesitaExtenderDualBand"      => SI o NO el plan necesita Extender,
     *                                  "msjGrid"                       => mensaje con la información que le aparecerá al usuario
     *                              ]
     *
     */
    public function verificaEquiposDualBand($arrayParametros)
    {
        $intIdServicio          = $arrayParametros['intIdServicio'];
        $strCodEmpresa          = $arrayParametros['strCodEmpresa'];
        $strMensaje             = "";
        $boolMensajeUsuario     = false;
        $strGuardaErrores       = $arrayParametros['strGuardaErrores'] ? $arrayParametros['strGuardaErrores'] : "SI";
        $strMsjGrid             = "";
        try
        {
            if(isset($arrayParametros['strMarcaOlt']) && !empty($arrayParametros['strMarcaOlt']))
            {
                $strMarcaOlt = $arrayParametros['strMarcaOlt'];
            }
            else
            {
                $strMarcaOlt = "";
            }
            
            $arrayRespuestaPlanesDic        = $this->verificarPlanesVigentesDiciembre(array("intIdServicio" => $intIdServicio,
                                                                                            "strCodEmpresa" => $strCodEmpresa));
            $strWifiDualBandEnPlan              = $arrayRespuestaPlanesDic["strWifiDualBandEnPlan"];
            $strNecesitaExtenderDualBand        = $arrayRespuestaPlanesDic["strExtenderDualBandEnPlan"];
            $strNombreTecnicoWifiDualBand       = $arrayRespuestaPlanesDic["strNombreTecnicoWifiDualBand"];
            $strNombreTecnicoExtenderDualBand   = $arrayRespuestaPlanesDic["strNombreTecnicoExtenderDualBand"];
            if($strWifiDualBandEnPlan === "SI")
            {
                $arrayRespuestaWifiDualBand = $this->verificarModelosDualBand(array("intIdServicio"             => $intIdServicio,
                                                                                    "strCodEmpresa"             => $strCodEmpresa,
                                                                                    "strNombreTecnicoProducto"  => $strNombreTecnicoWifiDualBand,
                                                                                    "strMarcaOlt"               => $strMarcaOlt
                                                                             ));
                if($arrayRespuestaWifiDualBand["status"] === "OK")
                {
                    if($arrayRespuestaWifiDualBand["necesitaEquipo"] === "SI")
                    {
                        if(isset($arrayParametros['strModeloOnt']) && !empty($arrayParametros['strModeloOnt']))
                        {
                            $arrayRespuestaModeloWifiDualBand   = $this->verificarModelosDualBand(array("intIdServicio"             => $intIdServicio,
                                                                                                        "strCodEmpresa"             => $strCodEmpresa,
                                                                                                        "strNombreTecnicoProducto"  =>
                                                                                                        $strNombreTecnicoWifiDualBand,
                                                                                                        "strModeloElementoEquipo"   =>
                                                                                                        $arrayParametros['strModeloOnt'])
                                                                                                 );
                            if($arrayRespuestaModeloWifiDualBand["status"] === "OK")
                            {
                                if($arrayRespuestaModeloWifiDualBand["necesitaEquipo"] !== "SI")
                                {
                                    $boolMensajeUsuario = true;
                                    throw new \Exception("Servicio con ".$arrayRespuestaPlanesDic["strNombreProductoWifiDualBand"]
                                                        .", se requiere la instalación con cualquiera de los siguientes "
                                                        ."modelos de CPE ONT: ".$arrayRespuestaWifiDualBand["mensaje"]."<br>"
                                                        ."El modelo ".$arrayParametros['strModeloOnt']. " no es considerado como "
                                                        .$arrayRespuestaPlanesDic["strNombreProductoWifiDualBand"]);

                                }
                            }
                            else
                            {
                                $boolMensajeUsuario = true;
                                throw new \Exception("Ha ocurrido un error al intentar validar el modelo del cpe ont. "
                                                     ."Por favor notificar a Sistemas.");
                            }
                        }
                        $strMensaje .=  "Servicio con ".$arrayRespuestaPlanesDic["strNombreProductoWifiDualBand"]
                                        .", se requiere la instalación con cualquiera de los siguientes "
                                        ."modelos de CPE ONT: ".$arrayRespuestaWifiDualBand["mensaje"]."<br>";
                        if(isset($arrayParametros["strTipoConsulta"]) && !empty($arrayParametros["strTipoConsulta"])
                           && $arrayParametros["strTipoConsulta"] === "GRID" )
                        {
                            $strMsjGrid .= "<li style='margin-left: 10px;list-style: disc'>"
                                            .$arrayRespuestaPlanesDic["strNombreProductoWifiDualBand"]."</li>";
                        }
                        else
                        {
                            $strMsjGrid .= $arrayRespuestaPlanesDic["strNombreProductoWifiDualBand"];
                        }

                    }
                }
                else
                {
                    $boolMensajeUsuario = true;
                    throw new \Exception("Ha ocurrido un error al intentar validar el equipo cpe ont. Por favor notificar a Sistemas.");
                }
            }
            if($strNecesitaExtenderDualBand === "SI")
            {
                $arrayRespuestaExtenderDualBand = $this->verificarModelosDualBand(array("intIdServicio"             => $intIdServicio,
                                                                                        "strCodEmpresa"             => $strCodEmpresa,
                                                                                        "strNombreTecnicoProducto"  =>
                                                                                        $strNombreTecnicoExtenderDualBand,
                                                                                        "strMarcaOlt"               => $strMarcaOlt
                                                                             ));
                if($arrayRespuestaExtenderDualBand["status"] === "OK" && $arrayRespuestaExtenderDualBand["necesitaEquipo"] === "SI")
                {
                    $strMensaje .=  "Servicio con ".$arrayRespuestaPlanesDic["strNombreProductoExtenderDualBand"]
                                    .", se requiere la instalación con cualquiera de los siguientes "
                                    ."modelos: ".$arrayRespuestaExtenderDualBand["mensaje"];
                    if(isset($arrayParametros["strTipoConsulta"]) && !empty($arrayParametros["strTipoConsulta"])
                       && $arrayParametros["strTipoConsulta"] === "GRID" )
                    {
                        $strMsjGrid .= "<li style='margin-left: 10px;list-style: disc'>"
                                       .$arrayRespuestaPlanesDic["strNombreProductoExtenderDualBand"]."</li>";
                    }
                    else
                    {
                        if(!empty($strMsjGrid))
                        {
                            $strMsjGrid .= " y ";
                        }
                        $strMsjGrid .= $arrayRespuestaPlanesDic["strNombreProductoExtenderDualBand"];
                    }
                }
            }
            if(!empty($strMsjGrid))
            {
                if(isset($arrayParametros["strTipoConsulta"]) && !empty($arrayParametros["strTipoConsulta"])
                           && $arrayParametros["strTipoConsulta"] === "GRID" )
                {
                    $strMsjGrid = "<p><b>Equipos a instalar:</b></p><ul>".$strMsjGrid."</ul>";
                }
                else
                {
                    $strMsjGrid = " - Equipos a instalar: ".$strMsjGrid;
                }
            }
            $strStatus  = "OK";
        }
        catch (\Exception $e)
        {
            $strNecesitaExtenderDualBand    = "NO";
            $strStatus                      = "ERROR";
            if($boolMensajeUsuario)
            {
                $strMensaje = $e->getMessage();
            }
            else
            {
                $strMensaje = "No se ha podido validar el modelo del cpe ont. Por favor notificar a Sistemas.";
            }
            if($strGuardaErrores === "SI")
            {
                $this->utilService->insertError('Telcos+',
                                                'InfoServicioTecnicoService->verificaEquiposDualBand',
                                                $e->getMessage(),
                                                $arrayParametros['strUsrCreacion'],
                                                $arrayParametros['strIpCreacion']);
            }
        }
        $arrayrespuesta = array("status"                    => $strStatus,
                                "mensaje"                   => $strMensaje,
                                "necesitaExtenderDualBand"  => $strNecesitaExtenderDualBand,
                                "msjGrid"                   => $strMsjGrid);
        return $arrayrespuesta;
    }

    /*
     *
     * Método para validar si el servicio es INTERNET WIFI o Wifi Alquiler, y enviar notificacion a RADIO.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 15-01-2020
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 22-01-2020 - Se agrega control de excepciones e inserta información en info_error.
     *
     * @param $objInfoServicio ➜ Objeto de tipo schema:InfoServicio
     * @param $arrayElemento ➜ Arreglo que contiene el elemento a notificar.
     * @param $objDetalle ➜ Objeto de detalle para obtener la tarea.
     *
     * @return $objInfServProdCaract->getValor() OR null
     *
     */

    public function validaNotificacionRadio($objServicio, $arrayElemento, $objDetalle)
    {
        $objTarea = 'NA';

        try
        {
            /* Validamos si el objeto es diferente de nulo. */
            if (!is_null($objDetalle) && is_object($objDetalle))
            {
                /* Intentamos obtener un objeto de tarea. */
                $objTarea = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                 ->findOneBy(array('detalleId' => $objDetalle->getId()));
            }

            /*Obtengo parámetros.*/
            $objParamProductos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne(
                    'PRODUCTOS_NOTIFICACION_RADIO',
                    'TECNICO',
                    '',
                    'PARAMETROS_PRODUCTOS_RADIO_NOTIFICACION',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '10',
                    ''
                );

            /*Obtengo parámetros que contienen los coordinadores por regiones.*/
            $arrayParamCoordinadores = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne(
                    'COORDINADORES_RADIO',
                    'TECNICO',
                    '',
                    'PARAMETROS_COORDINADORES_RADIO',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '10',
                    ''
                );

            /*Se valida que respuesta no este vacía.*/
            if ((!empty($objParamProductos) && is_array($objParamProductos) && !empty($objParamProductos['valor1'])) &&
                (!empty($arrayParamCoordinadores) && is_array($arrayParamCoordinadores) && !empty($arrayParamCoordinadores['valor1']))
            )
            {
                /*Decodifico el valor1 a un arreglo asociativo de PHP.*/
                $arrayProductosRadio     = json_decode($objParamProductos['valor1'], true);
                $arrayCoordinadoresRadio = json_decode($arrayParamCoordinadores['valor1'], true);

                /* Obtengo el tipo de esquema del servicio, null si no posee la caracteristica. */
                $intTipoEsquema = $this->getTipoEsquema($objServicio);

                /*Validamos si el servicio posee tipo esquema igual a 1 o si no posee la caracteristica.*/
                /*Valido si el producto esta dentro del arreglo de productos permitidos.*/
                if (($intTipoEsquema == 1 || is_null($intTipoEsquema)) && ($arrayProductosRadio &&
                        in_array($objServicio->getProductoId()->getId(), $arrayProductosRadio['arrayProductos'])))
                {

                    /*Obtengo un objeto con el Punto.*/
                    $entityPunto = $this->emComercial->getRepository('schemaBundle:InfoPunto')->find($objServicio->getPuntoId());

                    /*Obtengo un objeto del sector.*/
                    $entitySector = $this->emComercial->getRepository('schemaBundle:AdmiSector')
                        ->findOneBy(array('id' => $entityPunto->getSectorId()));

                    /*Obtengo un objeto de la parroquia.*/
                    $entityParroquia = $this->emComercial->getRepository('schemaBundle:AdmiParroquia')
                        ->findOneBy(array('id' => $entitySector->getParroquiaId()));

                    /*Obtengo un objeto del canton.*/
                    $entityCanton = $this->emComercial->getRepository('schemaBundle:AdmiCanton')
                        ->findOneBy(array('id' => $entityParroquia->getCantonId()));


                    /*De acuerdo a validaciones por region defino el coordinador, en caso de no ser ninguna, le enviará a ambos*/
                    if ($entityCanton->getRegion() == 'R1')
                    {
                        $arrayTo = array($arrayCoordinadoresRadio['R1']['login'] . '@telconet.ec');
                    }
                    elseif ($entityCanton->getRegion() == 'R2')
                    {
                        $arrayTo = array($arrayCoordinadoresRadio['R2']['login'] . '@telconet.ec');
                    }
                    else
                    {
                        $arrayTo = array(
                            $arrayCoordinadoresRadio['R1']['login'] . '@telconet.ec',
                            $arrayCoordinadoresRadio['R2']['login'] . '@telconet.ec'
                        );
                    }

                    /* Se preparan datos para enviar el correo de notificación. */
                    $strAsunto = "Notificación Devolución de Equipo Wifi";
                    $arrayServicio = array('loginAuxiliar' => $objServicio->getLoginAux() ? $objServicio->getLoginAux() : 'NA');
                    $arrayEquipo = array(
                        'modelo' => $arrayElemento['modeloElemento'],
                        'serie' => $arrayElemento['serieElemento']
                    );
                    $arrayPunto = array('login' => $entityPunto->getLogin());

                    $arrayMailParams = array(
                        'tarea'     => isset($objTarea) && is_object($objTarea) ? $objTarea->getId() : '',
                        'servicio'  => $arrayServicio,
                        'equipo'    => $arrayEquipo,
                        'punto'     => $arrayPunto,
                        "empresa"   => 'TN'
                    );

                    /* Se envian parametros necesarios para enviar el correo de notificación. */
                    $this->envioPlantilla->generarEnvioPlantilla($strAsunto, $arrayTo, 'NOT_DEV_WIFI', $arrayMailParams, 10, null, null);
                }
            }
        }
        catch (\Exception $e)
        {
            $objRequest = $this->container->get('request');
            $objSession = $objRequest->getSession();

            $this->utilService->insertError(
                'Telcos+',
                'InfoServicioTecnicoService.validaNotificacionRadio',
                $e->getMessage(),
                $objSession->get('user'),
                $objRequest->getClientIp());
        }
    }

    /*
     *
     * Método para obtener el tipo de esquema
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 15-01-2019  Se agrega funcionalidad para obtener el tipo de esquema seleccionado
     * del servicio enviado como parámetro.
     *
     * @param $objInfoServicio : Objeto de tipo schema:InfoServicio
     *
     * @return $objInfServProdCaract->getValor() OR null
     *
     */

    public function getTipoEsquema($objInfoServicio)
    {
        // Valido si existe el metodo dentro del objeto, para controlar una excepcion.
        if(method_exists($objInfoServicio->getProductoId(), 'getNombreTecnico') &&
        $objInfoServicio->getProductoId()->getNombreTecnico() == 'INTERNET WIFI')
        {
            // Obtengo el esquema del servicio elegido.
            $objAdmiCaract =   $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    "descripcionCaracteristica"     => 'TIPO_ESQUEMA'
                ));

            $objProduct = $objInfoServicio->getProductoId();

            $objProCaract =   $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array(  "productoId"       => $objProduct->getId(),
                    "caracteristicaId" => $objAdmiCaract->getId()));

            $objInfServProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array(
                    'servicioId'    =>     $objInfoServicio->getId(),
                    'productoCaracterisiticaId' =>   $objProCaract->getId()
                ));

            if (is_object($objInfServProdCaract) && method_exists($objInfServProdCaract, 'getValor') )
            {
                return $objInfServProdCaract->getValor();
            }

        }

        return null;
    }


    /*
     *
     * Método para ejecutar Rechazo o Anulación de servicios para instalación simultanea.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 16-03-2020 | Version Inicial
     *
     * @param $arrayParams
     *
     * arraySimultaneos  ➜  Arreglo con los IDs de los servicios simultáneos.
     * strEstadoSoli     ➜  String que contiene el texto a colocar como estado para las solicitudes.
     * strEstadoServ     ➜  String que contiene el texto a colocar como estado para los servicios.
     * strObsSolicitud   ➜  String que contiene el texto a colocar como observación en las solicitudes.
     * strObsHistorial   ➜  String que contiene el texto a colocar como observación en el historial.
     * idMotivo          ➜  Entero que representa el id del motivo.
     *
     * @return $array
     *
     */
    public function ejecutarRechazoSimultaneo(array $arrayParams)
    {
        $objRequest = $this->container->get('request');
        $objSession = $objRequest->getSession();
        $arrayResponse = ['status' => 'Error', 'msg' => 'Ha ocurrido un error.', 'total' => []];

        $emCom = $this->emComercial;
        $emInf = $this->emInfraestructura;

        $emInf->getConnection()->beginTransaction();
        $emCom->getConnection()->beginTransaction();

        try
        {
            // Asignamos el valor que viene por parametro a una variable.
            $arraySimultaneos = $arrayParams['arraySimultaneos'];
            $intMotivoId = $arrayParams['idMotivo'];
            $strEstadoServ = $arrayParams['strEstadoServ'];
            $strObsSolicitud = $arrayParams['strObsSolicitud'];
            $strEstadoSoli = $arrayParams['strEstadoSoli'];
            $strObsHistorial = $arrayParams['strObsHistorial'];

            // Se valida que la variable no este vacía.
            if (!empty($arraySimultaneos) && !is_null($arraySimultaneos))
            {
                // Se recorre el arreglo para ejecutar el rechazo de los elementos.
                foreach ($arraySimultaneos as $idServicioSim)
                {
                    // Se obteniene un objeto con el ID del servicio simultaneo.
                    $objServicioSim = $emCom->getRepository('schemaBundle:InfoServicio')->find($idServicioSim);

                    // Se valida que sea un objeto valido.
                    if (is_object($objServicioSim)
                    && is_object($objServicioSim->getProductoId()))
                    {
                        // Eliminar Servicio
                        $objServicioSim->setEstado($strEstadoServ);
                        $emCom->persist($objServicioSim);
                        $emCom->flush();

                        // Registrar Historial Servicio
                        $objInfoServicioHistorial = new InfoServicioHistorial();
                        $objInfoServicioHistorial->setServicioId($objServicioSim);
                        $objInfoServicioHistorial->setMotivoId($intMotivoId);
                        $objInfoServicioHistorial->setObservacion($strObsHistorial);
                        $objInfoServicioHistorial->setIpCreacion($objRequest->getClientIp());
                        $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objInfoServicioHistorial->setUsrCreacion($objSession->get('user'));
                        $objInfoServicioHistorial->setEstado($strEstadoServ);
                        $emCom->persist($objInfoServicioHistorial);
                        $emCom->flush();

                        // Se anulan las caracteristicas asociadas al servicio.
                        $arrayInfoServicioProdCaract = $emCom
                            ->getRepository('schemaBundle:InfoServicioProdCaract')
                            ->findByServicioId($objServicioSim->getId())
                        ;

                        if (count($arrayInfoServicioProdCaract) > 0)
                        {
                            foreach ($arrayInfoServicioProdCaract as $objInfoServicioProdCaract)
                            {
                                $objInfoServicioProdCaract->setEstado($strEstadoServ);
                                $objInfoServicioProdCaract->setFeUltMod(new \DateTime('now'));
                                $objInfoServicioProdCaract->setUsrUltMod($objSession->get('user'));
                                $emCom->persist($objInfoServicioProdCaract);
                            }
                            $emCom->flush();
                        }

                        if ('INTERNET WIFI' == $objServicioSim->getProductoId()->getdescripcionProducto())
                        {
                            // Se obtiene el tipo de solicitud.
                            $objAdmiTipoSolicitud = $emCom
                                ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                ->findOneBy([
                                    'descripcionSolicitud' => 'SOLICITUD NODO WIFI',
                                    'estado' => 'Activo',
                                ])
                            ;
                        } elseif ('WIFI Alquiler Equipos' == $objServicioSim->getProductoId()->getdescripcionProducto())
                        {
                            // Se obtiene el tipo de solicitud.
                            $objAdmiTipoSolicitud = $emCom
                                ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                ->findOneBy([
                                    'descripcionSolicitud' => 'SOLICITUD PLANIFICACION',
                                    'estado' => 'Activo',
                                ])
                            ;
                        }

                        // Se valida que el tipo de solicitud sea un objeto valido.
                        if (is_object($objAdmiTipoSolicitud))
                        {
                            // Se obtiene el detalle de la solicitud del servicio simultaneo.
                            $objInfoDetalleSolicitud = $emCom
                                ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                ->findOneBy([
                                    'tipoSolicitudId' => $objAdmiTipoSolicitud->getId(),
                                    'servicioId' => $objServicioSim->getId(),
                                    'estado' => ['FactibilidadEnProceso', 'PrePlanificada', 'Asignada', 'AsignadoTarea'],
                                ])
                            ;

                            // Se valida que sea un objeto valido y que tenga un elemento id.
                            if (is_object($objInfoDetalleSolicitud))
                            {
                                // Eliminar Solicitud
                                $objInfoDetalleSolicitud->setMotivoId($intMotivoId);
                                $objInfoDetalleSolicitud->setObservacion($strObsSolicitud);
                                $objInfoDetalleSolicitud->setUsrRechazo($objSession->get('user'));
                                $objInfoDetalleSolicitud->setFeRechazo(new \DateTime('now'));
                                $objInfoDetalleSolicitud->setEstado($strEstadoSoli);
                                $emCom->persist($objInfoDetalleSolicitud);
                                $emCom->flush();

                                // Registrar Historial Solicitud
                                $objDetalleSolHist = new InfoDetalleSolHist();
                                $objDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                                $objDetalleSolHist->setIpCreacion($objRequest->getClientIp());
                                $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $objDetalleSolHist->setUsrCreacion($objSession->get('user'));
                                $objDetalleSolHist->setEstado($strEstadoSoli);
                                $objDetalleSolHist->setObservacion($strObsSolicitud);
                                $emCom->persist($objDetalleSolHist);
                                $emCom->flush();
                            }
                        }

                        if (is_object($objInfoDetalleSolicitud) && !is_null($objInfoDetalleSolicitud->getElementoId()))
                        {
                            // Obtenemos el elemento en la solicitud (CPE-NODO-WIFI).
                            $objInfoElemento = $emInf
                                ->getRepository('schemaBundle:InfoElemento')
                                ->findOneBy([
                                    'id' => (int) $objInfoDetalleSolicitud->getElementoId(),
                                    'estado' => 'Pendiente',
                                ])
                            ;
                        }

                        if (isset($objInfoElemento) && is_object($objInfoElemento))
                        {
                            // Eliminar Elemento
                            $objInfoElemento->setEstado('Eliminado');
                            $emInf->persist($objInfoElemento);
                            $emInf->flush();

                            // Registrar Historial Elemento
                            $objInfoHistorialElemento = new InfoHistorialElemento();
                            $objInfoHistorialElemento->setElementoId($objInfoElemento);
                            $objInfoHistorialElemento->setEstadoElemento('Eliminado');
                            $objInfoHistorialElemento->setObservacion($strObsHistorial);
                            $objInfoHistorialElemento->setUsrCreacion($objSession->get('user'));
                            $objInfoHistorialElemento->setFeCreacion(new \DateTime('now'));
                            $objInfoHistorialElemento->setIpCreacion($objRequest->getClientIp());
                            $emInf->persist($objInfoHistorialElemento);
                            $emInf->flush();
                        }

                        // Actualizamos los valores de respuesta.
                        $arrayResponse['status'] = 'OK';
                        $arrayResponse['msg'] = 'Se han realizado los cambios exitosamente.';
                        array_push($arrayResponse['total'], $objServicioSim->getId());
                    }
                }
                if ('OK' == $arrayResponse['status'])
                {
                    // Ejecutamos el commit.
                    $emCom->getConnection()->commit();
                    $emInf->getConnection()->commit();
                }
            } else
            {
                $arrayResponse['msg'] = 'No existen datos en el arreglo de simultáneos.';

                throw new \Exception($arrayResponse['msg']);
            }
        } catch (\Exception $ex)
        {
            $emCom->getConnection()->rollback();
            $emInf->getConnection()->rollback();

            $arrayResponse['status'] = 'ERROR';
            $arrayResponse['msg'] = 'Se ha presentado un error durante la ejecución de los servicios en simultaneo';

            $this->utilService->insertError(
                'Telcos+',
                'InfoServicioTecnicoService.ejecutarRechazoSimultaneo',
                $ex->getMessage(),
                $objSession->get('user'),
                $objRequest->getClientIp()
            );
        }

        return $arrayResponse;
    }

    /**
     * Función para obtener el id y la descripcion de una caracteristica.
     *
     * @param [int] $intIdServProdCaract
     * @return array|null
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 06-04-2020 | Versión Inicial.
     *
     */
    public function getInfoCaracteristica($intIdServProdCaract)
    {
        /* Validamos que el parametro no este vacio. */
        if ($intIdServProdCaract)
        {
            /* Obtenemos el objeto de InfoServicioProdCaract. */
            $objInfoServProdCaract = $this->emComercial
            ->getRepository('schemaBundle:InfoServicioProdCaract')
            ->find($intIdServProdCaract);

            /* Validamos que sea un objeto. */
            if (is_object($objInfoServProdCaract))
            {
                /* Obtenemos el objeto de AdmiProductoCaracteristica. */
                $objAdmiProdCaract = $this->emComercial
                ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->find($objInfoServProdCaract->getProductoCaracterisiticaId());

                /* Validamos que sea un objeto. */
                if (is_object($objAdmiProdCaract))
                {
                    /* Obtenemos el objeto de AdmiCaracteristica. */
                    $objAdmiCaracteristica = $this->emComercial
                    ->getRepository('schemaBundle:AdmiCaracteristica')
                    ->find($objAdmiProdCaract->getCaracteristicaId());

                    /* Validamos que sea un objeto. */
                    if (is_object($objAdmiCaracteristica))
                    {
                        /* Aramamos un arreglo para retornar. */
                        $arrayResponse['idCaracteristica'] = $objAdmiCaracteristica->getId();
                        $arrayResponse['descripcionCaracteristica'] = $objAdmiCaracteristica->getDescripcionCaracteristica();
                        return $arrayResponse;
                    }
                }

            }
        }

        return null;

    }
    
    
    
    /**
     * 
     * Función que realiza la confirmación del enlace mediante webservices de Networking,
     * en caso de confirmación exitosa insertará el progreso CONFIRMA_IP_SERVICIO y agregará un seguimiento a la tarea.
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0 05-07-2020
     *
     * Se agrega lógica para obtener VRF y SWTICH 
     * 
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.1 22-07-2020 
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.2 08-12-2020
     * Se cambian variables de entrada en el log, para identificar de mejor manera
     * el problema
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.3 03-05-2021 - Se agrega bandera $boolFlujoZeroTouch pora controlar el flujo.
     * 
     * @param array $arrayParametros 
     *                              
     * @return array $arrayResultado
     * 
     */
    public function confirmarEnlaceWsNwSoporte($arrayParametros)
    {
        $intIdServicio                  = $arrayParametros['intServicioId'];
        $intCodEmpresa                  = $arrayParametros['intEmpresaCod'];
        $strCodigoProgreso              = $arrayParametros['tipoProgreso'];
        $intDetalleId                   = $arrayParametros['detalleId'];
        $strUser                        = $arrayParametros['user'];
        $intIdComunicacion              = $arrayParametros['idComunicacion'];
        $strIpWanCliente                = $arrayParametros['ipWanCliente'];
        $strEmpresaCod                  = $arrayParametros['empresaCod'];
        $strUltimaMilla                 = $arrayParametros['ultimaMilla'];
        $strParametroLatenciaMax        = $arrayParametros['parametroLatenciaMax'];
        $strParametroPaquetesRecibir    = $arrayParametros['parametroPaquetesRecibir'];
        $strParametroLatenciaPromedio   = $arrayParametros['parametroLatenciaPromedio'];
        $strRegionCliente               = $arrayParametros['regionCliente'];
        $intCasoId                      = $arrayParametros['casoId'];
        $intDepartamentoId              = $arrayParametros['departamentoId'];
        $strIpCreacion                  = $this->container->get('request')->getClientIp();
        $strUrlWsNwPing                 = "api/ping";
        $strOpWsPing                    = "ping";    
        $strUnidadLatencia              = $arrayParametros['unidadLatencia'];
        $boolOrigenWeb                  = $arrayParametros['origenWeb'];
        $strParametroOrigen             = "WEB";
        $boolFlujoZeroTouch             = isset($arrayParametros['boolFlujoZeroTouch']) ? $arrayParametros['boolFlujoZeroTouch'] : null;
                
        try
        {       
            $arrayParametroOrigenMovil = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne('ORIGEN_MOVIL', 
                            '', 
                            '', 
                            '', 
                            '', 
                            '', 
                            '', 
                            ''
                        );

           $arrayParametroDetalle =  $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                        ->getOne('PARAMETROS_GENERALES_MOVIL', 
                                '', 
                                '', 
                                '', 
                                'END_POINT_VALIDAR_ENLACE', 
                                '', 
                                '', 
                                ''
                                );

          
            if(is_array($arrayParametroDetalle))
            {
                $strUrlWsNwPing = !empty($arrayParametroDetalle['valor2']) ? $arrayParametroDetalle['valor2'] : "api/ping";
                $strOpWsPing    = !empty($arrayParametroDetalle['valor4']) ? $arrayParametroDetalle['valor4'] : "ping";
            }

            if (is_array($arrayParametroOrigenMovil) && !$boolOrigenWeb)
            {
                $strParametroOrigen = !empty($arrayParametroOrigenMovil['valor1']) ? $arrayParametroOrigenMovil['valor1'] : "";
            }
            
            $arraySwitch  = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getSwitchPorIdServicio($intIdServicio);
            $strVrf       = $this->getVrfByIdService($arrayParametros);
            $strSwitch    = $arraySwitch[0]['nombreElemento'];


            if (($boolFlujoZeroTouch == null) && ($strVrf == null || $strSwitch == null || $strIpWanCliente == null))
            {
                if ($strVrf == null)
                {
                    $strVrf = "N/A";
                }
                if ($strSwitch == null)
                {
                    $strSwitch = "N/A";
                }
                if ($strIpWanCliente == null)
                {
                    $strIpWanCliente = "N/A";
                }

                $arrayRespuesta['result'] = false;
                $arrayRespuesta['mensaje'] = " No se pudo obtener datos para la validación de enlace." .
                    "<br> <b>VRF</b> : " . $strVrf .
                    "<br> <b>Switch</b> : " . $strSwitch .
                    "<br> <b>Ip Cliente</b> : " . $strIpWanCliente;

                $arrayRespuesta['data'] = "";

                $strClass = "InfoServicioTecnicoService";
                $strAppMethod = "confirmarEnlaceWsNwSoporte";

                $this->utilService->insertLog(array(
                    'enterpriseCode' => "10",
                    'logType' => 1,
                    'logOrigin' => 'TELCOS',
                    'application' => 'TELCOS',
                    'appClass' => $strClass,
                    'appMethod' => $strAppMethod,
                    'descriptionError' => $arrayRespuesta['mensaje'],
                    'messageUser' => $arrayRespuesta['mensaje'],
                    'status' => 'Fallido',
                    'inParameters' => json_encode($arrayParametros),
                    'creationUser' => $strUser));

                return $arrayRespuesta;
            }
        

            $arrayDataWsNw      = array(
                                            'opWs'                      => $strOpWsPing,
                                            'empresaCod'                => $strEmpresaCod,
                                            'strUltimaMilla'            => $strUltimaMilla,
                                            'ipWanCliente'              => $strIpWanCliente,
                                            'user'                      => $strUser,
                                            'urlPing'                   => $strUrlWsNwPing,
                                            'parametroLatenciaMax'      => $strParametroLatenciaMax,
                                            'parametroPaquetesRecibir'  => $strParametroPaquetesRecibir,
                                            'parametroLatenciaPromedio' => $strParametroLatenciaPromedio,
                                            'regionCliente'             => $strRegionCliente,
                                            'comunicacionId'            => $intIdComunicacion,
                                            'servicioId'                => $intIdServicio,
                                            'vrf'                       => $strVrf,
                                            'switch'                    => $strSwitch
                                        );
            
            $arrayRespuestaWsNw     = $this->getConfirWsNwSoporte($arrayDataWsNw);
            $strResult              = $arrayRespuestaWsNw['result'];
            $strMensaje             = $arrayRespuestaWsNw['mensaje'];    
            $strData                = $arrayRespuestaWsNw['data'];  
            
            if($strResult)
            {
                $arrayProgresoData     = array(
                                            'strCodEmpresa'        => $intCodEmpresa,
                                            'intIdTarea'           => $intIdComunicacion,
                                            'intIdDetalle'         => $intDetalleId,
                                            'strCodigoTipoProgreso'=> $strCodigoProgreso,
                                            'intIdServicio'        => $intIdServicio,
                                            'strOrigen'            => $strParametroOrigen,
                                            'strUsrCreacion'       => $strUser,
                                            'strIpCreacion'        => $strIpCreacion);
                
                if($strUltimaMilla != 'RAD')
                {
                    $this->serviceSoporte->ingresarProgresoTarea($arrayProgresoData);
                }
                //--Ingreso de seguimiento
                //obtener los datos y departamento de la persona por empresa
                $arrayDataPerson = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                    ->getPersonaDepartamentoPorUserEmpresa($strUser, $intCodEmpresa);

                $intLatenciaMedia   = $strData['latency']['avg'];
                $intPaqueteEnviado  = $strData['packages']['sent'];
                $intPaqueteRecibio  = $strData['packages']['received'];
                
                $strSeguimiento = 
                "Se realiz&oacute; la prueba de enlace:
                ping : ".$strIpWanCliente."
                Latencia media: ".$intLatenciaMedia." ".$strUnidadLatencia."
                Paquetes enviados :".$intPaqueteEnviado."
                Paquetes recibidos: ".$intPaqueteRecibio;
                
                
                $arrayParametrosSeguimiento = array(
                                        'idEmpresa'             => $intCodEmpresa,
                                        'prefijoEmpresa'        => $strEmpresaCod,
                                        'idCaso'                => $intCasoId ,
                                        'idDetalle'             => $intDetalleId,
                                        'seguimiento'           => $strSeguimiento,
                                        'strEjecucionTarea'     => "telcos",
                                        'departamento'          => $intDepartamentoId,
                                        'empleado'              => $arrayDataPerson['NOMBRES']." ".$arrayDataPerson['APELLIDOS'],
                                        'usrCreacion'           => $strUser,
                                        'ipCreacion'            => "127.0.0.1",
                                        'strEnviaDepartamento'  => "N",
                                    );   
                
                $this->serviceSoporte->ingresarSeguimientoTarea($arrayParametrosSeguimiento);    
            }   

            
            
            $arrayRespuesta['result']   = $strResult;
            $arrayRespuesta['mensaje']  = $strMensaje;
            $arrayRespuesta['data']     = $strData;
        }
        catch (\Exception $e)
        {
            $arrayRespuesta['result']   = false;
            $arrayRespuesta['mensaje']  = "Error interno. Por favor comunicarse con SOPORTE SISTEMAS para la revisión.";
            $arrayRespuesta['data']     = "";
            $strClass                   = "InfoServicioTecnicoService";
            $strAppMethod               = "confirmarEnlaceWsNwSoporte";
            
            $this->utilService->insertLog(array(
                                                    'enterpriseCode'   => "10",
                                                    'logType'          => 1,
                                                    'logOrigin'        => 'TELCOS',
                                                    'application'      => 'TELCOS',
                                                    'appClass'         => $strClass,
                                                    'appMethod'        => $strAppMethod,
                                                    'descriptionError' => $e->getMessage(),
                                                    'messageUser'      => $arrayRespuesta['mensaje'],
                                                    'status'           => 'Fallido',
                                                    'inParameters'     => json_encode($arrayParametros),
                                                    'creationUser'     => $strUser));
            
        }
        return $arrayRespuesta;
    }
    
    
    /**
     * Función que verifica la confirmación de un enlace mediante un web service de Networking
     * utilizado en tareas de soporte TN.
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0, 06-07-2020
     * 
     * Se agrega al consumo del servicio nuevos campos como Vrf y Switch
     * 
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 2.0, 21-07-2020
     * 
     */
    public function getConfirWsNwSoporte($arrayBodyrequest)
    {

        $boolResulWs                = false;
        $strMensaje                 = "";
        $intParametroLatAvg         = $arrayBodyrequest['parametroLatenciaPromedio'];
        $intParametroMinPaq         = $arrayBodyrequest['parametroPaquetesRecibir'];
        $strOpWs                    = $arrayBodyrequest['opWs'];
        $strEmpresaCod              = $arrayBodyrequest['empresaCod'];
        $strUltimaMilla             = $arrayBodyrequest['strUltimaMilla'];
        $strIpWan                   = $arrayBodyrequest['ipWanCliente'];
        $strUser                    = $arrayBodyrequest['user'];
        $strUrlPingWs               = $arrayBodyrequest['urlPing'];
        $strRegionCliente           = $arrayBodyrequest['regionCliente'];
        $strVrf                     = $arrayBodyrequest['vrf'];
        $strSwitch                  = $arrayBodyrequest['switch'];
        $strConfirmacionError       = "No se pudo validar enlace.<br> Por favor comunicarse con IPCCL1 para la revisión.";
        $strUmbralesError           = "Los valores no cumplen con los umbrales. <br>No se pudo validar enlace."
                                       ."<br>Por favor comunicarse con IPCCL1 para la revisión";
        $strWsNwError               = "Existen inconvenientes con el servidor.<br> Por favor comunicarse con IPCCL1 para la revisión.";
        $strClass                   = "InfoServicioTecnicoService";
        $strAppMethod               = "getConfirWsNwSoporte";
        $strFaltanDatosMsj          = "No se pudo obtener datos para la validación de enlace.<br> Por favor comunicarse con "
                                    . "IPCCL1 para la revisión.";   
        $strErrorRadioEnlace        = "";             
        $strFaltaIpCliente          = "No se tiene una ip para la verificación del enlace";                
        $strFaltaRegionClt          = "No se obtuvo la región para la verificación del enlace"; 
        $strMsjParamVacio           = "";
         
        try
        {
            $strNombreParametro = 'MENSAJE_USUARIO_VALIDACION_ENLACES';
            $strEstado          = 'Activo';
          
             $arrayParamMens          = array(
                                        'nombreParametro' => $strNombreParametro,
                                        'estado'          => $strEstado
                                    );
        
            $entityParametroCab         =  $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                        ->findOneByNombreParametro($arrayParamMens);
           

            $arrayParametrosDet  = array( 
                                        'estado'      => $strEstado, 
                                        'parametroId' => $entityParametroCab->getId()
                                    );

            $arrayParametroDetWSEstado =  $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findBy($arrayParametrosDet);

            foreach ($arrayParametroDetWSEstado as $item)
            { 
                if($item->getDescripcion() =='VALIDACION_ENLACE_ERROR')
                {
                    $strConfirmacionError  = $item->getValor1();
                }
                else if ($item->getDescripcion() =='VALIDACION_ENLACE_ERROR_UMBRALES')
                {
                    $strUmbralesError  = $item->getValor1();
                }
                else if ($item->getDescripcion() =='VALIDACION_ENLACE_ERROR_SERVIDOR')
                {
                    $strWsNwError  = $item->getValor1();
                }
                else if ($item->getDescripcion() =='VALIDACION_ENLACE_ERROR_DATOS')
                {
                    $strFaltanDatosMsj   = $item->getValor1();
                }
                else if ($item->getDescripcion() =='VALIDACION_ENLACE_ERROR_RADIO_ENLACE')
                {
                    $strErrorRadioEnlace  = $item->getValor1();

                }
            }
            if((isset($strIpWan) && !empty($strIpWan)) && (isset($strRegionCliente) && !empty($strRegionCliente)))
            {
                $arrayDataWsNw              = array(
                                                'op'                => $strOpWs,
                                                'enterprise'        => $strEmpresaCod,
                                                'lastMille'         => $strUltimaMilla,
                                                'ipWan'             => $strIpWan,
                                                'user'              => $strUser,
                                                'regionCliente'     => $strRegionCliente,
                                                'vrf'               => $strVrf, 
                                                'switch'            => $strSwitch
                                            );

                $arrayRequesWsNw        = json_encode($arrayDataWsNw);   
                $strUrl                 = $this->webServiceNetworkingRestURL.'/'.$strUrlPingWs;
                $arrayOptions           = array(CURLOPT_SSL_VERIFYPEER => false, CURLOPT_TIMEOUT => $this->intWsPotenciaServicio);
                $strResponseJsonWs      = $this->serviceRestClient->postJSON($strUrl, $arrayRequesWsNw , $arrayOptions);
                $arrayDecodeJsonWs      = json_decode(json_encode($strResponseJsonWs,128),true);
                $arrayResultDecode      = json_decode($arrayDecodeJsonWs['result'],true);
                $strStatusResponse      = $arrayResultDecode['status'];
                if($strStatusResponse == 200)
                {
                    $arrayDataResponseWsNw          = $arrayResultDecode['data'];
                   
                        if(isset($arrayDataResponseWsNw['latency']) && isset($arrayDataResponseWsNw['latency']['avg']))
                        {
                            $intPaquetes                    = $arrayDataResponseWsNw['packages'];
                            $intLatencia                    = $arrayDataResponseWsNw['latency'];
                            $intPaqRecibidos                = $intPaquetes['received'];
                            $intPaqEnviados                 = $intPaquetes['sent'];
                            $intLatenciaAvg                 = $intLatencia['avg'];
                            $intLatenciaMax                 = $intLatencia['max'];
                            $arrayDataResponseWsNw['latency']['unidad'] = "ms";
                            if(is_numeric($intPaqRecibidos) && is_numeric($intPaqEnviados) &&
                               is_numeric($intLatenciaAvg)  && is_numeric($intLatenciaMax))
                            {
                                $intResult          = ($intPaqRecibidos * 100) / $intPaqEnviados;
                                
                                if($intLatenciaAvg  <= $intParametroLatAvg && 
                                   $intResult       >= $intParametroMinPaq)
                                {

                                    $boolResulWs            = true;
                                    $strMensaje             = "El enlace fue validado correctamente.";
                                    
                                }
                                else
                                {   
                                    $boolResulWs        = false;
                                    $strMensaje         = $strUmbralesError;
                                    

                                    $this->utilService->insertLog(array(
                                                            'enterpriseCode'   => "10",
                                                            'logType'          => 1,
                                                            'logOrigin'        => 'TELCOS',
                                                            'application'      => 'TELCOS',
                                                            'appClass'         => $strClass,
                                                            'appMethod'        => $strAppMethod,
                                                            'descriptionError' => json_encode($arrayResultDecode),
                                                            'status'           => 'Fallido',
                                                            'inParameters'     => json_encode($arrayBodyrequest),
                                                            'creationUser'     => $strUser,
                                                            'messageUser'      => $strMensaje));   
                                }    
                            }
                            else
                            {
                                $boolResulWs            = false;
                                $strMensaje             = $strConfirmacionError;

                                $this->utilService->insertLog(array(
                                                            'enterpriseCode'   => "10",
                                                            'logType'          => 1,
                                                            'logOrigin'        => 'TELCOS',
                                                            'application'      => 'TELCOS',
                                                            'appClass'         => $strClass,
                                                            'appMethod'        => $strAppMethod,
                                                            'descriptionError' => json_encode($arrayResultDecode),
                                                            'status'           => 'Fallido',
                                                            'inParameters'     => json_encode($arrayBodyrequest),
                                                            'creationUser'     => $strUser,
                                                            'messageUser'      => $strMensaje));  
                            }       
                        }
                        else
                        {
                            $arrayDataResponseWsNw['latency'] = null;
                            $boolResulWs            = false;
                            $strMensaje             = $strConfirmacionError;
                            $this->utilService->insertLog(array(
                                                            'enterpriseCode'   => "10",
                                                            'logType'          => 1,
                                                            'logOrigin'        => 'TELCOS',
                                                            'application'      => 'TELCOS',
                                                            'appClass'         => $strClass,
                                                            'appMethod'        => $strAppMethod,
                                                            'descriptionError' => json_encode($arrayResultDecode),
                                                            'status'           => 'Fallido',
                                                            'inParameters'     => json_encode($arrayBodyrequest),
                                                            'creationUser'     => $strUser,
                                                            'messageUser'      => $strMensaje));  
                        }

                      
                }
                else
                {
                    $boolResulWs            = false;
                    $strMensaje             = $arrayResultDecode['message']?$arrayResultDecode['message']:$strWsNwError ;
                    $strDescriptionConsumo  = $arrayResultDecode['message']?$arrayResultDecode['message']:$arrayDecodeJsonWs;
                    $this->utilService->insertLog(array(
                                                        'enterpriseCode'   => "10",
                                                        'logType'          => 1,
                                                        'logOrigin'        => 'TELCOS',
                                                        'application'      => 'TELCOS',
                                                        'appClass'         => $strClass,
                                                        'appMethod'        => $strAppMethod,
                                                        'descriptionError' => json_encode($strDescriptionConsumo),
                                                        'status'           => 'Fallido',
                                                        'inParameters'     => json_encode($arrayBodyrequest),
                                                        'creationUser'     => $strUser,
                                                        'messageUser'      => $strMensaje));  
                }
            }
            else
            {
                $boolResulWs                = false;
                $strMensaje                 = $strFaltanDatosMsj;
                if(!isset($strIpWan) || empty($strIpWan))
                {
                    $strMsjParamVacio       = $strFaltaIpCliente;
                }
                else if(!isset($strRegionCliente) || empty($strRegionCliente))
                { 
                    $strMsjParamVacio       = $strFaltaRegionClt;
                }    
                
                $this->utilService->insertLog(array(
                                                    'enterpriseCode'   => "10",
                                                    'logType'          => 1,
                                                    'logOrigin'        => 'TELCOS',
                                                    'application'      => 'TELCOS',
                                                    'appClass'         => $strClass,
                                                    'appMethod'        => $strAppMethod,
                                                    'descriptionError' => $strMsjParamVacio,
                                                    'status'           => 'Fallido',
                                                    'inParameters'     => json_encode($arrayBodyrequest),
                                                    'creationUser'     => $strUser,
                                                    'messageUser'      => $strMensaje));  
            }    
            if($strUltimaMilla == 'RAD' && $boolResulWs)
            {
               $strMensaje = $strMensaje. "%" .$strErrorRadioEnlace;
            }
            $arrayRespuesta['result']   = $boolResulWs;
            $arrayRespuesta['mensaje']  = $strMensaje;
            $arrayRespuesta['data']     = $arrayDataResponseWsNw;
        }
        catch (\Exception $e)
        {
            $arrayRespuesta['result']   = false;
            $arrayRespuesta['mensaje']  = "Error interno. Por favor comunicarse con SOPORTE SISTEMAS para la revisión.";
            $arrayRespuesta['data']     = "";
            $strClass                   = "InfoServicioTecnicoService";
            $strAppMethod               = "getConfirWsNwSoporte";
            
            $this->utilService->insertLog(array(
                                                    'enterpriseCode'   => "10",
                                                    'logType'          => 1,
                                                    'logOrigin'        => 'TELCOS',
                                                    'application'      => 'TELCOS',
                                                    'appClass'         => $strClass,
                                                    'appMethod'        => $strAppMethod,
                                                    'descriptionError' => $e->getMessage(),
                                                    'status'           => 'Fallido',
                                                    'inParameters'     => json_encode($arrayBodyrequest),
                                                    'creationUser'     => $strUser,
                                                    'messageUser'      => $arrayRespuesta['mensaje']));   
        }
        return $arrayRespuesta;
    }


    /**
     * Método para establecer un estado determinado a una solicitud.
     *
     * @param $arrayParameters
     * @param $arrayParameters['idServicio'] ➜ Id del servicio.
     * @param $arrayParameters['opcion'] ➜ Nombre de la opcion.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 04-09-2020 | Version Inicial
     * 
     */
    public function establecerEstadoSolicitud($arrayParameters)
    {
        /*Obtenemos el ID del servicio.*/
        $intIdServicio = $arrayParameters['idServicio']?: null;
        /*Obtenemos la opcion enviada por parametro.*/
        $strOpcion = $arrayParameters['opcion']?: null;

        $entityServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

        if (is_object($entityServicio) && $strOpcion)
        {
            /*Obtenemos el array del parámetro ESTADO_SOLICITUD_PRODUCTO.*/
            $objParamsDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->get('ESTABLECER_ESTADO_SOLICITUD_PRODUCTO',
                    'TECNICO',
                    'ESTADO_SOLICITUD_PRODUCTO',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '',
                    10);

            /*Si la operación anterior haya traido data.*/
            if (is_array($objParamsDet) && !empty($objParamsDet) && method_exists($entityServicio->getProductoId(), 'getDescripcionProducto'))
            {
                /*Convertimos el contenido de VALOR1 a un objeto asociativo.*/
                $arrayServiciosSolicitudes = json_decode($objParamsDet[0]['valor1'], true);

                $arrayParams['strNeedle'] = $entityServicio->getProductoId()->getDescripcionProducto();
                $arrayParams['strKey'] = 'DESCRIPCION_PRODUCTO';
                $arrayParams['arrayToSearch'] = $arrayServiciosSolicitudes;

                /*Realizamos una búsqueda del producto obtenido.*/
                $arrayServicioEstado = $this->searchByKeyInArray($arrayParams);
                $arrayOpciones = $arrayServicioEstado['OPCIONES'][$strOpcion];
                
                /* Validamos los contenidos.absolute-form-toolbar */
                if (is_array($arrayServicioEstado) &&
                    is_array($arrayServicioEstado['OPCIONES']) &&
                    is_array($arrayServicioEstado['OPCIONES'][$strOpcion]) &&
                    !empty($arrayServicioEstado['OPCIONES']))
                {
                    /* Buscamos la solicitud con los filtros correspondientes. */
                    $objSolicitudFactibilidad = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                        ->findOneBy(
                            array(
                                "servicioId" => $entityServicio->getId(),
                                "estado" => $arrayOpciones['ESTADO_BUSQUEDA'],
                                "tipoSolicitudId" => $arrayOpciones['SOLICITUD_ID']
                            )
                        );

                    /* Validamos que sea un objeto valido. */
                    if (is_object($objSolicitudFactibilidad)) 
                    {
                        /* Escribimos el estado que recibimos en el parametro. */
                        $objSolicitudFactibilidad->setEstado($arrayOpciones['ESTADO_NUEVO']);
                        $this->emComercial->persist($objSolicitudFactibilidad);
                        $this->emComercial->flush();
                    }

                }
            }

        }

    }
    /**
     * Método que permite buscar un valor en un arreglo mediante su indice.
     * 
     * @param $strNeedle -> Parametro a buscar.
     * @param $strKey -> Indice del arreglo en el que buscaremos el valor.
     * @param $arrayToSearch -> Arreglo en el que se va a realizar la busqueda.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0.0 01-05-2020 - Version Inicial.
     * 
     * @return int|string|null
     */
    public function searchByKeyInArray($arrayParams)
    {
        $strNeedle          = isset($arrayParams['strNeedle']) ? $arrayParams['strNeedle'] : null;
        $strKey             = isset($arrayParams['strKey']) ? $arrayParams['strKey'] : null;
        $arrayToSearch      = isset($arrayParams['arrayToSearch']) ? $arrayParams['arrayToSearch'] : null;

        if($strNeedle && $strKey && $arrayToSearch)
        {
            foreach ($arrayToSearch as $key => $val)
            {
                if ($val[$strKey] === $strNeedle)
                {
                    return $val;
                }
            }
        }
        return null;
    }

    /**
     * Método que permite obtener un arreglo basados en un indice enviado por parametro.
     * 
     * @param $strKey -> Indice del arreglo que devolvera los valores.
     * @param $arrayToSearch -> Arreglo en el que se va a realizar la busqueda.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0.0 01-05-2020 - Version Inicial.
     * 
     * @return array|null
     */
    public function getArraybyKey($strKey, $arrayToSearch)
    {
        $arrayResponse = array();

        foreach ($arrayToSearch as $key => $val)
        {
            if (isset($val[$strKey]) && !is_null($val[$strKey]))
            {
                array_push($arrayResponse, $val[$strKey]);
            }
        }

        return count($arrayResponse) >= 1 ? $arrayResponse : null;
    }

    /**
     * Método que devuelve un arreglo con el estado y el id del servicio tradicional padre.
     *
     * @param $intIdServicio
     * @return array|null
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0
     * 
     * Se realiza validación a objeto 
     *
     * @param $intIdServicio
     * @return array|null
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.1
     *
     */
    public function getServicioPadreSimultaneo($intIdServicio)
    {
        $arrayResponse = null;
        $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

        /*Obtenemos el array del parámetro CARACTERISTICAS_SERVICIOS_SIMULTANEOS.*/
        $objParamsDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->get('CARACTERISTICAS_SERVICIOS_SIMULTANEOS',
                'TECNICO',
                'INSTALACION_SIMULTANEA',
                '',
                '',
                '',
                '',
                '',
                '',
                10);

        /*Validamos que el arreglo no este vacío.*/
        if (is_array($objParamsDet) && !empty($objParamsDet) && is_object($objServicio))
        {
            $objAdmiProducto = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findOneById($objServicio->getProductoId());

            if (method_exists($objAdmiProducto, 'getDescripcionProducto'))
            {
                $objCaracteristicasServiciosSimultaneos = json_decode($objParamsDet[0]['valor1'], true);
                $arrayParams['strNeedle'] = $objAdmiProducto->getDescripcionProducto();
                $arrayParams['strKey'] = 'DESCRIPCION_PRODUCTO';
                $arrayParams['arrayToSearch'] = $objCaracteristicasServiciosSimultaneos;/* Buscamos dentro del arreglo asociativo el producto. */
                $objCaracteristicasServicioSimultaneo = $this->searchByKeyInArray($arrayParams);
                if (!is_null($objCaracteristicasServicioSimultaneo))
                {
                    // Obtengo el esquema del servicio elegido.
                    $objAdmiCaract = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy(
                            array(
                                "descripcionCaracteristica" => $objCaracteristicasServicioSimultaneo['DESCRIPCION_CARACTERISTICA']
                            ));

                    $objProCaract = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                        ->findOneBy(
                            array(
                                "productoId" => $objServicio->getProductoId()->getId(),
                                "caracteristicaId" => $objAdmiCaract->getId()
                            ));
                    if(is_object($objProCaract))
                    {
                        $objInfServProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                        ->findOneBy(array(
                                    'servicioId' => $objServicio->getId(),
                                    'productoCaracterisiticaId' => $objProCaract->getId()));

                        if (is_object($objInfServProdCaract) && method_exists($objInfServProdCaract, 'getValor'))
                        {
                            $objServicioPadreSimultaneo = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                ->find($objInfServProdCaract->getValor());

                            if (is_object($objServicioPadreSimultaneo))
                            {
                                $arrayResponse = array(
                                    'idServicio' => $objServicioPadreSimultaneo->getId(),
                                    'estadoServicio' => $objServicioPadreSimultaneo->getEstado()
                                );
                            }

                        } 
                    }    
                }
            }
        }

        return $arrayResponse;

    }


    /**
     * 
     * Documentación para el método 'generarOtServiciosAdicional'.
     *
     * Método utilizado para crear una solicitud de planificación adicional.
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 17-09-2020
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 12-02-2021 - Se modifica la condición si es necesario crear un nuevo servicio adicional
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.2 25-02-2021 - Se agrega validacion para que cambie nombre de la solicitud dependiendo del producto
     *                           Se agrega parametro de downgradeCE, con valor SI para validar el escenario en un downgrade
     *                           cuando el plan A tiene CE y el plan B no tiene CE. Se agrega el CE como producto adicional en estado Activo.
     * 
     */
    public function generarOtServiciosAdicional($arrayParametros)
    {
        $intPuntoId        = $arrayParametros['Punto'];
        $intServicioId     = $arrayParametros['Servicio'];
        $intEmpresaId      = $arrayParametros['EmpresaId'];
        $intProducto       = $arrayParametros['Producto'];
        $strCaracteristica = $arrayParametros['Caracteristica'];
        $strOficina        = $arrayParametros['OficinaId'];
        $strUser           = $arrayParametros['Usuario'];
        $strIpCreacion     = $arrayParametros['Ip'];
        $strEstado         = "";
        $strObservacion    = $arrayParametros['Observacion'];
        $strEstadoServicio = $arrayParametros['EstadoServicio'];
        $objSolicitud      = $arrayParametros['Solicitud'];
        $strEstadoCamPlan  = "";
        $strDowngradeCE    = "";

        if (isset($arrayParametros['EstadoCamPlan']))
        {
            $strEstadoCamPlan  = $arrayParametros['EstadoCamPlan'];
        }
        if (isset($arrayParametros['DowngradeCE']))
        {
            $strDowngradeCE    = $arrayParametros['DowngradeCE'];
        }

        try
        {   
            if( !isset($arrayParametros['NuevoServicio']) || (isset($arrayParametros['NuevoServicio']) && $arrayParametros['NuevoServicio']!='SI') )
            {
                $objDatosNumeracion = $this->emComercial->getRepository('schemaBundle:AdmiNumeracion')->
                                                                                            findByEmpresaYOficina($intEmpresaId, $strOficina,"ORD");
                $strSecuenciaAsig   = str_pad($objDatosNumeracion->getSecuencia(), 7, "0", STR_PAD_LEFT);
                $strNumeroContrato  = $objDatosNumeracion->getNumeracionUno() . "-" . $objDatosNumeracion->getNumeracionDos(). "-" .$strSecuenciaAsig;
                $objPunto           = $this->emComercial->getRepository('schemaBundle:InfoPunto')->find($intPuntoId);

                $objEntity = new InfoOrdenTrabajo();
                $objEntity->setPuntoId($objPunto);
                $objEntity->setTipoOrden('N');
                $objEntity->setNumeroOrdenTrabajo($strNumeroContrato);
                $objEntity->setFeCreacion(new \DateTime('now'));
                $objEntity->setUsrCreacion($strUser);
                $objEntity->setIpCreacion($strIpCreacion);
                $objEntity->setOficinaId($strOficina);
                $objEntity->setEstado("Activa");
                $objEntity->setObservacion($intProducto);
                $this->emComercial->persist($objEntity);
                $this->emComercial->flush();   

                if ($objEntity)
                {
                    //Actualizo la numeracion en la tabla
                    $strNumeroAct = ($objDatosNumeracion->getSecuencia() + 1);
                    $objDatosNumeracion->setSecuencia($strNumeroAct);
                    $this->emComercial->persist($objDatosNumeracion);
                    $this->emComercial->flush();
                    $entityServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
                    // Se crea validacion para indicar el tipo de solicitud segun el producto
                    $strTipoSolicitud = "SOLICITUD PLANIFICACION";
                    $arraySolicitudes = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('VALIDA_PROD_ADICIONAL', 
                                                                              'COMERCIAL', 
                                                                              '',
                                                                              'Solicitud cableado ethernet',
                                                                              '',
                                                                              '',
                                                                              '',
                                                                              '',
                                                                              '',
                                                                              '18');
                    
                    if (is_array($arraySolicitudes) && !empty($arraySolicitudes))
                    {
                        foreach($arraySolicitudes as $solicitud)
                        {
                            if ($solicitud['valor1'] == $intProducto)
                            {
                                $strTipoSolicitud = $solicitud['valor2'];
                            }
                        }
                    }
                    $entityTipoSolicitud  = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                    ->findOneByDescripcionSolicitud($strTipoSolicitud);
                     
                    $entityCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(
                                                                                        array('descripcionCaracteristica' => $strCaracteristica,
                                                                                        'estado' => 'Activo'));
                    if (is_object($entityServicio) && !empty($entityServicio))
                    {
                        $strEstado = "PrePlanificada";
                        if (isset($strDowngradeCE) && $strDowngradeCE == 'SI')
                        {
                            $strEstado = $strEstadoServicio;
                        }
                        if ($strEstadoCamPlan != null && $strEstadoCamPlan == 'Rechazada')
                        {
                            $strEstado = $strEstadoCamPlan;
                        }
                        $entitySolicitud = new InfoDetalleSolicitud();
                        $entitySolicitud->setServicioId($entityServicio);
                        $entitySolicitud->setTipoSolicitudId($entityTipoSolicitud);
                        $entitySolicitud->setEstado($strEstado);
                        $entitySolicitud->setObservacion($strObservacion);
                        $entitySolicitud->setUsrCreacion($strUser);
                        $entitySolicitud->setFeCreacion(new \DateTime('now'));
                        $this->emComercial->persist($entitySolicitud);
                        $this->emComercial->flush();

                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                        $entityDetalleSolHist = new InfoDetalleSolHist();
                        $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);
                        $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                        $entityDetalleSolHist->setUsrCreacion($strUser);
                        $entityDetalleSolHist->setEstado($strEstado);
                        $this->emComercial->persist($entityDetalleSolHist);
                        $this->emComercial->flush();

                        if(is_object($entityCaracteristica) && !empty($entityCaracteristica))
                        {
                            $entityDetalleSolCaract = new InfoDetalleSolCaract();
                            $entityDetalleSolCaract->setCaracteristicaId($entityCaracteristica);
                            $entityDetalleSolCaract->setValor($intProducto);
                            $entityDetalleSolCaract->setDetalleSolicitudId($entitySolicitud);
                            $entityDetalleSolCaract->setEstado($strEstado);
                            $entityDetalleSolCaract->setUsrCreacion($strUser);
                            $entityDetalleSolCaract->setFeCreacion(new \DateTime('now'));
                            $this->emComercial->persist($entityDetalleSolCaract);
                            $this->emComercial->flush();
                        }

                    }
                }
            }
            else
            {
                $objProducto         = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($intProducto);
                $entityServicio      = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
                $objOrdenTrabajo     = $this->emComercial->getRepository('schemaBundle:InfoOrdenTrabajo')->findOneBy(
                                                                                                          array('puntoId' => $intPuntoId,
                                                                                                                'estado'  => 'Activa',
                                                                                                                'observacion' => $intProducto));
                $objPunto            = $this->emComercial->getRepository('schemaBundle:InfoPunto')->find($intPuntoId);
                
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array( "servicioId" => $entityServicio->getId()));
                
                if(is_object($objProducto) && !empty($objProducto) && is_object($entityServicio) && !empty($entityServicio))
                {
                    $objServicioTecnicoPlan = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array( "servicioId" => $entityServicio->getId()));
                    
                    $objServicio = new InfoServicio();
                    $objServicio->setPuntoId($objPunto);
                    $objServicio->setProductoId($objProducto);
                    $objServicio->setEsVenta('N');
                    $objServicio->setPrecioVenta(0);
                    $objServicio->setCantidad(1);
                    $objServicio->setTipoOrden('N');
                    if(is_object($objOrdenTrabajo) && !empty($objOrdenTrabajo))
                    {
                        $objServicio->setOrdenTrabajoId($objOrdenTrabajo);
                    }
                    
                    $objServicio->setPuntoFacturacionId($entityServicio->getPuntoFacturacionId());
                    $objServicio->setUsrVendedor($entityServicio->getUsrVendedor());
                    $objServicio->setEstado($strEstadoServicio);
                    $objServicio->setFrecuenciaProducto(0);
                    $objServicio->setDescripcionPresentaFactura($objProducto->getDescripcionProducto());
                    $objServicio->setUsrCreacion($strUser);
                    $objServicio->setFeCreacion(new \DateTime('now'));
                    $objServicio->setIpCreacion($strIpCreacion);
                    $this->emComercial->persist($objServicio);
                    $this->emComercial->flush();

                    //historial de creación
                    $objServHistorial = new InfoServicioHistorial();
                    $objServHistorial->setServicioId($objServicio);
                    $objServHistorial->setObservacion('Se Crea el servicio por cambio de plan');
                    $objServHistorial->setEstado($strEstadoServicio);
                    $objServHistorial->setUsrCreacion($strUser);
                    $objServHistorial->setFeCreacion(new \DateTime('now'));
                    $objServHistorial->setIpCreacion($strIpCreacion);
                    $this->emComercial->persist($objServHistorial);
                    $this->emComercial->flush();

                    //historial de activación
                    $objServHistorial = new InfoServicioHistorial();
                    $objServHistorial->setServicioId($objServicio);
                    $objServHistorial->setObservacion("Se toma el estado de la Solicitud de Cableado Ethernet");
                    $objServHistorial->setEstado($strEstadoServicio);
                    $objServHistorial->setUsrCreacion($strUser);
                    $objServHistorial->setFeCreacion(new \DateTime('now'));
                    $objServHistorial->setIpCreacion($strIpCreacion);
                    if($strEstadoServicio == 'Activo')
                    {
                        $objServHistorial->setAccion("confirmarServicio");
                    }
                    $this->emComercial->persist($objServHistorial);
                    $this->emComercial->flush();

                    if (is_object($objServicioTecnicoPlan) && !empty($objServicioTecnicoPlan))
                    {
                        $objServicioTecnico = new InfoServicioTecnico();
                        $objServicioTecnico->setServicioId($objServicio);
                        $objServicioTecnico->setTipoEnlace('PRINCIPAL');
                        $objServicioTecnico->setUltimaMillaId($objServicioTecnicoPlan->getUltimaMillaId());
                        $this->emComercial->persist($objServicioTecnico);
                        $this->emComercial->flush();
                    }
                    
                    $this->ingresarServicioProductoCaracteristica(  $objServicio,
                                                                    $objProducto,
                                                                    "ES_GRATIS",
                                                                    'si',
                                                                    $strUser);

                    if(is_object($objSolicitud) && !empty($objSolicitud))
                    {
                        $objSolicitud->setServicioId($objServicio);
                        $this->emComercial->persist($objSolicitud);
                        $this->emComercial->flush();
                    }
                }
            }
        }
        catch (\Exception $e)
        {
            $strMensaje = "Error: " . $e->getMessage();
            $this->serviceUtil->insertError('TELCOS+',
                                            'InfoServicioTecnicoService.generarOtServiciosAdicional',
                                            $strMensaje,
                                            'Telcos+',
                                            '127.0.0.1');

        }
    }
  
     /**
     * Método utilizado para obtener el Vrf
     *
     * @param array [intServicioId] [intEmpresaCod] 
     * @return String   $strVrf
     *
     * @author Carlos Caguana <ccaguana@telconet.ec>
     * @version 1.0
     *
     */
    public function getVrfByIdService($arrayData)
    {
        $strIdServicio   = $arrayData['intServicioId'];
        $strIdEmpresa     = $arrayData['intEmpresaCod'];
        $objAdmiProducto = null;
        $objInfoServicio = null;
        $strVrf          = "";
            if(!empty($strIdServicio) && $strIdServicio != "")
            {
                //*************************Se inicia proceso para consultar la vrf asociada al servicio enviado*************************//
                $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($strIdServicio);
                if(is_object($objInfoServicio))
                {
                    $objAdmiProducto = $objInfoServicio->getProductoId();
                }
                if(is_object($objAdmiProducto))
                {
                    if($objAdmiProducto->getNombreTecnico() == "L3MPLS" || $objAdmiProducto->getNombreTecnico() == "CONCINTER" ||
                        $objAdmiProducto->getNombreTecnico() == "DATOSDC" || $objAdmiProducto->getNombreTecnico() == "L3MPLS SDWAN" ||
                        $objAdmiProducto->getNombreTecnico() == "DATOS DC SDWAN")
                    {

                        $objServicioProductoCaracVrf = $this->getServicioProductoCaracteristica($objInfoServicio,
                                                                                                "VRF",
                                                                                                $objAdmiProducto);

                        if(is_object($objServicioProductoCaracVrf))
                        {
                            $objVrf  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                         ->find($objServicioProductoCaracVrf->getValor());

                            if(is_object($objVrf))
                            {
                                $strVrf = $objVrf->getValor();
                            }
                        }
                    }
                    else
                    {
                        //Vrf para INTMPLS
                        $arrayParametrosResultado = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                                    ->getOne('VRF-INTERNET',
                                                                             'TECNICO',
                                                                             '',
                                                                             'VRF-INTERNET',
                                                                             '','','','','',
                                                                             $strIdEmpresa,
                                                                             null
                                                                             );

                        $strVrf = isset($arrayParametrosResultado['valor1'])?$arrayParametrosResultado['valor1']:'';
                    }
                }
            } 



            return  $strVrf;
    }

    
    /*
     * Función que sirve para obtener información de ips utilizada en la asignación de recursos de red.
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.0 24-09-2020
     *
     *
     * @param array $arrayData
     * @return array $resultado
     */    
    public function getIpsRecursos($arrayParametros)
    {
        $intNro                     = $arrayParametros['nro_cantidad'];
        $intIdElemento              = $arrayParametros['id_elemento'];
        $intIdServicio              = $arrayParametros['id_servicio'];
        $intIdPunto                 = $arrayParametros['id_punto'];
        $strEsPlan                  = $arrayParametros['esPlan'];
        $intIdPlan                  = $arrayParametros['id_plan'];
        $strMarcaElemento           = $arrayParametros['marca_elemento'];
        $intEmpresaId               = $arrayParametros['empresaId'];         
        $objRecursosDeRedService    = $arrayParametros['recursosRed']; 
        $emInfra                    = $this->emInfraestructura;
        $emTelconet                 = $this->emComercial;
        $arrayRespuesta             = new Response();
        $arrayResponse              = array();
        $strTipoAprovisionamiento   = "";
        $arrayRespuesta->headers->set('Content-Type', 'text/json');
        $strCodEmpresa              = $intEmpresaId;
        
        try
        {
            $objProducto = $emTelconet->getRepository('schemaBundle:AdmiProducto')
                           ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO",
                                             "estado"              => "Activo",
                                             "empresaCod"          => $strCodEmpresa));

            $objServicio = $emTelconet->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

            //CARACTERISTICA TRASLADO
            $objTraslado        = $this->getServicioProductoCaracteristica($objServicio, "TRASLADO", $objProducto);
            $objServicioTecnico = $emTelconet->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
            if($objTraslado)
            {
                $strServicioAnteriorId = $objTraslado->getValor();
                
                $objServicioTecnicoAnt = $emTelconet->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($strServicioAnteriorId);
                if($objServicioTecnico->getElementoId() == $objServicioTecnicoAnt->getElementoId())
                {
                    //copiar la Ip
                    $objInfoIp = $emInfra->getRepository('schemaBundle:InfoIp')->findOneBy(array("servicioId" => $strServicioAnteriorId, 
                                                                                             "estado" => 'Activo'));
                    if ($objInfoIp)
                    {
                        //buscar scopes
                        $arrayScopeOlt = $emInfra->getRepository('schemaBundle:InfoSubred')
                                             ->getScopePorIpFija($objInfoIp->getIp(), $servicioTecnico->getElementoId());
                        if($arrayScopeOlt)
                        {
                            $strScope = $arrayScopeOlt['NOMBRE_SCOPE'];
                        }
                        else
                        {
                            $strScope = "";
                        }
                        $arrayResponse              = array();
                        $arrayResponse['ips']       = array();
                        $arrayResponse['error']     = null;
                        $arrayResponse['faltantes'] = 0;
                        $arrayResponse['elemento']  = $servicioTecnico->getElementoId();
                        $arrayIp                    = array();
                        $arrayIp['ip']              = $objInfoIp->getIp();
                        $arrayIp['tipo']            = 'FIJA';
                        $arrayIp['scope']           = $strScope;
                        $arrayResponse['ips'][]     = $arrayIp;
                    }

                    $arrayRespuesta->setContent(json_encode($arrayResponse));
                    return $arrayRespuesta;
                }
            }
            //se valida marca del elemento,en caso de venir nula se recupera la marca del elemento del servicio de internet
            if ($strMarcaElemento == null || $strMarcaElemento == "" || $strMarcaElemento == 'null')
            {
                $intIdElemento = $emTelconet->getRepository("schemaBundle:InfoElemento")
                                            ->getElementoParaPerfil($intIdServicio,
                                                                    $strEsPlan, $intIdPunto);
                if(strpos($intIdElemento, 'Error') !== false)
                {
                    $arrayResponse['error'] = $intIdElemento;
                    $arrayRespuesta->setContent(json_encode($arrayResponse));
                    return $arrayRespuesta;
                }
                else
                {
                    $entityElementoOlt = $emInfra->getRepository("schemaBundle:InfoElemento")->find($intIdElemento);
                    $strMarcaElemento    = $entityElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                }
            }
            if ($strMarcaElemento == 'TELLION')
            {
                $strTipoAprovisionamiento = $objRecursosDeRedService->geTipoAprovisionamiento($intIdElemento);
                if ($strTipoAprovisionamiento == 'POOL')
                {
                    $objContent = $objRecursosDeRedService->getIpsDisponiblePoolOlt($intNro, $intIdElemento, 
                                                                                 $intIdServicio, $intIdPunto, 
                                                                                 $strEsPlan, $intIdPlan, "SI");
                }
                else
                {
                    $objContent = $objRecursosDeRedService->getIpsDisponibleScopeOlt($intNro, $intIdElemento,
                                                                                     $intIdServicio, $intIdPunto, 
                                                                                     $strEsPlan, $intIdPlan);
                }
            }
            else if ($strMarcaElemento == 'HUAWEI' || $strMarcaElemento == 'ZTE')
            {
                $objContent = $objRecursosDeRedService->getIpsDisponibleScopeOlt($intNro, $intIdElemento, 
                                                                                $intIdServicio, $intIdPunto, 
                                                                                $strEsPlan, $intIdPlan);
            }
            else
            {
                $objContent = $emInfra->getRepository('schemaBundle:InfoIp')->getIpsReservadasOlt($intIdServicio);
                if (isset($objContent['error']))
                {
                    $strTipoAprovisionamiento = $objRecursosDeRedService->geTipoAprovisionamiento($servicioTecnico->getElementoId());
                    if (strpos($objContent['error'],'No existen Ips Reservadas para este servicio') !== false && 
                        $strTipoAprovisionamiento == "CNR")
                    {
                        $objContent = $emInfra->getRepository('schemaBundle:InfoIp')->getIpsReservadasOlt($intIdServicio, "Activo");
                        
                    }
                    else
                    {
                        $objContent = $objRecursosDeRedService->getIpsDisponibleScopeOlt( $intNro, 
                                                                                    $intIdElemento, 
                                                                                    $intIdServicio, 
                                                                                    $intIdPunto, 
                                                                                    $strEsPlan, 
                                                                                    $intIdPlan );
                    }
                }
                
            }
        }
        catch (\Exception $e)
        {
            $objContent = 'Error: <br>' . $e->getMessage();
        }
        
        $arrayRespuesta->setContent(json_encode($objContent));
        return $arrayRespuesta;
    }
    
    /**
     * Función que sirve para activar producto adicional 
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.0 24-09-2020
     *
     *
     * @param array $arrayData
     * @return array $resultado
     */
    public function activarIpAdicional($arrayParametros)
    {
        $strResult              = "Error no identificado";
        $arrayParametro         = array();
        $intIdEmpresa           = $arrayParametros['idEmpresa'];
        $strPrefijoEmpresa      = $arrayParametros['prefijoEmpresa'];
        $intIdServicio          = $arrayParametros['idServicio'];
        $intIdServicioRef       = $arrayParametros['idServicioRef'];
        $strMacIpFija           = $arrayParametros['macIpFija'];
        $strTieneIpFijaActiva   = $arrayParametros['tieneIpFijaActiva'];
        $strUsrCreacion         = $arrayParametros['user'];
        $strIpCreacion          = $arrayParametros['ipClient'];
        $objCambiarPuerto       = $arrayParametros['infoCambiarPuerto'];
        $objActivarPuerto       = $arrayParametros['InfoActivarPuerto'];         
        $strTipoNegocio         = "";
        $boolFlagMiddleware     = false;
        $boolFinalizaTarea      = false;
        
        $this->emComercial->getConnection()->beginTransaction();        
        $this->emInfraestructura->getConnection()->beginTransaction();

        try
        {
            $objServicio            = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            $objServicioInternet    = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioRef);
            $objServicioTecnico     = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicioRef);

            $objInterfaceElemento   = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoId());

            $objElementoId          = $objInterfaceElemento->getElementoId();
            $objElemento            = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($objElementoId);
            $intModeloElementoId    = $objElemento->getModeloElementoId();
            $objModeloElemento      = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->find($intModeloElementoId);

            if($strPrefijoEmpresa === "TN" || $strPrefijoEmpresa === "TNP")
            {
                $boolFinalizaTarea  = true;
                $objProducto        = $objServicioInternet->getProductoId();
            }
            else
            {
                $objProducto    = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array("esPreferencia" => "SI", 
                                                                                                            "nombreTecnico" => "INTERNET", 
                                                                                                            "empresaCod"    => $intIdEmpresa, 
                                                                                                            "estado"        => "Activo"));
            }
            
            $entityPerfil     = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy(array("descripcionCaracteristica" => "PERFIL", 
                                                              "estado"                    => "Activo"));
            $objProdCaractPerfil = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array("productoId"          => $objProducto->getId(), 
                                                              "caracteristicaId"    => $entityPerfil->getId(), 
                                                              "estado"              => "Activo"));
            if(is_object($objProdCaractPerfil))
            {
                $objPerfilProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->findOneBy(array("servicioId"                  => $intIdServicio, 
                                                                  "estado"                      => "Activo", 
                                                                  "productoCaracterisiticaId"   => $objProdCaractPerfil->getId()));
            }
            else
            {
                $objPerfilProdCaract = null;
            }
            $objDetElemento   = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                  ->findOneBy(array('detalleNombre' => 'OLT MIGRADO CNR',
                                                                    'elementoId'    => $objInterfaceElemento->getElementoId()->getId()));
            
            $strTipoNegocio   = $objServicio->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();
            
            $objDetalleElementoMid  = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                            ->findOneBy(array(  "elementoId"   => $objServicioTecnico->getElementoId(),
                                                                "detalleNombre"=> 'MIDDLEWARE',
                                                                "estado"       => 'Activo'));

            if($objDetalleElementoMid && $objDetalleElementoMid->getDetalleValor() == 'SI')
            {
                    $boolFlagMiddleware = true;
            }
            
            if($boolFlagMiddleware)
            {
                
                if($objPerfilProdCaract)
                {
                    $objControlIp = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->tieneControlIpFIja($objPerfilProdCaract->getValor());
                }
                else
                {
                    $objControlIp = "";
                }
                
                $objIpFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array("servicioId"  => $objServicio->getId(),
                                                              "tipoIp"      => "FIJA",
                                                              "estado"      => "Reservada"));
                
                $arrayDatos = array(    'servicio'                  => $objServicio,
                                        'servicioInternet'          => $objServicioInternet,
                                        'servicioTecnico'           => $objServicioTecnico,
                                        'interfaceElemento'         => $objInterfaceElemento,
                                        'producto'                  => $objProducto,
                                        'ipFija'                    => $objIpFija,
                                        'macIpFija'                 => $strMacIpFija,
                                        'idEmpresa'                 => $intIdEmpresa,
                                        'tieneIpFijaActiva'         => $strTieneIpFijaActiva,
                                        'controlIpFija'             => $objControlIp,
                                        'usrCreacion'               => $strUsrCreacion,
                                        'ipCreacion'                => $strIpCreacion,
                                        'strPrefijoEmpresa'         => $strPrefijoEmpresa);
                
                $arrayRespuestaArray = $objActivarPuerto->activarIpFijaAdicional($arrayDatos);
                
                $strStatus         = $arrayRespuestaArray['status'];
                $strMensaje        = $arrayRespuestaArray['mensaje'];
            }
            else
            {
                if($objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI")
                {
                    $entityIndice           = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                          ->findOneBy(array("descripcionCaracteristica" => "INDICE CLIENTE", 
                                                                            "estado"                    => "Activo"));
                    $objProdCaractIndice    = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                          ->findOneBy(array("productoId"       => $objProducto->getId(), 
                                                                            "caracteristicaId" => $entityIndice->getId(), 
                                                                            "estado"           => "Activo"));
                    $objIndiceProdCaract    = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                          ->findOneBy(array("servicioId"                  => $intIdServicioRef, 
                                                                            "estado"                      => "Activo", 
                                                                            "productoCaracterisiticaId"   => $objIndiceProdCaract->getId()));
                    $arrayParametro['tieneIpFijaActiva']    = $strTieneIpFijaActiva;
                    $arrayParametro['servicio']             = $objServicio;
                    $arrayParametro['servicioTecnico']      = $objServicioTecnico;
                    $arrayParametro['producto']             = $objProducto;
                    $arrayParametro['interfaceElemento']    = $objInterfaceElemento;
                    $arrayParametro['modeloElemento']       = $objModeloElemento;
                    $arrayParametro['indice']               = $objIndiceProdCaract->getValor();
                    $arrayParametro['macWifi']              = trim($strMacIpFija);
                    $arrayParametro['perfil']               = $objPerfilProdCaract->getValor();
                    $arrayParametro['controlIpFija']        = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                  ->tieneControlIpFIja($objPerfilProdCaract->getValor());
                    $arrayParametro['usrCreacion']          = $strUsrCreacion;

                    $arrayParametro['tipoNegocio']          = $strTipoNegocio;

                    $objActivacion             = $objActivarPuerto;
                    $arrayRespuestaArray       = $objActivacion->activarIpsFijas($arrayParametro);
                    $strStatus                 = $arrayRespuestaArray[0]['status'];
                    $strMensaje                = $arrayRespuestaArray[0]['mensaje'];
                }
                else
                {
                    $objIpFija = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                      ->findOneBy(array("servicioId"  => $objServicio->getId(),
                                                                        "tipoIp"      => "FIJA",
                                                                        "estado"      => "Reservada"));

                    $arrayPeticiones['ipFija']          = $objIpFija->getIp();
                    $arrayPeticiones['mac']             = $strMacIpFija;
                    $arrayPeticiones['idServicio']      = $objServicio->getId();
                    $arrayPeticiones['idEmpresa']       = $intIdEmpresa;
                    $arrayPeticiones['usrCreacion']     = $strUsrCreacion;
                    $arrayPeticiones['ipCreacion']      = $strIpCreacion;
                    $arrayPeticiones['puertoNuevoOnt']  = "SI";

                    $serviceCambiarPuertoService    = $objCambiarPuerto;
                    $arrayRespuestaArray            = $serviceCambiarPuertoService->activarIpAdicionalHuawei($arrayPeticiones);
                    $strStatus                      = $arrayRespuestaArray[0]['status'];
                    $strMensaje                     = $arrayRespuestaArray[0]['mensaje'];
                }
            }

            //--------RESPUESTA-----------------------------------------------------*/
            if($strStatus == "OK")
            {
                if($boolFlagMiddleware)
                {
                    //ingresar mac nueva
                    $this
                        ->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "MAC", $strMacIpFija, $strUsrCreacion);

                    //historial del servicio
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setObservacion("Se configuró Ip Fija:" . $objIpFija->getIp() . " con Mac:" . $strMacIpFija);
                    $objServicioHistorial->setEstado($objServicio->getEstado());
                    $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setIpCreacion($strIpCreacion);
                    $this->emComercial->persist($objServicioHistorial);
                    $this->emComercial->flush();
                    
                    if($strTipoNegocio == 'PRO')
                    {
                        //OBTENER VLAN
                        $objSpcVlan = $this
                                           ->getServicioProductoCaracteristica($objServicioInternet, "VLAN", $objProducto);

                        if(is_object($objSpcVlan))
                        {
                            //ELIMINAR VLAN ANTERIOR
                            $this->setEstadoServicioProductoCaracteristica($objSpcVlan, "Eliminado");

                            //AGREGAR NUEVA VLAN
                            $this
                                 ->ingresarServicioProductoCaracteristica(  $objServicioInternet, 
                                                                            $objProducto, 
                                                                            "VLAN", 
                                                                            '302', 
                                                                            $strUsrCreacion);
                        }
                    }
                    
                    if( $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "HUAWEI" &&
                        $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento() != "ZTE" )
                    {
                        //OBTENER PERFIL
                        $objSpcPerfil   = $this
                                               ->getServicioProductoCaracteristica($objServicioInternet, "PERFIL", $objProducto);
                        
                        if(is_object($objSpcPerfil) && count($arrayRespuestaArray) > 3 && $objSpcPerfil->getValor() != $arrayRespuestaArray['perfil'])
                        {
                            //ELIMINAR PERFIL ANTERIOR
                            $this->setEstadoServicioProductoCaracteristica($objSpcPerfil, "Eliminado");

                            //AGREGAR NUEVO PERFIL
                            $this->ingresarServicioProductoCaracteristica(  $objServicioInternet, 
                                                                            $objProducto, 
                                                                            "PERFIL", 
                                                                            $arrayRespuestaArray['perfil'], 
                                                                            $strUsrCreacion);
                        }
                    }
                    $objSpcTrasladoServicioIp   = $this->getServicioProductoCaracteristica( $servicio, 
                                                                                                                                "TRASLADO", 
                                                                                                                                $objProducto);
                    if(is_object($objSpcTrasladoServicioIp))
                    {
                        $objSpcTrasladoServicioIp->setEstado('Eliminado');
                        $objSpcTrasladoServicioIp->setUsrUltMod($strUsrCreacion);
                        $objSpcTrasladoServicioIp->setFeUltMod(new \DateTime('now'));
                        $this->emComercial->persist($objSpcTrasladoServicioIp);
                        $this->emComercial->flush();
                    }
                }
                //actualizo estado del servicio
                $objServicio->setEstado("Activo");
                $this->emComercial->persist($objServicio);
                $this->emComercial->flush();

                //GUARDAR INFO SERVICIO HISTORIAL
                $entityServicioHistorial = new InfoServicioHistorial();
                $entityServicioHistorial->setServicioId($objServicio);
                $entityServicioHistorial->setIpCreacion($strIpCreacion);
                $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                $entityServicioHistorial->setEstado("Activo");
                $entityServicioHistorial->setAccion("confirmarServicio");
                $entityServicioHistorial->setObservacion("Se activaron la(s) Ip(s) Fija(s)");
                $this->emComercial->persist($entityServicioHistorial);
                $this->emComercial->flush();

                //actualizar ips
                //obtener ips fijas q tiene el servicio
                $objIpsFijas = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                              ->findBy(array("servicioId"   => $intIdServicio, 
                                                             "tipoIp"       => "FIJA", 
                                                             "estado"       => "Reservada"));
                foreach($objIpsFijas as $objIpFija)
                {
                    $objIpFija->setEstado("Activo");
                    $this->emInfraestructura->persist($objIpFija);
                    $this->emInfraestructura->flush();
                }

                $strResult = "OK";
                
                $this->emComercial->getConnection()->commit();
                $this->emInfraestructura->getConnection()->commit();

                //agregar validacion si es tellion cnr enviar actualizacion al ldap
                if ($objDetElemento && $strTipoNegocio == "PRO")
                {
                    $arrayResultadoJsonLdap     = $this->ejecutarComandoLdap("A", $intIdServicio);
                    if ($arrayResultadoJsonLdap->status != "OK")
                    {
                        $strMensaje = $strMensaje . "<br>" . $arrayResultadoJsonLdap->mensaje;
                    }
                }
            }
            else if($strStatus == "ERROR")
            {
                $strResult = $strMensaje;

                $this->emComercial->getConnection()->rollback();
                $this->emInfraestructura->getConnection()->rollback();
            }
        }
        catch(\Exception $e)
        {
            $this->emComercial->getConnection()->rollback();
            $this->emInfraestructura->getConnection()->rollback();
            $strResult = "Error: " . $e->getMessage();
        }
        
        if($strResult === "OK" && $boolFinalizaTarea)
        {
            $objTipoSolInfoTecnica      = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                      ->findOneBy(array("descripcionSolicitud" => "SOLICITUD INFO TECNICA",
                                                                        "estado"               => "Activo"));
            $objSolicitudInfoTecnica    = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                      ->findOneBy(array("servicioId"      => $objServicio->getId(),
                                                                        "tipoSolicitudId" => $objTipoSolInfoTecnica->getId(),
                                                                        "estado"          => "Finalizada"),
                                                                  array('id'              => 'DESC'));
            if (is_object($objSolicitudInfoTecnica))
            {
                $arrayParametros            = array();
                $intIdSolicitudInfoTecnica  = $objSolicitudInfoTecnica->getId();
                $objDetalleTareaInfoTecnica = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                              ->findOneBy(array("detalleSolicitudId" => $intIdSolicitudInfoTecnica));
                if(is_object($objDetalleTareaInfoTecnica))
                {
                    $arrayParametros['strTipo']              = "iniciar";
                    $arrayParametros['objDetalle']           = $objDetalleTareaInfoTecnica;
                    $arrayParametros['strObservacion']       = "Tarea iniciada automáticamente por activación";
                    $arrayParametros['strCodEmpresa']        = $intIdEmpresa;
                    $arrayParametros['strUser']              = $strUsrCreacion;
                    $arrayParametros['strIpUser']            = $strIpCreacion;  
                    $arrayParametros["intPersonaEmpresaRol"] = 0;
                    
                    $this->serviceSoporte->administrarTarea($arrayParametros);
                }
                $arrayParametros['intIdDetalleSolicitud'] = $objSolicitudInfoTecnica->getId();
                $arrayParametros['strProceso']            = 'Activar';
                $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleSolicitud')
                     ->cerrarTareasPorSolicitud($arrayParametros);
            }
        }
        return $strResult;
    }
    
    
    /**
     * 
     * Función que busca en el repositorio IN_ARTICULOS_INSTALACION
     * el equipo que se encuentra en el Naf
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0
     *
     */
    public function obtenerElementoNaf($arrayData)
    {
        $strSerie                           = $arrayData['serie'];
        $strModelo                          = $arrayData['modelo'];
        $strEstado                          = $arrayData['estado'];
        $arrayParametros                    = array();
        $arrayParametros['numeroSerie']     = strtoupper($strSerie);
        $arrayParametros['estado']          = $strEstado;
        
        if($strModelo != '')
        {
            $arrayParametros['modelo'] = $strModelo;
        }
        $objCpeNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                       ->findOneBy($arrayParametros);
        if(!$objCpeNaf)
        {
            $arrayParametros['numeroSerie'] = strtolower($strSerie);
            $objCpeNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                           ->findOneBy($arrayParametros);
        }
        
        if(!$objCpeNaf)
        {
            $arrayRespuestaFinal[] = array('status' => 'NO EXISTE ELEMENTO',
                'mensaje' => 'No existe Elemento con: <br>'
                . 'Serie:<b>' . $strSerie . ' </b><br>'
                . 'Modelo:<b>' . $strModelo . ' </b><br>'
                . 'Estado:<b>' . $strEstado . ' </b><br>'
                . 'No podrá continuar con el proceso, Favor Revisar! <br>');
            return $arrayRespuestaFinal;
        }

        $arrayRespuestaFinal[] = array('status' => 'OK',
                                       'mensaje' => str_replace(',', ' ', $objCpeNaf->getDescripcion()) . ","
                                       . $objCpeNaf->getMac() . "," . $objCpeNaf->getModelo());
        return $arrayRespuestaFinal;
    }
    
    /**
     * Funcion que sirve para consultar el suscriber id atravez del login
     * 
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.0 22-10-2020
     * 
     * 
     * @param array $arrayPeticiones
     * @return array $arrayRespuesta
     */
    public function obtenerSusbcriber($arrayPeticiones)
    {
        
        try
         {

            $arrayRespuesta = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->getListadoSubscriberWs($arrayPeticiones);
            
         } 
         catch (\Exception $ex)
         {
            $this->utilService->insertError('Telcos+', 'obtenerSusbcriber', 
            $ex->getMessage(), $arrayPeticiones['usrCreacion'], $arrayPeticiones['ipCreacion']
            );
         }
        return $arrayRespuesta;
        
    }
     /**
     * Funcion que sirve para cambiar de estado de pendiente a activo
     * con el suscriber id 
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.0 31-08-2020
     * 
     * 
     * @param array $arrayPeticiones
     * @return array $arrayRespuesta
     */
    public function actualizarEstado($arrayPeticiones)
    {
        $arrayPeticiones['strUser'] =  'GMS' ;

        try 
        {

            $arrayRespuesta = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')->subscriberWs($arrayPeticiones);
            
        } 
        catch (\Exception $ex) 
        {
            $this->utilService->insertError('Telcos+', 'actualizarEstado', 
            $ex->getMessage(), $arrayPeticiones['usrCreacion'], $arrayPeticiones['ipCreacion']
            );
        }
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene la ip disponible para el servicio por producto
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 09-06-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 15-06-2022 - Se realiza la validación para obtener la subred asignada al cliente
     *                           o suna vez subneteada la subred se le agrega la característica al cliente que pertenece.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 01-08-2022 - Se realiza la validación para obtener la ip del servicio para el producto SAFE ANALYTICS CAM.
     *
     * @param Array $arrayParametros [
     *                                   'objServicio'    => objeto del servicio,
     *                                   'strCodEmpresa'  => id de empresa,
     *                                   'strUsrCreacion' => usuario creación,
     *                                   'strIpCreacion'  => ip creación
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                   'status'        => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                   'mensaje'       => mensaje de la operación o de error,
     *                                   'objSubred'     => objeto subred de la ip,
     *                                   'strIpServicio' => dirección ip disponible
     *                               ]
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.2 01-08-2022 - Se realiza la validación y se agrega nuevos parametro para aporvisionar de ip
     * por motivo de cambio de linea pon para producto SAFE ANALYTICS CAM se agurega el elmento olt nuevo el cual tiene que aprovisionar 
     * y  una bandera para indicar la operacion a realizar.
     *
     * @param Array $arrayParametros [
     *                                   'objServicio'    => objeto del servicio,
     *                                   'strCodEmpresa'  => id de empresa,
     *                                   'strUsrCreacion' => usuario creación,
     *                                   'strIpCreacion'  => ip creación,
     *                                   'objNuevoOlt'    => $objElementoNuevo,
     *                                   'flag'           => 'CLP'
     *                               ]
     */
    public function getIpDisponiblePorServicio($arrayParametros)
    {
        $objServicio             = $arrayParametros['objServicio'];
        $objElemento             = $arrayParametros['objNuevoOlt'];
        $strCodEmpresa           = $arrayParametros['strCodEmpresa'];
        $strFlag                 = $arrayParametros['flag'];
        $strIdElemento           = "";
        $strIdElementoNuevo      = "";
        $strDescripcionProducto  = "";

        if(is_object($objServicio->getProductoId()))
        {
            $strDescripcionProduct = $objServicio->getProductoId()->getCodigoProducto();
        }
        
        try
        {
            //seteo las variables
            $objSubred     = null;
            $strIpServicio = null;
            //verifico servicio
            if(!is_object($objServicio))
            {
                throw new \Exception("No se ha podido obtener el servicio, por favor notificar a Sistemas.");
            }
            //obtengo el producto
            $objPunto = $objServicio->getPuntoId();
            if(!is_object($objPunto))
            {
                throw new \Exception("No se ha podido obtener el punto, por favor notificar a Sistemas.");
            }
            //obtengo el producto
            $objProducto = $objServicio->getProductoId();
            if(!is_object($objProducto))
            {
                throw new \Exception("No se ha podido obtener el producto, por favor notificar a Sistemas.");
            }
            //obtengo el servicio técnico
            $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneByServicioId($objServicio->getId());
            if(!is_object($objServicioTecnico))
            {
                throw new \Exception("No se ha podido obtener el ervicio técnico, por favor notificar a Sistemas.");
            }
            //obtengo el elemento olt
            $objElementoOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                ->find($objServicioTecnico->getElementoId());
            if(!is_object($objElementoOlt))
            {
                throw new \Exception("No se ha podido obtener el elemento olt, por favor notificar a Sistemas.");
            }
            //obtengo el id de la ciudad
            $intIdCanton = $objPunto->getSectorId()->getParroquiaId()->getCantonId()->getId();

            //obtengo el uso de la subred
            $strSafeCityGpon = "SAFECITYGPON";
            $arrayParametrosSubred = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'NOMBRES PARAMETROS SUBREDES Y VLANS',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParametrosSubred) && !empty($arrayParametrosSubred)
               && isset($arrayParametrosSubred['valor3']) && !empty($arrayParametrosSubred['valor3']))
            {
                $strSafeCityGpon = $arrayParametrosSubred['valor3'];
            }
            else
            {
                throw new \Exception("No se ha podido obtener el uso de subred principal del producto Datos SafeCity, ".
                                     "por favor notificar a Sistemas.");
            }

            //obtengo el uso de subred del producto
            $strUsoSubredProducto = "";
            $booleanNoElementoPe  = false;
            $arrayParUsoSubredProducto = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                        'COMERCIAL',
                                                                                        '',
                                                                                        'PARAMETRO USO SUBRED PARA SERVICIOS ADICIONALES SAFECITY',
                                                                                        $objProducto->getId(),
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        '');
            if(isset($arrayParUsoSubredProducto) && !empty($arrayParUsoSubredProducto)
               && isset($arrayParUsoSubredProducto['valor2']) && !empty($arrayParUsoSubredProducto['valor2']))
            {
                $strUsoSubredProducto = $arrayParUsoSubredProducto['valor2'];
                $strSafeCityGpon      = isset($arrayParUsoSubredProducto['valor7'])
                                        ? $arrayParUsoSubredProducto['valor7'] : $strSafeCityGpon;
                $booleanNoElementoPe  = isset($arrayParUsoSubredProducto['valor6'])
                                        && $arrayParUsoSubredProducto['valor6'] == "NO";
            }
            else
            {
                throw new \Exception("No se ha podido obtener el uso de subred del producto ".$objProducto->getDescripcionProducto().
                                     ", por favor notificar a Sistemas.");
            }

            if((isset($strFlag) &&  $strFlag === "CLP") &&
            (isset($strDescripcionProduct) &&  $strDescripcionProduct === "CAM-SAFE"))
            {
                $strIdElemento = $objElemento->getId();
            }
            else
            {
                $strIdElemento = $objServicioTecnico->getElementoId();
            }

            //obtengo el elemento pe
            $objElementoPe = null;
            if(!$booleanNoElementoPe)
            {
                $objElementoPe  = $this->getPeByOlt(array("intIdElemento" => $strIdElemento,
                                                          "intIdServicio" => $objServicio->getId()));
                if(!is_object($objElementoPe))
                {
                    throw new \Exception("No se ha podido obtener el elemento pe, por favor notificar a Sistemas.");
                }
            }

            //obtengo los prefijos para la subredes de los servicios adicionales
            $arraySubredPrefijos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->get('PARAMETROS MASCARA Y PREFIJOS DE SUBREDES PRODUCTO',
                                                                                    'TECNICA',
                                                                                    '',
                                                                                    '',
                                                                                    $objProducto->getId(),
                                                                                    $intIdCanton,
                                                                                    'PREFIJOS',
                                                                                    '',
                                                                                    '',
                                                                                    $strCodEmpresa);
            if(!isset($arraySubredPrefijos) || !is_array($arraySubredPrefijos) || count($arraySubredPrefijos) < 1)
            {
                $arraySubredPrefijos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PARAMETROS MASCARA Y PREFIJOS DE SUBREDES PRODUCTO',
                                                    'TECNICA',
                                                    '',
                                                    '',
                                                    $objProducto->getId(),
                                                    '',
                                                    'PREFIJOS',
                                                    '',
                                                    '',
                                                    $strCodEmpresa);
                if(!isset($arraySubredPrefijos) || !is_array($arraySubredPrefijos) || count($arraySubredPrefijos) < 1)
                {
                    throw new \Exception("No se ha podido obtener los prefijos de subred para la asignación de ip del producto ".
                                         $objProducto->getDescripcionProducto().", por favor notificar a Sistemas.");
                }
            }
            //obtengo las mascaras para la subredes de los servicios adicionales
            $arraySubredMascaras = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->get('PARAMETROS MASCARA Y PREFIJOS DE SUBREDES PRODUCTO',
                                                                                    'TECNICA',
                                                                                    '',
                                                                                    '',
                                                                                    $objProducto->getId(),
                                                                                    $intIdCanton,
                                                                                    'MASCARA',
                                                                                    '',
                                                                                    '',
                                                                                    $strCodEmpresa);
            if(!isset($arraySubredMascaras) || !is_array($arraySubredMascaras) || count($arraySubredMascaras) < 1)
            {
                $arraySubredMascaras = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PARAMETROS MASCARA Y PREFIJOS DE SUBREDES PRODUCTO',
                                                        'TECNICA',
                                                        '',
                                                        '',
                                                        $objProducto->getId(),
                                                        '',
                                                        'MASCARA',
                                                        '',
                                                        '',
                                                        $strCodEmpresa);
                if(!isset($arraySubredMascaras) || !is_array($arraySubredMascaras) || count($arraySubredMascaras) < 1)
                {
                    throw new \Exception("No se ha podido obtener las mascaras de subred para la asignación de ip del producto ".
                                         $objProducto->getDescripcionProducto().", por favor notificar a Sistemas.");
                }
            }
            //obtener caracteristica de la subred privada del cliente
            $objCaractSubred = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array("descripcionCaracteristica" => "SUBRED_PRIVADA",
                                                                  "estado"                    => "Activo"));
            if(!is_object($objCaractSubred))
            {
                throw new \Exception("No se ha podido obtener la característica SUBRED PRIVADA, por favor notificar a Sistemas.");
            }

            //obtener subred privada del cliente
            $objPerEmpCaractSubred   = null;
            $arrayPerEmpCaractSubred = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                           ->findBy(array("caracteristicaId"    => $objCaractSubred->getId(),
                                          "personaEmpresaRolId" => $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId(),
                                          "estado"              => "Activo"));

            if((isset($strFlag) &&  $strFlag === "CLP") &&
            (isset($strDescripcionProduct) &&  $strDescripcionProduct === "CAM-SAFE"))
            {
                $strIdElementoNuevo = $objElemento->getId();
            }
            else
            {
                $strIdElementoNuevo = $objElementoOlt->getId();
            }
            foreach($arrayPerEmpCaractSubred as $objItemPerCaractSubred)
            {
                $objSubred = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")
                                                ->findOneBy(array("id"         => $objItemPerCaractSubred->getValor(),
                                                                  "elementoId" => $strIdElementoNuevo,
                                                                  "uso"        => $strUsoSubredProducto));
                if(is_object($objSubred))
                {
                    $objPerEmpCaractSubred = $objItemPerCaractSubred;
                    $strIpServicio         = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                              ->getIpDisponibleBySubred($objSubred->getId());
                    break;
                }
            }
            //verificar si no se encontro la ip
            if(empty($strIpServicio) || $strIpServicio=="NoDisponible")
            {
                //obtener ip
                foreach($arraySubredPrefijos as $arrayPrefijos)
                {
                    //setear estado de la subred
                    $strEstadoSubred = isset($arrayPrefijos['valor5']) && !empty($arrayPrefijos['valor5']) ? $arrayPrefijos['valor5'] : "Activo";
                    foreach($arraySubredMascaras as $arrayMascara)
                    {
                        //obtener subred
                        $objSql = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")
                                                                ->createQueryBuilder('s')
                                                                ->where("s.uso = :uso")
                                                                ->andWhere("s.subred LIKE :prefijo")
                                                                ->andWhere("s.mascara = :mascara")
                                                                ->andWhere("s.estado = :estado")
                                                                ->setParameter('uso', $strSafeCityGpon)
                                                                ->setParameter('prefijo', $arrayPrefijos['valor4'].'%')
                                                                ->setParameter('mascara', $arrayMascara['valor4'])
                                                                ->setParameter('estado', $strEstadoSubred);
                        if(is_object($objElementoPe))
                        {
                            $objSql->andWhere("s.elementoId = :elementoId")
                                   ->setParameter('elementoId', $objElementoPe->getId());
                        }
                        else
                        {
                            $objSql->andWhere("s.elementoId IS NULL");
                        }
                        $objSubred = $objSql->orderBy('s.id', 'ASC')
                                        ->setMaxResults(1)
                                        ->getQuery()
                                        ->getOneOrNullResult();
                        if(is_object($objSubred))
                        {
                            $strPos = strpos($objSubred->getSubred(), '/');
                            //subnetear subred hijas
                            $arrayParametrosSubSubred['intIdElementoAnt']   = is_object($objElementoPe) ?
                                                                              $objElementoPe->getId() : null;
                            $arrayParametrosSubSubred['intIdElementoNuevo'] = $strIdElemento;
                            $arrayParametrosSubSubred['strSubredIp']        = substr($objSubred->getSubred(),0,$strPos);
                            $arrayParametrosSubSubred['strPrefijoSubred']   = substr($objSubred->getSubred(),$strPos+1);
                            $arrayParametrosSubSubred['strUsoAnterior']     = $strSafeCityGpon;
                            $arrayParametrosSubSubred['strUsoNuevo']        = $strUsoSubredProducto;
                            $arrayParametrosSubSubred['strTipo']            = null;
                            $arrayResultadoSubred = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')
                                                                   ->subnetingSubredHijas($arrayParametrosSubSubred);
                            //verificar subneting
                            if($arrayResultadoSubred['status'] != "OK")
                            {
                                throw new \Exception("No se ha podido subnetear las subredes hijas de la subred ".$objSubred->getSubred().
                                                     " con el uso ".$strSafeCityGpon.", por favor notificar a Sistemas.");
                            }
                            //obtener ip
                            $strIpServicio = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                                      ->getIpDisponibleBySubred($objSubred->getId());
                            //verificar estado de la subred
                            if($objSubred->getEstado() == "Activo")
                            {
                                $objSubred->setEstado("Ocupado");
                                $this->emInfraestructura->persist($objSubred);
                                $this->emInfraestructura->flush();
                            }
                            //verificar si existe un caracteristica subred activa
                            if(is_object($objPerEmpCaractSubred))
                            {
                                $objPerEmpCaractSubred->setEstado("Eliminado");
                                $objPerEmpCaractSubred->setUsrUltMod($arrayParametros['strUsrCreacion']);
                                $objPerEmpCaractSubred->setFeUltMod(new \DateTime('now'));
                                $this->emComercial->persist($objPerEmpCaractSubred);
                                $this->emComercial->flush();
                            }
                            //guardar caracteristica subred
                            $objPerEmpCaractSubredNew = new InfoPersonaEmpresaRolCarac();
                            $objPerEmpCaractSubredNew->setPersonaEmpresaRolId($objServicio->getPuntoId()->getPersonaEmpresaRolId());
                            $objPerEmpCaractSubredNew->setCaracteristicaId($objCaractSubred);
                            $objPerEmpCaractSubredNew->setValor($objSubred->getId());
                            $objPerEmpCaractSubredNew->setFeCreacion(new \DateTime('now'));
                            $objPerEmpCaractSubredNew->setEstado('Activo');
                            $objPerEmpCaractSubredNew->setUsrCreacion($arrayParametros['strUsrCreacion']);
                            $objPerEmpCaractSubredNew->setIpCreacion($arrayParametros['strIpCreacion']);
                            $this->emComercial->persist($objPerEmpCaractSubredNew);
                            $this->emComercial->flush();
                            //verificar si se encontro la ip
                            if(!empty($strIpServicio) && $strIpServicio!="NoDisponible")
                            {
                                break;
                            }
                        }
                    }
                    //verificar si se encontro la ip
                    if(!empty($strIpServicio) && $strIpServicio!="NoDisponible")
                    {
                        break;
                    }
                }
            }

            //verificar si se encontro la ip
            if(empty($strIpServicio) || $strIpServicio=="NoDisponible" || !is_object($objSubred))
            {
                throw new \Exception("No se ha podido obtener una ip disponible, por favor notificar a Sistemas.");
            }
            //seteo resultado
            $arrayResultado = array(
                'status'        => "OK",
                'mensaje'       => "OK",
                'objSubred'     => $objSubred,
                'strIpServicio' => $strIpServicio
            );
        }
        catch (\Exception $ex)
        {
            $arrayResultado = array(
                'status'        => "ERROR",
                'mensaje'       => $ex->getMessage(),
                'objSubred'     => null,
                'strIpServicio' => null
            );
        }
        return $arrayResultado;
    }
    
     /** Función que permite obtener toda la información necesaria para el flujo de ZeroTouch.
     *
     * @param $arrayParams
     * @return array|bool[]|null
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 06-04-2021 | Version Inicial
     *
     */
    public function getZeroTouchData($arrayParams)
    {
        $intIdServicio = !empty($arrayParams['intIdServicio']) ? $arrayParams['intIdServicio'] : null;
        $objInfoServicio = !is_null($intIdServicio) ? $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio) : null;
        $arrayZeroTouch = array();

        $arrayAdmiParametro  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne(
                'CARACTERISTICAS_ZERO_TOUCH',
                'TECNICO',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '10');

        $arrayCaracteristicasZeroTouch = !empty($arrayAdmiParametro) ? json_decode($arrayAdmiParametro['valor1'], true) : null;

        if ($objInfoServicio && $arrayCaracteristicasZeroTouch)
        {
            foreach ($arrayCaracteristicasZeroTouch as $key=>$arrayCaract)
            {
                if ($arrayCaract['nombre'] == 'CPE_TEMP')
                {
                    $arrayZeroTouch['ELEMENTOS_INSTALACION']['cpeCliente'] = json_decode(
                        $this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre']), true
                    );
                    continue;
                }
                elseif ($arrayCaract['nombre'] == 'TRANSCEIVER_TEMP')
                {
                    $arrayZeroTouch['ELEMENTOS_INSTALACION'] = is_null($this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre'])) ?
                        null:
                        $arrayZeroTouch['ELEMENTOS_INSTALACION'] + json_decode(
                            $this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre']), true
                        );
                    continue;
                }
                $arrayZeroTouch[$arrayCaract['nombre']] = $this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre']);
            }
        }

        return $arrayZeroTouch;

    }

    /**
     * Función que permite obtener toda la información necesaria para el flujo de ZeroTouch.
     *
     * @param $arrayParams
     * @return array|bool[]|null
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 06-04-2021 | Version Inicial
     *
     */
    public function getZeroTouchDataMovil($arrayParams)
    {
        $intIdServicio = !empty($arrayParams['intIdServicio']) ? $arrayParams['intIdServicio'] : null;
        $objInfoServicio = !is_null($intIdServicio) ? $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio) : null;
        $arrayZeroTouch = array();

        $arrayAdmiParametro  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne(
                'CARACTERISTICAS_ZERO_TOUCH',
                'TECNICO',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '10');

        $arrayCaracteristicasZeroTouch = !empty($arrayAdmiParametro) ? json_decode($arrayAdmiParametro['valor1'], true) : null;

        if ($objInfoServicio && $arrayCaracteristicasZeroTouch)
        {
            foreach ($arrayCaracteristicasZeroTouch as $key=>$arrayCaract)
            {
                if ($arrayCaract['nombre'] == 'CPE_TEMP')
                {
                    if (!is_null($this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre'])))
                    {
                        $arrayZeroTouch['ELEMENTOS_INSTALACION'][] =
                            json_decode(
                                $this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre']), true
                            );
                    }else
                    {
                        $arrayZeroTouch['ELEMENTOS_INSTALACION'] = null;
                    }

                    continue;
                }
                elseif ($arrayCaract['nombre'] == 'TRANSCEIVER_TEMP')
                {
                    if(!is_null($this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre'])))
                    {
                        $arrayTransceivers = json_decode(
                            $this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre']), true
                        );

                        foreach ($arrayTransceivers as $objTransceiver)
                        {
                            $arrayZeroTouch['ELEMENTOS_INSTALACION'][] = $objTransceiver;
                        }
                    }
                    continue;
                }
                $arrayZeroTouch[$arrayCaract['nombre']] = $this->getCaracteristicaServicio($objInfoServicio, $arrayCaract['nombre']);
            }
        }

        return $arrayZeroTouch;

    }

    /**
     * Documentación para el método 'getCaracteristicaServicio'.
     * Este metodo obtiene la caracteristica asociada a un Servicio por su nombre de Caracteristica
     *
     * @param object $objInfoServicioEntity Entidad InfoServicio
     * @param string $strNombreCaracteristica Nombre de la caracteristica
     *
     * @return null
     * @version 23-03-2021 | Version Inicial
     * @author Pablo Pin <ppin@telconet.ec>
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 05-10-2021 | Se agrega filtro extra para que cuando se consulte una caracteristica siempre busque por el estado "Activo".
     *
     */
    public function getCaracteristicaServicio($objInfoServicioEntity, $strNombreCaracteristica)
    {
        $objInfoServicioProdCaractEntity = null;

        $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica');
        $objAdmiProductoCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica');
        $objInfoServicioProdCaract = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract');
        $objAdmiCaracteristicaEntity = $objAdmiCaracteristica->findOneBy(array("descripcionCaracteristica" => $strNombreCaracteristica));

        if ($objAdmiCaracteristicaEntity && $objInfoServicioEntity)
        {
            $objAdmiProductoCaracteristica = $objAdmiProductoCaracteristica->findOneBy(array(
                "productoId" => $objInfoServicioEntity->getProductoId(),
                "caracteristicaId" => $objAdmiCaracteristicaEntity
            ));
            if ($objAdmiProductoCaracteristica)
            {
                $objInfoServicioProdCaractEntity = $objInfoServicioProdCaract->findOneBy(
                    array(
                        "servicioId" => $objInfoServicioEntity->getId(),
                        "productoCaracterisiticaId" => $objAdmiProductoCaracteristica->getId(),
                        "estado" => 'Activo'
                    ));
                return is_object($objInfoServicioProdCaractEntity) ? $objInfoServicioProdCaractEntity->getValor() : null;
            }
        }
        return $objInfoServicioProdCaractEntity;
    }

    /**
     * Función para realizar el proceso de activación temporal del flujo ZeroTouch.
     *
     * @param $arrayParams
     * @return string[]
     *
     * @throws \Exception
     * @version 06-04-2021 | Version Inicial
     *
     * @author Pablo Pin <ppin@telconet.ec>
     */
    public function activacionTemporalZeroTouch($arrayParams)
    {
        /*Se define el arreglo de peticiones a enviar al WS.*/
        $arrayPeticiones = array(
            'url' => 'configswipv6',
            'accion' => 'activar',

            'ejecuta' => 'SI',
            'tipo_ejecucion' => 'test',
            'sw' => '',
            'anillo' => '',
            'pto' => '',
            'mac' => '',//04D5.900B.CC09
            'descripcion' => '',//cce_gprovincial-bienestaranimal_1_rad
            'modelo_cpe' => '',
            'login_aux' => '',
            'user_name' => '',
            'user_ip' => '',
            'servicio'=>''
        );

        /*Obtenemos el servicio.*/
        $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParams['intIdServicio']);
        if (!is_object($objInfoServicio))
        {
            throw new \Exception('No se pudo encontrar servicio.');
        }

        $arrayPeticiones['servicio'] = $objInfoServicio->getProductoId()->getNombreTecnico();
        $strValorIpv6 = $this->getCaracteristicaServicio($objInfoServicio, 'IPV6_TEMP');
        $strValorVlan = $this->getCaracteristicaServicio($objInfoServicio, 'VLAN_TEMP');

        if ($strValorIpv6 && $strValorVlan)
        {
            throw new \Exception('El servicio ya tiene recursos temporales asignados.', 200);
        }

        /*Obtenemos el servicio tecnico.*/
        $objInfoServTec = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                                  ->findOneBy(array('servicioId' => $objInfoServicio->getid()));

        if (!is_object($objInfoServTec))
        {
            throw new \Exception('No se pudo encontrar el objeto servicio técnico.');
        }

        /*Obtenemos el objeto del switch.*/
        $objInfoElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                   ->find($objInfoServTec->getElementoId());
        if (!is_object($objInfoElemento))
        {
            throw new \Exception('No se pudo encontrar el objeto del switch.');
        }

        /*Obtenemos el objeto del detalle del switch para obtener el anillo*/
        $objInfoDetalleElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
            ->findOneBy(
                array('elementoId' => $objInfoServTec->getElementoId(),
                    'detalleNombre' => 'ANILLO',
                    'estado' => 'Activo'
                )
            );

        if (!is_object($objInfoDetalleElemento))
        {
            throw new \Exception('No se pudo encontrar el objeto del anillo.');
        }

        /*Obtenemos el objeto del puerto.*/
        $objInfoIntElem = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
            ->find($objInfoServTec->getInterfaceElementoId());

        if (!is_object($objInfoIntElem))
        {
            throw new \Exception('No se pudo encontrar el objeto del puerto.');
        }

        /*Identificamos el CPE del cliente.*/
        $arrayCpeCliente = $this->searchByKeyInArray(
            array(
                'strNeedle' => 'CPE',
                'strKey' => 'tipoElemento',
                'arrayToSearch' => $arrayParams['arrayEquiposClte']
            ));

        if (empty($arrayCpeCliente))
        {
            throw new \Exception('No se recibió el CPE CLIENTE.');
        }

        if ($arrayCpeCliente['propiedad'] == 'TELCONET')
        {
            /*Consultamos el objeto del CPE.*/
            $objCpeClienteEncontrado = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                ->findOneBy(
                    array(
                        'numeroSerie' => $arrayCpeCliente['serie'],
                        'estado' => 'PI'
                    ));

            if (!is_object($objCpeClienteEncontrado))
            {
                throw new \Exception('No se pudo encontrar el CPE CLIENTE en estado PI.');
            }
            
            /* Definimos la mac para enviar al WS de Networking. */
           $arrayPeticiones['mac'] = $objCpeClienteEncontrado->getMac();

        }else 
        {
            if (empty($arrayCpeCliente['mac']))
            {
                throw new \Exception('No se recibió la MAC del CPE CLIENTE.');
            }
            /* Definimos la mac para enviar al WS de Networking. */
            $arrayPeticiones['mac'] = $arrayCpeCliente['mac'];
        }

        /*Identificamos el Transceiver del cliente.*/
        $arrayTransceiverCliente = $this->searchByKeyInArray(
            array(
                'strNeedle' => 'TRANSCEIVER',
                'strKey' => 'tipoElemento',
                'arrayToSearch' => $arrayParams['arrayEquiposClte']
            ));

        if (empty($arrayTransceiverCliente))
        {
            throw new \Exception("No se recibió el TRANSCEIVER CLIENTE.");
        }

        /*Consultamos el objeto del Transceiver.*/
        $objTransceiverClienteEncontrado = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                                ->findOneBy(array(
                                                    'numeroSerie' => $arrayTransceiverCliente['serie'],
                                                    'estado' => 'PI'
                                                ));

        if (!is_object($objTransceiverClienteEncontrado))
        {
           throw new \Exception("No se pudo encontrar el TRANSCEIVER CLIENTE en estado PI.");
        }

        if (isset($arrayParams['arrayEquiposNodo']) && $arrayParams['arrayEquiposNodo'])
        {
            /*Identificamos el Transceiver del cliente.*/
            $arrayTransceiverNodo = $this->searchByKeyInArray(
                array(
                    'strNeedle' => 'TRANSCEIVER',
                    'strKey' => 'tipoElemento',
                    'arrayToSearch' => $arrayParams['arrayEquiposNodo']
                ));

            /*Consultamos el objeto del Transceiver.*/
            $objTransceiverNodoEncontrado = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                ->findOneBy(array(
                    'numeroSerie' => $arrayTransceiverNodo['serie'],
                    'estado' => 'PI'
                ));

            if (is_null($arrayTransceiverNodo) || !is_object($objTransceiverNodoEncontrado))
            {
                throw new \Exception("No se pudo encontrar el TRANSCEIVER NODO en estado PI.");
            }
        }

        /*Agregamos los parametros faltantes.*/
        $arrayPeticiones['sw'] = $objInfoElemento->getNombreElemento();
        $arrayPeticiones['anillo'] = $objInfoDetalleElemento->getDetalleValor();
        $arrayPeticiones['pto'] = $objInfoIntElem->getNombreInterfaceElemento();
        $arrayPeticiones['modelo_cpe'] = $arrayCpeCliente['modelo'];
        
        $arrayPeticiones['descripcion'] = $objInfoServicio->getPuntoId()->getLogin();

        /*Validamos que no tenga login auxiliar.*/
        if (is_null($objInfoServicio->getLoginAux()))
        {
            /*Creamos el login auxiliar.*/
            $this->generarLoginAuxiliar($objInfoServicio->getid());
        }

        /*Asignamos parametros de auditoria faltantes.*/
        $arrayPeticiones['login_aux'] = $objInfoServicio->getLoginAux();
        $arrayPeticiones['user_name'] = $arrayParams['strUser'];
        $arrayPeticiones['user_ip'] = $arrayParams['strUserIp'];

        /*Ejecución del metodo via WS para realizar la configuracion del SW*/
        $arrayRespuestaNw = $this->networkingScripts->callNetworkingWebService($arrayPeticiones);

        /*Asignamos */
        $strCodigo = $arrayRespuestaNw['raw']['status'];
        $arrayResponseWs = $arrayRespuestaNw['raw']['data'];
        $strMensaje = $arrayRespuestaNw['raw']['message'];

        if ($strCodigo == 200 && ($arrayResponseWs['ipv6'] && $arrayResponseWs['vlan']))
        {
            $strDetalleHistorial = 'Se ha registrado para este servicio, como parte del flujo ZeroTouch los siguientes equipos: <br><br>';

            if ($arrayCpeCliente['propiedad'] == 'TELCONET')
            {
                $strDetalleHistorial .= 'Elemento CPE con: <br>'
                    . 'Ubicación:<b>' . $arrayCpeCliente['ubicacion'] . ' </b><br>'
                    . 'Propiedad:<b>' . $arrayCpeCliente['propiedad'] . ' </b><br>'
                    . 'Serie:<b>' . $objCpeClienteEncontrado->getNumeroSerie() . ' </b><br>'
                    . 'Modelo:<b>' . $objCpeClienteEncontrado->getModelo() . ' </b><br>';
            }
            else
            {
                $strDetalleHistorial .= 'Elemento CPE con:<br>'
                    . 'Ubicación:<b>' . $arrayCpeCliente['ubicacion'] . ' </b><br>'
                    . 'Propiedad:<b>' . $arrayCpeCliente['propiedad'] . ' </b><br>'
                    . 'Serie:<b>' . $arrayCpeCliente['serie'] . ' </b><br>'
                    . 'Modelo:<b>' . $arrayCpeCliente['modelo'] . ' </b><br>';
            }

            $strDetalleHistorial .= '<br>Elemento TRANSCEIVER CLIENTE con: <br>'
                . 'Ubicación:<b>' . $arrayTransceiverCliente['ubicacion'] . ' </b><br>'
                . 'Serie:<b>' . $objTransceiverClienteEncontrado->getNumeroSerie() . ' </b><br>'
                . 'Modelo:<b>' . $objTransceiverClienteEncontrado->getModelo() . ' </b><br>';

            $strDetalleHistorialNw = 'La asignación de recursos temporales fue exitosa: <br>'
                . 'Ipv6: <b>' . $arrayResponseWs['ipv6'] . ' </b><br>'
                . 'Vlan: <b>' . $arrayResponseWs['vlan'] . ' </b><br>';

            $arrayParametrosHist                            = array();
            $arrayParametrosHist["strCodEmpresa"]           = $arrayParams['intIdEmpresa'];
            $arrayParametrosHist["strUsrCreacion"]          = $arrayParams['strUser'];
            $arrayParametrosHist["strIpCreacion"]           = $arrayParams['strUserIp'];
            $arrayParametrosHist["strOpcion"]               = "Seguimiento";
            $arrayParametrosHist["intIdDepartamentoOrigen"] = $arrayParams['intIdDepartamentoOrigen'];
            $arrayParametrosHist["intDetalleId"]            = $arrayParams['intIdDetalle'];
            $arrayParametrosHist["strObservacion"]          = $strDetalleHistorialNw;
            $arrayParametrosHist["strEstadoActual"]         = "Asignada";

            $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            if ($arrayCpeCliente['propiedad'] == 'TELCONET' && isset($objCpeClienteEncontrado))
            {
                /*Registramos el CPE en una característica del servicio.*/
                $this->actualizarServicioProductoCaracteristica(
                    array(
                        'objServicio' => $objInfoServicio,
                        'objProducto' => $objInfoServicio->getProductoId(),
                        'strCaracteristica' => 'CPE_TEMP',
                        'strValor' => json_encode(array(
                            "descripcion" => $objCpeClienteEncontrado->getDescripcion(),
                            'tipoElemento' => $arrayCpeCliente['tipoElemento'],
                            'modelo' => $objCpeClienteEncontrado->getModelo(),
                            'serie' => $objCpeClienteEncontrado->getNumeroSerie(),
                            'estado' => $objCpeClienteEncontrado->getEstado(),
                            'mac' => $objCpeClienteEncontrado->getMac(),
                            'ubicacion' => $arrayCpeCliente['ubicacion'],
                            'propiedad' => $arrayCpeCliente['propiedad']
                        )),
                        'strUsrCreacion' => $arrayParams['strUser']
                    ));
            }
            else
            {
                /*Registramos el CPE en una característica del servicio.*/
                $this->actualizarServicioProductoCaracteristica(
                    array(
                        'objServicio' => $objInfoServicio,
                        'objProducto' => $objInfoServicio->getProductoId(),
                        'strCaracteristica' => 'CPE_TEMP',
                        'strValor' => json_encode(array(
                            "descripcion" => $arrayCpeCliente['descripcion'] ? : "",
                            'modelo' => $arrayCpeCliente['modelo'],
                            'tipoElemento' => $arrayCpeCliente['tipoElemento'],
                            'serie' => $arrayCpeCliente['serie'],
                            'mac' => $arrayCpeCliente['mac'],
                            'estado' => $arrayCpeCliente['estado'] ? : "",
                            'ubicacion' => $arrayCpeCliente['ubicacion'],
                            'propiedad' => $arrayCpeCliente['propiedad']
                        )),
                        'strUsrCreacion' => $arrayParams['strUser']
                    ));
            }

            /*Creamouna variable para almacenar la informacion de los transceivers.*/
            $arrayTransceiverInfo =
                array(
                    'transceiverCliente' => array(
                        "descripcion" => $objTransceiverClienteEncontrado->getDescripcion(),
                        'modelo' => $objTransceiverClienteEncontrado->getModelo(),
                        'tipoElemento' => $arrayTransceiverCliente['tipoElemento'],
                        'serie' => $objTransceiverClienteEncontrado->getNumeroSerie(),
                        'estado' => $objTransceiverClienteEncontrado->getEstado(),
                        'mac' => $objTransceiverClienteEncontrado->getMac(),
                        'ubicacion' => $arrayTransceiverCliente['ubicacion'],
                        'propiedad' => $arrayTransceiverCliente['propiedad'] ? : ""
                    ));

            /*Validamos que este definidas las variables del TRANSCEIVER NODO.*/
            if(isset($objTransceiverNodoEncontrado) && isset($arrayTransceiverNodo))
            {
                $strDetalleHistorial .= '<br>El elemento TRANSCEIVER NODO con: <br>'
                    . 'Ubicación:<b>' . $arrayTransceiverNodo['ubicacion'] . ' </b><br>'
                    . 'Serie:<b>' . $objTransceiverNodoEncontrado->getNumeroSerie() . ' </b><br>'
                    . 'Modelo:<b>' . $objTransceiverNodoEncontrado->getModelo() . ' </b><br>';

                $objTransceiverNodoEncontrado->setEstado('IN');
                $objTransceiverNodoEncontrado->setFeUltMod(new \DateTime('now'));
                $objTransceiverNodoEncontrado->setUsrUltMod($arrayParams['strUser']);
                $objTransceiverNodoEncontrado->setSaldo(0);
                $this->emNaf->persist($objTransceiverNodoEncontrado);

                $arrayTransceiverInfo['transceiverNodo'] =
                    array(
                        "descripcion" => $objTransceiverNodoEncontrado->getDescripcion(),
                        'tipoElemento' => $arrayTransceiverNodo['tipoElemento'],
                        'modelo' => $objTransceiverNodoEncontrado->getModelo(),
                        'serie' => $objTransceiverNodoEncontrado->getNumeroSerie(),
                        'estado' => $objTransceiverNodoEncontrado->getEstado(),
                        'mac' => $objTransceiverNodoEncontrado->getMac(),
                        'ubicacion' => $arrayTransceiverNodo['ubicacion'],
                        'propiedad' => $arrayTransceiverCliente['propiedad'] ? : ""
                    );
            }

            /*Registramos el TRANSCEIVER en una característica del servicio.*/
            $this->actualizarServicioProductoCaracteristica(
                array(
                    'objServicio' => $objInfoServicio,
                    'objProducto' => $objInfoServicio->getProductoId(),
                    'strCaracteristica' => 'TRANSCEIVER_TEMP',
                    'strValor' => json_encode($arrayTransceiverInfo),
                    'strUsrCreacion' => $arrayParams['strUser']
                ));

            /*Guardamos la IpV6 temporal en una característica del servicio.*/
            $this->actualizarServicioProductoCaracteristica(
                array(
                    'objServicio' => $objInfoServicio,
                    'objProducto' => $objInfoServicio->getProductoId(),
                    'strCaracteristica' => 'IPV6_TEMP',
                    'strValor' => $arrayResponseWs['ipv6'],
                    'strUsrCreacion' => $arrayParams['strUser']
                ));

            /*Guardamos la VLAN temporal en una característica del servicio.*/
            $this->actualizarServicioProductoCaracteristica(
                array(
                    'objServicio' => $objInfoServicio,
                    'objProducto' => $objInfoServicio->getProductoId(),
                    'strCaracteristica' => 'VLAN_TEMP',
                    'strValor' => $arrayResponseWs['vlan'],
                    'strUsrCreacion' => $arrayParams['strUser']
                ));

            $strDetalleHistorialNw = 'La asignación de recursos temporales fue exitosa: <br>'
                . 'Ipv6: <b>' . $arrayResponseWs['ipv6'] . ' </b><br>'
                . 'Vlan: <b>' . $arrayResponseWs['vlan'] . ' </b><br>';

            /*Actualizamos los estados.*/
            if (isset($objCpeClienteEncontrado))
            {
                $objCpeClienteEncontrado->setEstado('IN');
                $this->emNaf->persist($objCpeClienteEncontrado);
            }
            /*Actualizamos los estados.*/
            $objTransceiverClienteEncontrado->setEstado('IN');
            $this->emNaf->persist($objTransceiverClienteEncontrado);
            $this->emNaf->flush();

            /*Insertamos en el historial del servicio los elementos.*/
            $this->insertarHistorialServicio(array(
                'intIdServicio' => $objInfoServicio->getid(),
                'strObservacion' => $strDetalleHistorial,
                'strUsuarioCreacion' => $arrayParams['strUser']
            ));

            /*Insertamos en el historial del servicio los elementos.*/
            $this->insertarHistorialServicio(array(
                'intIdServicio' => $objInfoServicio->getid(),
                'strObservacion' => $strDetalleHistorialNw,
                'strUsuarioCreacion' => $arrayParams['strUser']
            ));

        } 
        else
        {
            /*Actualizamos la caracterisica FLUJO_ZEROTOUCH para que el personal de L2 pueda retomar..*/
            $this->actualizarServicioProductoCaracteristica(
                array(
                    'objServicio' => $objInfoServicio,
                    'objProducto' => $objInfoServicio->getProductoId(),
                    'strCaracteristica' => 'FLUJO_ZEROTOUCH',
                    'strValor' => 'N',
                    'strUsrCreacion' => $arrayParams['strUser']
                ));
            $arrayRespuestaNw['raw']['status'] = 500;
            $arrayRespuestaNw["raw"]['message'] = !empty($arrayRespuestaNw["raw"]['message']) ?
                $arrayRespuestaNw["raw"]['message'] . ", flujo ZeroTouch deshabilitado." :
                "Ha ocurrido un error en la asignación de recursos temporales, flujo ZeroTouch deshabilitado.";
            $arrayRespuestaNw['raw']['data']['configuraPuertoVlan'] = false;
            $arrayRespuestaNw['raw']['data']['ipv6'] = null;
            $arrayRespuestaNw['raw']['data']['vlan'] = null;
        }


        return $arrayRespuestaNw['raw'];
    }

    /**
     * Método encargado de realizar la prueba de conectividad con Networking para el flujo de ZeroTouch.
     *
     * @param $arrayParams
     * @return string[]
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 06-04-2021 | Version Inicial
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 05-10-2021 | Se realiza una mejora para poder controlar y distinguir mejor cuando el WS de NW tiene alguna falla
     *                       o no nos responde correctamente con la bandera de SSH.
     *
     */
    public function zeroTouchNwTest($arrayParams)
    {
        $arrayPeticiones = array();
        $arrayPeticiones['op']          = 'putPruebasConectividad';
        $arrayPeticiones['user_name']   = $arrayParams['strUser'];
        $arrayPeticiones['user_ip']     = $arrayParams['strUserIp'];
        $arrayPeticiones['data']        = array(
            'ipv6'=>''
        );
        $boolConexion = false;

        /*Obtenemos el servicio.*/
        $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParams['intIdServicio']);

        $strIpv6 = $this->getCaracteristicaServicio($objInfoServicio, 'IPV6_TEMP');
        $strNwTest = $this->getCaracteristicaServicio($objInfoServicio, 'NW_TEST');

        if (empty($strIpv6))
        {
            throw new \Exception('No se pudo obtener la direccion Ipv6.');
        }
        if ($strNwTest && $strNwTest == 'S')
        {
            throw new \Exception('Las pruebas de conectividad ya fueron realizadas exitosamente.', 200);
        }

        /*Ejecucion del metodo via WS para realizar la configuracion del SW*/

        $arrayPeticiones['data']['ipv6'] = $strIpv6;

        $arrayRequestToken = json_encode(
            array(
                "username" => $this->apiNetworkingUser,
                "password" => $this->apiNetworkingPass
            ));

        $strTokenUrl              = $this->apiNetworkingUrl . '/token';
        $arrayOptions             = array(CURLOPT_SSL_VERIFYPEER => false, CURLOPT_TIMEOUT => $this->intWsPotenciaServicio);
        $arrayResponseToken       = $this->serviceRestClient->postJSON($strTokenUrl, $arrayRequestToken, $arrayOptions);
        $arrayResponseTokenJson   = json_decode($arrayResponseToken['result'],true);

        if (empty($arrayResponseTokenJson['status']) && empty($arrayResponseTokenJson['token']))
        {
            throw new \Exception('No se pudo obtener el token de autenticación.');
        }

        $strToken               = "Bearer " . $arrayResponseTokenJson['token'];
        $arrayRequesWsNw        = json_encode($arrayPeticiones);
        $strUrl                 = $this->apiNetworkingUrl . '/network/pingMD';
        $arrayRespuestaNw       = $this->serviceRestClient->postJSONToken($strUrl, $arrayRequesWsNw, $strToken, $arrayOptions);
        $arrayResponseResult    = json_decode($arrayRespuestaNw['result'],true);

        $boolConexion = !($arrayResponseResult['data']['ssh']['conexion'] == 'false');

        $this->actualizarServicioProductoCaracteristica(
            array(
                'objServicio' => $objInfoServicio,
                'objProducto' => $objInfoServicio->getProductoId(),
                'strCaracteristica' => 'NW_TEST',
                'strValor' => ($arrayResponseResult['status'] == 200 && $boolConexion) ? 'S' : 'N',
                'strUsrCreacion' => $arrayParams['strUser']
            ));

        if ($arrayResponseResult['status'] == 200 && $boolConexion)
        {
            /*Insertamos en el historial del servicio los elementos.*/
            $this->insertarHistorialServicio(array(
                'intIdServicio' => $objInfoServicio->getid(),
                'strObservacion' => 'Prueba de conectividad ZeroTouch Exitosa.' ,
                'strUsuarioCreacion' => $arrayParams['strUser']
            ));

            /*Actualizamos la caracterisica FLUJO_ZEROTOUCH para que el personal de L2 pueda retomar..*/
            $this->actualizarServicioProductoCaracteristica(
                array(
                    'objServicio' => $objInfoServicio,
                    'objProducto' => $objInfoServicio->getProductoId(),
                    'strCaracteristica' => 'FLUJO_ZEROTOUCH',
                    'strValor' => 'F',
                    'strUsrCreacion' => $arrayParams['strUser']
                ));

            /*TODO: HACER REFACTOR DE ESTE BLOQUE QUE YA EXISTE EN getConfirWsNwSoporte*/
            $strNombreParametro = 'MENSAJE_USUARIO_VALIDACION_ENLACES';
            $strEstado          = 'Activo';

            $arrayParamMens          = array(
                'nombreParametro' => $strNombreParametro,
                'estado'          => $strEstado
            );

            $entityParametroCab         =  $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                ->findOneByNombreParametro($arrayParamMens);


            $arrayParametrosDet  = array(
                'estado'      => $strEstado,
                'parametroId' => $entityParametroCab->getId()
            );

            $arrayParametroDetWSEstado =  $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findBy($arrayParametrosDet);

            foreach ($arrayParametroDetWSEstado as $item)
            {
                if($item->getDescripcion() =='VALIDACION_ENLACE_ERROR')
                {
                    $strConfirmacionError  = $item->getValor1();
                }
                else if ($item->getDescripcion() =='VALIDACION_ENLACE_ERROR_UMBRALES')
                {
                    $strUmbralesError  = $item->getValor1();
                }
            }

            $arrayParamEnlacesFibra     = array(
                'nombreParametro' => 'FO',
                'descripcion'     => 'UMBRALES PARA VALIDAR LA  POTENCIA DE ENLACES',
                'estado'          => "Activo"
            );

            $entityParametroCab         = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                ->findOneByNombreParametro($arrayParamEnlacesFibra);

            if( isset($entityParametroCab) && !empty($entityParametroCab) )
            {
                $intIdCabEnlaceFibra  = $entityParametroCab->getId();

                $arrayDetPaqRecibido        = array(
                    'estado'      => "Activo",
                    'parametroId' => $intIdCabEnlaceFibra,
                    'descripcion' => "MIN_PORCENTAJE_PAQUETES_RECIBIDO"
                );

                $arrayDetLatAvg             = array(
                    'estado'      => "Activo",
                    'parametroId' => $intIdCabEnlaceFibra,
                    'descripcion' => "MAX_LATENCIA_MEDIA"
                );

                $objDetPaqRecibido          = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->findOneBy($arrayDetPaqRecibido);
                $objDetLatAvg               = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->findOneBy($arrayDetLatAvg);
                if(isset($objDetPaqRecibido))
                {
                    $strParametroPaquetesRecibir     = $objDetPaqRecibido->getValor1() ? $objDetPaqRecibido->getValor1() : '';
                }
                if(isset($objDetLatAvg))
                {
                    $strParametroLatenciaPromedio    = $objDetLatAvg->getValor1() ? $objDetLatAvg->getValor1() : '';
                }

            }

            $intParametroLatAvg         = isset($strParametroLatenciaPromedio) ? : null;
            $intParametroMinPaq         = isset($strParametroPaquetesRecibir) ? : null;

            if(isset($arrayResponseResult['data']['ping']['latency']) && isset($arrayResponseResult['data']['ping']['latency']['avg']))
            {
                $intPaquetes                    = $arrayResponseResult['data']['ping']['packages'];
                $intLatencia                    = $arrayResponseResult['data']['ping']['latency'];
                $intPaqRecibidos                = $intPaquetes['received'];
                $intPaqEnviados                 = $intPaquetes['sent'];
                $intLatenciaAvg                 = $intLatencia['avg'];
                $intLatenciaMax                 = $intLatencia['max'];
                $arrayResponseResult['data']['ping']['latency']['unidad'] = "ms";

                if(is_numeric($intPaqRecibidos) && is_numeric($intPaqEnviados) &&
                    is_numeric($intLatenciaAvg)  && is_numeric($intLatenciaMax))
                {
                    $intResult          = ($intPaqRecibidos * 100) / $intPaqEnviados;

                    if($intLatenciaAvg  <= $intParametroLatAvg &&
                        $intResult       >= $intParametroMinPaq)
                    {
                        $arrayResponseResult['data']["paquetesEnviados"]= $arrayResponseResult['data']['ping']['packages']['sent'];
                        $arrayResponseResult['data']["paquetesRecibidos"]= $arrayResponseResult['data']['ping']['packages']['received'];
                        $arrayResponseResult['data']['resultadoPruebas'] = true;
                        $arrayResponseResult['data']['sshConexion'] = true;
                        $arrayResponseResult['message'] = "El enlace fue validado correctamente.";
                    }
                    else
                    {
                        $arrayResponseResult['message'] = isset($strUmbralesError) ? : 'ERROR EN LOS UMBRALES.';
                    }
                }
                else
                {
                    $arrayResponseResult['message']   = isset($strConfirmacionError) ? : 'ERROR AL CONFIRMAR EL ENLACE.';
                }
            }

        }
        else
        {
            $arrayResponseResult['data']["paquetesEnviados"]= 0;
            $arrayResponseResult['data']["paquetesRecibidos"]= 0;
            $arrayResponseResult['data']['sshConexion'] = isset($arrayResponseResult['data']['ssh']['conexion']) ?
                                                          $arrayResponseResult['data']['ssh']['conexion'] :
                                                          false;

            if (isset($arrayResponseResult['data']['ssh']['conexion']) && !$arrayResponseResult['data']['ssh']['conexion'])
            {

                $arrayResponseResult['message'] = "Ha ocurrido un error al realizar las pruebas de acceso SSH, por favor revisar el enlace.";
            }
            else
            {
                $arrayResponseResult['data']['resultadoPruebas'] = false;
            }

        }

        unset($arrayResponseResult['data']['ping']);
        unset($arrayResponseResult['data']['ssh']);

        return $arrayResponseResult;
    }

    /*
     * Función encargada de insertar el historial del servicio.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 07-04-2021 | Version Inicial
     *
     * @params $arrayParametros [
     *                              intIdServicio      : Id del servicio.
     *                              strObservacion     : Observación del historial.
     *                              strUsuarioCreacion : Usuario creación.
     *                              strIpCreacion      : Ip creación.
     *                              intIdMotivo        : Id del motivo.
     *                              strAccion          : Acción
     *                          ]
     *
     * @return $arrayRespuesta
     *
     */
    public function insertarHistorialServicio($arrayParametros)
    {
        $intIdServicio      = $arrayParametros['intIdServicio'];
        $strObservacion     = $arrayParametros['strObservacion'];
        $strUsuarioCreacion = $arrayParametros['strUsuarioCreacion'];
        $strIpCreacion      = !empty($arrayParametros['strIpCreacion']) ? $arrayParametros['strIpCreacion'] : '127.0.0.1';
        $intIdMotivo        = $arrayParametros['intIdMotivo'];
        $strAccion          = $arrayParametros['strAccion'];

        $this->emComercial->beginTransaction();

        try
        {
            if (!$intIdServicio)
            {
                throw new \Exception('Error : Id del Servicio Nulo');
            }

            $objInfoServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                ->find($intIdServicio);

            if (!is_object($objInfoServicio))
            {
                throw new \Exception('Error : Id del Servicio no encontrado ['.$intIdServicio.']');
            }

            $objServicioHist = new InfoServicioHistorial();
            $objServicioHist->setServicioId($objInfoServicio);
            $objServicioHist->setObservacion($strObservacion);
            $objServicioHist->setIpCreacion($strIpCreacion);
            $objServicioHist->setFeCreacion(new \DateTime('now'));
            $objServicioHist->setUsrCreacion($strUsuarioCreacion);
            $objServicioHist->setEstado($objInfoServicio->getEstado());
            $objServicioHist->setMotivoId($intIdMotivo);
            $objServicioHist->setAccion($strAccion);
            $this->emComercial->persist($objServicioHist);
            $this->emComercial->flush();
            $this->emComercial->commit();

            $arrayRespuesta = array ('status'  => 'ok',
                'message' => 'Historial del servicio insertado');
        }
        catch (\Exception $objException)
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
                $this->emComercial->getConnection()->close();
            }

            $strMessage = 'Error al insertar el historial del servicio.';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = $objException->getMessage();
            }

            $arrayRespuesta = array ('status'  => 'error',
                'message' => $strMessage);
        }
        return $arrayRespuesta;
    }

    /*
     * Función encargada de reasignar la tarea como parte del flujo ZeroTouch.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 18-05-2021 | Version Inicial
     *
     * @params $arrayParametros [
*                               emComercial
     *                          emGeneral
     *                          emComunicacion
     *                          objSoporteService
     *                          intIdEmpresa
     *                          strPrefijoEmpresa
     *                          strUsrCreacion
     *                          ipCreacion
     *                          intIdServicio
     *                          intIdDetalle
     *                          ]
     *
     * @return $arrayResponse
     *
     */
    public function reasignarTareaZeroTouch($arrayParams)
    {
        $arrayResponse = array('status' => '', 'message'=>'');

        try
        {
            $emCom = isset($arrayParams['emComercial']) ? $arrayParams['emComercial'] : null;
            $emGen = isset($arrayParams['emGeneral']) ? $arrayParams['emGeneral'] : null;
            $emComu = isset($arrayParams['emComunicacion']) ? $arrayParams['emComunicacion'] : null;
            $objSoporteService = isset($arrayParams['objSoporteService']) ? $arrayParams['objSoporteService'] : null;
            $intIdEmpresa = isset($arrayParams['intIdEmpresa']) ? $arrayParams['intIdEmpresa'] : null;
            $strPrefijoEmpresa = isset($arrayParams['strPrefijoEmpresa']) ? $arrayParams['strPrefijoEmpresa'] : null;
            $strUsrCreacion = isset($arrayParams['strUsrCreacion']) ? $arrayParams['strUsrCreacion'] : null;
            $strIpCreacion = isset($arrayParams['ipCreacion']) ? $arrayParams['ipCreacion'] : null;
            $intIdServicio = isset($arrayParams['intIdServicio']) ? $arrayParams['intIdServicio'] : null;
            $intIdDetalle = isset($arrayParams['intIdDetalle']) ? $arrayParams['intIdDetalle'] : null;

            if ($emCom && $emGen && $emComu && $objSoporteService && $intIdEmpresa && $strPrefijoEmpresa &&
                $strUsrCreacion && $strIpCreacion && $intIdServicio && $intIdDetalle)
            {
                /*Obtenemos el objeto del servicio.*/
                $objInfoServicio = $emCom->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

                if (empty($objInfoServicio) && !is_object($objInfoServicio))
                {
                    throw new \Exception('No se pudo obtener el servicio para reasignación de tarea.');
                }

                /*Obtenemos el objeto del punto.*/
                $objPunto = is_object($objInfoServicio->getPuntoId()) ? $objInfoServicio->getPuntoId() : null;

                if (empty($objPunto) && !is_object($objPunto))
                {
                    throw new \Exception('No se pudo obtener el punto del servicio para reasignación de tarea.');
                }

                /*Obtenemos la region del punto.*/
                $strRegion = $objPunto->getSectorId()->getParroquiaId()->getCantonId()->getRegion();

                if (empty($objPunto))
                {
                    throw new \Exception('No se pudo obtener la region del servicio para reasignación de tarea.');
                }

                $arrayIpccl2Asignado = !is_null($this->getCaracteristicaServicio($objInfoServicio, 'IPCCL2_ASIGNADO')) ?
                                     json_decode($this->getCaracteristicaServicio($objInfoServicio, 'IPCCL2_ASIGNADO'),
                                         true) :
                                     null;

                /*Obtenemos el parámetro desde la base.*/
                $arrayAdmiParametroUm = $emGen->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('UM_ZERO_TOUCH',
                        'TECNICO',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '10');

                if (empty($arrayIpccl2Asignado))
                {
                    throw new \Exception('No se pudo obtener usuario encargado para reasignación de tarea.');
                }

                $objPersonaEMpresaRol = $emCom->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                                              ->find($arrayIpccl2Asignado['idPersonaEmpresaRol']);

                if (empty($objPersonaEMpresaRol) && !is_object($objPersonaEMpresaRol))
                {
                    throw new \Exception('No se pudo obtener empresa rol para reasignación de tarea.');
                }

                $objDocumentoRelacion = $emComu->getRepository('schemaBundle:InfoDocumentoRelacion')
                    ->findOneBy(array(
                        'detalleId' => $intIdDetalle
                    ));

                if (empty($objDocumentoRelacion) && !is_object($objDocumentoRelacion))
                {
                    throw new \Exception('No se pudo obtener documento relación para reasignación de tarea.');
                }

                /*Generamos objeto de parametros para el servicio.*/
                $arrayParametros = array(
                    'idEmpresa' => $intIdEmpresa,
                    'prefijoEmpresa' => $strPrefijoEmpresa,
                    'id_detalle' => $objDocumentoRelacion->getDetalleId(),
                    'motivo' => 'Se finalizó el flujo ZeroTouch, se reasigna la tarea automáticamente.',
                    'departamento_asignado' => $objPersonaEMpresaRol->getDepartamentoId(),
                    'empleado_asignado' => $objPersonaEMpresaRol->getPersonaId()->getId() . '@@' . $objPersonaEMpresaRol->getId(),
                    'tipo_asignado' => 'EMPLEADO',
                    'id_departamento' => $objPersonaEMpresaRol->getDepartamentoId(),
                    'user' => $strUsrCreacion,
                    'clientIp' => $strIpCreacion
                );

                /*Realizamos la reasignacion de la tarea.*/
                $arrayResultado = $objSoporteService->reasignarTarea($arrayParametros);

                if (!$arrayResultado['success'])
                {
                    /*Obtenemos el parámetro desde la base.*/
                    $arrayAdmiParametroUm = $emGen->getRepository('schemaBundle:AdmiParametroDet')
                        ->getOne('UM_ZERO_TOUCH',
                            'TECNICO',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '10');

                    /*Validamos que haya llegado el parametro mediante un ternario.*/
                    $arrayDepartamentosUm = !empty($arrayAdmiParametroUm) ?
                        json_decode($arrayAdmiParametroUm['valor2'], true) :
                        null;

                    if (empty($arrayDepartamentosUm))
                    {
                        throw new \Exception('No se pudo obtener los parámetros para reasignación de tarea.');
                    }

                    $objAdmiDepartamento = $emGen->getRepository('schemaBundle:AdmiDepartamento')
                        ->find($arrayDepartamentosUm['FO']['idDepartamento']);

                    if (empty($objAdmiDepartamento) && !is_object($objAdmiDepartamento))
                    {
                        throw new \Exception('No se pudo obtener el departamento para reasignación de tarea.');
                    }

                    $arrayEmpleadoJefe = $emCom->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                        ->getResultadoJefeDepartamentoEmpresa(
                            $objAdmiDepartamento->getId(),
                            $intIdEmpresa,
                            $strRegion);

                    if (empty($arrayEmpleadoJefe))
                    {
                        $arrayEmpleadoJefe = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                            ->getResultadoJefeDepartamentoEmpresa(
                                $arrayDepartamentosUm['FO']['idDepartamento'],
                                $intIdEmpresa,
                                "");
                    }

                    if (empty($arrayEmpleadoJefe) && !is_array($arrayEmpleadoJefe))
                    {
                        throw new \Exception('No se pudo obtener usuario encargado para reasignación de tarea.');
                    }

                    $objPersonaEMpresaRol = $emCom->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                        ->find($arrayEmpleadoJefe['personaEmpresaRolId']);

                    if (empty($objPersonaEMpresaRol) && !is_object($objPersonaEMpresaRol))
                    {
                        throw new \Exception('No se pudo obtener empresa rol para reasignación de tarea.');
                    }

                    $objDocumentoRelacion = $emComu->getRepository('schemaBundle:InfoDocumentoRelacion')
                        ->findOneBy(array(
                            'detalleId' => $intIdDetalle
                        ));

                    if (empty($objDocumentoRelacion) && !is_object($objDocumentoRelacion))
                    {
                        throw new \Exception('No se pudo obtener documento relación para reasignación de tarea.');
                    }

                    /*Generamos objeto de parametros para el servicio.*/
                    $arrayParametros = array(
                        'idEmpresa' => $intIdEmpresa,
                        'prefijoEmpresa' => $strPrefijoEmpresa,
                        'id_detalle' => $objDocumentoRelacion->getDetalleId(),
                        'motivo' => 'Se finalizo el flujo ZeroTouch reasigna automáticamente.',
                        'departamento_asignado' => $objPersonaEMpresaRol->getDepartamentoId(),
                        'empleado_asignado' => $objPersonaEMpresaRol->getPersonaId()->getId() . '@@' . $objPersonaEMpresaRol->getId(),
                        'tipo_asignado' => 'EMPLEADO',
                        'id_departamento' => $objPersonaEMpresaRol->getDepartamentoId(),
                        'user' => $strUsrCreacion,
                        'clientIp' => $strIpCreacion
                    );

                    /*Realizamos la reasignacion de la tarea.*/
                    $arrayResultado2 = $objSoporteService->reasignarTarea($arrayParametros);

                    if (!$arrayResultado2['success'])
                    {
                        throw new \Exception($arrayResultado2['mensaje']);
                    }
                }

                if ($arrayResultado2['success']) 
                {
                    $arrayResponse['message'] = 'La tarea fue reasignada correctamente a: '
                    . $arrayIpccl2Asignado['nombreCompleto']
                    . " luego de finalizar exitosamente el flujo ZeroTouch.";
                }
                elseif (isset($arrayResultado2['success']) && $arrayResultado2['success']) 
                {
                    $arrayResponse['message'] = 'La tarea fue reasignada correctamente a: '
                    . $arrayEmpleadoJefe['NOMBRE_COMPLETO']
                    . "luego del flujo ZeroTouch";
                }

                $arrayResponse['status'] = 'OK';
                

                /*Insertamos en el historial del servicio los elementos.*/
                $this->insertarHistorialServicio(array(
                    'intIdServicio' => $objInfoServicio->getid(),
                    'strObservacion' => $arrayResponse['message'],
                    'strUsuarioCreacion' => $strUsrCreacion
                ));

                return $arrayResponse;
            }
        }
        catch (\Exception $e)
        {
            $arrayResponse['status'] = 'ERROR';
            $arrayResponse['message'] = $e->getMessage() ? : 'La tarea no pudo ser reasignada.';

            if (isset($objInfoServicio))
            {
                /*Insertamos en el historial del servicio los elementos.*/
                $this->insertarHistorialServicio(array(
                    'intIdServicio' => $objInfoServicio->getid(),
                    'strObservacion' => $arrayResponse['message'],
                    'strUsuarioCreacion' => $strUsrCreacion
                ));
            }

            return $arrayResponse;
        }

    }

    /**
     * Función que obtiene la vlan y vrf del servicio por producto adicionales SAFECITY en la red GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 06-08-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 05-09-2021 - Se valida los recursos de red para servicios WIFI
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 21-03-2022 - Se obtiene la vrf del cliente de un servicio activo para los servicios de Camara Safe City.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 15-06-2022 - Se agrega el id de la empresa para obtener la vlan del cliente para Camara Safe City.
     *
     * @param Object $arrayParametros [
     *                                   'objServicio'            => objeto del servicio
     *                                   'strCodEmpresa'          => id de empresa
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                   'status'                 => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                   'mensaje'                => mensaje de la operación o de error,
     *                                   'objDetalleElementoVlan' => objeto detalle elemento vlan,
     *                                   'objPersonaEmpCaractVrf' => objeto persona empresa rol característica vrf
     *                               ]
     */
    public function getVlanVrfPorServicio($arrayParametros)
    {
        try
        {
            $objServicio        = $arrayParametros['objServicio'];
            $strCodEmpresa      = $arrayParametros['strCodEmpresa'];
            $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array( "servicioId" => $objServicio->getId()));
            //obtengo el elemento pe
            $objElementoPe  = $this->getPeByOlt(array("intIdElemento" => $objServicioTecnico->getElementoId(),
                                                      "intIdServicio" => $objServicio->getId()));
            if(!is_object($objElementoPe))
            {
                throw new \Exception("No se ha podido obtener el elemento pe, por favor notificar a Sistemas.");
            }
            //obtengo la vrf del producto
            $strNombreVrf        = "";
            $strNombreVrfAdmin   = "";
            $arrayParVrfProducto = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VRF PRODUCTO',
                                                                                                    $objServicio->getProductoId()->getId(),
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParVrfProducto) && !empty($arrayParVrfProducto)
               && isset($arrayParVrfProducto['valor2']) && !empty($arrayParVrfProducto['valor2']))
            {
                $strNombreVrf      = $arrayParVrfProducto['valor2'];
                $strNombreVrfAdmin = $arrayParVrfProducto['valor3'];
            }
            else
            {
                throw new \Exception("No se ha podido obtener la vrf del producto ".$objServicio->getProductoId()->getDescripcionProducto().
                                     ", por favor notificar a Sistemas.");
            }
            //obtener vrf de camara
            if($objServicio->getProductoId()->getNombreTecnico() === "SAFECITYDATOS")
            {
                //verificar camara activa
                $objPersonaEmpCaractVrf = null;
                $objServCamActiva       = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                ->findOneBy(array("puntoId"    => $objServicio->getPuntoId()->getId(),
                                                                  "productoId" => $objServicio->getProductoId()->getId(),
                                                                  "estado"     => array("Asignada","Activo")));
                if(is_object($objServCamActiva))
                {
                    $objSerProCaracVrf = $this->getServicioProductoCaracteristica($objServCamActiva,"VRF",$objServCamActiva->getProductoId());
                    if(!is_object($objSerProCaracVrf))
                    {
                        throw new \Exception("No se ha podido obtener la vrf del producto ".
                                             $objServicio->getProductoId()->getDescripcionProducto().
                                             " con relación una cámara activa, por favor notificar a Sistemas.");
                    }
                    $objPersonaEmpCaractVrf = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                            ->find($objSerProCaracVrf->getValor());
                    //verificar vrf cliente
                    if(!is_object($objPersonaEmpCaractVrf))
                    {
                        throw new \Exception("No se ha podido obtener la vrf del producto ".
                                             $objServicio->getProductoId()->getDescripcionProducto().
                                             " con relación una cámara con recursos asignados, por favor notificar a Sistemas.");
                    }
                }
                else
                {
                    //obtener caracteristica de vrf de video
                    $objCaractVrfVideo = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array("descripcionCaracteristica" => "VRF_VIDEO_SAFECITY",
                                                                          "estado"                    => "Activo"));
                    if(!is_object($objCaractVrfVideo))
                    {
                        throw new \Exception("No se ha podido obtener la característica VRF VIDEO SAFECITY, ".
                                             "por favor notificar a Sistemas.");
                    }
                    $arrayPerEmpCaractVrfVideo = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                            ->findBy(array("caracteristicaId"    => $objCaractVrfVideo->getId(),
                                           "personaEmpresaRolId" => $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId(),
                                           "estado"              => "Activo"));
                    if(!empty($arrayPerEmpCaractVrfVideo) && count($arrayPerEmpCaractVrfVideo) == 1)
                    {
                        $objPersonaEmpCaractVrf = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                        ->findOneBy(array("id"      => $arrayPerEmpCaractVrfVideo[0]->getValor(),
                                                                          "estado"  => "Activo"));
                    }
                    //verificar vrf cliente
                    if(!is_object($objPersonaEmpCaractVrf))
                    {
                        throw new \Exception("No se ha podido obtener la vrf del producto ".
                                             $objServicio->getProductoId()->getDescripcionProducto().
                                             " con relación al cliente, por favor notificar a Sistemas.");
                    }
                }
            }
            else
            {
                $objCaractVrf = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array("descripcionCaracteristica" => "VRF",
                                                                      "estado"                    => "Activo"));
                if(!is_object($objCaractVrf))
                {
                    throw new \Exception("No se ha podido obtener la característica VRF, por favor notificar a Sistemas.");
                }
                $objPersonaEmpCaractVrf = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                    ->findOneBy(array("caracteristicaId"    => $objCaractVrf->getId(),
                                                                      "valor"               => $strNombreVrf,
                                                                      "estado"              => "Activo"));
                if(!is_object($objPersonaEmpCaractVrf))
                {
                    throw new \Exception("No se ha podido obtener la vrf del producto ".$objServicio->getProductoId()->getDescripcionProducto().
                                         ", por favor notificar a Sistemas.");
                }
            }
            //se obtiene la vrf de admin para servicios WIFI
            $objPersonaEmpCaractVrfAdmin = null;
            if($objServicio->getProductoId()->getNombreTecnico() === "SAFECITYWIFI")
            {
                if(empty($strNombreVrfAdmin))
                {
                    throw new \Exception("No se ha podido obtener la vrf admin del producto ".$objServicio->getProductoId()->getDescripcionProducto().
                                         ", por favor notificar a Sistemas.");
                }
                $objPersonaEmpCaractVrfAdmin = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                    ->findOneBy(array("caracteristicaId"    => $objCaractVrf->getId(),
                                                                      "valor"               => $strNombreVrfAdmin,
                                                                      "estado"              => "Activo"));
                if(!is_object($objPersonaEmpCaractVrfAdmin))
                {
                    throw new \Exception("No se ha podido obtener la vrf admin del producto ".$objServicio->getProductoId()->getDescripcionProducto().
                                         ", por favor notificar a Sistemas.");
                }
            }

            //obtengo la vlan
            if($objServicio->getProductoId()->getNombreTecnico() === "SAFECITYWIFI")
            {
                $strTipoVlan          = "SSID";
                //obtengo el detalle de la vlan
                $strDetalleNombreVlan = "";
                $arrayParVlanProducto = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'PARAMETRO VLAN PARA SERVICIOS ADICIONALES SAFECITY',
                                                                                                '',
                                                                                                '',
                                                                                                $objServicio->getProductoId()->getId(),
                                                                                                $strTipoVlan,
                                                                                                '');
                if(isset($arrayParVlanProducto) && !empty($arrayParVlanProducto)
                   && isset($arrayParVlanProducto['valor1']) && !empty($arrayParVlanProducto['valor1']))
                {
                    $strDetalleNombreVlan = $arrayParVlanProducto['valor1'];
                }
                else
                {
                    throw new \Exception("No se ha podido obtener la vlan del producto ".$objServicio->getProductoId()->getDescripcionProducto().
                                         ", por favor notificar a Sistemas.");
                }
                //obtengo la vlan
                $objDetalleEleVlan  = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                            ->findONeBy(array("elementoId"    => $objServicioTecnico->getElementoId(),
                                                                              "detalleNombre" => $strDetalleNombreVlan,
                                                                              "estado"        => "Activo"));
                if(!is_object($objDetalleEleVlan))
                {
                    throw new \Exception("No se ha podido obtener la vlan del elemento, por favor notificar a Sistemas.");
                }
            }
            else
            {
                $objDetalleEleVlan = null;
                //verificar camara activa
                $objServCamActiva  = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                ->findOneBy(array("puntoId"    => $objServicio->getPuntoId()->getId(),
                                                                  "productoId" => $objServicio->getProductoId()->getId(),
                                                                  "estado"     => array("Asignada","Activo")));
                if(is_object($objServCamActiva))
                {
                    //obtengo la vlan
                    $objSerProCaracVlan = $this->getServicioProductoCaracteristica($objServCamActiva,"VLAN",$objServCamActiva->getProductoId());
                    if(!is_object($objSerProCaracVlan))
                    {
                        throw new \Exception("No se ha podido obtener la vlan del elemento con relación una cámara activa, ".
                                             "por favor notificar a Sistemas.");
                    }
                    $objDetalleEleVlan = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                            ->find($objSerProCaracVlan->getValor());
                    //verificar vlan elemento
                    if(!is_object($objDetalleEleVlan))
                    {
                        throw new \Exception("No se ha podido obtener la vlan del elemento con relación una cámara ".
                                             "con recursos asignados, por favor notificar a Sistemas.");
                    }
                }
                else
                {
                    $objCaractTipoRed = $this->getServicioProductoCaracteristica($objServicio,"TIPO_RED",$objServicio->getProductoId());
                    if(!is_object($objCaractTipoRed))
                    {
                        throw new \Exception("No se ha podido obtener el tipo de red del servicio, ".
                                             "por favor notificar a Sistemas.");
                    }
                    //obtener vlan por cliente
                    $arrayParametrosVlan = array('intIdPersonaEmpresaRol' => $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId(),
                                                 'strEmpresaCod'          => $strCodEmpresa,
                                                 'strCaractVlan'          => 'VLAN',
                                                 'strNombre'              => $objElementoPe->getNombreElemento(),
                                                 'strTipoRed'             => $objCaractTipoRed->getValor());
                                                 
                    $arrayResultadoVlan  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                            ->getVlansCliente($arrayParametrosVlan);

                    if(!empty($arrayResultadoVlan) && isset($arrayResultadoVlan["total"])
                       && isset($arrayResultadoVlan["data"]) && !empty($arrayResultadoVlan["data"])
                       && count($arrayResultadoVlan["data"]) == 1)
                    {
                        //obtener vlan
                        $objPerEmpCaractVlanGpon = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                            ->find($arrayResultadoVlan["data"][0]['id']);
                        if(is_object($objPerEmpCaractVlanGpon))
                        {
                            $objDetalleEleVlan   = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                            ->find($objPerEmpCaractVlanGpon->getValor());
                        }
                    }
                    //verificar vlan elemento
                    if(!is_object($objDetalleEleVlan))
                    {
                        throw new \Exception("No se ha podido obtener la vlan del elemento con relación al cliente, ".
                                             "por favor notificar a Sistemas.");
                    }
                }
            }
            //obtengo la vlan admin para servicios WIFI
            $objDetalleEleVlanAdmin = null;
            if($objServicio->getProductoId()->getNombreTecnico() === "SAFECITYWIFI")
            {
                $arrayParVlanProducto = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'PARAMETRO VLAN PARA SERVICIOS ADICIONALES SAFECITY',
                                                                                                '',
                                                                                                '',
                                                                                                $objServicio->getProductoId()->getId(),
                                                                                                'ADMIN',
                                                                                                '');
                if(isset($arrayParVlanProducto) && !empty($arrayParVlanProducto)
                   && isset($arrayParVlanProducto['valor1']) && !empty($arrayParVlanProducto['valor1']))
                {
                    $strDetalleNombreVlan = $arrayParVlanProducto['valor1'];
                }
                else
                {
                    throw new \Exception("No se ha podido obtener la vlan admin del producto ".
                                         $objServicio->getProductoId()->getDescripcionProducto().
                                         ", por favor notificar a Sistemas.");
                }
                //obtengo la vlan
                $objDetalleEleVlanAdmin = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                            ->findONeBy(array("elementoId"    => $objServicioTecnico->getElementoId(),
                                                                              "detalleNombre" => $strDetalleNombreVlan,
                                                                              "estado"        => "Activo"));
                if(!is_object($objDetalleEleVlanAdmin))
                {
                    throw new \Exception("No se ha podido obtener la vlan admin del elemento, por favor notificar a Sistemas.");
                }
            }

            //seteo resultado
            $arrayResultado = array(
                'status'                      => "OK",
                'mensaje'                     => "OK",
                'objDetalleElementoVlan'      => $objDetalleEleVlan,
                'objDetalleElementoVlanAdmin' => $objDetalleEleVlanAdmin,
                'objPersonaEmpCaractVrf'      => $objPersonaEmpCaractVrf,
                'objPersonaEmpCaractVrfAdmin' => $objPersonaEmpCaractVrfAdmin
            );
        }
        catch (\Exception $ex)
        {
            $arrayResultado = array(
                'status'                      => "ERROR",
                'mensaje'                     => $ex->getMessage(),
                'objDetalleElementoVlan'      => null,
                'objDetalleElementoVlanAdmin' => null,
                'objPersonaEmpCaractVrf'      => null,
                'objPersonaEmpCaractVrfAdmin' => null
            );
        }
        return $arrayResultado;
    }

    /**
     * Funcion que sirve para obtener la marca del cpe
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 15-07-2021
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 05-08-2021 
     * 
     * @param array $arrayParametros
     * @return array $arrayRespuesta
     */
    public function obtenerMarcaCpe($arrayParametros)
    {
        $objServicioTecnico = $arrayParametros['objServicioTecnico'];
        $strCpe             = $arrayParametros['strCpe'];
        $this->emInfraestructura->getConnection()->beginTransaction();
        
        try 
        {
            $arrayParametrosCpe = array('interfaceElementoConectorId'   => $objServicioTecnico->getInterfaceElementoClienteId(),
                                        'tipoElemento'                  => "CPE");
                            
            $arrayRespuestaCpe = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                         ->getElementoClienteByTipoElemento($arrayParametrosCpe);
                            
            if($arrayRespuestaCpe['msg'] == "FOUND")
            {
                $objElementoCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                           ->find($arrayRespuestaCpe['idElemento']);
            }
            else //Si no encuentre conectado el CPE busca el ROUTER ( nodo WIFI )
            {                      
                $arrayParametrosCpe = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoClienteId(),
                                            'tipoElemento'               => "ROUTER");
                            
                $arrayRespuestaCpe = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                             ->getElementoClienteByTipoElemento($arrayParametrosCpe);

                if($arrayRespuestaCpe['msg'] == "FOUND")
                {
                    $objElementoCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                               ->find($arrayRespuestaCpe['idElemento']);
                }
                else //Si no encuentra CPE va a buscar el ROUTER o CPE directo ( MIGRADOS )
                {
                    if($objServicioTecnico->getElementoClienteId())
                    {
                        $objElementoCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                ->find($objServicioTecnico->getElementoClienteId());    
                    }
                }
            }
                                
            if(is_object($objElementoCpe) && !empty($objElementoCpe))
            {
                $strMarcaElemento = $objElementoCpe->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                $strNombreModelo  = $objElementoCpe->getModeloElementoId()->getNombreModeloElemento();
                if ($strCpe == $strMarcaElemento)
                {
                    $arrayRespuesta['result']          = true;
                    $arrayRespuesta['mensaje']         = "OK";
                    $arrayRespuesta['strMarca']        = $strMarcaElemento;
                    $arrayRespuesta['strNombreModelo'] = $strNombreModelo;
                }
                else
                {
                    $arrayRespuesta['result']          = false;
                    $arrayRespuesta['mensaje']         = "Servicio debe tener equipo CPE FORTIGATE. Realice cambio de equipo para crear servicio";
                    $arrayRespuesta['strMarca']        = $strMarcaElemento;
                    $arrayRespuesta['strNombreModelo'] = $strNombreModelo;
                }
            }
            else
            {
                $arrayRespuesta['result']   = false;
                $arrayRespuesta['mensaje']  = "No existe Cpe para el servicio Activo.";
            }
            
        } 
        catch (\Exception $ex) 
        {
            $arrayRespuesta['result']   = false;
            $arrayRespuesta['mensaje']  = "Error interno. Por favor comunicarse con SOPORTE SISTEMAS para la revisión.";
            $this->utilService->insertError('Telcos+', 'actualizarEstado', 
            $ex->getMessage(), $arrayParametros['strUserCreacion'], $arrayParametros['strClientIp']
            );
        }
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que sirve para obtener la serie del cpe para servicios de TN
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 23-07-2021
     * @param $objServicio
     */
    public function getElementoCpeSerieTn($objServicio)
    {
        $objElementoCpe = null;
        
        //obtener el cpe
        $arrayParametrosInterface["strDetalleValor"]       = $objServicio->getId();
        
        $arrayInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleInterface')
                                                          ->getIdInterfaceElemento($arrayParametrosInterface);

        $intIdInterfaceElemento = null;
            
        if(!empty($arrayInterfaceElemento[0]["idInterfaceElemento"]))
        {
            $intIdInterfaceElemento = $arrayInterfaceElemento[0]["idInterfaceElemento"];
        }
        
        if($intIdInterfaceElemento)
        {
            $arrayParametrosInterface["intInterfaceElementoId"] = $intIdInterfaceElemento;
            $arrayIdElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoDetalleInterface')
                                                              ->getSerieCpe($arrayParametrosInterface);
            
            $intIdElemento = null;
            
            if(!empty($arrayIdElemento[0]["intIdElemento"]))
            {
                $intIdElemento = $arrayIdElemento[0]["intIdElemento"];
            }
        }
        
        if ($intIdElemento)
        {
            $objElementoCpe = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                    ->find($intIdElemento);
        }
        return $objElementoCpe;
    }

    /**
     * Funcion que sirve para actualizar las características del Olt por proceso masivo
     * y se ejecuta el java en segundo plano
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 10-09-2021
     * 
     * @author Alberto Arias <frias@telconet.ec>
     * @version 1.1 30-03-2022 Se modificó el metodo para realizar el consumo a WS
     */
    public function getActualizarCaracteristicasOlt($arrayParametros)
    {
        $objElementoOlt         = $arrayParametros['objElementoOlt'];
        $strUsrCreacion         = $arrayParametros['usrCreacion'];
        $strIpCreacion          = $arrayParametros['ipCreacion'];
        $serviceMiddleware      = $this->container->get('tecnico.RedAccesoMiddleware');

        $strIpElementoOlt       = "";
        $strLineProfileId       = "";
        $strNombreElementoOlt   = $objElementoOlt->getNombreElemento();
        $strModeloElemento      = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
        $objIpElementoOlt       = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
        ->findOneBy(array("elementoId" => $objElementoOlt->getId()));
        if(is_object($objIpElementoOlt))
        {
            $strIpElementoOlt   = $objIpElementoOlt->getIp();
        }

        //EJECUTAR WS CONSULTAR_LINE_PROFILE_LC
        $arrayDatosOLT          = array(
                                          'nombre_olt'       => $strNombreElementoOlt,
                                          'ip_olt'           => $strIpElementoOlt,
                                          'modelo_olt'       => $strModeloElemento,
                                        );
        $arrayDatosMiddleware   = array(
                                          'datos'                 => $arrayDatosOLT,
                                          'opcion'                => "CONSULTAR_LINE_PROFILE_LC",
                                          'ejecutaComando'        => $this->ejecutaComando,
                                          'usrCreacion'           => $strUsrCreacion,
                                          'ipCreacion'            => $strIpCreacion,
                                       );
        $arrayRespLineProfile   = $serviceMiddleware->middleware(json_encode($arrayDatosMiddleware));
        if ($arrayRespLineProfile["status"] !== "OK") 
        {
            return $arrayRespLineProfile;
        }

        //EJECUTAR WS CONSULTAR_SERVICE_PROFILE_ID_LC
        $arrayDatosOLT          = array(
                                          'nombre_olt'       => $strNombreElementoOlt,
                                          'ip_olt'           => $strIpElementoOlt,
                                          'modelo_olt'       => $strModeloElemento,
                                        );
        $arrayDatosMiddleware   = array(
                                          'datos'                 => $arrayDatosOLT,
                                          'opcion'                => "CONSULTAR_SERVICE_PROFILE_ID_LC",
                                          'ejecutaComando'        => $this->ejecutaComando,
                                          'usrCreacion'           => $strUsrCreacion,
                                          'ipCreacion'            => $strIpCreacion,
                                       );
        $arrayRespServiceProfile   = $serviceMiddleware->middleware(json_encode($arrayDatosMiddleware));
        if ($arrayRespServiceProfile["status"] !== "OK") 
        {
            return $arrayRespServiceProfile;
        }

        //EJECUTAR WS CONSULTAR_GEMPORT_LC
        $arrayLineProfile   = $arrayRespLineProfile["data"];
        if(is_array($arrayLineProfile) && !empty($arrayLineProfile))
        {
            foreach($arrayLineProfile as $objInfoLineProfile)
            {
                if(is_array($objInfoLineProfile))
                {
                    $strLineProfileId       = $objInfoLineProfile["lineProfileId"];
                    $arrayDatosOLT          = array(
                                          'nombre_olt'       => $strNombreElementoOlt,
                                          'ip_olt'           => $strIpElementoOlt,
                                          'modelo_olt'       => $strModeloElemento,
                                          'line_profile_id'  => $strLineProfileId,
                                        );
                    $arrayDatosMiddleware   = array(
                                          'datos'                 => $arrayDatosOLT,
                                          'opcion'                => "CONSULTAR_GEMPORT_LC",
                                          'ejecutaComando'        => $this->ejecutaComando,
                                          'usrCreacion'           => $strUsrCreacion,
                                          'ipCreacion'            => $strIpCreacion,
                                       );
                    $arrayRespGemPort   = $serviceMiddleware->middleware(json_encode($arrayDatosMiddleware));
                }
            }
        }

        //EJECUTAR WS CONSULTAR_TRAFFIC_LC
        $arrayDatosOLT          = array(
                                          'nombre_olt'       => $strNombreElementoOlt,
                                          'ip_olt'           => $strIpElementoOlt,
                                          'modelo_olt'       => $strModeloElemento,
                                        );
        $arrayDatosMiddleware   = array(
                                          'datos'                 => $arrayDatosOLT,
                                          'opcion'                => "CONSULTAR_TRAFFIC_LC",
                                          'ejecutaComando'        => $this->ejecutaComando,
                                          'usrCreacion'           => $strUsrCreacion,
                                          'ipCreacion'            => $strIpCreacion,
                                       );
        $arrayRespTraffic   = $serviceMiddleware->middleware(json_encode($arrayDatosMiddleware));
        return $arrayRespTraffic;
    }

    /**
     * Funcion que sirve para obtener la marca del cpe
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 29-07-2021
     * 
     * 
     * @param array $arrayParametros
     * @return array $arrayRespuesta
     */
    public function obtenerCpeMarca($arrayParametros)
    {
        $objServicioTecnico = $arrayParametros['objServicioTecnico'];
        $this->emInfraestructura->getConnection()->beginTransaction();
        
        try 
        {
            $arrayParametrosCpe = array('interfaceElementoConectorId'   => $objServicioTecnico->getInterfaceElementoClienteId(),
                                        'tipoElemento'                  => "CPE");
                            
            $arrayRespuestaCpe = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                         ->getElementoClienteByTipoElemento($arrayParametrosCpe);
                            
            if($arrayRespuestaCpe['msg'] == "FOUND")
            {
                $objElementoCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                           ->find($arrayRespuestaCpe['idElemento']);
            }
            else //Si no encuentre conectado el CPE busca el ROUTER ( nodo WIFI )
            {                      
                $arrayParametrosCpe = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoClienteId(),
                                            'tipoElemento'               => "ROUTER");
                            
                $arrayRespuestaCpe = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                             ->getElementoClienteByTipoElemento($arrayParametrosCpe);

                if($arrayRespuestaCpe['msg'] == "FOUND")
                {
                    $objElementoCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                               ->find($arrayRespuestaCpe['idElemento']);
                }
                else //Si no encuentra CPE va a buscar el ROUTER o CPE directo ( MIGRADOS )
                {
                    if($objServicioTecnico->getElementoClienteId())
                    {
                        $objElementoCpe  = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                ->find($objServicioTecnico->getElementoClienteId());    
                    }
                }
            }
                                
            if(is_object($objElementoCpe) && !empty($objElementoCpe))
            {
                $strMarcaElemento = $objElementoCpe->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                $arrayRespuesta['marca']  = $strMarcaElemento;
            }
        } 
        catch (\Exception $ex) 
        {
            $arrayRespuesta['result']   = false;
            $arrayRespuesta['mensaje']  = "Error interno. Por favor comunicarse con SOPORTE SISTEMAS para la revisión.";
            $this->utilService->insertError('Telcos+', 'actualizarEstado', 
            $ex->getMessage(), $arrayParametros['strUserCreacion'], $arrayParametros['strClientIp']
            );
        }
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que sirve para obtener la marca del cpe
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 05-08-2021
     * 
     * 
     * @param array $arrayParametros
     * @return array $arrayRespuesta
     */
    public function getVerificaCpe($arrayParametrosVerifica)
    {
        $intIdPunto     = $arrayParametrosVerifica['intIdPunto'];
        $strEmpresaCod  = $arrayParametrosVerifica['intIdEmpresa'];
        $strUsrCreacion = $arrayParametrosVerifica['strUsrCreacion'];
        $strIpCreacion  = $arrayParametrosVerifica['strIpCreacion'];
        $boolResult     = false;
        
        $objProductoInterMpls      = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet MPLS',
                                                                                            'empresaCod'          => $strEmpresaCod));
                    
        $objProductoDatoMpls       = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'L3MPLS',
                                                                                            'empresaCod'          => $strEmpresaCod));
        
        $objProductoInterDedicado  = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet Dedicado',
                                                                                            'nombreTecnico'       => 'INTERNET',
                                                                                            'empresaCod'          => $strEmpresaCod));
        if((is_object($objProductoInterMpls) && !empty($objProductoInterMpls)) || 
           (is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls)) ||
           (is_object($objProductoInterDedicado) && !empty($objProductoInterDedicado)))
        {
            if(is_object($objProductoInterMpls) && !empty($objProductoInterMpls))
            {
                $objServicioInternetMpls = $this->emComercial->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                array('puntoId'    => $intIdPunto,
                                                                                      'productoId' => $objProductoInterMpls->getId(),
                                                                                      'estado'     => 'Activo'));
            }
                        
            if(is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls))
            {
                $objServicioDatosMpls = $this->emComercial->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                array('puntoId'    => $intIdPunto,
                                                                                      'productoId' => $objProductoDatoMpls->getId(),
                                                                                      'estado'     => 'Activo'));
            }
            
            if(is_object($objProductoInterDedicado) && !empty($objProductoInterDedicado))
            {
                $objServicioInternetDedicado = $this->emComercial->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                array('puntoId'    => $intIdPunto,
                                                                                      'productoId' => $objProductoInterDedicado->getId(),
                                                                                      'estado'     => 'Activo'));
            }
            if((is_object($objServicioInternetMpls) && !empty($objServicioInternetMpls)) ||
               (is_object($objServicioDatosMpls) && !empty($objServicioDatosMpls)) ||
               (is_object($objServicioInternetDedicado) && !empty($objServicioInternetDedicado)))
            {
                $arrayParametrosCpe['strCpe']          = $strCpe;
                $arrayParametrosCpe['strUserCreacion'] = $strUsrCreacion;
                $arrayParametrosCpe['strClientIp']     = $strIpCreacion;
                if(is_object($objServicioInternetMpls) && !empty($objServicioInternetMpls))
                {
                    $objServTecnicoMpls = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array('servicioId' => $objServicioInternetMpls->getId()));
                    
                    $arrayParametrosCpe['objServicioTecnico'] = $objServTecnicoMpls;
                    
                    $arrayRespuestaMarca  = $this->obtenerMarcaCpe($arrayParametrosCpe);
                    $strMarcaCpe          = $arrayRespuestaMarca['strMarca'];
                }
                else
                {
                    if(is_object($objServicioDatosMpls) && !empty($objServicioDatosMpls))
                    {
                        $objServTecnicoMpls = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneBy(array('servicioId' => $objServicioDatosMpls->getId()));
                        
                        $arrayParametrosCpe['objServicioTecnico'] = $objServTecnicoMpls;
                        
                        $arrayRespuestaMarca  = $this->obtenerMarcaCpe($arrayParametrosCpe);
                        $strMarcaCpe          = $arrayRespuestaMarca['strMarca'];
                    }
                    else
                    {
                        if(is_object($objServicioInternetDedicado) && !empty($objServicioInternetDedicado))
                        {
                            $objServTecnicoMpls = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneBy(array('servicioId' => $objServicioInternetDedicado->getId()));

                            $arrayParametrosCpe['objServicioTecnico'] = $objServTecnicoMpls;

                            $arrayRespuestaMarca  = $this->obtenerMarcaCpe($arrayParametrosCpe);
                            $strMarcaCpe          = $arrayRespuestaMarca['strMarca'];
                        }
                    }
                }
            }
        }
        return $strMarcaCpe;
    }
    
    /**
     * Funcion que cuenta las ips fijas adicionales del servicio Internet Small Business, obtiene en un arreglo la ip adicional 
     * con su mac de los servicios de un punto
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 10-11-2021 
     * 
     * @param array $arrayParametros
     * @return $arrayRespuesta          [ip_fijas_activas, valores]
     *
     */
    public function getInfoIpsFijaPuntoIsb($arrayParametros)
    {
        //$arrayServicios, $arrayProdIp, $servicio, $estadoServicio, $estadoIp, $objProductoInternet
        $arrayServicios                  = $arrayParametros['arrayServicios'];
        $arrayProdIp                     = $arrayParametros['arrayProdIp'];
        $objServicio                     = $arrayParametros['servicio'];
        $objProductoInternet             = $arrayParametros['objProductoInternet'];
        $strEstadoIp                     = $arrayParametros['estadoIp'];
        $arrayEstadosServiciosPermitidos = $arrayParametros['arrayEstadosServiciosPermitidos'];
        $intCont                         = 0;
        $intFlag                         = 0;
        $strMac                          = '';
        $strScope                        = '';
        $strIp                           = '';
        $objProducto                     = null;
        $arrayValores                    = array();
        $objScope                        = null;
        
        try
        {
            for($intI=0; $intI<count($arrayServicios); $intI++)
            {
                $strScope = '';
                $objScope = null;
                $objServicioPunto = $arrayServicios[$intI];
               
                if( in_array($objServicioPunto->getEstado(), $arrayEstadosServiciosPermitidos) &&
                    $objServicioPunto->getId() != $objServicio->getId())
                {
                    $objProducto = null;
                    if($objServicioPunto->getPlanId())
                    {
                        $objPlanCab = $this->emComercial->getRepository('schemaBundle:InfoPlanCab')
                                ->find($objServicioPunto->getPlanId()->getId());
                        $objPlanDet = $this->emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                     ->findBy(array("planId"=>$objPlanCab->getId()));

                        for($intJ=0;$intJ<count($objPlanDet);$intJ++)
                        {
                            for($intK=0;$intK<count($arrayProdIp);$intK++)
                            {
                                if($objPlanDet[$intJ]->getProductoId() == $arrayProdIp[$intK]->getId())
                                {
                                    $intFlag     = 1;
                                    $objProducto = $arrayProdIp[$intK];
                                    break;
                                }
                            }
                            if($intFlag==1)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        $objProductoServicioPunto = $objServicioPunto->getProductoId();
                        $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $objProductoServicioPunto->getId(),
                                                                 'strDescCaracteristica' => 'IP WAN',
                                                                 'strEstado'             => 'Activo' );
                        $strExisteIpWan = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
                        if ($strExisteIpWan === 'N')
                        {
                            for($intJ=0;$intJ<count($arrayProdIp);$intJ++)
                            {
                                if($objProductoServicioPunto->getId() == $arrayProdIp[$intJ]->getId())
                                {
                                    $intFlag     = 1;
                                    $objProducto = $arrayProdIp[$intJ];
                                    break;
                                }
                            }
                        }
                    }

                    if($intFlag == 1)
                    {
                        $intCont++;

                        //obtener ip
                        $objIp  = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                          ->findOneBy(array('servicioId'    => $objServicioPunto->getId(),
                                                                            'estado'        => $strEstadoIp));

                        if($objIp)
                        {
                            $strIp = $objIp->getIp();
                        }

                        //obtener mac
                        $objMac = $this->getServicioProductoCaracteristica($objServicioPunto, 'MAC', $objProductoInternet);
                        if(!$objMac)
                        {
                            $objMac = $this->getServicioProductoCaracteristica($objServicioPunto, 'MAC WIFI', $objProductoInternet);
                        }

                        if(is_object($objMac))
                        {
                            $strMac = $objMac->getValor();
                        }

                        if ($strEstadoIp == 'Reservada')
                        {
                            $arrayParametrosProdCaract = array();
                            $arrayParametrosProdCaract['strEstadoSpc'] = $strEstadoIp;
                            $objScope = $this->getServicioProductoCaracteristica($objServicioPunto,
                                                                                 "SCOPE",
                                                                                 $objProducto,
                                                                                 $arrayParametrosProdCaract);
                            if(is_object($objScope))
                            {
                                $strScope = $objScope->getValor();
                            }
                        }
                        else
                        {
                            $objScope = $this->getServicioProductoCaracteristica($objServicioPunto, 'SCOPE', $objProducto);
                            if(is_object($objScope))
                            {
                                $strScope = $objScope->getValor();
                            }
                        }

                        $arrayValores[] = array('mac'           => $strMac,
                                                'ip'            => $strIp,
                                                'id_servicio'   => $objServicioPunto->getId(),
                                                'scope'         => $strScope,
                                                'intIdSpcScope' => is_object($objScope)?$objScope->getId():0,
                                                'intIdSpcMac'   => is_object($objMac)?$objMac->getId():'',
                                                'productoId'    => $objProductoServicioPunto->getId()
                                               );
                    }

                }

                $intFlag = 0;
            }

            $arrayRespuesta = array('ip_fijas_activas' => $intCont, 'valores'=> $arrayValores);
        }
        catch(\Exception $e)
        {
            error_log($e->getTraceAsString());
        }

        return $arrayRespuesta;
    }

    /**
     * Función que obtiene el div html de un producto característica relacionado con otro producto característica
     * del mismo producto para el ingreso de la orden de servicio
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 17-09-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 22-08-2022 - Se agrega mejora para permitir el ingreso de multiples características por producto característica.
     *
     * @param Array $arrayParametros [
     *                          'intIdProductoCaracteristica' => id del producto característica que contiene la relación
     *                          'strEmpresaCod'               => id de la empresa
     *                          'intContador'                 => contador de la característica
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'intContador'       => contador de la característica
     *                          'strPresentarDiv'   => div html característica
     *                  ]
     */
    public function getDivHtmlProdCaractRelacionado($arrayParametros)
    {
        try
        {
            $intContador            = $arrayParametros['intContador'];
            $intIdCaractPrincipal   = $arrayParametros['intContador'];
            $strPresentarDiv        = "</td>";
            $intContTd              = 1;
            $arrayParRelacionCaract = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('PRODUCTO_CARACTERISTICA_RELACION_PRODUCTO',
                                                                    'COMERCIAL',
                                                                    '',
                                                                    '',
                                                                    $arrayParametros['intIdProductoCaracteristica'],
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $arrayParametros['strEmpresaCod']);
            foreach($arrayParRelacionCaract as $arrayRelacionCaract)
            {
                if($intContTd==0)
                {
                    $strPresentarDiv .= "<tr class='tr-prod-caract-relacion' name='caracts'>";
                }
                $intIdProdCaractRel = $arrayRelacionCaract['valor2'];
                $intIdProductoRel   = isset($arrayRelacionCaract['valor3']) && intval($arrayRelacionCaract['valor3']) > 0 ?
                                      $arrayRelacionCaract['valor3'] : null;
                $objProdCaracRel    = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')->find($intIdProdCaractRel);
                if(is_object($objProdCaracRel))
                {
                    //seteo la clase para la relacion
                    $strClassCaractRelacion       = "class='relacion_caracteristicas_$intIdCaractPrincipal' ";
                    $strTdClassCaractRelacion     = "class='td_relacion_caracteristicas_$intIdCaractPrincipal'";
                    //aumentar contador
                    $intContador++;
                    //setear campo de la característica adicional
                    $strDescripcionCaracteristica = $objProdCaracRel->getCaracteristicaId()->getDescripcionCaracteristica();
                    $strCampoHabilitado           = "";
                    $strValorCaracteristica       = '';
                    $strPresentarDiv .= "<td $strTdClassCaractRelacion style='display:none;'>"
                                        ."<label id='lb_caracteristicas_$intContador'>".$strDescripcionCaracteristica.":</label> </td>"
                                        ."<td $strTdClassCaractRelacion style='display:none;'>";
                    //obtener valor por default
                    $strNombreParametro   = 'PROD_'.$strDescripcionCaracteristica;
                    $strDefaultValue      = "";
                    $arrayDetDefaultValue = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne('PROD_CARACTERISTICA_SELECCIONE_VALUE',
                                                                            'COMERCIAL',
                                                                            '',
                                                                            '',
                                                                            $strNombreParametro,
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $arrayParametros['strEmpresaCod']);
                    if(isset($arrayDetDefaultValue) && !empty($arrayDetDefaultValue)
                       && isset($arrayDetDefaultValue['valor2']) && !empty($arrayDetDefaultValue['valor2']))
                    {
                        $strDefaultValue = $arrayDetDefaultValue['valor2'];
                    }
                    //validar tipo ingreso
                    if($objProdCaracRel->getCaracteristicaId()->getTipoIngreso() == 'S')
                    {
                        $strOpciones        = '';
                        $arrayParametrosDet = array();
                        //obtengo la cabecera de parámetros
                        $objParametroCab = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                         ->findOneBy(array('descripcion'=>$strNombreParametro,'estado'=>'Activo'));
                        if(is_object($objParametroCab))
                        {
                            $arrayOrderBy       = array();
                            $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->findBy(array('parametroId'=>$objParametroCab,'estado'=>'Activo'),$arrayOrderBy);
                        }
                        //validar si la característica es una lista
                        foreach( $arrayParametrosDet as $objParametro )
                        {
                            $strOpciones  .= '<option value="'.$objParametro->getValor1().'">'.$objParametro->getValor1().'</option>';
                        }
                        $strPresentarDiv  .= "<select style='margin-top:10px;' align='left' disabled name='caracteristicas_$intContador' "
                                            .$strClassCaractRelacion."id='caracteristicas_$intContador' "
                                            .$strCampoHabilitado.">".$strOpciones."</select></td>";
                    }
                    elseif($objProdCaracRel->getCaracteristicaId()->getTipoIngreso() == 'N')
                    {
                        //verificar si tiene relacion con producto precio
                        if(!empty($intIdProductoRel))
                        {
                            $objProductoCamara = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProductoRel);
                            if(is_object($objProductoCamara))
                            {
                                $arrayPrecioCamara      = explode("PRECIO=", $objProductoCamara->getFuncionPrecio());
                                $strValorCaracteristica = is_array($arrayPrecioCamara) && isset($arrayPrecioCamara[1])
                                                          && is_numeric($arrayPrecioCamara[1]) ? $arrayPrecioCamara[1] : 0;
                            }
                        }
                        //verificar valor
                        if(!empty($strValorCaracteristica))
                        {
                            $strPresentarDiv .= "<input style='margin-top:10px;' type='text' disabled value='".$strValorCaracteristica."' "
                                .$strCampoHabilitado."name='caracteristicas_$intContador' ".$strClassCaractRelacion
                                ."id='caracteristicas_$intContador' onkeypress='return validaNumerosConDecimales(event, this);'/></td>";
                        }
                        else
                        {
                            $strPresentarDiv .= "<input style='margin-top:10px;' type='text' disabled value='".$strDefaultValue."' "
                                .$strCampoHabilitado."name='caracteristicas_$intContador' "
                                .$strClassCaractRelacion."id='caracteristicas_$intContador'/></td>";
                        }
                    }
                    else
                    {
                        $strPresentarDiv .= "<input style='margin-top:10px;' type='text' disabled value='".$strDefaultValue."' "
                            .$strCampoHabilitado."name='caracteristicas_$intContador' "
                            .$strClassCaractRelacion."id='caracteristicas_$intContador'/></td>";
                    }
                    $strPresentarDiv .= "<input type='hidden' value='[".$strDescripcionCaracteristica."]' name='caracteristica_nombre_".$intContador
                                        ."' id='caracteristica_nombre_".$intContador."'/><input type='hidden' value='".$objProdCaracRel->getId()
                                        ."' name='producto_caracteristica_".$intContador."' id='producto_caracteristica_".$intContador."'/>";
                }
                else
                {
                    $strPresentarDiv .= "<td></td><td></td>";
                }
                $intContTd++;
                if($intContTd==2)
                {
                    $strPresentarDiv .= "</tr>";
                    $intContTd = 0;
                }
            }
            //verificar
            if(isset($arrayParRelacionCaract) && !empty($arrayParRelacionCaract))
            {
                if($intContTd==1)
                {
                    $strPresentarDiv .= "<td></td><td></td></tr>";
                }
                $arrayResultado = array(
                    "intContador"     => $intContador,
                    "strPresentarDiv" => $strPresentarDiv
                );
            }
            else
            {
                $arrayResultado = array(
                    "intContador"     => $arrayParametros['intContador'],
                    "strPresentarDiv" => "</td><td></td><td></td></tr>"
                );
            }
        }
        catch (\Exception $ex)
        {
            $arrayResultado = array(
                "intContador"     => $arrayParametros['intContador'],
                "strPresentarDiv" => "</td><td></td><td></td></tr>"
            );
        }
        return $arrayResultado;
    }

    /**
     * Función que valida la disponibilidad de puerto para los servicios GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 21-09-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 01-08-2022 - Se agrega arreglo en el filtro de parámetro para obtener el servicio por producto.
     *
     * @param Array $arrayParametros [
     *                          'objPunto'      => objeto del punto
     *                          'strCodEmpresa' => id empresa
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                          'disponible'   => SI o NO
     *                          'objServicio'  => objeto servicio
     *                  ]
     */
    public function validarPuertoDisponibleOntGponMpls($arrayParametros)
    {
        $objPunto      = $arrayParametros['objPunto'];
        $strCodEmpresa = $arrayParametros['strCodEmpresa'];
        try
        {
            //validar objeto punto
            if(!is_object($objPunto))
            {
                throw new \Exception("No es válido el objeto del punto para validar disponibilidad de puertos del Ont, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtener servicio SW POE
            $arrayParametros['strParametro'] = "PRODUCTO_ADICIONAL_SW_POE";
            $arrayResultServicioSwPoe = $this->getServicioGponPorProducto($arrayParametros);
            if($arrayResultServicioSwPoe['status'] != "OK")
            {
                throw new \Exception($arrayResultServicioSwPoe['mensaje']);
            }
            //obtengo el servicio sw poe
            $objServicioSwPoe = $arrayResultServicioSwPoe['objServicio'];
            if(!is_object($objServicioSwPoe))
            {
                //seteo variable de total de servicios adicionales
                $intTotalSerAdd = 0;
                //obtener servicio ONT
                $arrayParametros['arrayParametro'][] = "PRODUCTO_PRINCIPAL";
                $arrayParametros['arrayParametro'][] = "PRODUCTO_INTERNET_VPNoGPON";
                $arrayResultServicioOnt = $this->getServicioGponPorProducto($arrayParametros);
                if($arrayResultServicioOnt['status'] != "OK")
                {
                    throw new \Exception($arrayResultServicioOnt['mensaje']);
                }
                //obtengo el servicio
                $objServicio = $arrayResultServicioOnt['objServicio'];
                if(!is_object($objServicio))
                {
                    throw new \Exception("No se encontró el servicio principal del ONT en el punto, por favor notificar a Sistemas.");
                }
                //obtener la cantidad de puerto disponible por default del ONT
                $arrayDatosMaxPuerto = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                     'COMERCIAL',
                                                     '',
                                                     '',
                                                     'PUERTO_DISPONIBLE_DEFAULT_ONT',
                                                     '',
                                                     $objServicio->getProductoId()->getId(),
                                                     '',
                                                     '',
                                                     $strCodEmpresa);
                if(!isset($arrayDatosMaxPuerto) || empty($arrayDatosMaxPuerto) || !isset($arrayDatosMaxPuerto['valor2'])
                    || empty($arrayDatosMaxPuerto['valor2']))
                {
                    throw new \Exception("No se encontró la cantidad de puerto disponible por default del ONT, por favor notificar a Sistemas.");
                }
                //seteo variable de total de interfaces
                $intTotalInterfaces = $arrayDatosMaxPuerto['valor2'];
                //obtengo el servicio técnico
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                            ->findOneByServicioId($objServicio->getId());
                if(!is_object($objServicioTecnico))
                {
                    throw new \Exception("No se encontró el servicio técnico del servicio principal ONT, ".
                                         "por favor notificar a Sistemas.");
                }
                //obtener total de servicios adicionales
                $arrayParServAdd = array(
                    "intIdProducto"      => $objServicio->getProductoId()->getId(),
                    "intIdServicio"      => $objServicio->getId(),
                    "strNombreParametro" => 'CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                    "strUsoDetalles"     => 'AGREGAR_SERVICIO_ADICIONAL',
                );
                $arrayProdCaracConfProAdd  = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->getServiciosPorProdAdicionalesSafeCity($arrayParServAdd);
                if($arrayProdCaracConfProAdd['status'] == 'OK' && count($arrayProdCaracConfProAdd['result']) > 0)
                {
                    $intTotalSerAdd = count($arrayProdCaracConfProAdd['result']);
                }
                //obtengo el id elemento cliente
                $intIdElementoCliente = $objServicioTecnico->getElementoClienteId();
                if(isset($intIdElementoCliente) && !empty($intIdElementoCliente))
                {
                    $objElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdElementoCliente);
                    //verificar objecto
                    if(is_object($objElemento))
                    {
                        $arrayEstadosInter  = array("not connect","connected","reserved","Factible");
                        //obtengo las interfaces disponibles del elemento
                        $arrayInterfaces    = $this->emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                                        ->createQueryBuilder('t')
                                                                        ->where("t.elementoId = :elementoId")
                                                                        ->andWhere("t.estado IN (:estados)")
                                                                        ->setParameter('elementoId', $objElemento->getId())
                                                                        ->setParameter('estados', array_values($arrayEstadosInter))
                                                                        ->orderBy('t.id', 'ASC')
                                                                        ->getQuery()
                                                                        ->getResult();
                        $intTotalInterfaces = count($arrayInterfaces);
                    }
                }
                //valido la disponibilidad de puertos y servicios
                $strDisponible = "SI";
                if($intTotalSerAdd > $intTotalInterfaces)
                {
                    $strDisponible = "NO";
                }
                //setear respuesta
                $arrayResultado = array(
                    "status"      => "OK",
                    "mensaje"     => "OK",
                    "disponible"  => $strDisponible,
                    "objServicio" => $objServicio,
                );
            }
            else
            {
                //setear respuesta
                $arrayResultado = array(
                    "status"      => "OK",
                    "mensaje"     => "OK",
                    "disponible"  => "SI",
                    "objServicio" => null,
                );
            }
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayResultado = array(
                "status"      => "ERROR",
                "mensaje"     => $ex->getMessage(),
                "disponible"  => "NO",
                "objServicio" => null,
            );
        }
        return $arrayResultado;
    }

    /**
     * Función que obtiene los servicios GPON_MPLS por filtros de tipos de productos
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 21-09-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 01-08-2022 - Se valida con varios productos parametrizados y se retorna el objeto del producto del servicio.
     *
     * @param Array $arrayParametros [
     *                          'objPunto'      => objeto del punto
     *                          'strParametro'  => tipo de parámetro
     *                          'arrayParametro' => arreglo de tipo de parámetro
     *                          'strCodEmpresa' => id empresa
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                          'objServicio'  => objeto servicio
     *                  ]
     */
    public function getServicioGponPorProducto($arrayParametros)
    {
        $objPunto      = $arrayParametros['objPunto'];
        $strParametro  = $arrayParametros['strParametro'];
        $arrayParametro = $arrayParametros['arrayParametro'];
        $strCodEmpresa = $arrayParametros['strCodEmpresa'];
        $strUsrCreacion = isset($arrayParametros['strUsrCreacion']) ? $arrayParametros['strUsrCreacion'] : 'telcos';
        $strIpCreacion  = isset($arrayParametros['strIpCreacion']) ? $arrayParametros['strIpCreacion'] : '127.0.0.1';
        try
        {
            //setear si esta vacio el arreglo del tipo de parametro
            if(empty($arrayParametro) && !empty($strParametro))
            {
                $arrayParametro[] = $strParametro;
            }
            //verificar si esta vacio el arreglo del tipo de parametro
            if(!is_array($arrayParametro) && empty($arrayParametro))
            {
                throw new \Exception("Esta vacío el tipo de parámetro para obtener el servicio por producto GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //validar objeto punto
            if(!is_object($objPunto))
            {
                throw new \Exception("No es válido el objeto del punto para obtener el servicio por producto GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtener estados no permitidos
            $arrayEstadosNoPermitidos = array();
            $arrayParametrosEstados   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    '',
                                                                                                    'ESTADOS_SERVICIOS_NO_PERMITIDOS_FLUJO',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            foreach($arrayParametrosEstados as $arrayDetalles)
            {
                $arrayEstadosNoPermitidos[] = $arrayDetalles['valor2'];
            }
            //obtener id del producto
            $arrayIdProducto = array();
            foreach($arrayParametro as $strItemParametro)
            {
                $arrayDatosProduto = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                             'COMERCIAL',
                                                             '',
                                                             '',
                                                             $strItemParametro,
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             $strCodEmpresa);
                if(!isset($arrayDatosProduto) || empty($arrayDatosProduto) || !isset($arrayDatosProduto['valor2'])
                    || empty($arrayDatosProduto['valor2']))
                {
                    throw new \Exception("No se encontró el tipo de producto en el parámetro $strItemParametro, por favor notificar a Sistemas.");
                }
                $arrayIdProducto[] = $arrayDatosProduto['valor2'];
            }
            //arreglo del producto
            $arrayProducto = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->findBy(array("id"=>$arrayIdProducto));
            if(!isset($arrayProducto) || empty($arrayProducto))
            {
                throw new \Exception("No se encontró el producto con los tipos de parámetros, por favor notificar a Sistemas.");
            }
            //obtengo el servicio
            $objServicio = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                    ->createQueryBuilder('s')
                                                    ->where("s.puntoId = :puntoId")
                                                    ->andWhere("s.productoId IN (:productoId)")
                                                    ->andWhere("s.estado NOT IN (:estados)")
                                                    ->setParameter('puntoId', $objPunto->getId())
                                                    ->setParameter('productoId', array_values($arrayIdProducto))
                                                    ->setParameter('estados', array_values($arrayEstadosNoPermitidos))
                                                    ->orderBy('s.id', 'ASC')
                                                    ->setMaxResults(1)
                                                    ->getQuery()
                                                    ->getOneOrNullResult();
            //setear respuesta
            $arrayResultado = array(
                "status"      => "OK",
                "mensaje"     => "OK",
                "objServicio" => $objServicio,
                "objProducto" => is_object($objServicio) ? $objServicio->getProductoId() : $arrayProducto[0]
            );
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayResultado = array(
                "status"      => "ERROR",
                "mensaje"     => $ex->getMessage(),
                "objServicio" => null,
                "objProducto" => null
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->getServicioGponPorProducto',
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        return $arrayResultado;
    }

    /**
     * Función que realiza la migración de las camaras al SWITCH POE en la red GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 07-10-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 01-08-2022 - Se agrega la validación para los servicios de cámara vpn gpon.
     *
     * @param Array $arrayParametros [
     *                          'objServicio'    => objeto del servicio
     *                          'objInfoDetalle' => objeto de la info detalle
     *                          'strPrefijoEmpresa' => prefijo empresa
     *                          'strCodEmpresa'  => id empresa
     *                          'strUsrCreacion' => usuario creación
     *                          'strIpCreacion'  => ip creación
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                  ]
     */
    public function migrarServiciosSwitchPoeGponTN($arrayParametros)
    {
        $objServicio    = $arrayParametros['objServicio'];
        $objInfoDetalle = $arrayParametros['objInfoDetalle'];
        $strPrefijoEmpresa = $arrayParametros['strPrefijoEmpresa'];
        $strCodEmpresa  = $arrayParametros['strCodEmpresa'];
        $strUsrCreacion = $arrayParametros['strUsrCreacion'];
        $strIpCreacion  = $arrayParametros['strIpCreacion'];

        try
        {
            //validar objeto servicio
            if(!is_object($objServicio))
            {
                throw new \Exception("No es válido el objeto del servicio para la migración de los servicios a Switch PoE, ".
                                     "por favor notificar a Sistemas.");
            }
            $objPunto = $objServicio->getPuntoId();
            //validar objeto punto
            if(!is_object($objPunto))
            {
                throw new \Exception("No es válido el objeto del punto para la migración de los servicios a Switch PoE, ".
                                     "por favor notificar a Sistemas.");
            }
            $arrayParametros['objPunto'] = $objPunto;
            //obtener los modelos no permitidos para la migración
            $arrayModelosNoPermitidos  = array();
            $arrayParametrosModelosPtz = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                                    'INFRAESTRUCTURA',
                                                                                                    '',
                                                                                                    'MODELOS_CAMARAS_PTZ',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    $strCodEmpresa);
            foreach($arrayParametrosModelosPtz as $arrayDetalles)
            {
                $arrayModelosNoPermitidos[] = $arrayDetalles['valor1'];
            }
            //obtener estados permitidos para la migración
            $arrayEstadosPermitidos = array();
            $arrayParametrosEstados = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    '',
                                                                                                    'ESTADOS_PERMITIDOS_MIGRACION_SWITCH_POE',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    $strCodEmpresa);
            foreach($arrayParametrosEstados as $arrayDetalles)
            {
                $arrayEstadosPermitidos[] = $arrayDetalles['valor2'];
            }
            //obtener servicio ONT
            $objCaractServicioPrincipal = $this->getServicioProductoCaracteristica($objServicio,
                                                            'RELACION_SERVICIOS_GPON_SAFECITY',$objServicio->getProductoId());
            if(!is_object($objCaractServicioPrincipal))
            {
                throw new \Exception("No se ha podido obtener la característica del servicio Datos SafeCity ".
                                     "para la migración de los servicios a Switch PoE, por favor notificar a Sistemas.");
            }
            $objServicioOnt = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($objCaractServicioPrincipal->getValor());
            if(!is_object($objServicioOnt))
            {
                throw new \Exception("No se ha podido obtener el servicio principal del ONT ".
                                     "para la migración de los servicios a Switch PoE, por favor notificar a Sistemas.");
            }
            //obtener total de servicios adicionales
            $arrayParServAdd = array(
                "intIdProducto"      => $objServicioOnt->getProductoId()->getId(),
                "intIdServicio"      => $objServicioOnt->getId(),
                "strNombreParametro" => 'CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                "strUsoDetalles"     => 'AGREGAR_SERVICIO_ADICIONAL',
            );
            $arrayProdCaracConfProAdd  = $this->emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->getServiciosPorProdAdicionalesSafeCity($arrayParServAdd);
            if($arrayProdCaracConfProAdd['status'] == 'OK' && count($arrayProdCaracConfProAdd['result']) > 0)
            {
                //seteo contador
                $intContadorTareas = 0;
                foreach($arrayProdCaracConfProAdd['result'] as $arrayServicioConfProAdd)
                {
                    $objServicioAdicional = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                            ->find($arrayServicioConfProAdd['idServicio']);
                    if( is_object($objServicioAdicional) && $objServicioAdicional->getId() != $objServicio->getId()
                        && in_array($objServicioAdicional->getEstado(), $arrayEstadosPermitidos) )
                    {
                        //obtengo el servicio tecnico
                        $objServicioTecnicoAdd  = $this->emComercial->getRepository("schemaBundle:InfoServicioTecnico")
                                                                        ->findOneByServicioId($objServicioAdicional->getId());
                        if(!is_object($objServicioTecnicoAdd))
                        {
                            throw new \Exception("No se encontró el servicio técnico del servicio para la migración a Switch PoE, ".
                                                 "por favor notificar a Sistemas.");
                        }
                        //obtener elemento de la camara
                        $objElementoServicioAdd = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                            ->find($objServicioTecnicoAdd->getElementoClienteId());
                        if(!is_object($objElementoServicioAdd))
                        {
                            throw new \Exception("No se encontró el elemento del cliente para la migración a Switch PoE, ".
                                                 "por favor notificar a Sistemas.");
                        }
                        //obtener elemento de la camara
                        $objInterfaceServicioAdd = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                            ->find($objServicioTecnicoAdd->getInterfaceElementoClienteId());
                        if(!is_object($objInterfaceServicioAdd))
                        {
                            throw new \Exception("No se encontró la interface elemento del cliente para la migración a Switch PoE, ".
                                                 "por favor notificar a Sistemas.");
                        }
                        //obtengo el modelo
                        $strModeloServicio       = $objElementoServicioAdd->getModeloElementoId()->getNombreModeloElemento();
                        //se valida el producto del servicio adicional
                        $arrayParValidarProducto = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                 'INFRAESTRUCTURA',
                                                                 'PARAMETROS',
                                                                 'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                                 $objServicioAdicional->getProductoId()->getId(),
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $strCodEmpresa);
                        //validar servicio y modelo del elemento
                        if(isset($arrayParValidarProducto) && !empty($arrayParValidarProducto)
                           && ($arrayParValidarProducto["valor5"] == "CAMARA"
                                || $arrayParValidarProducto["valor5"] == "CAMARAVPN")
                           && !in_array($strModeloServicio,$arrayModelosNoPermitidos))
                        {
                            //liberar puerto
                            $arrayParametroServicio["objServicio"]       = $objServicioAdicional;
                            $arrayParametroServicio["strPrefijoEmpresa"] = $strPrefijoEmpresa;
                            $arrayParametroServicio["strCodEmpresa"]     = $strCodEmpresa;
                            $arrayParametroServicio["strUsrCreacion"]    = $strUsrCreacion;
                            $arrayParametroServicio["strIpCreacion"]     = $strIpCreacion;
                            $arrayResultadoLiberarPuerto = $this->liberarPuertoOntGponTN($arrayParametroServicio);
                            if($arrayResultadoLiberarPuerto["status"] != "OK")
                            {
                                throw new \Exception($arrayResultadoLiberarPuerto["mensaje"]);
                            }
                            //obtener el enlace de la camara
                            $objEnlaceServicio = $this->emComercial->getRepository('schemaBundle:InfoEnlace')
                                                            ->findOneBy(array("interfaceElementoFinId" => $objInterfaceServicioAdd->getId(),
                                                                              "estado"                 => "Activo"));
                            if(is_object($objEnlaceServicio))
                            {
                                //se valida el objeto al esquema infraestructura
                                $objEnlaceServicio = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                                        ->find($objEnlaceServicio->getId());
                                if(is_object($objEnlaceServicio))
                                {
                                    $objEnlaceServicio->setEstado("Eliminado");
                                    $this->emInfraestructura->persist($objEnlaceServicio);
                                    $this->emInfraestructura->flush();
                                }
                                //obtener elemento de la camara
                                $objInterfaceOnt = $objEnlaceServicio->getInterfaceElementoIniId();
                                if(is_object($objInterfaceOnt))
                                {
                                    //cambiar el estado del puerto
                                    $objInterfaceOnt->setEstado("not connect");
                                    $this->emInfraestructura->persist($objInterfaceOnt);
                                    $this->emInfraestructura->flush();
                                }
                            }
                            //obtener la característica del puerto del ont
                            $objServCaractPuertoOnt = $this->getServicioProductoCaracteristica($objServicioAdicional,'PUERTO_ONT',
                                                                                               $objServicioAdicional->getProductoId());
                            if(is_object($objServCaractPuertoOnt))
                            {
                                $objServCaractPuertoOnt->setEstado("Eliminado");
                                $this->emComercial->persist($objServCaractPuertoOnt);
                                $this->emComercial->flush();
                            }
                            //generar tareas
                            $arrayParametroServicio["objInfoDetalle"] = $objInfoDetalle;
                            $arrayResultadoMigrar = $this->generarTareaMigracionGponTN($arrayParametroServicio);
                            if($arrayResultadoMigrar["status"] != "OK")
                            {
                                throw new \Exception($arrayResultadoMigrar["mensaje"]);
                            }
                            //ingresar característica migración
                            $this->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                        $objServicioAdicional->getProductoId(),
                                                                        "MIGRACION_SWITCH_POE",
                                                                        "SI",
                                                                        $strUsrCreacion);
                            //aumentar contador
                            $intContadorTareas++;
                        }
                    }
                }
                //verificar contador
                if($intContadorTareas > 0)
                {
                    //ingresar seguimiento
                    $arrayParametrosHist["intDetalleId"]   = $objInfoDetalle->getId();
                    $arrayParametrosHist["strCodEmpresa"]  = $strCodEmpresa;
                    $arrayParametrosHist["strUsrCreacion"] = $strUsrCreacion;
                    $arrayParametrosHist["strIpCreacion"]  = $strIpCreacion;
                    $arrayParametrosHist["strOpcion"]      = "Seguimiento";
                    $arrayParametrosHist["strEstadoActual"] = "Activo";
                    $arrayParametrosHist["strEnviaDepartamento"] = "N";
                    $arrayParametrosHist["strObservacion"] = "Se generaron $intContadorTareas tarea(s) de migración de servicios a Switch PoE";
                    $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                }
            }
            //setear respuesta
            $arrayResultado = array(
                "status"      => "OK",
                "mensaje"     => "OK"
            );
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayResultado = array(
                "status"      => "ERROR",
                "mensaje"     => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->migrarServiciosSwitchPoeGponTN',
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        return $arrayResultado;
    }

    /**
     * Función que realiza la liberación de recursos de red de un servicio en el puerto del ONT en la red GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 11-10-2021
     * 
     * @author Jenniffer Mujica <jmujica@telconet.ec>
     * @version 1.1 17-02-2023 Se agrega validación del puerto para elementos ont zte
     *
     * @param Array $arrayParametros [
     *                          'objServicio'         => objeto del servicio
     *                          'arrayPuertosLiberar' => puertos a liberar - se puede enviar vacio
     *                          'strPrefijoEmpresa'   => prefijo empresa
     *                          'strUsrCreacion'      => usuario creación
     *                          'strIpCreacion'       => ip creación
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                  ]
     */
    public function liberarPuertoOntGponTN($arrayParametros)
    {
        $objServicio         = $arrayParametros['objServicio'];
        $arrayPuertosLiberar = $arrayParametros['arrayPuertosLiberar'];
        $strPrefijoEmpresa   = $arrayParametros['strPrefijoEmpresa'];
        $strUsrCreacion      = $arrayParametros['strUsrCreacion'];
        $strIpCreacion       = $arrayParametros['strIpCreacion'];

        try
        {
            //validar objeto servicio
            if(!is_object($objServicio))
            {
                throw new \Exception("No es válido el objeto del servicio para liberar los recursos de red en el puerto, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo el punto
            $objPunto               = $objServicio->getPuntoId();
            //obtengo la persona empresa rol
            $objInfoPersonaEmpresaRol   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($objPunto->getPersonaEmpresaRolId()->getId());
            if(is_object($objInfoPersonaEmpresaRol))
            {
                $strIdentificacion = $objInfoPersonaEmpresaRol->getPersonaId()->getIdentificacionCliente();
                $strNombreCliente  = $objInfoPersonaEmpresaRol->getPersonaId()->__toString();
            }
            //obtengo el servicio tecnico
            $objServicioTecnico    = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneByServicioId($objServicio->getId());
            //obtengo el elemento
            $objElemento           = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                    ->find($objServicioTecnico->getElementoId());
            //obtengo la interface elemento
            $objInterfaceElemento  = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                    ->find($objServicioTecnico->getInterfaceElementoId());
            //obtengo la ip del elemento
            $objInfoIp = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId" => $objElemento->getId(),
                                                                                                         "estado"     => "Activo"));
            if(!is_object($objInfoIp))
            {
                throw new \Exception("No se encontró la Ip del elemento ".$objElemento->getNombreElemento()." para tipo de red GPON, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtener los datos del ont
            $arrayParDatosOnt = array(
                "objServicio"    => $objServicio,
                "strUsrCreacion" => $strUsrCreacion,
                "strIpCreacion"  => $strIpCreacion
            );
            $arrayResultDatosOnt = $this->getDatosOntGponTN($arrayParDatosOnt);
            if($arrayResultDatosOnt['status'] != "OK" || empty($arrayResultDatosOnt['datos']))
            {
                throw new \Exception($arrayResultDatosOnt['mensaje']);
            }
            //obtengo la caracteristica del indice cliente
            $objServCaractIndice = $this->getServicioProductoCaracteristica($objServicio,
                                                                           'INDICE CLIENTE',
                                                                           $objServicio->getProductoId());
            if(!is_object($objServCaractIndice))
            {
                throw new \Exception("No es encontró la característica del indice del cliente del servicio, ".
                                     "por favor notificar a Sistemas.");
            }
            //verificar la variable esta vacia
            if(empty($arrayPuertosLiberar))
            {
                $arrayPuertosLiberar = array();
                //obtengo la caracteristica del puerto del ont
                $objServCaractPuerto = $this->getServicioProductoCaracteristica($objServicio,
                                                                               'PUERTO_ONT',
                                                                               $objServicio->getProductoId());
                if(!is_object($objServCaractPuerto))
                {
                    throw new \Exception("No es encontró la característica del puerto del ONT del servicio, ".
                                         "por favor notificar a Sistemas.");
                }
                $arrayPuertosLiberar[] = array("eth" => preg_replace('/[^0-9]/', '', $objServCaractPuerto->getValor()));
            }
            //setear los datos
            $arrayParametrosDatos['login_aux']       = $objServicio->getLoginAux();
            $arrayParametrosDatos['serial_ont']      = $arrayResultDatosOnt['datos']['strSerieOnt'];
            $arrayParametrosDatos['mac_ont']         = $arrayResultDatosOnt['datos']['strMacOnt'];
            $arrayParametrosDatos['nombre_olt']      = $objElemento->getNombreElemento();
            $arrayParametrosDatos['ip_olt']          = $objInfoIp->getIp();
            $arrayParametrosDatos['puerto_olt']      = $objInterfaceElemento->getNombreInterfaceElemento();
            $arrayParametrosDatos['ont_id']          = $objServCaractIndice->getValor();
            $arrayParametrosDatos['estado_servicio'] = "Activado";
            $arrayParametrosDatos['puertos_liberar'] = $arrayPuertosLiberar;
            //datos ws
            $arrayDatosMiddleware = array(
                'nombre_cliente'       => $strNombreCliente,
                'login'                => $objPunto->getLogin(),
                'identificacion'       => $strIdentificacion,
                'datos'                => $arrayParametrosDatos,
                'opcion'               => "TN_MIGRAR_EQUIPO",
                'ejecutaComando'       => $this->ejecutaComando,
                'usrCreacion'          => $strUsrCreacion,
                'ipCreacion'           => $strIpCreacion,
                'comandoConfiguracion' => $this->ejecutaComando,
                'empresa'              => $strPrefijoEmpresa,
            );
            $arrayResultado = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayResultado = array(
                "status"      => "ERROR",
                "mensaje"     => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->liberarPuertoOntGponTN',
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        return $arrayResultado;
    }

    /**
     * Función que realiza la generación de la tarea de migración para los servicios en la red GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 12-10-2021
     *
     * @param Array $arrayParametros [
     *                          'objServicio'    => objeto del servicio
     *                          'objInfoDetalle' => objeto de la info detalle
     *                          'strCodEmpresa'  => id empresa
     *                          'strUsrCreacion' => usuario creación
     *                          'strIpCreacion'  => ip creación
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                  ]
     */
    public function generarTareaMigracionGponTN($arrayParametros)
    {
        $objServicio    = $arrayParametros['objServicio'];
        $objInfoDetalle = $arrayParametros['objInfoDetalle'];
        $strCodEmpresa  = $arrayParametros['strCodEmpresa'];
        $strUsrCreacion = $arrayParametros['strUsrCreacion'];
        $strIpCreacion  = $arrayParametros['strIpCreacion'];

        try
        {
            //validar objeto servicio
            if(!is_object($objServicio))
            {
                throw new \Exception("No es válido el objeto del servicio para generar las tareas de migración a Switch PoE, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo el punto
            $objPunto = $objServicio->getPuntoId();
            //obtengo los datos de la tarea
            $arrayParametrosTarea = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'TAREA DE MIGRACION DEL SERVICIO',
                                                                                                    $objServicio->getProductoId()->getId(),
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    $strCodEmpresa);
            if(!isset($arrayParametrosTarea) || empty($arrayParametrosTarea) || !isset($arrayParametrosTarea['valor2'])
               || !isset($arrayParametrosTarea['valor3']))
            {
                throw new \Exception("No se encontró los datos de la tarea de migración a Switch PoE en los detalles de parámetros, ".
                                     "por favor notificar a Sistemas.");
            }
            //validar objeto detalle de la tarea del servicio
            if(!is_object($objInfoDetalle))
            {
                throw new \Exception("No es válido el objeto del detalle de la tarea del servicio para generar las tareas ".
                                     "de migración a Switch PoE, por favor notificar a Sistemas.");
            }
            //obtengo la info tarea del servicio Switch PoE
            $objInfoAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                            ->findOneBy(array("detalleId" => $objInfoDetalle->getId()),
                                                                        array("id"        => "DESC"));
            if(!is_object($objInfoAsignacion))
            {
                throw new \Exception("No es encontró la info detalle asignación del servicio Switch PoE, por favor notificar a Sistemas.");
            }
            //obtengo la tarea
            $objAdmiTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                            ->findOneBy(array("nombreTarea" => $arrayParametrosTarea['valor2'],
                                                                              "estado"      => "Activo"));
            if(!is_object($objAdmiTarea))
            {
                throw new \Exception("No es encontró la tarea del servicio para realizar la migración, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo el tipo de solicitud
            $objTipoSolicitud = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                    ->findOneBy(array("descripcionSolicitud" => $arrayParametrosTarea['valor3'], 
                                                                      "estado"               => "Activo"));
            if(!is_object($objTipoSolicitud))
            {
                throw new \Exception("No es encontró el tipo de solicitud para generar la tarea de migración a Switch PoE, ".
                                     "por favor notificar a Sistemas.");
            }
            //ingreso el detalle de la solicitud
            $objDetalleSolicitud = new InfoDetalleSolicitud();
            $objDetalleSolicitud->setServicioId($objServicio);
            $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
            $objDetalleSolicitud->setEstado("AsignadoTarea");
            $objDetalleSolicitud->setUsrCreacion($strUsrCreacion);
            $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
            $objDetalleSolicitud->setObservacion("Se genera la solicitud de migración del servicio al Switch PoE");
            $this->emComercial->persist($objDetalleSolicitud);
            $this->emComercial->flush();
            //ingreso la info detalle
            $objDetalle = new InfoDetalle();
            $objDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
            $objDetalle->setTareaId($objAdmiTarea);
            $objDetalle->setObservacion("Se genera la tarea de migración del servicio '' al Switch PoE");
            $objDetalle->setLongitud($objPunto->getLongitud());
            $objDetalle->setLatitud($objPunto->getLatitud());
            $objDetalle->setEsSolucion("N");
            $objDetalle->setPesoPresupuestado(0);
            $objDetalle->setValorPresupuestado(0);
            $objDetalle->setIpCreacion($strIpCreacion);
            $objDetalle->setFeCreacion(new \DateTime('now'));
            $objDetalle->setUsrCreacion($strUsrCreacion);
            $objDetalle->setFeSolicitada(new \DateTime('now'));
            $this->emSoporte->persist($objDetalle);
            $this->emSoporte->flush();
            //ingreso el detalle asignación
            $objDetalleAsignacion = new InfoDetalleAsignacion();
            $objDetalleAsignacion->setDetalleId($objDetalle);
            $objDetalleAsignacion->setAsignadoId($objInfoAsignacion->getAsignadoId());
            $objDetalleAsignacion->setAsignadoNombre($objInfoAsignacion->getAsignadoNombre());
            $objDetalleAsignacion->setRefAsignadoId($objInfoAsignacion->getRefAsignadoId());
            $objDetalleAsignacion->setRefAsignadoNombre($objInfoAsignacion->getRefAsignadoNombre());
            $objDetalleAsignacion->setPersonaEmpresaRolId($objInfoAsignacion->getPersonaEmpresaRolId());
            $objDetalleAsignacion->setTipoAsignado($objInfoAsignacion->getTipoAsignado());
            $objDetalleAsignacion->setUsrCreacion($strUsrCreacion);
            $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $objDetalleAsignacion->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objDetalleAsignacion);
            $this->emSoporte->flush();
            //obtener clase del documento
            $objAdmiClaseDocumento = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                    ->findOneBy(array("nombreClaseDocumento" => "Registro Interno",
                                                                      "estado"               => "Activo"));
            //obtener info documento
            $objInfoDocumento = new InfoDocumento();
            $objInfoDocumento->setMensaje("Tarea generada");
            $objInfoDocumento->setNombreDocumento("Registro de llamada.");
            $objInfoDocumento->setClaseDocumentoId($objAdmiClaseDocumento);
            $objInfoDocumento->setFeCreacion(new \DateTime('now'));
            $objInfoDocumento->setEstado("Activo");
            $objInfoDocumento->setUsrCreacion($strUsrCreacion);
            $objInfoDocumento->setIpCreacion($strIpCreacion);
            $objInfoDocumento->setEmpresaCod($strCodEmpresa);
            $this->emComunicacion->persist($objInfoDocumento);
            $this->emComunicacion->flush();
            //obtener info comunicación
            $objInfoComunicacion = new InfoComunicacion();
            $objInfoComunicacion->setFormaContactoId(5);
            $objInfoComunicacion->setRemitenteId($objPunto->getId());
            $objInfoComunicacion->setRemitenteNombre($objPunto->getLogin());
            $objInfoComunicacion->setClaseComunicacion("Recibido");
            $objInfoComunicacion->setDetalleId($objDetalle->getId());
            $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
            $objInfoComunicacion->setEstado("Activo");
            $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoComunicacion->setUsrCreacion($strUsrCreacion);
            $objInfoComunicacion->setIpCreacion($strIpCreacion);
            $objInfoComunicacion->setEmpresaCod($strCodEmpresa);
            $this->emComunicacion->persist($objInfoComunicacion);
            $this->emComunicacion->flush();
            //obtener info documento comunicación
            $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
            $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
            $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
            $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoDocumentoComunicacion->setEstado('Activo');
            $objInfoDocumentoComunicacion->setUsrCreacion($strUsrCreacion);
            $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
            $this->emComunicacion->persist($objInfoDocumentoComunicacion);
            $this->emComunicacion->flush();
            //ingresar historial
            $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea(
                      array("strCodEmpresa"             => $strCodEmpresa,
                            "strUsrCreacion"            => $strUsrCreacion,
                            "strOpcion"                 => "Historial",
                            "strIpCreacion"             => $strIpCreacion,
                            "intIdDepartamentoOrigen"   => $objInfoAsignacion->getDepartamentoId(),
                            "intDetalleId"              => $objDetalle->getId(),
                            "strObservacion"            => "Tarea Asignada",
                            "strEstadoActual"           => "Asignada",
                            "strAccion"                 => "Asignada"));
            //ingresar criterio
            $strAfectadaDescripcion = $objPunto->getNombrePunto();
            $objCriterio = new InfoCriterioAfectado();
            $objCriterio->setId("1");
            $objCriterio->setDetalleId($objDetalle);
            $objCriterio->setCriterio("Clientes");
            $objCriterio->setOpcion("Cliente: ".$strAfectadaDescripcion." | OPCION: Punto Cliente");
            $objCriterio->setFeCreacion(new \DateTime('now'));
            $objCriterio->setUsrCreacion($strUsrCreacion);
            $objCriterio->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objCriterio);
            $this->emSoporte->flush();
            //ingresar parte
            $objAfectado = new InfoParteAfectada();
            $objAfectado->setTipoAfectado("Cliente");
            $objAfectado->setDetalleId($objDetalle->getId());
            $objAfectado->setCriterioAfectadoId($objCriterio->getId());
            $objAfectado->setAfectadoId($objPunto->getId());
            $objAfectado->setFeIniIncidencia(new \DateTime('now'));
            $objAfectado->setAfectadoNombre($objPunto->getLogin());
            $objAfectado->setAfectadoDescripcion($strAfectadaDescripcion);
            $objAfectado->setFeCreacion(new \DateTime('now'));
            $objAfectado->setUsrCreacion($strUsrCreacion);
            $objAfectado->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objAfectado);
            $this->emSoporte->flush();
            //crear historial para la solicitud
            $objHistorialSolicitud = new InfoDetalleSolHist();
            $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
            $objHistorialSolicitud->setEstado($objDetalleSolicitud->getEstado());
            $objHistorialSolicitud->setObservacion("Se generó la tarea de migración del servicio al Switch PoE, ".
                                                   "debe activar el servicio en el Switch PoE");
            $objHistorialSolicitud->setUsrCreacion($strUsrCreacion);
            $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
            $objHistorialSolicitud->setIpCreacion($strIpCreacion);
            $this->emComercial->persist($objHistorialSolicitud);
            $this->emComercial->flush();
            //ingreso historial
            $this->ingresarServicioHistorial($objServicio, $objServicio->getEstado(),
                                             "Se generó la tarea de migración del servicio al Switch PoE",
                                             $strUsrCreacion, $strIpCreacion);
            //eliminar característica anterior
            $objCaracSerDetalle = $this->getServicioProductoCaracteristica($objServicio,
                                                    'ID_DETALLE_TAREA_INSTALACION',$objServicio->getProductoId());
            if(is_object($objCaracSerDetalle))
            {
                $objCaracSerDetalle->setEstado("Eliminado");
                $objCaracSerDetalle->setUsrUltMod($strUsrCreacion);
                $objCaracSerDetalle->setFeUltMod(new \DateTime('now'));
                $this->emComercial->persist($objCaracSerDetalle);
                $this->emComercial->flush();
            }
            //ingresar característica tarea
            $this->ingresarServicioProductoCaracteristica($objServicio,
                                                          $objServicio->getProductoId(),
                                                          "ID_DETALLE_TAREA_INSTALACION",
                                                          $objDetalle->getId(),
                                                          $strUsrCreacion);
            //setear respuesta
            $arrayResultado = array(
                "status"      => "OK",
                "mensaje"     => "Se generó la tarea de migración del servicio al Switch PoE",
            );
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayResultado = array(
                "status"      => "ERROR",
                "mensaje"     => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->generarTareaMigracionGponTN',
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        return $arrayResultado;
    }

    /**
     * Función que realiza la generación de la tarea de cambio de equipo para los servicios en la red GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 29-10-2021
     *
     * @param Array $arrayParametros [
     *                          'objServicio'            => objeto del servicio
     *                          'objDetalleSolicitud'    => objeto del detalle de la solicitud
     *                          'strPersonaEmpresaRolId' => id de la persona empresa rol
     *                          'intIdCuadrilla'         => id de cuadrilla
     *                          'intIdDepartamento'      => id del departamento
     *                          'strCodEmpresa'          => id empresa
     *                          'strUsrCreacion'         => usuario creación
     *                          'strIpCreacion'          => ip creación
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                  ]
     */
    public function generarTareaCambioEquipoGponTN($arrayParametros)
    {
        $objServicio         = $arrayParametros['objServicio'];
        $objDetalleSolicitud = $arrayParametros['objDetalleSolicitud'];
        $intAsignadoId       = $arrayParametros["intIdCuadrilla"];
        $intIdDepartamento   = $arrayParametros["intIdDepartamento"];
        $strCodEmpresa       = $arrayParametros['strCodEmpresa'];
        $strUsrCreacion      = $arrayParametros['strUsrCreacion'];
        $strIpCreacion       = $arrayParametros['strIpCreacion'];
        $emSchemaSoporte     = $arrayParametros['emSoporte'];

        $this->emComunicacion->getConnection()->beginTransaction();
        try
        {
            $strObservacionTarea = "Se generó la tarea de cambio de equipo del servicio.";
            //validar objeto servicio
            if(!is_object($objServicio))
            {
                throw new \Exception("No es válido el objeto del servicio para generar la tarea de cambio de equipo, ".
                                     "por favor notificar a Sistemas.");
            }
            //validar objeto servicio
            if(!is_object($objDetalleSolicitud))
            {
                throw new \Exception("No es válido el objeto del detalle de solicitud para generar la tarea de cambio de equipo, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo el punto
            $objPunto = $objServicio->getPuntoId();
            //obtengo los datos de la tarea
            $arrayParametrosTarea = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('NUEVA_RED_GPON_TN',
                                                    'COMERCIAL',
                                                    '',
                                                    '',
                                                    'ID_TAREA_CAMBIO_EQUIPO_SERVICIO',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    $strCodEmpresa);
            if(!isset($arrayParametrosTarea) || empty($arrayParametrosTarea) || !isset($arrayParametrosTarea['valor2'])
               || empty($arrayParametrosTarea['valor2']))
            {
                throw new \Exception("No se encontró los datos de la tarea para cambio de equipo en los detalles de parámetros, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtengo la tarea
            $objAdmiTarea = $emSchemaSoporte->getRepository('schemaBundle:AdmiTarea')
                                                            ->find($arrayParametrosTarea['valor2']);
            if(!is_object($objAdmiTarea))
            {
                throw new \Exception("No es encontró la tarea del servicio para realizar el cambio de equipo, ".
                                     "por favor notificar a Sistemas.");
            }
            //ingreso la info detalle
            $objDetalle = new InfoDetalle();
            $objDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
            $objDetalle->setTareaId($objAdmiTarea);
            $objDetalle->setObservacion($strObservacionTarea);
            $objDetalle->setLongitud($objPunto->getLongitud());
            $objDetalle->setLatitud($objPunto->getLatitud());
            $objDetalle->setEsSolucion("N");
            $objDetalle->setPesoPresupuestado(0);
            $objDetalle->setValorPresupuestado(0);
            $objDetalle->setIpCreacion($strIpCreacion);
            $objDetalle->setFeCreacion(new \DateTime('now'));
            $objDetalle->setUsrCreacion($strUsrCreacion);
            $objDetalle->setFeSolicitada(new \DateTime('now'));
            $emSchemaSoporte->persist($objDetalle);
            $emSchemaSoporte->flush();
            //obtener clase del documento
            $objAdmiClaseDocumento = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                    ->findOneBy(array("nombreClaseDocumento" => "Registro Interno",
                                                                      "estado"               => "Activo"));
            //obtener info documento
            $objInfoDocumento = new InfoDocumento();
            $objInfoDocumento->setMensaje("Tarea generada");
            $objInfoDocumento->setNombreDocumento("Registro de llamada.");
            $objInfoDocumento->setClaseDocumentoId($objAdmiClaseDocumento);
            $objInfoDocumento->setFeCreacion(new \DateTime('now'));
            $objInfoDocumento->setEstado("Activo");
            $objInfoDocumento->setUsrCreacion($strUsrCreacion);
            $objInfoDocumento->setIpCreacion($strIpCreacion);
            $objInfoDocumento->setEmpresaCod($strCodEmpresa);
            $this->emComunicacion->persist($objInfoDocumento);
            $this->emComunicacion->flush();
            //obtener info comunicación
            $objInfoComunicacion = new InfoComunicacion();
            $objInfoComunicacion->setFormaContactoId(5);
            $objInfoComunicacion->setRemitenteId($objPunto->getId());
            $objInfoComunicacion->setRemitenteNombre($objPunto->getLogin());
            $objInfoComunicacion->setClaseComunicacion("Recibido");
            $objInfoComunicacion->setDetalleId($objDetalle->getId());
            $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
            $objInfoComunicacion->setEstado("Activo");
            $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoComunicacion->setUsrCreacion($strUsrCreacion);
            $objInfoComunicacion->setIpCreacion($strIpCreacion);
            $objInfoComunicacion->setEmpresaCod($strCodEmpresa);
            $this->emComunicacion->persist($objInfoComunicacion);
            $this->emComunicacion->flush();
            //obtener info documento comunicación
            $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
            $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
            $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
            $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoDocumentoComunicacion->setEstado('Activo');
            $objInfoDocumentoComunicacion->setUsrCreacion($strUsrCreacion);
            $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
            $this->emComunicacion->persist($objInfoDocumentoComunicacion);
            $this->emComunicacion->flush();
            //obtener persona empresa rol
            $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                          ->find($arrayParametros["strPersonaEmpresaRolId"]);
            if(!is_object($objInfoPersonaEmpresaRol))
            {
                throw new \Exception("No es encontró la tarea del servicio para realizar el cambio de equipo, ".
                                     "por favor notificar a Sistemas.");
            }
            //id del departamento
            $objPersona    = $objInfoPersonaEmpresaRol->getPersonaId();
            if(!is_object($objPersona))
            {
                throw new \Exception("No es encontró los datos de asignar de la persona para generar la tarea del cambio de equipo, ".
                                     "por favor notificar a Sistemas.");
            }
            //id persona
            $intIdPersona     = $objPersona->getId();
            //nombres de la persona
            $strNombres       = $objPersona->getNombres() . " " . $objPersona->getApellidos();
            //se obtiene nombre de la cuadrilla
            $objAdmiCuadrilla = $this->emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($intAsignadoId);
            if(!is_object($objAdmiCuadrilla))
            {
                throw new \Exception("No es encontró la cuadrilla para generar la tarea del cambio de equipo, ".
                                     "por favor notificar a Sistemas.");
            }
            $strAsignadoNombre = $objAdmiCuadrilla->getNombreCuadrilla();
            //ingreso el detalle asignación
            $objDetalleAsignacion = new InfoDetalleAsignacion();
            $objDetalleAsignacion->setDetalleId($objDetalle);
            $objDetalleAsignacion->setAsignadoId($intAsignadoId);
            $objDetalleAsignacion->setAsignadoNombre($strAsignadoNombre);
            $objDetalleAsignacion->setRefAsignadoId($intIdPersona);
            $objDetalleAsignacion->setRefAsignadoNombre($strNombres);
            $objDetalleAsignacion->setPersonaEmpresaRolId($objInfoPersonaEmpresaRol->getId());
            $objDetalleAsignacion->setTipoAsignado("CUADRILLA");
            $objDetalleAsignacion->setUsrCreacion($strUsrCreacion);
            $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $objDetalleAsignacion->setIpCreacion($strIpCreacion);
            $emSchemaSoporte->persist($objDetalleAsignacion);
            $emSchemaSoporte->flush();
            //ingresar historial
            $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea(
                      array("strCodEmpresa"             => $strCodEmpresa,
                            "strUsrCreacion"            => $strUsrCreacion,
                            "strOpcion"                 => "Seguimiento",
                            "strIpCreacion"             => $strIpCreacion,
                            "intIdDepartamentoOrigen"   => $intIdDepartamento,
                            "intDetalleId"              => $objDetalle->getId(),
                            "strObservacion"            => $strObservacionTarea,
                            "strEstadoActual"           => "Asignada",
                            "strAccion"                 => "Asignada"));
            //ingresar criterio
            $strAfectadaDescripcion = $objPunto->getNombrePunto();
            $objCriterio = new InfoCriterioAfectado();
            $objCriterio->setId("1");
            $objCriterio->setDetalleId($objDetalle);
            $objCriterio->setCriterio("Clientes");
            $objCriterio->setOpcion("Cliente: ".$strAfectadaDescripcion." | OPCION: Punto Cliente");
            $objCriterio->setFeCreacion(new \DateTime('now'));
            $objCriterio->setUsrCreacion($strUsrCreacion);
            $objCriterio->setIpCreacion($strIpCreacion);
            $emSchemaSoporte->persist($objCriterio);
            $emSchemaSoporte->flush();
            //ingresar parte
            $objAfectado = new InfoParteAfectada();
            $objAfectado->setTipoAfectado("Cliente");
            $objAfectado->setDetalleId($objDetalle->getId());
            $objAfectado->setCriterioAfectadoId($objCriterio->getId());
            $objAfectado->setAfectadoId($objPunto->getId());
            $objAfectado->setFeIniIncidencia(new \DateTime('now'));
            $objAfectado->setAfectadoNombre($objPunto->getLogin());
            $objAfectado->setAfectadoDescripcion($strAfectadaDescripcion);
            $objAfectado->setFeCreacion(new \DateTime('now'));
            $objAfectado->setUsrCreacion($strUsrCreacion);
            $objAfectado->setIpCreacion($strIpCreacion);
            $emSchemaSoporte->persist($objAfectado);
            $emSchemaSoporte->flush();
            //guardar
            if($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->commit();
                $this->emComunicacion->getConnection()->close();
            }
            //setear respuesta
            $arrayResultado = array(
                "status"     => "OK",
                "objDetalle" => $objDetalle,
                "mensaje"    => $strObservacionTarea,
            );
        }
        catch (\Exception $ex)
        {
            //rollback
            if($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->rollback();
                $this->emComunicacion->getConnection()->close();
            }
            //setear respuesta
            $arrayResultado = array(
                "status"      => "ERROR",
                "mensaje"     => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->generarTareaCambioEquipoGponTN',
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        return $arrayResultado;
    }

    /**
     * Funcion qque genera usuario,password y url para ser consideradas en el monitoreo.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 15-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 14-10-2021 - Se valida el método para generar las credenciales y reasignar la tarea de la cámara.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 06-06-2022 - Se realiza el envió de notificación del password.
     * 
     * @author Leonardo Mero <lemero.telconet.ec>
     * @version 1.3 20-09-2022 Se realiza el seteo de los parametros  y consumo del WS de analitica
     * 
     * @param $arrayParametros: [ objInfoServicio   => objeto del servicio,
     *                            strLoginAux       => login auxiliar,
     *                            strIpAsignada     => IP asignada para la camara,
     *                            strUsrCreacion    => usuario de creacion,
     *                            strIpCreacion     => ip de creacion,
     *                            strCodEmpresa     => codigo de la empresa,
     *                            strPrefijoEmpresa => prefijo de la empresa,
     *                            intIdPersonaCamara => id persona,
     *                            intIdPerEmpRolCamara => id persona empresa rol ]
     *
     * @return $arrayRespuesta  => [ status  => OK u ERROR
     *                               mensaje => mensaje de respuesta ]
     */
    public function generarCredencialesCamara($arrayParametros)
    {
        $arrayRespuesta      = array();
        $strClaveCamara      = "";
        $strClaveEncriptada  = "";
        $strUrlCamara        = "";
        $strEstatus          = "ERROR";
        $strMensaje          = "";

        try
        {
            $strMensaje = "La tarea de instalacion de la ".$arrayParametros["objInfoServicio"]->getProductoId()->getDescripcionProducto().
                          " no pudo ser reasignada, favor notificar a Sistemas.";
            if(is_object($arrayParametros["objInfoServicio"]))
            {
                //Ingresar caracteristicas de la camara
                $this->ingresarServicioProductoCaracteristica($arrayParametros["objInfoServicio"],
                                                            $arrayParametros["objInfoServicio"]->getProductoId(),
                                                            'USUARIO_CAMARA',
                                                            $arrayParametros["strLoginAux"],
                                                            $arrayParametros["strUsrCreacion"]);

                $strClaveCamara     = $this->emComercial->getRepository("schemaBundle:InfoServicio")->creaAleatorio();
                if(!empty($strClaveCamara))
                {
                    $strClaveEncriptada = $this->serviceCrypt->encriptar($strClaveCamara);
                }

                $this->ingresarServicioProductoCaracteristica($arrayParametros["objInfoServicio"],
                                                            $arrayParametros["objInfoServicio"]->getProductoId(),
                                                            'CLAVE_CAMARA',
                                                            $strClaveEncriptada,
                                                            $arrayParametros["strUsrCreacion"]);

                //Se consulta el formato de URL para camaras safecity
                $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                               'INFRAESTRUCTURA',
                                                               'PARAMETROS',
                                                               'FORMATO_URL_CAMARA_SAFECITY',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               $arrayParametros["strCodEmpresa"]);

                if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
                {
                    $strForatoUrlCamara = $arrayParametrosDet["valor1"];

                    $strUrlCamara   = str_replace('{{password}}',$strClaveCamara,$strForatoUrlCamara);
                    $strUrlCamara   = str_replace('{{ipCamara}}',$arrayParametros["strIpAsignada"],$strUrlCamara);
                }

                $this->ingresarServicioProductoCaracteristica($arrayParametros["objInfoServicio"],
                                                            $arrayParametros["objInfoServicio"]->getProductoId(),
                                                            'URL_CAMARA',
                                                            $strUrlCamara,
                                                            $arrayParametros["strUsrCreacion"]);

                //Se reasigna la tarea de instalacion hacia el departamento parametrizado encargado de realizar la configuracion de la camara
                //para el monitoreo
                $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                               'INFRAESTRUCTURA',
                                                               'PARAMETROS',
                                                               'DEPARTAMENTO_QUE_CONFIGURA_LA_CAMARA',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               $arrayParametros["strCodEmpresa"]);

                if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
                {
                    $strIdDepartamentoAsignada = $arrayParametrosDet["valor1"];
                    $strSeguimientoTarea       = $arrayParametrosDet["valor2"];
                    $strIdEmpleadoAsignado     = $arrayParametrosDet["valor4"];
                }

                //Se consulta la solicitud de instalacion del servicio adicional
                $objTipoSolicitudPlanficacion = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                  ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                                    "estado"               => "Activo"));

                if (is_object($objTipoSolicitudPlanficacion))
                {
                    $objSolicitudPlanficacion = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                     ->findOneBy(array("servicioId"      => $arrayParametros["objInfoServicio"]->getId(),
                                                                       "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId()),
                                                                 array('id'              => 'DESC'));
                    if (is_object($objSolicitudPlanficacion))
                    {
                        $objIdDetalle = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                        ->findOneBy(array('detalleSolicitudId' => $objSolicitudPlanficacion->getId()));

                        if(is_object($objIdDetalle))
                        {                          
                            //Verificamos si se debe ejecutar el WS
                            $objEjecutaWs = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                            ->findOneBy(array("descripcion" => "ANALITICA_CONSUMO_WS",
                                                                              "estado"      => "Activo"));
                            $boolEjecutarWS = !isset($objEjecutaWs) ? false : ($objEjecutaWs->getValor1() === 'S' ? true : false);

                            if($boolEjecutarWS)
                            {
                                $objCliente = $arrayParametros['objInfoServicio']->getPuntoId()->getPersonaEmpresaRolId()->getPersonaId();
                                
                                //Ingresamos los parametros que recibira el WS
                                $arrayParametrosWs['OP']       = 'ACTIVAR';
                                $arrayParametrosWs['process']  = 'NORMAL';
                                $arrayParametrosWs['business'] = $arrayParametros['strPrefijoEmpresa'];
                                $arrayParametrosWs['product']  = "safecity";
                                //Fuente
                                $arrayFuenteWs['nameService']  = $this->strNombreServAnaliticaWS;
                                $arrayFuenteWs['originIP']     = $arrayParametros["strIpCreacion"];
                                $arrayFuenteWs['originId']     = 'telcos';
                                $arrayFuenteWs['originDate']   = (new \DateTime('now'))->format('Y-m-d\TH:i:sO');
                                $arrayFuenteWs['typeOriginID'] = $this->strModoAnaliticaWs;
                                
                                //Datos del cliente
                                $arrayClienteWs['identification'] = $objCliente->getIdentificacionCliente();
                                $arrayClienteWs['name']           = $objCliente->getRazonSocial();
                                $arrayClienteWs['address']        = $objCliente->getDireccion();

                                //Datos de la camara
                                $arrayCamaraWs['IP']         = $arrayParametros['strIpAsignada'];
                                $arrayCamaraWs['loginaux']   = $arrayParametros['strLoginAux'];
                                $arrayCamaraWs['password']   = $strClaveCamara;
                                $arrayCamaraWs['type']       = strtolower($arrayParametros['strTipoCamara']); 
                                $arrayCamaraWs['position']   = $arrayParametros['strPosicionCamara'];
                                $arrayCamaraWs['FPS']        = $arrayParametros['strFps'];
                                $arrayCamaraWs['resolution'] = $arrayParametros['strFormatoResolucion']; 
                                $arrayCamaraWs['model']      = $arrayParametros['strModelo'];
                                $arrayCamaraWs['brand']      = $arrayParametros['strMarca'];
                                $arrayCamaraWs['codec']      = $arrayParametros['strCodec'];
                                $arrayCamaraWs['serie']      = $arrayParametros['strSerie'];
                                $arrayCamaraWs['MAC']        = $arrayParametros['strMac'];
                                $arrayCamaraWs['audio']      = false;
                                $arrayCamaraWs['recording']  = false;
                                $arrayCamaraWs['services']   = array();
                               
                                //Datos del sitio de instalacion 
                                $arraySitioWS['latitude']  = $arrayParametros['objInfoServicio']->getPuntoId()->getLatitud();
                                $arraySitioWS['longitude'] = $arrayParametros['objInfoServicio']->getPuntoId()->getLongitud();
                                $arraySitioWS['login']     = $arrayParametros['strLogin'];
                                $arraySitioWS['address']   = $arrayParametros['objInfoServicio']->getPuntoId()->getDireccion();

                                $arrayParametrosWs['source'] = $arrayFuenteWs;
                                $arrayCamaraWs['site']       = $arraySitioWS;
                               
                                $arrayParametrosWs['data']['client'] = $arrayClienteWs;
                                $arrayParametrosWs['data']['camera'] = $arrayCamaraWs;
                                //Fin del ingreso de los parametros que recibira el WS

                                //Ejecutamos la funcion del WS
                                $arrayRespuestaWs = $this->analiticaCamarasWs($arrayParametrosWs);

                            }
                            //Verificamos si se debe reasignar la tarea
                            $objEjecutaTareaAuto = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                                                   ->findOneBy(array("descripcion" => "ANALITICA_TAREA_AUTOMATICA",
                                                                                     "estado"      => "Activo")); 
                            $boolEjecutarTareaAuto = !isset($objEjecutaWs) ? false : $objEjecutaTareaAuto->getValor1() === 'S' ? true : false;

                            //Se reasigna la tarea si es requerido
                            if( $boolEjecutarTareaAuto )
                            { 
                                $strObservacion  = "Datos para configurar la SAFE VIDEO ANALYTICS CAM"
                                                . " "
                                                . "<br>Usuario: ".$arrayParametros["strLoginAux"]
                                                . "<br>Clave:   ".$strClaveCamara
                                                . "<br>URL:     ".$strUrlCamara;

                                $strSeguimientoTarea = '<b>Se detallan campos solicitados para la activacion de la CAMARA:</b> '
                                                 . ' '
                                                 . '<br> <b>Login</b>                   : ' . $arrayParametros['strLogin']
                                                 . '<br> <b>Login Aux</b>               : ' . $arrayParametros['strLoginAux']
                                                 . '<br> <b>Nombre De La Cámara</b>     : ' . $arrayParametros['strNombreCamara']
                                                 . '<br> <b>Marca</b>                   : ' . $arrayParametros['strMarca']
                                                 . '<br> <b>Modelo</b>                  : ' . $arrayParametros['strModelo']
                                                 . '<br> <b>Serie</b>                   : ' . $arrayParametros['strSerie']
                                                 . '<br> <b>Mac</b>                     : ' . $arrayParametros['strMac']
                                                 . '<br> <b>IP</b>                      : ' . $arrayParametros['strIpAsignada']
                                                 . '<br> <b>URl Rstp</b>                : ' . $strUrlCamara
                                                 . '<br> <b>FPS</b>                     : ' . $arrayParametros['strFps']
                                                 . '<br> <b>Resolución</b>              : ' . $arrayParametros['strFormatoResolucion']
                                                 . '<br> <b>Codec</b>                   : ' . $arrayParametros['strCodec'].'<br>';

                                $arrayParametrosReasignacion                          = array();
                                $arrayParametrosReasignacion['idEmpresa']             = $arrayParametros["strCodEmpresa"];
                                $arrayParametrosReasignacion['prefijoEmpresa']        = $arrayParametros['strPrefijoEmpresa'];
                                $arrayParametrosReasignacion['motivo']                = $strSeguimientoTarea;
                                $arrayParametrosReasignacion['observacionCorreo']     = $strObservacion;
                                $arrayParametrosReasignacion['departamento_asignado'] = $strIdDepartamentoAsignada;
                                $arrayParametrosReasignacion['id_departamento']       = $strIdDepartamentoAsignada;
                                $arrayParametrosReasignacion['empleado_asignado']     = $strIdEmpleadoAsignado;
                                $arrayParametrosReasignacion['user']                  = $arrayParametros["strUsrCreacion"];
                                $arrayParametrosReasignacion['empleado_logueado']     = $arrayParametros["strUsrCreacion"];
                                $arrayParametrosReasignacion['clientIp']              = $arrayParametros["strIpCreacion"];
                                $arrayParametrosReasignacion['tipo_asignado']         = "EMPLEADO";
                                $arrayParametrosReasignacion['id_detalle']            = $objIdDetalle->getId();
                                $arrayParametrosReasignacion['banderaSafeCity']       = "S";
                                $arrayParametrosReasignacion['strValidacionTags']     = "NO";
                                $arrayParametrosReasignacion['fecha_ejecucion']       = (new \DateTime('now'))->format('Y-m-d H:i');

                                $arrayResultadoReasignacion  = $this->serviceSoporte->reasignarTarea($arrayParametrosReasignacion);

                                if($arrayResultadoReasignacion["success"])
                                {
                                    $strEstatus = "OK";
                                    $strMensaje = "Se reasigno la tarea del servicio.";
                                }
                            }
                            
                            //Ingresamos la respuesta del WS a InfoServProdCaract
                            $strRespuestaWs = $arrayRespuestaWs ? $arrayRespuestaWs['strStatus'] : 'ERROR';
                            $strMensajeWs = $arrayRespuestaWs ? $arrayRespuestaWs['strMensaje'] : 'No se ha realizado el consumo del WS, Flag: "N" ';
                            $this->ingresarServicioProductoCaracteristica($arrayParametros['objInfoServicio'],
                                                                          $arrayParametros['objInfoServicio']->getProductoId(),
                                                                          "ANALITICA_CONSUMO_WS",
                                                                          $strRespuestaWs,
                                                                          $arrayParametros['strUsrCreacion']);
                            //Ingresamos un log con la respuesta del WS
                            $strObservacion = "Consumo del WS de Analitica: ".$strRespuestaWs.": ".$strMensajeWs;
                            $this->ingresarServicioHistorial($arrayParametros["objInfoServicio"],
                                                             "Activo",
                                                             $strObservacion,
                                                             $arrayParametros["strUsrCreacion"],
                                                             $arrayParametros["strIpCreacion"]);                                    

                            try
                            {
                                //enviar password por correo electrónico
                                $arrayParPasswordDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                      ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                               'INFRAESTRUCTURA',
                                                                               'PARAMETROS',
                                                                               'NOTIFICACION_PASSWORD_CAMARA',
                                                                               '',
                                                                               '',
                                                                               '',
                                                                               '',
                                                                               '',
                                                                               $arrayParametros["strCodEmpresa"]);
                                if(!empty($arrayParPasswordDet["valor1"]) && isset($arrayParPasswordDet["valor1"]))
                                {
                                    $strTwigMail   = $arrayParPasswordDet["valor1"];
                                    $strAsuntoMail = $arrayParPasswordDet["valor2"];
                                    $strFromMail   = $arrayParPasswordDet["valor3"];
                                    $strMensaje    = $arrayParPasswordDet["valor4"];
                                    $strCorreo     = $arrayParPasswordDet["valor5"];
                                    //obtener correo
                                    $arrayToMail   = array();
                                    //obtenemos los datos del empleado.
                                    $arrayInfoPersona = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                        ->getInfoDatosPersona(array ('strRol'            => 'Empleado',
                                                                     'strCodEmpresa'     =>  $arrayParametros["strCodEmpresa"],
                                                                     'intIdPersona'      =>  $arrayParametros['intIdPersonaCamara'],
                                                                     'strEstadoPersona'  =>  array('Activo','Pendiente','Modificado'),
                                                                     'strEstadoPersonaEmpresaRol' => 'Activo'));
                                    if($arrayInfoPersona['status'] != 'fail')
                                    {
                                        //obtener correo lider de cuadrilla
                                        $arrayParGetLider    = array('personaEmpresaRolId'=>$arrayParametros['intIdPerEmpRolCamara']);
                                        $arrayLiderCuadrilla = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                    ->getLiderCuadrillaByPersonaEmpresaRol($arrayParGetLider);
                                        if(!empty($arrayLiderCuadrilla) && $arrayLiderCuadrilla['status'] == "OK"
                                           && isset($arrayLiderCuadrilla['result'][0]['personaEmpresaRolId']))
                                        {
                                            $objPerEmpRolLider = $this->emComercial
                                                                    ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                    ->find($arrayLiderCuadrilla['result'][0]['personaEmpresaRolId']);
                                            if(is_object($objPerEmpRolLider))
                                            {
                                                $arrayParametroUser                   = array();
                                                $arrayParametroUser['strLogin']       = $objPerEmpRolLider->getPersonaId()->getLogin();
                                                $arrayParametroUser['intIdEmp']       = $arrayParametros["strCodEmpresa"];
                                                $arrayParametroUser['objUtilService'] = $this->utilService;
                                                $arrayDatosUsuario = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                                                ->getDatosUsuarioNaf($arrayParametroUser);
                                                if($arrayDatosUsuario['status'] == 'OK')
                                                {
                                                    $arrayToMail[] = $arrayDatosUsuario['result']['mailCia'];
                                                }
                                            }
                                        }
                                        //verificar si esta vacio para obtener el correo del tecnico
                                        if(empty($arrayToMail))
                                        {
                                            $arrayParametroUser                   = array();
                                            $arrayParametroUser['strLogin']       = $arrayInfoPersona['result'][0]['loginEmpleado'];
                                            $arrayParametroUser['intIdEmp']       = $arrayParametros["strCodEmpresa"];
                                            $arrayParametroUser['objUtilService'] = $this->utilService;
                                            $arrayDatosUsuario = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                                            ->getDatosUsuarioNaf($arrayParametroUser);
                                            if($arrayDatosUsuario['status'] == 'OK')
                                            {
                                                $arrayToMail[] = $arrayDatosUsuario['result']['mailCia'];
                                            }
                                        }
                                    }
                                    else
                                    {
                                        $objInfoPersona   = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                                            ->find($arrayParametros['intIdPersonaCamara']);
                                        $objFormaContacto = $this->emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                                ->findOneBy(array("descripcionFormaContacto" => "Correo Electronico",
                                                                                  "estado"                   => "Activo"));
                                        if(is_object($objInfoPersona) && is_object($objFormaContacto))
                                        {
                                            $arrayContactoPers = $this->emComercial->getRepository("schemaBundle:InfoPersonaFormaContacto")
                                                                ->findBy(array("personaId"       => $objInfoPersona->getId(),
                                                                               "formaContactoId" => $objFormaContacto->getId(),
                                                                               "estado"          => "Activo"));
                                            foreach($arrayContactoPers as $objContactoPers)
                                            {
                                                $arrayToMail[] = $objContactoPers->getValor();
                                            }
                                        }
                                    }
                                    //verificar correo
                                    if(!empty($strCorreo))
                                    {
                                        $strEstatus = "OK";
                                        $arrayToMail[] = $strCorreo;
                                    }
                                    //verificar correo
                                    if(empty($arrayToMail))
                                    {
                                        throw new \Exception("No es encontró un correo electrónico para el ID persona ".
                                                             $arrayParametros['intIdPersonaCamara'].
                                                             " en la notificación de password de la cámara en el servicio ".
                                                             $arrayParametros['strLoginAux'].".");
                                    }

                                    //datos que se pasan a la vista
                                    $arrayDatosMail                    = $arrayParametros;
                                    $arrayDatosMail['strClaveCamara']  = $strClaveCamara;
                                    $arrayDatosMail['strUrlCamara']    = $strUrlCamara;
                                    $arrayDatosMail['strMensaje']      = $strMensaje;
                                    $arrayDatosMail['objInfoServicio'] = null;
                                    //enviar correo de password
                                    $this->schemaMailer->sendTwig($strAsuntoMail,
                                                            $strFromMail,
                                                            $arrayToMail,
                                                            $strTwigMail,
                                                            $arrayDatosMail);

                                }
                            }
                            catch (\Exception $exx)
                            {
                                //guardar error
                                $this->utilService->insertError('Telcos+',
                                                                'InfoServicioTecnicoService->generarCredencialesCamara',
                                                                $exx->getMessage(),
                                                                $arrayParametros["strUsrCreacion"],
                                                                $arrayParametros["strIpCreacion"]);
                            }
                        }
                    }
                }
            }
            $arrayRespuesta["status"]  = $strEstatus;
            $arrayRespuesta["mensaje"] = $strMensaje;
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayRespuesta = array(
                "status"  => "ERROR",
                "mensaje" => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->generarCredencialesCamara',
                                            $ex->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
        return $arrayRespuesta;
    }

    /**
     * Función que realiza la reasignación de la tarea del servicios SafeCity en la red GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 14-10-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 06-06-2022 - Se agrega parámetros para el envió de notificación del password de la cámara safecity.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 01-08-2022 - Se agrega la validación para generar las credenciales para los servicios
     *                           cámaras vpn gpon safecity.
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.3 12-01-2023 Se valida si se han generado de las credenciales
     * 
     * @param Array $arrayParametros [
     *                          'objServicio'       => objeto del servicio
     *                          'strObservacion'    => observación de la tarea
     *                          'strCodEmpresa'     => id empresa
     *                          'strPrefijoEmpresa' => prefijo empresa
     *                          'strUsrCreacion'    => usuario creación
     *                          'strIpCreacion'     => ip creación
     *                          'intIdPersonaCamara' => id persona
     *                          'intIdPerEmpRolCamara' => id persona empresa rol
     *                  ]
     *
     * @return Array $arrayRespuesta [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                  ]
     */
    public function reasignarTareaSafeCityGponTN($arrayParametros)
    {
        try
        {
            $objServicio = $arrayParametros['objServicio'];
            //validar objeto servicio
            if(!is_object($objServicio))
            {
                throw new \Exception("No es válido el objeto del servicio para reasignar la tarea, ".
                                     "por favor notificar a Sistemas.");
            }
            //seteo la descripción del parametro
            $strParametro = "DEPARTAMENTO_QUE_CONFIGURA_LA_CAMARA";
            if($objServicio->getProductoId()->getNombreTecnico() === "SAFECITYWIFI")
            {
                $strParametro = "DEPARTAMENTO_QUE_CONFIGURA_AP";
            }
            //eliminar característica anterior
            $objCaracSerDetalle = $this->getServicioProductoCaracteristica($objServicio,
                                                    'ID_DETALLE_TAREA_INSTALACION',$objServicio->getProductoId());
            if(!is_object($objCaracSerDetalle))
            {
                throw new \Exception("No es encontró la característica de la tarea del servicio, ".
                                     "por favor notificar a Sistemas.");
            }
            //obtener objeto info detalle
            $objInfoDetalle     = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")->find($objCaracSerDetalle->getValor());
            if(!is_object($objInfoDetalle))
            {
                throw new \Exception("No es encontró el detalle de la tarea del servicio, ".
                                     "por favor notificar a Sistemas.");
            }

            //verificar si es migración
            $objServCaractMigracion = $this->getServicioProductoCaracteristica($objServicio,
                                                                               'MIGRACION_SWITCH_POE',
                                                                               $objServicio->getProductoId());
            if($objServicio->getProductoId()->getNombreTecnico() != "SAFECITYWIFI" && !is_object($objServCaractMigracion))
            {
                $objInfoIp = $this->emInfraestructura->getRepository("schemaBundle:InfoIp")
                                    ->findOneBy(array("servicioId" => $objServicio->getId()));
                if(is_object($objInfoIp))
                {
                    $arrayParametosTareaCamara["strIpAsignada"] = $objInfoIp->getIp();
                }
                $arrayParametosTareaCamara["objInfoServicio"]   = $objServicio;
                $arrayParametosTareaCamara["strLoginAux"]       = $objServicio->getLoginAux();
                $arrayParametosTareaCamara["strUsrCreacion"]    = $arrayParametros['strUsrCreacion'];
                $arrayParametosTareaCamara["strIpCreacion"]     = $arrayParametros['strIpCreacion'];
                $arrayParametosTareaCamara["strCodEmpresa"]     = $arrayParametros['strCodEmpresa'];
                $arrayParametosTareaCamara["strPrefijoEmpresa"] = $arrayParametros['strPrefijoEmpresa'];
                $arrayParametosTareaCamara["intIdPersonaCamara"] = $arrayParametros['intIdPersonaCamara'];
                $arrayParametosTareaCamara["intIdPerEmpRolCamara"] = $arrayParametros['intIdPerEmpRolCamara'];
                $arrayParametosTareaCamara["strLogin"]          = $objServicio->getPuntoId()->getLogin();
                //datos del elemento
                $objServicioTecnico   = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                        ->findOneByServicioId($objServicio->getId());
                $objElemento          = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                        ->find($objServicioTecnico->getElementoClienteId());
                $objInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                        ->find($objServicioTecnico->getInterfaceElementoClienteId());
                $arrayParametosTareaCamara["strNombreCamara"]   = $objElemento->getNombreElemento();
                $arrayParametosTareaCamara["strMarca"]          = $objElemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                $arrayParametosTareaCamara["strModelo"]         = $objElemento->getModeloElementoId()->getNombreModeloElemento();
                $arrayParametosTareaCamara["strSerie"]          = $objElemento->getSerieFisica();
                $arrayParametosTareaCamara["strMac"]            = $objInterfaceElemento->getMacInterfaceElemento();
                //obtener fps
                $objServCaractFps = $this->getServicioProductoCaracteristica($objServicio,'FPS',$objServicio->getProductoId());
                $arrayParametosTareaCamara["strFps"]            = is_object($objServCaractFps) ? $objServCaractFps->getValor() : "";
                //obtener codec
                $objServCaractCodec = $this->getServicioProductoCaracteristica($objServicio,'CODEC',$objServicio->getProductoId());
                $arrayParametosTareaCamara["strCodec"]          = is_object($objServCaractCodec) ? $objServCaractCodec->getValor() : "";
                //obtener resolucion
                $objServCaractResolucion = $this->getServicioProductoCaracteristica($objServicio,'RESOLUCION',$objServicio->getProductoId());
                $arrayParametosTareaCamara["strResolucion"]     = is_object($objServCaractResolucion) ? $objServCaractResolucion->getValor() : "";
                //Obtenemos el formato de la resolucion
                $objServCaractForRes = $this->getServicioProductoCaracteristica($objServicio,'FORMATO_RESOLUCION',$objServicio->getProductoId());
                $arrayParametosTareaCamara["strFormatoResolucion"] = is_object($objServCaractForRes) ? $objServCaractForRes->getValor() : "";
                //Obtenemos el tipo de camara
                $objServCaractForRes = $this->getServicioProductoCaracteristica($objServicio,'TIPO_CAMARA',$objServicio->getProductoId());
                $arrayParametosTareaCamara["strTipoCamara"] = is_object($objServCaractForRes) ? $objServCaractForRes->getValor() : "";
                //Obtenemos la posicion de la camara
                $objServCaractForRes = $this->getServicioProductoCaracteristica($objServicio,'POSICION_CAMARA',$objServicio->getProductoId());
                $arrayParametosTareaCamara["strPosicionCamara"] = is_object($objServCaractForRes) ? $objServCaractForRes->getValor() : "";  
                  
                $arrayParametosTareaCamara["objTipoElemento"]       = $objElemento->getModeloElementoId()->getTipoElementoId();
                
                $objServCaractURLCamara = $this->getServicioProductoCaracteristica($objServicio,'URL_CAMARA',$objServicio->getProductoId());

                if(!is_object($objServCaractURLCamara))
                {
                    $arrayResultadoReasignacion = $this->generarCredencialesCamara($arrayParametosTareaCamara);
                    if($arrayResultadoReasignacion["status"] != "OK")
                    {
                        throw new \Exception($arrayResultadoReasignacion["mensaje"]);
                    }
                }
                
            }
            else
            {
                //obtener datos parametros
                $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                            'INFRAESTRUCTURA',
                                                            'PARAMETROS',
                                                            $strParametro,
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $arrayParametros["strCodEmpresa"]);

                if(!isset($arrayParametrosDet["valor1"]) || empty($arrayParametrosDet["valor1"]))
                {
                    throw new \Exception("No es encontró los datos de parámetros para reasignar la tarea del servicio, ".
                                        "por favor notificar a Sistemas.");
                }
                $strIdDepartamentoAsignada = $arrayParametrosDet["valor1"];
                $strSeguimientoTarea       = isset($arrayParametros["strObservacion"]) && !empty($arrayParametros["strObservacion"])
                                                ? $arrayParametros["strObservacion"] : $arrayParametrosDet["valor2"];
                $strIdEmpleadoAsignado     = $arrayParametrosDet["valor4"];

                //Se verfifca que la ultima asiganacion no sea a la persona a quien se reasiganara la tarea
                $booleanReasignarTarea = true;
                $objDetalleAsignacion  = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                    ->findOneBy(array('detalleId' => $objInfoDetalle->getId()),
                                                                array('id' => 'DESC'));
                //Se obtiene la ultima persona asignada
                if(is_object($objDetalleAsignacion))
                {
                    $intIdPersonaEmpTarea = $objDetalleAsignacion->getPersonaEmpresaRolId();
                    if(!empty($intIdPersonaEmpTarea))
                    {
                        $objPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                                            ->find($intIdPersonaEmpTarea);
                        if(is_object($objPersonaEmpresaRol) 
                           && $objPersonaEmpresaRol->getPersonaId()->getId() == $strIdEmpleadoAsignado)
                        {
                            $booleanReasignarTarea = false;
                        }
                    }
                }

                if($booleanReasignarTarea)
                {
                    //reasignar tarea
                    $arrayParametrosReasignacion                          = array();
                    $arrayParametrosReasignacion['idEmpresa']             = $arrayParametros["strCodEmpresa"];
                    $arrayParametrosReasignacion['prefijoEmpresa']        = $arrayParametros['strPrefijoEmpresa'];
                    $arrayParametrosReasignacion['motivo']                = $strSeguimientoTarea;
                    $arrayParametrosReasignacion['departamento_asignado'] = $strIdDepartamentoAsignada;
                    $arrayParametrosReasignacion['id_departamento']       = $strIdDepartamentoAsignada;
                    $arrayParametrosReasignacion['empleado_asignado']     = $strIdEmpleadoAsignado;
                    $arrayParametrosReasignacion['user']                  = $arrayParametros["strUsrCreacion"];
                    $arrayParametrosReasignacion['empleado_logueado']     = $arrayParametros["strUsrCreacion"];
                    $arrayParametrosReasignacion['clientIp']              = $arrayParametros["strIpCreacion"];
                    $arrayParametrosReasignacion['tipo_asignado']         = "EMPLEADO";
                    $arrayParametrosReasignacion['id_detalle']            = $objInfoDetalle->getId();
                    $arrayParametrosReasignacion['strValidacionTags']     = "NO";
                    $arrayParametrosReasignacion['fecha_ejecucion']       = (new \DateTime('now'))->format('Y-m-d H:i');
                    $arrayResultadoReasignacion  = $this->serviceSoporte->reasignarTarea($arrayParametrosReasignacion);
                    if(!$arrayResultadoReasignacion["success"])
                    {
                        throw new \Exception("La tarea del servicio ".$objServicio->getProductoId()->getDescripcionProducto().
                                            " no pudo ser reasignada, favor notificar a Sistemas.");
                    }
                }
            }
            //servicio mascarilla
            if($objServicio->getProductoId()->getNombreTecnico() == "SAFECITYDATOS")
            {
                //**Verificar si existe un servicio mascarilla asociado en la camara para enviar crear la tarea automatica de configuracion**//
                $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                            'INFRAESTRUCTURA',
                                                            'PARAMETROS',
                                                            'TIPO_SERVICIO',
                                                            'SERVICIO_MASCARILLA',
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            $arrayParametros['strCodEmpresa']);
                if(!isset($arrayParametrosDet["valor1"]) || empty($arrayParametrosDet["valor1"]))
                {
                    throw new \Exception("No es encontró los datos de parámetros para la característica del servicio mascarilla, ".
                                         "por favor notificar a Sistemas.");
                }
                $strNombreCaracteristica = $arrayParametrosDet["valor2"];
                $objServProdCaractServMascarilla = $this->getServicioProductoCaracteristica($objServicio,
                                                                                            $strNombreCaracteristica,
                                                                                            $objServicio->getProductoId());
                if(is_object($objServProdCaractServMascarilla))
                {
                    $arrayParametrosConfigurarMascarilla["intEmpresaId"]          = $arrayParametros['strCodEmpresa'];
                    $arrayParametrosConfigurarMascarilla["strPrefijoEmpresa"]     = "";
                    $arrayParametrosConfigurarMascarilla["intServicioOrigenId"]   = $objServProdCaractServMascarilla->getValor();
                    $arrayParametrosConfigurarMascarilla["intIdServicioCamara"]   = $objServicio->getId();
                    $arrayParametrosConfigurarMascarilla["strTipoDeServicio"]     = "SERVICIO_MASCARILLA";
                    $arrayParametrosConfigurarMascarilla["strUsrCreacion"]        = $arrayParametros['strUsrCreacion'];
                    $arrayParametrosConfigurarMascarilla["strIpCreacion"]         = $arrayParametros['strIpCreacion'];
                    $arrayParametrosConfigurarMascarilla["strDepartamentoOrigen"] = "";
                    $this->envioTareaServicioMascarilla($arrayParametrosConfigurarMascarilla);
                }
            }
            //setear respuesta
            $arrayRespuesta = array(
                "status"    => "OK",
                "respuesta" => "Se reasignó la tarea del servicio."
            );
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayRespuesta = array(
                "status"    => "ERROR",
                "respuesta" => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->reasignarTareaSafeCityGponTN',
                                            $ex->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
        return $arrayRespuesta;
    }

    /**
     * Función que verifica si el punto posee un servicio cámara con modelo del elemento Cámara PTZ
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 14-10-2021
     *
     * @param Array $arrayParametros [
     *                          'objServicio'       => objeto del servicio
     *                          'strCodEmpresa'     => id empresa
     *                          'strUsrCreacion'    => usuario creación
     *                          'strIpCreacion'     => ip creación
     *                  ]
     *
     * @return Array $arrayRespuesta [
     *                          'status'    => estado de la operación
     *                          'resultado' => resultado de la operación
     *                  ]
     */
    public function verificarExisteCamaraPTZGponTN($arrayParametros)
    {
        try
        {
            //obtener los modelos camaras PTZ
            $arrayModelosCamarasPtz    = array();
            $arrayParametrosModelosPtz = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('PARAMETROS PROYECTO GPON SAFECITY',
                                                                            'INFRAESTRUCTURA',
                                                                            '',
                                                                            'MODELOS_CAMARAS_PTZ',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $arrayParametros['strCodEmpresa']);
            foreach($arrayParametrosModelosPtz as $arrayDetalles)
            {
                $arrayModelosCamarasPtz[] = $arrayDetalles['valor1'];
            }
            //obtener la cantidad de servicios
            $arrayEstadosCamarasPtz   = array("Activo","In-Corte","EnPruebas");
            $arrayServiciosCamarasPtz = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                            ->createQueryBuilder('s')
                            ->innerJoin('schemaBundle:InfoServicioTecnico', 'tec', 'WITH', 'tec.servicioId = s.id')
                            ->innerJoin('schemaBundle:InfoElemento', 'ele', 'WITH', 'tec.elementoClienteId = ele.id')
                            ->innerJoin('schemaBundle:AdmiModeloElemento', 'mod', 'WITH', 'ele.modeloElementoId = mod.id')
                            ->where('s.puntoId = :puntoId')
                            ->andWhere("s.productoId = :productoId")
                            ->andWhere("s.estado IN (:estadosServicio)")
                            ->andWhere("mod.nombreModeloElemento IN (:nombresModeloElemento)")
                            ->setParameter('puntoId', $arrayParametros['objServicio']->getPuntoId()->getId())
                            ->setParameter('productoId', $arrayParametros['objServicio']->getProductoId()->getId())
                            ->setParameter('estadosServicio', array_values($arrayEstadosCamarasPtz))
                            ->setParameter('nombresModeloElemento', array_values($arrayModelosCamarasPtz))
                            ->getQuery()
                            ->getResult();
            //setear respuesta
            $arrayRespuesta = array(
                "status"    => "OK",
                "resultado" => count($arrayServiciosCamarasPtz) == 1 ? "SI" : "NO"
            );
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayRespuesta = array(
                "status"    => "ERROR",
                "resultado" => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->verificarExisteCamaraPTZGponTN',
                                            $ex->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene los datos del elemento del ONT de los servicios SafeCity en la red GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 14-10-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 01-08-2022 - Se agrega la validación si se recibe el servicio principal del ont.
     *
     * @param Array $arrayParametros [
     *                          'objServicio'       => objeto del servicio
     *                          'objServicioOnt'    => objeto del servicio ont
     *                          'strUsrCreacion'    => usuario creación
     *                          'strIpCreacion'     => ip creación
     *                  ]
     *
     * @return Array $arrayRespuesta [
     *                          'status'  => estado de la operación
     *                          'mensaje' => mensaje de la operación
     *                          'datos'   => datos del ont
     *                  ]
     */
    public function getDatosOntGponTN($arrayParametros)
    {
        $objServicio    = $arrayParametros['objServicio'];
        $objInfoServcio = $arrayParametros['objServicioOnt'];
        try
        {
            if(!is_object($objInfoServcio))
            {
                //validar objeto
                if(!is_object($objServicio))
                {
                    throw new \Exception("No es válido el objeto del servicio, por favor notificar a Sistemas.");
                }
                //obtengo la caracteristica de la relación
                $objServCaractDatos = $this->getServicioProductoCaracteristica($objServicio,
                                                                               'RELACION_SERVICIOS_GPON_SAFECITY',
                                                                               $objServicio->getProductoId());
                if(!is_object($objServCaractDatos))
                {
                    throw new \Exception("No es encontró la característica de la relación del servicio principal ONT, ".
                                         "por favor notificar a Sistemas.");
                }
                //obtengo el servicio principal
                $objInfoServcio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($objServCaractDatos->getValor());
                if(!is_object($objInfoServcio))
                {
                    throw new \Exception("No es encontró el servicio principal ONT, por favor notificar a Sistemas.");
                }
            }

            //Consultar el estado del DATOS SAFECITY
            $arrayDatos['strEstado'] = $objInfoServcio->getEstado();
            //Consultar informacion del ONT del servicio DATOS SAFECITY
            $objInfoServcioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                          ->findOneBy(array("servicioId" => $objInfoServcio->getId()));
            $strIdElementoCliente  = $objInfoServcioTecnico->getElementoClienteId();
            if(empty($strIdElementoCliente))
            {
                throw new \Exception("No es encontró el elemento del cliente en el servicio principal ONT, por favor notificar a Sistemas.");
            }
            $objInfoElemento = $this->emComercial->getRepository('schemaBundle:InfoElemento')->find($strIdElementoCliente);
            if(!is_object($objInfoElemento))
            {
                throw new \Exception("No es encontró el elemento del cliente en el servicio principal ONT, por favor notificar a Sistemas.");
            }
            $arrayDatos['intIdOnt']    = $objInfoElemento->getId();
            $arrayDatos['strSerieOnt'] = $objInfoElemento->getSerieFisica();
            //Se consulta la Mac del Ont del servicio Datos Safecity
            $arrayDatos['strMacOnt']   = "";
            $objMacDelServicio = $this->getServicioProductoCaracteristica($objInfoServcio,
                                                                          "MAC ONT",
                                                                          $objInfoServcio->getProductoId());
            if(is_object($objMacDelServicio))
            {
                $arrayDatos['strMacOnt'] = $objMacDelServicio->getValor();
            }
            $arrayDatos['strNombreOnt'] = $objInfoElemento->getNombreElemento();
            $objModeloElemento          = $objInfoElemento->getModeloElementoId();
            $arrayDatos['strModeloOnt'] = $objModeloElemento->getNombreModeloElemento();
            $arrayDatos['strMarcaOnt']  = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
            $arrayDatos['strNombreProducto'] = $objInfoServcio->getProductoId()->getDescripcionProducto();
            //setear respuesta
            $arrayRespuesta = array(
                "status"  => "OK",
                "mensaje" => "Se obtuvo los datos del ONT",
                "datos"   => $arrayDatos
            );
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayRespuesta = array(
                "status"  => "ERROR",
                "mensaje" => $ex->getMessage(),
                "datos"   => array()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->verificarExisteCamaraPTZGponTN',
                                            $ex->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
        return $arrayRespuesta;
    }

    /**
     * Funcion encargada de crear la tarea automatica para la configuracion de la camara de safecity
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 21-05-2021
     *
     * @param $arrayParametros: [ intEmpresaId            => codigo de la empresa,
     *                            strPrefijoEmpresa       => prefijo de la empersa,
     *                            intServicioOrigenId     => id servicio del feature mascarilla,
     *                            intIdServicioCamara     => id servicio de la camara,
     *                            strTipoDeServicio       => tipo de servicio: SERVICIO_MASCARILLA,
     *                            strUsrCreacion          => usuario de creacion,
     *                            strIpCreacion           => ip del cliente,
     *                            strDepartamentoOrigen   => departamento de la sesion ]
     *
     * @return $arrayRespuesta  => [ status  => OK u ERROR
     *                               mensaje => mensaje de respuesta ]
     */
    public function envioTareaServicioMascarilla($arrayParametros)
    {
        $arrayRespuesta        = array();
        $arrayParametrosTarea  = array();
        $strEstatus            = "OK";
        $strMensaje            = "";
        $intIdServicioCamara   = $arrayParametros["intIdServicioCamara"];
        $intIdServicioOrigen   = $arrayParametros["intServicioOrigenId"];

        try
        {
            if(!empty($intIdServicioCamara))
            {
                $objInfoServicioCamara = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioCamara);
            }
            if(!empty($intIdServicioOrigen))
            {
                $objInfoServicioOrigen = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicioOrigen);
            }
            //Se obtiene el valor maximo de camaras por punto y codigo de producto DATOS SAFECITY
            $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                             'INFRAESTRUCTURA',
                                                             'PARAMETROS',
                                                             'TIPO_SERVICIO',
                                                             $arrayParametros["strTipoDeServicio"],
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             $arrayParametros["intEmpresaId"]);
            if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
            {
                $strTareaConfiguracionMascarilla = $arrayParametrosDet["valor3"];
                $strNombreProceso                = $arrayParametrosDet["valor4"];
            }
            //************Asignar Tarea de configuracion de SERVICIO MASCARILLA a la CAMARA*************//
            //Se crea la tarea de condifuracion hacia el departamento parametrizado encargado de realizar esta accion
            $arrayParametrosDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                    'INFRAESTRUCTURA',
                                                                    'PARAMETROS',
                                                                    'DEPARTAMENTO_QUE_CONFIGURA_LA_CAMARA',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $arrayParametros["intEmpresaId"]);
            if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
            {
                $strIdPersonaEmpresaRol = $arrayParametrosDet["valor5"];
            }
            //1ero.- Se obtiene el nombre de la tarea
            $objProceso = $this->emSoporte->getRepository('schemaBundle:AdmiProceso')->findOneByNombreProceso($strNombreProceso);
            if (is_object($objProceso))
            {
                $objTarea  = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                             ->findOneBy(array("nombreTarea" => $strTareaConfiguracionMascarilla,
                                                               "estado"      => "Activo"));
                if(is_object($objTarea))
                {
                    $intIdTarea = $objTarea->getId();
                }
            }
            //2do.- Se obtiene el punto del servicio
            if(is_object($objInfoServicioCamara))
            {
                $objInfoPunto = $objInfoServicioCamara->getPuntoId();
            }
            //Consultar el idPersona
            $objInfoPersonaEmpresaRol = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")->find($strIdPersonaEmpresaRol);
            if(is_object($objInfoPersonaEmpresaRol))
            {
                if(is_object($objInfoPersonaEmpresaRol->getPersonaId()))
                {
                    $intIdPersona       = $objInfoPersonaEmpresaRol->getPersonaId()->getId();
                    $strNombrePerAsigna = $objInfoPersonaEmpresaRol->getPersonaId()->getNombres()." ".
                                          $objInfoPersonaEmpresaRol->getPersonaId()->getApellidos();
                }
                //Se obtiene el deparamento del responsable
                $objAdmiDepartamento = $this->emComercial->getRepository("schemaBundle:AdmiDepartamento")
                                                         ->find($objInfoPersonaEmpresaRol->getDepartamentoId());
                if(is_object($objAdmiDepartamento))
                {
                    $arrayParametrosTarea["objDepartamento"] = $objAdmiDepartamento;
                }
            }
            $strLoginAux = "";
            if(is_object($objInfoServicioCamara))
            {
                $strLoginAux = $objInfoServicioCamara->getLoginAux();
            }
            $arrayParametrosTarea["strObservacion"]         = "Tarea automática para la configuración del : ".$arrayParametros["strTipoDeServicio"].
                                                              " en la camara: ".$strLoginAux;
            $arrayParametrosTarea["intTarea"]               = $intIdTarea;
            $arrayParametrosTarea["strTipoAfectado"]        = "Cliente";
            $arrayParametrosTarea["objPunto"]               = $objInfoPunto;
            $arrayParametrosTarea["strEmpresaCod"]          = $arrayParametros["intEmpresaId"];
            $arrayParametrosTarea["strPrefijoEmpresa"]      = $arrayParametros["strPrefijoEmpresa"];
            $arrayParametrosTarea["strUsrCreacion"]         = $arrayParametros["strUsrCreacion"];
            $arrayParametrosTarea["strIpCreacion"]          = $arrayParametros["strIpCreacion"];
            $arrayParametrosTarea["intDepartamentoOrigen"]  = $arrayParametros["strDepartamentoOrigen"];
            $arrayParametrosTarea["strBanderaTraslado"]     = "S";
            $arrayParametrosTarea["strRegion"]              = "";
            $arrayParametrosTarea["strIdPersonaAsig"]       = $intIdPersona;
            $arrayParametrosTarea["strNombrePersonaAsig"]   = $strNombrePerAsigna;
            $arrayParametrosTarea["strIdPerRolAsig"]        = $strIdPersonaEmpresaRol;
            $serviceInfoCambPlan = $this->container->get('tecnico.InfoCambiarPlan');
            $intNumeroTarea = $serviceInfoCambPlan->crearTareaRetiroEquipoPorDemo($arrayParametrosTarea);
            //************Asignar Tarea de configuracion de SERVICIO MASCARILLA a la CAMARA*************//
            //Asociar el numero de la tarea el servicio
            if(!empty($intNumeroTarea) && is_object($objInfoServicioCamara) && is_object($objInfoServicioOrigen))
            {
                $strIdDetalle        = "";
                $objInfoComunicacion = $this->emComercial->getRepository("schemaBundle:InfoComunicacion")->find($intNumeroTarea);
                if(is_object($objInfoComunicacion))
                {
                    $strIdDetalle = $objInfoComunicacion->getDetalleId();
                }
                $this->ingresarServicioProductoCaracteristica($objInfoServicioCamara,
                                                            $objInfoServicioCamara->getProductoId(),
                                                            "ID_DETALLE_CONFIGURACION_MASCARILLA",
                                                            $strIdDetalle,
                                                            $arrayParametros["strUsrCreacion"]);
                $this->ingresarServicioProductoCaracteristica($objInfoServicioCamara,
                                                            $objInfoServicioCamara->getProductoId(),
                                                            "TAREA_CONFIGURACION_MASCARILLA",
                                                            $intNumeroTarea,
                                                            $arrayParametros["strUsrCreacion"]);
                $this->ingresarServicioProductoCaracteristica($objInfoServicioOrigen,
                                                            $objInfoServicioOrigen->getProductoId(),
                                                            "ID_DETALLE_CONFIGURACION_MASCARILLA",
                                                            $strIdDetalle,
                                                            $arrayParametros["strUsrCreacion"]);
                $this->ingresarServicioProductoCaracteristica($objInfoServicioOrigen,
                                                            $objInfoServicioOrigen->getProductoId(),
                                                            "TAREA_CONFIGURACION_MASCARILLA",
                                                            $intNumeroTarea,
                                                            $arrayParametros["strUsrCreacion"]);
                //Actualizar de estado el servicio y generar el historial
                if(is_object($objInfoServicioOrigen))
                {
                    $objInfoServicioOrigen->setEstado("EnPruebas");
                    $this->emComercial->persist($objInfoServicioOrigen);
                    $this->emComercial->flush();
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objInfoServicioOrigen);
                    $objServicioHistorial->setObservacion("Tarea automatica #".$intNumeroTarea.", para la configuracion del servicio: ".
                                                           $arrayParametros["strTipoDeServicio"]);
                    $objServicioHistorial->setIpCreacion($arrayParametros["strIpCreacion"]);
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                    $objServicioHistorial->setEstado("EnPruebas");
                    $this->emComercial->persist($objServicioHistorial);
                    $this->emComercial->flush();
                }
            }
            $strEstatus = "OK";
            $strMensaje = "Proceso realizado con exito";
        }
        catch(\Exception $ex)
        {
            $strEstatus = "ERROR";
            $strMensaje = "Ocurrió un error en la creacion de la tarea para la configuracion del "
                           +$arrayParametros["strTipoDeServicio"]+", Por favor consultar con Sistemas.";

        }
        $arrayRespuesta["status"]    = $strEstatus;
        $arrayRespuesta["respuesta"] = $strMensaje;
        return $arrayRespuesta;
    }

    /**
     * Metodo encargado de buscar registro de tareas asociadas al login enviado.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 13-12-2021
     *
     * @param $arrayParametros: [ login  => login del cliente a buscar,
     *                                                                                      ]
     *
     * @return $arrayRespuesta  => [ status  => OK/ERROR
     *                               msg => mensaje de respuesta
     *                               data => datos obtenidos]
     *
     */
    public function getCuadrillasAsignables($arrayParams)
    {
        $strLogin = $arrayParams['login'];
        $arrayIdDetalles = array();
        $arrayHipotesisId = array();
        $arrayCuadrillasAsignables = array();
        $arrayRespuesta = array('status' => 'ERROR', 'msg' => 'Ha ocurrido un error al buscar las tareas', 'data' => '');

        try
        {
            $arrayParametrosDet   = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                    'INFRAESTRUCTURA',
                    'PARAMETROS',
                    'ESTADOS_TAREAS_CUADRILLAS',
                    '',
                    '',
                    '',
                    '',
                    '',
                    10);

            if(!empty($arrayParametrosDet) && isset($arrayParametrosDet["valor1"]))
            {
                $arrayEstadosTarea = json_decode($arrayParametrosDet["valor1"], true);
            }

            /*Buscamos todas las partes afectadas con el login enviado por parametro.*/
            $arrayInfoParteAfectada = $this->emInfraestructura
                ->getRepository("schemaBundle:InfoParteAfectada")
                ->findBy(array(
                    'afectadoNombre' => $strLogin,
                    'tipoAfectado' => 'Cliente'
                ));

            /*Validamos que el arreglo este correcto.*/
            if (empty($arrayInfoParteAfectada) || count($arrayInfoParteAfectada) <= 0)
            {
                throw new \Exception('No se pudo obtener el listado de InfoParteAfectada.');
            }

            /*Realizamos un foreach para obtener todos los detallesId de las partes afectadas.*/
            foreach ($arrayInfoParteAfectada as $objParteAfectada)
            {
                $arrayIdDetalles[] = $objParteAfectada->getDetalleId();
            }

            /*Realizamos una busqueda con los Ids obtenidos anteriormente.*/
            $arrayInfoDetalles = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                ->createQueryBuilder('i')
                ->where('i.detalleHipotesisId IS NOT NULL')
                ->andWhere('i.id IN (:ids)')
                ->setParameter('ids', $arrayIdDetalles)
                ->getQuery()
                ->getResult();

            /*Validamos que el arreglo este correcto.*/
            if (empty($arrayInfoDetalles) && count($arrayInfoDetalles) <= 0)
            {
                throw new \Exception('No se pudo obtener el listado de InfoDetalle.');
            }

            /*Realizamos un foreach para obtener todos los detallesHipotesisIds.*/
            foreach ($arrayInfoDetalles as $objInfoDetalle)
            {
                $arrayHipotesisId[] = $objInfoDetalle->getDetalleHipotesisId();
            }

            /*Realizamos una busqueda con los Ids obtenidos anteriormente.*/
            $arrayInfoParteTareas = $this->emSoporte
                ->getRepository("schemaBundle:InfoTarea")
                ->findBy(array(
                    'detalleHipotesisId' => $arrayHipotesisId,
                    'estado' => $arrayEstadosTarea,
                    'tipoAsignado' => array('CUADRILLA')
                ));

            foreach ($arrayInfoParteTareas as $objInfoTarea)
            {
                $arrayCuadrillaAsignable['nombreAsignado'] = strtoupper($objInfoTarea->getAsignadoNombre())                ;
                $arrayCuadrillaAsignable['tipoAsignado'] = $objInfoTarea->getTipoAsignado();
                $arrayCuadrillaAsignable['asignadoId'] = $objInfoTarea->getAsignadoId();
                $arrayCuadrillaAsignable['numeroTarea'] = $objInfoTarea->getNumeroTarea();
                $arrayCuadrillaAsignable['detalleId'] = $objInfoTarea->getDetalleId();
                $arrayCuadrillaAsignable['numero'] = $objInfoTarea->getNumero();

                $arrayCuadrillasAsignables[] = $arrayCuadrillaAsignable;
            }

            $arrayRespuesta['status'] = 'OK';
            $arrayRespuesta['data'] =  $arrayCuadrillasAsignables;

        }
        catch(\Exception $ex)
        {
            $arrayRespuesta['msg'] = $ex->getMessage();
        }

        return $arrayRespuesta;

    }

    /**
     * Función que valida la disponibilidad de puerto para los servicios GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 21-09-2021
     *
     * @param Array $arrayParametros [
     *                          'objPunto'          => objeto del punto
     *                          'strTipoOrden'      => tipo de orden - NUEVO_SERVICIO - FACTIBILIDAD
     *                          'strCodEmpresa'     => id empresa
     *                          'strPrefijoEmpresa' => prefijo empresa
     *                          'strUsrCreacion'    => usuario creación
     *                          'strIpCreacion'     => ip creación
     *                  ]
     *
     * @return Array $arrayResultado [
     *                          'status'       => estado de la operación
     *                          'mensaje'      => mensaje de la operación
     *                          'disponible'   => SI o NO
     *                          'objServicio'  => objeto servicio
     *                  ]
     */
    public function validarVrfCamaraGponMpls($arrayParametros)
    {
        $arrayOltVerificarVrf = isset($arrayParametros['arrayOltVerificarVrf']) ? $arrayParametros['arrayOltVerificarVrf']
                                : array();
        $objPunto          = $arrayParametros['objPunto'];
        $strTipoOrden      = $arrayParametros['strTipoOrden'];
        $strCodEmpresa     = $arrayParametros['strCodEmpresa'];
        $strPrefijoEmpresa = $arrayParametros['strPrefijoEmpresa'];
        $strUsrCreacion    = $arrayParametros['strUsrCreacion'];
        $strIpCreacion     = $arrayParametros['strIpCreacion'];
        try
        {
            //validar objeto
            if(!is_object($objPunto))
            {
                throw new \Exception("No es válido el objeto del punto, por favor notificar a Sistemas.");
            }
            //obtener servicio camara
            $arrayParObtenerServ = array(
                "objPunto"       => $objPunto,
                "strParametro"   => "PRODUCTO_ADICIONAL_CAMARA",
                "strCodEmpresa"  => $strCodEmpresa,
                "strUsrCreacion" => $strUsrCreacion,
                "strIpCreacion"  => $strIpCreacion
            );
            $arrayResultSerCamara = $this->getServicioGponPorProducto($arrayParObtenerServ);
            //obtener servicio principal
            $arrayParObtenerServ["strParametro"] = "PRODUCTO_PRINCIPAL";
            $arrayResultSerPrincipal = $this->getServicioGponPorProducto($arrayParObtenerServ);
            //verificar servicio camara
            if($arrayResultSerPrincipal["status"] == "OK" && $arrayResultSerCamara["status"] == "OK"
               && is_object($arrayResultSerPrincipal["objServicio"]) && is_object($arrayResultSerCamara["objServicio"])
               && (
                   ($strTipoOrden == "NUEVO_SERVICIO" && $arrayResultSerPrincipal["objServicio"]->getEstado() != 'Pre-servicio')
                   || $strTipoOrden == "FACTIBILIDAD"
                )
              )
            {
                $objServicio        = $arrayResultSerPrincipal["objServicio"];
                $objServCamara      = $arrayResultSerCamara["objServicio"];
                //obtengo el servicio
                $objServCamActiva   = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                             ->findOneBy(array("puntoId"    => $objPunto->getId(),
                                                               "productoId" => $objServCamara->getProductoId()->getId(),
                                                               "estado"     => "Activo"));
                if(!is_object($objServCamActiva))
                {
                    //obtengo maximo vrf
                    $arrayParMaximoVrf  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        'MAXIMO_VRF_ELEMENTO_POR_SERVICIOS',
                                                                        $objServCamara->getProductoId()->getId(),
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
                    if(empty($arrayParMaximoVrf) || !isset($arrayParMaximoVrf['valor2']) || empty($arrayParMaximoVrf['valor2']))
                    {
                        throw new \Exception("No se ha podido obtener el maximo de VRF para los servicios ".
                                             $objServCamara->getProductoId()->getDescripcionProducto().
                                             ", por favor notificar a Sistemas.");
                    }
                    $intMaximoVrf = $arrayParMaximoVrf['valor2'];
                    //obtengo parametros del ws
                    $arrayParWsRdaVrf = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        'PARAMETROS PARA WS de RDA - Verificacion VRF',
                                                                        'VERIFICACION_VRF',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
                    if(empty($arrayParWsRdaVrf) || !isset($arrayParWsRdaVrf['valor2']) || empty($arrayParWsRdaVrf['valor2']))
                    {
                        throw new \Exception("No se encontró los parámetros del WS RDA para la verificación de la vrf, ".
                                             "por favor notificar a Sistemas.");
                    }
                    //datos del cliente
                    $strIdentificacion     = "";
                    $strNombreCliente      = "";
                    //obtengo la persona empresa rol
                    $objPersonaEmpresaRol  = $objPunto->getPersonaEmpresaRolId();
                    if(is_object($objPersonaEmpresaRol))
                    {
                        $strIdentificacion = $objPersonaEmpresaRol->getPersonaId()->getIdentificacionCliente();
                        $strNombreCliente  = $objPersonaEmpresaRol->getPersonaId()->__toString();
                    }
                    $objInterfaceElemento = null;
                    if($strTipoOrden == "NUEVO_SERVICIO")
                    {
                        //obtener interface elemento
                        $objServicioTecnico   = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array("servicioId" => $objServicio->getId()));
                        $objInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                            ->find($objServicioTecnico->getInterfaceElementoId());
                    }
                    elseif($strTipoOrden == "FACTIBILIDAD")
                    {
                        if(empty($arrayParametros['intIdInterfaceConector']))
                        {
                            throw new \Exception("Esta vacío el conector de la factibilidad para realizar la ".
                                                 "verificación de la VRF de cámara, por favor notificar a Sistemas.");
                        }
                        $arrayElementoContenedor = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                      ->getElementoPadre($arrayParametros['intIdInterfaceConector'], 
                                                                                        'INTERFACE', 
                                                                                        'OLT');
                        if(empty($arrayElementoContenedor))
                        {
                            throw new \Exception("No se pudo obtener el elemento conector para realizar la ".
                                                 "verificación de la VRF de cámara, por favor notificar a Sistemas.");
                        }
                        //obtener interface elemento
                        $objInterfaceElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                            ->find($arrayElementoContenedor[0]['IDINTERFACEELEMENTO']);
                    }
                    //verificar elemento
                    if(!is_object($objInterfaceElemento))
                    {
                        throw new \Exception("No se pudo obtener la interface del elemento olt para la verificación ".
                                             "de la VRF de cámara, por favor notificar a Sistemas.");
                    }
                    //obtener el elemento
                    $objElemento = $objInterfaceElemento->getElementoId();
                    if(!isset($arrayOltVerificarVrf[$objElemento->getId()]))
                    {
                        //obtener ip del elemento
                        $objIp       = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneByElementoId($objElemento->getId());
                        if(!is_object($objIp))
                        {
                            throw new \Exception("No se pudo obtener la ip del elemento olt para la verificación ".
                                                 "de la VRF de cámara, por favor notificar a Sistemas.");
                        }
                        $arrayDatos["nombre_olt"]      = $objElemento->getNombreElemento();
                        $arrayDatos["ip_olt"]          = $objIp->getIp();
                        $arrayDatos["puerto_olt"]      = $objInterfaceElemento->getNombreInterfaceElemento();
                        $arrayDatos["modelo_olt"]      = $objElemento->getModeloElementoId()->getNombreModeloElemento();
                        $arrayDatos["estado_servicio"] = $objServCamara->getEstado();
                        $arrayDatos["modulo"]          = $arrayParWsRdaVrf["valor2"];
                        $arrayDatos["bandEjecuta"]     = $arrayParWsRdaVrf["valor3"];
                        $arrayDatos["opcion"]          = $arrayParWsRdaVrf["valor4"];
                        $arrayDatos["accion"]          = $arrayParWsRdaVrf["valor5"];
                        //datos ws
                        $arrayDatosMiddleware = array(
                            'nombre_cliente'       => $strNombreCliente,
                            'login'                => $objPunto->getLogin(),
                            'identificacion'       => $strIdentificacion,
                            'datos'                => $arrayDatos,
                            'opcion'               => "TN_CONSULTA_VRFS",
                            'ejecutaComando'       => $this->ejecutaComando,
                            'usrCreacion'          => $strUsrCreacion,
                            'ipCreacion'           => $strIpCreacion,
                            'comandoConfiguracion' => $this->ejecutaComando,
                            'empresa'              => $strPrefijoEmpresa,
                        );
                        $arrayResultadoWs = $this->rdaMiddleware->middleware(json_encode($arrayDatosMiddleware));
                        if($arrayResultadoWs["status"] != "OK")
                        {
                            if($strTipoOrden == "NUEVO_SERVICIO")
                            {
                                $strMsjError = "Favor crear un nuevo punto para brindar la factibilidad a un ".
                                               "olt multiplataforma con vrf disponibles.";
                            }
                            else
                            {
                                $strMsjError = "Favor brindar la factibilidad a un olt multiplataforma con vrf disponibles.";
                            }
                            throw new \Exception($arrayResultadoWs["mensaje"]."<br>".$strMsjError);
                        }
                        //verificar total de vrfs
                        if($arrayResultadoWs["total"] >= $intMaximoVrf)
                        {
                            //setear arreglo de olt verificados
                            $arrayOltVerificarVrf[$objElemento->getId()] = "ERROR";
                            throw new \Exception("No hay vrf disponibles del producto ".
                                                 $objServCamara->getProductoId()->getDescripcionProducto().
                                                 " para el elemento ".$objElemento->getNombreElemento().".");
                        }
                        //setear arreglo de olt verificados
                        $arrayOltVerificarVrf[$objElemento->getId()] = "OK";
                        //setear respuesta
                        $arrayResultado = array(
                            "status"  => "OK",
                            "mensaje" => "Se verifico correctamente la vrf."
                        );
                    }
                    else
                    {
                        //setear respuesta
                        $arrayResultado = array(
                            "status"  => $arrayOltVerificarVrf[$objElemento->getId()],
                            "mensaje" => ""
                        );
                    }
                }
                else
                {
                    //setear respuesta
                    $arrayResultado = array(
                        "status"  => "OK",
                        "mensaje" => "Existen servicios de cámaras activos."
                    );
                }
            }
            elseif($arrayResultSerPrincipal["status"] == "OK" && $arrayResultSerCamara["status"] == "OK"
                   && is_object($arrayResultSerPrincipal["objServicio"]) && is_object($arrayResultSerCamara["objServicio"])
                   && $strTipoOrden == "NUEVO_SERVICIO"
                   && $arrayResultSerPrincipal["objServicio"]->getEstado() == 'Pre-servicio')
            {
                //setear respuesta
                $arrayResultado = array(
                    "status"  => "OK",
                    "mensaje" => "Se realiza la verificación en la factibilidad."
                );
            }
            else
            {
                //setear respuesta
                $arrayResultado = array(
                    "status"  => "OK",
                    "mensaje" => "No existe servicios de cámaras para la verificación de la vrf."
                );
            }
        }
        catch (\Exception $ex)
        {
            //setear respuesta
            $arrayResultado = array(
                "status"      => "ERROR",
                "mensaje"     => $ex->getMessage()
            );
            //guardar error
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioTecnicoService->validarVrfCamaraGponMpls',
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion
                                           );
        }
        $arrayResultado['elementos'] = $arrayOltVerificarVrf;
        return $arrayResultado;
    }

      /**
     * Función que crea una tarea por Jurisdiccion a un Coordinador o Jefe TS de revision de potencias 
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 11-08-2022
     * 
     * @author Jefferson Leon <jlleona@telconet.ec>
     * @version 1.1 21-12-2022 - Se corrige el campo personaId por departamentoId en asignadoId en tareas tipo validación potencia
     * 
     * @author Jefferson Leon <jlleona@telconet.ec>
     * @version 1.2 22-12-2022 - Se corrige departamento destino en tareas de revisión de splitter
     * 
     */
    public function crearTareaPorJurisdiccionPotencia($arrayParametros)
    {
        $objTarea           = $arrayParametros['objTarea'];
        $strLongitud        = $arrayParametros['longitud'];
        $strLatitud         = $arrayParametros['latitud'];
        $strObservaciones   = $arrayParametros['observacion'];
        $strEmpresaCod      = $arrayParametros['empresaCod'];
        $strIpCreacion      = $arrayParametros['ipCreacion'];
        $strUsrCreacion     = $arrayParametros['usrCreacion'];
        $intPuntoId         = $arrayParametros['intPuntoId'];
        $intIdDepartamento  = $arrayParametros['idDepartamento'];
        $intDescripcionRol  = $arrayParametros['rolDepartamental'];
        $intIdEmpresa       = $arrayParametros['idEmpresa'];
        $strJurisdiccion    = $arrayParametros['jurisdiccion'];
        $intFormaContacto   = $arrayParametros['formaContacto']; 
        $strLoginCliente    = $arrayParametros['loginCliente']; 
        $strNombreCliente   = $arrayParametros['nombreCliente']; 
        $strTipoAsignado    = !empty($arrayParametros['tipoAsignado']) ? $arrayParametros['tipoAsignado'] : "EMPLEADO";
        $strTipo            = "";
        $strMensaje         = "";
        $strStatus          = "ERROR";
        $arrayParametrosHist= array();
        $strNombreProceso   = "";
        $strOrigenAccion    = isset($arrayParametros['strOrigenAccion']) ? $arrayParametros['strOrigenAccion'] : '';
        $strPrefijoEmpresa  = isset($arrayParametros['prefijoEmpresa']) ? $arrayParametros['prefijoEmpresa'] : '';
        $boolBandNfs        = isset($arrayParametros['bandNfs']) ? $arrayParametros['bandNfs'] : '';
        $strApp             = isset($arrayParametros['strAplicacion']) ? $arrayParametros['strAplicacion'] : '';
        $arrayParametrosHist["strCodEmpresa"]           = $strEmpresaCod;
        $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strEnviaDepartamento"]    = "N";
        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
        $this->emGeneral->getConnection()->beginTransaction();
        try
        {
            //InfoDetalle
            $entityDetalle = new InfoDetalle();
            $entityDetalle->setTareaId($objTarea);
            $entityDetalle->setLongitud($strLongitud);
            $entityDetalle->setLatitud($strLatitud);
            $entityDetalle->setPesoPresupuestado(0);
            $entityDetalle->setValorPresupuestado(0);
            $entityDetalle->setObservacion($strObservaciones);
            $entityDetalle->setIpCreacion($strIpCreacion);
            $entityDetalle->setFeCreacion(new \DateTime('now'));
            $entityDetalle->setFeSolicitada(new \DateTime('now'));
            $entityDetalle->setUsrCreacion($strUsrCreacion);
            $this->emSoporte->persist($entityDetalle);
            $this->emSoporte->flush();
            //se obtienen los datos del usuario que crea la incidencia
            $arrayDatosUsuario  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                             ->getCoordinadorPorUsuario($arrayParametros);
            $arrayParametrosResponsable = array(
                                            'intDepartamentoId' =>  $intIdDepartamento,
                                            'strDescripcionRol' =>  $intDescripcionRol,
                                            'intCodEmpresa'     =>  $intIdEmpresa,
                                            'strJurisdiccion'   =>  $strJurisdiccion,
                                            'intFormaContacto'  =>  $intFormaContacto
                                            );
            $objPersona         = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                            ->findOneBy(array('login' => $strUsrCreacion));
        
            //InfoDetalleAsignacion
            $entityDetalleAsignacion = new InfoDetalleAsignacion();
            $entityDetalleAsignacion->setDetalleId($entityDetalle);
            $entityDetalleAsignacion->setAsignadoId($intIdDepartamento);
            $entityDetalleAsignacion->setAsignadoNombre($arrayParametros['nombresEmpleado']);
            $entityDetalleAsignacion->setRefAsignadoId($arrayParametros['idPersona']);
            $entityDetalleAsignacion->setTipoAsignado($strTipoAsignado);
            $entityDetalleAsignacion->setRefAsignadoNombre($arrayParametros['nombresEmpleado']);
            $entityDetalleAsignacion->setPersonaEmpresaRolId($arrayParametros['idPersonaEmpresaRol']);
            $entityDetalleAsignacion->setUsrCreacion($strUsrCreacion);
            $entityDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $entityDetalleAsignacion->setIpCreacion($strIpCreacion);
            $entityDetalleAsignacion->setDepartamentoId($arrayDatosUsuario['departamentoId']);
            $entityDetalleAsignacion->setCantonId($arrayDatosUsuario['cantonId']);
            $this->emSoporte->persist($entityDetalleAsignacion);
            $this->emSoporte->flush();
            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"]   = $strObservaciones;
            $arrayParametrosHist["strEstadoActual"]  = "Asignada";
            $arrayParametrosHist["strAccion"]        = "Asignada";
            if(is_object($entityDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $entityDetalle->getId();
            }
            $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
            $objAdmiClaseDocumento  = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                           ->findOneByNombreClaseDocumento("Notificacion Interna Correo");
            $objFormaContacto       = $this->emComunicacion->getRepository("schemaBundle:AdmiFormaContacto")
                                                           ->findPorDescripcionFormaContacto("Correo Electronico");
            if(is_object($objAdmiClaseDocumento) && is_object($objFormaContacto))
            {
                $objInfoComunicacion = new InfoComunicacion();
                $objInfoComunicacion->setFormaContactoId($objFormaContacto->getId());
                $objInfoComunicacion->setRemitenteId($arrayResponsable['personaId']);
                $objInfoComunicacion->setRemitenteNombre($arrayResponsable['nombreCompleto']);
                $objInfoComunicacion->setClaseComunicacion("Recibido");
                $objInfoComunicacion->setDetalleId($entityDetalle->getId());
                $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
                $objInfoComunicacion->setEstado("Activo");
                $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoComunicacion->setUsrCreacion($strUsrCreacion);
                $objInfoComunicacion->setIpCreacion($strIpCreacion);
                $objInfoComunicacion->setPuntoId($intPuntoId);
                $objInfoComunicacion->setEmpresaCod($strEmpresaCod);
                $this->emComunicacion->persist($objInfoComunicacion);
                $this->emComunicacion->flush();
                
                $objInfoCriterioAfectado = new InfoCriterioAfectado();
                $objInfoCriterioAfectado->setId(1);
                $objInfoCriterioAfectado->setDetalleId($entityDetalle);
                $objInfoCriterioAfectado->setCriterio("Clientes");
                $objInfoCriterioAfectado->setOpcion("Cliente:".$strLoginCliente."|OPCION: Punto Cliente");
                $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                $objInfoCriterioAfectado->setUsrCreacion($strUsrCreacion);
                $objInfoCriterioAfectado->setIpCreacion("192.128.65.1");
                $this->emSoporte->persist($objInfoCriterioAfectado);
                $this->emSoporte->flush();
                $objInfoParteAfectada = new InfoParteAfectada();
                $objInfoParteAfectada->setTipoAfectado("Cliente");
                $objInfoParteAfectada->setDetalleId($entityDetalle->getId());
                $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                $objInfoParteAfectada->setAfectadoId($intPuntoId);
                $objInfoParteAfectada->setFeIniIncidencia(new \DateTime('now'));
                $objInfoParteAfectada->setAfectadoNombre($strLoginCliente);
                $objInfoParteAfectada->setAfectadoDescripcion($strNombreCliente);
                $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                $objInfoParteAfectada->setUsrCreacion($strUsrCreacion);
                $objInfoParteAfectada->setIpCreacion('192.168.200.59');
               
                $this->emSoporte->persist($objInfoParteAfectada);
                $this->emSoporte->flush();
                $strPrefijoEmpresa = "MD";
                if($strEmpresaCod == "10")
                {
                    $strPrefijoEmpresa = "TN";
                }
                $arrayParametros    = array(
                    'idCaso'            => '',
                    'perteneceACaso'    => false,
                    'numeracion'        => '',
                    'referencia'        => '',
                    'asignacion'        => $entityDetalleAsignacion,
                    'persona'           => $objPersona ? $objPersona : 'false',
                    'nombreProceso'     => $strNombreProceso,
                    'nombreTarea'       => $objTarea->getNombreTarea() ? $objTarea->getNombreTarea() : '',
                    'estado'            => $objTarea->getEstado() ? $objTarea->getEstado() : '',
                    'empleadoLogeado'   => $strUsrCreacion,
                    'empresa'           => $strPrefijoEmpresa,
                    'detalle'           => $entityDetalle,
                    'observacion'       => $strObservaciones ? $strObservaciones : "");
            }
        
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
            }
            //Proceso que graba tarea en INFO_TAREA
            if ( isset($arrayParametrosHist["intDetalleId"]) )
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
                $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametrosHist["strUsrCreacion"];
                $this->serviceSoporte->crearInfoTarea($arrayParametrosInfoTarea);
                $strStatus     = "OK";
                $strMensaje    = "Se creó tarea exitósamente.";
            }
           
        }
        catch(\Exception $error)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $this->utilService->insertError( 'TELCOS+', 
                                             'SoporteService->crearTareaPorJurisdiccionPotencia', 
                                             $error->getMessage(), 
                                             'telcos', 
                                             '127.0.0.1' );
                    
            $strStatus                  = "ERROR";
            $strMensaje                 = "No se pudo crear la tarea Motivo: ".$error->getMessage();
            $arrayRespuestaFinal[]      = array('status' => $strStatus,
                                                'tipo' => '', 
                                                'mensaje' => $strMensaje, 
                                                'idDetalle' => '');
            return $arrayRespuestaFinal;
        }
        
        $this->emSoporte->getConnection()->close();
        //*RESPUESTA-------------------------------------------------------------*/
        $arrayRespuestaFinal = array(
            'status'    => $strStatus, 
            'tipo'      => $strTipo,
            'mensaje'   => $strMensaje,
            'idDetalle' => $entityDetalle->getId(),
            'idTarea'   => $objInfoComunicacion->getId());
        return $arrayRespuestaFinal;
        //*----------------------------------------------------------------------*/
    }


    /**
     * verificaPotenciaMDFttx
     *
     * Función que permite consumir el WS de MD para consultar la potencia
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 11-08-2022
     * @since 1.0
     *
     * @return Array $arrayResponseWS
     * [
     *    - strUrlPotencia   URL para consumo del servicio
     *    - arrayBodyrequest Parametros que recibe el WS de MD
     * ]
     */
    public function verificaPotenciaMDFttx($arrayBodyrequest)    
    {
        $arrayRest                  = array();
        $arrayRest[CURLOPT_TIMEOUT] = $this->intWsPotenciaServicio;
        $arrayResponseWS            = $this->serviceRestClient->postJSON($this->rutaWebServiceRDA, $arrayBodyrequest, $arrayRest);
        return $arrayResponseWS;
    }

    /**
     * Funcion para enviar el correo de resumen compra
     * @author Joel Broncano <jbroncano@telconet.ec>
     * @version 1.0 15-07-2022
     */
    public function envioCorreoResumenCompra($arrayParametrosCorreo)
    {
        $objOptions         = array(CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_HTTPHEADER     => array('Content-Type: application/json',
                                        'tokencas: '.$arrayParametrosCorreo['token'])); 
        $strJsonData        = json_encode($arrayParametrosCorreo);
        $arrayResponseJson  = $this->serviceRestClient->postJSON($this->urlResumenCompra, $strJsonData , $objOptions);
        return $arrayResponseJson;
    }


     /** 
     * Función que permite el consumo del WS de Analitica de camaras
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.0 20-09-2022
     * 
     * @param Array $arrayParametrosContrato [$arrayParametrosWs]
     * @throws Exception
     * @return Array $arrayResultado [ 'status'  => OK | ERROR
     *                                 'mensaje' => Mensaje de la ejecucion u error ]
     * 
     */
    public function analiticaCamarasWs($arrayParametrosWs)
    {
        try
        {
            $arrayOptions      = array(CURLOPT_SSL_VERIFYPEER => false,);
            //Request para generar el token
            $arrayReqToken = array(username =>$this->strUsernameAnalitica, password=>$this->strPasswordAnalitica);
            $strReqToken   = json_encode($arrayReqToken);
            $arrayToken    = $this->serviceRestClient->postJSON($this->strTokenAnaliticaCamaras, $strReqToken, $arrayOptions);
            $objToken      = json_decode($arrayToken['result']);
            $arrayToken    = get_object_vars($objToken);
            $strToken      =  $arrayToken['access_token'];

            $strBearerToken = 'Bearer '.$strToken;
            //Request con la data para el WS
            $strJsonData       = json_encode($arrayParametrosWs);
            $arrayResponseJson = $this->serviceRestClient->postJSONToken($this->strAnaliticaCamaras, $strJsonData, $strBearerToken, $arrayOptions);
            $strJsonRespuesta  = json_decode($arrayResponseJson['result'], true);
            //Definicion del estado en base al status(code) retornado del WS    
            if(isset($strJsonRespuesta['code']) && $strJsonRespuesta['code'] == "201"
            && isset($strJsonRespuesta['msg']) )
            {   
                $arrayResponse = array('strStatus' => $strJsonRespuesta['code'],
                                       'strMensaje'=> $strJsonRespuesta['msg']);
                $arrayResponse['strStatus']= 'OK';
                $arrayResultado = $arrayResponse;
            }
            else
            {
                $arrayResultado['strStatus'] = "ERROR";
                if(empty($strJsonRespuesta['msg']))
                {
                    $arrayResultado['strMensaje'] = "No Existe Conectividad con el WS Analitica";
                }
                else
                {
                    //Mensaje de error del WS
                    $arrayResultado['strMensaje'] = $strJsonRespuesta['msg']; 
                }
            }

            return $arrayResultado ;
        }
        catch(\Exception $e)
        {
            $strRespuesta   = "Error al consumir el WS de analitica. ".$arrayResultado['strMensaje']." - ".$e->getMessage();
            $arrayResultado = array ('strMensaje'     =>$strRespuesta);

            return $arrayResultado;
        }
    }
    /**
     * Funcion que permite parametrizar los produtos NetlifeCam
     * Por medio de nombre tecnico
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.0 13-10-2022 - Version inicial
     * 
     * 
     * 
    */
    public function paramProductosNetlifeCam()
    {
        $arrayProduNetlifeCam   = $this->emGeneral
                                       ->getRepository('schemaBundle:AdmiParametroDet')
                                       ->get('PROYECTO NETLIFECAM',
                                             'INFRAESTRUCTURA',
                                              '',
                                              'PARAMETRIZACION DE NOMBRES TECNICOS DE PRODUCTOS NETLIFE CAM',
                                              '',
                                              '',
                                              '',
                                              '',
                                              '',
                                              '18');
        $arrayParamProducNetCam   = $this->utilService->obtenerValoresParametro($arrayProduNetlifeCam); 
        return  $arrayParamProducNetCam;
    }

    /**
     * Funcion que permite reversar un olt alta densidad migrado
     * Por medio de nombre del elemento olt y la ip asociada
     * 
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 1.0 15-02-2023
     * 
    */
    public function reversarMigracionPorOlt($arrayBodyrequest)
    {
        $strMensaje                = "";
        $strStatus                 = "";
        $strIpOltMigracion         = $arrayBodyrequest['ipOltNuevoMigracion'];
        $strNombreOltMigracion     = $arrayBodyrequest['nombreOltNuevoMigracion'];
        $strUserPeticion           = $arrayBodyrequest['user'];
        $strMuestraErrorUsuario     = 'NO';
        try
        {
            $strSql         = " BEGIN DB_INFRAESTRUCTURA.INKG_MIGRACION_ALTA_DENSIDAD.P_REVERSO_POR_ELEMENTO(:PV_NOMBRE_OLT,
                                                                                                             :PV_IP_OLT,
                                                                                                             :PV_STATUS,
                                                                                                             :PV_MENSAJE); 
                                    END;";
            $objConn = oci_connect($this->strUsrInfraestructura, $this->strPassInfraestructura, $this->strDatabaseDsn);
            $objStmt = oci_parse($objConn, $strSql);

            oci_bind_by_name($objStmt, ':PV_NOMBRE_OLT', $strNombreOltMigracion);
            oci_bind_by_name($objStmt, ':PV_IP_OLT', $strIpOltMigracion);
            oci_bind_by_name($objStmt, ':PV_STATUS', $strStatus, 25);
            oci_bind_by_name($objStmt, ':PV_MENSAJE', $strMensaje, 2000);
            oci_execute($objStmt);

            if ( $strStatus !=  "OK" )
            {
                $strMuestraErrorUsuario = 'SI';
                throw new \Exception ($strMensaje);
            }

            $arrayRespuesta = array("status"  => $strStatus,
                                    "mensaje" => $strMensaje);
            return $arrayRespuesta;
        }
        catch(\Exception $e)
        {
            $strStatus = "ERROR";
            if($strMuestraErrorUsuario === "SI")
            {
                $strMensaje = $e->getMessage();
            }
            else
            {
                $strMensaje = "Error en el proceso validar con soporte de sistemas. ".$e->getMessage();
            }
            $arrayRespuesta = array("status"  => $strStatus,
                                    "mensaje" => $strMensaje);
            return $arrayRespuesta;                            
        }
    }

    /*
     * Funcion que busca en infosubred
     * 
     *
     * @param String              $strSubred
     * @param String              $strUso
     * @param String              $strTipo
     * @param int                 $intElemento_id
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     * @author Creado: Andre Lazo <alazo@telconet.ec>
     * @version 1.0 2022-12-27
     *
     */
    public function buscarSubredEnInfoSubred($arrayParametros)
    {
        //se crea array de parametros enviados  a la funcion que ejecuta el query
       $arrayResultado = $this->emInfraestructura->getRepository('schemaBundle:InfoSubred')->getSubredByElementoTipoUso($arrayParametros);
   

        //validamos la cantidad de datos devueltos en la consulta anterior
        if(count($arrayResultado)<=0)
        {
            $arrayRespuestaFinal[] = array('status' => 'NO EXISTE SUBRED LAN',
                'mensaje' => 'No existe Elemento con: <br>'
                . 'Subred:<b>' . $arrayParametros['subred'] . ' </b><br>'
                . 'No podrá continuar con el proceso, Favor Revisar! <br>');
            return $arrayRespuestaFinal;
        }
        $arrayRespuestaFinal[] = array('status' => 'OK',
                'mensaje' =>  $arrayResultado[0]['idSubred']);
        return $arrayRespuestaFinal;
    }
    
    /**
     * Funcion que busca en infosubred
     * 
     *
     * @param String              $strSerie
     * @return array con dos valores: String 'status' indica OK/ERROR, String 'mensaje' indica el mensaje a presentar en caso de ERROR
     * @author Creado: Andre Lazo <alazo@telconet.ec>
     * @version 1.0 2022-12-28
     *
     */
    public function obtenerInterfaceporserie($strSerie,$strEmpresaCod)
    {
        //se crea array de parametros enviados  a la funcion que ejecuta el query
        $arrayParDet= $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
        ->getOne('VALIDACIONES_CLEAR_CHANNEL','COMERCIAL','','TIPO_PRODUCTO_MODELO','','','','','',$strEmpresaCod);
        $strTipoProducto = $arrayParDet["valor1"];
        $arrayParametros  = array ( 
            'strSerie'   => $strSerie, 
            'modelProducto'=>$strTipoProducto
            ); 

        $arrayResultado = $this->emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')->getInterfaceBySerie($arrayParametros);
   

        //validamos la cantidad de datos devueltos en la consulta anterior
        if(count($arrayResultado)<=0)
        {
            $arrayRespuestaFinal[] = array('status' => 'NO EXISTEN INTERFACE',
                'mensaje' => 'No existen interface de: <br>'
                . 'Serie:<b>' . $strSerie . ' </b><br>'
                . 'No podrá continuar con el proceso, Favor Revisar! <br>');
            return $arrayRespuestaFinal;
        }

    

        $arrayRespuestaFinal[] = array('status' => 'OK',
            'mensaje' =>  $arrayResultado);
        return $arrayRespuestaFinal;
    }

    /**
     * Funcion que permite validar la serie de un elemento tanto Naf y Telcos.
     * Se valida también que la serie ingresada corresponda al tipo de elemento.
     * @author Geovanny Cudco <acudco@telconet.ec>
     * @version 1.0 16-03-2023
     * 
     * @author Geovanny Cudco <acudco@telconet.ec>
     * @version 1.1 21-06-2023 Se agregan validaciones para seleccionar el último registro en estado PI. 
     *                         Se presentan mensajes de acuerdo al estado del equipo diferente a PI (IN, RE, PR, IB)
     * 
     * @param Array $arrayParametros [$arrayParametros]
     * @throws Exception
     * @return Array $arrayResultado [ 'status'  => OK | ERROR
     *                                 'mensaje' => Mensaje de la ejecucion u error ]
    */
    public function validarNafTelcos($arrayParametros)
    {
        $strSerie           = strtoupper($arrayParametros['strSerieElemento']);        
        $strEstado          = $arrayParametros['strEstado'];
        $strTipo            = $arrayParametros['strTipoElemento'];
        $strBandera         = $arrayParametros['strBandera'];
        $arrayDatosNaf      = array();
        $arrayRespuesta     = array();
        $intBandModelo      = 0;        

        $arrayNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                              ->findBy(array("numeroSerie"=>strtoupper($strSerie)));                              

        $objAdmiParametroCab = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                ->findOneBy(array('nombreParametro' => 'EQUIPOS SIN MODELO',
                                                    'estado'        => 'Activo'));

        $arrayModelosNoRegul = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->findBy(array('parametroId'   => $objAdmiParametroCab->getId(),
                                                               'estado'   => 'Activo'));
        
        if(isset($arrayNaf) && !empty($arrayNaf))
        {
            $arrayDatosNaf = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                                        ->validarSerieNaf(array("strSerie"  => $strSerie,
                                                                                "strEstado" => 'PI',
                                                                                "strTipo"   => $strTipo));
            $intContador1 = count($arrayNaf);  
            $intContador2 = count($arrayDatosNaf);         

            if($intContador1>1 && $intContador2>1)
            {
                $arrayRespuesta[] = array('status' => 'EQUIPO CON INCONSISTENCIA DE DATOS',
                                          'mensaje' => 'El Elemento con: <br>'
                                        . 'Serie:<b>' . $strSerie . ' </b><br>'
                                        . 'Está registrado <b>' . $intContador2. '</b> veces en estado PI<br>'
                                        . 'Por favor verificar! <br>');
            }
            elseif($intContador1>1 && $intContador2==0)
            {
                $objNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                              ->findOneBy(array("numeroSerie"=>strtoupper($strSerie),
                                                "estado"=> 'PI'));

                if(is_object($objNaf))
                {
                    $arrayRespuesta[] = array('status' => 'NO CONSTA EN NAF',
                                                    'mensaje' => 'El Elemento con <br>'
                                                . 'Serie:<b>' . $strSerie . ' </b><br>'
                                                . 'No concuerda con <br>'
                                                . 'Tipo:<b>' . $strTipo . ' </b><br>'
                                                . 'Por favor verificar la Serie o Validar con bodega! <br>');
                }
                                                
                $arrayRespuesta[] = array('status' => 'EQUIPO CON INCONSISTENCIA DE DATOS',
                                          'mensaje' => 'El Elemento con: <br>'
                                        . 'Serie:<b>' . $strSerie . ' </b><br>'
                                        . 'Está registrado <b>' . $intContador1. '</b> veces en el repositorio<br>'
                                        . 'No tiene un estado PI, Por favor consulte con bodega! <br>');
            }
            elseif($intContador1>1 && $intContador2==1)
            {
                $strModelo              = $arrayDatosNaf[0]['modeloElemento'];
                $strMarca               = $arrayDatosNaf[0]['marcaElemento'];                
                $strDescripcion         = $arrayDatosNaf[0]['descripcion'];  
                $intIdMarca             = $arrayDatosNaf[0]['idMarcaElemento'];
                $intIdModelo            = $arrayDatosNaf[0]['idModeloElemento'];
                $strMac                 = $arrayDatosNaf[0]['mac'];
                $strCapadidadEntrada    = $arrayDatosNaf[0]['capacidadEntrada'];

                $arrayRespuesta[] = array('status' => 'OK',
                                            'mensaje' => str_replace(',', ' ', $strDescripcion) . "," 
                                                                            . $strMac."," 
                                                                            . $strModelo."," 
                                                                            . $strCapadidadEntrada. "," 
                                                                            . $strMarca.","
                                                                            . $intIdMarca.","
                                                                            . $intIdModelo);
            }
            elseif($intContador1==1)
            {
                $objNaf = $this->emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                        ->findOneBy(array("numeroSerie"=>strtoupper($strSerie)));  

                foreach ($arrayModelosNoRegul as $modelo):                
                    if($objNaf->getModelo()==$modelo->getValor1())
                    {
                        $intBandModelo=1;
                    }
                endforeach;

                if(($objNaf->getEstado()=='PI') && ($intBandModelo==0) )
                {
                    $arrayDatosNaf = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                                        ->validarSerieNaf(array("strSerie"  => $strSerie,
                                                                                "strEstado" => $strEstado,
                                                                                "strTipo"   => $strTipo));
                    if(isset($arrayDatosNaf) && !empty($arrayDatosNaf))
                    {
                        $strModelo              = $arrayDatosNaf[0]['modeloElemento'];
                        $strMarca               = $arrayDatosNaf[0]['marcaElemento'];                
                        $strDescripcion         = $arrayDatosNaf[0]['descripcion'];  
                        $intIdMarca             = $arrayDatosNaf[0]['idMarcaElemento'];
                        $intIdModelo            = $arrayDatosNaf[0]['idModeloElemento'];
                        $strMac                 = $arrayDatosNaf[0]['mac'];
                        $strCapadidadEntrada    = $arrayDatosNaf[0]['capacidadEntrada'];

                        $arrayRespuesta[] = array('status' => 'OK',
                                                    'mensaje' => str_replace(',', ' ', $strDescripcion) . "," 
                                                                                    . $strMac."," 
                                                                                    . $strModelo."," 
                                                                                    . $strCapadidadEntrada. "," 
                                                                                    . $strMarca.","
                                                                                    . $intIdMarca.","
                                                                                    . $intIdModelo);
                    }
                    else
                    {
                        $arrayRespuesta[] = array('status' => 'NO CONSTA EN NAF',
                                                    'mensaje' => 'El Elemento con <br>'
                                                . 'Serie:<b>' . $strSerie . ' </b><br>'
                                                . 'No concuerda con <br>'
                                                . 'Tipo:<b>' . $strTipo . ' </b><br>'
                                                . 'Por favor verificar con Bodega!<br>');
                    }
                }
                elseif($objNaf->getEstado()=='IN')
                {
                    $arrayRespuesta[] = array('status' => 'EQUIPO INSTALADO',
                                                'mensaje' => 'El Elemento con: <br>'
                                            . 'Serie:<b>' . $strSerie . ' </b><br>'
                                            . 'Ya se encuentra instalado <br>'
                                            . 'Por favor verificar con Bodega <br>');
                }
                elseif($objNaf->getEstado()=='PR')
                {
                    $arrayRespuesta[] = array('status' => 'EQUIPO CON ORDEN DE RETIRO',
                                                'mensaje' => 'El Elemento con: <br>'
                                                . 'Serie:<b>' . $strSerie . ' </b><br>'
                                                . 'Tiene una solicitud de retiro<br>'
                                                . 'Por favor verificar con Bodega <br>');
                }
                elseif($objNaf->getEstado()=='RE')
                {
                    $arrayRespuesta[] = array('status' => 'EQUIPO RETIRADO',
                                                'mensaje' => 'El Elemento con: <br>'
                                            . 'Serie:<b>' . $strSerie . ' </b><br>'
                                            . 'Ha sido retirado del Nodo, Por favor verificar! <br>');
                }
                elseif($objNaf->getEstado()=='IB')
                {
                    $arrayRespuesta[] = array('status' => 'EQUIPO INGRESADO A BODEGA',
                                                'mensaje' => 'El Elemento con: <br>'
                                            . 'Serie:<b>' . $strSerie . ' </b><br>'
                                            . 'Ha sido ingresado a Bodega, Por favor verificar! <br>');
                }
                elseif($intBandModelo==1)
                {
                    $arrayRespuesta[] = array('status' => 'MODELO NO REGULARIZADO',
                                                'mensaje' => 'El Elemento con: <br>'
                                            . 'Serie:<b>' . $strSerie . ' </b><br>'
                                            . 'Presenta un modelo no regularizado <br>'
                                            . 'Modelo:<b>' . $objNaf->getModelo() . ' </b><br>'
                                            . 'Por favor verificar que el modelo esté creado en Telcos! <br>'
                                        );
                }
                else
                {
                    $arrayRespuesta[] = array('status' => 'NO CONSTA EN NAF',
                                                'mensaje' => 'El Elemento con: <br>'
                                            . 'Serie:<b>' . $strSerie . ' </b><br>'
                                            . 'Estado:<b>' . $strEstado . ' </b><br>'
                                            . 'No se encuentra registrado en Naf<br>'
                                            . 'Por favor verificar con bodega <br>'); 
                }                
            }            
        }
        else
        {
            $arrayRespuesta[] = array('status' => 'NO CONSTA EN NAF',
                                          'mensaje' => 'El Elemento con: <br>'
                                        . 'Serie:<b>' . $strSerie . ' </b><br>'
                                        . 'No se encuentra registrado en Naf<br>'
                                        . 'Por favor verificar con bodega <br>'); 
        }
        return $arrayRespuesta;
    }


    /**
     * Funcion que permite generar automáticamente el nombre del elemento perteneciente a un nodo
     * @author Geovanny Cudco <acudco@telconet.ec>
     * @version 1.0 17-03-2023
     * 
     * @param Array $arrayParametros [$arrayParametros]
     * @throws Exception
     * @return Array $arrayResultado [ 'status'  => OK | ERROR
     *                                 'mensaje' => Mensaje de la ejecucion u error ]
    */    
    public function generarNombreAutomatico($arrayParametros)
    {
        $strTipoElemento        = $arrayParametros['strTipoElemento'];
        $intIdNodoContenedor    = $arrayParametros['intIdNodoContenedor'];
        $strClaseElemento       = $arrayParametros['strClaseElemento'];        
        $strContenedor          = $arrayParametros['strContenedor'];


        $objAdmiParametroCab    = $this->emComercial->getRepository('schemaBundle:AdmiParametroCab')
                                                ->findOneBy(array(
                                                                   'nombreParametro'   => 'ELEMENTOS NODOS',
                                                                   'estado'            => 'Activo'
                                                                )
                                                            );
        
        if(is_object($objAdmiParametroCab) && !empty($objAdmiParametroCab))
        {
            $intIdParametroCab = $objAdmiParametroCab->getId();
        }
        else
        {
            throw new \Exception("Error al obtener el Parámetro: ELEMENTOS NODOS");
        }       
        
        $objAdmiParametroDet = $this->emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                         ->findOneBy(array(
                                                              'parametroId'  => $intIdParametroCab,
                                                              'valor1'       => $strTipoElemento,
                                                              'estado'       => 'Activo'
                                                            )
                                                      );

        if(is_object($objAdmiParametroDet) && !empty($objAdmiParametroDet))
        {
            $strAbreviatura = $objAdmiParametroDet->getValor3();
        }
        else
        {
            throw new \Exception("Error al obtener el Parámetro: ELEMENTOS NODOS");
        }

        if($strClaseElemento=='PRIMARIO')
        {
            $strClase = 'A';
        }
        elseif($strClaseElemento=='SECUNDARIO')
        {
            $strClase = 'B';
        }
        else
        {
            $arrayDatosNombre = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                           ->getDatosNombreAutomatico(array('strTipoElemento' => $strTipoElemento,
                                                                            'intIdNodoContenedor' => $intIdNodoContenedor,
                                                                            'strBndera' => 'SIN_CLASE'));

            if(isset($arrayDatosNombre) && !empty($arrayDatosNombre))
            {
                $strNombreNodoContenedor    = $arrayDatosNombre[0]['strContenedor'];
                $strNombreTemp              = $arrayDatosNombre[0]['strNombreElemento'];

                $intIndice = strlen($strAbreviatura);
                $intOrden = substr($strNombreTemp, $intIndice, ($intIndice+1) )+1;

                if($strContenedor=='NODO')
                {                
                    $strSiglaCiudad             = $arrayDatosNombre[0]['strSiglaCanton'];                            
                    $strMensaje = $strAbreviatura.$intOrden."_".$strNombreNodoContenedor."_".$strSiglaCiudad;
                    $arrayRespuesta[] = array('status'  => 'OK',
                                            'mensaje' => $strMensaje);
                }
                else
                {                               
                    $strMensaje = $strAbreviatura.$intOrden."_".$strNombreNodoContenedor;
                    $arrayRespuesta[] = array('status'  => 'OK',
                                            'mensaje' => $strMensaje);
                } 
            }
            else
            {
                if($strContenedor=='NODO') //verifica si tiene contenedor   
                {
                    $arrayDatosNombre = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                            ->getDatosNombreAutomatico(array(
                                                                                'intIdNodoContenedor' => $intIdNodoContenedor,
                                                                                'strBndera'           => 'NUEVO'
                                                                                )
                                                                        );

                    $strNombreNodoContenedor    = $arrayDatosNombre[0]['strContenedor'];
                    $strSiglaCiudad             = $arrayDatosNombre[0]['strSiglaCanton'];

                    if(!$strNombreNodoContenedor)
                    {
                        $arrayDatosNombre = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                                            ->getDatosNombreAutomatico(array(
                                                                                                'intIdNodoContenedor' => $intIdNodoContenedor,
                                                                                                'strBndera'           => 'NODO_VACIO'
                                                                                                )
                                                                                        );
                        $strNombreNodoContenedor    = $arrayDatosNombre[0]['strContenedor'];
                        $strSiglaCiudad             = $arrayDatosNombre[0]['strSiglaCanton'];
                    }
                    $strMensaje = $strAbreviatura."1".$strClase."_".$strNombreNodoContenedor."_".$strSiglaCiudad;
                    $arrayRespuesta[] = array('status'  => 'OK',
                                            'mensaje' => $strMensaje);                                                                     
                }
                else
                {                
                    $objElementoNodo = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                            ->findOneBy( array('id' => $intIdNodoContenedor, 'estado' => 'Activo') );

                    $strNombreNodoContenedor = $objElementoNodo->getNombreElemento();
                    $strMensaje = $strAbreviatura."1".$strClase."_".$strNombreNodoContenedor;
                    $arrayRespuesta[] = array('status'  => 'OK',
                                            'mensaje' => $strMensaje);                                                     
                }
            }

        }
                
        $arrayDatosNombre = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                           ->getDatosNombreAutomatico(array(
                                                                              'strTipoElemento'     => $strTipoElemento,
                                                                              'intIdNodoContenedor' => $intIdNodoContenedor,
                                                                              'strClaseElemento'    => $strClaseElemento
                                                                            )
                                                                      );

        if(isset($arrayDatosNombre) && !empty($arrayDatosNombre))
        {
            $strNombreNodoContenedor    = $arrayDatosNombre[0]['strContenedor'];
            $strNombreTemp              = $arrayDatosNombre[0]['strNombreElemento'];

            $intIndice = strlen($strAbreviatura);
            $intOrden = substr($strNombreTemp, $intIndice, ($intIndice+1) )+1;

            if($strContenedor=='NODO')
            {                
                $strSiglaCiudad             = $arrayDatosNombre[0]['strSiglaCanton'];                            
                $strMensaje = $strAbreviatura.$intOrden.$strClase."_".$strNombreNodoContenedor."_".$strSiglaCiudad;
                $arrayRespuesta[] = array('status'  => 'OK',
                                        'mensaje' => $strMensaje);
            }
            else
            {                               
                $strMensaje = $strAbreviatura.$intOrden.$strClase."_".$strNombreNodoContenedor;
                $arrayRespuesta[] = array('status'  => 'OK',
                                        'mensaje' => $strMensaje);
            }            
        }
        else
        {                            
            if($strContenedor=='NODO') //verifica si tiene contenedor   
            {
                $arrayDatosNombre = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                           ->getDatosNombreAutomatico(array(
                                                                              'intIdNodoContenedor' => $intIdNodoContenedor,
                                                                              'strBndera'           => 'NUEVO'
                                                                            )
                                                                      );

                $strNombreNodoContenedor    = $arrayDatosNombre[0]['strContenedor'];
                $strSiglaCiudad             = $arrayDatosNombre[0]['strSiglaCanton'];

                if(!$strNombreNodoContenedor)
                {
                    $arrayDatosNombre = $this->emComercial->getRepository('schemaBundle:InArticulosInstalacion')
                                                        ->getDatosNombreAutomatico(array(
                                                                                            'intIdNodoContenedor' => $intIdNodoContenedor,
                                                                                            'strBndera'           => 'NODO_VACIO'
                                                                                            )
                                                                                    );
                    $strNombreNodoContenedor    = $arrayDatosNombre[0]['strContenedor'];
                    $strSiglaCiudad             = $arrayDatosNombre[0]['strSiglaCanton'];
                }
                $strMensaje = $strAbreviatura."1".$strClase."_".$strNombreNodoContenedor."_".$strSiglaCiudad;
                $arrayRespuesta[] = array('status'  => 'OK',
                                        'mensaje' => $strMensaje);                                                                     
            }
            else
            {                
                $objElementoNodo = $this->emComercial->getRepository('schemaBundle:InfoElemento')
                                                         ->findOneBy( array('id' => $intIdNodoContenedor, 'estado' => 'Activo') );

                $strNombreNodoContenedor = $objElementoNodo->getNombreElemento();
                $strMensaje = $strAbreviatura."1".$strClase."_".$strNombreNodoContenedor;
                $arrayRespuesta[] = array('status'  => 'OK',
                                        'mensaje' => $strMensaje);                                                     
            }
        }

        return $arrayRespuesta;
    }
}
